
Robot_4D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  0800ccf0  0800ccf0  0001ccf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d22c  0800d22c  000202c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d22c  0800d22c  0001d22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d234  0800d234  000202c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d234  0800d234  0001d234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d238  0800d238  0001d238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c4  20000000  0800d23c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202c4  2**0
                  CONTENTS
 10 .bss          00000664  200002c4  200002c4  000202c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000928  20000928  000202c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010b42  00000000  00000000  000202f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002389  00000000  00000000  00030e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e80  00000000  00000000  000331c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d98  00000000  00000000  00034040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000222a2  00000000  00000000  00034dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010847  00000000  00000000  0005707a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd581  00000000  00000000  000678c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00134e42  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005524  00000000  00000000  00134e94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ccd4 	.word	0x0800ccd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800ccd4 	.word	0x0800ccd4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_frsub>:
 8000c88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c8c:	e002      	b.n	8000c94 <__addsf3>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_fsub>:
 8000c90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c94 <__addsf3>:
 8000c94:	0042      	lsls	r2, r0, #1
 8000c96:	bf1f      	itttt	ne
 8000c98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c9c:	ea92 0f03 	teqne	r2, r3
 8000ca0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ca4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca8:	d06a      	beq.n	8000d80 <__addsf3+0xec>
 8000caa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cb2:	bfc1      	itttt	gt
 8000cb4:	18d2      	addgt	r2, r2, r3
 8000cb6:	4041      	eorgt	r1, r0
 8000cb8:	4048      	eorgt	r0, r1
 8000cba:	4041      	eorgt	r1, r0
 8000cbc:	bfb8      	it	lt
 8000cbe:	425b      	neglt	r3, r3
 8000cc0:	2b19      	cmp	r3, #25
 8000cc2:	bf88      	it	hi
 8000cc4:	4770      	bxhi	lr
 8000cc6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cd2:	bf18      	it	ne
 8000cd4:	4240      	negne	r0, r0
 8000cd6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cda:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cde:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4249      	negne	r1, r1
 8000ce6:	ea92 0f03 	teq	r2, r3
 8000cea:	d03f      	beq.n	8000d6c <__addsf3+0xd8>
 8000cec:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cf4:	eb10 000c 	adds.w	r0, r0, ip
 8000cf8:	f1c3 0320 	rsb	r3, r3, #32
 8000cfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000d00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__addsf3+0x78>
 8000d06:	4249      	negs	r1, r1
 8000d08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d10:	d313      	bcc.n	8000d3a <__addsf3+0xa6>
 8000d12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d16:	d306      	bcc.n	8000d26 <__addsf3+0x92>
 8000d18:	0840      	lsrs	r0, r0, #1
 8000d1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d1e:	f102 0201 	add.w	r2, r2, #1
 8000d22:	2afe      	cmp	r2, #254	; 0xfe
 8000d24:	d251      	bcs.n	8000dca <__addsf3+0x136>
 8000d26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2e:	bf08      	it	eq
 8000d30:	f020 0001 	biceq.w	r0, r0, #1
 8000d34:	ea40 0003 	orr.w	r0, r0, r3
 8000d38:	4770      	bx	lr
 8000d3a:	0049      	lsls	r1, r1, #1
 8000d3c:	eb40 0000 	adc.w	r0, r0, r0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	bf28      	it	cs
 8000d44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d48:	d2ed      	bcs.n	8000d26 <__addsf3+0x92>
 8000d4a:	fab0 fc80 	clz	ip, r0
 8000d4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d52:	ebb2 020c 	subs.w	r2, r2, ip
 8000d56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d5a:	bfaa      	itet	ge
 8000d5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d60:	4252      	neglt	r2, r2
 8000d62:	4318      	orrge	r0, r3
 8000d64:	bfbc      	itt	lt
 8000d66:	40d0      	lsrlt	r0, r2
 8000d68:	4318      	orrlt	r0, r3
 8000d6a:	4770      	bx	lr
 8000d6c:	f092 0f00 	teq	r2, #0
 8000d70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d74:	bf06      	itte	eq
 8000d76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d7a:	3201      	addeq	r2, #1
 8000d7c:	3b01      	subne	r3, #1
 8000d7e:	e7b5      	b.n	8000cec <__addsf3+0x58>
 8000d80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d88:	bf18      	it	ne
 8000d8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d8e:	d021      	beq.n	8000dd4 <__addsf3+0x140>
 8000d90:	ea92 0f03 	teq	r2, r3
 8000d94:	d004      	beq.n	8000da0 <__addsf3+0x10c>
 8000d96:	f092 0f00 	teq	r2, #0
 8000d9a:	bf08      	it	eq
 8000d9c:	4608      	moveq	r0, r1
 8000d9e:	4770      	bx	lr
 8000da0:	ea90 0f01 	teq	r0, r1
 8000da4:	bf1c      	itt	ne
 8000da6:	2000      	movne	r0, #0
 8000da8:	4770      	bxne	lr
 8000daa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dae:	d104      	bne.n	8000dba <__addsf3+0x126>
 8000db0:	0040      	lsls	r0, r0, #1
 8000db2:	bf28      	it	cs
 8000db4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dbe:	bf3c      	itt	cc
 8000dc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dc4:	4770      	bxcc	lr
 8000dc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dd8:	bf16      	itet	ne
 8000dda:	4608      	movne	r0, r1
 8000ddc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de0:	4601      	movne	r1, r0
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	bf06      	itte	eq
 8000de6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dea:	ea90 0f01 	teqeq	r0, r1
 8000dee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_ui2f>:
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e004      	b.n	8000e04 <__aeabi_i2f+0x8>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_i2f>:
 8000dfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e00:	bf48      	it	mi
 8000e02:	4240      	negmi	r0, r0
 8000e04:	ea5f 0c00 	movs.w	ip, r0
 8000e08:	bf08      	it	eq
 8000e0a:	4770      	bxeq	lr
 8000e0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e10:	4601      	mov	r1, r0
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	e01c      	b.n	8000e52 <__aeabi_l2f+0x2a>

08000e18 <__aeabi_ul2f>:
 8000e18:	ea50 0201 	orrs.w	r2, r0, r1
 8000e1c:	bf08      	it	eq
 8000e1e:	4770      	bxeq	lr
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e00a      	b.n	8000e3c <__aeabi_l2f+0x14>
 8000e26:	bf00      	nop

08000e28 <__aeabi_l2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e34:	d502      	bpl.n	8000e3c <__aeabi_l2f+0x14>
 8000e36:	4240      	negs	r0, r0
 8000e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3c:	ea5f 0c01 	movs.w	ip, r1
 8000e40:	bf02      	ittt	eq
 8000e42:	4684      	moveq	ip, r0
 8000e44:	4601      	moveq	r1, r0
 8000e46:	2000      	moveq	r0, #0
 8000e48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e4c:	bf08      	it	eq
 8000e4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e56:	fabc f28c 	clz	r2, ip
 8000e5a:	3a08      	subs	r2, #8
 8000e5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e60:	db10      	blt.n	8000e84 <__aeabi_l2f+0x5c>
 8000e62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e66:	4463      	add	r3, ip
 8000e68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6c:	f1c2 0220 	rsb	r2, r2, #32
 8000e70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e74:	fa20 f202 	lsr.w	r2, r0, r2
 8000e78:	eb43 0002 	adc.w	r0, r3, r2
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f102 0220 	add.w	r2, r2, #32
 8000e88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e94:	fa21 f202 	lsr.w	r2, r1, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_uldivmod>:
 8000ea4:	b953      	cbnz	r3, 8000ebc <__aeabi_uldivmod+0x18>
 8000ea6:	b94a      	cbnz	r2, 8000ebc <__aeabi_uldivmod+0x18>
 8000ea8:	2900      	cmp	r1, #0
 8000eaa:	bf08      	it	eq
 8000eac:	2800      	cmpeq	r0, #0
 8000eae:	bf1c      	itt	ne
 8000eb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000eb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000eb8:	f000 b9aa 	b.w	8001210 <__aeabi_idiv0>
 8000ebc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ec0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ec4:	f000 f83c 	bl	8000f40 <__udivmoddi4>
 8000ec8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ecc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ed0:	b004      	add	sp, #16
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_d2lz>:
 8000ed4:	b538      	push	{r3, r4, r5, lr}
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2300      	movs	r3, #0
 8000eda:	4604      	mov	r4, r0
 8000edc:	460d      	mov	r5, r1
 8000ede:	f7ff fdfd 	bl	8000adc <__aeabi_dcmplt>
 8000ee2:	b928      	cbnz	r0, 8000ef0 <__aeabi_d2lz+0x1c>
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	4629      	mov	r1, r5
 8000ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000eec:	f000 b80a 	b.w	8000f04 <__aeabi_d2ulz>
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000ef6:	f000 f805 	bl	8000f04 <__aeabi_d2ulz>
 8000efa:	4240      	negs	r0, r0
 8000efc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f00:	bd38      	pop	{r3, r4, r5, pc}
 8000f02:	bf00      	nop

08000f04 <__aeabi_d2ulz>:
 8000f04:	b5d0      	push	{r4, r6, r7, lr}
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <__aeabi_d2ulz+0x34>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	4606      	mov	r6, r0
 8000f0c:	460f      	mov	r7, r1
 8000f0e:	f7ff fb73 	bl	80005f8 <__aeabi_dmul>
 8000f12:	f7ff fe49 	bl	8000ba8 <__aeabi_d2uiz>
 8000f16:	4604      	mov	r4, r0
 8000f18:	f7ff faf4 	bl	8000504 <__aeabi_ui2d>
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <__aeabi_d2ulz+0x38>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f7ff fb6a 	bl	80005f8 <__aeabi_dmul>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4630      	mov	r0, r6
 8000f2a:	4639      	mov	r1, r7
 8000f2c:	f7ff f9ac 	bl	8000288 <__aeabi_dsub>
 8000f30:	f7ff fe3a 	bl	8000ba8 <__aeabi_d2uiz>
 8000f34:	4621      	mov	r1, r4
 8000f36:	bdd0      	pop	{r4, r6, r7, pc}
 8000f38:	3df00000 	.word	0x3df00000
 8000f3c:	41f00000 	.word	0x41f00000

08000f40 <__udivmoddi4>:
 8000f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f44:	9d08      	ldr	r5, [sp, #32]
 8000f46:	4604      	mov	r4, r0
 8000f48:	468e      	mov	lr, r1
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d14d      	bne.n	8000fea <__udivmoddi4+0xaa>
 8000f4e:	428a      	cmp	r2, r1
 8000f50:	4694      	mov	ip, r2
 8000f52:	d969      	bls.n	8001028 <__udivmoddi4+0xe8>
 8000f54:	fab2 f282 	clz	r2, r2
 8000f58:	b152      	cbz	r2, 8000f70 <__udivmoddi4+0x30>
 8000f5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000f5e:	f1c2 0120 	rsb	r1, r2, #32
 8000f62:	fa20 f101 	lsr.w	r1, r0, r1
 8000f66:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f6a:	ea41 0e03 	orr.w	lr, r1, r3
 8000f6e:	4094      	lsls	r4, r2
 8000f70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f74:	0c21      	lsrs	r1, r4, #16
 8000f76:	fbbe f6f8 	udiv	r6, lr, r8
 8000f7a:	fa1f f78c 	uxth.w	r7, ip
 8000f7e:	fb08 e316 	mls	r3, r8, r6, lr
 8000f82:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000f86:	fb06 f107 	mul.w	r1, r6, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d90a      	bls.n	8000fa4 <__udivmoddi4+0x64>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f96:	f080 811f 	bcs.w	80011d8 <__udivmoddi4+0x298>
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	f240 811c 	bls.w	80011d8 <__udivmoddi4+0x298>
 8000fa0:	3e02      	subs	r6, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1a5b      	subs	r3, r3, r1
 8000fa6:	b2a4      	uxth	r4, r4
 8000fa8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fac:	fb08 3310 	mls	r3, r8, r0, r3
 8000fb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb4:	fb00 f707 	mul.w	r7, r0, r7
 8000fb8:	42a7      	cmp	r7, r4
 8000fba:	d90a      	bls.n	8000fd2 <__udivmoddi4+0x92>
 8000fbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fc4:	f080 810a 	bcs.w	80011dc <__udivmoddi4+0x29c>
 8000fc8:	42a7      	cmp	r7, r4
 8000fca:	f240 8107 	bls.w	80011dc <__udivmoddi4+0x29c>
 8000fce:	4464      	add	r4, ip
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000fd6:	1be4      	subs	r4, r4, r7
 8000fd8:	2600      	movs	r6, #0
 8000fda:	b11d      	cbz	r5, 8000fe4 <__udivmoddi4+0xa4>
 8000fdc:	40d4      	lsrs	r4, r2
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e9c5 4300 	strd	r4, r3, [r5]
 8000fe4:	4631      	mov	r1, r6
 8000fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fea:	428b      	cmp	r3, r1
 8000fec:	d909      	bls.n	8001002 <__udivmoddi4+0xc2>
 8000fee:	2d00      	cmp	r5, #0
 8000ff0:	f000 80ef 	beq.w	80011d2 <__udivmoddi4+0x292>
 8000ff4:	2600      	movs	r6, #0
 8000ff6:	e9c5 0100 	strd	r0, r1, [r5]
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	4631      	mov	r1, r6
 8000ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001002:	fab3 f683 	clz	r6, r3
 8001006:	2e00      	cmp	r6, #0
 8001008:	d14a      	bne.n	80010a0 <__udivmoddi4+0x160>
 800100a:	428b      	cmp	r3, r1
 800100c:	d302      	bcc.n	8001014 <__udivmoddi4+0xd4>
 800100e:	4282      	cmp	r2, r0
 8001010:	f200 80f9 	bhi.w	8001206 <__udivmoddi4+0x2c6>
 8001014:	1a84      	subs	r4, r0, r2
 8001016:	eb61 0303 	sbc.w	r3, r1, r3
 800101a:	2001      	movs	r0, #1
 800101c:	469e      	mov	lr, r3
 800101e:	2d00      	cmp	r5, #0
 8001020:	d0e0      	beq.n	8000fe4 <__udivmoddi4+0xa4>
 8001022:	e9c5 4e00 	strd	r4, lr, [r5]
 8001026:	e7dd      	b.n	8000fe4 <__udivmoddi4+0xa4>
 8001028:	b902      	cbnz	r2, 800102c <__udivmoddi4+0xec>
 800102a:	deff      	udf	#255	; 0xff
 800102c:	fab2 f282 	clz	r2, r2
 8001030:	2a00      	cmp	r2, #0
 8001032:	f040 8092 	bne.w	800115a <__udivmoddi4+0x21a>
 8001036:	eba1 010c 	sub.w	r1, r1, ip
 800103a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800103e:	fa1f fe8c 	uxth.w	lr, ip
 8001042:	2601      	movs	r6, #1
 8001044:	0c20      	lsrs	r0, r4, #16
 8001046:	fbb1 f3f7 	udiv	r3, r1, r7
 800104a:	fb07 1113 	mls	r1, r7, r3, r1
 800104e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001052:	fb0e f003 	mul.w	r0, lr, r3
 8001056:	4288      	cmp	r0, r1
 8001058:	d908      	bls.n	800106c <__udivmoddi4+0x12c>
 800105a:	eb1c 0101 	adds.w	r1, ip, r1
 800105e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001062:	d202      	bcs.n	800106a <__udivmoddi4+0x12a>
 8001064:	4288      	cmp	r0, r1
 8001066:	f200 80cb 	bhi.w	8001200 <__udivmoddi4+0x2c0>
 800106a:	4643      	mov	r3, r8
 800106c:	1a09      	subs	r1, r1, r0
 800106e:	b2a4      	uxth	r4, r4
 8001070:	fbb1 f0f7 	udiv	r0, r1, r7
 8001074:	fb07 1110 	mls	r1, r7, r0, r1
 8001078:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800107c:	fb0e fe00 	mul.w	lr, lr, r0
 8001080:	45a6      	cmp	lr, r4
 8001082:	d908      	bls.n	8001096 <__udivmoddi4+0x156>
 8001084:	eb1c 0404 	adds.w	r4, ip, r4
 8001088:	f100 31ff 	add.w	r1, r0, #4294967295
 800108c:	d202      	bcs.n	8001094 <__udivmoddi4+0x154>
 800108e:	45a6      	cmp	lr, r4
 8001090:	f200 80bb 	bhi.w	800120a <__udivmoddi4+0x2ca>
 8001094:	4608      	mov	r0, r1
 8001096:	eba4 040e 	sub.w	r4, r4, lr
 800109a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800109e:	e79c      	b.n	8000fda <__udivmoddi4+0x9a>
 80010a0:	f1c6 0720 	rsb	r7, r6, #32
 80010a4:	40b3      	lsls	r3, r6
 80010a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80010aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80010ae:	fa20 f407 	lsr.w	r4, r0, r7
 80010b2:	fa01 f306 	lsl.w	r3, r1, r6
 80010b6:	431c      	orrs	r4, r3
 80010b8:	40f9      	lsrs	r1, r7
 80010ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80010be:	fa00 f306 	lsl.w	r3, r0, r6
 80010c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80010c6:	0c20      	lsrs	r0, r4, #16
 80010c8:	fa1f fe8c 	uxth.w	lr, ip
 80010cc:	fb09 1118 	mls	r1, r9, r8, r1
 80010d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010d4:	fb08 f00e 	mul.w	r0, r8, lr
 80010d8:	4288      	cmp	r0, r1
 80010da:	fa02 f206 	lsl.w	r2, r2, r6
 80010de:	d90b      	bls.n	80010f8 <__udivmoddi4+0x1b8>
 80010e0:	eb1c 0101 	adds.w	r1, ip, r1
 80010e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80010e8:	f080 8088 	bcs.w	80011fc <__udivmoddi4+0x2bc>
 80010ec:	4288      	cmp	r0, r1
 80010ee:	f240 8085 	bls.w	80011fc <__udivmoddi4+0x2bc>
 80010f2:	f1a8 0802 	sub.w	r8, r8, #2
 80010f6:	4461      	add	r1, ip
 80010f8:	1a09      	subs	r1, r1, r0
 80010fa:	b2a4      	uxth	r4, r4
 80010fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8001100:	fb09 1110 	mls	r1, r9, r0, r1
 8001104:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001108:	fb00 fe0e 	mul.w	lr, r0, lr
 800110c:	458e      	cmp	lr, r1
 800110e:	d908      	bls.n	8001122 <__udivmoddi4+0x1e2>
 8001110:	eb1c 0101 	adds.w	r1, ip, r1
 8001114:	f100 34ff 	add.w	r4, r0, #4294967295
 8001118:	d26c      	bcs.n	80011f4 <__udivmoddi4+0x2b4>
 800111a:	458e      	cmp	lr, r1
 800111c:	d96a      	bls.n	80011f4 <__udivmoddi4+0x2b4>
 800111e:	3802      	subs	r0, #2
 8001120:	4461      	add	r1, ip
 8001122:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001126:	fba0 9402 	umull	r9, r4, r0, r2
 800112a:	eba1 010e 	sub.w	r1, r1, lr
 800112e:	42a1      	cmp	r1, r4
 8001130:	46c8      	mov	r8, r9
 8001132:	46a6      	mov	lr, r4
 8001134:	d356      	bcc.n	80011e4 <__udivmoddi4+0x2a4>
 8001136:	d053      	beq.n	80011e0 <__udivmoddi4+0x2a0>
 8001138:	b15d      	cbz	r5, 8001152 <__udivmoddi4+0x212>
 800113a:	ebb3 0208 	subs.w	r2, r3, r8
 800113e:	eb61 010e 	sbc.w	r1, r1, lr
 8001142:	fa01 f707 	lsl.w	r7, r1, r7
 8001146:	fa22 f306 	lsr.w	r3, r2, r6
 800114a:	40f1      	lsrs	r1, r6
 800114c:	431f      	orrs	r7, r3
 800114e:	e9c5 7100 	strd	r7, r1, [r5]
 8001152:	2600      	movs	r6, #0
 8001154:	4631      	mov	r1, r6
 8001156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800115a:	f1c2 0320 	rsb	r3, r2, #32
 800115e:	40d8      	lsrs	r0, r3
 8001160:	fa0c fc02 	lsl.w	ip, ip, r2
 8001164:	fa21 f303 	lsr.w	r3, r1, r3
 8001168:	4091      	lsls	r1, r2
 800116a:	4301      	orrs	r1, r0
 800116c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001170:	fa1f fe8c 	uxth.w	lr, ip
 8001174:	fbb3 f0f7 	udiv	r0, r3, r7
 8001178:	fb07 3610 	mls	r6, r7, r0, r3
 800117c:	0c0b      	lsrs	r3, r1, #16
 800117e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001182:	fb00 f60e 	mul.w	r6, r0, lr
 8001186:	429e      	cmp	r6, r3
 8001188:	fa04 f402 	lsl.w	r4, r4, r2
 800118c:	d908      	bls.n	80011a0 <__udivmoddi4+0x260>
 800118e:	eb1c 0303 	adds.w	r3, ip, r3
 8001192:	f100 38ff 	add.w	r8, r0, #4294967295
 8001196:	d22f      	bcs.n	80011f8 <__udivmoddi4+0x2b8>
 8001198:	429e      	cmp	r6, r3
 800119a:	d92d      	bls.n	80011f8 <__udivmoddi4+0x2b8>
 800119c:	3802      	subs	r0, #2
 800119e:	4463      	add	r3, ip
 80011a0:	1b9b      	subs	r3, r3, r6
 80011a2:	b289      	uxth	r1, r1
 80011a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80011a8:	fb07 3316 	mls	r3, r7, r6, r3
 80011ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80011b0:	fb06 f30e 	mul.w	r3, r6, lr
 80011b4:	428b      	cmp	r3, r1
 80011b6:	d908      	bls.n	80011ca <__udivmoddi4+0x28a>
 80011b8:	eb1c 0101 	adds.w	r1, ip, r1
 80011bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80011c0:	d216      	bcs.n	80011f0 <__udivmoddi4+0x2b0>
 80011c2:	428b      	cmp	r3, r1
 80011c4:	d914      	bls.n	80011f0 <__udivmoddi4+0x2b0>
 80011c6:	3e02      	subs	r6, #2
 80011c8:	4461      	add	r1, ip
 80011ca:	1ac9      	subs	r1, r1, r3
 80011cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80011d0:	e738      	b.n	8001044 <__udivmoddi4+0x104>
 80011d2:	462e      	mov	r6, r5
 80011d4:	4628      	mov	r0, r5
 80011d6:	e705      	b.n	8000fe4 <__udivmoddi4+0xa4>
 80011d8:	4606      	mov	r6, r0
 80011da:	e6e3      	b.n	8000fa4 <__udivmoddi4+0x64>
 80011dc:	4618      	mov	r0, r3
 80011de:	e6f8      	b.n	8000fd2 <__udivmoddi4+0x92>
 80011e0:	454b      	cmp	r3, r9
 80011e2:	d2a9      	bcs.n	8001138 <__udivmoddi4+0x1f8>
 80011e4:	ebb9 0802 	subs.w	r8, r9, r2
 80011e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80011ec:	3801      	subs	r0, #1
 80011ee:	e7a3      	b.n	8001138 <__udivmoddi4+0x1f8>
 80011f0:	4646      	mov	r6, r8
 80011f2:	e7ea      	b.n	80011ca <__udivmoddi4+0x28a>
 80011f4:	4620      	mov	r0, r4
 80011f6:	e794      	b.n	8001122 <__udivmoddi4+0x1e2>
 80011f8:	4640      	mov	r0, r8
 80011fa:	e7d1      	b.n	80011a0 <__udivmoddi4+0x260>
 80011fc:	46d0      	mov	r8, sl
 80011fe:	e77b      	b.n	80010f8 <__udivmoddi4+0x1b8>
 8001200:	3b02      	subs	r3, #2
 8001202:	4461      	add	r1, ip
 8001204:	e732      	b.n	800106c <__udivmoddi4+0x12c>
 8001206:	4630      	mov	r0, r6
 8001208:	e709      	b.n	800101e <__udivmoddi4+0xde>
 800120a:	4464      	add	r4, ip
 800120c:	3802      	subs	r0, #2
 800120e:	e742      	b.n	8001096 <__udivmoddi4+0x156>

08001210 <__aeabi_idiv0>:
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop

08001214 <UART_Handle>:
float setpoint1, setpoint2, setpoint3, setpoint4;
float preSetpoint1, preSetpoint2, preSetpoint3, preSetpoint4;
float p0_1=0, p0_2=0, p0_3=0, p0_4=0;

void UART_Handle(char* data)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af02      	add	r7, sp, #8
 800121a:	6078      	str	r0, [r7, #4]
  if (flag_uart_rx == 1 && strstr(data, "\n"))
 800121c:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <UART_Handle+0xc0>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d153      	bne.n	80012cc <UART_Handle+0xb8>
 8001224:	210a      	movs	r1, #10
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f007 fb99 	bl	800895e <strchr>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d04c      	beq.n	80012cc <UART_Handle+0xb8>
  {
	if (strstr(data, "t1"))
 8001232:	4929      	ldr	r1, [pc, #164]	; (80012d8 <UART_Handle+0xc4>)
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f007 fb9f 	bl	8008978 <strstr>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d00a      	beq.n	8001256 <UART_Handle+0x42>
	{
		sscanf(data, "t1:%f,t2:%f,t3:%f,t4:%f\n", &setpoint1, &setpoint2, &setpoint3, &setpoint4);
 8001240:	4b26      	ldr	r3, [pc, #152]	; (80012dc <UART_Handle+0xc8>)
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <UART_Handle+0xcc>)
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <UART_Handle+0xd0>)
 800124a:	4a27      	ldr	r2, [pc, #156]	; (80012e8 <UART_Handle+0xd4>)
 800124c:	4927      	ldr	r1, [pc, #156]	; (80012ec <UART_Handle+0xd8>)
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f007 fb14 	bl	800887c <siscanf>
 8001254:	e02e      	b.n	80012b4 <UART_Handle+0xa0>
//      MOTOR_setAngle(&motor1, t1);
//      MOTOR_setAngle(&motor2, t2);
//      MOTOR_setAngle(&motor3, t3);
//      MOTOR_setAngle(&motor4, t4);
	}
	else if (strstr(data, "home"))
 8001256:	4926      	ldr	r1, [pc, #152]	; (80012f0 <UART_Handle+0xdc>)
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f007 fb8d 	bl	8008978 <strstr>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d01e      	beq.n	80012a2 <UART_Handle+0x8e>
	{
		setHome234Flag = 1;
 8001264:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <UART_Handle+0xe0>)
 8001266:	2201      	movs	r2, #1
 8001268:	701a      	strb	r2, [r3, #0]
		setHome1234Flag = 1;
 800126a:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <UART_Handle+0xe4>)
 800126c:	2201      	movs	r2, #1
 800126e:	701a      	strb	r2, [r3, #0]
		setHomeJ1 = setHomeJ2 = setHomeJ3 = setHomeJ4 = 0;
 8001270:	4b22      	ldr	r3, [pc, #136]	; (80012fc <UART_Handle+0xe8>)
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
 8001276:	4b21      	ldr	r3, [pc, #132]	; (80012fc <UART_Handle+0xe8>)
 8001278:	781a      	ldrb	r2, [r3, #0]
 800127a:	4b21      	ldr	r3, [pc, #132]	; (8001300 <UART_Handle+0xec>)
 800127c:	701a      	strb	r2, [r3, #0]
 800127e:	4b20      	ldr	r3, [pc, #128]	; (8001300 <UART_Handle+0xec>)
 8001280:	781a      	ldrb	r2, [r3, #0]
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <UART_Handle+0xf0>)
 8001284:	701a      	strb	r2, [r3, #0]
 8001286:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <UART_Handle+0xf0>)
 8001288:	781a      	ldrb	r2, [r3, #0]
 800128a:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <UART_Handle+0xf4>)
 800128c:	701a      	strb	r2, [r3, #0]
		if(setHomeOk == 0) MOTOR_setAngle(&motor2, 300);
 800128e:	4b1f      	ldr	r3, [pc, #124]	; (800130c <UART_Handle+0xf8>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10e      	bne.n	80012b4 <UART_Handle+0xa0>
 8001296:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8001310 <UART_Handle+0xfc>
 800129a:	481e      	ldr	r0, [pc, #120]	; (8001314 <UART_Handle+0x100>)
 800129c:	f006 f96c 	bl	8007578 <MOTOR_setAngle>
 80012a0:	e008      	b.n	80012b4 <UART_Handle+0xa0>
	}
	else if(strstr(data,"Reset"))
 80012a2:	491d      	ldr	r1, [pc, #116]	; (8001318 <UART_Handle+0x104>)
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f007 fb67 	bl	8008978 <strstr>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <UART_Handle+0xa0>
	{
		HAL_NVIC_SystemReset();
 80012b0:	f002 f83f 	bl	8003332 <HAL_NVIC_SystemReset>
	}
	  flag_uart_rx = 0;
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <UART_Handle+0xc0>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
	  memset(data, 0, strlen(data));
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7fe ff88 	bl	80001d0 <strlen>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	2100      	movs	r1, #0
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f006 fc30 	bl	8007b2c <memset>
  }
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200005e0 	.word	0x200005e0
 80012d8:	0800ccf0 	.word	0x0800ccf0
 80012dc:	200008e8 	.word	0x200008e8
 80012e0:	200008e4 	.word	0x200008e4
 80012e4:	200008e0 	.word	0x200008e0
 80012e8:	200008dc 	.word	0x200008dc
 80012ec:	0800ccf4 	.word	0x0800ccf4
 80012f0:	0800cd10 	.word	0x0800cd10
 80012f4:	200005e9 	.word	0x200005e9
 80012f8:	200005ea 	.word	0x200005ea
 80012fc:	200005e8 	.word	0x200005e8
 8001300:	200005e7 	.word	0x200005e7
 8001304:	200005e6 	.word	0x200005e6
 8001308:	200005e5 	.word	0x200005e5
 800130c:	200005e4 	.word	0x200005e4
 8001310:	43960000 	.word	0x43960000
 8001314:	200006a4 	.word	0x200006a4
 8001318:	0800cd18 	.word	0x0800cd18

0800131c <UartIdle_Init>:
void UartIdle_Init()
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*)uartLogBuffer, MAX_MESG);
 8001320:	2264      	movs	r2, #100	; 0x64
 8001322:	4907      	ldr	r1, [pc, #28]	; (8001340 <UartIdle_Init+0x24>)
 8001324:	4807      	ldr	r0, [pc, #28]	; (8001344 <UartIdle_Init+0x28>)
 8001326:	f004 fdb8 	bl	8005e9a <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 800132a:	4b07      	ldr	r3, [pc, #28]	; (8001348 <UartIdle_Init+0x2c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <UartIdle_Init+0x2c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0208 	bic.w	r2, r2, #8
 8001338:	601a      	str	r2, [r3, #0]
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000057c 	.word	0x2000057c
 8001344:	200004d8 	.word	0x200004d8
 8001348:	2000051c 	.word	0x2000051c

0800134c <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef* huart, uint16_t Size)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART3)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a08      	ldr	r2, [pc, #32]	; (8001380 <HAL_UARTEx_RxEventCallback+0x34>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d10a      	bne.n	8001378 <HAL_UARTEx_RxEventCallback+0x2c>
  {
    uartLogRxSize = Size;
 8001362:	4a08      	ldr	r2, [pc, #32]	; (8001384 <HAL_UARTEx_RxEventCallback+0x38>)
 8001364:	887b      	ldrh	r3, [r7, #2]
 8001366:	8013      	strh	r3, [r2, #0]
    flag_uart_rx = 1;
 8001368:	4b07      	ldr	r3, [pc, #28]	; (8001388 <HAL_UARTEx_RxEventCallback+0x3c>)
 800136a:	2201      	movs	r2, #1
 800136c:	701a      	strb	r2, [r3, #0]
    HAL_UARTEx_ReceiveToIdle_DMA(huart, (uint8_t*)uartLogBuffer, MAX_MESG);
 800136e:	2264      	movs	r2, #100	; 0x64
 8001370:	4906      	ldr	r1, [pc, #24]	; (800138c <HAL_UARTEx_RxEventCallback+0x40>)
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f004 fd91 	bl	8005e9a <HAL_UARTEx_ReceiveToIdle_DMA>
  }
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40004800 	.word	0x40004800
 8001384:	200005e2 	.word	0x200005e2
 8001388:	200005e0 	.word	0x200005e0
 800138c:	2000057c 	.word	0x2000057c

08001390 <p>:

float p(float p0, float pf, float tf, float v0, float vf, float T)
{
 8001390:	b480      	push	{r7}
 8001392:	b087      	sub	sp, #28
 8001394:	af00      	add	r7, sp, #0
 8001396:	ed87 0a05 	vstr	s0, [r7, #20]
 800139a:	edc7 0a04 	vstr	s1, [r7, #16]
 800139e:	ed87 1a03 	vstr	s2, [r7, #12]
 80013a2:	edc7 1a02 	vstr	s3, [r7, #8]
 80013a6:	ed87 2a01 	vstr	s4, [r7, #4]
 80013aa:	edc7 2a00 	vstr	s5, [r7]
    return p0+v0*T+(3*(pf-p0)/(tf*tf)-2*v0/tf-vf/tf)*(T*T)+(-2*(pf-p0)/(tf*tf*tf)+(vf+v0)/(tf*tf))*(T*T*T);
 80013ae:	ed97 7a02 	vldr	s14, [r7, #8]
 80013b2:	edd7 7a00 	vldr	s15, [r7]
 80013b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80013be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013c2:	edd7 6a04 	vldr	s13, [r7, #16]
 80013c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80013ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80013ce:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80013d2:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80013d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80013da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80013de:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80013e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80013e6:	ee77 5aa7 	vadd.f32	s11, s15, s15
 80013ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80013ee:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80013f2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80013f6:	edd7 5a01 	vldr	s11, [r7, #4]
 80013fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80013fe:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8001402:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001406:	edd7 7a00 	vldr	s15, [r7]
 800140a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800140e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001412:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001416:	edd7 6a04 	vldr	s13, [r7, #16]
 800141a:	edd7 7a05 	vldr	s15, [r7, #20]
 800141e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001422:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
 8001426:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800142a:	edd7 7a03 	vldr	s15, [r7, #12]
 800142e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001432:	edd7 7a03 	vldr	s15, [r7, #12]
 8001436:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800143a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800143e:	ed97 6a01 	vldr	s12, [r7, #4]
 8001442:	edd7 7a02 	vldr	s15, [r7, #8]
 8001446:	ee76 5a27 	vadd.f32	s11, s12, s15
 800144a:	edd7 7a03 	vldr	s15, [r7, #12]
 800144e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8001452:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8001456:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800145a:	edd7 7a00 	vldr	s15, [r7]
 800145e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8001462:	edd7 7a00 	vldr	s15, [r7]
 8001466:	ee66 7a27 	vmul.f32	s15, s12, s15
 800146a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800146e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001472:	eeb0 0a67 	vmov.f32	s0, s15
 8001476:	371c      	adds	r7, #28
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	if(htim == &htim9)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a93      	ldr	r2, [pc, #588]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800148c:	4293      	cmp	r3, r2
 800148e:	f040 81bd 	bne.w	800180c <HAL_TIM_PeriodElapsedCallback+0x38c>
	{
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001492:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001496:	4891      	ldr	r0, [pc, #580]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001498:	f002 fd2b 	bl	8003ef2 <HAL_GPIO_TogglePin>
	  static uint8_t mode = 0;
	  switch (mode)
 800149c:	4b90      	ldr	r3, [pc, #576]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b04      	cmp	r3, #4
 80014a2:	f200 81b5 	bhi.w	8001810 <HAL_TIM_PeriodElapsedCallback+0x390>
 80014a6:	a201      	add	r2, pc, #4	; (adr r2, 80014ac <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80014a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ac:	080014c1 	.word	0x080014c1
 80014b0:	08001547 	.word	0x08001547
 80014b4:	080015cd 	.word	0x080015cd
 80014b8:	08001653 	.word	0x08001653
 80014bc:	0800172d 	.word	0x0800172d
	  {
	  case 0:
		if(T1 <= Tf)
 80014c0:	4b88      	ldr	r3, [pc, #544]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	ee07 3a90 	vmov	s15, r3
 80014c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014cc:	4b86      	ldr	r3, [pc, #536]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80014ce:	edd3 7a00 	vldr	s15, [r3]
 80014d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014da:	db2d      	blt.n	8001538 <HAL_TIM_PeriodElapsedCallback+0xb8>
		{
			T1 += 5;
 80014dc:	4b82      	ldr	r3, [pc, #520]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80014e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014ea:	4b7f      	ldr	r3, [pc, #508]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80014ec:	edc3 7a00 	vstr	s15, [r3]
			MOTOR_setAngle(&motor1, p(p0_1, setpoint1, Tf, 0, 0, T1));
 80014f0:	4b7e      	ldr	r3, [pc, #504]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80014f2:	edd3 7a00 	vldr	s15, [r3]
 80014f6:	4b7e      	ldr	r3, [pc, #504]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80014f8:	ed93 7a00 	vldr	s14, [r3]
 80014fc:	4b79      	ldr	r3, [pc, #484]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	ee06 3a90 	vmov	s13, r3
 8001504:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8001508:	4b77      	ldr	r3, [pc, #476]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800150a:	ed93 6a00 	vldr	s12, [r3]
 800150e:	eef0 2a46 	vmov.f32	s5, s12
 8001512:	ed9f 2a78 	vldr	s4, [pc, #480]	; 80016f4 <HAL_TIM_PeriodElapsedCallback+0x274>
 8001516:	eddf 1a77 	vldr	s3, [pc, #476]	; 80016f4 <HAL_TIM_PeriodElapsedCallback+0x274>
 800151a:	eeb0 1a66 	vmov.f32	s2, s13
 800151e:	eef0 0a47 	vmov.f32	s1, s14
 8001522:	eeb0 0a67 	vmov.f32	s0, s15
 8001526:	f7ff ff33 	bl	8001390 <p>
 800152a:	eef0 7a40 	vmov.f32	s15, s0
 800152e:	eeb0 0a67 	vmov.f32	s0, s15
 8001532:	4871      	ldr	r0, [pc, #452]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001534:	f006 f820 	bl	8007578 <MOTOR_setAngle>
		}
		MOTOR_runAngle(&motor1);
 8001538:	486f      	ldr	r0, [pc, #444]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800153a:	f006 f833 	bl	80075a4 <MOTOR_runAngle>
		mode = 1;
 800153e:	4b68      	ldr	r3, [pc, #416]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001540:	2201      	movs	r2, #1
 8001542:	701a      	strb	r2, [r3, #0]
		break;
 8001544:	e165      	b.n	8001812 <HAL_TIM_PeriodElapsedCallback+0x392>
	  case 1:
		if(T2 <= Tf)
 8001546:	4b67      	ldr	r3, [pc, #412]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	ee07 3a90 	vmov	s15, r3
 800154e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001552:	4b6a      	ldr	r3, [pc, #424]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800155c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001560:	db2d      	blt.n	80015be <HAL_TIM_PeriodElapsedCallback+0x13e>
		{
			T2 += 5;
 8001562:	4b66      	ldr	r3, [pc, #408]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001564:	edd3 7a00 	vldr	s15, [r3]
 8001568:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800156c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001570:	4b62      	ldr	r3, [pc, #392]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001572:	edc3 7a00 	vstr	s15, [r3]
			MOTOR_setAngle(&motor2, p(p0_2, setpoint2, Tf, 0, 0, T2));
 8001576:	4b62      	ldr	r3, [pc, #392]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001578:	edd3 7a00 	vldr	s15, [r3]
 800157c:	4b61      	ldr	r3, [pc, #388]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800157e:	ed93 7a00 	vldr	s14, [r3]
 8001582:	4b58      	ldr	r3, [pc, #352]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	ee06 3a90 	vmov	s13, r3
 800158a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800158e:	4b5b      	ldr	r3, [pc, #364]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001590:	ed93 6a00 	vldr	s12, [r3]
 8001594:	eef0 2a46 	vmov.f32	s5, s12
 8001598:	ed9f 2a56 	vldr	s4, [pc, #344]	; 80016f4 <HAL_TIM_PeriodElapsedCallback+0x274>
 800159c:	eddf 1a55 	vldr	s3, [pc, #340]	; 80016f4 <HAL_TIM_PeriodElapsedCallback+0x274>
 80015a0:	eeb0 1a66 	vmov.f32	s2, s13
 80015a4:	eef0 0a47 	vmov.f32	s1, s14
 80015a8:	eeb0 0a67 	vmov.f32	s0, s15
 80015ac:	f7ff fef0 	bl	8001390 <p>
 80015b0:	eef0 7a40 	vmov.f32	s15, s0
 80015b4:	eeb0 0a67 	vmov.f32	s0, s15
 80015b8:	4853      	ldr	r0, [pc, #332]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80015ba:	f005 ffdd 	bl	8007578 <MOTOR_setAngle>
		}
		MOTOR_runAngle(&motor2);
 80015be:	4852      	ldr	r0, [pc, #328]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80015c0:	f005 fff0 	bl	80075a4 <MOTOR_runAngle>
		mode = 2;
 80015c4:	4b46      	ldr	r3, [pc, #280]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80015c6:	2202      	movs	r2, #2
 80015c8:	701a      	strb	r2, [r3, #0]
		break;
 80015ca:	e122      	b.n	8001812 <HAL_TIM_PeriodElapsedCallback+0x392>
	  case 2:
		if(T3 <= Tf)
 80015cc:	4b45      	ldr	r3, [pc, #276]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	ee07 3a90 	vmov	s15, r3
 80015d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015d8:	4b4c      	ldr	r3, [pc, #304]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80015da:	edd3 7a00 	vldr	s15, [r3]
 80015de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e6:	db2d      	blt.n	8001644 <HAL_TIM_PeriodElapsedCallback+0x1c4>
		{
			T3 += 5;
 80015e8:	4b48      	ldr	r3, [pc, #288]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80015f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015f6:	4b45      	ldr	r3, [pc, #276]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80015f8:	edc3 7a00 	vstr	s15, [r3]
			MOTOR_setAngle(&motor3, p(p0_3, setpoint3, Tf, 0, 0, T3));
 80015fc:	4b44      	ldr	r3, [pc, #272]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80015fe:	edd3 7a00 	vldr	s15, [r3]
 8001602:	4b44      	ldr	r3, [pc, #272]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001604:	ed93 7a00 	vldr	s14, [r3]
 8001608:	4b36      	ldr	r3, [pc, #216]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	ee06 3a90 	vmov	s13, r3
 8001610:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8001614:	4b3d      	ldr	r3, [pc, #244]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001616:	ed93 6a00 	vldr	s12, [r3]
 800161a:	eef0 2a46 	vmov.f32	s5, s12
 800161e:	ed9f 2a35 	vldr	s4, [pc, #212]	; 80016f4 <HAL_TIM_PeriodElapsedCallback+0x274>
 8001622:	eddf 1a34 	vldr	s3, [pc, #208]	; 80016f4 <HAL_TIM_PeriodElapsedCallback+0x274>
 8001626:	eeb0 1a66 	vmov.f32	s2, s13
 800162a:	eef0 0a47 	vmov.f32	s1, s14
 800162e:	eeb0 0a67 	vmov.f32	s0, s15
 8001632:	f7ff fead 	bl	8001390 <p>
 8001636:	eef0 7a40 	vmov.f32	s15, s0
 800163a:	eeb0 0a67 	vmov.f32	s0, s15
 800163e:	4836      	ldr	r0, [pc, #216]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001640:	f005 ff9a 	bl	8007578 <MOTOR_setAngle>
		}
		MOTOR_runAngle(&motor3);
 8001644:	4834      	ldr	r0, [pc, #208]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001646:	f005 ffad 	bl	80075a4 <MOTOR_runAngle>
		mode = 3;
 800164a:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800164c:	2203      	movs	r2, #3
 800164e:	701a      	strb	r2, [r3, #0]
		break;
 8001650:	e0df      	b.n	8001812 <HAL_TIM_PeriodElapsedCallback+0x392>
	  case 3:
		if(T4 <= Tf)
 8001652:	4b24      	ldr	r3, [pc, #144]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800165e:	4b2f      	ldr	r3, [pc, #188]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001660:	edd3 7a00 	vldr	s15, [r3]
 8001664:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166c:	db2d      	blt.n	80016ca <HAL_TIM_PeriodElapsedCallback+0x24a>
		{
			T4 += 5;
 800166e:	4b2b      	ldr	r3, [pc, #172]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001670:	edd3 7a00 	vldr	s15, [r3]
 8001674:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001678:	ee77 7a87 	vadd.f32	s15, s15, s14
 800167c:	4b27      	ldr	r3, [pc, #156]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800167e:	edc3 7a00 	vstr	s15, [r3]
			MOTOR_setAngle(&motor4, p(p0_4, setpoint4, Tf, 0, 0, T4));
 8001682:	4b27      	ldr	r3, [pc, #156]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001684:	edd3 7a00 	vldr	s15, [r3]
 8001688:	4b26      	ldr	r3, [pc, #152]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800168a:	ed93 7a00 	vldr	s14, [r3]
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	ee06 3a90 	vmov	s13, r3
 8001696:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800169a:	4b20      	ldr	r3, [pc, #128]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800169c:	ed93 6a00 	vldr	s12, [r3]
 80016a0:	eef0 2a46 	vmov.f32	s5, s12
 80016a4:	ed9f 2a13 	vldr	s4, [pc, #76]	; 80016f4 <HAL_TIM_PeriodElapsedCallback+0x274>
 80016a8:	eddf 1a12 	vldr	s3, [pc, #72]	; 80016f4 <HAL_TIM_PeriodElapsedCallback+0x274>
 80016ac:	eeb0 1a66 	vmov.f32	s2, s13
 80016b0:	eef0 0a47 	vmov.f32	s1, s14
 80016b4:	eeb0 0a67 	vmov.f32	s0, s15
 80016b8:	f7ff fe6a 	bl	8001390 <p>
 80016bc:	eef0 7a40 	vmov.f32	s15, s0
 80016c0:	eeb0 0a67 	vmov.f32	s0, s15
 80016c4:	4818      	ldr	r0, [pc, #96]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80016c6:	f005 ff57 	bl	8007578 <MOTOR_setAngle>
		}
		MOTOR_runAngle(&motor4);
 80016ca:	4817      	ldr	r0, [pc, #92]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80016cc:	f005 ff6a 	bl	80075a4 <MOTOR_runAngle>
		mode = 4;
 80016d0:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80016d2:	2204      	movs	r2, #4
 80016d4:	701a      	strb	r2, [r3, #0]
		break;
 80016d6:	e09c      	b.n	8001812 <HAL_TIM_PeriodElapsedCallback+0x392>
 80016d8:	20000490 	.word	0x20000490
 80016dc:	40020800 	.word	0x40020800
 80016e0:	2000090c 	.word	0x2000090c
 80016e4:	200000e0 	.word	0x200000e0
 80016e8:	200008cc 	.word	0x200008cc
 80016ec:	200008fc 	.word	0x200008fc
 80016f0:	200008dc 	.word	0x200008dc
 80016f4:	00000000 	.word	0x00000000
 80016f8:	200005ec 	.word	0x200005ec
 80016fc:	200008d0 	.word	0x200008d0
 8001700:	20000900 	.word	0x20000900
 8001704:	200008e0 	.word	0x200008e0
 8001708:	200006a4 	.word	0x200006a4
 800170c:	200008d4 	.word	0x200008d4
 8001710:	20000904 	.word	0x20000904
 8001714:	200008e4 	.word	0x200008e4
 8001718:	2000075c 	.word	0x2000075c
 800171c:	200008d8 	.word	0x200008d8
 8001720:	20000908 	.word	0x20000908
 8001724:	200008e8 	.word	0x200008e8
 8001728:	20000814 	.word	0x20000814
	  case 4:
		if(setpoint1 != preSetpoint1)
 800172c:	4b3b      	ldr	r3, [pc, #236]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 800172e:	ed93 7a00 	vldr	s14, [r3]
 8001732:	4b3b      	ldr	r3, [pc, #236]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001734:	edd3 7a00 	vldr	s15, [r3]
 8001738:	eeb4 7a67 	vcmp.f32	s14, s15
 800173c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001740:	d00f      	beq.n	8001762 <HAL_TIM_PeriodElapsedCallback+0x2e2>
		{
			T1 = 0;
 8001742:	4b38      	ldr	r3, [pc, #224]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
			p0_1=MOTOR_getPos(&motor1);
 800174a:	4837      	ldr	r0, [pc, #220]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 800174c:	f006 f828 	bl	80077a0 <MOTOR_getPos>
 8001750:	eef0 7a40 	vmov.f32	s15, s0
 8001754:	4b35      	ldr	r3, [pc, #212]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001756:	edc3 7a00 	vstr	s15, [r3]
			preSetpoint1 = setpoint1;
 800175a:	4b30      	ldr	r3, [pc, #192]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a30      	ldr	r2, [pc, #192]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001760:	6013      	str	r3, [r2, #0]
		}
		if(setpoint2 != preSetpoint2)
 8001762:	4b33      	ldr	r3, [pc, #204]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001764:	ed93 7a00 	vldr	s14, [r3]
 8001768:	4b32      	ldr	r3, [pc, #200]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 800176a:	edd3 7a00 	vldr	s15, [r3]
 800176e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001776:	d00f      	beq.n	8001798 <HAL_TIM_PeriodElapsedCallback+0x318>
		{
			T2 = 0;
 8001778:	4b2f      	ldr	r3, [pc, #188]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
			p0_2=MOTOR_getPos(&motor2);
 8001780:	482e      	ldr	r0, [pc, #184]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8001782:	f006 f80d 	bl	80077a0 <MOTOR_getPos>
 8001786:	eef0 7a40 	vmov.f32	s15, s0
 800178a:	4b2d      	ldr	r3, [pc, #180]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 800178c:	edc3 7a00 	vstr	s15, [r3]
			preSetpoint2 = setpoint2;
 8001790:	4b27      	ldr	r3, [pc, #156]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a27      	ldr	r2, [pc, #156]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001796:	6013      	str	r3, [r2, #0]
		}
		if(setpoint3 != preSetpoint3)
 8001798:	4b2a      	ldr	r3, [pc, #168]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 800179a:	ed93 7a00 	vldr	s14, [r3]
 800179e:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 80017a0:	edd3 7a00 	vldr	s15, [r3]
 80017a4:	eeb4 7a67 	vcmp.f32	s14, s15
 80017a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ac:	d00f      	beq.n	80017ce <HAL_TIM_PeriodElapsedCallback+0x34e>
		{
			T3 = 0;
 80017ae:	4b27      	ldr	r3, [pc, #156]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
			p0_3=MOTOR_getPos(&motor3);
 80017b6:	4826      	ldr	r0, [pc, #152]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 80017b8:	f005 fff2 	bl	80077a0 <MOTOR_getPos>
 80017bc:	eef0 7a40 	vmov.f32	s15, s0
 80017c0:	4b24      	ldr	r3, [pc, #144]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 80017c2:	edc3 7a00 	vstr	s15, [r3]
			preSetpoint3 = setpoint3;
 80017c6:	4b1f      	ldr	r3, [pc, #124]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a1f      	ldr	r2, [pc, #124]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 80017cc:	6013      	str	r3, [r2, #0]
		}
		if(setpoint4 != preSetpoint4)
 80017ce:	4b22      	ldr	r3, [pc, #136]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 80017d0:	ed93 7a00 	vldr	s14, [r3]
 80017d4:	4b21      	ldr	r3, [pc, #132]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 80017d6:	edd3 7a00 	vldr	s15, [r3]
 80017da:	eeb4 7a67 	vcmp.f32	s14, s15
 80017de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e2:	d00f      	beq.n	8001804 <HAL_TIM_PeriodElapsedCallback+0x384>
		{
			T4 = 0;
 80017e4:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
			p0_4=MOTOR_getPos(&motor4);
 80017ec:	481d      	ldr	r0, [pc, #116]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 80017ee:	f005 ffd7 	bl	80077a0 <MOTOR_getPos>
 80017f2:	eef0 7a40 	vmov.f32	s15, s0
 80017f6:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 80017f8:	edc3 7a00 	vstr	s15, [r3]
			preSetpoint4 = setpoint4;
 80017fc:	4b16      	ldr	r3, [pc, #88]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a16      	ldr	r2, [pc, #88]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8001802:	6013      	str	r3, [r2, #0]
		}
		mode = 0;
 8001804:	4b19      	ldr	r3, [pc, #100]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
		break;
 800180a:	e002      	b.n	8001812 <HAL_TIM_PeriodElapsedCallback+0x392>
	  default:
		break;
	  }
	}
 800180c:	bf00      	nop
 800180e:	e000      	b.n	8001812 <HAL_TIM_PeriodElapsedCallback+0x392>
		break;
 8001810:	bf00      	nop
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200008dc 	.word	0x200008dc
 8001820:	200008ec 	.word	0x200008ec
 8001824:	200008cc 	.word	0x200008cc
 8001828:	200005ec 	.word	0x200005ec
 800182c:	200008fc 	.word	0x200008fc
 8001830:	200008e0 	.word	0x200008e0
 8001834:	200008f0 	.word	0x200008f0
 8001838:	200008d0 	.word	0x200008d0
 800183c:	200006a4 	.word	0x200006a4
 8001840:	20000900 	.word	0x20000900
 8001844:	200008e4 	.word	0x200008e4
 8001848:	200008f4 	.word	0x200008f4
 800184c:	200008d4 	.word	0x200008d4
 8001850:	2000075c 	.word	0x2000075c
 8001854:	20000904 	.word	0x20000904
 8001858:	200008e8 	.word	0x200008e8
 800185c:	200008f8 	.word	0x200008f8
 8001860:	200008d8 	.word	0x200008d8
 8001864:	20000814 	.word	0x20000814
 8001868:	20000908 	.word	0x20000908
 800186c:	2000090c 	.word	0x2000090c

08001870 <SetHome>:

void SetHome(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	if(setHome1234Flag == 1 && setHomeOk == 0)
 8001874:	4bb0      	ldr	r3, [pc, #704]	; (8001b38 <SetHome+0x2c8>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b01      	cmp	r3, #1
 800187a:	f040 813d 	bne.w	8001af8 <SetHome+0x288>
 800187e:	4baf      	ldr	r3, [pc, #700]	; (8001b3c <SetHome+0x2cc>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	f040 8138 	bne.w	8001af8 <SetHome+0x288>
	{
		if (setHomeJ1 == 1 && setHomeJ2 == 1 && setHomeJ3 == 1 && setHomeJ4 == 1)
 8001888:	4bad      	ldr	r3, [pc, #692]	; (8001b40 <SetHome+0x2d0>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d16b      	bne.n	8001968 <SetHome+0xf8>
 8001890:	4bac      	ldr	r3, [pc, #688]	; (8001b44 <SetHome+0x2d4>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d167      	bne.n	8001968 <SetHome+0xf8>
 8001898:	4bab      	ldr	r3, [pc, #684]	; (8001b48 <SetHome+0x2d8>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d163      	bne.n	8001968 <SetHome+0xf8>
 80018a0:	4baa      	ldr	r3, [pc, #680]	; (8001b4c <SetHome+0x2dc>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d15f      	bne.n	8001968 <SetHome+0xf8>
		{
			MOTOR_setAngle(&motor1, 0);
 80018a8:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 8001b50 <SetHome+0x2e0>
 80018ac:	48a9      	ldr	r0, [pc, #676]	; (8001b54 <SetHome+0x2e4>)
 80018ae:	f005 fe63 	bl	8007578 <MOTOR_setAngle>
			MOTOR_setAngle(&motor2, -180);
 80018b2:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 8001b58 <SetHome+0x2e8>
 80018b6:	48a9      	ldr	r0, [pc, #676]	; (8001b5c <SetHome+0x2ec>)
 80018b8:	f005 fe5e 	bl	8007578 <MOTOR_setAngle>
			MOTOR_setAngle(&motor3, 130);
 80018bc:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 8001b60 <SetHome+0x2f0>
 80018c0:	48a8      	ldr	r0, [pc, #672]	; (8001b64 <SetHome+0x2f4>)
 80018c2:	f005 fe59 	bl	8007578 <MOTOR_setAngle>
			MOTOR_setAngle(&motor4, -72);
 80018c6:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 8001b68 <SetHome+0x2f8>
 80018ca:	48a8      	ldr	r0, [pc, #672]	; (8001b6c <SetHome+0x2fc>)
 80018cc:	f005 fe54 	bl	8007578 <MOTOR_setAngle>
			if(fabs(MOTOR_getPos(&motor2) + 180) < 1 && fabs(MOTOR_getPos(&motor3) - 130) < 1 && fabs(MOTOR_getPos(&motor4) + 72) < 1)
 80018d0:	48a2      	ldr	r0, [pc, #648]	; (8001b5c <SetHome+0x2ec>)
 80018d2:	f005 ff65 	bl	80077a0 <MOTOR_getPos>
 80018d6:	eef0 7a40 	vmov.f32	s15, s0
 80018da:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8001b70 <SetHome+0x300>
 80018de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018e2:	eef0 7ae7 	vabs.f32	s15, s15
 80018e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f2:	f140 80bb 	bpl.w	8001a6c <SetHome+0x1fc>
 80018f6:	489b      	ldr	r0, [pc, #620]	; (8001b64 <SetHome+0x2f4>)
 80018f8:	f005 ff52 	bl	80077a0 <MOTOR_getPos>
 80018fc:	eef0 7a40 	vmov.f32	s15, s0
 8001900:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8001b60 <SetHome+0x2f0>
 8001904:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001908:	eef0 7ae7 	vabs.f32	s15, s15
 800190c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001910:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001918:	d400      	bmi.n	800191c <SetHome+0xac>
 800191a:	e0a7      	b.n	8001a6c <SetHome+0x1fc>
 800191c:	4893      	ldr	r0, [pc, #588]	; (8001b6c <SetHome+0x2fc>)
 800191e:	f005 ff3f 	bl	80077a0 <MOTOR_getPos>
 8001922:	eef0 7a40 	vmov.f32	s15, s0
 8001926:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001b74 <SetHome+0x304>
 800192a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800192e:	eef0 7ae7 	vabs.f32	s15, s15
 8001932:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001936:	eef4 7ac7 	vcmpe.f32	s15, s14
 800193a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193e:	d400      	bmi.n	8001942 <SetHome+0xd2>
 8001940:	e094      	b.n	8001a6c <SetHome+0x1fc>
			{
				setHome234Flag = 0;
 8001942:	4b8d      	ldr	r3, [pc, #564]	; (8001b78 <SetHome+0x308>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
				setHome1234Flag = 0;
 8001948:	4b7b      	ldr	r3, [pc, #492]	; (8001b38 <SetHome+0x2c8>)
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
				setHomeOk = 1;
 800194e:	4b7b      	ldr	r3, [pc, #492]	; (8001b3c <SetHome+0x2cc>)
 8001950:	2201      	movs	r2, #1
 8001952:	701a      	strb	r2, [r3, #0]
				MOTOR_reset(&motor2);
 8001954:	4881      	ldr	r0, [pc, #516]	; (8001b5c <SetHome+0x2ec>)
 8001956:	f005 feea 	bl	800772e <MOTOR_reset>
				MOTOR_reset(&motor3);
 800195a:	4882      	ldr	r0, [pc, #520]	; (8001b64 <SetHome+0x2f4>)
 800195c:	f005 fee7 	bl	800772e <MOTOR_reset>
				MOTOR_reset(&motor4);
 8001960:	4882      	ldr	r0, [pc, #520]	; (8001b6c <SetHome+0x2fc>)
 8001962:	f005 fee4 	bl	800772e <MOTOR_reset>
			if(fabs(MOTOR_getPos(&motor2) + 180) < 1 && fabs(MOTOR_getPos(&motor3) - 130) < 1 && fabs(MOTOR_getPos(&motor4) + 72) < 1)
 8001966:	e081      	b.n	8001a6c <SetHome+0x1fc>
			}
		}
		else if(setHomeJ2 == 1 && setHomeJ3 == 1 && setHomeJ4 == 1)
 8001968:	4b76      	ldr	r3, [pc, #472]	; (8001b44 <SetHome+0x2d4>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d17d      	bne.n	8001a6c <SetHome+0x1fc>
 8001970:	4b75      	ldr	r3, [pc, #468]	; (8001b48 <SetHome+0x2d8>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d179      	bne.n	8001a6c <SetHome+0x1fc>
 8001978:	4b74      	ldr	r3, [pc, #464]	; (8001b4c <SetHome+0x2dc>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d175      	bne.n	8001a6c <SetHome+0x1fc>
		{
			if(fabs(motor1.setPoint) <= 2)
 8001980:	4b74      	ldr	r3, [pc, #464]	; (8001b54 <SetHome+0x2e4>)
 8001982:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8001986:	eef0 7ae7 	vabs.f32	s15, s15
 800198a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800198e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001996:	d805      	bhi.n	80019a4 <SetHome+0x134>
			{
				MOTOR_setAngle(&motor1, -45.0f);
 8001998:	ed9f 0a78 	vldr	s0, [pc, #480]	; 8001b7c <SetHome+0x30c>
 800199c:	486d      	ldr	r0, [pc, #436]	; (8001b54 <SetHome+0x2e4>)
 800199e:	f005 fdeb 	bl	8007578 <MOTOR_setAngle>
 80019a2:	e063      	b.n	8001a6c <SetHome+0x1fc>
			}
			else if(fabs(MOTOR_getPos(&motor1) + 45.0f) < 2 && (int)(motor1.setPoint / motor1.ratioJoint) == -45)
 80019a4:	486b      	ldr	r0, [pc, #428]	; (8001b54 <SetHome+0x2e4>)
 80019a6:	f005 fefb 	bl	80077a0 <MOTOR_getPos>
 80019aa:	eef0 7a40 	vmov.f32	s15, s0
 80019ae:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001b80 <SetHome+0x310>
 80019b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019b6:	eef0 7ae7 	vabs.f32	s15, s15
 80019ba:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80019be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c6:	d514      	bpl.n	80019f2 <SetHome+0x182>
 80019c8:	4b62      	ldr	r3, [pc, #392]	; (8001b54 <SetHome+0x2e4>)
 80019ca:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 80019ce:	4b61      	ldr	r3, [pc, #388]	; (8001b54 <SetHome+0x2e4>)
 80019d0:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 80019d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019dc:	ee17 3a90 	vmov	r3, s15
 80019e0:	f113 0f2d 	cmn.w	r3, #45	; 0x2d
 80019e4:	d105      	bne.n	80019f2 <SetHome+0x182>
			{
				MOTOR_setAngle(&motor1, 45.0f);
 80019e6:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8001b80 <SetHome+0x310>
 80019ea:	485a      	ldr	r0, [pc, #360]	; (8001b54 <SetHome+0x2e4>)
 80019ec:	f005 fdc4 	bl	8007578 <MOTOR_setAngle>
 80019f0:	e03c      	b.n	8001a6c <SetHome+0x1fc>
			}
			else if(fabs(MOTOR_getPos(&motor1) - 45.0f) < 2 && (int)(motor1.setPoint / motor1.ratioJoint) == 45)
 80019f2:	4858      	ldr	r0, [pc, #352]	; (8001b54 <SetHome+0x2e4>)
 80019f4:	f005 fed4 	bl	80077a0 <MOTOR_getPos>
 80019f8:	eef0 7a40 	vmov.f32	s15, s0
 80019fc:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8001b80 <SetHome+0x310>
 8001a00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a04:	eef0 7ae7 	vabs.f32	s15, s15
 8001a08:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001a0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a14:	d513      	bpl.n	8001a3e <SetHome+0x1ce>
 8001a16:	4b4f      	ldr	r3, [pc, #316]	; (8001b54 <SetHome+0x2e4>)
 8001a18:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8001a1c:	4b4d      	ldr	r3, [pc, #308]	; (8001b54 <SetHome+0x2e4>)
 8001a1e:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8001a22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a2a:	ee17 3a90 	vmov	r3, s15
 8001a2e:	2b2d      	cmp	r3, #45	; 0x2d
 8001a30:	d105      	bne.n	8001a3e <SetHome+0x1ce>
			{
				MOTOR_setAngle(&motor1, -100.0f);
 8001a32:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8001b84 <SetHome+0x314>
 8001a36:	4847      	ldr	r0, [pc, #284]	; (8001b54 <SetHome+0x2e4>)
 8001a38:	f005 fd9e 	bl	8007578 <MOTOR_setAngle>
 8001a3c:	e016      	b.n	8001a6c <SetHome+0x1fc>
			}
			else if(fabs(MOTOR_getPos(&motor1) + 100.0f) < 2)
 8001a3e:	4845      	ldr	r0, [pc, #276]	; (8001b54 <SetHome+0x2e4>)
 8001a40:	f005 feae 	bl	80077a0 <MOTOR_getPos>
 8001a44:	eef0 7a40 	vmov.f32	s15, s0
 8001a48:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001b88 <SetHome+0x318>
 8001a4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a50:	eef0 7ae7 	vabs.f32	s15, s15
 8001a54:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001a58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a60:	d504      	bpl.n	8001a6c <SetHome+0x1fc>
			{
				MOTOR_setAngle(&motor1, 100.0f);
 8001a62:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8001b88 <SetHome+0x318>
 8001a66:	483b      	ldr	r0, [pc, #236]	; (8001b54 <SetHome+0x2e4>)
 8001a68:	f005 fd86 	bl	8007578 <MOTOR_setAngle>
			}
		}
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 1 && setHomeJ1 == 0)
 8001a6c:	2180      	movs	r1, #128	; 0x80
 8001a6e:	4847      	ldr	r0, [pc, #284]	; (8001b8c <SetHome+0x31c>)
 8001a70:	f002 fa0e 	bl	8003e90 <HAL_GPIO_ReadPin>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d109      	bne.n	8001a8e <SetHome+0x21e>
 8001a7a:	4b31      	ldr	r3, [pc, #196]	; (8001b40 <SetHome+0x2d0>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d105      	bne.n	8001a8e <SetHome+0x21e>
		{
			setHomeJ1 = 1;
 8001a82:	4b2f      	ldr	r3, [pc, #188]	; (8001b40 <SetHome+0x2d0>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor1);
 8001a88:	4832      	ldr	r0, [pc, #200]	; (8001b54 <SetHome+0x2e4>)
 8001a8a:	f005 fe50 	bl	800772e <MOTOR_reset>
		}
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == 1 && setHomeJ2 == 0)
 8001a8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a92:	483e      	ldr	r0, [pc, #248]	; (8001b8c <SetHome+0x31c>)
 8001a94:	f002 f9fc 	bl	8003e90 <HAL_GPIO_ReadPin>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d109      	bne.n	8001ab2 <SetHome+0x242>
 8001a9e:	4b29      	ldr	r3, [pc, #164]	; (8001b44 <SetHome+0x2d4>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d105      	bne.n	8001ab2 <SetHome+0x242>
		{
			setHomeJ2 = 1;
 8001aa6:	4b27      	ldr	r3, [pc, #156]	; (8001b44 <SetHome+0x2d4>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor2);
 8001aac:	482b      	ldr	r0, [pc, #172]	; (8001b5c <SetHome+0x2ec>)
 8001aae:	f005 fe3e 	bl	800772e <MOTOR_reset>
		}
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 0 && setHomeJ3 == 0)
 8001ab2:	2104      	movs	r1, #4
 8001ab4:	4836      	ldr	r0, [pc, #216]	; (8001b90 <SetHome+0x320>)
 8001ab6:	f002 f9eb 	bl	8003e90 <HAL_GPIO_ReadPin>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d109      	bne.n	8001ad4 <SetHome+0x264>
 8001ac0:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <SetHome+0x2d8>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d105      	bne.n	8001ad4 <SetHome+0x264>
		{
			setHomeJ3 = 1;
 8001ac8:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <SetHome+0x2d8>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor3);
 8001ace:	4825      	ldr	r0, [pc, #148]	; (8001b64 <SetHome+0x2f4>)
 8001ad0:	f005 fe2d 	bl	800772e <MOTOR_reset>
		}
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6) == 0 && setHomeJ4 == 0)
 8001ad4:	2140      	movs	r1, #64	; 0x40
 8001ad6:	482e      	ldr	r0, [pc, #184]	; (8001b90 <SetHome+0x320>)
 8001ad8:	f002 f9da 	bl	8003e90 <HAL_GPIO_ReadPin>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d126      	bne.n	8001b30 <SetHome+0x2c0>
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <SetHome+0x2dc>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d122      	bne.n	8001b30 <SetHome+0x2c0>
		{
			setHomeJ4 = 1;
 8001aea:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <SetHome+0x2dc>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor4);
 8001af0:	481e      	ldr	r0, [pc, #120]	; (8001b6c <SetHome+0x2fc>)
 8001af2:	f005 fe1c 	bl	800772e <MOTOR_reset>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6) == 0 && setHomeJ4 == 0)
 8001af6:	e01b      	b.n	8001b30 <SetHome+0x2c0>
		}
	}
	else if(setHome1234Flag == 1 && setHomeOk == 1)
 8001af8:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <SetHome+0x2c8>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d118      	bne.n	8001b32 <SetHome+0x2c2>
 8001b00:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <SetHome+0x2cc>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d114      	bne.n	8001b32 <SetHome+0x2c2>
	{
//		MOTOR_setAngle(&motor1, 0);
//		MOTOR_setAngle(&motor2, 0);
//		MOTOR_setAngle(&motor3, 0);
//		MOTOR_setAngle(&motor4, 0);
		setpoint1 = 0;
 8001b08:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <SetHome+0x324>)
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
		setpoint2 = 0;
 8001b10:	4b21      	ldr	r3, [pc, #132]	; (8001b98 <SetHome+0x328>)
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
		setpoint3 = 0;
 8001b18:	4b20      	ldr	r3, [pc, #128]	; (8001b9c <SetHome+0x32c>)
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
		setpoint4 = 0;
 8001b20:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <SetHome+0x330>)
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
		setHome1234Flag = 0;
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <SetHome+0x2c8>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
	}
}
 8001b2e:	e000      	b.n	8001b32 <SetHome+0x2c2>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6) == 0 && setHomeJ4 == 0)
 8001b30:	bf00      	nop
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	200005ea 	.word	0x200005ea
 8001b3c:	200005e4 	.word	0x200005e4
 8001b40:	200005e5 	.word	0x200005e5
 8001b44:	200005e6 	.word	0x200005e6
 8001b48:	200005e7 	.word	0x200005e7
 8001b4c:	200005e8 	.word	0x200005e8
 8001b50:	00000000 	.word	0x00000000
 8001b54:	200005ec 	.word	0x200005ec
 8001b58:	c3340000 	.word	0xc3340000
 8001b5c:	200006a4 	.word	0x200006a4
 8001b60:	43020000 	.word	0x43020000
 8001b64:	2000075c 	.word	0x2000075c
 8001b68:	c2900000 	.word	0xc2900000
 8001b6c:	20000814 	.word	0x20000814
 8001b70:	43340000 	.word	0x43340000
 8001b74:	42900000 	.word	0x42900000
 8001b78:	200005e9 	.word	0x200005e9
 8001b7c:	c2340000 	.word	0xc2340000
 8001b80:	42340000 	.word	0x42340000
 8001b84:	c2c80000 	.word	0xc2c80000
 8001b88:	42c80000 	.word	0x42c80000
 8001b8c:	40020800 	.word	0x40020800
 8001b90:	40020c00 	.word	0x40020c00
 8001b94:	200008dc 	.word	0x200008dc
 8001b98:	200008e0 	.word	0x200008e0
 8001b9c:	200008e4 	.word	0x200008e4
 8001ba0:	200008e8 	.word	0x200008e8

08001ba4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	80fb      	strh	r3, [r7, #6]
	if(setHome1234Flag == 1 && setHomeOk == 0)
 8001bae:	4b2c      	ldr	r3, [pc, #176]	; (8001c60 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d14f      	bne.n	8001c56 <HAL_GPIO_EXTI_Callback+0xb2>
 8001bb6:	4b2b      	ldr	r3, [pc, #172]	; (8001c64 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d14b      	bne.n	8001c56 <HAL_GPIO_EXTI_Callback+0xb2>
	{
		if(GPIO_Pin == GPIO_PIN_11 && setHomeJ2 == 0)
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bc4:	d11c      	bne.n	8001c00 <HAL_GPIO_EXTI_Callback+0x5c>
 8001bc6:	4b28      	ldr	r3, [pc, #160]	; (8001c68 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d118      	bne.n	8001c00 <HAL_GPIO_EXTI_Callback+0x5c>
		{
			setHomeJ2 = 1;
 8001bce:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor2);
 8001bd4:	4825      	ldr	r0, [pc, #148]	; (8001c6c <HAL_GPIO_EXTI_Callback+0xc8>)
 8001bd6:	f005 fdaa 	bl	800772e <MOTOR_reset>
			if(setHomeJ3 == 0)
 8001bda:	4b25      	ldr	r3, [pc, #148]	; (8001c70 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d104      	bne.n	8001bec <HAL_GPIO_EXTI_Callback+0x48>
			{
				MOTOR_setAngle(&motor3, -200);
 8001be2:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8001c74 <HAL_GPIO_EXTI_Callback+0xd0>
 8001be6:	4824      	ldr	r0, [pc, #144]	; (8001c78 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001be8:	f005 fcc6 	bl	8007578 <MOTOR_setAngle>
			}
			if(setHomeJ4 == 0)
 8001bec:	4b23      	ldr	r3, [pc, #140]	; (8001c7c <HAL_GPIO_EXTI_Callback+0xd8>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d12f      	bne.n	8001c54 <HAL_GPIO_EXTI_Callback+0xb0>
			{
				MOTOR_setAngle(&motor4, 200);
 8001bf4:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001c80 <HAL_GPIO_EXTI_Callback+0xdc>
 8001bf8:	4822      	ldr	r0, [pc, #136]	; (8001c84 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001bfa:	f005 fcbd 	bl	8007578 <MOTOR_setAngle>
		{
 8001bfe:	e029      	b.n	8001c54 <HAL_GPIO_EXTI_Callback+0xb0>
			}
		}
		else if(GPIO_Pin == GPIO_PIN_2 && setHomeJ3 == 0)
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d10a      	bne.n	8001c1c <HAL_GPIO_EXTI_Callback+0x78>
 8001c06:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d106      	bne.n	8001c1c <HAL_GPIO_EXTI_Callback+0x78>
		{
			setHomeJ3 = 1;
 8001c0e:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor3);
 8001c14:	4818      	ldr	r0, [pc, #96]	; (8001c78 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001c16:	f005 fd8a 	bl	800772e <MOTOR_reset>
		{
 8001c1a:	e01c      	b.n	8001c56 <HAL_GPIO_EXTI_Callback+0xb2>

		}
		else if(GPIO_Pin == GPIO_PIN_6 && setHomeJ4 == 0)
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	2b40      	cmp	r3, #64	; 0x40
 8001c20:	d10a      	bne.n	8001c38 <HAL_GPIO_EXTI_Callback+0x94>
 8001c22:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <HAL_GPIO_EXTI_Callback+0xd8>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d106      	bne.n	8001c38 <HAL_GPIO_EXTI_Callback+0x94>
		{
			setHomeJ4 = 1;
 8001c2a:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <HAL_GPIO_EXTI_Callback+0xd8>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor4);
 8001c30:	4814      	ldr	r0, [pc, #80]	; (8001c84 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001c32:	f005 fd7c 	bl	800772e <MOTOR_reset>
		{
 8001c36:	e00e      	b.n	8001c56 <HAL_GPIO_EXTI_Callback+0xb2>
		}
		else if(GPIO_Pin == GPIO_PIN_7 && setHomeJ1 == 0)
 8001c38:	88fb      	ldrh	r3, [r7, #6]
 8001c3a:	2b80      	cmp	r3, #128	; 0x80
 8001c3c:	d10b      	bne.n	8001c56 <HAL_GPIO_EXTI_Callback+0xb2>
 8001c3e:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d107      	bne.n	8001c56 <HAL_GPIO_EXTI_Callback+0xb2>
		{
			setHomeJ1 = 1;
 8001c46:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor1);
 8001c4c:	480f      	ldr	r0, [pc, #60]	; (8001c8c <HAL_GPIO_EXTI_Callback+0xe8>)
 8001c4e:	f005 fd6e 	bl	800772e <MOTOR_reset>
		}
	}
}
 8001c52:	e000      	b.n	8001c56 <HAL_GPIO_EXTI_Callback+0xb2>
		{
 8001c54:	bf00      	nop
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200005ea 	.word	0x200005ea
 8001c64:	200005e4 	.word	0x200005e4
 8001c68:	200005e6 	.word	0x200005e6
 8001c6c:	200006a4 	.word	0x200006a4
 8001c70:	200005e7 	.word	0x200005e7
 8001c74:	c3480000 	.word	0xc3480000
 8001c78:	2000075c 	.word	0x2000075c
 8001c7c:	200005e8 	.word	0x200005e8
 8001c80:	43480000 	.word	0x43480000
 8001c84:	20000814 	.word	0x20000814
 8001c88:	200005e5 	.word	0x200005e5
 8001c8c:	200005ec 	.word	0x200005ec

08001c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c94:	b090      	sub	sp, #64	; 0x40
 8001c96:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c98:	f001 f9be 	bl	8003018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c9c:	f000 f94e 	bl	8001f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ca0:	f000 fd06 	bl	80026b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ca4:	f000 fce4 	bl	8002670 <MX_DMA_Init>
  MX_TIM1_Init();
 8001ca8:	f000 f9b2 	bl	8002010 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001cac:	f000 fa08 	bl	80020c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001cb0:	f000 fa5a 	bl	8002168 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001cb4:	f000 faac 	bl	8002210 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001cb8:	f000 fb42 	bl	8002340 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001cbc:	f000 fb94 	bl	80023e8 <MX_TIM8_Init>
  MX_TIM9_Init();
 8001cc0:	f000 fc3e 	bl	8002540 <MX_TIM9_Init>
  MX_USART3_UART_Init();
 8001cc4:	f000 fcaa 	bl	800261c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  MOTOR_setPIDPosition(&motor1, 5, 0, 0, 5);
 8001cc8:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8001ccc:	ed9f 1a87 	vldr	s2, [pc, #540]	; 8001eec <main+0x25c>
 8001cd0:	eddf 0a86 	vldr	s1, [pc, #536]	; 8001eec <main+0x25c>
 8001cd4:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001cd8:	4885      	ldr	r0, [pc, #532]	; (8001ef0 <main+0x260>)
 8001cda:	f005 fbf1 	bl	80074c0 <MOTOR_setPIDPosition>
  MOTOR_setPIDVelocity(&motor1, 1, 60, 0, 5);
 8001cde:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8001ce2:	ed9f 1a82 	vldr	s2, [pc, #520]	; 8001eec <main+0x25c>
 8001ce6:	eddf 0a83 	vldr	s1, [pc, #524]	; 8001ef4 <main+0x264>
 8001cea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001cee:	4880      	ldr	r0, [pc, #512]	; (8001ef0 <main+0x260>)
 8001cf0:	f005 fbca 	bl	8007488 <MOTOR_setPIDVelocity>
  MOTOR_setOutputRange(&motor1, -999, 999);
 8001cf4:	eddf 0a80 	vldr	s1, [pc, #512]	; 8001ef8 <main+0x268>
 8001cf8:	ed9f 0a80 	vldr	s0, [pc, #512]	; 8001efc <main+0x26c>
 8001cfc:	487c      	ldr	r0, [pc, #496]	; (8001ef0 <main+0x260>)
 8001cfe:	f005 fbfd 	bl	80074fc <MOTOR_setOutputRange>
  MOTOR_setWindupRange(&motor1, -900, 900);
 8001d02:	eddf 0a7f 	vldr	s1, [pc, #508]	; 8001f00 <main+0x270>
 8001d06:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 8001f04 <main+0x274>
 8001d0a:	4879      	ldr	r0, [pc, #484]	; (8001ef0 <main+0x260>)
 8001d0c:	f005 fc18 	bl	8007540 <MOTOR_setWindupRange>
  MOTOR_init(&motor1, &driver1, 3.75, GPIO_PIN_7, 500);
 8001d10:	eddf 0a7d 	vldr	s1, [pc, #500]	; 8001f08 <main+0x278>
 8001d14:	2280      	movs	r2, #128	; 0x80
 8001d16:	eeb0 0a0e 	vmov.f32	s0, #14	; 0x40700000  3.750
 8001d1a:	497c      	ldr	r1, [pc, #496]	; (8001f0c <main+0x27c>)
 8001d1c:	4874      	ldr	r0, [pc, #464]	; (8001ef0 <main+0x260>)
 8001d1e:	f005 fca1 	bl	8007664 <MOTOR_init>

  MOTOR_setPIDPosition(&motor2, 5, 0, 0, 5);
 8001d22:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8001d26:	ed9f 1a71 	vldr	s2, [pc, #452]	; 8001eec <main+0x25c>
 8001d2a:	eddf 0a70 	vldr	s1, [pc, #448]	; 8001eec <main+0x25c>
 8001d2e:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001d32:	4877      	ldr	r0, [pc, #476]	; (8001f10 <main+0x280>)
 8001d34:	f005 fbc4 	bl	80074c0 <MOTOR_setPIDPosition>
  MOTOR_setPIDVelocity(&motor2, 1, 60, 0, 5);
 8001d38:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8001d3c:	ed9f 1a6b 	vldr	s2, [pc, #428]	; 8001eec <main+0x25c>
 8001d40:	eddf 0a6c 	vldr	s1, [pc, #432]	; 8001ef4 <main+0x264>
 8001d44:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001d48:	4871      	ldr	r0, [pc, #452]	; (8001f10 <main+0x280>)
 8001d4a:	f005 fb9d 	bl	8007488 <MOTOR_setPIDVelocity>
  MOTOR_setOutputRange(&motor2, -999, 999);
 8001d4e:	eddf 0a6a 	vldr	s1, [pc, #424]	; 8001ef8 <main+0x268>
 8001d52:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8001efc <main+0x26c>
 8001d56:	486e      	ldr	r0, [pc, #440]	; (8001f10 <main+0x280>)
 8001d58:	f005 fbd0 	bl	80074fc <MOTOR_setOutputRange>
  MOTOR_setWindupRange(&motor2, -900, 900);
 8001d5c:	eddf 0a68 	vldr	s1, [pc, #416]	; 8001f00 <main+0x270>
 8001d60:	ed9f 0a68 	vldr	s0, [pc, #416]	; 8001f04 <main+0x274>
 8001d64:	486a      	ldr	r0, [pc, #424]	; (8001f10 <main+0x280>)
 8001d66:	f005 fbeb 	bl	8007540 <MOTOR_setWindupRange>
  MOTOR_init(&motor2, &driver2, 3.75, GPIO_PIN_11, 500);
 8001d6a:	eddf 0a67 	vldr	s1, [pc, #412]	; 8001f08 <main+0x278>
 8001d6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d72:	eeb0 0a0e 	vmov.f32	s0, #14	; 0x40700000  3.750
 8001d76:	4967      	ldr	r1, [pc, #412]	; (8001f14 <main+0x284>)
 8001d78:	4865      	ldr	r0, [pc, #404]	; (8001f10 <main+0x280>)
 8001d7a:	f005 fc73 	bl	8007664 <MOTOR_init>

  MOTOR_setPIDPosition(&motor3, 5, 0, 0, 5);
 8001d7e:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8001d82:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 8001eec <main+0x25c>
 8001d86:	eddf 0a59 	vldr	s1, [pc, #356]	; 8001eec <main+0x25c>
 8001d8a:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001d8e:	4862      	ldr	r0, [pc, #392]	; (8001f18 <main+0x288>)
 8001d90:	f005 fb96 	bl	80074c0 <MOTOR_setPIDPosition>
  MOTOR_setPIDVelocity(&motor3, 1, 60, 0, 5);
 8001d94:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8001d98:	ed9f 1a54 	vldr	s2, [pc, #336]	; 8001eec <main+0x25c>
 8001d9c:	eddf 0a55 	vldr	s1, [pc, #340]	; 8001ef4 <main+0x264>
 8001da0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001da4:	485c      	ldr	r0, [pc, #368]	; (8001f18 <main+0x288>)
 8001da6:	f005 fb6f 	bl	8007488 <MOTOR_setPIDVelocity>
  MOTOR_setOutputRange(&motor3, -999, 999);
 8001daa:	eddf 0a53 	vldr	s1, [pc, #332]	; 8001ef8 <main+0x268>
 8001dae:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8001efc <main+0x26c>
 8001db2:	4859      	ldr	r0, [pc, #356]	; (8001f18 <main+0x288>)
 8001db4:	f005 fba2 	bl	80074fc <MOTOR_setOutputRange>
  MOTOR_setWindupRange(&motor3, -900, 900);
 8001db8:	eddf 0a51 	vldr	s1, [pc, #324]	; 8001f00 <main+0x270>
 8001dbc:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8001f04 <main+0x274>
 8001dc0:	4855      	ldr	r0, [pc, #340]	; (8001f18 <main+0x288>)
 8001dc2:	f005 fbbd 	bl	8007540 <MOTOR_setWindupRange>
  MOTOR_init(&motor3, &driver3, 3.75, GPIO_PIN_2, 500);
 8001dc6:	eddf 0a50 	vldr	s1, [pc, #320]	; 8001f08 <main+0x278>
 8001dca:	2204      	movs	r2, #4
 8001dcc:	eeb0 0a0e 	vmov.f32	s0, #14	; 0x40700000  3.750
 8001dd0:	4952      	ldr	r1, [pc, #328]	; (8001f1c <main+0x28c>)
 8001dd2:	4851      	ldr	r0, [pc, #324]	; (8001f18 <main+0x288>)
 8001dd4:	f005 fc46 	bl	8007664 <MOTOR_init>

  MOTOR_setPIDPosition(&motor4, 5, 0, 0, 5);
 8001dd8:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8001ddc:	ed9f 1a43 	vldr	s2, [pc, #268]	; 8001eec <main+0x25c>
 8001de0:	eddf 0a42 	vldr	s1, [pc, #264]	; 8001eec <main+0x25c>
 8001de4:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001de8:	484d      	ldr	r0, [pc, #308]	; (8001f20 <main+0x290>)
 8001dea:	f005 fb69 	bl	80074c0 <MOTOR_setPIDPosition>
  MOTOR_setPIDVelocity(&motor4, 3, 50, 0, 5);
 8001dee:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8001df2:	ed9f 1a3e 	vldr	s2, [pc, #248]	; 8001eec <main+0x25c>
 8001df6:	eddf 0a4b 	vldr	s1, [pc, #300]	; 8001f24 <main+0x294>
 8001dfa:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8001dfe:	4848      	ldr	r0, [pc, #288]	; (8001f20 <main+0x290>)
 8001e00:	f005 fb42 	bl	8007488 <MOTOR_setPIDVelocity>
  MOTOR_setOutputRange(&motor4, -999, 999);
 8001e04:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8001ef8 <main+0x268>
 8001e08:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8001efc <main+0x26c>
 8001e0c:	4844      	ldr	r0, [pc, #272]	; (8001f20 <main+0x290>)
 8001e0e:	f005 fb75 	bl	80074fc <MOTOR_setOutputRange>
  MOTOR_setWindupRange(&motor4, -900, 900);
 8001e12:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8001f00 <main+0x270>
 8001e16:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8001f04 <main+0x274>
 8001e1a:	4841      	ldr	r0, [pc, #260]	; (8001f20 <main+0x290>)
 8001e1c:	f005 fb90 	bl	8007540 <MOTOR_setWindupRange>
  MOTOR_init(&motor4, &driver4, 1.875, GPIO_PIN_6, 500);
 8001e20:	eddf 0a39 	vldr	s1, [pc, #228]	; 8001f08 <main+0x278>
 8001e24:	2240      	movs	r2, #64	; 0x40
 8001e26:	eeb7 0a0e 	vmov.f32	s0, #126	; 0x3ff00000  1.875
 8001e2a:	493f      	ldr	r1, [pc, #252]	; (8001f28 <main+0x298>)
 8001e2c:	483c      	ldr	r0, [pc, #240]	; (8001f20 <main+0x290>)
 8001e2e:	f005 fc19 	bl	8007664 <MOTOR_init>


  HAL_TIM_Base_Start_IT(&htim9);
 8001e32:	483e      	ldr	r0, [pc, #248]	; (8001f2c <main+0x29c>)
 8001e34:	f002 fde0 	bl	80049f8 <HAL_TIM_Base_Start_IT>
  htim9.Instance->ARR = 999;
 8001e38:	4b3c      	ldr	r3, [pc, #240]	; (8001f2c <main+0x29c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e40:	62da      	str	r2, [r3, #44]	; 0x2c
  UartIdle_Init();
 8001e42:	f7ff fa6b 	bl	800131c <UartIdle_Init>

  uint32_t pre_time = HAL_GetTick();
 8001e46:	f001 f94d 	bl	80030e4 <HAL_GetTick>
 8001e4a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    UART_Handle(uartLogBuffer);
 8001e4c:	4838      	ldr	r0, [pc, #224]	; (8001f30 <main+0x2a0>)
 8001e4e:	f7ff f9e1 	bl	8001214 <UART_Handle>
    SetHome();
 8001e52:	f7ff fd0d 	bl	8001870 <SetHome>
    if (HAL_GetTick() - pre_time >= 100)
 8001e56:	f001 f945 	bl	80030e4 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b63      	cmp	r3, #99	; 0x63
 8001e62:	d9f3      	bls.n	8001e4c <main+0x1bc>
    {
      sprintf(data_angle, "t1:%.0f,t2:%.0f,t3:%.0f,t4:%.0f\n", (float)MOTOR_getPos(&motor1), (float)MOTOR_getPos(&motor2), (float)MOTOR_getPos(&motor3), (float)MOTOR_getPos(&motor4));
 8001e64:	4822      	ldr	r0, [pc, #136]	; (8001ef0 <main+0x260>)
 8001e66:	f005 fc9b 	bl	80077a0 <MOTOR_getPos>
 8001e6a:	ee10 3a10 	vmov	r3, s0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe fb6a 	bl	8000548 <__aeabi_f2d>
 8001e74:	4682      	mov	sl, r0
 8001e76:	468b      	mov	fp, r1
 8001e78:	4825      	ldr	r0, [pc, #148]	; (8001f10 <main+0x280>)
 8001e7a:	f005 fc91 	bl	80077a0 <MOTOR_getPos>
 8001e7e:	ee10 3a10 	vmov	r3, s0
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe fb60 	bl	8000548 <__aeabi_f2d>
 8001e88:	4604      	mov	r4, r0
 8001e8a:	460d      	mov	r5, r1
 8001e8c:	4822      	ldr	r0, [pc, #136]	; (8001f18 <main+0x288>)
 8001e8e:	f005 fc87 	bl	80077a0 <MOTOR_getPos>
 8001e92:	ee10 3a10 	vmov	r3, s0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fb56 	bl	8000548 <__aeabi_f2d>
 8001e9c:	4680      	mov	r8, r0
 8001e9e:	4689      	mov	r9, r1
 8001ea0:	481f      	ldr	r0, [pc, #124]	; (8001f20 <main+0x290>)
 8001ea2:	f005 fc7d 	bl	80077a0 <MOTOR_getPos>
 8001ea6:	ee10 3a10 	vmov	r3, s0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe fb4c 	bl	8000548 <__aeabi_f2d>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	1d38      	adds	r0, r7, #4
 8001eb6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001eba:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001ebe:	e9cd 4500 	strd	r4, r5, [sp]
 8001ec2:	4652      	mov	r2, sl
 8001ec4:	465b      	mov	r3, fp
 8001ec6:	491b      	ldr	r1, [pc, #108]	; (8001f34 <main+0x2a4>)
 8001ec8:	f006 fcb8 	bl	800883c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)data_angle, strlen(data_angle), HAL_MAX_DELAY);
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe f97e 	bl	80001d0 <strlen>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	1d39      	adds	r1, r7, #4
 8001eda:	f04f 33ff 	mov.w	r3, #4294967295
 8001ede:	4816      	ldr	r0, [pc, #88]	; (8001f38 <main+0x2a8>)
 8001ee0:	f003 ff49 	bl	8005d76 <HAL_UART_Transmit>

      pre_time = HAL_GetTick();
 8001ee4:	f001 f8fe 	bl	80030e4 <HAL_GetTick>
 8001ee8:	6278      	str	r0, [r7, #36]	; 0x24
    UART_Handle(uartLogBuffer);
 8001eea:	e7af      	b.n	8001e4c <main+0x1bc>
 8001eec:	00000000 	.word	0x00000000
 8001ef0:	200005ec 	.word	0x200005ec
 8001ef4:	42700000 	.word	0x42700000
 8001ef8:	4479c000 	.word	0x4479c000
 8001efc:	c479c000 	.word	0xc479c000
 8001f00:	44610000 	.word	0x44610000
 8001f04:	c4610000 	.word	0xc4610000
 8001f08:	43fa0000 	.word	0x43fa0000
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	200006a4 	.word	0x200006a4
 8001f14:	20000038 	.word	0x20000038
 8001f18:	2000075c 	.word	0x2000075c
 8001f1c:	20000070 	.word	0x20000070
 8001f20:	20000814 	.word	0x20000814
 8001f24:	42480000 	.word	0x42480000
 8001f28:	200000a8 	.word	0x200000a8
 8001f2c:	20000490 	.word	0x20000490
 8001f30:	2000057c 	.word	0x2000057c
 8001f34:	0800cd20 	.word	0x0800cd20
 8001f38:	200004d8 	.word	0x200004d8

08001f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b094      	sub	sp, #80	; 0x50
 8001f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f42:	f107 0320 	add.w	r3, r7, #32
 8001f46:	2230      	movs	r2, #48	; 0x30
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f005 fdee 	bl	8007b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f50:	f107 030c 	add.w	r3, r7, #12
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	4b28      	ldr	r3, [pc, #160]	; (8002008 <SystemClock_Config+0xcc>)
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	4a27      	ldr	r2, [pc, #156]	; (8002008 <SystemClock_Config+0xcc>)
 8001f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f70:	4b25      	ldr	r3, [pc, #148]	; (8002008 <SystemClock_Config+0xcc>)
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	4b22      	ldr	r3, [pc, #136]	; (800200c <SystemClock_Config+0xd0>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a21      	ldr	r2, [pc, #132]	; (800200c <SystemClock_Config+0xd0>)
 8001f86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	4b1f      	ldr	r3, [pc, #124]	; (800200c <SystemClock_Config+0xd0>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fa0:	2310      	movs	r3, #16
 8001fa2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fac:	2308      	movs	r3, #8
 8001fae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001fb0:	23a8      	movs	r3, #168	; 0xa8
 8001fb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001fb8:	2304      	movs	r3, #4
 8001fba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fbc:	f107 0320 	add.w	r3, r7, #32
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f001 ffc9 	bl	8003f58 <HAL_RCC_OscConfig>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001fcc:	f000 fc1a 	bl	8002804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fd0:	230f      	movs	r3, #15
 8001fd2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fdc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fe0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fe2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001fe8:	f107 030c 	add.w	r3, r7, #12
 8001fec:	2105      	movs	r1, #5
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f002 fa2a 	bl	8004448 <HAL_RCC_ClockConfig>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001ffa:	f000 fc03 	bl	8002804 <Error_Handler>
  }
}
 8001ffe:	bf00      	nop
 8002000:	3750      	adds	r7, #80	; 0x50
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800
 800200c:	40007000 	.word	0x40007000

08002010 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08c      	sub	sp, #48	; 0x30
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002016:	f107 030c 	add.w	r3, r7, #12
 800201a:	2224      	movs	r2, #36	; 0x24
 800201c:	2100      	movs	r1, #0
 800201e:	4618      	mov	r0, r3
 8002020:	f005 fd84 	bl	8007b2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002024:	1d3b      	adds	r3, r7, #4
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800202c:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <MX_TIM1_Init+0xa8>)
 800202e:	4a23      	ldr	r2, [pc, #140]	; (80020bc <MX_TIM1_Init+0xac>)
 8002030:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002032:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <MX_TIM1_Init+0xa8>)
 8002034:	2200      	movs	r2, #0
 8002036:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002038:	4b1f      	ldr	r3, [pc, #124]	; (80020b8 <MX_TIM1_Init+0xa8>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800203e:	4b1e      	ldr	r3, [pc, #120]	; (80020b8 <MX_TIM1_Init+0xa8>)
 8002040:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002044:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002046:	4b1c      	ldr	r3, [pc, #112]	; (80020b8 <MX_TIM1_Init+0xa8>)
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800204c:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <MX_TIM1_Init+0xa8>)
 800204e:	2200      	movs	r2, #0
 8002050:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002052:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <MX_TIM1_Init+0xa8>)
 8002054:	2200      	movs	r2, #0
 8002056:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002058:	2303      	movs	r3, #3
 800205a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800205c:	2300      	movs	r3, #0
 800205e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002060:	2301      	movs	r3, #1
 8002062:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002064:	2300      	movs	r3, #0
 8002066:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800206c:	2300      	movs	r3, #0
 800206e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002070:	2301      	movs	r3, #1
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002074:	2300      	movs	r3, #0
 8002076:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800207c:	f107 030c 	add.w	r3, r7, #12
 8002080:	4619      	mov	r1, r3
 8002082:	480d      	ldr	r0, [pc, #52]	; (80020b8 <MX_TIM1_Init+0xa8>)
 8002084:	f002 fe4a 	bl	8004d1c <HAL_TIM_Encoder_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800208e:	f000 fbb9 	bl	8002804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800209a:	1d3b      	adds	r3, r7, #4
 800209c:	4619      	mov	r1, r3
 800209e:	4806      	ldr	r0, [pc, #24]	; (80020b8 <MX_TIM1_Init+0xa8>)
 80020a0:	f003 fd3a 	bl	8005b18 <HAL_TIMEx_MasterConfigSynchronization>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80020aa:	f000 fbab 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80020ae:	bf00      	nop
 80020b0:	3730      	adds	r7, #48	; 0x30
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	200002e0 	.word	0x200002e0
 80020bc:	40010000 	.word	0x40010000

080020c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08c      	sub	sp, #48	; 0x30
 80020c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020c6:	f107 030c 	add.w	r3, r7, #12
 80020ca:	2224      	movs	r2, #36	; 0x24
 80020cc:	2100      	movs	r1, #0
 80020ce:	4618      	mov	r0, r3
 80020d0:	f005 fd2c 	bl	8007b2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d4:	1d3b      	adds	r3, r7, #4
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020dc:	4b21      	ldr	r3, [pc, #132]	; (8002164 <MX_TIM2_Init+0xa4>)
 80020de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80020e4:	4b1f      	ldr	r3, [pc, #124]	; (8002164 <MX_TIM2_Init+0xa4>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ea:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <MX_TIM2_Init+0xa4>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80020f0:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <MX_TIM2_Init+0xa4>)
 80020f2:	f04f 32ff 	mov.w	r2, #4294967295
 80020f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020f8:	4b1a      	ldr	r3, [pc, #104]	; (8002164 <MX_TIM2_Init+0xa4>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020fe:	4b19      	ldr	r3, [pc, #100]	; (8002164 <MX_TIM2_Init+0xa4>)
 8002100:	2200      	movs	r2, #0
 8002102:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002104:	2303      	movs	r3, #3
 8002106:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002108:	2300      	movs	r3, #0
 800210a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800210c:	2301      	movs	r3, #1
 800210e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002110:	2300      	movs	r3, #0
 8002112:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002118:	2300      	movs	r3, #0
 800211a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800211c:	2301      	movs	r3, #1
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002120:	2300      	movs	r3, #0
 8002122:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002128:	f107 030c 	add.w	r3, r7, #12
 800212c:	4619      	mov	r1, r3
 800212e:	480d      	ldr	r0, [pc, #52]	; (8002164 <MX_TIM2_Init+0xa4>)
 8002130:	f002 fdf4 	bl	8004d1c <HAL_TIM_Encoder_Init>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800213a:	f000 fb63 	bl	8002804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800213e:	2300      	movs	r3, #0
 8002140:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002142:	2300      	movs	r3, #0
 8002144:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	4619      	mov	r1, r3
 800214a:	4806      	ldr	r0, [pc, #24]	; (8002164 <MX_TIM2_Init+0xa4>)
 800214c:	f003 fce4 	bl	8005b18 <HAL_TIMEx_MasterConfigSynchronization>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002156:	f000 fb55 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800215a:	bf00      	nop
 800215c:	3730      	adds	r7, #48	; 0x30
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000328 	.word	0x20000328

08002168 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08c      	sub	sp, #48	; 0x30
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800216e:	f107 030c 	add.w	r3, r7, #12
 8002172:	2224      	movs	r2, #36	; 0x24
 8002174:	2100      	movs	r1, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f005 fcd8 	bl	8007b2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800217c:	1d3b      	adds	r3, r7, #4
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002184:	4b20      	ldr	r3, [pc, #128]	; (8002208 <MX_TIM3_Init+0xa0>)
 8002186:	4a21      	ldr	r2, [pc, #132]	; (800220c <MX_TIM3_Init+0xa4>)
 8002188:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800218a:	4b1f      	ldr	r3, [pc, #124]	; (8002208 <MX_TIM3_Init+0xa0>)
 800218c:	2200      	movs	r2, #0
 800218e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002190:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <MX_TIM3_Init+0xa0>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002196:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <MX_TIM3_Init+0xa0>)
 8002198:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800219c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800219e:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <MX_TIM3_Init+0xa0>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021a4:	4b18      	ldr	r3, [pc, #96]	; (8002208 <MX_TIM3_Init+0xa0>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80021aa:	2303      	movs	r3, #3
 80021ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021b2:	2301      	movs	r3, #1
 80021b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021be:	2300      	movs	r3, #0
 80021c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021c2:	2301      	movs	r3, #1
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021c6:	2300      	movs	r3, #0
 80021c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80021ce:	f107 030c 	add.w	r3, r7, #12
 80021d2:	4619      	mov	r1, r3
 80021d4:	480c      	ldr	r0, [pc, #48]	; (8002208 <MX_TIM3_Init+0xa0>)
 80021d6:	f002 fda1 	bl	8004d1c <HAL_TIM_Encoder_Init>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80021e0:	f000 fb10 	bl	8002804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e4:	2300      	movs	r3, #0
 80021e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021ec:	1d3b      	adds	r3, r7, #4
 80021ee:	4619      	mov	r1, r3
 80021f0:	4805      	ldr	r0, [pc, #20]	; (8002208 <MX_TIM3_Init+0xa0>)
 80021f2:	f003 fc91 	bl	8005b18 <HAL_TIMEx_MasterConfigSynchronization>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80021fc:	f000 fb02 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002200:	bf00      	nop
 8002202:	3730      	adds	r7, #48	; 0x30
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20000370 	.word	0x20000370
 800220c:	40000400 	.word	0x40000400

08002210 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08e      	sub	sp, #56	; 0x38
 8002214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	605a      	str	r2, [r3, #4]
 8002220:	609a      	str	r2, [r3, #8]
 8002222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002224:	f107 0320 	add.w	r3, r7, #32
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800222e:	1d3b      	adds	r3, r7, #4
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
 800223c:	615a      	str	r2, [r3, #20]
 800223e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002240:	4b3d      	ldr	r3, [pc, #244]	; (8002338 <MX_TIM4_Init+0x128>)
 8002242:	4a3e      	ldr	r2, [pc, #248]	; (800233c <MX_TIM4_Init+0x12c>)
 8002244:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8002246:	4b3c      	ldr	r3, [pc, #240]	; (8002338 <MX_TIM4_Init+0x128>)
 8002248:	2253      	movs	r2, #83	; 0x53
 800224a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800224c:	4b3a      	ldr	r3, [pc, #232]	; (8002338 <MX_TIM4_Init+0x128>)
 800224e:	2200      	movs	r2, #0
 8002250:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002252:	4b39      	ldr	r3, [pc, #228]	; (8002338 <MX_TIM4_Init+0x128>)
 8002254:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002258:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800225a:	4b37      	ldr	r3, [pc, #220]	; (8002338 <MX_TIM4_Init+0x128>)
 800225c:	2200      	movs	r2, #0
 800225e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002260:	4b35      	ldr	r3, [pc, #212]	; (8002338 <MX_TIM4_Init+0x128>)
 8002262:	2200      	movs	r2, #0
 8002264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002266:	4834      	ldr	r0, [pc, #208]	; (8002338 <MX_TIM4_Init+0x128>)
 8002268:	f002 fb0e 	bl	8004888 <HAL_TIM_Base_Init>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002272:	f000 fac7 	bl	8002804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800227c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002280:	4619      	mov	r1, r3
 8002282:	482d      	ldr	r0, [pc, #180]	; (8002338 <MX_TIM4_Init+0x128>)
 8002284:	f003 f848 	bl	8005318 <HAL_TIM_ConfigClockSource>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800228e:	f000 fab9 	bl	8002804 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002292:	4829      	ldr	r0, [pc, #164]	; (8002338 <MX_TIM4_Init+0x128>)
 8002294:	f002 fc20 	bl	8004ad8 <HAL_TIM_PWM_Init>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800229e:	f000 fab1 	bl	8002804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022a2:	2300      	movs	r3, #0
 80022a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022a6:	2300      	movs	r3, #0
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022aa:	f107 0320 	add.w	r3, r7, #32
 80022ae:	4619      	mov	r1, r3
 80022b0:	4821      	ldr	r0, [pc, #132]	; (8002338 <MX_TIM4_Init+0x128>)
 80022b2:	f003 fc31 	bl	8005b18 <HAL_TIMEx_MasterConfigSynchronization>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80022bc:	f000 faa2 	bl	8002804 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022c0:	2360      	movs	r3, #96	; 0x60
 80022c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022d0:	1d3b      	adds	r3, r7, #4
 80022d2:	2200      	movs	r2, #0
 80022d4:	4619      	mov	r1, r3
 80022d6:	4818      	ldr	r0, [pc, #96]	; (8002338 <MX_TIM4_Init+0x128>)
 80022d8:	f002 ff5c 	bl	8005194 <HAL_TIM_PWM_ConfigChannel>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80022e2:	f000 fa8f 	bl	8002804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022e6:	1d3b      	adds	r3, r7, #4
 80022e8:	2204      	movs	r2, #4
 80022ea:	4619      	mov	r1, r3
 80022ec:	4812      	ldr	r0, [pc, #72]	; (8002338 <MX_TIM4_Init+0x128>)
 80022ee:	f002 ff51 	bl	8005194 <HAL_TIM_PWM_ConfigChannel>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80022f8:	f000 fa84 	bl	8002804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022fc:	1d3b      	adds	r3, r7, #4
 80022fe:	2208      	movs	r2, #8
 8002300:	4619      	mov	r1, r3
 8002302:	480d      	ldr	r0, [pc, #52]	; (8002338 <MX_TIM4_Init+0x128>)
 8002304:	f002 ff46 	bl	8005194 <HAL_TIM_PWM_ConfigChannel>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800230e:	f000 fa79 	bl	8002804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002312:	1d3b      	adds	r3, r7, #4
 8002314:	220c      	movs	r2, #12
 8002316:	4619      	mov	r1, r3
 8002318:	4807      	ldr	r0, [pc, #28]	; (8002338 <MX_TIM4_Init+0x128>)
 800231a:	f002 ff3b 	bl	8005194 <HAL_TIM_PWM_ConfigChannel>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8002324:	f000 fa6e 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002328:	4803      	ldr	r0, [pc, #12]	; (8002338 <MX_TIM4_Init+0x128>)
 800232a:	f000 fbf9 	bl	8002b20 <HAL_TIM_MspPostInit>

}
 800232e:	bf00      	nop
 8002330:	3738      	adds	r7, #56	; 0x38
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	200003b8 	.word	0x200003b8
 800233c:	40000800 	.word	0x40000800

08002340 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08c      	sub	sp, #48	; 0x30
 8002344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002346:	f107 030c 	add.w	r3, r7, #12
 800234a:	2224      	movs	r2, #36	; 0x24
 800234c:	2100      	movs	r1, #0
 800234e:	4618      	mov	r0, r3
 8002350:	f005 fbec 	bl	8007b2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002354:	1d3b      	adds	r3, r7, #4
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800235c:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <MX_TIM5_Init+0xa0>)
 800235e:	4a21      	ldr	r2, [pc, #132]	; (80023e4 <MX_TIM5_Init+0xa4>)
 8002360:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002362:	4b1f      	ldr	r3, [pc, #124]	; (80023e0 <MX_TIM5_Init+0xa0>)
 8002364:	2200      	movs	r2, #0
 8002366:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002368:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <MX_TIM5_Init+0xa0>)
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800236e:	4b1c      	ldr	r3, [pc, #112]	; (80023e0 <MX_TIM5_Init+0xa0>)
 8002370:	f04f 32ff 	mov.w	r2, #4294967295
 8002374:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002376:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <MX_TIM5_Init+0xa0>)
 8002378:	2200      	movs	r2, #0
 800237a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800237c:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <MX_TIM5_Init+0xa0>)
 800237e:	2200      	movs	r2, #0
 8002380:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002382:	2303      	movs	r3, #3
 8002384:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002386:	2300      	movs	r3, #0
 8002388:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800238a:	2301      	movs	r3, #1
 800238c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800238e:	2300      	movs	r3, #0
 8002390:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002396:	2300      	movs	r3, #0
 8002398:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800239a:	2301      	movs	r3, #1
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800239e:	2300      	movs	r3, #0
 80023a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80023a6:	f107 030c 	add.w	r3, r7, #12
 80023aa:	4619      	mov	r1, r3
 80023ac:	480c      	ldr	r0, [pc, #48]	; (80023e0 <MX_TIM5_Init+0xa0>)
 80023ae:	f002 fcb5 	bl	8004d1c <HAL_TIM_Encoder_Init>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80023b8:	f000 fa24 	bl	8002804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023bc:	2300      	movs	r3, #0
 80023be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80023c4:	1d3b      	adds	r3, r7, #4
 80023c6:	4619      	mov	r1, r3
 80023c8:	4805      	ldr	r0, [pc, #20]	; (80023e0 <MX_TIM5_Init+0xa0>)
 80023ca:	f003 fba5 	bl	8005b18 <HAL_TIMEx_MasterConfigSynchronization>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80023d4:	f000 fa16 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80023d8:	bf00      	nop
 80023da:	3730      	adds	r7, #48	; 0x30
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20000400 	.word	0x20000400
 80023e4:	40000c00 	.word	0x40000c00

080023e8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b096      	sub	sp, #88	; 0x58
 80023ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	605a      	str	r2, [r3, #4]
 80023f8:	609a      	str	r2, [r3, #8]
 80023fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	609a      	str	r2, [r3, #8]
 8002412:	60da      	str	r2, [r3, #12]
 8002414:	611a      	str	r2, [r3, #16]
 8002416:	615a      	str	r2, [r3, #20]
 8002418:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800241a:	1d3b      	adds	r3, r7, #4
 800241c:	2220      	movs	r2, #32
 800241e:	2100      	movs	r1, #0
 8002420:	4618      	mov	r0, r3
 8002422:	f005 fb83 	bl	8007b2c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002426:	4b44      	ldr	r3, [pc, #272]	; (8002538 <MX_TIM8_Init+0x150>)
 8002428:	4a44      	ldr	r2, [pc, #272]	; (800253c <MX_TIM8_Init+0x154>)
 800242a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 800242c:	4b42      	ldr	r3, [pc, #264]	; (8002538 <MX_TIM8_Init+0x150>)
 800242e:	22a7      	movs	r2, #167	; 0xa7
 8002430:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002432:	4b41      	ldr	r3, [pc, #260]	; (8002538 <MX_TIM8_Init+0x150>)
 8002434:	2200      	movs	r2, #0
 8002436:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8002438:	4b3f      	ldr	r3, [pc, #252]	; (8002538 <MX_TIM8_Init+0x150>)
 800243a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800243e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002440:	4b3d      	ldr	r3, [pc, #244]	; (8002538 <MX_TIM8_Init+0x150>)
 8002442:	2200      	movs	r2, #0
 8002444:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002446:	4b3c      	ldr	r3, [pc, #240]	; (8002538 <MX_TIM8_Init+0x150>)
 8002448:	2200      	movs	r2, #0
 800244a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800244c:	4b3a      	ldr	r3, [pc, #232]	; (8002538 <MX_TIM8_Init+0x150>)
 800244e:	2200      	movs	r2, #0
 8002450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002452:	4839      	ldr	r0, [pc, #228]	; (8002538 <MX_TIM8_Init+0x150>)
 8002454:	f002 fa18 	bl	8004888 <HAL_TIM_Base_Init>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800245e:	f000 f9d1 	bl	8002804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002466:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002468:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800246c:	4619      	mov	r1, r3
 800246e:	4832      	ldr	r0, [pc, #200]	; (8002538 <MX_TIM8_Init+0x150>)
 8002470:	f002 ff52 	bl	8005318 <HAL_TIM_ConfigClockSource>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800247a:	f000 f9c3 	bl	8002804 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800247e:	482e      	ldr	r0, [pc, #184]	; (8002538 <MX_TIM8_Init+0x150>)
 8002480:	f002 fb2a 	bl	8004ad8 <HAL_TIM_PWM_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800248a:	f000 f9bb 	bl	8002804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800248e:	2300      	movs	r3, #0
 8002490:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002492:	2300      	movs	r3, #0
 8002494:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002496:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800249a:	4619      	mov	r1, r3
 800249c:	4826      	ldr	r0, [pc, #152]	; (8002538 <MX_TIM8_Init+0x150>)
 800249e:	f003 fb3b 	bl	8005b18 <HAL_TIMEx_MasterConfigSynchronization>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80024a8:	f000 f9ac 	bl	8002804 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024ac:	2360      	movs	r3, #96	; 0x60
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024b4:	2300      	movs	r3, #0
 80024b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024b8:	2300      	movs	r3, #0
 80024ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024bc:	2300      	movs	r3, #0
 80024be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024c0:	2300      	movs	r3, #0
 80024c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024c4:	2300      	movs	r3, #0
 80024c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024cc:	2208      	movs	r2, #8
 80024ce:	4619      	mov	r1, r3
 80024d0:	4819      	ldr	r0, [pc, #100]	; (8002538 <MX_TIM8_Init+0x150>)
 80024d2:	f002 fe5f 	bl	8005194 <HAL_TIM_PWM_ConfigChannel>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80024dc:	f000 f992 	bl	8002804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e4:	220c      	movs	r2, #12
 80024e6:	4619      	mov	r1, r3
 80024e8:	4813      	ldr	r0, [pc, #76]	; (8002538 <MX_TIM8_Init+0x150>)
 80024ea:	f002 fe53 	bl	8005194 <HAL_TIM_PWM_ConfigChannel>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80024f4:	f000 f986 	bl	8002804 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024f8:	2300      	movs	r3, #0
 80024fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024fc:	2300      	movs	r3, #0
 80024fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002500:	2300      	movs	r3, #0
 8002502:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800250c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002510:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002512:	2300      	movs	r3, #0
 8002514:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002516:	1d3b      	adds	r3, r7, #4
 8002518:	4619      	mov	r1, r3
 800251a:	4807      	ldr	r0, [pc, #28]	; (8002538 <MX_TIM8_Init+0x150>)
 800251c:	f003 fb78 	bl	8005c10 <HAL_TIMEx_ConfigBreakDeadTime>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8002526:	f000 f96d 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800252a:	4803      	ldr	r0, [pc, #12]	; (8002538 <MX_TIM8_Init+0x150>)
 800252c:	f000 faf8 	bl	8002b20 <HAL_TIM_MspPostInit>

}
 8002530:	bf00      	nop
 8002532:	3758      	adds	r7, #88	; 0x58
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20000448 	.word	0x20000448
 800253c:	40010400 	.word	0x40010400

08002540 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08c      	sub	sp, #48	; 0x30
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002546:	f107 0320 	add.w	r3, r7, #32
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	605a      	str	r2, [r3, #4]
 8002550:	609a      	str	r2, [r3, #8]
 8002552:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002554:	1d3b      	adds	r3, r7, #4
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	605a      	str	r2, [r3, #4]
 800255c:	609a      	str	r2, [r3, #8]
 800255e:	60da      	str	r2, [r3, #12]
 8002560:	611a      	str	r2, [r3, #16]
 8002562:	615a      	str	r2, [r3, #20]
 8002564:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002566:	4b2b      	ldr	r3, [pc, #172]	; (8002614 <MX_TIM9_Init+0xd4>)
 8002568:	4a2b      	ldr	r2, [pc, #172]	; (8002618 <MX_TIM9_Init+0xd8>)
 800256a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 168-1;
 800256c:	4b29      	ldr	r3, [pc, #164]	; (8002614 <MX_TIM9_Init+0xd4>)
 800256e:	22a7      	movs	r2, #167	; 0xa7
 8002570:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002572:	4b28      	ldr	r3, [pc, #160]	; (8002614 <MX_TIM9_Init+0xd4>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8002578:	4b26      	ldr	r3, [pc, #152]	; (8002614 <MX_TIM9_Init+0xd4>)
 800257a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800257e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002580:	4b24      	ldr	r3, [pc, #144]	; (8002614 <MX_TIM9_Init+0xd4>)
 8002582:	2200      	movs	r2, #0
 8002584:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002586:	4b23      	ldr	r3, [pc, #140]	; (8002614 <MX_TIM9_Init+0xd4>)
 8002588:	2200      	movs	r2, #0
 800258a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800258c:	4821      	ldr	r0, [pc, #132]	; (8002614 <MX_TIM9_Init+0xd4>)
 800258e:	f002 f97b 	bl	8004888 <HAL_TIM_Base_Init>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8002598:	f000 f934 	bl	8002804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800259c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025a0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80025a2:	f107 0320 	add.w	r3, r7, #32
 80025a6:	4619      	mov	r1, r3
 80025a8:	481a      	ldr	r0, [pc, #104]	; (8002614 <MX_TIM9_Init+0xd4>)
 80025aa:	f002 feb5 	bl	8005318 <HAL_TIM_ConfigClockSource>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 80025b4:	f000 f926 	bl	8002804 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80025b8:	4816      	ldr	r0, [pc, #88]	; (8002614 <MX_TIM9_Init+0xd4>)
 80025ba:	f002 fa8d 	bl	8004ad8 <HAL_TIM_PWM_Init>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 80025c4:	f000 f91e 	bl	8002804 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025c8:	2360      	movs	r3, #96	; 0x60
 80025ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025d8:	1d3b      	adds	r3, r7, #4
 80025da:	2200      	movs	r2, #0
 80025dc:	4619      	mov	r1, r3
 80025de:	480d      	ldr	r0, [pc, #52]	; (8002614 <MX_TIM9_Init+0xd4>)
 80025e0:	f002 fdd8 	bl	8005194 <HAL_TIM_PWM_ConfigChannel>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 80025ea:	f000 f90b 	bl	8002804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025ee:	1d3b      	adds	r3, r7, #4
 80025f0:	2204      	movs	r2, #4
 80025f2:	4619      	mov	r1, r3
 80025f4:	4807      	ldr	r0, [pc, #28]	; (8002614 <MX_TIM9_Init+0xd4>)
 80025f6:	f002 fdcd 	bl	8005194 <HAL_TIM_PWM_ConfigChannel>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 8002600:	f000 f900 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002604:	4803      	ldr	r0, [pc, #12]	; (8002614 <MX_TIM9_Init+0xd4>)
 8002606:	f000 fa8b 	bl	8002b20 <HAL_TIM_MspPostInit>

}
 800260a:	bf00      	nop
 800260c:	3730      	adds	r7, #48	; 0x30
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000490 	.word	0x20000490
 8002618:	40014000 	.word	0x40014000

0800261c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002620:	4b11      	ldr	r3, [pc, #68]	; (8002668 <MX_USART3_UART_Init+0x4c>)
 8002622:	4a12      	ldr	r2, [pc, #72]	; (800266c <MX_USART3_UART_Init+0x50>)
 8002624:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <MX_USART3_UART_Init+0x4c>)
 8002628:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800262c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800262e:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <MX_USART3_UART_Init+0x4c>)
 8002630:	2200      	movs	r2, #0
 8002632:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002634:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <MX_USART3_UART_Init+0x4c>)
 8002636:	2200      	movs	r2, #0
 8002638:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800263a:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <MX_USART3_UART_Init+0x4c>)
 800263c:	2200      	movs	r2, #0
 800263e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002640:	4b09      	ldr	r3, [pc, #36]	; (8002668 <MX_USART3_UART_Init+0x4c>)
 8002642:	220c      	movs	r2, #12
 8002644:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002646:	4b08      	ldr	r3, [pc, #32]	; (8002668 <MX_USART3_UART_Init+0x4c>)
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <MX_USART3_UART_Init+0x4c>)
 800264e:	2200      	movs	r2, #0
 8002650:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002652:	4805      	ldr	r0, [pc, #20]	; (8002668 <MX_USART3_UART_Init+0x4c>)
 8002654:	f003 fb42 	bl	8005cdc <HAL_UART_Init>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800265e:	f000 f8d1 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	200004d8 	.word	0x200004d8
 800266c:	40004800 	.word	0x40004800

08002670 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	607b      	str	r3, [r7, #4]
 800267a:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <MX_DMA_Init+0x3c>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	4a0b      	ldr	r2, [pc, #44]	; (80026ac <MX_DMA_Init+0x3c>)
 8002680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002684:	6313      	str	r3, [r2, #48]	; 0x30
 8002686:	4b09      	ldr	r3, [pc, #36]	; (80026ac <MX_DMA_Init+0x3c>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800268e:	607b      	str	r3, [r7, #4]
 8002690:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 3, 0);
 8002692:	2200      	movs	r2, #0
 8002694:	2103      	movs	r1, #3
 8002696:	200c      	movs	r0, #12
 8002698:	f000 fe21 	bl	80032de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800269c:	200c      	movs	r0, #12
 800269e:	f000 fe3a 	bl	8003316 <HAL_NVIC_EnableIRQ>

}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40023800 	.word	0x40023800

080026b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08a      	sub	sp, #40	; 0x28
 80026b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b6:	f107 0314 	add.w	r3, r7, #20
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	605a      	str	r2, [r3, #4]
 80026c0:	609a      	str	r2, [r3, #8]
 80026c2:	60da      	str	r2, [r3, #12]
 80026c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	4b4a      	ldr	r3, [pc, #296]	; (80027f4 <MX_GPIO_Init+0x144>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	4a49      	ldr	r2, [pc, #292]	; (80027f4 <MX_GPIO_Init+0x144>)
 80026d0:	f043 0304 	orr.w	r3, r3, #4
 80026d4:	6313      	str	r3, [r2, #48]	; 0x30
 80026d6:	4b47      	ldr	r3, [pc, #284]	; (80027f4 <MX_GPIO_Init+0x144>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	4b43      	ldr	r3, [pc, #268]	; (80027f4 <MX_GPIO_Init+0x144>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	4a42      	ldr	r2, [pc, #264]	; (80027f4 <MX_GPIO_Init+0x144>)
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	6313      	str	r3, [r2, #48]	; 0x30
 80026f2:	4b40      	ldr	r3, [pc, #256]	; (80027f4 <MX_GPIO_Init+0x144>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	4b3c      	ldr	r3, [pc, #240]	; (80027f4 <MX_GPIO_Init+0x144>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	4a3b      	ldr	r2, [pc, #236]	; (80027f4 <MX_GPIO_Init+0x144>)
 8002708:	f043 0302 	orr.w	r3, r3, #2
 800270c:	6313      	str	r3, [r2, #48]	; 0x30
 800270e:	4b39      	ldr	r3, [pc, #228]	; (80027f4 <MX_GPIO_Init+0x144>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	60bb      	str	r3, [r7, #8]
 8002718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	607b      	str	r3, [r7, #4]
 800271e:	4b35      	ldr	r3, [pc, #212]	; (80027f4 <MX_GPIO_Init+0x144>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	4a34      	ldr	r2, [pc, #208]	; (80027f4 <MX_GPIO_Init+0x144>)
 8002724:	f043 0308 	orr.w	r3, r3, #8
 8002728:	6313      	str	r3, [r2, #48]	; 0x30
 800272a:	4b32      	ldr	r3, [pc, #200]	; (80027f4 <MX_GPIO_Init+0x144>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	607b      	str	r3, [r7, #4]
 8002734:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002736:	2200      	movs	r2, #0
 8002738:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800273c:	482e      	ldr	r0, [pc, #184]	; (80027f8 <MX_GPIO_Init+0x148>)
 800273e:	f001 fbbf 	bl	8003ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002742:	2200      	movs	r2, #0
 8002744:	2140      	movs	r1, #64	; 0x40
 8002746:	482d      	ldr	r0, [pc, #180]	; (80027fc <MX_GPIO_Init+0x14c>)
 8002748:	f001 fbba 	bl	8003ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800274c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002752:	2301      	movs	r3, #1
 8002754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275a:	2300      	movs	r3, #0
 800275c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800275e:	f107 0314 	add.w	r3, r7, #20
 8002762:	4619      	mov	r1, r3
 8002764:	4824      	ldr	r0, [pc, #144]	; (80027f8 <MX_GPIO_Init+0x148>)
 8002766:	f001 f9f7 	bl	8003b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11;
 800276a:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 800276e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002770:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002776:	2301      	movs	r3, #1
 8002778:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800277a:	f107 0314 	add.w	r3, r7, #20
 800277e:	4619      	mov	r1, r3
 8002780:	481d      	ldr	r0, [pc, #116]	; (80027f8 <MX_GPIO_Init+0x148>)
 8002782:	f001 f9e9 	bl	8003b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD2 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8002786:	2344      	movs	r3, #68	; 0x44
 8002788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800278a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800278e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002790:	2301      	movs	r3, #1
 8002792:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002794:	f107 0314 	add.w	r3, r7, #20
 8002798:	4619      	mov	r1, r3
 800279a:	4819      	ldr	r0, [pc, #100]	; (8002800 <MX_GPIO_Init+0x150>)
 800279c:	f001 f9dc 	bl	8003b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027a0:	2340      	movs	r3, #64	; 0x40
 80027a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a4:	2301      	movs	r3, #1
 80027a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ac:	2300      	movs	r3, #0
 80027ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b0:	f107 0314 	add.w	r3, r7, #20
 80027b4:	4619      	mov	r1, r3
 80027b6:	4811      	ldr	r0, [pc, #68]	; (80027fc <MX_GPIO_Init+0x14c>)
 80027b8:	f001 f9ce 	bl	8003b58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 80027bc:	2200      	movs	r2, #0
 80027be:	2101      	movs	r1, #1
 80027c0:	2008      	movs	r0, #8
 80027c2:	f000 fd8c 	bl	80032de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80027c6:	2008      	movs	r0, #8
 80027c8:	f000 fda5 	bl	8003316 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80027cc:	2200      	movs	r2, #0
 80027ce:	2101      	movs	r1, #1
 80027d0:	2017      	movs	r0, #23
 80027d2:	f000 fd84 	bl	80032de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80027d6:	2017      	movs	r0, #23
 80027d8:	f000 fd9d 	bl	8003316 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80027dc:	2200      	movs	r2, #0
 80027de:	2101      	movs	r1, #1
 80027e0:	2028      	movs	r0, #40	; 0x28
 80027e2:	f000 fd7c 	bl	80032de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80027e6:	2028      	movs	r0, #40	; 0x28
 80027e8:	f000 fd95 	bl	8003316 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027ec:	bf00      	nop
 80027ee:	3728      	adds	r7, #40	; 0x28
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40020800 	.word	0x40020800
 80027fc:	40020400 	.word	0x40020400
 8002800:	40020c00 	.word	0x40020c00

08002804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002808:	b672      	cpsid	i
}
 800280a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800280c:	e7fe      	b.n	800280c <Error_Handler+0x8>
	...

08002810 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	607b      	str	r3, [r7, #4]
 800281a:	4b10      	ldr	r3, [pc, #64]	; (800285c <HAL_MspInit+0x4c>)
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	4a0f      	ldr	r2, [pc, #60]	; (800285c <HAL_MspInit+0x4c>)
 8002820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002824:	6453      	str	r3, [r2, #68]	; 0x44
 8002826:	4b0d      	ldr	r3, [pc, #52]	; (800285c <HAL_MspInit+0x4c>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800282e:	607b      	str	r3, [r7, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	603b      	str	r3, [r7, #0]
 8002836:	4b09      	ldr	r3, [pc, #36]	; (800285c <HAL_MspInit+0x4c>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	4a08      	ldr	r2, [pc, #32]	; (800285c <HAL_MspInit+0x4c>)
 800283c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002840:	6413      	str	r3, [r2, #64]	; 0x40
 8002842:	4b06      	ldr	r3, [pc, #24]	; (800285c <HAL_MspInit+0x4c>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284a:	603b      	str	r3, [r7, #0]
 800284c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40023800 	.word	0x40023800

08002860 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b090      	sub	sp, #64	; 0x40
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002868:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
 8002876:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a78      	ldr	r2, [pc, #480]	; (8002a60 <HAL_TIM_Encoder_MspInit+0x200>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d135      	bne.n	80028ee <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	62bb      	str	r3, [r7, #40]	; 0x28
 8002886:	4b77      	ldr	r3, [pc, #476]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x204>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	4a76      	ldr	r2, [pc, #472]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x204>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	6453      	str	r3, [r2, #68]	; 0x44
 8002892:	4b74      	ldr	r3, [pc, #464]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x204>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	62bb      	str	r3, [r7, #40]	; 0x28
 800289c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
 80028a2:	4b70      	ldr	r3, [pc, #448]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x204>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	4a6f      	ldr	r2, [pc, #444]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x204>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	6313      	str	r3, [r2, #48]	; 0x30
 80028ae:	4b6d      	ldr	r3, [pc, #436]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x204>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_J1_Pin|ENC_B_J1_Pin;
 80028ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c0:	2302      	movs	r3, #2
 80028c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c8:	2300      	movs	r3, #0
 80028ca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028cc:	2301      	movs	r3, #1
 80028ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028d4:	4619      	mov	r1, r3
 80028d6:	4864      	ldr	r0, [pc, #400]	; (8002a68 <HAL_TIM_Encoder_MspInit+0x208>)
 80028d8:	f001 f93e 	bl	8003b58 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 0);
 80028dc:	2200      	movs	r2, #0
 80028de:	2102      	movs	r1, #2
 80028e0:	2018      	movs	r0, #24
 80028e2:	f000 fcfc 	bl	80032de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80028e6:	2018      	movs	r0, #24
 80028e8:	f000 fd15 	bl	8003316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80028ec:	e0b3      	b.n	8002a56 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM2)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f6:	d14b      	bne.n	8002990 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028f8:	2300      	movs	r3, #0
 80028fa:	623b      	str	r3, [r7, #32]
 80028fc:	4b59      	ldr	r3, [pc, #356]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x204>)
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	4a58      	ldr	r2, [pc, #352]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x204>)
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	6413      	str	r3, [r2, #64]	; 0x40
 8002908:	4b56      	ldr	r3, [pc, #344]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x204>)
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	623b      	str	r3, [r7, #32]
 8002912:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002914:	2300      	movs	r3, #0
 8002916:	61fb      	str	r3, [r7, #28]
 8002918:	4b52      	ldr	r3, [pc, #328]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x204>)
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	4a51      	ldr	r2, [pc, #324]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x204>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	6313      	str	r3, [r2, #48]	; 0x30
 8002924:	4b4f      	ldr	r3, [pc, #316]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x204>)
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	61fb      	str	r3, [r7, #28]
 800292e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002930:	2300      	movs	r3, #0
 8002932:	61bb      	str	r3, [r7, #24]
 8002934:	4b4b      	ldr	r3, [pc, #300]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x204>)
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	4a4a      	ldr	r2, [pc, #296]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x204>)
 800293a:	f043 0302 	orr.w	r3, r3, #2
 800293e:	6313      	str	r3, [r2, #48]	; 0x30
 8002940:	4b48      	ldr	r3, [pc, #288]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x204>)
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	61bb      	str	r3, [r7, #24]
 800294a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENC_A_J2_Pin;
 800294c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002950:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002952:	2302      	movs	r3, #2
 8002954:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002956:	2300      	movs	r3, #0
 8002958:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295a:	2300      	movs	r3, #0
 800295c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800295e:	2301      	movs	r3, #1
 8002960:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC_A_J2_GPIO_Port, &GPIO_InitStruct);
 8002962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002966:	4619      	mov	r1, r3
 8002968:	483f      	ldr	r0, [pc, #252]	; (8002a68 <HAL_TIM_Encoder_MspInit+0x208>)
 800296a:	f001 f8f5 	bl	8003b58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC_B_J2_Pin;
 800296e:	2308      	movs	r3, #8
 8002970:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002972:	2302      	movs	r3, #2
 8002974:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002976:	2300      	movs	r3, #0
 8002978:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297a:	2300      	movs	r3, #0
 800297c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800297e:	2301      	movs	r3, #1
 8002980:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC_B_J2_GPIO_Port, &GPIO_InitStruct);
 8002982:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002986:	4619      	mov	r1, r3
 8002988:	4838      	ldr	r0, [pc, #224]	; (8002a6c <HAL_TIM_Encoder_MspInit+0x20c>)
 800298a:	f001 f8e5 	bl	8003b58 <HAL_GPIO_Init>
}
 800298e:	e062      	b.n	8002a56 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM3)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a36      	ldr	r2, [pc, #216]	; (8002a70 <HAL_TIM_Encoder_MspInit+0x210>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d12c      	bne.n	80029f4 <HAL_TIM_Encoder_MspInit+0x194>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	4b31      	ldr	r3, [pc, #196]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x204>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	4a30      	ldr	r2, [pc, #192]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x204>)
 80029a4:	f043 0302 	orr.w	r3, r3, #2
 80029a8:	6413      	str	r3, [r2, #64]	; 0x40
 80029aa:	4b2e      	ldr	r3, [pc, #184]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x204>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	4b2a      	ldr	r3, [pc, #168]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x204>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	4a29      	ldr	r2, [pc, #164]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x204>)
 80029c0:	f043 0302 	orr.w	r3, r3, #2
 80029c4:	6313      	str	r3, [r2, #48]	; 0x30
 80029c6:	4b27      	ldr	r3, [pc, #156]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x204>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC_A_J3_Pin|ENC_B_J3_Pin;
 80029d2:	2330      	movs	r3, #48	; 0x30
 80029d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d6:	2302      	movs	r3, #2
 80029d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029de:	2300      	movs	r3, #0
 80029e0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029e2:	2302      	movs	r3, #2
 80029e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029ea:	4619      	mov	r1, r3
 80029ec:	481f      	ldr	r0, [pc, #124]	; (8002a6c <HAL_TIM_Encoder_MspInit+0x20c>)
 80029ee:	f001 f8b3 	bl	8003b58 <HAL_GPIO_Init>
}
 80029f2:	e030      	b.n	8002a56 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM5)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a1e      	ldr	r2, [pc, #120]	; (8002a74 <HAL_TIM_Encoder_MspInit+0x214>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d12b      	bne.n	8002a56 <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	4b18      	ldr	r3, [pc, #96]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x204>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	4a17      	ldr	r2, [pc, #92]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x204>)
 8002a08:	f043 0308 	orr.w	r3, r3, #8
 8002a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0e:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x204>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x204>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	4a10      	ldr	r2, [pc, #64]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x204>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2a:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x204>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	60bb      	str	r3, [r7, #8]
 8002a34:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_A_J4_Pin|ENC_B_J4_Pin;
 8002a36:	2303      	movs	r3, #3
 8002a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a42:	2300      	movs	r3, #0
 8002a44:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002a46:	2302      	movs	r3, #2
 8002a48:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4805      	ldr	r0, [pc, #20]	; (8002a68 <HAL_TIM_Encoder_MspInit+0x208>)
 8002a52:	f001 f881 	bl	8003b58 <HAL_GPIO_Init>
}
 8002a56:	bf00      	nop
 8002a58:	3740      	adds	r7, #64	; 0x40
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40010000 	.word	0x40010000
 8002a64:	40023800 	.word	0x40023800
 8002a68:	40020000 	.word	0x40020000
 8002a6c:	40020400 	.word	0x40020400
 8002a70:	40000400 	.word	0x40000400
 8002a74:	40000c00 	.word	0x40000c00

08002a78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a22      	ldr	r2, [pc, #136]	; (8002b10 <HAL_TIM_Base_MspInit+0x98>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d10e      	bne.n	8002aa8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	4b21      	ldr	r3, [pc, #132]	; (8002b14 <HAL_TIM_Base_MspInit+0x9c>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	4a20      	ldr	r2, [pc, #128]	; (8002b14 <HAL_TIM_Base_MspInit+0x9c>)
 8002a94:	f043 0304 	orr.w	r3, r3, #4
 8002a98:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9a:	4b1e      	ldr	r3, [pc, #120]	; (8002b14 <HAL_TIM_Base_MspInit+0x9c>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002aa6:	e02e      	b.n	8002b06 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM8)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a1a      	ldr	r2, [pc, #104]	; (8002b18 <HAL_TIM_Base_MspInit+0xa0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d10e      	bne.n	8002ad0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <HAL_TIM_Base_MspInit+0x9c>)
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	4a16      	ldr	r2, [pc, #88]	; (8002b14 <HAL_TIM_Base_MspInit+0x9c>)
 8002abc:	f043 0302 	orr.w	r3, r3, #2
 8002ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ac2:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <HAL_TIM_Base_MspInit+0x9c>)
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	693b      	ldr	r3, [r7, #16]
}
 8002ace:	e01a      	b.n	8002b06 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM9)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a11      	ldr	r2, [pc, #68]	; (8002b1c <HAL_TIM_Base_MspInit+0xa4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d115      	bne.n	8002b06 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	4b0d      	ldr	r3, [pc, #52]	; (8002b14 <HAL_TIM_Base_MspInit+0x9c>)
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae2:	4a0c      	ldr	r2, [pc, #48]	; (8002b14 <HAL_TIM_Base_MspInit+0x9c>)
 8002ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aea:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <HAL_TIM_Base_MspInit+0x9c>)
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 0);
 8002af6:	2200      	movs	r2, #0
 8002af8:	2102      	movs	r1, #2
 8002afa:	2018      	movs	r0, #24
 8002afc:	f000 fbef 	bl	80032de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002b00:	2018      	movs	r0, #24
 8002b02:	f000 fc08 	bl	8003316 <HAL_NVIC_EnableIRQ>
}
 8002b06:	bf00      	nop
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40000800 	.word	0x40000800
 8002b14:	40023800 	.word	0x40023800
 8002b18:	40010400 	.word	0x40010400
 8002b1c:	40014000 	.word	0x40014000

08002b20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08a      	sub	sp, #40	; 0x28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b28:	f107 0314 	add.w	r3, r7, #20
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a37      	ldr	r2, [pc, #220]	; (8002c1c <HAL_TIM_MspPostInit+0xfc>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d11f      	bne.n	8002b82 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	4b36      	ldr	r3, [pc, #216]	; (8002c20 <HAL_TIM_MspPostInit+0x100>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	4a35      	ldr	r2, [pc, #212]	; (8002c20 <HAL_TIM_MspPostInit+0x100>)
 8002b4c:	f043 0308 	orr.w	r3, r3, #8
 8002b50:	6313      	str	r3, [r2, #48]	; 0x30
 8002b52:	4b33      	ldr	r3, [pc, #204]	; (8002c20 <HAL_TIM_MspPostInit+0x100>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	693b      	ldr	r3, [r7, #16]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM3_A_Pin|PWM3_B_Pin|PWM2_A_Pin|PWM2_B_Pin;
 8002b5e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b64:	2302      	movs	r3, #2
 8002b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b70:	2302      	movs	r3, #2
 8002b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b74:	f107 0314 	add.w	r3, r7, #20
 8002b78:	4619      	mov	r1, r3
 8002b7a:	482a      	ldr	r0, [pc, #168]	; (8002c24 <HAL_TIM_MspPostInit+0x104>)
 8002b7c:	f000 ffec 	bl	8003b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002b80:	e047      	b.n	8002c12 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a28      	ldr	r2, [pc, #160]	; (8002c28 <HAL_TIM_MspPostInit+0x108>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d11f      	bne.n	8002bcc <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	4b23      	ldr	r3, [pc, #140]	; (8002c20 <HAL_TIM_MspPostInit+0x100>)
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	4a22      	ldr	r2, [pc, #136]	; (8002c20 <HAL_TIM_MspPostInit+0x100>)
 8002b96:	f043 0304 	orr.w	r3, r3, #4
 8002b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9c:	4b20      	ldr	r3, [pc, #128]	; (8002c20 <HAL_TIM_MspPostInit+0x100>)
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_A_Pin|PWM1_B_Pin;
 8002ba8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bbe:	f107 0314 	add.w	r3, r7, #20
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4819      	ldr	r0, [pc, #100]	; (8002c2c <HAL_TIM_MspPostInit+0x10c>)
 8002bc6:	f000 ffc7 	bl	8003b58 <HAL_GPIO_Init>
}
 8002bca:	e022      	b.n	8002c12 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM9)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a17      	ldr	r2, [pc, #92]	; (8002c30 <HAL_TIM_MspPostInit+0x110>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d11d      	bne.n	8002c12 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <HAL_TIM_MspPostInit+0x100>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	4a10      	ldr	r2, [pc, #64]	; (8002c20 <HAL_TIM_MspPostInit+0x100>)
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	6313      	str	r3, [r2, #48]	; 0x30
 8002be6:	4b0e      	ldr	r3, [pc, #56]	; (8002c20 <HAL_TIM_MspPostInit+0x100>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM4_A_Pin|PWM4_B_Pin;
 8002bf2:	230c      	movs	r3, #12
 8002bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002c02:	2303      	movs	r3, #3
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c06:	f107 0314 	add.w	r3, r7, #20
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4809      	ldr	r0, [pc, #36]	; (8002c34 <HAL_TIM_MspPostInit+0x114>)
 8002c0e:	f000 ffa3 	bl	8003b58 <HAL_GPIO_Init>
}
 8002c12:	bf00      	nop
 8002c14:	3728      	adds	r7, #40	; 0x28
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40000800 	.word	0x40000800
 8002c20:	40023800 	.word	0x40023800
 8002c24:	40020c00 	.word	0x40020c00
 8002c28:	40010400 	.word	0x40010400
 8002c2c:	40020800 	.word	0x40020800
 8002c30:	40014000 	.word	0x40014000
 8002c34:	40020000 	.word	0x40020000

08002c38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08a      	sub	sp, #40	; 0x28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c40:	f107 0314 	add.w	r3, r7, #20
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
 8002c4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a35      	ldr	r2, [pc, #212]	; (8002d2c <HAL_UART_MspInit+0xf4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d163      	bne.n	8002d22 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	4b34      	ldr	r3, [pc, #208]	; (8002d30 <HAL_UART_MspInit+0xf8>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	4a33      	ldr	r2, [pc, #204]	; (8002d30 <HAL_UART_MspInit+0xf8>)
 8002c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c68:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6a:	4b31      	ldr	r3, [pc, #196]	; (8002d30 <HAL_UART_MspInit+0xf8>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	4b2d      	ldr	r3, [pc, #180]	; (8002d30 <HAL_UART_MspInit+0xf8>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	4a2c      	ldr	r2, [pc, #176]	; (8002d30 <HAL_UART_MspInit+0xf8>)
 8002c80:	f043 0302 	orr.w	r3, r3, #2
 8002c84:	6313      	str	r3, [r2, #48]	; 0x30
 8002c86:	4b2a      	ldr	r3, [pc, #168]	; (8002d30 <HAL_UART_MspInit+0xf8>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002c92:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ca4:	2307      	movs	r3, #7
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca8:	f107 0314 	add.w	r3, r7, #20
 8002cac:	4619      	mov	r1, r3
 8002cae:	4821      	ldr	r0, [pc, #132]	; (8002d34 <HAL_UART_MspInit+0xfc>)
 8002cb0:	f000 ff52 	bl	8003b58 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002cb4:	4b20      	ldr	r3, [pc, #128]	; (8002d38 <HAL_UART_MspInit+0x100>)
 8002cb6:	4a21      	ldr	r2, [pc, #132]	; (8002d3c <HAL_UART_MspInit+0x104>)
 8002cb8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002cba:	4b1f      	ldr	r3, [pc, #124]	; (8002d38 <HAL_UART_MspInit+0x100>)
 8002cbc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cc0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cc2:	4b1d      	ldr	r3, [pc, #116]	; (8002d38 <HAL_UART_MspInit+0x100>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cc8:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <HAL_UART_MspInit+0x100>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002cce:	4b1a      	ldr	r3, [pc, #104]	; (8002d38 <HAL_UART_MspInit+0x100>)
 8002cd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cd4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cd6:	4b18      	ldr	r3, [pc, #96]	; (8002d38 <HAL_UART_MspInit+0x100>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cdc:	4b16      	ldr	r3, [pc, #88]	; (8002d38 <HAL_UART_MspInit+0x100>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002ce2:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <HAL_UART_MspInit+0x100>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002ce8:	4b13      	ldr	r3, [pc, #76]	; (8002d38 <HAL_UART_MspInit+0x100>)
 8002cea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cee:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cf0:	4b11      	ldr	r3, [pc, #68]	; (8002d38 <HAL_UART_MspInit+0x100>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002cf6:	4810      	ldr	r0, [pc, #64]	; (8002d38 <HAL_UART_MspInit+0x100>)
 8002cf8:	f000 fb2c 	bl	8003354 <HAL_DMA_Init>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002d02:	f7ff fd7f 	bl	8002804 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a0b      	ldr	r2, [pc, #44]	; (8002d38 <HAL_UART_MspInit+0x100>)
 8002d0a:	639a      	str	r2, [r3, #56]	; 0x38
 8002d0c:	4a0a      	ldr	r2, [pc, #40]	; (8002d38 <HAL_UART_MspInit+0x100>)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002d12:	2200      	movs	r2, #0
 8002d14:	2100      	movs	r1, #0
 8002d16:	2027      	movs	r0, #39	; 0x27
 8002d18:	f000 fae1 	bl	80032de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002d1c:	2027      	movs	r0, #39	; 0x27
 8002d1e:	f000 fafa 	bl	8003316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d22:	bf00      	nop
 8002d24:	3728      	adds	r7, #40	; 0x28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40004800 	.word	0x40004800
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40020400 	.word	0x40020400
 8002d38:	2000051c 	.word	0x2000051c
 8002d3c:	40026028 	.word	0x40026028

08002d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d44:	e7fe      	b.n	8002d44 <NMI_Handler+0x4>

08002d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d46:	b480      	push	{r7}
 8002d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d4a:	e7fe      	b.n	8002d4a <HardFault_Handler+0x4>

08002d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d50:	e7fe      	b.n	8002d50 <MemManage_Handler+0x4>

08002d52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d52:	b480      	push	{r7}
 8002d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d56:	e7fe      	b.n	8002d56 <BusFault_Handler+0x4>

08002d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d5c:	e7fe      	b.n	8002d5c <UsageFault_Handler+0x4>

08002d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d62:	bf00      	nop
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d8c:	f000 f996 	bl	80030bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d90:	bf00      	nop
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002d98:	2004      	movs	r0, #4
 8002d9a:	f001 f8c5 	bl	8003f28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002da8:	4802      	ldr	r0, [pc, #8]	; (8002db4 <DMA1_Stream1_IRQHandler+0x10>)
 8002daa:	f000 fc6b 	bl	8003684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	2000051c 	.word	0x2000051c

08002db8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002dbc:	2040      	movs	r0, #64	; 0x40
 8002dbe:	f001 f8b3 	bl	8003f28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002dc2:	2080      	movs	r0, #128	; 0x80
 8002dc4:	f001 f8b0 	bl	8003f28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002dc8:	bf00      	nop
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002dd0:	4803      	ldr	r0, [pc, #12]	; (8002de0 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8002dd2:	f002 f8d7 	bl	8004f84 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8002dd6:	4803      	ldr	r0, [pc, #12]	; (8002de4 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8002dd8:	f002 f8d4 	bl	8004f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002ddc:	bf00      	nop
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	200002e0 	.word	0x200002e0
 8002de4:	20000490 	.word	0x20000490

08002de8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002dec:	4802      	ldr	r0, [pc, #8]	; (8002df8 <USART3_IRQHandler+0x10>)
 8002dee:	f003 f8b9 	bl	8005f64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	200004d8 	.word	0x200004d8

08002dfc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002e00:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002e04:	f001 f890 	bl	8003f28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002e08:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002e0c:	f001 f88c 	bl	8003f28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e10:	bf00      	nop
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  return 1;
 8002e18:	2301      	movs	r3, #1
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <_kill>:

int _kill(int pid, int sig)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e2e:	f004 fe53 	bl	8007ad8 <__errno>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2216      	movs	r2, #22
 8002e36:	601a      	str	r2, [r3, #0]
  return -1;
 8002e38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <_exit>:

void _exit (int status)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f7ff ffe7 	bl	8002e24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e56:	e7fe      	b.n	8002e56 <_exit+0x12>

08002e58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	e00a      	b.n	8002e80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e6a:	f3af 8000 	nop.w
 8002e6e:	4601      	mov	r1, r0
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	60ba      	str	r2, [r7, #8]
 8002e76:	b2ca      	uxtb	r2, r1
 8002e78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	dbf0      	blt.n	8002e6a <_read+0x12>
  }

  return len;
 8002e88:	687b      	ldr	r3, [r7, #4]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b086      	sub	sp, #24
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	60f8      	str	r0, [r7, #12]
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	e009      	b.n	8002eb8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	60ba      	str	r2, [r7, #8]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	dbf1      	blt.n	8002ea4 <_write+0x12>
  }
  return len;
 8002ec0:	687b      	ldr	r3, [r7, #4]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <_close>:

int _close(int file)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ed2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
 8002eea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ef2:	605a      	str	r2, [r3, #4]
  return 0;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <_isatty>:

int _isatty(int file)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f0a:	2301      	movs	r3, #1
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
	...

08002f34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f3c:	4a14      	ldr	r2, [pc, #80]	; (8002f90 <_sbrk+0x5c>)
 8002f3e:	4b15      	ldr	r3, [pc, #84]	; (8002f94 <_sbrk+0x60>)
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f48:	4b13      	ldr	r3, [pc, #76]	; (8002f98 <_sbrk+0x64>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d102      	bne.n	8002f56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f50:	4b11      	ldr	r3, [pc, #68]	; (8002f98 <_sbrk+0x64>)
 8002f52:	4a12      	ldr	r2, [pc, #72]	; (8002f9c <_sbrk+0x68>)
 8002f54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f56:	4b10      	ldr	r3, [pc, #64]	; (8002f98 <_sbrk+0x64>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d207      	bcs.n	8002f74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f64:	f004 fdb8 	bl	8007ad8 <__errno>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	220c      	movs	r2, #12
 8002f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f72:	e009      	b.n	8002f88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f74:	4b08      	ldr	r3, [pc, #32]	; (8002f98 <_sbrk+0x64>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f7a:	4b07      	ldr	r3, [pc, #28]	; (8002f98 <_sbrk+0x64>)
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4413      	add	r3, r2
 8002f82:	4a05      	ldr	r2, [pc, #20]	; (8002f98 <_sbrk+0x64>)
 8002f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f86:	68fb      	ldr	r3, [r7, #12]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	20020000 	.word	0x20020000
 8002f94:	00000400 	.word	0x00000400
 8002f98:	20000910 	.word	0x20000910
 8002f9c:	20000928 	.word	0x20000928

08002fa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <SystemInit+0x20>)
 8002fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002faa:	4a05      	ldr	r2, [pc, #20]	; (8002fc0 <SystemInit+0x20>)
 8002fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fb4:	bf00      	nop
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	e000ed00 	.word	0xe000ed00

08002fc4 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8002fc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ffc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fc8:	480d      	ldr	r0, [pc, #52]	; (8003000 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002fca:	490e      	ldr	r1, [pc, #56]	; (8003004 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002fcc:	4a0e      	ldr	r2, [pc, #56]	; (8003008 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fd0:	e002      	b.n	8002fd8 <LoopCopyDataInit>

08002fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fd6:	3304      	adds	r3, #4

08002fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fdc:	d3f9      	bcc.n	8002fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fde:	4a0b      	ldr	r2, [pc, #44]	; (800300c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fe0:	4c0b      	ldr	r4, [pc, #44]	; (8003010 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fe4:	e001      	b.n	8002fea <LoopFillZerobss>

08002fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fe8:	3204      	adds	r2, #4

08002fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fec:	d3fb      	bcc.n	8002fe6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002fee:	f7ff ffd7 	bl	8002fa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ff2:	f004 fd77 	bl	8007ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ff6:	f7fe fe4b 	bl	8001c90 <main>
  bx  lr    
 8002ffa:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8002ffc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003004:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8003008:	0800d23c 	.word	0x0800d23c
  ldr r2, =_sbss
 800300c:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8003010:	20000928 	.word	0x20000928

08003014 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003014:	e7fe      	b.n	8003014 <ADC_IRQHandler>
	...

08003018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800301c:	4b0e      	ldr	r3, [pc, #56]	; (8003058 <HAL_Init+0x40>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a0d      	ldr	r2, [pc, #52]	; (8003058 <HAL_Init+0x40>)
 8003022:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003026:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003028:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <HAL_Init+0x40>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a0a      	ldr	r2, [pc, #40]	; (8003058 <HAL_Init+0x40>)
 800302e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003032:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003034:	4b08      	ldr	r3, [pc, #32]	; (8003058 <HAL_Init+0x40>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a07      	ldr	r2, [pc, #28]	; (8003058 <HAL_Init+0x40>)
 800303a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800303e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003040:	2003      	movs	r0, #3
 8003042:	f000 f941 	bl	80032c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003046:	200f      	movs	r0, #15
 8003048:	f000 f808 	bl	800305c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800304c:	f7ff fbe0 	bl	8002810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40023c00 	.word	0x40023c00

0800305c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003064:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <HAL_InitTick+0x54>)
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	4b12      	ldr	r3, [pc, #72]	; (80030b4 <HAL_InitTick+0x58>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	4619      	mov	r1, r3
 800306e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003072:	fbb3 f3f1 	udiv	r3, r3, r1
 8003076:	fbb2 f3f3 	udiv	r3, r2, r3
 800307a:	4618      	mov	r0, r3
 800307c:	f000 f95d 	bl	800333a <HAL_SYSTICK_Config>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e00e      	b.n	80030a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b0f      	cmp	r3, #15
 800308e:	d80a      	bhi.n	80030a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003090:	2200      	movs	r2, #0
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	f04f 30ff 	mov.w	r0, #4294967295
 8003098:	f000 f921 	bl	80032de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800309c:	4a06      	ldr	r2, [pc, #24]	; (80030b8 <HAL_InitTick+0x5c>)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e000      	b.n	80030a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	200000e4 	.word	0x200000e4
 80030b4:	200000ec 	.word	0x200000ec
 80030b8:	200000e8 	.word	0x200000e8

080030bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030c0:	4b06      	ldr	r3, [pc, #24]	; (80030dc <HAL_IncTick+0x20>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	461a      	mov	r2, r3
 80030c6:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <HAL_IncTick+0x24>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4413      	add	r3, r2
 80030cc:	4a04      	ldr	r2, [pc, #16]	; (80030e0 <HAL_IncTick+0x24>)
 80030ce:	6013      	str	r3, [r2, #0]
}
 80030d0:	bf00      	nop
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	200000ec 	.word	0x200000ec
 80030e0:	20000914 	.word	0x20000914

080030e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  return uwTick;
 80030e8:	4b03      	ldr	r3, [pc, #12]	; (80030f8 <HAL_GetTick+0x14>)
 80030ea:	681b      	ldr	r3, [r3, #0]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	20000914 	.word	0x20000914

080030fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800310c:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <__NVIC_SetPriorityGrouping+0x44>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003118:	4013      	ands	r3, r2
 800311a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003124:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800312c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800312e:	4a04      	ldr	r2, [pc, #16]	; (8003140 <__NVIC_SetPriorityGrouping+0x44>)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	60d3      	str	r3, [r2, #12]
}
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	e000ed00 	.word	0xe000ed00

08003144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003148:	4b04      	ldr	r3, [pc, #16]	; (800315c <__NVIC_GetPriorityGrouping+0x18>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	0a1b      	lsrs	r3, r3, #8
 800314e:	f003 0307 	and.w	r3, r3, #7
}
 8003152:	4618      	mov	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	e000ed00 	.word	0xe000ed00

08003160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800316a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316e:	2b00      	cmp	r3, #0
 8003170:	db0b      	blt.n	800318a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	f003 021f 	and.w	r2, r3, #31
 8003178:	4907      	ldr	r1, [pc, #28]	; (8003198 <__NVIC_EnableIRQ+0x38>)
 800317a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	2001      	movs	r0, #1
 8003182:	fa00 f202 	lsl.w	r2, r0, r2
 8003186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	e000e100 	.word	0xe000e100

0800319c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	6039      	str	r1, [r7, #0]
 80031a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	db0a      	blt.n	80031c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	490c      	ldr	r1, [pc, #48]	; (80031e8 <__NVIC_SetPriority+0x4c>)
 80031b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ba:	0112      	lsls	r2, r2, #4
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	440b      	add	r3, r1
 80031c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031c4:	e00a      	b.n	80031dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	4908      	ldr	r1, [pc, #32]	; (80031ec <__NVIC_SetPriority+0x50>)
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	3b04      	subs	r3, #4
 80031d4:	0112      	lsls	r2, r2, #4
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	440b      	add	r3, r1
 80031da:	761a      	strb	r2, [r3, #24]
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	e000e100 	.word	0xe000e100
 80031ec:	e000ed00 	.word	0xe000ed00

080031f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b089      	sub	sp, #36	; 0x24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f1c3 0307 	rsb	r3, r3, #7
 800320a:	2b04      	cmp	r3, #4
 800320c:	bf28      	it	cs
 800320e:	2304      	movcs	r3, #4
 8003210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	3304      	adds	r3, #4
 8003216:	2b06      	cmp	r3, #6
 8003218:	d902      	bls.n	8003220 <NVIC_EncodePriority+0x30>
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	3b03      	subs	r3, #3
 800321e:	e000      	b.n	8003222 <NVIC_EncodePriority+0x32>
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003224:	f04f 32ff 	mov.w	r2, #4294967295
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43da      	mvns	r2, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	401a      	ands	r2, r3
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003238:	f04f 31ff 	mov.w	r1, #4294967295
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	fa01 f303 	lsl.w	r3, r1, r3
 8003242:	43d9      	mvns	r1, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003248:	4313      	orrs	r3, r2
         );
}
 800324a:	4618      	mov	r0, r3
 800324c:	3724      	adds	r7, #36	; 0x24
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
	...

08003258 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800325c:	f3bf 8f4f 	dsb	sy
}
 8003260:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003262:	4b06      	ldr	r3, [pc, #24]	; (800327c <__NVIC_SystemReset+0x24>)
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800326a:	4904      	ldr	r1, [pc, #16]	; (800327c <__NVIC_SystemReset+0x24>)
 800326c:	4b04      	ldr	r3, [pc, #16]	; (8003280 <__NVIC_SystemReset+0x28>)
 800326e:	4313      	orrs	r3, r2
 8003270:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003272:	f3bf 8f4f 	dsb	sy
}
 8003276:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003278:	bf00      	nop
 800327a:	e7fd      	b.n	8003278 <__NVIC_SystemReset+0x20>
 800327c:	e000ed00 	.word	0xe000ed00
 8003280:	05fa0004 	.word	0x05fa0004

08003284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3b01      	subs	r3, #1
 8003290:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003294:	d301      	bcc.n	800329a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003296:	2301      	movs	r3, #1
 8003298:	e00f      	b.n	80032ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800329a:	4a0a      	ldr	r2, [pc, #40]	; (80032c4 <SysTick_Config+0x40>)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3b01      	subs	r3, #1
 80032a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032a2:	210f      	movs	r1, #15
 80032a4:	f04f 30ff 	mov.w	r0, #4294967295
 80032a8:	f7ff ff78 	bl	800319c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032ac:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <SysTick_Config+0x40>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032b2:	4b04      	ldr	r3, [pc, #16]	; (80032c4 <SysTick_Config+0x40>)
 80032b4:	2207      	movs	r2, #7
 80032b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	e000e010 	.word	0xe000e010

080032c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff ff13 	bl	80030fc <__NVIC_SetPriorityGrouping>
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032de:	b580      	push	{r7, lr}
 80032e0:	b086      	sub	sp, #24
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	4603      	mov	r3, r0
 80032e6:	60b9      	str	r1, [r7, #8]
 80032e8:	607a      	str	r2, [r7, #4]
 80032ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032f0:	f7ff ff28 	bl	8003144 <__NVIC_GetPriorityGrouping>
 80032f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	68b9      	ldr	r1, [r7, #8]
 80032fa:	6978      	ldr	r0, [r7, #20]
 80032fc:	f7ff ff78 	bl	80031f0 <NVIC_EncodePriority>
 8003300:	4602      	mov	r2, r0
 8003302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003306:	4611      	mov	r1, r2
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff ff47 	bl	800319c <__NVIC_SetPriority>
}
 800330e:	bf00      	nop
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b082      	sub	sp, #8
 800331a:	af00      	add	r7, sp, #0
 800331c:	4603      	mov	r3, r0
 800331e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff ff1b 	bl	8003160 <__NVIC_EnableIRQ>
}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003336:	f7ff ff8f 	bl	8003258 <__NVIC_SystemReset>

0800333a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff ff9e 	bl	8003284 <SysTick_Config>
 8003348:	4603      	mov	r3, r0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003360:	f7ff fec0 	bl	80030e4 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e099      	b.n	80034a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0201 	bic.w	r2, r2, #1
 800338e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003390:	e00f      	b.n	80033b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003392:	f7ff fea7 	bl	80030e4 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b05      	cmp	r3, #5
 800339e:	d908      	bls.n	80033b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2220      	movs	r2, #32
 80033a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2203      	movs	r2, #3
 80033aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e078      	b.n	80034a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1e8      	bne.n	8003392 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	4b38      	ldr	r3, [pc, #224]	; (80034ac <HAL_DMA_Init+0x158>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4313      	orrs	r3, r2
 8003402:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	2b04      	cmp	r3, #4
 800340a:	d107      	bne.n	800341c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003414:	4313      	orrs	r3, r2
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	4313      	orrs	r3, r2
 800341a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f023 0307 	bic.w	r3, r3, #7
 8003432:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	4313      	orrs	r3, r2
 800343c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	2b04      	cmp	r3, #4
 8003444:	d117      	bne.n	8003476 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	4313      	orrs	r3, r2
 800344e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00e      	beq.n	8003476 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 fb01 	bl	8003a60 <DMA_CheckFifoParam>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d008      	beq.n	8003476 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2240      	movs	r2, #64	; 0x40
 8003468:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003472:	2301      	movs	r3, #1
 8003474:	e016      	b.n	80034a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 fab8 	bl	80039f4 <DMA_CalcBaseAndBitshift>
 8003484:	4603      	mov	r3, r0
 8003486:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348c:	223f      	movs	r2, #63	; 0x3f
 800348e:	409a      	lsls	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	f010803f 	.word	0xf010803f

080034b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
 80034bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034be:	2300      	movs	r3, #0
 80034c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d101      	bne.n	80034d6 <HAL_DMA_Start_IT+0x26>
 80034d2:	2302      	movs	r3, #2
 80034d4:	e040      	b.n	8003558 <HAL_DMA_Start_IT+0xa8>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d12f      	bne.n	800354a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2202      	movs	r2, #2
 80034ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	68b9      	ldr	r1, [r7, #8]
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 fa4a 	bl	8003998 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003508:	223f      	movs	r2, #63	; 0x3f
 800350a:	409a      	lsls	r2, r3
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0216 	orr.w	r2, r2, #22
 800351e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003524:	2b00      	cmp	r3, #0
 8003526:	d007      	beq.n	8003538 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0208 	orr.w	r2, r2, #8
 8003536:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0201 	orr.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	e005      	b.n	8003556 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003552:	2302      	movs	r3, #2
 8003554:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003556:	7dfb      	ldrb	r3, [r7, #23]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3718      	adds	r7, #24
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800356e:	f7ff fdb9 	bl	80030e4 <HAL_GetTick>
 8003572:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d008      	beq.n	8003592 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2280      	movs	r2, #128	; 0x80
 8003584:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e052      	b.n	8003638 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0216 	bic.w	r2, r2, #22
 80035a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695a      	ldr	r2, [r3, #20]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d103      	bne.n	80035c2 <HAL_DMA_Abort+0x62>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d007      	beq.n	80035d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0208 	bic.w	r2, r2, #8
 80035d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0201 	bic.w	r2, r2, #1
 80035e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035e2:	e013      	b.n	800360c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035e4:	f7ff fd7e 	bl	80030e4 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b05      	cmp	r3, #5
 80035f0:	d90c      	bls.n	800360c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2220      	movs	r2, #32
 80035f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2203      	movs	r2, #3
 80035fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e015      	b.n	8003638 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1e4      	bne.n	80035e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361e:	223f      	movs	r2, #63	; 0x3f
 8003620:	409a      	lsls	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d004      	beq.n	800365e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2280      	movs	r2, #128	; 0x80
 8003658:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e00c      	b.n	8003678 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2205      	movs	r2, #5
 8003662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0201 	bic.w	r2, r2, #1
 8003674:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003690:	4b8e      	ldr	r3, [pc, #568]	; (80038cc <HAL_DMA_IRQHandler+0x248>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a8e      	ldr	r2, [pc, #568]	; (80038d0 <HAL_DMA_IRQHandler+0x24c>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	0a9b      	lsrs	r3, r3, #10
 800369c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ae:	2208      	movs	r2, #8
 80036b0:	409a      	lsls	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4013      	ands	r3, r2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d01a      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d013      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0204 	bic.w	r2, r2, #4
 80036d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036dc:	2208      	movs	r2, #8
 80036de:	409a      	lsls	r2, r3
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e8:	f043 0201 	orr.w	r2, r3, #1
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f4:	2201      	movs	r2, #1
 80036f6:	409a      	lsls	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d012      	beq.n	8003726 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00b      	beq.n	8003726 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003712:	2201      	movs	r2, #1
 8003714:	409a      	lsls	r2, r3
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371e:	f043 0202 	orr.w	r2, r3, #2
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372a:	2204      	movs	r2, #4
 800372c:	409a      	lsls	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4013      	ands	r3, r2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d012      	beq.n	800375c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00b      	beq.n	800375c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003748:	2204      	movs	r2, #4
 800374a:	409a      	lsls	r2, r3
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003754:	f043 0204 	orr.w	r2, r3, #4
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003760:	2210      	movs	r2, #16
 8003762:	409a      	lsls	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4013      	ands	r3, r2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d043      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b00      	cmp	r3, #0
 8003778:	d03c      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377e:	2210      	movs	r2, #16
 8003780:	409a      	lsls	r2, r3
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d018      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d108      	bne.n	80037b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d024      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	4798      	blx	r3
 80037b2:	e01f      	b.n	80037f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d01b      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	4798      	blx	r3
 80037c4:	e016      	b.n	80037f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d107      	bne.n	80037e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0208 	bic.w	r2, r2, #8
 80037e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f8:	2220      	movs	r2, #32
 80037fa:	409a      	lsls	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4013      	ands	r3, r2
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 808f 	beq.w	8003924 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0310 	and.w	r3, r3, #16
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 8087 	beq.w	8003924 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381a:	2220      	movs	r2, #32
 800381c:	409a      	lsls	r2, r3
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b05      	cmp	r3, #5
 800382c:	d136      	bne.n	800389c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0216 	bic.w	r2, r2, #22
 800383c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695a      	ldr	r2, [r3, #20]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800384c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	2b00      	cmp	r3, #0
 8003854:	d103      	bne.n	800385e <HAL_DMA_IRQHandler+0x1da>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800385a:	2b00      	cmp	r3, #0
 800385c:	d007      	beq.n	800386e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0208 	bic.w	r2, r2, #8
 800386c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003872:	223f      	movs	r2, #63	; 0x3f
 8003874:	409a      	lsls	r2, r3
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388e:	2b00      	cmp	r3, #0
 8003890:	d07e      	beq.n	8003990 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	4798      	blx	r3
        }
        return;
 800389a:	e079      	b.n	8003990 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d01d      	beq.n	80038e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10d      	bne.n	80038d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d031      	beq.n	8003924 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	4798      	blx	r3
 80038c8:	e02c      	b.n	8003924 <HAL_DMA_IRQHandler+0x2a0>
 80038ca:	bf00      	nop
 80038cc:	200000e4 	.word	0x200000e4
 80038d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d023      	beq.n	8003924 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	4798      	blx	r3
 80038e4:	e01e      	b.n	8003924 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10f      	bne.n	8003914 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0210 	bic.w	r2, r2, #16
 8003902:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003928:	2b00      	cmp	r3, #0
 800392a:	d032      	beq.n	8003992 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b00      	cmp	r3, #0
 8003936:	d022      	beq.n	800397e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2205      	movs	r2, #5
 800393c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0201 	bic.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	3301      	adds	r3, #1
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	429a      	cmp	r2, r3
 800395a:	d307      	bcc.n	800396c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f2      	bne.n	8003950 <HAL_DMA_IRQHandler+0x2cc>
 800396a:	e000      	b.n	800396e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800396c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003982:	2b00      	cmp	r3, #0
 8003984:	d005      	beq.n	8003992 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	4798      	blx	r3
 800398e:	e000      	b.n	8003992 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003990:	bf00      	nop
    }
  }
}
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	2b40      	cmp	r3, #64	; 0x40
 80039c4:	d108      	bne.n	80039d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039d6:	e007      	b.n	80039e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	60da      	str	r2, [r3, #12]
}
 80039e8:	bf00      	nop
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	3b10      	subs	r3, #16
 8003a04:	4a14      	ldr	r2, [pc, #80]	; (8003a58 <DMA_CalcBaseAndBitshift+0x64>)
 8003a06:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0a:	091b      	lsrs	r3, r3, #4
 8003a0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a0e:	4a13      	ldr	r2, [pc, #76]	; (8003a5c <DMA_CalcBaseAndBitshift+0x68>)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4413      	add	r3, r2
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	d909      	bls.n	8003a36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a2a:	f023 0303 	bic.w	r3, r3, #3
 8003a2e:	1d1a      	adds	r2, r3, #4
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	659a      	str	r2, [r3, #88]	; 0x58
 8003a34:	e007      	b.n	8003a46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a3e:	f023 0303 	bic.w	r3, r3, #3
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	aaaaaaab 	.word	0xaaaaaaab
 8003a5c:	0800cd68 	.word	0x0800cd68

08003a60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d11f      	bne.n	8003aba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d856      	bhi.n	8003b2e <DMA_CheckFifoParam+0xce>
 8003a80:	a201      	add	r2, pc, #4	; (adr r2, 8003a88 <DMA_CheckFifoParam+0x28>)
 8003a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a86:	bf00      	nop
 8003a88:	08003a99 	.word	0x08003a99
 8003a8c:	08003aab 	.word	0x08003aab
 8003a90:	08003a99 	.word	0x08003a99
 8003a94:	08003b2f 	.word	0x08003b2f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d046      	beq.n	8003b32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aa8:	e043      	b.n	8003b32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ab2:	d140      	bne.n	8003b36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ab8:	e03d      	b.n	8003b36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac2:	d121      	bne.n	8003b08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b03      	cmp	r3, #3
 8003ac8:	d837      	bhi.n	8003b3a <DMA_CheckFifoParam+0xda>
 8003aca:	a201      	add	r2, pc, #4	; (adr r2, 8003ad0 <DMA_CheckFifoParam+0x70>)
 8003acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad0:	08003ae1 	.word	0x08003ae1
 8003ad4:	08003ae7 	.word	0x08003ae7
 8003ad8:	08003ae1 	.word	0x08003ae1
 8003adc:	08003af9 	.word	0x08003af9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ae4:	e030      	b.n	8003b48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d025      	beq.n	8003b3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af6:	e022      	b.n	8003b3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b00:	d11f      	bne.n	8003b42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b06:	e01c      	b.n	8003b42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d903      	bls.n	8003b16 <DMA_CheckFifoParam+0xb6>
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b03      	cmp	r3, #3
 8003b12:	d003      	beq.n	8003b1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b14:	e018      	b.n	8003b48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	73fb      	strb	r3, [r7, #15]
      break;
 8003b1a:	e015      	b.n	8003b48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00e      	beq.n	8003b46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b2c:	e00b      	b.n	8003b46 <DMA_CheckFifoParam+0xe6>
      break;
 8003b2e:	bf00      	nop
 8003b30:	e00a      	b.n	8003b48 <DMA_CheckFifoParam+0xe8>
      break;
 8003b32:	bf00      	nop
 8003b34:	e008      	b.n	8003b48 <DMA_CheckFifoParam+0xe8>
      break;
 8003b36:	bf00      	nop
 8003b38:	e006      	b.n	8003b48 <DMA_CheckFifoParam+0xe8>
      break;
 8003b3a:	bf00      	nop
 8003b3c:	e004      	b.n	8003b48 <DMA_CheckFifoParam+0xe8>
      break;
 8003b3e:	bf00      	nop
 8003b40:	e002      	b.n	8003b48 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b42:	bf00      	nop
 8003b44:	e000      	b.n	8003b48 <DMA_CheckFifoParam+0xe8>
      break;
 8003b46:	bf00      	nop
    }
  } 
  
  return status; 
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop

08003b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b089      	sub	sp, #36	; 0x24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61fb      	str	r3, [r7, #28]
 8003b72:	e16b      	b.n	8003e4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b74:	2201      	movs	r2, #1
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4013      	ands	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	f040 815a 	bne.w	8003e46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d005      	beq.n	8003baa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d130      	bne.n	8003c0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003be0:	2201      	movs	r2, #1
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	43db      	mvns	r3, r3
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4013      	ands	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	091b      	lsrs	r3, r3, #4
 8003bf6:	f003 0201 	and.w	r2, r3, #1
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	2b03      	cmp	r3, #3
 8003c16:	d017      	beq.n	8003c48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	2203      	movs	r2, #3
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f003 0303 	and.w	r3, r3, #3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d123      	bne.n	8003c9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	08da      	lsrs	r2, r3, #3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3208      	adds	r2, #8
 8003c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	220f      	movs	r2, #15
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	43db      	mvns	r3, r3
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4013      	ands	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	691a      	ldr	r2, [r3, #16]
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	08da      	lsrs	r2, r3, #3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	3208      	adds	r2, #8
 8003c96:	69b9      	ldr	r1, [r7, #24]
 8003c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	2203      	movs	r2, #3
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	43db      	mvns	r3, r3
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f003 0203 	and.w	r2, r3, #3
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 80b4 	beq.w	8003e46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	4b60      	ldr	r3, [pc, #384]	; (8003e64 <HAL_GPIO_Init+0x30c>)
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce6:	4a5f      	ldr	r2, [pc, #380]	; (8003e64 <HAL_GPIO_Init+0x30c>)
 8003ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cec:	6453      	str	r3, [r2, #68]	; 0x44
 8003cee:	4b5d      	ldr	r3, [pc, #372]	; (8003e64 <HAL_GPIO_Init+0x30c>)
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cfa:	4a5b      	ldr	r2, [pc, #364]	; (8003e68 <HAL_GPIO_Init+0x310>)
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	089b      	lsrs	r3, r3, #2
 8003d00:	3302      	adds	r3, #2
 8003d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	220f      	movs	r2, #15
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	43db      	mvns	r3, r3
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a52      	ldr	r2, [pc, #328]	; (8003e6c <HAL_GPIO_Init+0x314>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d02b      	beq.n	8003d7e <HAL_GPIO_Init+0x226>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a51      	ldr	r2, [pc, #324]	; (8003e70 <HAL_GPIO_Init+0x318>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d025      	beq.n	8003d7a <HAL_GPIO_Init+0x222>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a50      	ldr	r2, [pc, #320]	; (8003e74 <HAL_GPIO_Init+0x31c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d01f      	beq.n	8003d76 <HAL_GPIO_Init+0x21e>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a4f      	ldr	r2, [pc, #316]	; (8003e78 <HAL_GPIO_Init+0x320>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d019      	beq.n	8003d72 <HAL_GPIO_Init+0x21a>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a4e      	ldr	r2, [pc, #312]	; (8003e7c <HAL_GPIO_Init+0x324>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d013      	beq.n	8003d6e <HAL_GPIO_Init+0x216>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a4d      	ldr	r2, [pc, #308]	; (8003e80 <HAL_GPIO_Init+0x328>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d00d      	beq.n	8003d6a <HAL_GPIO_Init+0x212>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a4c      	ldr	r2, [pc, #304]	; (8003e84 <HAL_GPIO_Init+0x32c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d007      	beq.n	8003d66 <HAL_GPIO_Init+0x20e>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a4b      	ldr	r2, [pc, #300]	; (8003e88 <HAL_GPIO_Init+0x330>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d101      	bne.n	8003d62 <HAL_GPIO_Init+0x20a>
 8003d5e:	2307      	movs	r3, #7
 8003d60:	e00e      	b.n	8003d80 <HAL_GPIO_Init+0x228>
 8003d62:	2308      	movs	r3, #8
 8003d64:	e00c      	b.n	8003d80 <HAL_GPIO_Init+0x228>
 8003d66:	2306      	movs	r3, #6
 8003d68:	e00a      	b.n	8003d80 <HAL_GPIO_Init+0x228>
 8003d6a:	2305      	movs	r3, #5
 8003d6c:	e008      	b.n	8003d80 <HAL_GPIO_Init+0x228>
 8003d6e:	2304      	movs	r3, #4
 8003d70:	e006      	b.n	8003d80 <HAL_GPIO_Init+0x228>
 8003d72:	2303      	movs	r3, #3
 8003d74:	e004      	b.n	8003d80 <HAL_GPIO_Init+0x228>
 8003d76:	2302      	movs	r3, #2
 8003d78:	e002      	b.n	8003d80 <HAL_GPIO_Init+0x228>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <HAL_GPIO_Init+0x228>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	69fa      	ldr	r2, [r7, #28]
 8003d82:	f002 0203 	and.w	r2, r2, #3
 8003d86:	0092      	lsls	r2, r2, #2
 8003d88:	4093      	lsls	r3, r2
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d90:	4935      	ldr	r1, [pc, #212]	; (8003e68 <HAL_GPIO_Init+0x310>)
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	089b      	lsrs	r3, r3, #2
 8003d96:	3302      	adds	r3, #2
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d9e:	4b3b      	ldr	r3, [pc, #236]	; (8003e8c <HAL_GPIO_Init+0x334>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	43db      	mvns	r3, r3
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	4013      	ands	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dc2:	4a32      	ldr	r2, [pc, #200]	; (8003e8c <HAL_GPIO_Init+0x334>)
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dc8:	4b30      	ldr	r3, [pc, #192]	; (8003e8c <HAL_GPIO_Init+0x334>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dec:	4a27      	ldr	r2, [pc, #156]	; (8003e8c <HAL_GPIO_Init+0x334>)
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003df2:	4b26      	ldr	r3, [pc, #152]	; (8003e8c <HAL_GPIO_Init+0x334>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e16:	4a1d      	ldr	r2, [pc, #116]	; (8003e8c <HAL_GPIO_Init+0x334>)
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e1c:	4b1b      	ldr	r3, [pc, #108]	; (8003e8c <HAL_GPIO_Init+0x334>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	43db      	mvns	r3, r3
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e40:	4a12      	ldr	r2, [pc, #72]	; (8003e8c <HAL_GPIO_Init+0x334>)
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	61fb      	str	r3, [r7, #28]
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	2b0f      	cmp	r3, #15
 8003e50:	f67f ae90 	bls.w	8003b74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop
 8003e58:	3724      	adds	r7, #36	; 0x24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	40023800 	.word	0x40023800
 8003e68:	40013800 	.word	0x40013800
 8003e6c:	40020000 	.word	0x40020000
 8003e70:	40020400 	.word	0x40020400
 8003e74:	40020800 	.word	0x40020800
 8003e78:	40020c00 	.word	0x40020c00
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	40021400 	.word	0x40021400
 8003e84:	40021800 	.word	0x40021800
 8003e88:	40021c00 	.word	0x40021c00
 8003e8c:	40013c00 	.word	0x40013c00

08003e90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	887b      	ldrh	r3, [r7, #2]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	73fb      	strb	r3, [r7, #15]
 8003eac:	e001      	b.n	8003eb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	807b      	strh	r3, [r7, #2]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ed0:	787b      	ldrb	r3, [r7, #1]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ed6:	887a      	ldrh	r2, [r7, #2]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003edc:	e003      	b.n	8003ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ede:	887b      	ldrh	r3, [r7, #2]
 8003ee0:	041a      	lsls	r2, r3, #16
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	619a      	str	r2, [r3, #24]
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b085      	sub	sp, #20
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	460b      	mov	r3, r1
 8003efc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f04:	887a      	ldrh	r2, [r7, #2]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	041a      	lsls	r2, r3, #16
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	43d9      	mvns	r1, r3
 8003f10:	887b      	ldrh	r3, [r7, #2]
 8003f12:	400b      	ands	r3, r1
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	619a      	str	r2, [r3, #24]
}
 8003f1a:	bf00      	nop
 8003f1c:	3714      	adds	r7, #20
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
	...

08003f28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f32:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f34:	695a      	ldr	r2, [r3, #20]
 8003f36:	88fb      	ldrh	r3, [r7, #6]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d006      	beq.n	8003f4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f3e:	4a05      	ldr	r2, [pc, #20]	; (8003f54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f40:	88fb      	ldrh	r3, [r7, #6]
 8003f42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f44:	88fb      	ldrh	r3, [r7, #6]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fd fe2c 	bl	8001ba4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f4c:	bf00      	nop
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40013c00 	.word	0x40013c00

08003f58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e267      	b.n	800443a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d075      	beq.n	8004062 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f76:	4b88      	ldr	r3, [pc, #544]	; (8004198 <HAL_RCC_OscConfig+0x240>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 030c 	and.w	r3, r3, #12
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d00c      	beq.n	8003f9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f82:	4b85      	ldr	r3, [pc, #532]	; (8004198 <HAL_RCC_OscConfig+0x240>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f8a:	2b08      	cmp	r3, #8
 8003f8c:	d112      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f8e:	4b82      	ldr	r3, [pc, #520]	; (8004198 <HAL_RCC_OscConfig+0x240>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f9a:	d10b      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f9c:	4b7e      	ldr	r3, [pc, #504]	; (8004198 <HAL_RCC_OscConfig+0x240>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d05b      	beq.n	8004060 <HAL_RCC_OscConfig+0x108>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d157      	bne.n	8004060 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e242      	b.n	800443a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fbc:	d106      	bne.n	8003fcc <HAL_RCC_OscConfig+0x74>
 8003fbe:	4b76      	ldr	r3, [pc, #472]	; (8004198 <HAL_RCC_OscConfig+0x240>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a75      	ldr	r2, [pc, #468]	; (8004198 <HAL_RCC_OscConfig+0x240>)
 8003fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	e01d      	b.n	8004008 <HAL_RCC_OscConfig+0xb0>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fd4:	d10c      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x98>
 8003fd6:	4b70      	ldr	r3, [pc, #448]	; (8004198 <HAL_RCC_OscConfig+0x240>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a6f      	ldr	r2, [pc, #444]	; (8004198 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	4b6d      	ldr	r3, [pc, #436]	; (8004198 <HAL_RCC_OscConfig+0x240>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a6c      	ldr	r2, [pc, #432]	; (8004198 <HAL_RCC_OscConfig+0x240>)
 8003fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	e00b      	b.n	8004008 <HAL_RCC_OscConfig+0xb0>
 8003ff0:	4b69      	ldr	r3, [pc, #420]	; (8004198 <HAL_RCC_OscConfig+0x240>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a68      	ldr	r2, [pc, #416]	; (8004198 <HAL_RCC_OscConfig+0x240>)
 8003ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	4b66      	ldr	r3, [pc, #408]	; (8004198 <HAL_RCC_OscConfig+0x240>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a65      	ldr	r2, [pc, #404]	; (8004198 <HAL_RCC_OscConfig+0x240>)
 8004002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004006:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d013      	beq.n	8004038 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004010:	f7ff f868 	bl	80030e4 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004018:	f7ff f864 	bl	80030e4 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b64      	cmp	r3, #100	; 0x64
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e207      	b.n	800443a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402a:	4b5b      	ldr	r3, [pc, #364]	; (8004198 <HAL_RCC_OscConfig+0x240>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0f0      	beq.n	8004018 <HAL_RCC_OscConfig+0xc0>
 8004036:	e014      	b.n	8004062 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004038:	f7ff f854 	bl	80030e4 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004040:	f7ff f850 	bl	80030e4 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b64      	cmp	r3, #100	; 0x64
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e1f3      	b.n	800443a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004052:	4b51      	ldr	r3, [pc, #324]	; (8004198 <HAL_RCC_OscConfig+0x240>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1f0      	bne.n	8004040 <HAL_RCC_OscConfig+0xe8>
 800405e:	e000      	b.n	8004062 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d063      	beq.n	8004136 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800406e:	4b4a      	ldr	r3, [pc, #296]	; (8004198 <HAL_RCC_OscConfig+0x240>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 030c 	and.w	r3, r3, #12
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00b      	beq.n	8004092 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800407a:	4b47      	ldr	r3, [pc, #284]	; (8004198 <HAL_RCC_OscConfig+0x240>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004082:	2b08      	cmp	r3, #8
 8004084:	d11c      	bne.n	80040c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004086:	4b44      	ldr	r3, [pc, #272]	; (8004198 <HAL_RCC_OscConfig+0x240>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d116      	bne.n	80040c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004092:	4b41      	ldr	r3, [pc, #260]	; (8004198 <HAL_RCC_OscConfig+0x240>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d005      	beq.n	80040aa <HAL_RCC_OscConfig+0x152>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d001      	beq.n	80040aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e1c7      	b.n	800443a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040aa:	4b3b      	ldr	r3, [pc, #236]	; (8004198 <HAL_RCC_OscConfig+0x240>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	4937      	ldr	r1, [pc, #220]	; (8004198 <HAL_RCC_OscConfig+0x240>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040be:	e03a      	b.n	8004136 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d020      	beq.n	800410a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040c8:	4b34      	ldr	r3, [pc, #208]	; (800419c <HAL_RCC_OscConfig+0x244>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ce:	f7ff f809 	bl	80030e4 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040d6:	f7ff f805 	bl	80030e4 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e1a8      	b.n	800443a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e8:	4b2b      	ldr	r3, [pc, #172]	; (8004198 <HAL_RCC_OscConfig+0x240>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0f0      	beq.n	80040d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f4:	4b28      	ldr	r3, [pc, #160]	; (8004198 <HAL_RCC_OscConfig+0x240>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	4925      	ldr	r1, [pc, #148]	; (8004198 <HAL_RCC_OscConfig+0x240>)
 8004104:	4313      	orrs	r3, r2
 8004106:	600b      	str	r3, [r1, #0]
 8004108:	e015      	b.n	8004136 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800410a:	4b24      	ldr	r3, [pc, #144]	; (800419c <HAL_RCC_OscConfig+0x244>)
 800410c:	2200      	movs	r2, #0
 800410e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004110:	f7fe ffe8 	bl	80030e4 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004118:	f7fe ffe4 	bl	80030e4 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e187      	b.n	800443a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800412a:	4b1b      	ldr	r3, [pc, #108]	; (8004198 <HAL_RCC_OscConfig+0x240>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f0      	bne.n	8004118 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b00      	cmp	r3, #0
 8004140:	d036      	beq.n	80041b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d016      	beq.n	8004178 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800414a:	4b15      	ldr	r3, [pc, #84]	; (80041a0 <HAL_RCC_OscConfig+0x248>)
 800414c:	2201      	movs	r2, #1
 800414e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004150:	f7fe ffc8 	bl	80030e4 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004158:	f7fe ffc4 	bl	80030e4 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e167      	b.n	800443a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800416a:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <HAL_RCC_OscConfig+0x240>)
 800416c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0f0      	beq.n	8004158 <HAL_RCC_OscConfig+0x200>
 8004176:	e01b      	b.n	80041b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004178:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <HAL_RCC_OscConfig+0x248>)
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800417e:	f7fe ffb1 	bl	80030e4 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004184:	e00e      	b.n	80041a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004186:	f7fe ffad 	bl	80030e4 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d907      	bls.n	80041a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e150      	b.n	800443a <HAL_RCC_OscConfig+0x4e2>
 8004198:	40023800 	.word	0x40023800
 800419c:	42470000 	.word	0x42470000
 80041a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a4:	4b88      	ldr	r3, [pc, #544]	; (80043c8 <HAL_RCC_OscConfig+0x470>)
 80041a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1ea      	bne.n	8004186 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 8097 	beq.w	80042ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041be:	2300      	movs	r3, #0
 80041c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041c2:	4b81      	ldr	r3, [pc, #516]	; (80043c8 <HAL_RCC_OscConfig+0x470>)
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10f      	bne.n	80041ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ce:	2300      	movs	r3, #0
 80041d0:	60bb      	str	r3, [r7, #8]
 80041d2:	4b7d      	ldr	r3, [pc, #500]	; (80043c8 <HAL_RCC_OscConfig+0x470>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	4a7c      	ldr	r2, [pc, #496]	; (80043c8 <HAL_RCC_OscConfig+0x470>)
 80041d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041dc:	6413      	str	r3, [r2, #64]	; 0x40
 80041de:	4b7a      	ldr	r3, [pc, #488]	; (80043c8 <HAL_RCC_OscConfig+0x470>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e6:	60bb      	str	r3, [r7, #8]
 80041e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ea:	2301      	movs	r3, #1
 80041ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ee:	4b77      	ldr	r3, [pc, #476]	; (80043cc <HAL_RCC_OscConfig+0x474>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d118      	bne.n	800422c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041fa:	4b74      	ldr	r3, [pc, #464]	; (80043cc <HAL_RCC_OscConfig+0x474>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a73      	ldr	r2, [pc, #460]	; (80043cc <HAL_RCC_OscConfig+0x474>)
 8004200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004206:	f7fe ff6d 	bl	80030e4 <HAL_GetTick>
 800420a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420c:	e008      	b.n	8004220 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800420e:	f7fe ff69 	bl	80030e4 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e10c      	b.n	800443a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004220:	4b6a      	ldr	r3, [pc, #424]	; (80043cc <HAL_RCC_OscConfig+0x474>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0f0      	beq.n	800420e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d106      	bne.n	8004242 <HAL_RCC_OscConfig+0x2ea>
 8004234:	4b64      	ldr	r3, [pc, #400]	; (80043c8 <HAL_RCC_OscConfig+0x470>)
 8004236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004238:	4a63      	ldr	r2, [pc, #396]	; (80043c8 <HAL_RCC_OscConfig+0x470>)
 800423a:	f043 0301 	orr.w	r3, r3, #1
 800423e:	6713      	str	r3, [r2, #112]	; 0x70
 8004240:	e01c      	b.n	800427c <HAL_RCC_OscConfig+0x324>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2b05      	cmp	r3, #5
 8004248:	d10c      	bne.n	8004264 <HAL_RCC_OscConfig+0x30c>
 800424a:	4b5f      	ldr	r3, [pc, #380]	; (80043c8 <HAL_RCC_OscConfig+0x470>)
 800424c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424e:	4a5e      	ldr	r2, [pc, #376]	; (80043c8 <HAL_RCC_OscConfig+0x470>)
 8004250:	f043 0304 	orr.w	r3, r3, #4
 8004254:	6713      	str	r3, [r2, #112]	; 0x70
 8004256:	4b5c      	ldr	r3, [pc, #368]	; (80043c8 <HAL_RCC_OscConfig+0x470>)
 8004258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425a:	4a5b      	ldr	r2, [pc, #364]	; (80043c8 <HAL_RCC_OscConfig+0x470>)
 800425c:	f043 0301 	orr.w	r3, r3, #1
 8004260:	6713      	str	r3, [r2, #112]	; 0x70
 8004262:	e00b      	b.n	800427c <HAL_RCC_OscConfig+0x324>
 8004264:	4b58      	ldr	r3, [pc, #352]	; (80043c8 <HAL_RCC_OscConfig+0x470>)
 8004266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004268:	4a57      	ldr	r2, [pc, #348]	; (80043c8 <HAL_RCC_OscConfig+0x470>)
 800426a:	f023 0301 	bic.w	r3, r3, #1
 800426e:	6713      	str	r3, [r2, #112]	; 0x70
 8004270:	4b55      	ldr	r3, [pc, #340]	; (80043c8 <HAL_RCC_OscConfig+0x470>)
 8004272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004274:	4a54      	ldr	r2, [pc, #336]	; (80043c8 <HAL_RCC_OscConfig+0x470>)
 8004276:	f023 0304 	bic.w	r3, r3, #4
 800427a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d015      	beq.n	80042b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004284:	f7fe ff2e 	bl	80030e4 <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800428a:	e00a      	b.n	80042a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800428c:	f7fe ff2a 	bl	80030e4 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	f241 3288 	movw	r2, #5000	; 0x1388
 800429a:	4293      	cmp	r3, r2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e0cb      	b.n	800443a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a2:	4b49      	ldr	r3, [pc, #292]	; (80043c8 <HAL_RCC_OscConfig+0x470>)
 80042a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0ee      	beq.n	800428c <HAL_RCC_OscConfig+0x334>
 80042ae:	e014      	b.n	80042da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b0:	f7fe ff18 	bl	80030e4 <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042b6:	e00a      	b.n	80042ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b8:	f7fe ff14 	bl	80030e4 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e0b5      	b.n	800443a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ce:	4b3e      	ldr	r3, [pc, #248]	; (80043c8 <HAL_RCC_OscConfig+0x470>)
 80042d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1ee      	bne.n	80042b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042da:	7dfb      	ldrb	r3, [r7, #23]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d105      	bne.n	80042ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e0:	4b39      	ldr	r3, [pc, #228]	; (80043c8 <HAL_RCC_OscConfig+0x470>)
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	4a38      	ldr	r2, [pc, #224]	; (80043c8 <HAL_RCC_OscConfig+0x470>)
 80042e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 80a1 	beq.w	8004438 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042f6:	4b34      	ldr	r3, [pc, #208]	; (80043c8 <HAL_RCC_OscConfig+0x470>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 030c 	and.w	r3, r3, #12
 80042fe:	2b08      	cmp	r3, #8
 8004300:	d05c      	beq.n	80043bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	2b02      	cmp	r3, #2
 8004308:	d141      	bne.n	800438e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800430a:	4b31      	ldr	r3, [pc, #196]	; (80043d0 <HAL_RCC_OscConfig+0x478>)
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004310:	f7fe fee8 	bl	80030e4 <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004318:	f7fe fee4 	bl	80030e4 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e087      	b.n	800443a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800432a:	4b27      	ldr	r3, [pc, #156]	; (80043c8 <HAL_RCC_OscConfig+0x470>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1f0      	bne.n	8004318 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69da      	ldr	r2, [r3, #28]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	019b      	lsls	r3, r3, #6
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434c:	085b      	lsrs	r3, r3, #1
 800434e:	3b01      	subs	r3, #1
 8004350:	041b      	lsls	r3, r3, #16
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004358:	061b      	lsls	r3, r3, #24
 800435a:	491b      	ldr	r1, [pc, #108]	; (80043c8 <HAL_RCC_OscConfig+0x470>)
 800435c:	4313      	orrs	r3, r2
 800435e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004360:	4b1b      	ldr	r3, [pc, #108]	; (80043d0 <HAL_RCC_OscConfig+0x478>)
 8004362:	2201      	movs	r2, #1
 8004364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004366:	f7fe febd 	bl	80030e4 <HAL_GetTick>
 800436a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800436c:	e008      	b.n	8004380 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800436e:	f7fe feb9 	bl	80030e4 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e05c      	b.n	800443a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004380:	4b11      	ldr	r3, [pc, #68]	; (80043c8 <HAL_RCC_OscConfig+0x470>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d0f0      	beq.n	800436e <HAL_RCC_OscConfig+0x416>
 800438c:	e054      	b.n	8004438 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800438e:	4b10      	ldr	r3, [pc, #64]	; (80043d0 <HAL_RCC_OscConfig+0x478>)
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004394:	f7fe fea6 	bl	80030e4 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800439c:	f7fe fea2 	bl	80030e4 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e045      	b.n	800443a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ae:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <HAL_RCC_OscConfig+0x470>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1f0      	bne.n	800439c <HAL_RCC_OscConfig+0x444>
 80043ba:	e03d      	b.n	8004438 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d107      	bne.n	80043d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e038      	b.n	800443a <HAL_RCC_OscConfig+0x4e2>
 80043c8:	40023800 	.word	0x40023800
 80043cc:	40007000 	.word	0x40007000
 80043d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043d4:	4b1b      	ldr	r3, [pc, #108]	; (8004444 <HAL_RCC_OscConfig+0x4ec>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d028      	beq.n	8004434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d121      	bne.n	8004434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d11a      	bne.n	8004434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004404:	4013      	ands	r3, r2
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800440a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800440c:	4293      	cmp	r3, r2
 800440e:	d111      	bne.n	8004434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441a:	085b      	lsrs	r3, r3, #1
 800441c:	3b01      	subs	r3, #1
 800441e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004420:	429a      	cmp	r2, r3
 8004422:	d107      	bne.n	8004434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004430:	429a      	cmp	r2, r3
 8004432:	d001      	beq.n	8004438 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e000      	b.n	800443a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40023800 	.word	0x40023800

08004448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e0cc      	b.n	80045f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800445c:	4b68      	ldr	r3, [pc, #416]	; (8004600 <HAL_RCC_ClockConfig+0x1b8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d90c      	bls.n	8004484 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446a:	4b65      	ldr	r3, [pc, #404]	; (8004600 <HAL_RCC_ClockConfig+0x1b8>)
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004472:	4b63      	ldr	r3, [pc, #396]	; (8004600 <HAL_RCC_ClockConfig+0x1b8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	429a      	cmp	r2, r3
 800447e:	d001      	beq.n	8004484 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e0b8      	b.n	80045f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d020      	beq.n	80044d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b00      	cmp	r3, #0
 800449a:	d005      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800449c:	4b59      	ldr	r3, [pc, #356]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	4a58      	ldr	r2, [pc, #352]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044b4:	4b53      	ldr	r3, [pc, #332]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	4a52      	ldr	r2, [pc, #328]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 80044ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044c0:	4b50      	ldr	r3, [pc, #320]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	494d      	ldr	r1, [pc, #308]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d044      	beq.n	8004568 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d107      	bne.n	80044f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044e6:	4b47      	ldr	r3, [pc, #284]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d119      	bne.n	8004526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e07f      	b.n	80045f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d003      	beq.n	8004506 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004502:	2b03      	cmp	r3, #3
 8004504:	d107      	bne.n	8004516 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004506:	4b3f      	ldr	r3, [pc, #252]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d109      	bne.n	8004526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e06f      	b.n	80045f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004516:	4b3b      	ldr	r3, [pc, #236]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e067      	b.n	80045f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004526:	4b37      	ldr	r3, [pc, #220]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f023 0203 	bic.w	r2, r3, #3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	4934      	ldr	r1, [pc, #208]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 8004534:	4313      	orrs	r3, r2
 8004536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004538:	f7fe fdd4 	bl	80030e4 <HAL_GetTick>
 800453c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453e:	e00a      	b.n	8004556 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004540:	f7fe fdd0 	bl	80030e4 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	f241 3288 	movw	r2, #5000	; 0x1388
 800454e:	4293      	cmp	r3, r2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e04f      	b.n	80045f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004556:	4b2b      	ldr	r3, [pc, #172]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 020c 	and.w	r2, r3, #12
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	429a      	cmp	r2, r3
 8004566:	d1eb      	bne.n	8004540 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004568:	4b25      	ldr	r3, [pc, #148]	; (8004600 <HAL_RCC_ClockConfig+0x1b8>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d20c      	bcs.n	8004590 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004576:	4b22      	ldr	r3, [pc, #136]	; (8004600 <HAL_RCC_ClockConfig+0x1b8>)
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800457e:	4b20      	ldr	r3, [pc, #128]	; (8004600 <HAL_RCC_ClockConfig+0x1b8>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	429a      	cmp	r2, r3
 800458a:	d001      	beq.n	8004590 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e032      	b.n	80045f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b00      	cmp	r3, #0
 800459a:	d008      	beq.n	80045ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800459c:	4b19      	ldr	r3, [pc, #100]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	4916      	ldr	r1, [pc, #88]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0308 	and.w	r3, r3, #8
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d009      	beq.n	80045ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ba:	4b12      	ldr	r3, [pc, #72]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	490e      	ldr	r1, [pc, #56]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045ce:	f000 f821 	bl	8004614 <HAL_RCC_GetSysClockFreq>
 80045d2:	4602      	mov	r2, r0
 80045d4:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	091b      	lsrs	r3, r3, #4
 80045da:	f003 030f 	and.w	r3, r3, #15
 80045de:	490a      	ldr	r1, [pc, #40]	; (8004608 <HAL_RCC_ClockConfig+0x1c0>)
 80045e0:	5ccb      	ldrb	r3, [r1, r3]
 80045e2:	fa22 f303 	lsr.w	r3, r2, r3
 80045e6:	4a09      	ldr	r2, [pc, #36]	; (800460c <HAL_RCC_ClockConfig+0x1c4>)
 80045e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045ea:	4b09      	ldr	r3, [pc, #36]	; (8004610 <HAL_RCC_ClockConfig+0x1c8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fe fd34 	bl	800305c <HAL_InitTick>

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	40023c00 	.word	0x40023c00
 8004604:	40023800 	.word	0x40023800
 8004608:	0800cd50 	.word	0x0800cd50
 800460c:	200000e4 	.word	0x200000e4
 8004610:	200000e8 	.word	0x200000e8

08004614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004618:	b094      	sub	sp, #80	; 0x50
 800461a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	647b      	str	r3, [r7, #68]	; 0x44
 8004620:	2300      	movs	r3, #0
 8004622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004624:	2300      	movs	r3, #0
 8004626:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800462c:	4b79      	ldr	r3, [pc, #484]	; (8004814 <HAL_RCC_GetSysClockFreq+0x200>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f003 030c 	and.w	r3, r3, #12
 8004634:	2b08      	cmp	r3, #8
 8004636:	d00d      	beq.n	8004654 <HAL_RCC_GetSysClockFreq+0x40>
 8004638:	2b08      	cmp	r3, #8
 800463a:	f200 80e1 	bhi.w	8004800 <HAL_RCC_GetSysClockFreq+0x1ec>
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <HAL_RCC_GetSysClockFreq+0x34>
 8004642:	2b04      	cmp	r3, #4
 8004644:	d003      	beq.n	800464e <HAL_RCC_GetSysClockFreq+0x3a>
 8004646:	e0db      	b.n	8004800 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004648:	4b73      	ldr	r3, [pc, #460]	; (8004818 <HAL_RCC_GetSysClockFreq+0x204>)
 800464a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800464c:	e0db      	b.n	8004806 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800464e:	4b73      	ldr	r3, [pc, #460]	; (800481c <HAL_RCC_GetSysClockFreq+0x208>)
 8004650:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004652:	e0d8      	b.n	8004806 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004654:	4b6f      	ldr	r3, [pc, #444]	; (8004814 <HAL_RCC_GetSysClockFreq+0x200>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800465c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800465e:	4b6d      	ldr	r3, [pc, #436]	; (8004814 <HAL_RCC_GetSysClockFreq+0x200>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d063      	beq.n	8004732 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800466a:	4b6a      	ldr	r3, [pc, #424]	; (8004814 <HAL_RCC_GetSysClockFreq+0x200>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	099b      	lsrs	r3, r3, #6
 8004670:	2200      	movs	r2, #0
 8004672:	63bb      	str	r3, [r7, #56]	; 0x38
 8004674:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800467c:	633b      	str	r3, [r7, #48]	; 0x30
 800467e:	2300      	movs	r3, #0
 8004680:	637b      	str	r3, [r7, #52]	; 0x34
 8004682:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004686:	4622      	mov	r2, r4
 8004688:	462b      	mov	r3, r5
 800468a:	f04f 0000 	mov.w	r0, #0
 800468e:	f04f 0100 	mov.w	r1, #0
 8004692:	0159      	lsls	r1, r3, #5
 8004694:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004698:	0150      	lsls	r0, r2, #5
 800469a:	4602      	mov	r2, r0
 800469c:	460b      	mov	r3, r1
 800469e:	4621      	mov	r1, r4
 80046a0:	1a51      	subs	r1, r2, r1
 80046a2:	6139      	str	r1, [r7, #16]
 80046a4:	4629      	mov	r1, r5
 80046a6:	eb63 0301 	sbc.w	r3, r3, r1
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	f04f 0200 	mov.w	r2, #0
 80046b0:	f04f 0300 	mov.w	r3, #0
 80046b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046b8:	4659      	mov	r1, fp
 80046ba:	018b      	lsls	r3, r1, #6
 80046bc:	4651      	mov	r1, sl
 80046be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046c2:	4651      	mov	r1, sl
 80046c4:	018a      	lsls	r2, r1, #6
 80046c6:	4651      	mov	r1, sl
 80046c8:	ebb2 0801 	subs.w	r8, r2, r1
 80046cc:	4659      	mov	r1, fp
 80046ce:	eb63 0901 	sbc.w	r9, r3, r1
 80046d2:	f04f 0200 	mov.w	r2, #0
 80046d6:	f04f 0300 	mov.w	r3, #0
 80046da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046e6:	4690      	mov	r8, r2
 80046e8:	4699      	mov	r9, r3
 80046ea:	4623      	mov	r3, r4
 80046ec:	eb18 0303 	adds.w	r3, r8, r3
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	462b      	mov	r3, r5
 80046f4:	eb49 0303 	adc.w	r3, r9, r3
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	f04f 0200 	mov.w	r2, #0
 80046fe:	f04f 0300 	mov.w	r3, #0
 8004702:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004706:	4629      	mov	r1, r5
 8004708:	024b      	lsls	r3, r1, #9
 800470a:	4621      	mov	r1, r4
 800470c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004710:	4621      	mov	r1, r4
 8004712:	024a      	lsls	r2, r1, #9
 8004714:	4610      	mov	r0, r2
 8004716:	4619      	mov	r1, r3
 8004718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800471a:	2200      	movs	r2, #0
 800471c:	62bb      	str	r3, [r7, #40]	; 0x28
 800471e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004720:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004724:	f7fc fbbe 	bl	8000ea4 <__aeabi_uldivmod>
 8004728:	4602      	mov	r2, r0
 800472a:	460b      	mov	r3, r1
 800472c:	4613      	mov	r3, r2
 800472e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004730:	e058      	b.n	80047e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004732:	4b38      	ldr	r3, [pc, #224]	; (8004814 <HAL_RCC_GetSysClockFreq+0x200>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	099b      	lsrs	r3, r3, #6
 8004738:	2200      	movs	r2, #0
 800473a:	4618      	mov	r0, r3
 800473c:	4611      	mov	r1, r2
 800473e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004742:	623b      	str	r3, [r7, #32]
 8004744:	2300      	movs	r3, #0
 8004746:	627b      	str	r3, [r7, #36]	; 0x24
 8004748:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800474c:	4642      	mov	r2, r8
 800474e:	464b      	mov	r3, r9
 8004750:	f04f 0000 	mov.w	r0, #0
 8004754:	f04f 0100 	mov.w	r1, #0
 8004758:	0159      	lsls	r1, r3, #5
 800475a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800475e:	0150      	lsls	r0, r2, #5
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4641      	mov	r1, r8
 8004766:	ebb2 0a01 	subs.w	sl, r2, r1
 800476a:	4649      	mov	r1, r9
 800476c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004770:	f04f 0200 	mov.w	r2, #0
 8004774:	f04f 0300 	mov.w	r3, #0
 8004778:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800477c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004780:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004784:	ebb2 040a 	subs.w	r4, r2, sl
 8004788:	eb63 050b 	sbc.w	r5, r3, fp
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	00eb      	lsls	r3, r5, #3
 8004796:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800479a:	00e2      	lsls	r2, r4, #3
 800479c:	4614      	mov	r4, r2
 800479e:	461d      	mov	r5, r3
 80047a0:	4643      	mov	r3, r8
 80047a2:	18e3      	adds	r3, r4, r3
 80047a4:	603b      	str	r3, [r7, #0]
 80047a6:	464b      	mov	r3, r9
 80047a8:	eb45 0303 	adc.w	r3, r5, r3
 80047ac:	607b      	str	r3, [r7, #4]
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	f04f 0300 	mov.w	r3, #0
 80047b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047ba:	4629      	mov	r1, r5
 80047bc:	028b      	lsls	r3, r1, #10
 80047be:	4621      	mov	r1, r4
 80047c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047c4:	4621      	mov	r1, r4
 80047c6:	028a      	lsls	r2, r1, #10
 80047c8:	4610      	mov	r0, r2
 80047ca:	4619      	mov	r1, r3
 80047cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ce:	2200      	movs	r2, #0
 80047d0:	61bb      	str	r3, [r7, #24]
 80047d2:	61fa      	str	r2, [r7, #28]
 80047d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047d8:	f7fc fb64 	bl	8000ea4 <__aeabi_uldivmod>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4613      	mov	r3, r2
 80047e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047e4:	4b0b      	ldr	r3, [pc, #44]	; (8004814 <HAL_RCC_GetSysClockFreq+0x200>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	0c1b      	lsrs	r3, r3, #16
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	3301      	adds	r3, #1
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80047f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047fe:	e002      	b.n	8004806 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004800:	4b05      	ldr	r3, [pc, #20]	; (8004818 <HAL_RCC_GetSysClockFreq+0x204>)
 8004802:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004804:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004808:	4618      	mov	r0, r3
 800480a:	3750      	adds	r7, #80	; 0x50
 800480c:	46bd      	mov	sp, r7
 800480e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004812:	bf00      	nop
 8004814:	40023800 	.word	0x40023800
 8004818:	00f42400 	.word	0x00f42400
 800481c:	007a1200 	.word	0x007a1200

08004820 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004824:	4b03      	ldr	r3, [pc, #12]	; (8004834 <HAL_RCC_GetHCLKFreq+0x14>)
 8004826:	681b      	ldr	r3, [r3, #0]
}
 8004828:	4618      	mov	r0, r3
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	200000e4 	.word	0x200000e4

08004838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800483c:	f7ff fff0 	bl	8004820 <HAL_RCC_GetHCLKFreq>
 8004840:	4602      	mov	r2, r0
 8004842:	4b05      	ldr	r3, [pc, #20]	; (8004858 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	0a9b      	lsrs	r3, r3, #10
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	4903      	ldr	r1, [pc, #12]	; (800485c <HAL_RCC_GetPCLK1Freq+0x24>)
 800484e:	5ccb      	ldrb	r3, [r1, r3]
 8004850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004854:	4618      	mov	r0, r3
 8004856:	bd80      	pop	{r7, pc}
 8004858:	40023800 	.word	0x40023800
 800485c:	0800cd60 	.word	0x0800cd60

08004860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004864:	f7ff ffdc 	bl	8004820 <HAL_RCC_GetHCLKFreq>
 8004868:	4602      	mov	r2, r0
 800486a:	4b05      	ldr	r3, [pc, #20]	; (8004880 <HAL_RCC_GetPCLK2Freq+0x20>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	0b5b      	lsrs	r3, r3, #13
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	4903      	ldr	r1, [pc, #12]	; (8004884 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004876:	5ccb      	ldrb	r3, [r1, r3]
 8004878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800487c:	4618      	mov	r0, r3
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40023800 	.word	0x40023800
 8004884:	0800cd60 	.word	0x0800cd60

08004888 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e041      	b.n	800491e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7fe f8e2 	bl	8002a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3304      	adds	r3, #4
 80048c4:	4619      	mov	r1, r3
 80048c6:	4610      	mov	r0, r2
 80048c8:	f000 fe16 	bl	80054f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
	...

08004928 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b01      	cmp	r3, #1
 800493a:	d001      	beq.n	8004940 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e046      	b.n	80049ce <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a23      	ldr	r2, [pc, #140]	; (80049dc <HAL_TIM_Base_Start+0xb4>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d022      	beq.n	8004998 <HAL_TIM_Base_Start+0x70>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800495a:	d01d      	beq.n	8004998 <HAL_TIM_Base_Start+0x70>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a1f      	ldr	r2, [pc, #124]	; (80049e0 <HAL_TIM_Base_Start+0xb8>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d018      	beq.n	8004998 <HAL_TIM_Base_Start+0x70>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a1e      	ldr	r2, [pc, #120]	; (80049e4 <HAL_TIM_Base_Start+0xbc>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d013      	beq.n	8004998 <HAL_TIM_Base_Start+0x70>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a1c      	ldr	r2, [pc, #112]	; (80049e8 <HAL_TIM_Base_Start+0xc0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00e      	beq.n	8004998 <HAL_TIM_Base_Start+0x70>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a1b      	ldr	r2, [pc, #108]	; (80049ec <HAL_TIM_Base_Start+0xc4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d009      	beq.n	8004998 <HAL_TIM_Base_Start+0x70>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a19      	ldr	r2, [pc, #100]	; (80049f0 <HAL_TIM_Base_Start+0xc8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d004      	beq.n	8004998 <HAL_TIM_Base_Start+0x70>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a18      	ldr	r2, [pc, #96]	; (80049f4 <HAL_TIM_Base_Start+0xcc>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d111      	bne.n	80049bc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2b06      	cmp	r3, #6
 80049a8:	d010      	beq.n	80049cc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f042 0201 	orr.w	r2, r2, #1
 80049b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ba:	e007      	b.n	80049cc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f042 0201 	orr.w	r2, r2, #1
 80049ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40010000 	.word	0x40010000
 80049e0:	40000400 	.word	0x40000400
 80049e4:	40000800 	.word	0x40000800
 80049e8:	40000c00 	.word	0x40000c00
 80049ec:	40010400 	.word	0x40010400
 80049f0:	40014000 	.word	0x40014000
 80049f4:	40001800 	.word	0x40001800

080049f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d001      	beq.n	8004a10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e04e      	b.n	8004aae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 0201 	orr.w	r2, r2, #1
 8004a26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a23      	ldr	r2, [pc, #140]	; (8004abc <HAL_TIM_Base_Start_IT+0xc4>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d022      	beq.n	8004a78 <HAL_TIM_Base_Start_IT+0x80>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a3a:	d01d      	beq.n	8004a78 <HAL_TIM_Base_Start_IT+0x80>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a1f      	ldr	r2, [pc, #124]	; (8004ac0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d018      	beq.n	8004a78 <HAL_TIM_Base_Start_IT+0x80>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a1e      	ldr	r2, [pc, #120]	; (8004ac4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d013      	beq.n	8004a78 <HAL_TIM_Base_Start_IT+0x80>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a1c      	ldr	r2, [pc, #112]	; (8004ac8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d00e      	beq.n	8004a78 <HAL_TIM_Base_Start_IT+0x80>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a1b      	ldr	r2, [pc, #108]	; (8004acc <HAL_TIM_Base_Start_IT+0xd4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d009      	beq.n	8004a78 <HAL_TIM_Base_Start_IT+0x80>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a19      	ldr	r2, [pc, #100]	; (8004ad0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d004      	beq.n	8004a78 <HAL_TIM_Base_Start_IT+0x80>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a18      	ldr	r2, [pc, #96]	; (8004ad4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d111      	bne.n	8004a9c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2b06      	cmp	r3, #6
 8004a88:	d010      	beq.n	8004aac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f042 0201 	orr.w	r2, r2, #1
 8004a98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a9a:	e007      	b.n	8004aac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0201 	orr.w	r2, r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	40010000 	.word	0x40010000
 8004ac0:	40000400 	.word	0x40000400
 8004ac4:	40000800 	.word	0x40000800
 8004ac8:	40000c00 	.word	0x40000c00
 8004acc:	40010400 	.word	0x40010400
 8004ad0:	40014000 	.word	0x40014000
 8004ad4:	40001800 	.word	0x40001800

08004ad8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e041      	b.n	8004b6e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d106      	bne.n	8004b04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f839 	bl	8004b76 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3304      	adds	r3, #4
 8004b14:	4619      	mov	r1, r3
 8004b16:	4610      	mov	r0, r2
 8004b18:	f000 fcee 	bl	80054f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
	...

08004b8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d109      	bne.n	8004bb0 <HAL_TIM_PWM_Start+0x24>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	bf14      	ite	ne
 8004ba8:	2301      	movne	r3, #1
 8004baa:	2300      	moveq	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	e022      	b.n	8004bf6 <HAL_TIM_PWM_Start+0x6a>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d109      	bne.n	8004bca <HAL_TIM_PWM_Start+0x3e>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	bf14      	ite	ne
 8004bc2:	2301      	movne	r3, #1
 8004bc4:	2300      	moveq	r3, #0
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	e015      	b.n	8004bf6 <HAL_TIM_PWM_Start+0x6a>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d109      	bne.n	8004be4 <HAL_TIM_PWM_Start+0x58>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	bf14      	ite	ne
 8004bdc:	2301      	movne	r3, #1
 8004bde:	2300      	moveq	r3, #0
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	e008      	b.n	8004bf6 <HAL_TIM_PWM_Start+0x6a>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	bf14      	ite	ne
 8004bf0:	2301      	movne	r3, #1
 8004bf2:	2300      	moveq	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e07c      	b.n	8004cf8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d104      	bne.n	8004c0e <HAL_TIM_PWM_Start+0x82>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c0c:	e013      	b.n	8004c36 <HAL_TIM_PWM_Start+0xaa>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	d104      	bne.n	8004c1e <HAL_TIM_PWM_Start+0x92>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c1c:	e00b      	b.n	8004c36 <HAL_TIM_PWM_Start+0xaa>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d104      	bne.n	8004c2e <HAL_TIM_PWM_Start+0xa2>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c2c:	e003      	b.n	8004c36 <HAL_TIM_PWM_Start+0xaa>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2202      	movs	r2, #2
 8004c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	6839      	ldr	r1, [r7, #0]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 ff44 	bl	8005acc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a2d      	ldr	r2, [pc, #180]	; (8004d00 <HAL_TIM_PWM_Start+0x174>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d004      	beq.n	8004c58 <HAL_TIM_PWM_Start+0xcc>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a2c      	ldr	r2, [pc, #176]	; (8004d04 <HAL_TIM_PWM_Start+0x178>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d101      	bne.n	8004c5c <HAL_TIM_PWM_Start+0xd0>
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e000      	b.n	8004c5e <HAL_TIM_PWM_Start+0xd2>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d007      	beq.n	8004c72 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a22      	ldr	r2, [pc, #136]	; (8004d00 <HAL_TIM_PWM_Start+0x174>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d022      	beq.n	8004cc2 <HAL_TIM_PWM_Start+0x136>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c84:	d01d      	beq.n	8004cc2 <HAL_TIM_PWM_Start+0x136>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a1f      	ldr	r2, [pc, #124]	; (8004d08 <HAL_TIM_PWM_Start+0x17c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d018      	beq.n	8004cc2 <HAL_TIM_PWM_Start+0x136>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a1d      	ldr	r2, [pc, #116]	; (8004d0c <HAL_TIM_PWM_Start+0x180>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d013      	beq.n	8004cc2 <HAL_TIM_PWM_Start+0x136>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a1c      	ldr	r2, [pc, #112]	; (8004d10 <HAL_TIM_PWM_Start+0x184>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d00e      	beq.n	8004cc2 <HAL_TIM_PWM_Start+0x136>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a16      	ldr	r2, [pc, #88]	; (8004d04 <HAL_TIM_PWM_Start+0x178>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d009      	beq.n	8004cc2 <HAL_TIM_PWM_Start+0x136>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a18      	ldr	r2, [pc, #96]	; (8004d14 <HAL_TIM_PWM_Start+0x188>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d004      	beq.n	8004cc2 <HAL_TIM_PWM_Start+0x136>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a16      	ldr	r2, [pc, #88]	; (8004d18 <HAL_TIM_PWM_Start+0x18c>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d111      	bne.n	8004ce6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f003 0307 	and.w	r3, r3, #7
 8004ccc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2b06      	cmp	r3, #6
 8004cd2:	d010      	beq.n	8004cf6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0201 	orr.w	r2, r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce4:	e007      	b.n	8004cf6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f042 0201 	orr.w	r2, r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40010000 	.word	0x40010000
 8004d04:	40010400 	.word	0x40010400
 8004d08:	40000400 	.word	0x40000400
 8004d0c:	40000800 	.word	0x40000800
 8004d10:	40000c00 	.word	0x40000c00
 8004d14:	40014000 	.word	0x40014000
 8004d18:	40001800 	.word	0x40001800

08004d1c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e097      	b.n	8004e60 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d106      	bne.n	8004d4a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f7fd fd8b 	bl	8002860 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	6812      	ldr	r2, [r2, #0]
 8004d5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d60:	f023 0307 	bic.w	r3, r3, #7
 8004d64:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	3304      	adds	r3, #4
 8004d6e:	4619      	mov	r1, r3
 8004d70:	4610      	mov	r0, r2
 8004d72:	f000 fbc1 	bl	80054f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d9e:	f023 0303 	bic.w	r3, r3, #3
 8004da2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	021b      	lsls	r3, r3, #8
 8004dae:	4313      	orrs	r3, r2
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004dbc:	f023 030c 	bic.w	r3, r3, #12
 8004dc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68da      	ldr	r2, [r3, #12]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	021b      	lsls	r3, r3, #8
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	011a      	lsls	r2, r3, #4
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	031b      	lsls	r3, r3, #12
 8004dec:	4313      	orrs	r3, r2
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004dfa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004e02:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	011b      	lsls	r3, r3, #4
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3718      	adds	r7, #24
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e78:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e80:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e88:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e90:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d110      	bne.n	8004eba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d102      	bne.n	8004ea4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e9e:	7b7b      	ldrb	r3, [r7, #13]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d001      	beq.n	8004ea8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e069      	b.n	8004f7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004eb8:	e031      	b.n	8004f1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	d110      	bne.n	8004ee2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ec0:	7bbb      	ldrb	r3, [r7, #14]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d102      	bne.n	8004ecc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ec6:	7b3b      	ldrb	r3, [r7, #12]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d001      	beq.n	8004ed0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e055      	b.n	8004f7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2202      	movs	r2, #2
 8004edc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ee0:	e01d      	b.n	8004f1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d108      	bne.n	8004efa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ee8:	7bbb      	ldrb	r3, [r7, #14]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d105      	bne.n	8004efa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004eee:	7b7b      	ldrb	r3, [r7, #13]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d102      	bne.n	8004efa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ef4:	7b3b      	ldrb	r3, [r7, #12]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d001      	beq.n	8004efe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e03e      	b.n	8004f7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2202      	movs	r2, #2
 8004f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2202      	movs	r2, #2
 8004f0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2202      	movs	r2, #2
 8004f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2202      	movs	r2, #2
 8004f1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <HAL_TIM_Encoder_Start+0xc4>
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d008      	beq.n	8004f3c <HAL_TIM_Encoder_Start+0xd4>
 8004f2a:	e00f      	b.n	8004f4c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2201      	movs	r2, #1
 8004f32:	2100      	movs	r1, #0
 8004f34:	4618      	mov	r0, r3
 8004f36:	f000 fdc9 	bl	8005acc <TIM_CCxChannelCmd>
      break;
 8004f3a:	e016      	b.n	8004f6a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2201      	movs	r2, #1
 8004f42:	2104      	movs	r1, #4
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 fdc1 	bl	8005acc <TIM_CCxChannelCmd>
      break;
 8004f4a:	e00e      	b.n	8004f6a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2201      	movs	r2, #1
 8004f52:	2100      	movs	r1, #0
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 fdb9 	bl	8005acc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	2104      	movs	r1, #4
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fdb2 	bl	8005acc <TIM_CCxChannelCmd>
      break;
 8004f68:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f042 0201 	orr.w	r2, r2, #1
 8004f78:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d122      	bne.n	8004fe0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d11b      	bne.n	8004fe0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f06f 0202 	mvn.w	r2, #2
 8004fb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	f003 0303 	and.w	r3, r3, #3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fa77 	bl	80054ba <HAL_TIM_IC_CaptureCallback>
 8004fcc:	e005      	b.n	8004fda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 fa69 	bl	80054a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 fa7a 	bl	80054ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f003 0304 	and.w	r3, r3, #4
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	d122      	bne.n	8005034 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b04      	cmp	r3, #4
 8004ffa:	d11b      	bne.n	8005034 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f06f 0204 	mvn.w	r2, #4
 8005004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2202      	movs	r2, #2
 800500a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 fa4d 	bl	80054ba <HAL_TIM_IC_CaptureCallback>
 8005020:	e005      	b.n	800502e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fa3f 	bl	80054a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 fa50 	bl	80054ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	2b08      	cmp	r3, #8
 8005040:	d122      	bne.n	8005088 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f003 0308 	and.w	r3, r3, #8
 800504c:	2b08      	cmp	r3, #8
 800504e:	d11b      	bne.n	8005088 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f06f 0208 	mvn.w	r2, #8
 8005058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2204      	movs	r2, #4
 800505e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	f003 0303 	and.w	r3, r3, #3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fa23 	bl	80054ba <HAL_TIM_IC_CaptureCallback>
 8005074:	e005      	b.n	8005082 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fa15 	bl	80054a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 fa26 	bl	80054ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	f003 0310 	and.w	r3, r3, #16
 8005092:	2b10      	cmp	r3, #16
 8005094:	d122      	bne.n	80050dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f003 0310 	and.w	r3, r3, #16
 80050a0:	2b10      	cmp	r3, #16
 80050a2:	d11b      	bne.n	80050dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f06f 0210 	mvn.w	r2, #16
 80050ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2208      	movs	r2, #8
 80050b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f9f9 	bl	80054ba <HAL_TIM_IC_CaptureCallback>
 80050c8:	e005      	b.n	80050d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f9eb 	bl	80054a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f9fc 	bl	80054ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d10e      	bne.n	8005108 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d107      	bne.n	8005108 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f06f 0201 	mvn.w	r2, #1
 8005100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7fc f9bc 	bl	8001480 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005112:	2b80      	cmp	r3, #128	; 0x80
 8005114:	d10e      	bne.n	8005134 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005120:	2b80      	cmp	r3, #128	; 0x80
 8005122:	d107      	bne.n	8005134 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800512c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 fdca 	bl	8005cc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513e:	2b40      	cmp	r3, #64	; 0x40
 8005140:	d10e      	bne.n	8005160 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514c:	2b40      	cmp	r3, #64	; 0x40
 800514e:	d107      	bne.n	8005160 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f9c1 	bl	80054e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f003 0320 	and.w	r3, r3, #32
 800516a:	2b20      	cmp	r3, #32
 800516c:	d10e      	bne.n	800518c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f003 0320 	and.w	r3, r3, #32
 8005178:	2b20      	cmp	r3, #32
 800517a:	d107      	bne.n	800518c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f06f 0220 	mvn.w	r2, #32
 8005184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fd94 	bl	8005cb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800518c:	bf00      	nop
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051a0:	2300      	movs	r3, #0
 80051a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d101      	bne.n	80051b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051ae:	2302      	movs	r3, #2
 80051b0:	e0ae      	b.n	8005310 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b0c      	cmp	r3, #12
 80051be:	f200 809f 	bhi.w	8005300 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80051c2:	a201      	add	r2, pc, #4	; (adr r2, 80051c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c8:	080051fd 	.word	0x080051fd
 80051cc:	08005301 	.word	0x08005301
 80051d0:	08005301 	.word	0x08005301
 80051d4:	08005301 	.word	0x08005301
 80051d8:	0800523d 	.word	0x0800523d
 80051dc:	08005301 	.word	0x08005301
 80051e0:	08005301 	.word	0x08005301
 80051e4:	08005301 	.word	0x08005301
 80051e8:	0800527f 	.word	0x0800527f
 80051ec:	08005301 	.word	0x08005301
 80051f0:	08005301 	.word	0x08005301
 80051f4:	08005301 	.word	0x08005301
 80051f8:	080052bf 	.word	0x080052bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68b9      	ldr	r1, [r7, #8]
 8005202:	4618      	mov	r0, r3
 8005204:	f000 fa18 	bl	8005638 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699a      	ldr	r2, [r3, #24]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0208 	orr.w	r2, r2, #8
 8005216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	699a      	ldr	r2, [r3, #24]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 0204 	bic.w	r2, r2, #4
 8005226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6999      	ldr	r1, [r3, #24]
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	691a      	ldr	r2, [r3, #16]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	619a      	str	r2, [r3, #24]
      break;
 800523a:	e064      	b.n	8005306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68b9      	ldr	r1, [r7, #8]
 8005242:	4618      	mov	r0, r3
 8005244:	f000 fa68 	bl	8005718 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699a      	ldr	r2, [r3, #24]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699a      	ldr	r2, [r3, #24]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6999      	ldr	r1, [r3, #24]
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	021a      	lsls	r2, r3, #8
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	619a      	str	r2, [r3, #24]
      break;
 800527c:	e043      	b.n	8005306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68b9      	ldr	r1, [r7, #8]
 8005284:	4618      	mov	r0, r3
 8005286:	f000 fabd 	bl	8005804 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	69da      	ldr	r2, [r3, #28]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f042 0208 	orr.w	r2, r2, #8
 8005298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	69da      	ldr	r2, [r3, #28]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 0204 	bic.w	r2, r2, #4
 80052a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	69d9      	ldr	r1, [r3, #28]
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	61da      	str	r2, [r3, #28]
      break;
 80052bc:	e023      	b.n	8005306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68b9      	ldr	r1, [r7, #8]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 fb11 	bl	80058ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69da      	ldr	r2, [r3, #28]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69da      	ldr	r2, [r3, #28]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	69d9      	ldr	r1, [r3, #28]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	021a      	lsls	r2, r3, #8
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	61da      	str	r2, [r3, #28]
      break;
 80052fe:	e002      	b.n	8005306 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	75fb      	strb	r3, [r7, #23]
      break;
 8005304:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800530e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005310:	4618      	mov	r0, r3
 8005312:	3718      	adds	r7, #24
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005322:	2300      	movs	r3, #0
 8005324:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <HAL_TIM_ConfigClockSource+0x1c>
 8005330:	2302      	movs	r3, #2
 8005332:	e0b4      	b.n	800549e <HAL_TIM_ConfigClockSource+0x186>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800535a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800536c:	d03e      	beq.n	80053ec <HAL_TIM_ConfigClockSource+0xd4>
 800536e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005372:	f200 8087 	bhi.w	8005484 <HAL_TIM_ConfigClockSource+0x16c>
 8005376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800537a:	f000 8086 	beq.w	800548a <HAL_TIM_ConfigClockSource+0x172>
 800537e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005382:	d87f      	bhi.n	8005484 <HAL_TIM_ConfigClockSource+0x16c>
 8005384:	2b70      	cmp	r3, #112	; 0x70
 8005386:	d01a      	beq.n	80053be <HAL_TIM_ConfigClockSource+0xa6>
 8005388:	2b70      	cmp	r3, #112	; 0x70
 800538a:	d87b      	bhi.n	8005484 <HAL_TIM_ConfigClockSource+0x16c>
 800538c:	2b60      	cmp	r3, #96	; 0x60
 800538e:	d050      	beq.n	8005432 <HAL_TIM_ConfigClockSource+0x11a>
 8005390:	2b60      	cmp	r3, #96	; 0x60
 8005392:	d877      	bhi.n	8005484 <HAL_TIM_ConfigClockSource+0x16c>
 8005394:	2b50      	cmp	r3, #80	; 0x50
 8005396:	d03c      	beq.n	8005412 <HAL_TIM_ConfigClockSource+0xfa>
 8005398:	2b50      	cmp	r3, #80	; 0x50
 800539a:	d873      	bhi.n	8005484 <HAL_TIM_ConfigClockSource+0x16c>
 800539c:	2b40      	cmp	r3, #64	; 0x40
 800539e:	d058      	beq.n	8005452 <HAL_TIM_ConfigClockSource+0x13a>
 80053a0:	2b40      	cmp	r3, #64	; 0x40
 80053a2:	d86f      	bhi.n	8005484 <HAL_TIM_ConfigClockSource+0x16c>
 80053a4:	2b30      	cmp	r3, #48	; 0x30
 80053a6:	d064      	beq.n	8005472 <HAL_TIM_ConfigClockSource+0x15a>
 80053a8:	2b30      	cmp	r3, #48	; 0x30
 80053aa:	d86b      	bhi.n	8005484 <HAL_TIM_ConfigClockSource+0x16c>
 80053ac:	2b20      	cmp	r3, #32
 80053ae:	d060      	beq.n	8005472 <HAL_TIM_ConfigClockSource+0x15a>
 80053b0:	2b20      	cmp	r3, #32
 80053b2:	d867      	bhi.n	8005484 <HAL_TIM_ConfigClockSource+0x16c>
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d05c      	beq.n	8005472 <HAL_TIM_ConfigClockSource+0x15a>
 80053b8:	2b10      	cmp	r3, #16
 80053ba:	d05a      	beq.n	8005472 <HAL_TIM_ConfigClockSource+0x15a>
 80053bc:	e062      	b.n	8005484 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6818      	ldr	r0, [r3, #0]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	6899      	ldr	r1, [r3, #8]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f000 fb5d 	bl	8005a8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	609a      	str	r2, [r3, #8]
      break;
 80053ea:	e04f      	b.n	800548c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6818      	ldr	r0, [r3, #0]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	6899      	ldr	r1, [r3, #8]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f000 fb46 	bl	8005a8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689a      	ldr	r2, [r3, #8]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800540e:	609a      	str	r2, [r3, #8]
      break;
 8005410:	e03c      	b.n	800548c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6818      	ldr	r0, [r3, #0]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	6859      	ldr	r1, [r3, #4]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	461a      	mov	r2, r3
 8005420:	f000 faba 	bl	8005998 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2150      	movs	r1, #80	; 0x50
 800542a:	4618      	mov	r0, r3
 800542c:	f000 fb13 	bl	8005a56 <TIM_ITRx_SetConfig>
      break;
 8005430:	e02c      	b.n	800548c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6818      	ldr	r0, [r3, #0]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	6859      	ldr	r1, [r3, #4]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	461a      	mov	r2, r3
 8005440:	f000 fad9 	bl	80059f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2160      	movs	r1, #96	; 0x60
 800544a:	4618      	mov	r0, r3
 800544c:	f000 fb03 	bl	8005a56 <TIM_ITRx_SetConfig>
      break;
 8005450:	e01c      	b.n	800548c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6818      	ldr	r0, [r3, #0]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	6859      	ldr	r1, [r3, #4]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	461a      	mov	r2, r3
 8005460:	f000 fa9a 	bl	8005998 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2140      	movs	r1, #64	; 0x40
 800546a:	4618      	mov	r0, r3
 800546c:	f000 faf3 	bl	8005a56 <TIM_ITRx_SetConfig>
      break;
 8005470:	e00c      	b.n	800548c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4619      	mov	r1, r3
 800547c:	4610      	mov	r0, r2
 800547e:	f000 faea 	bl	8005a56 <TIM_ITRx_SetConfig>
      break;
 8005482:	e003      	b.n	800548c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	73fb      	strb	r3, [r7, #15]
      break;
 8005488:	e000      	b.n	800548c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800548a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800549c:	7bfb      	ldrb	r3, [r7, #15]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b083      	sub	sp, #12
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054ae:	bf00      	nop
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
	...

080054f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a40      	ldr	r2, [pc, #256]	; (800560c <TIM_Base_SetConfig+0x114>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d013      	beq.n	8005538 <TIM_Base_SetConfig+0x40>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005516:	d00f      	beq.n	8005538 <TIM_Base_SetConfig+0x40>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a3d      	ldr	r2, [pc, #244]	; (8005610 <TIM_Base_SetConfig+0x118>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d00b      	beq.n	8005538 <TIM_Base_SetConfig+0x40>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a3c      	ldr	r2, [pc, #240]	; (8005614 <TIM_Base_SetConfig+0x11c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d007      	beq.n	8005538 <TIM_Base_SetConfig+0x40>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a3b      	ldr	r2, [pc, #236]	; (8005618 <TIM_Base_SetConfig+0x120>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d003      	beq.n	8005538 <TIM_Base_SetConfig+0x40>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a3a      	ldr	r2, [pc, #232]	; (800561c <TIM_Base_SetConfig+0x124>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d108      	bne.n	800554a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a2f      	ldr	r2, [pc, #188]	; (800560c <TIM_Base_SetConfig+0x114>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d02b      	beq.n	80055aa <TIM_Base_SetConfig+0xb2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005558:	d027      	beq.n	80055aa <TIM_Base_SetConfig+0xb2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a2c      	ldr	r2, [pc, #176]	; (8005610 <TIM_Base_SetConfig+0x118>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d023      	beq.n	80055aa <TIM_Base_SetConfig+0xb2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a2b      	ldr	r2, [pc, #172]	; (8005614 <TIM_Base_SetConfig+0x11c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d01f      	beq.n	80055aa <TIM_Base_SetConfig+0xb2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a2a      	ldr	r2, [pc, #168]	; (8005618 <TIM_Base_SetConfig+0x120>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d01b      	beq.n	80055aa <TIM_Base_SetConfig+0xb2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a29      	ldr	r2, [pc, #164]	; (800561c <TIM_Base_SetConfig+0x124>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d017      	beq.n	80055aa <TIM_Base_SetConfig+0xb2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a28      	ldr	r2, [pc, #160]	; (8005620 <TIM_Base_SetConfig+0x128>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d013      	beq.n	80055aa <TIM_Base_SetConfig+0xb2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a27      	ldr	r2, [pc, #156]	; (8005624 <TIM_Base_SetConfig+0x12c>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d00f      	beq.n	80055aa <TIM_Base_SetConfig+0xb2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a26      	ldr	r2, [pc, #152]	; (8005628 <TIM_Base_SetConfig+0x130>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d00b      	beq.n	80055aa <TIM_Base_SetConfig+0xb2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a25      	ldr	r2, [pc, #148]	; (800562c <TIM_Base_SetConfig+0x134>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d007      	beq.n	80055aa <TIM_Base_SetConfig+0xb2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a24      	ldr	r2, [pc, #144]	; (8005630 <TIM_Base_SetConfig+0x138>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d003      	beq.n	80055aa <TIM_Base_SetConfig+0xb2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a23      	ldr	r2, [pc, #140]	; (8005634 <TIM_Base_SetConfig+0x13c>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d108      	bne.n	80055bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a0a      	ldr	r2, [pc, #40]	; (800560c <TIM_Base_SetConfig+0x114>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d003      	beq.n	80055f0 <TIM_Base_SetConfig+0xf8>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a0c      	ldr	r2, [pc, #48]	; (800561c <TIM_Base_SetConfig+0x124>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d103      	bne.n	80055f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	691a      	ldr	r2, [r3, #16]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	615a      	str	r2, [r3, #20]
}
 80055fe:	bf00      	nop
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	40010000 	.word	0x40010000
 8005610:	40000400 	.word	0x40000400
 8005614:	40000800 	.word	0x40000800
 8005618:	40000c00 	.word	0x40000c00
 800561c:	40010400 	.word	0x40010400
 8005620:	40014000 	.word	0x40014000
 8005624:	40014400 	.word	0x40014400
 8005628:	40014800 	.word	0x40014800
 800562c:	40001800 	.word	0x40001800
 8005630:	40001c00 	.word	0x40001c00
 8005634:	40002000 	.word	0x40002000

08005638 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	f023 0201 	bic.w	r2, r3, #1
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f023 0303 	bic.w	r3, r3, #3
 800566e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	4313      	orrs	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f023 0302 	bic.w	r3, r3, #2
 8005680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	4313      	orrs	r3, r2
 800568a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a20      	ldr	r2, [pc, #128]	; (8005710 <TIM_OC1_SetConfig+0xd8>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d003      	beq.n	800569c <TIM_OC1_SetConfig+0x64>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a1f      	ldr	r2, [pc, #124]	; (8005714 <TIM_OC1_SetConfig+0xdc>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d10c      	bne.n	80056b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f023 0308 	bic.w	r3, r3, #8
 80056a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f023 0304 	bic.w	r3, r3, #4
 80056b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a15      	ldr	r2, [pc, #84]	; (8005710 <TIM_OC1_SetConfig+0xd8>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d003      	beq.n	80056c6 <TIM_OC1_SetConfig+0x8e>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a14      	ldr	r2, [pc, #80]	; (8005714 <TIM_OC1_SetConfig+0xdc>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d111      	bne.n	80056ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	4313      	orrs	r3, r2
 80056de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	621a      	str	r2, [r3, #32]
}
 8005704:	bf00      	nop
 8005706:	371c      	adds	r7, #28
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	40010000 	.word	0x40010000
 8005714:	40010400 	.word	0x40010400

08005718 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005718:	b480      	push	{r7}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	f023 0210 	bic.w	r2, r3, #16
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800574e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	021b      	lsls	r3, r3, #8
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	4313      	orrs	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f023 0320 	bic.w	r3, r3, #32
 8005762:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	011b      	lsls	r3, r3, #4
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	4313      	orrs	r3, r2
 800576e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a22      	ldr	r2, [pc, #136]	; (80057fc <TIM_OC2_SetConfig+0xe4>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d003      	beq.n	8005780 <TIM_OC2_SetConfig+0x68>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a21      	ldr	r2, [pc, #132]	; (8005800 <TIM_OC2_SetConfig+0xe8>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d10d      	bne.n	800579c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	011b      	lsls	r3, r3, #4
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	4313      	orrs	r3, r2
 8005792:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800579a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a17      	ldr	r2, [pc, #92]	; (80057fc <TIM_OC2_SetConfig+0xe4>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d003      	beq.n	80057ac <TIM_OC2_SetConfig+0x94>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a16      	ldr	r2, [pc, #88]	; (8005800 <TIM_OC2_SetConfig+0xe8>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d113      	bne.n	80057d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	695b      	ldr	r3, [r3, #20]
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	621a      	str	r2, [r3, #32]
}
 80057ee:	bf00      	nop
 80057f0:	371c      	adds	r7, #28
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	40010000 	.word	0x40010000
 8005800:	40010400 	.word	0x40010400

08005804 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 0303 	bic.w	r3, r3, #3
 800583a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800584c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	021b      	lsls	r3, r3, #8
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	4313      	orrs	r3, r2
 8005858:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a21      	ldr	r2, [pc, #132]	; (80058e4 <TIM_OC3_SetConfig+0xe0>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d003      	beq.n	800586a <TIM_OC3_SetConfig+0x66>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a20      	ldr	r2, [pc, #128]	; (80058e8 <TIM_OC3_SetConfig+0xe4>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d10d      	bne.n	8005886 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005870:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	021b      	lsls	r3, r3, #8
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	4313      	orrs	r3, r2
 800587c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005884:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a16      	ldr	r2, [pc, #88]	; (80058e4 <TIM_OC3_SetConfig+0xe0>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d003      	beq.n	8005896 <TIM_OC3_SetConfig+0x92>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a15      	ldr	r2, [pc, #84]	; (80058e8 <TIM_OC3_SetConfig+0xe4>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d113      	bne.n	80058be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800589c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	011b      	lsls	r3, r3, #4
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	621a      	str	r2, [r3, #32]
}
 80058d8:	bf00      	nop
 80058da:	371c      	adds	r7, #28
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr
 80058e4:	40010000 	.word	0x40010000
 80058e8:	40010400 	.word	0x40010400

080058ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800591a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	021b      	lsls	r3, r3, #8
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	4313      	orrs	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005936:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	031b      	lsls	r3, r3, #12
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	4313      	orrs	r3, r2
 8005942:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a12      	ldr	r2, [pc, #72]	; (8005990 <TIM_OC4_SetConfig+0xa4>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d003      	beq.n	8005954 <TIM_OC4_SetConfig+0x68>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a11      	ldr	r2, [pc, #68]	; (8005994 <TIM_OC4_SetConfig+0xa8>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d109      	bne.n	8005968 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800595a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	019b      	lsls	r3, r3, #6
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	4313      	orrs	r3, r2
 8005966:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	621a      	str	r2, [r3, #32]
}
 8005982:	bf00      	nop
 8005984:	371c      	adds	r7, #28
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	40010000 	.word	0x40010000
 8005994:	40010400 	.word	0x40010400

08005998 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	f023 0201 	bic.w	r2, r3, #1
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	f023 030a 	bic.w	r3, r3, #10
 80059d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4313      	orrs	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	621a      	str	r2, [r3, #32]
}
 80059ea:	bf00      	nop
 80059ec:	371c      	adds	r7, #28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b087      	sub	sp, #28
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	60f8      	str	r0, [r7, #12]
 80059fe:	60b9      	str	r1, [r7, #8]
 8005a00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	f023 0210 	bic.w	r2, r3, #16
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	031b      	lsls	r3, r3, #12
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	011b      	lsls	r3, r3, #4
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	621a      	str	r2, [r3, #32]
}
 8005a4a:	bf00      	nop
 8005a4c:	371c      	adds	r7, #28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b085      	sub	sp, #20
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	f043 0307 	orr.w	r3, r3, #7
 8005a78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	609a      	str	r2, [r3, #8]
}
 8005a80:	bf00      	nop
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b087      	sub	sp, #28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
 8005a98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	021a      	lsls	r2, r3, #8
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	609a      	str	r2, [r3, #8]
}
 8005ac0:	bf00      	nop
 8005ac2:	371c      	adds	r7, #28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b087      	sub	sp, #28
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f003 031f 	and.w	r3, r3, #31
 8005ade:	2201      	movs	r2, #1
 8005ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6a1a      	ldr	r2, [r3, #32]
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	43db      	mvns	r3, r3
 8005aee:	401a      	ands	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6a1a      	ldr	r2, [r3, #32]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f003 031f 	and.w	r3, r3, #31
 8005afe:	6879      	ldr	r1, [r7, #4]
 8005b00:	fa01 f303 	lsl.w	r3, r1, r3
 8005b04:	431a      	orrs	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	621a      	str	r2, [r3, #32]
}
 8005b0a:	bf00      	nop
 8005b0c:	371c      	adds	r7, #28
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
	...

08005b18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d101      	bne.n	8005b30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	e05a      	b.n	8005be6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a21      	ldr	r2, [pc, #132]	; (8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d022      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b7c:	d01d      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a1d      	ldr	r2, [pc, #116]	; (8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d018      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a1b      	ldr	r2, [pc, #108]	; (8005bfc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d013      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a1a      	ldr	r2, [pc, #104]	; (8005c00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00e      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a18      	ldr	r2, [pc, #96]	; (8005c04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d009      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a17      	ldr	r2, [pc, #92]	; (8005c08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d004      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a15      	ldr	r2, [pc, #84]	; (8005c0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d10c      	bne.n	8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	40010000 	.word	0x40010000
 8005bf8:	40000400 	.word	0x40000400
 8005bfc:	40000800 	.word	0x40000800
 8005c00:	40000c00 	.word	0x40000c00
 8005c04:	40010400 	.word	0x40010400
 8005c08:	40014000 	.word	0x40014000
 8005c0c:	40001800 	.word	0x40001800

08005c10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d101      	bne.n	8005c2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c28:	2302      	movs	r3, #2
 8005c2a:	e03d      	b.n	8005ca8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e03f      	b.n	8005d6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d106      	bne.n	8005d08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7fc ff98 	bl	8002c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2224      	movs	r2, #36	; 0x24
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 ff9b 	bl	8006c5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	691a      	ldr	r2, [r3, #16]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	695a      	ldr	r2, [r3, #20]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68da      	ldr	r2, [r3, #12]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2220      	movs	r2, #32
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2220      	movs	r2, #32
 8005d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b08a      	sub	sp, #40	; 0x28
 8005d7a:	af02      	add	r7, sp, #8
 8005d7c:	60f8      	str	r0, [r7, #12]
 8005d7e:	60b9      	str	r1, [r7, #8]
 8005d80:	603b      	str	r3, [r7, #0]
 8005d82:	4613      	mov	r3, r2
 8005d84:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d86:	2300      	movs	r3, #0
 8005d88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b20      	cmp	r3, #32
 8005d94:	d17c      	bne.n	8005e90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <HAL_UART_Transmit+0x2c>
 8005d9c:	88fb      	ldrh	r3, [r7, #6]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e075      	b.n	8005e92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d101      	bne.n	8005db4 <HAL_UART_Transmit+0x3e>
 8005db0:	2302      	movs	r3, #2
 8005db2:	e06e      	b.n	8005e92 <HAL_UART_Transmit+0x11c>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2221      	movs	r2, #33	; 0x21
 8005dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dca:	f7fd f98b 	bl	80030e4 <HAL_GetTick>
 8005dce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	88fa      	ldrh	r2, [r7, #6]
 8005dd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	88fa      	ldrh	r2, [r7, #6]
 8005dda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de4:	d108      	bne.n	8005df8 <HAL_UART_Transmit+0x82>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d104      	bne.n	8005df8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005dee:	2300      	movs	r3, #0
 8005df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	61bb      	str	r3, [r7, #24]
 8005df6:	e003      	b.n	8005e00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005e08:	e02a      	b.n	8005e60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2200      	movs	r2, #0
 8005e12:	2180      	movs	r1, #128	; 0x80
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 fc53 	bl	80066c0 <UART_WaitOnFlagUntilTimeout>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e036      	b.n	8005e92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10b      	bne.n	8005e42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	3302      	adds	r3, #2
 8005e3e:	61bb      	str	r3, [r7, #24]
 8005e40:	e007      	b.n	8005e52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	781a      	ldrb	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1cf      	bne.n	8005e0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2200      	movs	r2, #0
 8005e72:	2140      	movs	r1, #64	; 0x40
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 fc23 	bl	80066c0 <UART_WaitOnFlagUntilTimeout>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e006      	b.n	8005e92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2220      	movs	r2, #32
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	e000      	b.n	8005e92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005e90:	2302      	movs	r3, #2
  }
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3720      	adds	r7, #32
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b08c      	sub	sp, #48	; 0x30
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	60f8      	str	r0, [r7, #12]
 8005ea2:	60b9      	str	r1, [r7, #8]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b20      	cmp	r3, #32
 8005eb2:	d152      	bne.n	8005f5a <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d002      	beq.n	8005ec0 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005eba:	88fb      	ldrh	r3, [r7, #6]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e04b      	b.n	8005f5c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d101      	bne.n	8005ed2 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8005ece:	2302      	movs	r3, #2
 8005ed0:	e044      	b.n	8005f5c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005ee0:	88fb      	ldrh	r3, [r7, #6]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	68b9      	ldr	r1, [r7, #8]
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f000 fc58 	bl	800679c <UART_Start_Receive_DMA>
 8005eec:	4603      	mov	r3, r0
 8005eee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005ef2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d12c      	bne.n	8005f54 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d125      	bne.n	8005f4e <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f02:	2300      	movs	r3, #0
 8005f04:	613b      	str	r3, [r7, #16]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	613b      	str	r3, [r7, #16]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	613b      	str	r3, [r7, #16]
 8005f16:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	330c      	adds	r3, #12
 8005f1e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	e853 3f00 	ldrex	r3, [r3]
 8005f26:	617b      	str	r3, [r7, #20]
   return(result);
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f043 0310 	orr.w	r3, r3, #16
 8005f2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	330c      	adds	r3, #12
 8005f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f38:	627a      	str	r2, [r7, #36]	; 0x24
 8005f3a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3c:	6a39      	ldr	r1, [r7, #32]
 8005f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f40:	e841 2300 	strex	r3, r2, [r1]
 8005f44:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1e5      	bne.n	8005f18 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8005f4c:	e002      	b.n	8005f54 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005f54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f58:	e000      	b.n	8005f5c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8005f5a:	2302      	movs	r3, #2
  }
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3730      	adds	r7, #48	; 0x30
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b0ba      	sub	sp, #232	; 0xe8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f9a:	f003 030f 	and.w	r3, r3, #15
 8005f9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005fa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10f      	bne.n	8005fca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fae:	f003 0320 	and.w	r3, r3, #32
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d009      	beq.n	8005fca <HAL_UART_IRQHandler+0x66>
 8005fb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fba:	f003 0320 	and.w	r3, r3, #32
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d003      	beq.n	8005fca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 fd8f 	bl	8006ae6 <UART_Receive_IT>
      return;
 8005fc8:	e256      	b.n	8006478 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005fca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f000 80de 	beq.w	8006190 <HAL_UART_IRQHandler+0x22c>
 8005fd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fd8:	f003 0301 	and.w	r3, r3, #1
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d106      	bne.n	8005fee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fe4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 80d1 	beq.w	8006190 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00b      	beq.n	8006012 <HAL_UART_IRQHandler+0xae>
 8005ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006002:	2b00      	cmp	r3, #0
 8006004:	d005      	beq.n	8006012 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600a:	f043 0201 	orr.w	r2, r3, #1
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006016:	f003 0304 	and.w	r3, r3, #4
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00b      	beq.n	8006036 <HAL_UART_IRQHandler+0xd2>
 800601e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	2b00      	cmp	r3, #0
 8006028:	d005      	beq.n	8006036 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602e:	f043 0202 	orr.w	r2, r3, #2
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00b      	beq.n	800605a <HAL_UART_IRQHandler+0xf6>
 8006042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b00      	cmp	r3, #0
 800604c:	d005      	beq.n	800605a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	f043 0204 	orr.w	r2, r3, #4
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800605a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800605e:	f003 0308 	and.w	r3, r3, #8
 8006062:	2b00      	cmp	r3, #0
 8006064:	d011      	beq.n	800608a <HAL_UART_IRQHandler+0x126>
 8006066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800606a:	f003 0320 	and.w	r3, r3, #32
 800606e:	2b00      	cmp	r3, #0
 8006070:	d105      	bne.n	800607e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006072:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	2b00      	cmp	r3, #0
 800607c:	d005      	beq.n	800608a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006082:	f043 0208 	orr.w	r2, r3, #8
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608e:	2b00      	cmp	r3, #0
 8006090:	f000 81ed 	beq.w	800646e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006098:	f003 0320 	and.w	r3, r3, #32
 800609c:	2b00      	cmp	r3, #0
 800609e:	d008      	beq.n	80060b2 <HAL_UART_IRQHandler+0x14e>
 80060a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060a4:	f003 0320 	and.w	r3, r3, #32
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d002      	beq.n	80060b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 fd1a 	bl	8006ae6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060bc:	2b40      	cmp	r3, #64	; 0x40
 80060be:	bf0c      	ite	eq
 80060c0:	2301      	moveq	r3, #1
 80060c2:	2300      	movne	r3, #0
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	f003 0308 	and.w	r3, r3, #8
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d103      	bne.n	80060de <HAL_UART_IRQHandler+0x17a>
 80060d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d04f      	beq.n	800617e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fc22 	bl	8006928 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ee:	2b40      	cmp	r3, #64	; 0x40
 80060f0:	d141      	bne.n	8006176 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	3314      	adds	r3, #20
 80060f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006100:	e853 3f00 	ldrex	r3, [r3]
 8006104:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006108:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800610c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006110:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	3314      	adds	r3, #20
 800611a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800611e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006122:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006126:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800612a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800612e:	e841 2300 	strex	r3, r2, [r1]
 8006132:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006136:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1d9      	bne.n	80060f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006142:	2b00      	cmp	r3, #0
 8006144:	d013      	beq.n	800616e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614a:	4a7d      	ldr	r2, [pc, #500]	; (8006340 <HAL_UART_IRQHandler+0x3dc>)
 800614c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006152:	4618      	mov	r0, r3
 8006154:	f7fd fa74 	bl	8003640 <HAL_DMA_Abort_IT>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d016      	beq.n	800618c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006168:	4610      	mov	r0, r2
 800616a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800616c:	e00e      	b.n	800618c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f9a4 	bl	80064bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006174:	e00a      	b.n	800618c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f9a0 	bl	80064bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800617c:	e006      	b.n	800618c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f99c 	bl	80064bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800618a:	e170      	b.n	800646e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800618c:	bf00      	nop
    return;
 800618e:	e16e      	b.n	800646e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006194:	2b01      	cmp	r3, #1
 8006196:	f040 814a 	bne.w	800642e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800619a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800619e:	f003 0310 	and.w	r3, r3, #16
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 8143 	beq.w	800642e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80061a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061ac:	f003 0310 	and.w	r3, r3, #16
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 813c 	beq.w	800642e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061b6:	2300      	movs	r3, #0
 80061b8:	60bb      	str	r3, [r7, #8]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	60bb      	str	r3, [r7, #8]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	60bb      	str	r3, [r7, #8]
 80061ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d6:	2b40      	cmp	r3, #64	; 0x40
 80061d8:	f040 80b4 	bne.w	8006344 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80061e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f000 8140 	beq.w	8006472 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061fa:	429a      	cmp	r2, r3
 80061fc:	f080 8139 	bcs.w	8006472 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006206:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006212:	f000 8088 	beq.w	8006326 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	330c      	adds	r3, #12
 800621c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006220:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006224:	e853 3f00 	ldrex	r3, [r3]
 8006228:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800622c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006234:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	330c      	adds	r3, #12
 800623e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006242:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006246:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800624e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006252:	e841 2300 	strex	r3, r2, [r1]
 8006256:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800625a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1d9      	bne.n	8006216 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	3314      	adds	r3, #20
 8006268:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800626c:	e853 3f00 	ldrex	r3, [r3]
 8006270:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006272:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006274:	f023 0301 	bic.w	r3, r3, #1
 8006278:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	3314      	adds	r3, #20
 8006282:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006286:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800628a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800628e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006292:	e841 2300 	strex	r3, r2, [r1]
 8006296:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006298:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1e1      	bne.n	8006262 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3314      	adds	r3, #20
 80062a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062a8:	e853 3f00 	ldrex	r3, [r3]
 80062ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80062ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	3314      	adds	r3, #20
 80062be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80062c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80062c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80062c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80062ca:	e841 2300 	strex	r3, r2, [r1]
 80062ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80062d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1e3      	bne.n	800629e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2220      	movs	r2, #32
 80062da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	330c      	adds	r3, #12
 80062ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ee:	e853 3f00 	ldrex	r3, [r3]
 80062f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80062f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062f6:	f023 0310 	bic.w	r3, r3, #16
 80062fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	330c      	adds	r3, #12
 8006304:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006308:	65ba      	str	r2, [r7, #88]	; 0x58
 800630a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800630e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006310:	e841 2300 	strex	r3, r2, [r1]
 8006314:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1e3      	bne.n	80062e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006320:	4618      	mov	r0, r3
 8006322:	f7fd f91d 	bl	8003560 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800632e:	b29b      	uxth	r3, r3
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	b29b      	uxth	r3, r3
 8006334:	4619      	mov	r1, r3
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7fb f808 	bl	800134c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800633c:	e099      	b.n	8006472 <HAL_UART_IRQHandler+0x50e>
 800633e:	bf00      	nop
 8006340:	080069ef 	.word	0x080069ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800634c:	b29b      	uxth	r3, r3
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006358:	b29b      	uxth	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	f000 808b 	beq.w	8006476 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006360:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 8086 	beq.w	8006476 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	330c      	adds	r3, #12
 8006370:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006374:	e853 3f00 	ldrex	r3, [r3]
 8006378:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800637a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800637c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006380:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	330c      	adds	r3, #12
 800638a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800638e:	647a      	str	r2, [r7, #68]	; 0x44
 8006390:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006392:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006394:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006396:	e841 2300 	strex	r3, r2, [r1]
 800639a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800639c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1e3      	bne.n	800636a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3314      	adds	r3, #20
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	e853 3f00 	ldrex	r3, [r3]
 80063b0:	623b      	str	r3, [r7, #32]
   return(result);
 80063b2:	6a3b      	ldr	r3, [r7, #32]
 80063b4:	f023 0301 	bic.w	r3, r3, #1
 80063b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3314      	adds	r3, #20
 80063c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80063c6:	633a      	str	r2, [r7, #48]	; 0x30
 80063c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ce:	e841 2300 	strex	r3, r2, [r1]
 80063d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1e3      	bne.n	80063a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2220      	movs	r2, #32
 80063de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	330c      	adds	r3, #12
 80063ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	e853 3f00 	ldrex	r3, [r3]
 80063f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f023 0310 	bic.w	r3, r3, #16
 80063fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	330c      	adds	r3, #12
 8006408:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800640c:	61fa      	str	r2, [r7, #28]
 800640e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006410:	69b9      	ldr	r1, [r7, #24]
 8006412:	69fa      	ldr	r2, [r7, #28]
 8006414:	e841 2300 	strex	r3, r2, [r1]
 8006418:	617b      	str	r3, [r7, #20]
   return(result);
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1e3      	bne.n	80063e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006420:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006424:	4619      	mov	r1, r3
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f7fa ff90 	bl	800134c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800642c:	e023      	b.n	8006476 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800642e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006436:	2b00      	cmp	r3, #0
 8006438:	d009      	beq.n	800644e <HAL_UART_IRQHandler+0x4ea>
 800643a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800643e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fae5 	bl	8006a16 <UART_Transmit_IT>
    return;
 800644c:	e014      	b.n	8006478 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800644e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00e      	beq.n	8006478 <HAL_UART_IRQHandler+0x514>
 800645a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800645e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006462:	2b00      	cmp	r3, #0
 8006464:	d008      	beq.n	8006478 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fb25 	bl	8006ab6 <UART_EndTransmit_IT>
    return;
 800646c:	e004      	b.n	8006478 <HAL_UART_IRQHandler+0x514>
    return;
 800646e:	bf00      	nop
 8006470:	e002      	b.n	8006478 <HAL_UART_IRQHandler+0x514>
      return;
 8006472:	bf00      	nop
 8006474:	e000      	b.n	8006478 <HAL_UART_IRQHandler+0x514>
      return;
 8006476:	bf00      	nop
  }
}
 8006478:	37e8      	adds	r7, #232	; 0xe8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop

08006480 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b09c      	sub	sp, #112	; 0x70
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d172      	bne.n	80065d2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80064ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ee:	2200      	movs	r2, #0
 80064f0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	330c      	adds	r3, #12
 80064f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064fc:	e853 3f00 	ldrex	r3, [r3]
 8006500:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006502:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006508:	66bb      	str	r3, [r7, #104]	; 0x68
 800650a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	330c      	adds	r3, #12
 8006510:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006512:	65ba      	str	r2, [r7, #88]	; 0x58
 8006514:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006516:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006518:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800651a:	e841 2300 	strex	r3, r2, [r1]
 800651e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1e5      	bne.n	80064f2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3314      	adds	r3, #20
 800652c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006538:	f023 0301 	bic.w	r3, r3, #1
 800653c:	667b      	str	r3, [r7, #100]	; 0x64
 800653e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3314      	adds	r3, #20
 8006544:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006546:	647a      	str	r2, [r7, #68]	; 0x44
 8006548:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800654c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800654e:	e841 2300 	strex	r3, r2, [r1]
 8006552:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1e5      	bne.n	8006526 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800655a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	3314      	adds	r3, #20
 8006560:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006564:	e853 3f00 	ldrex	r3, [r3]
 8006568:	623b      	str	r3, [r7, #32]
   return(result);
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006570:	663b      	str	r3, [r7, #96]	; 0x60
 8006572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3314      	adds	r3, #20
 8006578:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800657a:	633a      	str	r2, [r7, #48]	; 0x30
 800657c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006582:	e841 2300 	strex	r3, r2, [r1]
 8006586:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1e5      	bne.n	800655a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800658e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006590:	2220      	movs	r2, #32
 8006592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659a:	2b01      	cmp	r3, #1
 800659c:	d119      	bne.n	80065d2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800659e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	330c      	adds	r3, #12
 80065a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	e853 3f00 	ldrex	r3, [r3]
 80065ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f023 0310 	bic.w	r3, r3, #16
 80065b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	330c      	adds	r3, #12
 80065bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065be:	61fa      	str	r2, [r7, #28]
 80065c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c2:	69b9      	ldr	r1, [r7, #24]
 80065c4:	69fa      	ldr	r2, [r7, #28]
 80065c6:	e841 2300 	strex	r3, r2, [r1]
 80065ca:	617b      	str	r3, [r7, #20]
   return(result);
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1e5      	bne.n	800659e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d106      	bne.n	80065e8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065de:	4619      	mov	r1, r3
 80065e0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80065e2:	f7fa feb3 	bl	800134c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80065e6:	e002      	b.n	80065ee <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80065e8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80065ea:	f7ff ff53 	bl	8006494 <HAL_UART_RxCpltCallback>
}
 80065ee:	bf00      	nop
 80065f0:	3770      	adds	r7, #112	; 0x70
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b084      	sub	sp, #16
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006602:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006608:	2b01      	cmp	r3, #1
 800660a:	d108      	bne.n	800661e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006610:	085b      	lsrs	r3, r3, #1
 8006612:	b29b      	uxth	r3, r3
 8006614:	4619      	mov	r1, r3
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f7fa fe98 	bl	800134c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800661c:	e002      	b.n	8006624 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f7ff ff42 	bl	80064a8 <HAL_UART_RxHalfCpltCallback>
}
 8006624:	bf00      	nop
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006634:	2300      	movs	r3, #0
 8006636:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	695b      	ldr	r3, [r3, #20]
 8006644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006648:	2b80      	cmp	r3, #128	; 0x80
 800664a:	bf0c      	ite	eq
 800664c:	2301      	moveq	r3, #1
 800664e:	2300      	movne	r3, #0
 8006650:	b2db      	uxtb	r3, r3
 8006652:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b21      	cmp	r3, #33	; 0x21
 800665e:	d108      	bne.n	8006672 <UART_DMAError+0x46>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d005      	beq.n	8006672 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	2200      	movs	r2, #0
 800666a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800666c:	68b8      	ldr	r0, [r7, #8]
 800666e:	f000 f933 	bl	80068d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667c:	2b40      	cmp	r3, #64	; 0x40
 800667e:	bf0c      	ite	eq
 8006680:	2301      	moveq	r3, #1
 8006682:	2300      	movne	r3, #0
 8006684:	b2db      	uxtb	r3, r3
 8006686:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800668e:	b2db      	uxtb	r3, r3
 8006690:	2b22      	cmp	r3, #34	; 0x22
 8006692:	d108      	bne.n	80066a6 <UART_DMAError+0x7a>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d005      	beq.n	80066a6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2200      	movs	r2, #0
 800669e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80066a0:	68b8      	ldr	r0, [r7, #8]
 80066a2:	f000 f941 	bl	8006928 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	f043 0210 	orr.w	r2, r3, #16
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066b2:	68b8      	ldr	r0, [r7, #8]
 80066b4:	f7ff ff02 	bl	80064bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066b8:	bf00      	nop
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b090      	sub	sp, #64	; 0x40
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	603b      	str	r3, [r7, #0]
 80066cc:	4613      	mov	r3, r2
 80066ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066d0:	e050      	b.n	8006774 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d8:	d04c      	beq.n	8006774 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80066da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d007      	beq.n	80066f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80066e0:	f7fc fd00 	bl	80030e4 <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d241      	bcs.n	8006774 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	330c      	adds	r3, #12
 80066f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fa:	e853 3f00 	ldrex	r3, [r3]
 80066fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006702:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006706:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	330c      	adds	r3, #12
 800670e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006710:	637a      	str	r2, [r7, #52]	; 0x34
 8006712:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006714:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006716:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006718:	e841 2300 	strex	r3, r2, [r1]
 800671c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800671e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1e5      	bne.n	80066f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	3314      	adds	r3, #20
 800672a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	e853 3f00 	ldrex	r3, [r3]
 8006732:	613b      	str	r3, [r7, #16]
   return(result);
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f023 0301 	bic.w	r3, r3, #1
 800673a:	63bb      	str	r3, [r7, #56]	; 0x38
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	3314      	adds	r3, #20
 8006742:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006744:	623a      	str	r2, [r7, #32]
 8006746:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006748:	69f9      	ldr	r1, [r7, #28]
 800674a:	6a3a      	ldr	r2, [r7, #32]
 800674c:	e841 2300 	strex	r3, r2, [r1]
 8006750:	61bb      	str	r3, [r7, #24]
   return(result);
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1e5      	bne.n	8006724 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2220      	movs	r2, #32
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2220      	movs	r2, #32
 8006764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e00f      	b.n	8006794 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	4013      	ands	r3, r2
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	429a      	cmp	r2, r3
 8006782:	bf0c      	ite	eq
 8006784:	2301      	moveq	r3, #1
 8006786:	2300      	movne	r3, #0
 8006788:	b2db      	uxtb	r3, r3
 800678a:	461a      	mov	r2, r3
 800678c:	79fb      	ldrb	r3, [r7, #7]
 800678e:	429a      	cmp	r2, r3
 8006790:	d09f      	beq.n	80066d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3740      	adds	r7, #64	; 0x40
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b098      	sub	sp, #96	; 0x60
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	4613      	mov	r3, r2
 80067a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	88fa      	ldrh	r2, [r7, #6]
 80067b4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2222      	movs	r2, #34	; 0x22
 80067c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c8:	4a40      	ldr	r2, [pc, #256]	; (80068cc <UART_Start_Receive_DMA+0x130>)
 80067ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d0:	4a3f      	ldr	r2, [pc, #252]	; (80068d0 <UART_Start_Receive_DMA+0x134>)
 80067d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d8:	4a3e      	ldr	r2, [pc, #248]	; (80068d4 <UART_Start_Receive_DMA+0x138>)
 80067da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e0:	2200      	movs	r2, #0
 80067e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80067e4:	f107 0308 	add.w	r3, r7, #8
 80067e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3304      	adds	r3, #4
 80067f4:	4619      	mov	r1, r3
 80067f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	88fb      	ldrh	r3, [r7, #6]
 80067fc:	f7fc fe58 	bl	80034b0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006800:	2300      	movs	r3, #0
 8006802:	613b      	str	r3, [r7, #16]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	613b      	str	r3, [r7, #16]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	613b      	str	r3, [r7, #16]
 8006814:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d019      	beq.n	800685a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	330c      	adds	r3, #12
 800682c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006830:	e853 3f00 	ldrex	r3, [r3]
 8006834:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800683c:	65bb      	str	r3, [r7, #88]	; 0x58
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	330c      	adds	r3, #12
 8006844:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006846:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006848:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800684c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800684e:	e841 2300 	strex	r3, r2, [r1]
 8006852:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1e5      	bne.n	8006826 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	3314      	adds	r3, #20
 8006860:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006864:	e853 3f00 	ldrex	r3, [r3]
 8006868:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800686a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686c:	f043 0301 	orr.w	r3, r3, #1
 8006870:	657b      	str	r3, [r7, #84]	; 0x54
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3314      	adds	r3, #20
 8006878:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800687a:	63ba      	str	r2, [r7, #56]	; 0x38
 800687c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006880:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006882:	e841 2300 	strex	r3, r2, [r1]
 8006886:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1e5      	bne.n	800685a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3314      	adds	r3, #20
 8006894:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	e853 3f00 	ldrex	r3, [r3]
 800689c:	617b      	str	r3, [r7, #20]
   return(result);
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068a4:	653b      	str	r3, [r7, #80]	; 0x50
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3314      	adds	r3, #20
 80068ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80068ae:	627a      	str	r2, [r7, #36]	; 0x24
 80068b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b2:	6a39      	ldr	r1, [r7, #32]
 80068b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068b6:	e841 2300 	strex	r3, r2, [r1]
 80068ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1e5      	bne.n	800688e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3760      	adds	r7, #96	; 0x60
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	080064d1 	.word	0x080064d1
 80068d0:	080065f7 	.word	0x080065f7
 80068d4:	0800662d 	.word	0x0800662d

080068d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80068d8:	b480      	push	{r7}
 80068da:	b089      	sub	sp, #36	; 0x24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	330c      	adds	r3, #12
 80068e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	e853 3f00 	ldrex	r3, [r3]
 80068ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80068f6:	61fb      	str	r3, [r7, #28]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	330c      	adds	r3, #12
 80068fe:	69fa      	ldr	r2, [r7, #28]
 8006900:	61ba      	str	r2, [r7, #24]
 8006902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006904:	6979      	ldr	r1, [r7, #20]
 8006906:	69ba      	ldr	r2, [r7, #24]
 8006908:	e841 2300 	strex	r3, r2, [r1]
 800690c:	613b      	str	r3, [r7, #16]
   return(result);
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1e5      	bne.n	80068e0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2220      	movs	r2, #32
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800691c:	bf00      	nop
 800691e:	3724      	adds	r7, #36	; 0x24
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006928:	b480      	push	{r7}
 800692a:	b095      	sub	sp, #84	; 0x54
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	330c      	adds	r3, #12
 8006936:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800693a:	e853 3f00 	ldrex	r3, [r3]
 800693e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006942:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	330c      	adds	r3, #12
 800694e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006950:	643a      	str	r2, [r7, #64]	; 0x40
 8006952:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006954:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006956:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006958:	e841 2300 	strex	r3, r2, [r1]
 800695c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800695e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1e5      	bne.n	8006930 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3314      	adds	r3, #20
 800696a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	e853 3f00 	ldrex	r3, [r3]
 8006972:	61fb      	str	r3, [r7, #28]
   return(result);
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	f023 0301 	bic.w	r3, r3, #1
 800697a:	64bb      	str	r3, [r7, #72]	; 0x48
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3314      	adds	r3, #20
 8006982:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006984:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006986:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800698a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800698c:	e841 2300 	strex	r3, r2, [r1]
 8006990:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1e5      	bne.n	8006964 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699c:	2b01      	cmp	r3, #1
 800699e:	d119      	bne.n	80069d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	330c      	adds	r3, #12
 80069a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	e853 3f00 	ldrex	r3, [r3]
 80069ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	f023 0310 	bic.w	r3, r3, #16
 80069b6:	647b      	str	r3, [r7, #68]	; 0x44
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	330c      	adds	r3, #12
 80069be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069c0:	61ba      	str	r2, [r7, #24]
 80069c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c4:	6979      	ldr	r1, [r7, #20]
 80069c6:	69ba      	ldr	r2, [r7, #24]
 80069c8:	e841 2300 	strex	r3, r2, [r1]
 80069cc:	613b      	str	r3, [r7, #16]
   return(result);
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1e5      	bne.n	80069a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2220      	movs	r2, #32
 80069d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80069e2:	bf00      	nop
 80069e4:	3754      	adds	r7, #84	; 0x54
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b084      	sub	sp, #16
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f7ff fd57 	bl	80064bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a0e:	bf00      	nop
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b085      	sub	sp, #20
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b21      	cmp	r3, #33	; 0x21
 8006a28:	d13e      	bne.n	8006aa8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a32:	d114      	bne.n	8006a5e <UART_Transmit_IT+0x48>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d110      	bne.n	8006a5e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	461a      	mov	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	1c9a      	adds	r2, r3, #2
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	621a      	str	r2, [r3, #32]
 8006a5c:	e008      	b.n	8006a70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	1c59      	adds	r1, r3, #1
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	6211      	str	r1, [r2, #32]
 8006a68:	781a      	ldrb	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	3b01      	subs	r3, #1
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10f      	bne.n	8006aa4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68da      	ldr	r2, [r3, #12]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68da      	ldr	r2, [r3, #12]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006aa2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	e000      	b.n	8006aaa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006aa8:	2302      	movs	r3, #2
  }
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3714      	adds	r7, #20
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b082      	sub	sp, #8
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68da      	ldr	r2, [r3, #12]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006acc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f7ff fcd2 	bl	8006480 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3708      	adds	r7, #8
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b08c      	sub	sp, #48	; 0x30
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b22      	cmp	r3, #34	; 0x22
 8006af8:	f040 80ab 	bne.w	8006c52 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b04:	d117      	bne.n	8006b36 <UART_Receive_IT+0x50>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d113      	bne.n	8006b36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b16:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2e:	1c9a      	adds	r2, r3, #2
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	629a      	str	r2, [r3, #40]	; 0x28
 8006b34:	e026      	b.n	8006b84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b48:	d007      	beq.n	8006b5a <UART_Receive_IT+0x74>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10a      	bne.n	8006b68 <UART_Receive_IT+0x82>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d106      	bne.n	8006b68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	b2da      	uxtb	r2, r3
 8006b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b64:	701a      	strb	r2, [r3, #0]
 8006b66:	e008      	b.n	8006b7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b74:	b2da      	uxtb	r2, r3
 8006b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7e:	1c5a      	adds	r2, r3, #1
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	4619      	mov	r1, r3
 8006b92:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d15a      	bne.n	8006c4e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68da      	ldr	r2, [r3, #12]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f022 0220 	bic.w	r2, r2, #32
 8006ba6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68da      	ldr	r2, [r3, #12]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	695a      	ldr	r2, [r3, #20]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f022 0201 	bic.w	r2, r2, #1
 8006bc6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d135      	bne.n	8006c44 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	330c      	adds	r3, #12
 8006be4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	e853 3f00 	ldrex	r3, [r3]
 8006bec:	613b      	str	r3, [r7, #16]
   return(result);
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	f023 0310 	bic.w	r3, r3, #16
 8006bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	330c      	adds	r3, #12
 8006bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bfe:	623a      	str	r2, [r7, #32]
 8006c00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c02:	69f9      	ldr	r1, [r7, #28]
 8006c04:	6a3a      	ldr	r2, [r7, #32]
 8006c06:	e841 2300 	strex	r3, r2, [r1]
 8006c0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1e5      	bne.n	8006bde <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0310 	and.w	r3, r3, #16
 8006c1c:	2b10      	cmp	r3, #16
 8006c1e:	d10a      	bne.n	8006c36 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c20:	2300      	movs	r3, #0
 8006c22:	60fb      	str	r3, [r7, #12]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	60fb      	str	r3, [r7, #12]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f7fa fb85 	bl	800134c <HAL_UARTEx_RxEventCallback>
 8006c42:	e002      	b.n	8006c4a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7ff fc25 	bl	8006494 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	e002      	b.n	8006c54 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	e000      	b.n	8006c54 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006c52:	2302      	movs	r3, #2
  }
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3730      	adds	r7, #48	; 0x30
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c60:	b0c0      	sub	sp, #256	; 0x100
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c78:	68d9      	ldr	r1, [r3, #12]
 8006c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	ea40 0301 	orr.w	r3, r0, r1
 8006c84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c8a:	689a      	ldr	r2, [r3, #8]
 8006c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	431a      	orrs	r2, r3
 8006c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	431a      	orrs	r2, r3
 8006c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006cb4:	f021 010c 	bic.w	r1, r1, #12
 8006cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006cc2:	430b      	orrs	r3, r1
 8006cc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd6:	6999      	ldr	r1, [r3, #24]
 8006cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	ea40 0301 	orr.w	r3, r0, r1
 8006ce2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	4b8f      	ldr	r3, [pc, #572]	; (8006f28 <UART_SetConfig+0x2cc>)
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d005      	beq.n	8006cfc <UART_SetConfig+0xa0>
 8006cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	4b8d      	ldr	r3, [pc, #564]	; (8006f2c <UART_SetConfig+0x2d0>)
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d104      	bne.n	8006d06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cfc:	f7fd fdb0 	bl	8004860 <HAL_RCC_GetPCLK2Freq>
 8006d00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006d04:	e003      	b.n	8006d0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d06:	f7fd fd97 	bl	8004838 <HAL_RCC_GetPCLK1Freq>
 8006d0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d12:	69db      	ldr	r3, [r3, #28]
 8006d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d18:	f040 810c 	bne.w	8006f34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d20:	2200      	movs	r2, #0
 8006d22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006d2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006d2e:	4622      	mov	r2, r4
 8006d30:	462b      	mov	r3, r5
 8006d32:	1891      	adds	r1, r2, r2
 8006d34:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d36:	415b      	adcs	r3, r3
 8006d38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006d3e:	4621      	mov	r1, r4
 8006d40:	eb12 0801 	adds.w	r8, r2, r1
 8006d44:	4629      	mov	r1, r5
 8006d46:	eb43 0901 	adc.w	r9, r3, r1
 8006d4a:	f04f 0200 	mov.w	r2, #0
 8006d4e:	f04f 0300 	mov.w	r3, #0
 8006d52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d5e:	4690      	mov	r8, r2
 8006d60:	4699      	mov	r9, r3
 8006d62:	4623      	mov	r3, r4
 8006d64:	eb18 0303 	adds.w	r3, r8, r3
 8006d68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d6c:	462b      	mov	r3, r5
 8006d6e:	eb49 0303 	adc.w	r3, r9, r3
 8006d72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006d86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	18db      	adds	r3, r3, r3
 8006d8e:	653b      	str	r3, [r7, #80]	; 0x50
 8006d90:	4613      	mov	r3, r2
 8006d92:	eb42 0303 	adc.w	r3, r2, r3
 8006d96:	657b      	str	r3, [r7, #84]	; 0x54
 8006d98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006d9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006da0:	f7fa f880 	bl	8000ea4 <__aeabi_uldivmod>
 8006da4:	4602      	mov	r2, r0
 8006da6:	460b      	mov	r3, r1
 8006da8:	4b61      	ldr	r3, [pc, #388]	; (8006f30 <UART_SetConfig+0x2d4>)
 8006daa:	fba3 2302 	umull	r2, r3, r3, r2
 8006dae:	095b      	lsrs	r3, r3, #5
 8006db0:	011c      	lsls	r4, r3, #4
 8006db2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006db6:	2200      	movs	r2, #0
 8006db8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006dbc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006dc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006dc4:	4642      	mov	r2, r8
 8006dc6:	464b      	mov	r3, r9
 8006dc8:	1891      	adds	r1, r2, r2
 8006dca:	64b9      	str	r1, [r7, #72]	; 0x48
 8006dcc:	415b      	adcs	r3, r3
 8006dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006dd4:	4641      	mov	r1, r8
 8006dd6:	eb12 0a01 	adds.w	sl, r2, r1
 8006dda:	4649      	mov	r1, r9
 8006ddc:	eb43 0b01 	adc.w	fp, r3, r1
 8006de0:	f04f 0200 	mov.w	r2, #0
 8006de4:	f04f 0300 	mov.w	r3, #0
 8006de8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006dec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006df0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006df4:	4692      	mov	sl, r2
 8006df6:	469b      	mov	fp, r3
 8006df8:	4643      	mov	r3, r8
 8006dfa:	eb1a 0303 	adds.w	r3, sl, r3
 8006dfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e02:	464b      	mov	r3, r9
 8006e04:	eb4b 0303 	adc.w	r3, fp, r3
 8006e08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006e1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006e20:	460b      	mov	r3, r1
 8006e22:	18db      	adds	r3, r3, r3
 8006e24:	643b      	str	r3, [r7, #64]	; 0x40
 8006e26:	4613      	mov	r3, r2
 8006e28:	eb42 0303 	adc.w	r3, r2, r3
 8006e2c:	647b      	str	r3, [r7, #68]	; 0x44
 8006e2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006e36:	f7fa f835 	bl	8000ea4 <__aeabi_uldivmod>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	4611      	mov	r1, r2
 8006e40:	4b3b      	ldr	r3, [pc, #236]	; (8006f30 <UART_SetConfig+0x2d4>)
 8006e42:	fba3 2301 	umull	r2, r3, r3, r1
 8006e46:	095b      	lsrs	r3, r3, #5
 8006e48:	2264      	movs	r2, #100	; 0x64
 8006e4a:	fb02 f303 	mul.w	r3, r2, r3
 8006e4e:	1acb      	subs	r3, r1, r3
 8006e50:	00db      	lsls	r3, r3, #3
 8006e52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006e56:	4b36      	ldr	r3, [pc, #216]	; (8006f30 <UART_SetConfig+0x2d4>)
 8006e58:	fba3 2302 	umull	r2, r3, r3, r2
 8006e5c:	095b      	lsrs	r3, r3, #5
 8006e5e:	005b      	lsls	r3, r3, #1
 8006e60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e64:	441c      	add	r4, r3
 8006e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006e74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006e78:	4642      	mov	r2, r8
 8006e7a:	464b      	mov	r3, r9
 8006e7c:	1891      	adds	r1, r2, r2
 8006e7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e80:	415b      	adcs	r3, r3
 8006e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e88:	4641      	mov	r1, r8
 8006e8a:	1851      	adds	r1, r2, r1
 8006e8c:	6339      	str	r1, [r7, #48]	; 0x30
 8006e8e:	4649      	mov	r1, r9
 8006e90:	414b      	adcs	r3, r1
 8006e92:	637b      	str	r3, [r7, #52]	; 0x34
 8006e94:	f04f 0200 	mov.w	r2, #0
 8006e98:	f04f 0300 	mov.w	r3, #0
 8006e9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006ea0:	4659      	mov	r1, fp
 8006ea2:	00cb      	lsls	r3, r1, #3
 8006ea4:	4651      	mov	r1, sl
 8006ea6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eaa:	4651      	mov	r1, sl
 8006eac:	00ca      	lsls	r2, r1, #3
 8006eae:	4610      	mov	r0, r2
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	4642      	mov	r2, r8
 8006eb6:	189b      	adds	r3, r3, r2
 8006eb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ebc:	464b      	mov	r3, r9
 8006ebe:	460a      	mov	r2, r1
 8006ec0:	eb42 0303 	adc.w	r3, r2, r3
 8006ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006ed4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006ed8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006edc:	460b      	mov	r3, r1
 8006ede:	18db      	adds	r3, r3, r3
 8006ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	eb42 0303 	adc.w	r3, r2, r3
 8006ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006eee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006ef2:	f7f9 ffd7 	bl	8000ea4 <__aeabi_uldivmod>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	4b0d      	ldr	r3, [pc, #52]	; (8006f30 <UART_SetConfig+0x2d4>)
 8006efc:	fba3 1302 	umull	r1, r3, r3, r2
 8006f00:	095b      	lsrs	r3, r3, #5
 8006f02:	2164      	movs	r1, #100	; 0x64
 8006f04:	fb01 f303 	mul.w	r3, r1, r3
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	00db      	lsls	r3, r3, #3
 8006f0c:	3332      	adds	r3, #50	; 0x32
 8006f0e:	4a08      	ldr	r2, [pc, #32]	; (8006f30 <UART_SetConfig+0x2d4>)
 8006f10:	fba2 2303 	umull	r2, r3, r2, r3
 8006f14:	095b      	lsrs	r3, r3, #5
 8006f16:	f003 0207 	and.w	r2, r3, #7
 8006f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4422      	add	r2, r4
 8006f22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f24:	e105      	b.n	8007132 <UART_SetConfig+0x4d6>
 8006f26:	bf00      	nop
 8006f28:	40011000 	.word	0x40011000
 8006f2c:	40011400 	.word	0x40011400
 8006f30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006f42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006f46:	4642      	mov	r2, r8
 8006f48:	464b      	mov	r3, r9
 8006f4a:	1891      	adds	r1, r2, r2
 8006f4c:	6239      	str	r1, [r7, #32]
 8006f4e:	415b      	adcs	r3, r3
 8006f50:	627b      	str	r3, [r7, #36]	; 0x24
 8006f52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f56:	4641      	mov	r1, r8
 8006f58:	1854      	adds	r4, r2, r1
 8006f5a:	4649      	mov	r1, r9
 8006f5c:	eb43 0501 	adc.w	r5, r3, r1
 8006f60:	f04f 0200 	mov.w	r2, #0
 8006f64:	f04f 0300 	mov.w	r3, #0
 8006f68:	00eb      	lsls	r3, r5, #3
 8006f6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f6e:	00e2      	lsls	r2, r4, #3
 8006f70:	4614      	mov	r4, r2
 8006f72:	461d      	mov	r5, r3
 8006f74:	4643      	mov	r3, r8
 8006f76:	18e3      	adds	r3, r4, r3
 8006f78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f7c:	464b      	mov	r3, r9
 8006f7e:	eb45 0303 	adc.w	r3, r5, r3
 8006f82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f96:	f04f 0200 	mov.w	r2, #0
 8006f9a:	f04f 0300 	mov.w	r3, #0
 8006f9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006fa2:	4629      	mov	r1, r5
 8006fa4:	008b      	lsls	r3, r1, #2
 8006fa6:	4621      	mov	r1, r4
 8006fa8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fac:	4621      	mov	r1, r4
 8006fae:	008a      	lsls	r2, r1, #2
 8006fb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006fb4:	f7f9 ff76 	bl	8000ea4 <__aeabi_uldivmod>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	460b      	mov	r3, r1
 8006fbc:	4b60      	ldr	r3, [pc, #384]	; (8007140 <UART_SetConfig+0x4e4>)
 8006fbe:	fba3 2302 	umull	r2, r3, r3, r2
 8006fc2:	095b      	lsrs	r3, r3, #5
 8006fc4:	011c      	lsls	r4, r3, #4
 8006fc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006fd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006fd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006fd8:	4642      	mov	r2, r8
 8006fda:	464b      	mov	r3, r9
 8006fdc:	1891      	adds	r1, r2, r2
 8006fde:	61b9      	str	r1, [r7, #24]
 8006fe0:	415b      	adcs	r3, r3
 8006fe2:	61fb      	str	r3, [r7, #28]
 8006fe4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fe8:	4641      	mov	r1, r8
 8006fea:	1851      	adds	r1, r2, r1
 8006fec:	6139      	str	r1, [r7, #16]
 8006fee:	4649      	mov	r1, r9
 8006ff0:	414b      	adcs	r3, r1
 8006ff2:	617b      	str	r3, [r7, #20]
 8006ff4:	f04f 0200 	mov.w	r2, #0
 8006ff8:	f04f 0300 	mov.w	r3, #0
 8006ffc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007000:	4659      	mov	r1, fp
 8007002:	00cb      	lsls	r3, r1, #3
 8007004:	4651      	mov	r1, sl
 8007006:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800700a:	4651      	mov	r1, sl
 800700c:	00ca      	lsls	r2, r1, #3
 800700e:	4610      	mov	r0, r2
 8007010:	4619      	mov	r1, r3
 8007012:	4603      	mov	r3, r0
 8007014:	4642      	mov	r2, r8
 8007016:	189b      	adds	r3, r3, r2
 8007018:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800701c:	464b      	mov	r3, r9
 800701e:	460a      	mov	r2, r1
 8007020:	eb42 0303 	adc.w	r3, r2, r3
 8007024:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	67bb      	str	r3, [r7, #120]	; 0x78
 8007032:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007034:	f04f 0200 	mov.w	r2, #0
 8007038:	f04f 0300 	mov.w	r3, #0
 800703c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007040:	4649      	mov	r1, r9
 8007042:	008b      	lsls	r3, r1, #2
 8007044:	4641      	mov	r1, r8
 8007046:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800704a:	4641      	mov	r1, r8
 800704c:	008a      	lsls	r2, r1, #2
 800704e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007052:	f7f9 ff27 	bl	8000ea4 <__aeabi_uldivmod>
 8007056:	4602      	mov	r2, r0
 8007058:	460b      	mov	r3, r1
 800705a:	4b39      	ldr	r3, [pc, #228]	; (8007140 <UART_SetConfig+0x4e4>)
 800705c:	fba3 1302 	umull	r1, r3, r3, r2
 8007060:	095b      	lsrs	r3, r3, #5
 8007062:	2164      	movs	r1, #100	; 0x64
 8007064:	fb01 f303 	mul.w	r3, r1, r3
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	011b      	lsls	r3, r3, #4
 800706c:	3332      	adds	r3, #50	; 0x32
 800706e:	4a34      	ldr	r2, [pc, #208]	; (8007140 <UART_SetConfig+0x4e4>)
 8007070:	fba2 2303 	umull	r2, r3, r2, r3
 8007074:	095b      	lsrs	r3, r3, #5
 8007076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800707a:	441c      	add	r4, r3
 800707c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007080:	2200      	movs	r2, #0
 8007082:	673b      	str	r3, [r7, #112]	; 0x70
 8007084:	677a      	str	r2, [r7, #116]	; 0x74
 8007086:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800708a:	4642      	mov	r2, r8
 800708c:	464b      	mov	r3, r9
 800708e:	1891      	adds	r1, r2, r2
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	415b      	adcs	r3, r3
 8007094:	60fb      	str	r3, [r7, #12]
 8007096:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800709a:	4641      	mov	r1, r8
 800709c:	1851      	adds	r1, r2, r1
 800709e:	6039      	str	r1, [r7, #0]
 80070a0:	4649      	mov	r1, r9
 80070a2:	414b      	adcs	r3, r1
 80070a4:	607b      	str	r3, [r7, #4]
 80070a6:	f04f 0200 	mov.w	r2, #0
 80070aa:	f04f 0300 	mov.w	r3, #0
 80070ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80070b2:	4659      	mov	r1, fp
 80070b4:	00cb      	lsls	r3, r1, #3
 80070b6:	4651      	mov	r1, sl
 80070b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070bc:	4651      	mov	r1, sl
 80070be:	00ca      	lsls	r2, r1, #3
 80070c0:	4610      	mov	r0, r2
 80070c2:	4619      	mov	r1, r3
 80070c4:	4603      	mov	r3, r0
 80070c6:	4642      	mov	r2, r8
 80070c8:	189b      	adds	r3, r3, r2
 80070ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80070cc:	464b      	mov	r3, r9
 80070ce:	460a      	mov	r2, r1
 80070d0:	eb42 0303 	adc.w	r3, r2, r3
 80070d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	663b      	str	r3, [r7, #96]	; 0x60
 80070e0:	667a      	str	r2, [r7, #100]	; 0x64
 80070e2:	f04f 0200 	mov.w	r2, #0
 80070e6:	f04f 0300 	mov.w	r3, #0
 80070ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80070ee:	4649      	mov	r1, r9
 80070f0:	008b      	lsls	r3, r1, #2
 80070f2:	4641      	mov	r1, r8
 80070f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070f8:	4641      	mov	r1, r8
 80070fa:	008a      	lsls	r2, r1, #2
 80070fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007100:	f7f9 fed0 	bl	8000ea4 <__aeabi_uldivmod>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	4b0d      	ldr	r3, [pc, #52]	; (8007140 <UART_SetConfig+0x4e4>)
 800710a:	fba3 1302 	umull	r1, r3, r3, r2
 800710e:	095b      	lsrs	r3, r3, #5
 8007110:	2164      	movs	r1, #100	; 0x64
 8007112:	fb01 f303 	mul.w	r3, r1, r3
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	011b      	lsls	r3, r3, #4
 800711a:	3332      	adds	r3, #50	; 0x32
 800711c:	4a08      	ldr	r2, [pc, #32]	; (8007140 <UART_SetConfig+0x4e4>)
 800711e:	fba2 2303 	umull	r2, r3, r2, r3
 8007122:	095b      	lsrs	r3, r3, #5
 8007124:	f003 020f 	and.w	r2, r3, #15
 8007128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4422      	add	r2, r4
 8007130:	609a      	str	r2, [r3, #8]
}
 8007132:	bf00      	nop
 8007134:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007138:	46bd      	mov	sp, r7
 800713a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800713e:	bf00      	nop
 8007140:	51eb851f 	.word	0x51eb851f

08007144 <MOTOR_driver_setupPWM>:
 *      Author: minht
 */

#include "MOTOR_DRIVER.h"
void MOTOR_driver_setupPWM(MOTOR_DRIVER_t* motor, TIM_HandleTypeDef* htimPWM, uint32_t CH1, uint32_t CH2)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
 8007150:	603b      	str	r3, [r7, #0]
    motor->htimPWM = htimPWM;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	605a      	str	r2, [r3, #4]
    motor->PWM_CH1 = CH1;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	611a      	str	r2, [r3, #16]
    motor->PWM_CH2 = CH2;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	683a      	ldr	r2, [r7, #0]
 8007162:	615a      	str	r2, [r3, #20]
    HAL_TIM_PWM_Start(motor->htimPWM, motor->PWM_CH1);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	685a      	ldr	r2, [r3, #4]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	4619      	mov	r1, r3
 800716e:	4610      	mov	r0, r2
 8007170:	f7fd fd0c 	bl	8004b8c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(motor->htimPWM, motor->PWM_CH2);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	695b      	ldr	r3, [r3, #20]
 800717c:	4619      	mov	r1, r3
 800717e:	4610      	mov	r0, r2
 8007180:	f7fd fd04 	bl	8004b8c <HAL_TIM_PWM_Start>
}
 8007184:	bf00      	nop
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <MOTOR_driver_setupENCODER>:
void MOTOR_driver_setupENCODER(MOTOR_DRIVER_t* motor, TIM_HandleTypeDef *htimENC, uint32_t CH1, uint32_t CH2)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
 8007198:	603b      	str	r3, [r7, #0]
    motor->htimENC = htimENC;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	68ba      	ldr	r2, [r7, #8]
 800719e:	601a      	str	r2, [r3, #0]
    motor->ENC_CH1 = CH1;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	619a      	str	r2, [r3, #24]
    motor->ENC_CH2 = CH2;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	683a      	ldr	r2, [r7, #0]
 80071aa:	61da      	str	r2, [r3, #28]
    HAL_TIM_Base_Start(motor->htimENC);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7fd fbb9 	bl	8004928 <HAL_TIM_Base_Start>
    HAL_TIM_Encoder_Start(motor->htimENC, motor->ENC_CH1 | motor->ENC_CH1);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	4619      	mov	r1, r3
 80071c0:	4610      	mov	r0, r2
 80071c2:	f7fd fe51 	bl	8004e68 <HAL_TIM_Encoder_Start>
}
 80071c6:	bf00      	nop
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <MOTOR_driver_rotary>:
void MOTOR_driver_rotary(MOTOR_DRIVER_t* motor, float duty)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b083      	sub	sp, #12
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	ed87 0a00 	vstr	s0, [r7]
    if (duty >= 0)
 80071da:	edd7 7a00 	vldr	s15, [r7]
 80071de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071e6:	db61      	blt.n	80072ac <MOTOR_driver_rotary+0xde>
    {
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH1, (uint16_t)duty);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d10b      	bne.n	8007208 <MOTOR_driver_rotary+0x3a>
 80071f0:	edd7 7a00 	vldr	s15, [r7]
 80071f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071f8:	ee17 3a90 	vmov	r3, s15
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	635a      	str	r2, [r3, #52]	; 0x34
 8007206:	e02d      	b.n	8007264 <MOTOR_driver_rotary+0x96>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	2b04      	cmp	r3, #4
 800720e:	d10c      	bne.n	800722a <MOTOR_driver_rotary+0x5c>
 8007210:	edd7 7a00 	vldr	s15, [r7]
 8007214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007218:	ee17 3a90 	vmov	r3, s15
 800721c:	b299      	uxth	r1, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	460b      	mov	r3, r1
 8007226:	6393      	str	r3, [r2, #56]	; 0x38
 8007228:	e01c      	b.n	8007264 <MOTOR_driver_rotary+0x96>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	2b08      	cmp	r3, #8
 8007230:	d10c      	bne.n	800724c <MOTOR_driver_rotary+0x7e>
 8007232:	edd7 7a00 	vldr	s15, [r7]
 8007236:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800723a:	ee17 3a90 	vmov	r3, s15
 800723e:	b299      	uxth	r1, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	460b      	mov	r3, r1
 8007248:	63d3      	str	r3, [r2, #60]	; 0x3c
 800724a:	e00b      	b.n	8007264 <MOTOR_driver_rotary+0x96>
 800724c:	edd7 7a00 	vldr	s15, [r7]
 8007250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007254:	ee17 3a90 	vmov	r3, s15
 8007258:	b299      	uxth	r1, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	460b      	mov	r3, r1
 8007262:	6413      	str	r3, [r2, #64]	; 0x40
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)0);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d105      	bne.n	8007278 <MOTOR_driver_rotary+0xaa>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2200      	movs	r2, #0
 8007274:	635a      	str	r2, [r3, #52]	; 0x34
    else
    {
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH1, (uint16_t)0);
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)-duty);
    }
}
 8007276:	e083      	b.n	8007380 <MOTOR_driver_rotary+0x1b2>
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)0);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	2b04      	cmp	r3, #4
 800727e:	d105      	bne.n	800728c <MOTOR_driver_rotary+0xbe>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	2300      	movs	r3, #0
 8007288:	6393      	str	r3, [r2, #56]	; 0x38
 800728a:	e079      	b.n	8007380 <MOTOR_driver_rotary+0x1b2>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	695b      	ldr	r3, [r3, #20]
 8007290:	2b08      	cmp	r3, #8
 8007292:	d105      	bne.n	80072a0 <MOTOR_driver_rotary+0xd2>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	2300      	movs	r3, #0
 800729c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800729e:	e06f      	b.n	8007380 <MOTOR_driver_rotary+0x1b2>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	2300      	movs	r3, #0
 80072a8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80072aa:	e069      	b.n	8007380 <MOTOR_driver_rotary+0x1b2>
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH1, (uint16_t)0);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d105      	bne.n	80072c0 <MOTOR_driver_rotary+0xf2>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2200      	movs	r2, #0
 80072bc:	635a      	str	r2, [r3, #52]	; 0x34
 80072be:	e018      	b.n	80072f2 <MOTOR_driver_rotary+0x124>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	2b04      	cmp	r3, #4
 80072c6:	d105      	bne.n	80072d4 <MOTOR_driver_rotary+0x106>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	2300      	movs	r3, #0
 80072d0:	6393      	str	r3, [r2, #56]	; 0x38
 80072d2:	e00e      	b.n	80072f2 <MOTOR_driver_rotary+0x124>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	2b08      	cmp	r3, #8
 80072da:	d105      	bne.n	80072e8 <MOTOR_driver_rotary+0x11a>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	2300      	movs	r3, #0
 80072e4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80072e6:	e004      	b.n	80072f2 <MOTOR_driver_rotary+0x124>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	2300      	movs	r3, #0
 80072f0:	6413      	str	r3, [r2, #64]	; 0x40
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)-duty);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10d      	bne.n	8007316 <MOTOR_driver_rotary+0x148>
 80072fa:	edd7 7a00 	vldr	s15, [r7]
 80072fe:	eef1 7a67 	vneg.f32	s15, s15
 8007302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007306:	ee17 3a90 	vmov	r3, s15
 800730a:	b29a      	uxth	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007314:	e034      	b.n	8007380 <MOTOR_driver_rotary+0x1b2>
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)-duty);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	2b04      	cmp	r3, #4
 800731c:	d10e      	bne.n	800733c <MOTOR_driver_rotary+0x16e>
 800731e:	edd7 7a00 	vldr	s15, [r7]
 8007322:	eef1 7a67 	vneg.f32	s15, s15
 8007326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800732a:	ee17 3a90 	vmov	r3, s15
 800732e:	b299      	uxth	r1, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	460b      	mov	r3, r1
 8007338:	6393      	str	r3, [r2, #56]	; 0x38
}
 800733a:	e021      	b.n	8007380 <MOTOR_driver_rotary+0x1b2>
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)-duty);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	2b08      	cmp	r3, #8
 8007342:	d10e      	bne.n	8007362 <MOTOR_driver_rotary+0x194>
 8007344:	edd7 7a00 	vldr	s15, [r7]
 8007348:	eef1 7a67 	vneg.f32	s15, s15
 800734c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007350:	ee17 3a90 	vmov	r3, s15
 8007354:	b299      	uxth	r1, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	460b      	mov	r3, r1
 800735e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8007360:	e00e      	b.n	8007380 <MOTOR_driver_rotary+0x1b2>
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)-duty);
 8007362:	edd7 7a00 	vldr	s15, [r7]
 8007366:	eef1 7a67 	vneg.f32	s15, s15
 800736a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800736e:	ee17 3a90 	vmov	r3, s15
 8007372:	b299      	uxth	r1, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	460b      	mov	r3, r1
 800737c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800737e:	e7ff      	b.n	8007380 <MOTOR_driver_rotary+0x1b2>
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <MOTOR_driver_readPosAndSpeed>:
void MOTOR_driver_readPosAndSpeed(MOTOR_DRIVER_t* motor, float* pos, float* speed, float Ts)
{
 800738c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007390:	b084      	sub	sp, #16
 8007392:	af00      	add	r7, sp, #0
 8007394:	60f8      	str	r0, [r7, #12]
 8007396:	60b9      	str	r1, [r7, #8]
 8007398:	607a      	str	r2, [r7, #4]
 800739a:	ed87 0a00 	vstr	s0, [r7]
    motor->EncCount += (int16_t)motor->htimENC->Instance->CNT; // Đọc xung encoder
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a6:	b219      	sxth	r1, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80073ae:	b209      	sxth	r1, r1
 80073b0:	17c8      	asrs	r0, r1, #31
 80073b2:	460c      	mov	r4, r1
 80073b4:	4605      	mov	r5, r0
 80073b6:	eb12 0804 	adds.w	r8, r2, r4
 80073ba:	eb43 0905 	adc.w	r9, r3, r5
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	e9c3 8902 	strd	r8, r9, [r3, #8]
    __HAL_TIM_SET_COUNTER(motor->htimENC, 0); // Reset xung encoder
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2200      	movs	r2, #0
 80073cc:	625a      	str	r2, [r3, #36]	; 0x24

    *pos = motor->pos = (float)motor->EncCount / motor->ratio; // Tính góc hiện tại của trục động cơ 
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80073d4:	4610      	mov	r0, r2
 80073d6:	4619      	mov	r1, r3
 80073d8:	f7f9 fd26 	bl	8000e28 <__aeabi_l2f>
 80073dc:	ee06 0a90 	vmov	s13, r0
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80073e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	601a      	str	r2, [r3, #0]
    *speed = motor->speed = (motor->pos - motor->prePos) * 1000 / Ts; // tính vận tốc xoay góc
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8007404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007408:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8007438 <MOTOR_driver_readPosAndSpeed+0xac>
 800740c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007410:	ed97 7a00 	vldr	s14, [r7]
 8007414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	edc3 7a08 	vstr	s15, [r3, #32]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6a1a      	ldr	r2, [r3, #32]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	601a      	str	r2, [r3, #0]
    motor->prePos = motor->pos;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800742e:	bf00      	nop
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007438:	447a0000 	.word	0x447a0000

0800743c <MOTOR_driver_reset>:
void MOTOR_driver_reset(MOTOR_DRIVER_t* motor)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
	motor->EncCount = 0;
 8007444:	6879      	ldr	r1, [r7, #4]
 8007446:	f04f 0200 	mov.w	r2, #0
 800744a:	f04f 0300 	mov.w	r3, #0
 800744e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    motor->pos = 0;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f04f 0200 	mov.w	r2, #0
 8007458:	625a      	str	r2, [r3, #36]	; 0x24
    motor->prePos = 0;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f04f 0200 	mov.w	r2, #0
 8007460:	62da      	str	r2, [r3, #44]	; 0x2c
    motor->speed = 0;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f04f 0200 	mov.w	r2, #0
 8007468:	621a      	str	r2, [r3, #32]
    motor->preSpeed = 0;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f04f 0200 	mov.w	r2, #0
 8007470:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_TIM_SET_COUNTER(motor->htimENC, 0);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2200      	movs	r2, #0
 800747a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <MOTOR_setPIDVelocity>:
 *  Created on: Nov 20, 2023
 *      Author: minht
 */
#include "MOTOR_PID_CONTROL.h"
void MOTOR_setPIDVelocity(MOTOR_t* motor, float Kp, float Ki, float Kd, float Ts)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af00      	add	r7, sp, #0
 800748e:	6178      	str	r0, [r7, #20]
 8007490:	ed87 0a04 	vstr	s0, [r7, #16]
 8007494:	edc7 0a03 	vstr	s1, [r7, #12]
 8007498:	ed87 1a02 	vstr	s2, [r7, #8]
 800749c:	edc7 1a01 	vstr	s3, [r7, #4]
    PID_init(&motor->PIDVelocity, Kp, Ki, Kd, Ts);
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	edd7 1a01 	vldr	s3, [r7, #4]
 80074a6:	ed97 1a02 	vldr	s2, [r7, #8]
 80074aa:	edd7 0a03 	vldr	s1, [r7, #12]
 80074ae:	ed97 0a04 	vldr	s0, [r7, #16]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 f989 	bl	80077ca <PID_init>
}
 80074b8:	bf00      	nop
 80074ba:	3718      	adds	r7, #24
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <MOTOR_setPIDPosition>:
void MOTOR_setPIDPosition(MOTOR_t* motor, float Kp, float Ki, float Kd, float Ts)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b086      	sub	sp, #24
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6178      	str	r0, [r7, #20]
 80074c8:	ed87 0a04 	vstr	s0, [r7, #16]
 80074cc:	edc7 0a03 	vstr	s1, [r7, #12]
 80074d0:	ed87 1a02 	vstr	s2, [r7, #8]
 80074d4:	edc7 1a01 	vstr	s3, [r7, #4]
    PID_init(&motor->PIDPosition, Kp, Ki, Kd, Ts);
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	3348      	adds	r3, #72	; 0x48
 80074dc:	edd7 1a01 	vldr	s3, [r7, #4]
 80074e0:	ed97 1a02 	vldr	s2, [r7, #8]
 80074e4:	edd7 0a03 	vldr	s1, [r7, #12]
 80074e8:	ed97 0a04 	vldr	s0, [r7, #16]
 80074ec:	4618      	mov	r0, r3
 80074ee:	f000 f96c 	bl	80077ca <PID_init>
}
 80074f2:	bf00      	nop
 80074f4:	3718      	adds	r7, #24
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
	...

080074fc <MOTOR_setOutputRange>:
void MOTOR_setOutputRange(MOTOR_t* motor, float OutMin, float OutMax)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	ed87 0a02 	vstr	s0, [r7, #8]
 8007508:	edc7 0a01 	vstr	s1, [r7, #4]
    PID_setOutputRange(&motor->PIDPosition, -900, 900);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	3348      	adds	r3, #72	; 0x48
 8007510:	eddf 0a09 	vldr	s1, [pc, #36]	; 8007538 <MOTOR_setOutputRange+0x3c>
 8007514:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800753c <MOTOR_setOutputRange+0x40>
 8007518:	4618      	mov	r0, r3
 800751a:	f000 f993 	bl	8007844 <PID_setOutputRange>
    PID_setOutputRange(&motor->PIDVelocity, OutMin, OutMax);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	edd7 0a01 	vldr	s1, [r7, #4]
 8007524:	ed97 0a02 	vldr	s0, [r7, #8]
 8007528:	4618      	mov	r0, r3
 800752a:	f000 f98b 	bl	8007844 <PID_setOutputRange>
}
 800752e:	bf00      	nop
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	44610000 	.word	0x44610000
 800753c:	c4610000 	.word	0xc4610000

08007540 <MOTOR_setWindupRange>:
void MOTOR_setWindupRange(MOTOR_t* motor, float OutMin, float OutMax)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	ed87 0a02 	vstr	s0, [r7, #8]
 800754c:	edc7 0a01 	vstr	s1, [r7, #4]
    PID_setWindupGain(&motor->PIDVelocity, 0);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8007574 <MOTOR_setWindupRange+0x34>
 8007556:	4618      	mov	r0, r3
 8007558:	f000 f99c 	bl	8007894 <PID_setWindupGain>
    PID_setWindupRange(&motor->PIDVelocity, OutMin, OutMax);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	edd7 0a01 	vldr	s1, [r7, #4]
 8007562:	ed97 0a02 	vldr	s0, [r7, #8]
 8007566:	4618      	mov	r0, r3
 8007568:	f000 f980 	bl	800786c <PID_setWindupRange>
}
 800756c:	bf00      	nop
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	00000000 	.word	0x00000000

08007578 <MOTOR_setAngle>:
void MOTOR_setAngle(MOTOR_t* motor, float setAngle)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	ed87 0a00 	vstr	s0, [r7]
    motor->setPoint = setAngle * motor->ratioJoint;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 800758a:	edd7 7a00 	vldr	s15, [r7]
 800758e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
}
 8007598:	bf00      	nop
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <MOTOR_runAngle>:
void MOTOR_runAngle(MOTOR_t* motor)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
//        PID_clear(&motor->PIDPosition);
//        PID_clear(&motor->PIDVelocity);
//        motor->preSetPoint = motor->setPoint;
//    }

    MOTOR_driver_readPosAndSpeed(motor->motorDriver, &motor->pos, &motor->speed, motor->PIDPosition.Sample_time);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f103 01ac 	add.w	r1, r3, #172	; 0xac
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80075c4:	eeb0 0a67 	vmov.f32	s0, s15
 80075c8:	f7ff fee0 	bl	800738c <MOTOR_driver_readPosAndSpeed>
    motor->error = motor->setPoint - motor->pos;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 80075d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
//    motor->error = motor->setPoint;

    // PD+PI controller
    PID_compute(&motor->PIDPosition, motor->error);  // tinh PD
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80075ee:	eeb0 0a67 	vmov.f32	s0, s15
 80075f2:	4610      	mov	r0, r2
 80075f4:	f000 f95e 	bl	80078b4 <PID_compute>
    PID_compute(&motor->PIDVelocity, motor->PIDPosition.Output - motor->speed); // tinh PI
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8007606:	ee77 7a67 	vsub.f32	s15, s14, s15
 800760a:	eeb0 0a67 	vmov.f32	s0, s15
 800760e:	4610      	mov	r0, r2
 8007610:	f000 f950 	bl	80078b4 <PID_compute>

    if (fabs(motor->pos) < motor->limitPos)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 800761a:	eeb0 7ae7 	vabs.f32	s14, s15
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8007624:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800762c:	d50b      	bpl.n	8007646 <MOTOR_runAngle+0xa2>
    {
        MOTOR_driver_rotary(motor->motorDriver, motor->PIDVelocity.Output);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800763a:	eeb0 0a67 	vmov.f32	s0, s15
 800763e:	4610      	mov	r0, r2
 8007640:	f7ff fdc5 	bl	80071ce <MOTOR_driver_rotary>
    }
    else
    {
        MOTOR_driver_rotary(motor->motorDriver, 0);
    }
}
 8007644:	e007      	b.n	8007656 <MOTOR_runAngle+0xb2>
        MOTOR_driver_rotary(motor->motorDriver, 0);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800764c:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8007660 <MOTOR_runAngle+0xbc>
 8007650:	4618      	mov	r0, r3
 8007652:	f7ff fdbc 	bl	80071ce <MOTOR_driver_rotary>
}
 8007656:	bf00      	nop
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	00000000 	.word	0x00000000

08007664 <MOTOR_init>:
void MOTOR_init(MOTOR_t* motor, MOTOR_DRIVER_t *motorDriver,float ratio, uint16_t pinSetHome, float limitPos)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	6178      	str	r0, [r7, #20]
 800766c:	6139      	str	r1, [r7, #16]
 800766e:	ed87 0a03 	vstr	s0, [r7, #12]
 8007672:	4613      	mov	r3, r2
 8007674:	edc7 0a01 	vstr	s1, [r7, #4]
 8007678:	817b      	strh	r3, [r7, #10]
    motor->ratioJoint = ratio;
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    motor->pinSetHome = 0;
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	2200      	movs	r2, #0
 8007686:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
    motor->setPoint = 0;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f04f 0200 	mov.w	r2, #0
 8007690:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    motor->preSetPoint = 0;
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	f04f 0200 	mov.w	r2, #0
 800769a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    motor->error = 0;
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	f04f 0200 	mov.w	r2, #0
 80076a4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    motor->preError = 0;
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	f04f 0200 	mov.w	r2, #0
 80076ae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    motor->pos = 0;
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	f04f 0200 	mov.w	r2, #0
 80076b8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    motor->speed = 0;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	f04f 0200 	mov.w	r2, #0
 80076c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    motor->motorDriver = motorDriver;
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	693a      	ldr	r2, [r7, #16]
 80076ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    motor->limitPos = limitPos * motor->ratioJoint;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 80076d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80076d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
    MOTOR_driver_setupPWM(motor->motorDriver, motor->motorDriver->htimPWM, motor->motorDriver->PWM_CH1, motor->motorDriver->PWM_CH2);
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076ee:	6859      	ldr	r1, [r3, #4]
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076f6:	691a      	ldr	r2, [r3, #16]
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	f7ff fd20 	bl	8007144 <MOTOR_driver_setupPWM>
    MOTOR_driver_setupENCODER(motor->motorDriver, motor->motorDriver->htimENC, motor->motorDriver->ENC_CH1, motor->motorDriver->ENC_CH2);
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007710:	6819      	ldr	r1, [r3, #0]
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007718:	699a      	ldr	r2, [r3, #24]
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007720:	69db      	ldr	r3, [r3, #28]
 8007722:	f7ff fd33 	bl	800718c <MOTOR_driver_setupENCODER>
}
 8007726:	bf00      	nop
 8007728:	3718      	adds	r7, #24
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <MOTOR_reset>:
void MOTOR_reset(MOTOR_t* motor)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b082      	sub	sp, #8
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
    motor->pinSetHome = 0;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
    motor->setPoint = 0;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f04f 0200 	mov.w	r2, #0
 8007744:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    motor->preSetPoint = 0;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f04f 0200 	mov.w	r2, #0
 800774e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    motor->error = 0;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f04f 0200 	mov.w	r2, #0
 8007758:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    motor->preError = 0;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f04f 0200 	mov.w	r2, #0
 8007762:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    motor->pos = 0;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f04f 0200 	mov.w	r2, #0
 800776c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    motor->speed = 0;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f04f 0200 	mov.w	r2, #0
 8007776:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    MOTOR_driver_reset(motor->motorDriver);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007780:	4618      	mov	r0, r3
 8007782:	f7ff fe5b 	bl	800743c <MOTOR_driver_reset>
    PID_clear(&motor->PIDPosition);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	3348      	adds	r3, #72	; 0x48
 800778a:	4618      	mov	r0, r3
 800778c:	f000 f83c 	bl	8007808 <PID_clear>
    PID_clear(&motor->PIDVelocity);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4618      	mov	r0, r3
 8007794:	f000 f838 	bl	8007808 <PID_clear>
}
 8007798:	bf00      	nop
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <MOTOR_getPos>:
float MOTOR_getPos(MOTOR_t* motor)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
	return motor->pos/motor->ratioJoint;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 80077b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80077b8:	eef0 7a66 	vmov.f32	s15, s13
}
 80077bc:	eeb0 0a67 	vmov.f32	s0, s15
 80077c0:	370c      	adds	r7, #12
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <PID_init>:
 *      Author: minht
 */
#include "PID.h"
#include "stdint.h"
void PID_init(PID_TypeDef* pid, float Kp, float Ki, float Kd, float Sample_time)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b086      	sub	sp, #24
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6178      	str	r0, [r7, #20]
 80077d2:	ed87 0a04 	vstr	s0, [r7, #16]
 80077d6:	edc7 0a03 	vstr	s1, [r7, #12]
 80077da:	ed87 1a02 	vstr	s2, [r7, #8]
 80077de:	edc7 1a01 	vstr	s3, [r7, #4]
	PID_clear(pid);
 80077e2:	6978      	ldr	r0, [r7, #20]
 80077e4:	f000 f810 	bl	8007808 <PID_clear>
	pid->Kp = Kp;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	693a      	ldr	r2, [r7, #16]
 80077ec:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	605a      	str	r2, [r3, #4]
	pid->Kd = Kd;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	609a      	str	r2, [r3, #8]
	pid->Sample_time = Sample_time;
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	645a      	str	r2, [r3, #68]	; 0x44
}
 8007800:	bf00      	nop
 8007802:	3718      	adds	r7, #24
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <PID_clear>:
void PID_clear(PID_TypeDef* pid)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
	pid->PTerm = 0;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f04f 0200 	mov.w	r2, #0
 8007816:	61da      	str	r2, [r3, #28]
	pid->ITerm = 0;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f04f 0200 	mov.w	r2, #0
 800781e:	621a      	str	r2, [r3, #32]
	pid->DTerm = 0;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f04f 0200 	mov.w	r2, #0
 8007826:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Output = 0;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f04f 0200 	mov.w	r2, #0
 800782e:	639a      	str	r2, [r3, #56]	; 0x38
	pid->FeedbackWindup = 0;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f04f 0200 	mov.w	r2, #0
 8007836:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <PID_setOutputRange>:
void PID_setKp(PID_TypeDef* pid, float value) { pid->Kp = value; }
void PID_setKi(PID_TypeDef* pid, float value) { pid->Ki = value; }
void PID_setKd(PID_TypeDef* pid, float value) { pid->Kd = value; }
void PID_setSampleTime(PID_TypeDef* pid, float value) { pid->Sample_time = value; }
void PID_setOutputRange(PID_TypeDef* pid, float valueMin, float valueMax)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	ed87 0a02 	vstr	s0, [r7, #8]
 8007850:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->OutMax = valueMax;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	63da      	str	r2, [r3, #60]	; 0x3c
	pid->OutMin = valueMin;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007860:	bf00      	nop
 8007862:	3714      	adds	r7, #20
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <PID_setWindupRange>:
void PID_setWindupRange(PID_TypeDef* pid, float valueMin, float valueMax)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	ed87 0a02 	vstr	s0, [r7, #8]
 8007878:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->WindupMax = valueMax;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	629a      	str	r2, [r3, #40]	; 0x28
	pid->WindupMin = valueMin;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	68ba      	ldr	r2, [r7, #8]
 8007886:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007888:	bf00      	nop
 800788a:	3714      	adds	r7, #20
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <PID_setWindupGain>:
void PID_setWindupGain(PID_TypeDef* pid, float value)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	ed87 0a00 	vstr	s0, [r7]
	pid->Kb = value;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	60da      	str	r2, [r3, #12]
}
 80078a6:	bf00      	nop
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
	...

080078b4 <PID_compute>:
float PID_compute(PID_TypeDef* pid, float Error)
{
 80078b4:	b5b0      	push	{r4, r5, r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	ed87 0a00 	vstr	s0, [r7]

	pid->PTerm = pid->Kp * Error;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	ed93 7a00 	vldr	s14, [r3]
 80078c6:	edd7 7a00 	vldr	s15, [r7]
 80078ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	edc3 7a07 	vstr	s15, [r3, #28]

	pid->ITerm += ((Error + pid->Last_error)* pid->Ki * 0.5 + pid->FeedbackWindup * pid->Kb) * (pid->Sample_time / 1000.0);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	ed93 7a05 	vldr	s14, [r3, #20]
 80078da:	edd7 7a00 	vldr	s15, [r7]
 80078de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80078e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ec:	ee17 0a90 	vmov	r0, s15
 80078f0:	f7f8 fe2a 	bl	8000548 <__aeabi_f2d>
 80078f4:	f04f 0200 	mov.w	r2, #0
 80078f8:	4b75      	ldr	r3, [pc, #468]	; (8007ad0 <PID_compute+0x21c>)
 80078fa:	f7f8 fe7d 	bl	80005f8 <__aeabi_dmul>
 80078fe:	4602      	mov	r2, r0
 8007900:	460b      	mov	r3, r1
 8007902:	4614      	mov	r4, r2
 8007904:	461d      	mov	r5, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	edd3 7a03 	vldr	s15, [r3, #12]
 8007912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007916:	ee17 0a90 	vmov	r0, s15
 800791a:	f7f8 fe15 	bl	8000548 <__aeabi_f2d>
 800791e:	4602      	mov	r2, r0
 8007920:	460b      	mov	r3, r1
 8007922:	4620      	mov	r0, r4
 8007924:	4629      	mov	r1, r5
 8007926:	f7f8 fcb1 	bl	800028c <__adddf3>
 800792a:	4602      	mov	r2, r0
 800792c:	460b      	mov	r3, r1
 800792e:	4614      	mov	r4, r2
 8007930:	461d      	mov	r5, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007936:	4618      	mov	r0, r3
 8007938:	f7f8 fe06 	bl	8000548 <__aeabi_f2d>
 800793c:	f04f 0200 	mov.w	r2, #0
 8007940:	4b64      	ldr	r3, [pc, #400]	; (8007ad4 <PID_compute+0x220>)
 8007942:	f7f8 ff83 	bl	800084c <__aeabi_ddiv>
 8007946:	4602      	mov	r2, r0
 8007948:	460b      	mov	r3, r1
 800794a:	4620      	mov	r0, r4
 800794c:	4629      	mov	r1, r5
 800794e:	f7f8 fe53 	bl	80005f8 <__aeabi_dmul>
 8007952:	4602      	mov	r2, r0
 8007954:	460b      	mov	r3, r1
 8007956:	4614      	mov	r4, r2
 8007958:	461d      	mov	r5, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	4618      	mov	r0, r3
 8007960:	f7f8 fdf2 	bl	8000548 <__aeabi_f2d>
 8007964:	4602      	mov	r2, r0
 8007966:	460b      	mov	r3, r1
 8007968:	4620      	mov	r0, r4
 800796a:	4629      	mov	r1, r5
 800796c:	f7f8 fc8e 	bl	800028c <__adddf3>
 8007970:	4602      	mov	r2, r0
 8007972:	460b      	mov	r3, r1
 8007974:	4610      	mov	r0, r2
 8007976:	4619      	mov	r1, r3
 8007978:	f7f9 f936 	bl	8000be8 <__aeabi_d2f>
 800797c:	4602      	mov	r2, r0
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	621a      	str	r2, [r3, #32]
	if (pid->ITerm > pid->WindupMax) pid->ITerm = pid->WindupMax;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	ed93 7a08 	vldr	s14, [r3, #32]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800798e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007996:	dd04      	ble.n	80079a2 <PID_compute+0xee>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	621a      	str	r2, [r3, #32]
 80079a0:	e00e      	b.n	80079c0 <PID_compute+0x10c>
	else if (pid->ITerm < pid->WindupMin) pid->ITerm = pid->WindupMin;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	ed93 7a08 	vldr	s14, [r3, #32]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80079ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80079b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079b6:	d503      	bpl.n	80079c0 <PID_compute+0x10c>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	621a      	str	r2, [r3, #32]

	pid->Delta_error = Error - pid->Last_error;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	edd3 7a05 	vldr	s15, [r3, #20]
 80079c6:	ed97 7a00 	vldr	s14, [r7]
 80079ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->DTerm = pid->Kd * pid->Delta_error / (pid->Sample_time / 1000.0);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	ed93 7a02 	vldr	s14, [r3, #8]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80079e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079e4:	ee17 0a90 	vmov	r0, s15
 80079e8:	f7f8 fdae 	bl	8000548 <__aeabi_f2d>
 80079ec:	4604      	mov	r4, r0
 80079ee:	460d      	mov	r5, r1
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7f8 fda7 	bl	8000548 <__aeabi_f2d>
 80079fa:	f04f 0200 	mov.w	r2, #0
 80079fe:	4b35      	ldr	r3, [pc, #212]	; (8007ad4 <PID_compute+0x220>)
 8007a00:	f7f8 ff24 	bl	800084c <__aeabi_ddiv>
 8007a04:	4602      	mov	r2, r0
 8007a06:	460b      	mov	r3, r1
 8007a08:	4620      	mov	r0, r4
 8007a0a:	4629      	mov	r1, r5
 8007a0c:	f7f8 ff1e 	bl	800084c <__aeabi_ddiv>
 8007a10:	4602      	mov	r2, r0
 8007a12:	460b      	mov	r3, r1
 8007a14:	4610      	mov	r0, r2
 8007a16:	4619      	mov	r1, r3
 8007a18:	f7f9 f8e6 	bl	8000be8 <__aeabi_d2f>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Last_error = Error;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	683a      	ldr	r2, [r7, #0]
 8007a26:	615a      	str	r2, [r3, #20]

	pid->Output = pid->PTerm + pid->ITerm + pid->DTerm;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	ed93 7a07 	vldr	s14, [r3, #28]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	edd3 7a08 	vldr	s15, [r3, #32]
 8007a34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8007a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	if (pid->Output > pid->OutMax)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8007a54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a5c:	dd0f      	ble.n	8007a7e <PID_compute+0x1ca>
	{
		pid->FeedbackWindup = pid->Output - pid->OutMax;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8007a6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		pid->Output = pid->OutMax;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	639a      	str	r2, [r3, #56]	; 0x38
 8007a7c:	e01e      	b.n	8007abc <PID_compute+0x208>
	}
	else if (pid->Output < pid->OutMin)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8007a8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a92:	d50f      	bpl.n	8007ab4 <PID_compute+0x200>
	{
		pid->FeedbackWindup = pid->Output - pid->OutMin;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8007aa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		pid->Output = pid->OutMin;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	639a      	str	r2, [r3, #56]	; 0x38
 8007ab2:	e003      	b.n	8007abc <PID_compute+0x208>
	}
	else
	{
		pid->FeedbackWindup = 0;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f04f 0200 	mov.w	r2, #0
 8007aba:	631a      	str	r2, [r3, #48]	; 0x30
	}
	return pid->Output;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac0:	ee07 3a90 	vmov	s15, r3
}
 8007ac4:	eeb0 0a67 	vmov.f32	s0, s15
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bdb0      	pop	{r4, r5, r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	3fe00000 	.word	0x3fe00000
 8007ad4:	408f4000 	.word	0x408f4000

08007ad8 <__errno>:
 8007ad8:	4b01      	ldr	r3, [pc, #4]	; (8007ae0 <__errno+0x8>)
 8007ada:	6818      	ldr	r0, [r3, #0]
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	200000f0 	.word	0x200000f0

08007ae4 <__libc_init_array>:
 8007ae4:	b570      	push	{r4, r5, r6, lr}
 8007ae6:	4d0d      	ldr	r5, [pc, #52]	; (8007b1c <__libc_init_array+0x38>)
 8007ae8:	4c0d      	ldr	r4, [pc, #52]	; (8007b20 <__libc_init_array+0x3c>)
 8007aea:	1b64      	subs	r4, r4, r5
 8007aec:	10a4      	asrs	r4, r4, #2
 8007aee:	2600      	movs	r6, #0
 8007af0:	42a6      	cmp	r6, r4
 8007af2:	d109      	bne.n	8007b08 <__libc_init_array+0x24>
 8007af4:	4d0b      	ldr	r5, [pc, #44]	; (8007b24 <__libc_init_array+0x40>)
 8007af6:	4c0c      	ldr	r4, [pc, #48]	; (8007b28 <__libc_init_array+0x44>)
 8007af8:	f005 f8ec 	bl	800ccd4 <_init>
 8007afc:	1b64      	subs	r4, r4, r5
 8007afe:	10a4      	asrs	r4, r4, #2
 8007b00:	2600      	movs	r6, #0
 8007b02:	42a6      	cmp	r6, r4
 8007b04:	d105      	bne.n	8007b12 <__libc_init_array+0x2e>
 8007b06:	bd70      	pop	{r4, r5, r6, pc}
 8007b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b0c:	4798      	blx	r3
 8007b0e:	3601      	adds	r6, #1
 8007b10:	e7ee      	b.n	8007af0 <__libc_init_array+0xc>
 8007b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b16:	4798      	blx	r3
 8007b18:	3601      	adds	r6, #1
 8007b1a:	e7f2      	b.n	8007b02 <__libc_init_array+0x1e>
 8007b1c:	0800d234 	.word	0x0800d234
 8007b20:	0800d234 	.word	0x0800d234
 8007b24:	0800d234 	.word	0x0800d234
 8007b28:	0800d238 	.word	0x0800d238

08007b2c <memset>:
 8007b2c:	4402      	add	r2, r0
 8007b2e:	4603      	mov	r3, r0
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d100      	bne.n	8007b36 <memset+0xa>
 8007b34:	4770      	bx	lr
 8007b36:	f803 1b01 	strb.w	r1, [r3], #1
 8007b3a:	e7f9      	b.n	8007b30 <memset+0x4>

08007b3c <__cvt>:
 8007b3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b40:	ec55 4b10 	vmov	r4, r5, d0
 8007b44:	2d00      	cmp	r5, #0
 8007b46:	460e      	mov	r6, r1
 8007b48:	4619      	mov	r1, r3
 8007b4a:	462b      	mov	r3, r5
 8007b4c:	bfbb      	ittet	lt
 8007b4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007b52:	461d      	movlt	r5, r3
 8007b54:	2300      	movge	r3, #0
 8007b56:	232d      	movlt	r3, #45	; 0x2d
 8007b58:	700b      	strb	r3, [r1, #0]
 8007b5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007b60:	4691      	mov	r9, r2
 8007b62:	f023 0820 	bic.w	r8, r3, #32
 8007b66:	bfbc      	itt	lt
 8007b68:	4622      	movlt	r2, r4
 8007b6a:	4614      	movlt	r4, r2
 8007b6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b70:	d005      	beq.n	8007b7e <__cvt+0x42>
 8007b72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007b76:	d100      	bne.n	8007b7a <__cvt+0x3e>
 8007b78:	3601      	adds	r6, #1
 8007b7a:	2102      	movs	r1, #2
 8007b7c:	e000      	b.n	8007b80 <__cvt+0x44>
 8007b7e:	2103      	movs	r1, #3
 8007b80:	ab03      	add	r3, sp, #12
 8007b82:	9301      	str	r3, [sp, #4]
 8007b84:	ab02      	add	r3, sp, #8
 8007b86:	9300      	str	r3, [sp, #0]
 8007b88:	ec45 4b10 	vmov	d0, r4, r5
 8007b8c:	4653      	mov	r3, sl
 8007b8e:	4632      	mov	r2, r6
 8007b90:	f001 fe66 	bl	8009860 <_dtoa_r>
 8007b94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007b98:	4607      	mov	r7, r0
 8007b9a:	d102      	bne.n	8007ba2 <__cvt+0x66>
 8007b9c:	f019 0f01 	tst.w	r9, #1
 8007ba0:	d022      	beq.n	8007be8 <__cvt+0xac>
 8007ba2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ba6:	eb07 0906 	add.w	r9, r7, r6
 8007baa:	d110      	bne.n	8007bce <__cvt+0x92>
 8007bac:	783b      	ldrb	r3, [r7, #0]
 8007bae:	2b30      	cmp	r3, #48	; 0x30
 8007bb0:	d10a      	bne.n	8007bc8 <__cvt+0x8c>
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	4629      	mov	r1, r5
 8007bba:	f7f8 ff85 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bbe:	b918      	cbnz	r0, 8007bc8 <__cvt+0x8c>
 8007bc0:	f1c6 0601 	rsb	r6, r6, #1
 8007bc4:	f8ca 6000 	str.w	r6, [sl]
 8007bc8:	f8da 3000 	ldr.w	r3, [sl]
 8007bcc:	4499      	add	r9, r3
 8007bce:	2200      	movs	r2, #0
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	4629      	mov	r1, r5
 8007bd6:	f7f8 ff77 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bda:	b108      	cbz	r0, 8007be0 <__cvt+0xa4>
 8007bdc:	f8cd 900c 	str.w	r9, [sp, #12]
 8007be0:	2230      	movs	r2, #48	; 0x30
 8007be2:	9b03      	ldr	r3, [sp, #12]
 8007be4:	454b      	cmp	r3, r9
 8007be6:	d307      	bcc.n	8007bf8 <__cvt+0xbc>
 8007be8:	9b03      	ldr	r3, [sp, #12]
 8007bea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bec:	1bdb      	subs	r3, r3, r7
 8007bee:	4638      	mov	r0, r7
 8007bf0:	6013      	str	r3, [r2, #0]
 8007bf2:	b004      	add	sp, #16
 8007bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bf8:	1c59      	adds	r1, r3, #1
 8007bfa:	9103      	str	r1, [sp, #12]
 8007bfc:	701a      	strb	r2, [r3, #0]
 8007bfe:	e7f0      	b.n	8007be2 <__cvt+0xa6>

08007c00 <__exponent>:
 8007c00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c02:	4603      	mov	r3, r0
 8007c04:	2900      	cmp	r1, #0
 8007c06:	bfb8      	it	lt
 8007c08:	4249      	neglt	r1, r1
 8007c0a:	f803 2b02 	strb.w	r2, [r3], #2
 8007c0e:	bfb4      	ite	lt
 8007c10:	222d      	movlt	r2, #45	; 0x2d
 8007c12:	222b      	movge	r2, #43	; 0x2b
 8007c14:	2909      	cmp	r1, #9
 8007c16:	7042      	strb	r2, [r0, #1]
 8007c18:	dd2a      	ble.n	8007c70 <__exponent+0x70>
 8007c1a:	f10d 0407 	add.w	r4, sp, #7
 8007c1e:	46a4      	mov	ip, r4
 8007c20:	270a      	movs	r7, #10
 8007c22:	46a6      	mov	lr, r4
 8007c24:	460a      	mov	r2, r1
 8007c26:	fb91 f6f7 	sdiv	r6, r1, r7
 8007c2a:	fb07 1516 	mls	r5, r7, r6, r1
 8007c2e:	3530      	adds	r5, #48	; 0x30
 8007c30:	2a63      	cmp	r2, #99	; 0x63
 8007c32:	f104 34ff 	add.w	r4, r4, #4294967295
 8007c36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007c3a:	4631      	mov	r1, r6
 8007c3c:	dcf1      	bgt.n	8007c22 <__exponent+0x22>
 8007c3e:	3130      	adds	r1, #48	; 0x30
 8007c40:	f1ae 0502 	sub.w	r5, lr, #2
 8007c44:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007c48:	1c44      	adds	r4, r0, #1
 8007c4a:	4629      	mov	r1, r5
 8007c4c:	4561      	cmp	r1, ip
 8007c4e:	d30a      	bcc.n	8007c66 <__exponent+0x66>
 8007c50:	f10d 0209 	add.w	r2, sp, #9
 8007c54:	eba2 020e 	sub.w	r2, r2, lr
 8007c58:	4565      	cmp	r5, ip
 8007c5a:	bf88      	it	hi
 8007c5c:	2200      	movhi	r2, #0
 8007c5e:	4413      	add	r3, r2
 8007c60:	1a18      	subs	r0, r3, r0
 8007c62:	b003      	add	sp, #12
 8007c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c6a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007c6e:	e7ed      	b.n	8007c4c <__exponent+0x4c>
 8007c70:	2330      	movs	r3, #48	; 0x30
 8007c72:	3130      	adds	r1, #48	; 0x30
 8007c74:	7083      	strb	r3, [r0, #2]
 8007c76:	70c1      	strb	r1, [r0, #3]
 8007c78:	1d03      	adds	r3, r0, #4
 8007c7a:	e7f1      	b.n	8007c60 <__exponent+0x60>

08007c7c <_printf_float>:
 8007c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c80:	ed2d 8b02 	vpush	{d8}
 8007c84:	b08d      	sub	sp, #52	; 0x34
 8007c86:	460c      	mov	r4, r1
 8007c88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007c8c:	4616      	mov	r6, r2
 8007c8e:	461f      	mov	r7, r3
 8007c90:	4605      	mov	r5, r0
 8007c92:	f002 ff43 	bl	800ab1c <_localeconv_r>
 8007c96:	f8d0 a000 	ldr.w	sl, [r0]
 8007c9a:	4650      	mov	r0, sl
 8007c9c:	f7f8 fa98 	bl	80001d0 <strlen>
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ca4:	6823      	ldr	r3, [r4, #0]
 8007ca6:	9305      	str	r3, [sp, #20]
 8007ca8:	f8d8 3000 	ldr.w	r3, [r8]
 8007cac:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007cb0:	3307      	adds	r3, #7
 8007cb2:	f023 0307 	bic.w	r3, r3, #7
 8007cb6:	f103 0208 	add.w	r2, r3, #8
 8007cba:	f8c8 2000 	str.w	r2, [r8]
 8007cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007cc6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007cca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007cce:	9307      	str	r3, [sp, #28]
 8007cd0:	f8cd 8018 	str.w	r8, [sp, #24]
 8007cd4:	ee08 0a10 	vmov	s16, r0
 8007cd8:	4b9f      	ldr	r3, [pc, #636]	; (8007f58 <_printf_float+0x2dc>)
 8007cda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cde:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce2:	f7f8 ff23 	bl	8000b2c <__aeabi_dcmpun>
 8007ce6:	bb88      	cbnz	r0, 8007d4c <_printf_float+0xd0>
 8007ce8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cec:	4b9a      	ldr	r3, [pc, #616]	; (8007f58 <_printf_float+0x2dc>)
 8007cee:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf2:	f7f8 fefd 	bl	8000af0 <__aeabi_dcmple>
 8007cf6:	bb48      	cbnz	r0, 8007d4c <_printf_float+0xd0>
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	4640      	mov	r0, r8
 8007cfe:	4649      	mov	r1, r9
 8007d00:	f7f8 feec 	bl	8000adc <__aeabi_dcmplt>
 8007d04:	b110      	cbz	r0, 8007d0c <_printf_float+0x90>
 8007d06:	232d      	movs	r3, #45	; 0x2d
 8007d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d0c:	4b93      	ldr	r3, [pc, #588]	; (8007f5c <_printf_float+0x2e0>)
 8007d0e:	4894      	ldr	r0, [pc, #592]	; (8007f60 <_printf_float+0x2e4>)
 8007d10:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007d14:	bf94      	ite	ls
 8007d16:	4698      	movls	r8, r3
 8007d18:	4680      	movhi	r8, r0
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	6123      	str	r3, [r4, #16]
 8007d1e:	9b05      	ldr	r3, [sp, #20]
 8007d20:	f023 0204 	bic.w	r2, r3, #4
 8007d24:	6022      	str	r2, [r4, #0]
 8007d26:	f04f 0900 	mov.w	r9, #0
 8007d2a:	9700      	str	r7, [sp, #0]
 8007d2c:	4633      	mov	r3, r6
 8007d2e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007d30:	4621      	mov	r1, r4
 8007d32:	4628      	mov	r0, r5
 8007d34:	f000 f9d8 	bl	80080e8 <_printf_common>
 8007d38:	3001      	adds	r0, #1
 8007d3a:	f040 8090 	bne.w	8007e5e <_printf_float+0x1e2>
 8007d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d42:	b00d      	add	sp, #52	; 0x34
 8007d44:	ecbd 8b02 	vpop	{d8}
 8007d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d4c:	4642      	mov	r2, r8
 8007d4e:	464b      	mov	r3, r9
 8007d50:	4640      	mov	r0, r8
 8007d52:	4649      	mov	r1, r9
 8007d54:	f7f8 feea 	bl	8000b2c <__aeabi_dcmpun>
 8007d58:	b140      	cbz	r0, 8007d6c <_printf_float+0xf0>
 8007d5a:	464b      	mov	r3, r9
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	bfbc      	itt	lt
 8007d60:	232d      	movlt	r3, #45	; 0x2d
 8007d62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d66:	487f      	ldr	r0, [pc, #508]	; (8007f64 <_printf_float+0x2e8>)
 8007d68:	4b7f      	ldr	r3, [pc, #508]	; (8007f68 <_printf_float+0x2ec>)
 8007d6a:	e7d1      	b.n	8007d10 <_printf_float+0x94>
 8007d6c:	6863      	ldr	r3, [r4, #4]
 8007d6e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007d72:	9206      	str	r2, [sp, #24]
 8007d74:	1c5a      	adds	r2, r3, #1
 8007d76:	d13f      	bne.n	8007df8 <_printf_float+0x17c>
 8007d78:	2306      	movs	r3, #6
 8007d7a:	6063      	str	r3, [r4, #4]
 8007d7c:	9b05      	ldr	r3, [sp, #20]
 8007d7e:	6861      	ldr	r1, [r4, #4]
 8007d80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007d84:	2300      	movs	r3, #0
 8007d86:	9303      	str	r3, [sp, #12]
 8007d88:	ab0a      	add	r3, sp, #40	; 0x28
 8007d8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007d8e:	ab09      	add	r3, sp, #36	; 0x24
 8007d90:	ec49 8b10 	vmov	d0, r8, r9
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	6022      	str	r2, [r4, #0]
 8007d98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	f7ff fecd 	bl	8007b3c <__cvt>
 8007da2:	9b06      	ldr	r3, [sp, #24]
 8007da4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007da6:	2b47      	cmp	r3, #71	; 0x47
 8007da8:	4680      	mov	r8, r0
 8007daa:	d108      	bne.n	8007dbe <_printf_float+0x142>
 8007dac:	1cc8      	adds	r0, r1, #3
 8007dae:	db02      	blt.n	8007db6 <_printf_float+0x13a>
 8007db0:	6863      	ldr	r3, [r4, #4]
 8007db2:	4299      	cmp	r1, r3
 8007db4:	dd41      	ble.n	8007e3a <_printf_float+0x1be>
 8007db6:	f1ab 0b02 	sub.w	fp, fp, #2
 8007dba:	fa5f fb8b 	uxtb.w	fp, fp
 8007dbe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007dc2:	d820      	bhi.n	8007e06 <_printf_float+0x18a>
 8007dc4:	3901      	subs	r1, #1
 8007dc6:	465a      	mov	r2, fp
 8007dc8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007dcc:	9109      	str	r1, [sp, #36]	; 0x24
 8007dce:	f7ff ff17 	bl	8007c00 <__exponent>
 8007dd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dd4:	1813      	adds	r3, r2, r0
 8007dd6:	2a01      	cmp	r2, #1
 8007dd8:	4681      	mov	r9, r0
 8007dda:	6123      	str	r3, [r4, #16]
 8007ddc:	dc02      	bgt.n	8007de4 <_printf_float+0x168>
 8007dde:	6822      	ldr	r2, [r4, #0]
 8007de0:	07d2      	lsls	r2, r2, #31
 8007de2:	d501      	bpl.n	8007de8 <_printf_float+0x16c>
 8007de4:	3301      	adds	r3, #1
 8007de6:	6123      	str	r3, [r4, #16]
 8007de8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d09c      	beq.n	8007d2a <_printf_float+0xae>
 8007df0:	232d      	movs	r3, #45	; 0x2d
 8007df2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007df6:	e798      	b.n	8007d2a <_printf_float+0xae>
 8007df8:	9a06      	ldr	r2, [sp, #24]
 8007dfa:	2a47      	cmp	r2, #71	; 0x47
 8007dfc:	d1be      	bne.n	8007d7c <_printf_float+0x100>
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1bc      	bne.n	8007d7c <_printf_float+0x100>
 8007e02:	2301      	movs	r3, #1
 8007e04:	e7b9      	b.n	8007d7a <_printf_float+0xfe>
 8007e06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007e0a:	d118      	bne.n	8007e3e <_printf_float+0x1c2>
 8007e0c:	2900      	cmp	r1, #0
 8007e0e:	6863      	ldr	r3, [r4, #4]
 8007e10:	dd0b      	ble.n	8007e2a <_printf_float+0x1ae>
 8007e12:	6121      	str	r1, [r4, #16]
 8007e14:	b913      	cbnz	r3, 8007e1c <_printf_float+0x1a0>
 8007e16:	6822      	ldr	r2, [r4, #0]
 8007e18:	07d0      	lsls	r0, r2, #31
 8007e1a:	d502      	bpl.n	8007e22 <_printf_float+0x1a6>
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	440b      	add	r3, r1
 8007e20:	6123      	str	r3, [r4, #16]
 8007e22:	65a1      	str	r1, [r4, #88]	; 0x58
 8007e24:	f04f 0900 	mov.w	r9, #0
 8007e28:	e7de      	b.n	8007de8 <_printf_float+0x16c>
 8007e2a:	b913      	cbnz	r3, 8007e32 <_printf_float+0x1b6>
 8007e2c:	6822      	ldr	r2, [r4, #0]
 8007e2e:	07d2      	lsls	r2, r2, #31
 8007e30:	d501      	bpl.n	8007e36 <_printf_float+0x1ba>
 8007e32:	3302      	adds	r3, #2
 8007e34:	e7f4      	b.n	8007e20 <_printf_float+0x1a4>
 8007e36:	2301      	movs	r3, #1
 8007e38:	e7f2      	b.n	8007e20 <_printf_float+0x1a4>
 8007e3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e40:	4299      	cmp	r1, r3
 8007e42:	db05      	blt.n	8007e50 <_printf_float+0x1d4>
 8007e44:	6823      	ldr	r3, [r4, #0]
 8007e46:	6121      	str	r1, [r4, #16]
 8007e48:	07d8      	lsls	r0, r3, #31
 8007e4a:	d5ea      	bpl.n	8007e22 <_printf_float+0x1a6>
 8007e4c:	1c4b      	adds	r3, r1, #1
 8007e4e:	e7e7      	b.n	8007e20 <_printf_float+0x1a4>
 8007e50:	2900      	cmp	r1, #0
 8007e52:	bfd4      	ite	le
 8007e54:	f1c1 0202 	rsble	r2, r1, #2
 8007e58:	2201      	movgt	r2, #1
 8007e5a:	4413      	add	r3, r2
 8007e5c:	e7e0      	b.n	8007e20 <_printf_float+0x1a4>
 8007e5e:	6823      	ldr	r3, [r4, #0]
 8007e60:	055a      	lsls	r2, r3, #21
 8007e62:	d407      	bmi.n	8007e74 <_printf_float+0x1f8>
 8007e64:	6923      	ldr	r3, [r4, #16]
 8007e66:	4642      	mov	r2, r8
 8007e68:	4631      	mov	r1, r6
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	47b8      	blx	r7
 8007e6e:	3001      	adds	r0, #1
 8007e70:	d12c      	bne.n	8007ecc <_printf_float+0x250>
 8007e72:	e764      	b.n	8007d3e <_printf_float+0xc2>
 8007e74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e78:	f240 80e0 	bls.w	800803c <_printf_float+0x3c0>
 8007e7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e80:	2200      	movs	r2, #0
 8007e82:	2300      	movs	r3, #0
 8007e84:	f7f8 fe20 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	d034      	beq.n	8007ef6 <_printf_float+0x27a>
 8007e8c:	4a37      	ldr	r2, [pc, #220]	; (8007f6c <_printf_float+0x2f0>)
 8007e8e:	2301      	movs	r3, #1
 8007e90:	4631      	mov	r1, r6
 8007e92:	4628      	mov	r0, r5
 8007e94:	47b8      	blx	r7
 8007e96:	3001      	adds	r0, #1
 8007e98:	f43f af51 	beq.w	8007d3e <_printf_float+0xc2>
 8007e9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	db02      	blt.n	8007eaa <_printf_float+0x22e>
 8007ea4:	6823      	ldr	r3, [r4, #0]
 8007ea6:	07d8      	lsls	r0, r3, #31
 8007ea8:	d510      	bpl.n	8007ecc <_printf_float+0x250>
 8007eaa:	ee18 3a10 	vmov	r3, s16
 8007eae:	4652      	mov	r2, sl
 8007eb0:	4631      	mov	r1, r6
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	47b8      	blx	r7
 8007eb6:	3001      	adds	r0, #1
 8007eb8:	f43f af41 	beq.w	8007d3e <_printf_float+0xc2>
 8007ebc:	f04f 0800 	mov.w	r8, #0
 8007ec0:	f104 091a 	add.w	r9, r4, #26
 8007ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	4543      	cmp	r3, r8
 8007eca:	dc09      	bgt.n	8007ee0 <_printf_float+0x264>
 8007ecc:	6823      	ldr	r3, [r4, #0]
 8007ece:	079b      	lsls	r3, r3, #30
 8007ed0:	f100 8105 	bmi.w	80080de <_printf_float+0x462>
 8007ed4:	68e0      	ldr	r0, [r4, #12]
 8007ed6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ed8:	4298      	cmp	r0, r3
 8007eda:	bfb8      	it	lt
 8007edc:	4618      	movlt	r0, r3
 8007ede:	e730      	b.n	8007d42 <_printf_float+0xc6>
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	464a      	mov	r2, r9
 8007ee4:	4631      	mov	r1, r6
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	47b8      	blx	r7
 8007eea:	3001      	adds	r0, #1
 8007eec:	f43f af27 	beq.w	8007d3e <_printf_float+0xc2>
 8007ef0:	f108 0801 	add.w	r8, r8, #1
 8007ef4:	e7e6      	b.n	8007ec4 <_printf_float+0x248>
 8007ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	dc39      	bgt.n	8007f70 <_printf_float+0x2f4>
 8007efc:	4a1b      	ldr	r2, [pc, #108]	; (8007f6c <_printf_float+0x2f0>)
 8007efe:	2301      	movs	r3, #1
 8007f00:	4631      	mov	r1, r6
 8007f02:	4628      	mov	r0, r5
 8007f04:	47b8      	blx	r7
 8007f06:	3001      	adds	r0, #1
 8007f08:	f43f af19 	beq.w	8007d3e <_printf_float+0xc2>
 8007f0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f10:	4313      	orrs	r3, r2
 8007f12:	d102      	bne.n	8007f1a <_printf_float+0x29e>
 8007f14:	6823      	ldr	r3, [r4, #0]
 8007f16:	07d9      	lsls	r1, r3, #31
 8007f18:	d5d8      	bpl.n	8007ecc <_printf_float+0x250>
 8007f1a:	ee18 3a10 	vmov	r3, s16
 8007f1e:	4652      	mov	r2, sl
 8007f20:	4631      	mov	r1, r6
 8007f22:	4628      	mov	r0, r5
 8007f24:	47b8      	blx	r7
 8007f26:	3001      	adds	r0, #1
 8007f28:	f43f af09 	beq.w	8007d3e <_printf_float+0xc2>
 8007f2c:	f04f 0900 	mov.w	r9, #0
 8007f30:	f104 0a1a 	add.w	sl, r4, #26
 8007f34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f36:	425b      	negs	r3, r3
 8007f38:	454b      	cmp	r3, r9
 8007f3a:	dc01      	bgt.n	8007f40 <_printf_float+0x2c4>
 8007f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f3e:	e792      	b.n	8007e66 <_printf_float+0x1ea>
 8007f40:	2301      	movs	r3, #1
 8007f42:	4652      	mov	r2, sl
 8007f44:	4631      	mov	r1, r6
 8007f46:	4628      	mov	r0, r5
 8007f48:	47b8      	blx	r7
 8007f4a:	3001      	adds	r0, #1
 8007f4c:	f43f aef7 	beq.w	8007d3e <_printf_float+0xc2>
 8007f50:	f109 0901 	add.w	r9, r9, #1
 8007f54:	e7ee      	b.n	8007f34 <_printf_float+0x2b8>
 8007f56:	bf00      	nop
 8007f58:	7fefffff 	.word	0x7fefffff
 8007f5c:	0800cd74 	.word	0x0800cd74
 8007f60:	0800cd78 	.word	0x0800cd78
 8007f64:	0800cd80 	.word	0x0800cd80
 8007f68:	0800cd7c 	.word	0x0800cd7c
 8007f6c:	0800d179 	.word	0x0800d179
 8007f70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f74:	429a      	cmp	r2, r3
 8007f76:	bfa8      	it	ge
 8007f78:	461a      	movge	r2, r3
 8007f7a:	2a00      	cmp	r2, #0
 8007f7c:	4691      	mov	r9, r2
 8007f7e:	dc37      	bgt.n	8007ff0 <_printf_float+0x374>
 8007f80:	f04f 0b00 	mov.w	fp, #0
 8007f84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f88:	f104 021a 	add.w	r2, r4, #26
 8007f8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f8e:	9305      	str	r3, [sp, #20]
 8007f90:	eba3 0309 	sub.w	r3, r3, r9
 8007f94:	455b      	cmp	r3, fp
 8007f96:	dc33      	bgt.n	8008000 <_printf_float+0x384>
 8007f98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	db3b      	blt.n	8008018 <_printf_float+0x39c>
 8007fa0:	6823      	ldr	r3, [r4, #0]
 8007fa2:	07da      	lsls	r2, r3, #31
 8007fa4:	d438      	bmi.n	8008018 <_printf_float+0x39c>
 8007fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fa8:	9a05      	ldr	r2, [sp, #20]
 8007faa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fac:	1a9a      	subs	r2, r3, r2
 8007fae:	eba3 0901 	sub.w	r9, r3, r1
 8007fb2:	4591      	cmp	r9, r2
 8007fb4:	bfa8      	it	ge
 8007fb6:	4691      	movge	r9, r2
 8007fb8:	f1b9 0f00 	cmp.w	r9, #0
 8007fbc:	dc35      	bgt.n	800802a <_printf_float+0x3ae>
 8007fbe:	f04f 0800 	mov.w	r8, #0
 8007fc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fc6:	f104 0a1a 	add.w	sl, r4, #26
 8007fca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fce:	1a9b      	subs	r3, r3, r2
 8007fd0:	eba3 0309 	sub.w	r3, r3, r9
 8007fd4:	4543      	cmp	r3, r8
 8007fd6:	f77f af79 	ble.w	8007ecc <_printf_float+0x250>
 8007fda:	2301      	movs	r3, #1
 8007fdc:	4652      	mov	r2, sl
 8007fde:	4631      	mov	r1, r6
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	47b8      	blx	r7
 8007fe4:	3001      	adds	r0, #1
 8007fe6:	f43f aeaa 	beq.w	8007d3e <_printf_float+0xc2>
 8007fea:	f108 0801 	add.w	r8, r8, #1
 8007fee:	e7ec      	b.n	8007fca <_printf_float+0x34e>
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	4631      	mov	r1, r6
 8007ff4:	4642      	mov	r2, r8
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	47b8      	blx	r7
 8007ffa:	3001      	adds	r0, #1
 8007ffc:	d1c0      	bne.n	8007f80 <_printf_float+0x304>
 8007ffe:	e69e      	b.n	8007d3e <_printf_float+0xc2>
 8008000:	2301      	movs	r3, #1
 8008002:	4631      	mov	r1, r6
 8008004:	4628      	mov	r0, r5
 8008006:	9205      	str	r2, [sp, #20]
 8008008:	47b8      	blx	r7
 800800a:	3001      	adds	r0, #1
 800800c:	f43f ae97 	beq.w	8007d3e <_printf_float+0xc2>
 8008010:	9a05      	ldr	r2, [sp, #20]
 8008012:	f10b 0b01 	add.w	fp, fp, #1
 8008016:	e7b9      	b.n	8007f8c <_printf_float+0x310>
 8008018:	ee18 3a10 	vmov	r3, s16
 800801c:	4652      	mov	r2, sl
 800801e:	4631      	mov	r1, r6
 8008020:	4628      	mov	r0, r5
 8008022:	47b8      	blx	r7
 8008024:	3001      	adds	r0, #1
 8008026:	d1be      	bne.n	8007fa6 <_printf_float+0x32a>
 8008028:	e689      	b.n	8007d3e <_printf_float+0xc2>
 800802a:	9a05      	ldr	r2, [sp, #20]
 800802c:	464b      	mov	r3, r9
 800802e:	4442      	add	r2, r8
 8008030:	4631      	mov	r1, r6
 8008032:	4628      	mov	r0, r5
 8008034:	47b8      	blx	r7
 8008036:	3001      	adds	r0, #1
 8008038:	d1c1      	bne.n	8007fbe <_printf_float+0x342>
 800803a:	e680      	b.n	8007d3e <_printf_float+0xc2>
 800803c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800803e:	2a01      	cmp	r2, #1
 8008040:	dc01      	bgt.n	8008046 <_printf_float+0x3ca>
 8008042:	07db      	lsls	r3, r3, #31
 8008044:	d538      	bpl.n	80080b8 <_printf_float+0x43c>
 8008046:	2301      	movs	r3, #1
 8008048:	4642      	mov	r2, r8
 800804a:	4631      	mov	r1, r6
 800804c:	4628      	mov	r0, r5
 800804e:	47b8      	blx	r7
 8008050:	3001      	adds	r0, #1
 8008052:	f43f ae74 	beq.w	8007d3e <_printf_float+0xc2>
 8008056:	ee18 3a10 	vmov	r3, s16
 800805a:	4652      	mov	r2, sl
 800805c:	4631      	mov	r1, r6
 800805e:	4628      	mov	r0, r5
 8008060:	47b8      	blx	r7
 8008062:	3001      	adds	r0, #1
 8008064:	f43f ae6b 	beq.w	8007d3e <_printf_float+0xc2>
 8008068:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800806c:	2200      	movs	r2, #0
 800806e:	2300      	movs	r3, #0
 8008070:	f7f8 fd2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008074:	b9d8      	cbnz	r0, 80080ae <_printf_float+0x432>
 8008076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008078:	f108 0201 	add.w	r2, r8, #1
 800807c:	3b01      	subs	r3, #1
 800807e:	4631      	mov	r1, r6
 8008080:	4628      	mov	r0, r5
 8008082:	47b8      	blx	r7
 8008084:	3001      	adds	r0, #1
 8008086:	d10e      	bne.n	80080a6 <_printf_float+0x42a>
 8008088:	e659      	b.n	8007d3e <_printf_float+0xc2>
 800808a:	2301      	movs	r3, #1
 800808c:	4652      	mov	r2, sl
 800808e:	4631      	mov	r1, r6
 8008090:	4628      	mov	r0, r5
 8008092:	47b8      	blx	r7
 8008094:	3001      	adds	r0, #1
 8008096:	f43f ae52 	beq.w	8007d3e <_printf_float+0xc2>
 800809a:	f108 0801 	add.w	r8, r8, #1
 800809e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080a0:	3b01      	subs	r3, #1
 80080a2:	4543      	cmp	r3, r8
 80080a4:	dcf1      	bgt.n	800808a <_printf_float+0x40e>
 80080a6:	464b      	mov	r3, r9
 80080a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80080ac:	e6dc      	b.n	8007e68 <_printf_float+0x1ec>
 80080ae:	f04f 0800 	mov.w	r8, #0
 80080b2:	f104 0a1a 	add.w	sl, r4, #26
 80080b6:	e7f2      	b.n	800809e <_printf_float+0x422>
 80080b8:	2301      	movs	r3, #1
 80080ba:	4642      	mov	r2, r8
 80080bc:	e7df      	b.n	800807e <_printf_float+0x402>
 80080be:	2301      	movs	r3, #1
 80080c0:	464a      	mov	r2, r9
 80080c2:	4631      	mov	r1, r6
 80080c4:	4628      	mov	r0, r5
 80080c6:	47b8      	blx	r7
 80080c8:	3001      	adds	r0, #1
 80080ca:	f43f ae38 	beq.w	8007d3e <_printf_float+0xc2>
 80080ce:	f108 0801 	add.w	r8, r8, #1
 80080d2:	68e3      	ldr	r3, [r4, #12]
 80080d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080d6:	1a5b      	subs	r3, r3, r1
 80080d8:	4543      	cmp	r3, r8
 80080da:	dcf0      	bgt.n	80080be <_printf_float+0x442>
 80080dc:	e6fa      	b.n	8007ed4 <_printf_float+0x258>
 80080de:	f04f 0800 	mov.w	r8, #0
 80080e2:	f104 0919 	add.w	r9, r4, #25
 80080e6:	e7f4      	b.n	80080d2 <_printf_float+0x456>

080080e8 <_printf_common>:
 80080e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080ec:	4616      	mov	r6, r2
 80080ee:	4699      	mov	r9, r3
 80080f0:	688a      	ldr	r2, [r1, #8]
 80080f2:	690b      	ldr	r3, [r1, #16]
 80080f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080f8:	4293      	cmp	r3, r2
 80080fa:	bfb8      	it	lt
 80080fc:	4613      	movlt	r3, r2
 80080fe:	6033      	str	r3, [r6, #0]
 8008100:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008104:	4607      	mov	r7, r0
 8008106:	460c      	mov	r4, r1
 8008108:	b10a      	cbz	r2, 800810e <_printf_common+0x26>
 800810a:	3301      	adds	r3, #1
 800810c:	6033      	str	r3, [r6, #0]
 800810e:	6823      	ldr	r3, [r4, #0]
 8008110:	0699      	lsls	r1, r3, #26
 8008112:	bf42      	ittt	mi
 8008114:	6833      	ldrmi	r3, [r6, #0]
 8008116:	3302      	addmi	r3, #2
 8008118:	6033      	strmi	r3, [r6, #0]
 800811a:	6825      	ldr	r5, [r4, #0]
 800811c:	f015 0506 	ands.w	r5, r5, #6
 8008120:	d106      	bne.n	8008130 <_printf_common+0x48>
 8008122:	f104 0a19 	add.w	sl, r4, #25
 8008126:	68e3      	ldr	r3, [r4, #12]
 8008128:	6832      	ldr	r2, [r6, #0]
 800812a:	1a9b      	subs	r3, r3, r2
 800812c:	42ab      	cmp	r3, r5
 800812e:	dc26      	bgt.n	800817e <_printf_common+0x96>
 8008130:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008134:	1e13      	subs	r3, r2, #0
 8008136:	6822      	ldr	r2, [r4, #0]
 8008138:	bf18      	it	ne
 800813a:	2301      	movne	r3, #1
 800813c:	0692      	lsls	r2, r2, #26
 800813e:	d42b      	bmi.n	8008198 <_printf_common+0xb0>
 8008140:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008144:	4649      	mov	r1, r9
 8008146:	4638      	mov	r0, r7
 8008148:	47c0      	blx	r8
 800814a:	3001      	adds	r0, #1
 800814c:	d01e      	beq.n	800818c <_printf_common+0xa4>
 800814e:	6823      	ldr	r3, [r4, #0]
 8008150:	68e5      	ldr	r5, [r4, #12]
 8008152:	6832      	ldr	r2, [r6, #0]
 8008154:	f003 0306 	and.w	r3, r3, #6
 8008158:	2b04      	cmp	r3, #4
 800815a:	bf08      	it	eq
 800815c:	1aad      	subeq	r5, r5, r2
 800815e:	68a3      	ldr	r3, [r4, #8]
 8008160:	6922      	ldr	r2, [r4, #16]
 8008162:	bf0c      	ite	eq
 8008164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008168:	2500      	movne	r5, #0
 800816a:	4293      	cmp	r3, r2
 800816c:	bfc4      	itt	gt
 800816e:	1a9b      	subgt	r3, r3, r2
 8008170:	18ed      	addgt	r5, r5, r3
 8008172:	2600      	movs	r6, #0
 8008174:	341a      	adds	r4, #26
 8008176:	42b5      	cmp	r5, r6
 8008178:	d11a      	bne.n	80081b0 <_printf_common+0xc8>
 800817a:	2000      	movs	r0, #0
 800817c:	e008      	b.n	8008190 <_printf_common+0xa8>
 800817e:	2301      	movs	r3, #1
 8008180:	4652      	mov	r2, sl
 8008182:	4649      	mov	r1, r9
 8008184:	4638      	mov	r0, r7
 8008186:	47c0      	blx	r8
 8008188:	3001      	adds	r0, #1
 800818a:	d103      	bne.n	8008194 <_printf_common+0xac>
 800818c:	f04f 30ff 	mov.w	r0, #4294967295
 8008190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008194:	3501      	adds	r5, #1
 8008196:	e7c6      	b.n	8008126 <_printf_common+0x3e>
 8008198:	18e1      	adds	r1, r4, r3
 800819a:	1c5a      	adds	r2, r3, #1
 800819c:	2030      	movs	r0, #48	; 0x30
 800819e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081a2:	4422      	add	r2, r4
 80081a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081ac:	3302      	adds	r3, #2
 80081ae:	e7c7      	b.n	8008140 <_printf_common+0x58>
 80081b0:	2301      	movs	r3, #1
 80081b2:	4622      	mov	r2, r4
 80081b4:	4649      	mov	r1, r9
 80081b6:	4638      	mov	r0, r7
 80081b8:	47c0      	blx	r8
 80081ba:	3001      	adds	r0, #1
 80081bc:	d0e6      	beq.n	800818c <_printf_common+0xa4>
 80081be:	3601      	adds	r6, #1
 80081c0:	e7d9      	b.n	8008176 <_printf_common+0x8e>
	...

080081c4 <_printf_i>:
 80081c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081c8:	7e0f      	ldrb	r7, [r1, #24]
 80081ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80081cc:	2f78      	cmp	r7, #120	; 0x78
 80081ce:	4691      	mov	r9, r2
 80081d0:	4680      	mov	r8, r0
 80081d2:	460c      	mov	r4, r1
 80081d4:	469a      	mov	sl, r3
 80081d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80081da:	d807      	bhi.n	80081ec <_printf_i+0x28>
 80081dc:	2f62      	cmp	r7, #98	; 0x62
 80081de:	d80a      	bhi.n	80081f6 <_printf_i+0x32>
 80081e0:	2f00      	cmp	r7, #0
 80081e2:	f000 80d8 	beq.w	8008396 <_printf_i+0x1d2>
 80081e6:	2f58      	cmp	r7, #88	; 0x58
 80081e8:	f000 80a3 	beq.w	8008332 <_printf_i+0x16e>
 80081ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081f4:	e03a      	b.n	800826c <_printf_i+0xa8>
 80081f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081fa:	2b15      	cmp	r3, #21
 80081fc:	d8f6      	bhi.n	80081ec <_printf_i+0x28>
 80081fe:	a101      	add	r1, pc, #4	; (adr r1, 8008204 <_printf_i+0x40>)
 8008200:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008204:	0800825d 	.word	0x0800825d
 8008208:	08008271 	.word	0x08008271
 800820c:	080081ed 	.word	0x080081ed
 8008210:	080081ed 	.word	0x080081ed
 8008214:	080081ed 	.word	0x080081ed
 8008218:	080081ed 	.word	0x080081ed
 800821c:	08008271 	.word	0x08008271
 8008220:	080081ed 	.word	0x080081ed
 8008224:	080081ed 	.word	0x080081ed
 8008228:	080081ed 	.word	0x080081ed
 800822c:	080081ed 	.word	0x080081ed
 8008230:	0800837d 	.word	0x0800837d
 8008234:	080082a1 	.word	0x080082a1
 8008238:	0800835f 	.word	0x0800835f
 800823c:	080081ed 	.word	0x080081ed
 8008240:	080081ed 	.word	0x080081ed
 8008244:	0800839f 	.word	0x0800839f
 8008248:	080081ed 	.word	0x080081ed
 800824c:	080082a1 	.word	0x080082a1
 8008250:	080081ed 	.word	0x080081ed
 8008254:	080081ed 	.word	0x080081ed
 8008258:	08008367 	.word	0x08008367
 800825c:	682b      	ldr	r3, [r5, #0]
 800825e:	1d1a      	adds	r2, r3, #4
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	602a      	str	r2, [r5, #0]
 8008264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008268:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800826c:	2301      	movs	r3, #1
 800826e:	e0a3      	b.n	80083b8 <_printf_i+0x1f4>
 8008270:	6820      	ldr	r0, [r4, #0]
 8008272:	6829      	ldr	r1, [r5, #0]
 8008274:	0606      	lsls	r6, r0, #24
 8008276:	f101 0304 	add.w	r3, r1, #4
 800827a:	d50a      	bpl.n	8008292 <_printf_i+0xce>
 800827c:	680e      	ldr	r6, [r1, #0]
 800827e:	602b      	str	r3, [r5, #0]
 8008280:	2e00      	cmp	r6, #0
 8008282:	da03      	bge.n	800828c <_printf_i+0xc8>
 8008284:	232d      	movs	r3, #45	; 0x2d
 8008286:	4276      	negs	r6, r6
 8008288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800828c:	485e      	ldr	r0, [pc, #376]	; (8008408 <_printf_i+0x244>)
 800828e:	230a      	movs	r3, #10
 8008290:	e019      	b.n	80082c6 <_printf_i+0x102>
 8008292:	680e      	ldr	r6, [r1, #0]
 8008294:	602b      	str	r3, [r5, #0]
 8008296:	f010 0f40 	tst.w	r0, #64	; 0x40
 800829a:	bf18      	it	ne
 800829c:	b236      	sxthne	r6, r6
 800829e:	e7ef      	b.n	8008280 <_printf_i+0xbc>
 80082a0:	682b      	ldr	r3, [r5, #0]
 80082a2:	6820      	ldr	r0, [r4, #0]
 80082a4:	1d19      	adds	r1, r3, #4
 80082a6:	6029      	str	r1, [r5, #0]
 80082a8:	0601      	lsls	r1, r0, #24
 80082aa:	d501      	bpl.n	80082b0 <_printf_i+0xec>
 80082ac:	681e      	ldr	r6, [r3, #0]
 80082ae:	e002      	b.n	80082b6 <_printf_i+0xf2>
 80082b0:	0646      	lsls	r6, r0, #25
 80082b2:	d5fb      	bpl.n	80082ac <_printf_i+0xe8>
 80082b4:	881e      	ldrh	r6, [r3, #0]
 80082b6:	4854      	ldr	r0, [pc, #336]	; (8008408 <_printf_i+0x244>)
 80082b8:	2f6f      	cmp	r7, #111	; 0x6f
 80082ba:	bf0c      	ite	eq
 80082bc:	2308      	moveq	r3, #8
 80082be:	230a      	movne	r3, #10
 80082c0:	2100      	movs	r1, #0
 80082c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082c6:	6865      	ldr	r5, [r4, #4]
 80082c8:	60a5      	str	r5, [r4, #8]
 80082ca:	2d00      	cmp	r5, #0
 80082cc:	bfa2      	ittt	ge
 80082ce:	6821      	ldrge	r1, [r4, #0]
 80082d0:	f021 0104 	bicge.w	r1, r1, #4
 80082d4:	6021      	strge	r1, [r4, #0]
 80082d6:	b90e      	cbnz	r6, 80082dc <_printf_i+0x118>
 80082d8:	2d00      	cmp	r5, #0
 80082da:	d04d      	beq.n	8008378 <_printf_i+0x1b4>
 80082dc:	4615      	mov	r5, r2
 80082de:	fbb6 f1f3 	udiv	r1, r6, r3
 80082e2:	fb03 6711 	mls	r7, r3, r1, r6
 80082e6:	5dc7      	ldrb	r7, [r0, r7]
 80082e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80082ec:	4637      	mov	r7, r6
 80082ee:	42bb      	cmp	r3, r7
 80082f0:	460e      	mov	r6, r1
 80082f2:	d9f4      	bls.n	80082de <_printf_i+0x11a>
 80082f4:	2b08      	cmp	r3, #8
 80082f6:	d10b      	bne.n	8008310 <_printf_i+0x14c>
 80082f8:	6823      	ldr	r3, [r4, #0]
 80082fa:	07de      	lsls	r6, r3, #31
 80082fc:	d508      	bpl.n	8008310 <_printf_i+0x14c>
 80082fe:	6923      	ldr	r3, [r4, #16]
 8008300:	6861      	ldr	r1, [r4, #4]
 8008302:	4299      	cmp	r1, r3
 8008304:	bfde      	ittt	le
 8008306:	2330      	movle	r3, #48	; 0x30
 8008308:	f805 3c01 	strble.w	r3, [r5, #-1]
 800830c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008310:	1b52      	subs	r2, r2, r5
 8008312:	6122      	str	r2, [r4, #16]
 8008314:	f8cd a000 	str.w	sl, [sp]
 8008318:	464b      	mov	r3, r9
 800831a:	aa03      	add	r2, sp, #12
 800831c:	4621      	mov	r1, r4
 800831e:	4640      	mov	r0, r8
 8008320:	f7ff fee2 	bl	80080e8 <_printf_common>
 8008324:	3001      	adds	r0, #1
 8008326:	d14c      	bne.n	80083c2 <_printf_i+0x1fe>
 8008328:	f04f 30ff 	mov.w	r0, #4294967295
 800832c:	b004      	add	sp, #16
 800832e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008332:	4835      	ldr	r0, [pc, #212]	; (8008408 <_printf_i+0x244>)
 8008334:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008338:	6829      	ldr	r1, [r5, #0]
 800833a:	6823      	ldr	r3, [r4, #0]
 800833c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008340:	6029      	str	r1, [r5, #0]
 8008342:	061d      	lsls	r5, r3, #24
 8008344:	d514      	bpl.n	8008370 <_printf_i+0x1ac>
 8008346:	07df      	lsls	r7, r3, #31
 8008348:	bf44      	itt	mi
 800834a:	f043 0320 	orrmi.w	r3, r3, #32
 800834e:	6023      	strmi	r3, [r4, #0]
 8008350:	b91e      	cbnz	r6, 800835a <_printf_i+0x196>
 8008352:	6823      	ldr	r3, [r4, #0]
 8008354:	f023 0320 	bic.w	r3, r3, #32
 8008358:	6023      	str	r3, [r4, #0]
 800835a:	2310      	movs	r3, #16
 800835c:	e7b0      	b.n	80082c0 <_printf_i+0xfc>
 800835e:	6823      	ldr	r3, [r4, #0]
 8008360:	f043 0320 	orr.w	r3, r3, #32
 8008364:	6023      	str	r3, [r4, #0]
 8008366:	2378      	movs	r3, #120	; 0x78
 8008368:	4828      	ldr	r0, [pc, #160]	; (800840c <_printf_i+0x248>)
 800836a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800836e:	e7e3      	b.n	8008338 <_printf_i+0x174>
 8008370:	0659      	lsls	r1, r3, #25
 8008372:	bf48      	it	mi
 8008374:	b2b6      	uxthmi	r6, r6
 8008376:	e7e6      	b.n	8008346 <_printf_i+0x182>
 8008378:	4615      	mov	r5, r2
 800837a:	e7bb      	b.n	80082f4 <_printf_i+0x130>
 800837c:	682b      	ldr	r3, [r5, #0]
 800837e:	6826      	ldr	r6, [r4, #0]
 8008380:	6961      	ldr	r1, [r4, #20]
 8008382:	1d18      	adds	r0, r3, #4
 8008384:	6028      	str	r0, [r5, #0]
 8008386:	0635      	lsls	r5, r6, #24
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	d501      	bpl.n	8008390 <_printf_i+0x1cc>
 800838c:	6019      	str	r1, [r3, #0]
 800838e:	e002      	b.n	8008396 <_printf_i+0x1d2>
 8008390:	0670      	lsls	r0, r6, #25
 8008392:	d5fb      	bpl.n	800838c <_printf_i+0x1c8>
 8008394:	8019      	strh	r1, [r3, #0]
 8008396:	2300      	movs	r3, #0
 8008398:	6123      	str	r3, [r4, #16]
 800839a:	4615      	mov	r5, r2
 800839c:	e7ba      	b.n	8008314 <_printf_i+0x150>
 800839e:	682b      	ldr	r3, [r5, #0]
 80083a0:	1d1a      	adds	r2, r3, #4
 80083a2:	602a      	str	r2, [r5, #0]
 80083a4:	681d      	ldr	r5, [r3, #0]
 80083a6:	6862      	ldr	r2, [r4, #4]
 80083a8:	2100      	movs	r1, #0
 80083aa:	4628      	mov	r0, r5
 80083ac:	f7f7 ff18 	bl	80001e0 <memchr>
 80083b0:	b108      	cbz	r0, 80083b6 <_printf_i+0x1f2>
 80083b2:	1b40      	subs	r0, r0, r5
 80083b4:	6060      	str	r0, [r4, #4]
 80083b6:	6863      	ldr	r3, [r4, #4]
 80083b8:	6123      	str	r3, [r4, #16]
 80083ba:	2300      	movs	r3, #0
 80083bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083c0:	e7a8      	b.n	8008314 <_printf_i+0x150>
 80083c2:	6923      	ldr	r3, [r4, #16]
 80083c4:	462a      	mov	r2, r5
 80083c6:	4649      	mov	r1, r9
 80083c8:	4640      	mov	r0, r8
 80083ca:	47d0      	blx	sl
 80083cc:	3001      	adds	r0, #1
 80083ce:	d0ab      	beq.n	8008328 <_printf_i+0x164>
 80083d0:	6823      	ldr	r3, [r4, #0]
 80083d2:	079b      	lsls	r3, r3, #30
 80083d4:	d413      	bmi.n	80083fe <_printf_i+0x23a>
 80083d6:	68e0      	ldr	r0, [r4, #12]
 80083d8:	9b03      	ldr	r3, [sp, #12]
 80083da:	4298      	cmp	r0, r3
 80083dc:	bfb8      	it	lt
 80083de:	4618      	movlt	r0, r3
 80083e0:	e7a4      	b.n	800832c <_printf_i+0x168>
 80083e2:	2301      	movs	r3, #1
 80083e4:	4632      	mov	r2, r6
 80083e6:	4649      	mov	r1, r9
 80083e8:	4640      	mov	r0, r8
 80083ea:	47d0      	blx	sl
 80083ec:	3001      	adds	r0, #1
 80083ee:	d09b      	beq.n	8008328 <_printf_i+0x164>
 80083f0:	3501      	adds	r5, #1
 80083f2:	68e3      	ldr	r3, [r4, #12]
 80083f4:	9903      	ldr	r1, [sp, #12]
 80083f6:	1a5b      	subs	r3, r3, r1
 80083f8:	42ab      	cmp	r3, r5
 80083fa:	dcf2      	bgt.n	80083e2 <_printf_i+0x21e>
 80083fc:	e7eb      	b.n	80083d6 <_printf_i+0x212>
 80083fe:	2500      	movs	r5, #0
 8008400:	f104 0619 	add.w	r6, r4, #25
 8008404:	e7f5      	b.n	80083f2 <_printf_i+0x22e>
 8008406:	bf00      	nop
 8008408:	0800cd84 	.word	0x0800cd84
 800840c:	0800cd95 	.word	0x0800cd95

08008410 <_scanf_float>:
 8008410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008414:	b087      	sub	sp, #28
 8008416:	4617      	mov	r7, r2
 8008418:	9303      	str	r3, [sp, #12]
 800841a:	688b      	ldr	r3, [r1, #8]
 800841c:	1e5a      	subs	r2, r3, #1
 800841e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008422:	bf83      	ittte	hi
 8008424:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008428:	195b      	addhi	r3, r3, r5
 800842a:	9302      	strhi	r3, [sp, #8]
 800842c:	2300      	movls	r3, #0
 800842e:	bf86      	itte	hi
 8008430:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008434:	608b      	strhi	r3, [r1, #8]
 8008436:	9302      	strls	r3, [sp, #8]
 8008438:	680b      	ldr	r3, [r1, #0]
 800843a:	468b      	mov	fp, r1
 800843c:	2500      	movs	r5, #0
 800843e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008442:	f84b 3b1c 	str.w	r3, [fp], #28
 8008446:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800844a:	4680      	mov	r8, r0
 800844c:	460c      	mov	r4, r1
 800844e:	465e      	mov	r6, fp
 8008450:	46aa      	mov	sl, r5
 8008452:	46a9      	mov	r9, r5
 8008454:	9501      	str	r5, [sp, #4]
 8008456:	68a2      	ldr	r2, [r4, #8]
 8008458:	b152      	cbz	r2, 8008470 <_scanf_float+0x60>
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	2b4e      	cmp	r3, #78	; 0x4e
 8008460:	d864      	bhi.n	800852c <_scanf_float+0x11c>
 8008462:	2b40      	cmp	r3, #64	; 0x40
 8008464:	d83c      	bhi.n	80084e0 <_scanf_float+0xd0>
 8008466:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800846a:	b2c8      	uxtb	r0, r1
 800846c:	280e      	cmp	r0, #14
 800846e:	d93a      	bls.n	80084e6 <_scanf_float+0xd6>
 8008470:	f1b9 0f00 	cmp.w	r9, #0
 8008474:	d003      	beq.n	800847e <_scanf_float+0x6e>
 8008476:	6823      	ldr	r3, [r4, #0]
 8008478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800847c:	6023      	str	r3, [r4, #0]
 800847e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008482:	f1ba 0f01 	cmp.w	sl, #1
 8008486:	f200 8113 	bhi.w	80086b0 <_scanf_float+0x2a0>
 800848a:	455e      	cmp	r6, fp
 800848c:	f200 8105 	bhi.w	800869a <_scanf_float+0x28a>
 8008490:	2501      	movs	r5, #1
 8008492:	4628      	mov	r0, r5
 8008494:	b007      	add	sp, #28
 8008496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800849a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800849e:	2a0d      	cmp	r2, #13
 80084a0:	d8e6      	bhi.n	8008470 <_scanf_float+0x60>
 80084a2:	a101      	add	r1, pc, #4	; (adr r1, 80084a8 <_scanf_float+0x98>)
 80084a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80084a8:	080085e7 	.word	0x080085e7
 80084ac:	08008471 	.word	0x08008471
 80084b0:	08008471 	.word	0x08008471
 80084b4:	08008471 	.word	0x08008471
 80084b8:	08008647 	.word	0x08008647
 80084bc:	0800861f 	.word	0x0800861f
 80084c0:	08008471 	.word	0x08008471
 80084c4:	08008471 	.word	0x08008471
 80084c8:	080085f5 	.word	0x080085f5
 80084cc:	08008471 	.word	0x08008471
 80084d0:	08008471 	.word	0x08008471
 80084d4:	08008471 	.word	0x08008471
 80084d8:	08008471 	.word	0x08008471
 80084dc:	080085ad 	.word	0x080085ad
 80084e0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80084e4:	e7db      	b.n	800849e <_scanf_float+0x8e>
 80084e6:	290e      	cmp	r1, #14
 80084e8:	d8c2      	bhi.n	8008470 <_scanf_float+0x60>
 80084ea:	a001      	add	r0, pc, #4	; (adr r0, 80084f0 <_scanf_float+0xe0>)
 80084ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80084f0:	0800859f 	.word	0x0800859f
 80084f4:	08008471 	.word	0x08008471
 80084f8:	0800859f 	.word	0x0800859f
 80084fc:	08008633 	.word	0x08008633
 8008500:	08008471 	.word	0x08008471
 8008504:	0800854d 	.word	0x0800854d
 8008508:	08008589 	.word	0x08008589
 800850c:	08008589 	.word	0x08008589
 8008510:	08008589 	.word	0x08008589
 8008514:	08008589 	.word	0x08008589
 8008518:	08008589 	.word	0x08008589
 800851c:	08008589 	.word	0x08008589
 8008520:	08008589 	.word	0x08008589
 8008524:	08008589 	.word	0x08008589
 8008528:	08008589 	.word	0x08008589
 800852c:	2b6e      	cmp	r3, #110	; 0x6e
 800852e:	d809      	bhi.n	8008544 <_scanf_float+0x134>
 8008530:	2b60      	cmp	r3, #96	; 0x60
 8008532:	d8b2      	bhi.n	800849a <_scanf_float+0x8a>
 8008534:	2b54      	cmp	r3, #84	; 0x54
 8008536:	d077      	beq.n	8008628 <_scanf_float+0x218>
 8008538:	2b59      	cmp	r3, #89	; 0x59
 800853a:	d199      	bne.n	8008470 <_scanf_float+0x60>
 800853c:	2d07      	cmp	r5, #7
 800853e:	d197      	bne.n	8008470 <_scanf_float+0x60>
 8008540:	2508      	movs	r5, #8
 8008542:	e029      	b.n	8008598 <_scanf_float+0x188>
 8008544:	2b74      	cmp	r3, #116	; 0x74
 8008546:	d06f      	beq.n	8008628 <_scanf_float+0x218>
 8008548:	2b79      	cmp	r3, #121	; 0x79
 800854a:	e7f6      	b.n	800853a <_scanf_float+0x12a>
 800854c:	6821      	ldr	r1, [r4, #0]
 800854e:	05c8      	lsls	r0, r1, #23
 8008550:	d51a      	bpl.n	8008588 <_scanf_float+0x178>
 8008552:	9b02      	ldr	r3, [sp, #8]
 8008554:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008558:	6021      	str	r1, [r4, #0]
 800855a:	f109 0901 	add.w	r9, r9, #1
 800855e:	b11b      	cbz	r3, 8008568 <_scanf_float+0x158>
 8008560:	3b01      	subs	r3, #1
 8008562:	3201      	adds	r2, #1
 8008564:	9302      	str	r3, [sp, #8]
 8008566:	60a2      	str	r2, [r4, #8]
 8008568:	68a3      	ldr	r3, [r4, #8]
 800856a:	3b01      	subs	r3, #1
 800856c:	60a3      	str	r3, [r4, #8]
 800856e:	6923      	ldr	r3, [r4, #16]
 8008570:	3301      	adds	r3, #1
 8008572:	6123      	str	r3, [r4, #16]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	3b01      	subs	r3, #1
 8008578:	2b00      	cmp	r3, #0
 800857a:	607b      	str	r3, [r7, #4]
 800857c:	f340 8084 	ble.w	8008688 <_scanf_float+0x278>
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	3301      	adds	r3, #1
 8008584:	603b      	str	r3, [r7, #0]
 8008586:	e766      	b.n	8008456 <_scanf_float+0x46>
 8008588:	eb1a 0f05 	cmn.w	sl, r5
 800858c:	f47f af70 	bne.w	8008470 <_scanf_float+0x60>
 8008590:	6822      	ldr	r2, [r4, #0]
 8008592:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008596:	6022      	str	r2, [r4, #0]
 8008598:	f806 3b01 	strb.w	r3, [r6], #1
 800859c:	e7e4      	b.n	8008568 <_scanf_float+0x158>
 800859e:	6822      	ldr	r2, [r4, #0]
 80085a0:	0610      	lsls	r0, r2, #24
 80085a2:	f57f af65 	bpl.w	8008470 <_scanf_float+0x60>
 80085a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085aa:	e7f4      	b.n	8008596 <_scanf_float+0x186>
 80085ac:	f1ba 0f00 	cmp.w	sl, #0
 80085b0:	d10e      	bne.n	80085d0 <_scanf_float+0x1c0>
 80085b2:	f1b9 0f00 	cmp.w	r9, #0
 80085b6:	d10e      	bne.n	80085d6 <_scanf_float+0x1c6>
 80085b8:	6822      	ldr	r2, [r4, #0]
 80085ba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80085be:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80085c2:	d108      	bne.n	80085d6 <_scanf_float+0x1c6>
 80085c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80085c8:	6022      	str	r2, [r4, #0]
 80085ca:	f04f 0a01 	mov.w	sl, #1
 80085ce:	e7e3      	b.n	8008598 <_scanf_float+0x188>
 80085d0:	f1ba 0f02 	cmp.w	sl, #2
 80085d4:	d055      	beq.n	8008682 <_scanf_float+0x272>
 80085d6:	2d01      	cmp	r5, #1
 80085d8:	d002      	beq.n	80085e0 <_scanf_float+0x1d0>
 80085da:	2d04      	cmp	r5, #4
 80085dc:	f47f af48 	bne.w	8008470 <_scanf_float+0x60>
 80085e0:	3501      	adds	r5, #1
 80085e2:	b2ed      	uxtb	r5, r5
 80085e4:	e7d8      	b.n	8008598 <_scanf_float+0x188>
 80085e6:	f1ba 0f01 	cmp.w	sl, #1
 80085ea:	f47f af41 	bne.w	8008470 <_scanf_float+0x60>
 80085ee:	f04f 0a02 	mov.w	sl, #2
 80085f2:	e7d1      	b.n	8008598 <_scanf_float+0x188>
 80085f4:	b97d      	cbnz	r5, 8008616 <_scanf_float+0x206>
 80085f6:	f1b9 0f00 	cmp.w	r9, #0
 80085fa:	f47f af3c 	bne.w	8008476 <_scanf_float+0x66>
 80085fe:	6822      	ldr	r2, [r4, #0]
 8008600:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008604:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008608:	f47f af39 	bne.w	800847e <_scanf_float+0x6e>
 800860c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008610:	6022      	str	r2, [r4, #0]
 8008612:	2501      	movs	r5, #1
 8008614:	e7c0      	b.n	8008598 <_scanf_float+0x188>
 8008616:	2d03      	cmp	r5, #3
 8008618:	d0e2      	beq.n	80085e0 <_scanf_float+0x1d0>
 800861a:	2d05      	cmp	r5, #5
 800861c:	e7de      	b.n	80085dc <_scanf_float+0x1cc>
 800861e:	2d02      	cmp	r5, #2
 8008620:	f47f af26 	bne.w	8008470 <_scanf_float+0x60>
 8008624:	2503      	movs	r5, #3
 8008626:	e7b7      	b.n	8008598 <_scanf_float+0x188>
 8008628:	2d06      	cmp	r5, #6
 800862a:	f47f af21 	bne.w	8008470 <_scanf_float+0x60>
 800862e:	2507      	movs	r5, #7
 8008630:	e7b2      	b.n	8008598 <_scanf_float+0x188>
 8008632:	6822      	ldr	r2, [r4, #0]
 8008634:	0591      	lsls	r1, r2, #22
 8008636:	f57f af1b 	bpl.w	8008470 <_scanf_float+0x60>
 800863a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800863e:	6022      	str	r2, [r4, #0]
 8008640:	f8cd 9004 	str.w	r9, [sp, #4]
 8008644:	e7a8      	b.n	8008598 <_scanf_float+0x188>
 8008646:	6822      	ldr	r2, [r4, #0]
 8008648:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800864c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008650:	d006      	beq.n	8008660 <_scanf_float+0x250>
 8008652:	0550      	lsls	r0, r2, #21
 8008654:	f57f af0c 	bpl.w	8008470 <_scanf_float+0x60>
 8008658:	f1b9 0f00 	cmp.w	r9, #0
 800865c:	f43f af0f 	beq.w	800847e <_scanf_float+0x6e>
 8008660:	0591      	lsls	r1, r2, #22
 8008662:	bf58      	it	pl
 8008664:	9901      	ldrpl	r1, [sp, #4]
 8008666:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800866a:	bf58      	it	pl
 800866c:	eba9 0101 	subpl.w	r1, r9, r1
 8008670:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008674:	bf58      	it	pl
 8008676:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800867a:	6022      	str	r2, [r4, #0]
 800867c:	f04f 0900 	mov.w	r9, #0
 8008680:	e78a      	b.n	8008598 <_scanf_float+0x188>
 8008682:	f04f 0a03 	mov.w	sl, #3
 8008686:	e787      	b.n	8008598 <_scanf_float+0x188>
 8008688:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800868c:	4639      	mov	r1, r7
 800868e:	4640      	mov	r0, r8
 8008690:	4798      	blx	r3
 8008692:	2800      	cmp	r0, #0
 8008694:	f43f aedf 	beq.w	8008456 <_scanf_float+0x46>
 8008698:	e6ea      	b.n	8008470 <_scanf_float+0x60>
 800869a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800869e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086a2:	463a      	mov	r2, r7
 80086a4:	4640      	mov	r0, r8
 80086a6:	4798      	blx	r3
 80086a8:	6923      	ldr	r3, [r4, #16]
 80086aa:	3b01      	subs	r3, #1
 80086ac:	6123      	str	r3, [r4, #16]
 80086ae:	e6ec      	b.n	800848a <_scanf_float+0x7a>
 80086b0:	1e6b      	subs	r3, r5, #1
 80086b2:	2b06      	cmp	r3, #6
 80086b4:	d825      	bhi.n	8008702 <_scanf_float+0x2f2>
 80086b6:	2d02      	cmp	r5, #2
 80086b8:	d836      	bhi.n	8008728 <_scanf_float+0x318>
 80086ba:	455e      	cmp	r6, fp
 80086bc:	f67f aee8 	bls.w	8008490 <_scanf_float+0x80>
 80086c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086c8:	463a      	mov	r2, r7
 80086ca:	4640      	mov	r0, r8
 80086cc:	4798      	blx	r3
 80086ce:	6923      	ldr	r3, [r4, #16]
 80086d0:	3b01      	subs	r3, #1
 80086d2:	6123      	str	r3, [r4, #16]
 80086d4:	e7f1      	b.n	80086ba <_scanf_float+0x2aa>
 80086d6:	9802      	ldr	r0, [sp, #8]
 80086d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086dc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80086e0:	9002      	str	r0, [sp, #8]
 80086e2:	463a      	mov	r2, r7
 80086e4:	4640      	mov	r0, r8
 80086e6:	4798      	blx	r3
 80086e8:	6923      	ldr	r3, [r4, #16]
 80086ea:	3b01      	subs	r3, #1
 80086ec:	6123      	str	r3, [r4, #16]
 80086ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086f2:	fa5f fa8a 	uxtb.w	sl, sl
 80086f6:	f1ba 0f02 	cmp.w	sl, #2
 80086fa:	d1ec      	bne.n	80086d6 <_scanf_float+0x2c6>
 80086fc:	3d03      	subs	r5, #3
 80086fe:	b2ed      	uxtb	r5, r5
 8008700:	1b76      	subs	r6, r6, r5
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	05da      	lsls	r2, r3, #23
 8008706:	d52f      	bpl.n	8008768 <_scanf_float+0x358>
 8008708:	055b      	lsls	r3, r3, #21
 800870a:	d510      	bpl.n	800872e <_scanf_float+0x31e>
 800870c:	455e      	cmp	r6, fp
 800870e:	f67f aebf 	bls.w	8008490 <_scanf_float+0x80>
 8008712:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008716:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800871a:	463a      	mov	r2, r7
 800871c:	4640      	mov	r0, r8
 800871e:	4798      	blx	r3
 8008720:	6923      	ldr	r3, [r4, #16]
 8008722:	3b01      	subs	r3, #1
 8008724:	6123      	str	r3, [r4, #16]
 8008726:	e7f1      	b.n	800870c <_scanf_float+0x2fc>
 8008728:	46aa      	mov	sl, r5
 800872a:	9602      	str	r6, [sp, #8]
 800872c:	e7df      	b.n	80086ee <_scanf_float+0x2de>
 800872e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008732:	6923      	ldr	r3, [r4, #16]
 8008734:	2965      	cmp	r1, #101	; 0x65
 8008736:	f103 33ff 	add.w	r3, r3, #4294967295
 800873a:	f106 35ff 	add.w	r5, r6, #4294967295
 800873e:	6123      	str	r3, [r4, #16]
 8008740:	d00c      	beq.n	800875c <_scanf_float+0x34c>
 8008742:	2945      	cmp	r1, #69	; 0x45
 8008744:	d00a      	beq.n	800875c <_scanf_float+0x34c>
 8008746:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800874a:	463a      	mov	r2, r7
 800874c:	4640      	mov	r0, r8
 800874e:	4798      	blx	r3
 8008750:	6923      	ldr	r3, [r4, #16]
 8008752:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008756:	3b01      	subs	r3, #1
 8008758:	1eb5      	subs	r5, r6, #2
 800875a:	6123      	str	r3, [r4, #16]
 800875c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008760:	463a      	mov	r2, r7
 8008762:	4640      	mov	r0, r8
 8008764:	4798      	blx	r3
 8008766:	462e      	mov	r6, r5
 8008768:	6825      	ldr	r5, [r4, #0]
 800876a:	f015 0510 	ands.w	r5, r5, #16
 800876e:	d159      	bne.n	8008824 <_scanf_float+0x414>
 8008770:	7035      	strb	r5, [r6, #0]
 8008772:	6823      	ldr	r3, [r4, #0]
 8008774:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800877c:	d11b      	bne.n	80087b6 <_scanf_float+0x3a6>
 800877e:	9b01      	ldr	r3, [sp, #4]
 8008780:	454b      	cmp	r3, r9
 8008782:	eba3 0209 	sub.w	r2, r3, r9
 8008786:	d123      	bne.n	80087d0 <_scanf_float+0x3c0>
 8008788:	2200      	movs	r2, #0
 800878a:	4659      	mov	r1, fp
 800878c:	4640      	mov	r0, r8
 800878e:	f000 ff2d 	bl	80095ec <_strtod_r>
 8008792:	6822      	ldr	r2, [r4, #0]
 8008794:	9b03      	ldr	r3, [sp, #12]
 8008796:	f012 0f02 	tst.w	r2, #2
 800879a:	ec57 6b10 	vmov	r6, r7, d0
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	d021      	beq.n	80087e6 <_scanf_float+0x3d6>
 80087a2:	9903      	ldr	r1, [sp, #12]
 80087a4:	1d1a      	adds	r2, r3, #4
 80087a6:	600a      	str	r2, [r1, #0]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	e9c3 6700 	strd	r6, r7, [r3]
 80087ae:	68e3      	ldr	r3, [r4, #12]
 80087b0:	3301      	adds	r3, #1
 80087b2:	60e3      	str	r3, [r4, #12]
 80087b4:	e66d      	b.n	8008492 <_scanf_float+0x82>
 80087b6:	9b04      	ldr	r3, [sp, #16]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d0e5      	beq.n	8008788 <_scanf_float+0x378>
 80087bc:	9905      	ldr	r1, [sp, #20]
 80087be:	230a      	movs	r3, #10
 80087c0:	462a      	mov	r2, r5
 80087c2:	3101      	adds	r1, #1
 80087c4:	4640      	mov	r0, r8
 80087c6:	f000 ff99 	bl	80096fc <_strtol_r>
 80087ca:	9b04      	ldr	r3, [sp, #16]
 80087cc:	9e05      	ldr	r6, [sp, #20]
 80087ce:	1ac2      	subs	r2, r0, r3
 80087d0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80087d4:	429e      	cmp	r6, r3
 80087d6:	bf28      	it	cs
 80087d8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80087dc:	4912      	ldr	r1, [pc, #72]	; (8008828 <_scanf_float+0x418>)
 80087de:	4630      	mov	r0, r6
 80087e0:	f000 f82c 	bl	800883c <siprintf>
 80087e4:	e7d0      	b.n	8008788 <_scanf_float+0x378>
 80087e6:	9903      	ldr	r1, [sp, #12]
 80087e8:	f012 0f04 	tst.w	r2, #4
 80087ec:	f103 0204 	add.w	r2, r3, #4
 80087f0:	600a      	str	r2, [r1, #0]
 80087f2:	d1d9      	bne.n	80087a8 <_scanf_float+0x398>
 80087f4:	f8d3 8000 	ldr.w	r8, [r3]
 80087f8:	ee10 2a10 	vmov	r2, s0
 80087fc:	ee10 0a10 	vmov	r0, s0
 8008800:	463b      	mov	r3, r7
 8008802:	4639      	mov	r1, r7
 8008804:	f7f8 f992 	bl	8000b2c <__aeabi_dcmpun>
 8008808:	b128      	cbz	r0, 8008816 <_scanf_float+0x406>
 800880a:	4808      	ldr	r0, [pc, #32]	; (800882c <_scanf_float+0x41c>)
 800880c:	f000 f810 	bl	8008830 <nanf>
 8008810:	ed88 0a00 	vstr	s0, [r8]
 8008814:	e7cb      	b.n	80087ae <_scanf_float+0x39e>
 8008816:	4630      	mov	r0, r6
 8008818:	4639      	mov	r1, r7
 800881a:	f7f8 f9e5 	bl	8000be8 <__aeabi_d2f>
 800881e:	f8c8 0000 	str.w	r0, [r8]
 8008822:	e7c4      	b.n	80087ae <_scanf_float+0x39e>
 8008824:	2500      	movs	r5, #0
 8008826:	e634      	b.n	8008492 <_scanf_float+0x82>
 8008828:	0800cda6 	.word	0x0800cda6
 800882c:	0800d1cb 	.word	0x0800d1cb

08008830 <nanf>:
 8008830:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008838 <nanf+0x8>
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	7fc00000 	.word	0x7fc00000

0800883c <siprintf>:
 800883c:	b40e      	push	{r1, r2, r3}
 800883e:	b500      	push	{lr}
 8008840:	b09c      	sub	sp, #112	; 0x70
 8008842:	ab1d      	add	r3, sp, #116	; 0x74
 8008844:	9002      	str	r0, [sp, #8]
 8008846:	9006      	str	r0, [sp, #24]
 8008848:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800884c:	4809      	ldr	r0, [pc, #36]	; (8008874 <siprintf+0x38>)
 800884e:	9107      	str	r1, [sp, #28]
 8008850:	9104      	str	r1, [sp, #16]
 8008852:	4909      	ldr	r1, [pc, #36]	; (8008878 <siprintf+0x3c>)
 8008854:	f853 2b04 	ldr.w	r2, [r3], #4
 8008858:	9105      	str	r1, [sp, #20]
 800885a:	6800      	ldr	r0, [r0, #0]
 800885c:	9301      	str	r3, [sp, #4]
 800885e:	a902      	add	r1, sp, #8
 8008860:	f002 ffae 	bl	800b7c0 <_svfiprintf_r>
 8008864:	9b02      	ldr	r3, [sp, #8]
 8008866:	2200      	movs	r2, #0
 8008868:	701a      	strb	r2, [r3, #0]
 800886a:	b01c      	add	sp, #112	; 0x70
 800886c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008870:	b003      	add	sp, #12
 8008872:	4770      	bx	lr
 8008874:	200000f0 	.word	0x200000f0
 8008878:	ffff0208 	.word	0xffff0208

0800887c <siscanf>:
 800887c:	b40e      	push	{r1, r2, r3}
 800887e:	b510      	push	{r4, lr}
 8008880:	b09f      	sub	sp, #124	; 0x7c
 8008882:	ac21      	add	r4, sp, #132	; 0x84
 8008884:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008888:	f854 2b04 	ldr.w	r2, [r4], #4
 800888c:	9201      	str	r2, [sp, #4]
 800888e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008892:	9004      	str	r0, [sp, #16]
 8008894:	9008      	str	r0, [sp, #32]
 8008896:	f7f7 fc9b 	bl	80001d0 <strlen>
 800889a:	4b0c      	ldr	r3, [pc, #48]	; (80088cc <siscanf+0x50>)
 800889c:	9005      	str	r0, [sp, #20]
 800889e:	9009      	str	r0, [sp, #36]	; 0x24
 80088a0:	930d      	str	r3, [sp, #52]	; 0x34
 80088a2:	480b      	ldr	r0, [pc, #44]	; (80088d0 <siscanf+0x54>)
 80088a4:	9a01      	ldr	r2, [sp, #4]
 80088a6:	6800      	ldr	r0, [r0, #0]
 80088a8:	9403      	str	r4, [sp, #12]
 80088aa:	2300      	movs	r3, #0
 80088ac:	9311      	str	r3, [sp, #68]	; 0x44
 80088ae:	9316      	str	r3, [sp, #88]	; 0x58
 80088b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80088b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80088b8:	a904      	add	r1, sp, #16
 80088ba:	4623      	mov	r3, r4
 80088bc:	f003 f8da 	bl	800ba74 <__ssvfiscanf_r>
 80088c0:	b01f      	add	sp, #124	; 0x7c
 80088c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088c6:	b003      	add	sp, #12
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	080088f7 	.word	0x080088f7
 80088d0:	200000f0 	.word	0x200000f0

080088d4 <__sread>:
 80088d4:	b510      	push	{r4, lr}
 80088d6:	460c      	mov	r4, r1
 80088d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088dc:	f003 fb94 	bl	800c008 <_read_r>
 80088e0:	2800      	cmp	r0, #0
 80088e2:	bfab      	itete	ge
 80088e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088e6:	89a3      	ldrhlt	r3, [r4, #12]
 80088e8:	181b      	addge	r3, r3, r0
 80088ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088ee:	bfac      	ite	ge
 80088f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80088f2:	81a3      	strhlt	r3, [r4, #12]
 80088f4:	bd10      	pop	{r4, pc}

080088f6 <__seofread>:
 80088f6:	2000      	movs	r0, #0
 80088f8:	4770      	bx	lr

080088fa <__swrite>:
 80088fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088fe:	461f      	mov	r7, r3
 8008900:	898b      	ldrh	r3, [r1, #12]
 8008902:	05db      	lsls	r3, r3, #23
 8008904:	4605      	mov	r5, r0
 8008906:	460c      	mov	r4, r1
 8008908:	4616      	mov	r6, r2
 800890a:	d505      	bpl.n	8008918 <__swrite+0x1e>
 800890c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008910:	2302      	movs	r3, #2
 8008912:	2200      	movs	r2, #0
 8008914:	f002 f906 	bl	800ab24 <_lseek_r>
 8008918:	89a3      	ldrh	r3, [r4, #12]
 800891a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800891e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008922:	81a3      	strh	r3, [r4, #12]
 8008924:	4632      	mov	r2, r6
 8008926:	463b      	mov	r3, r7
 8008928:	4628      	mov	r0, r5
 800892a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800892e:	f000 bee7 	b.w	8009700 <_write_r>

08008932 <__sseek>:
 8008932:	b510      	push	{r4, lr}
 8008934:	460c      	mov	r4, r1
 8008936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800893a:	f002 f8f3 	bl	800ab24 <_lseek_r>
 800893e:	1c43      	adds	r3, r0, #1
 8008940:	89a3      	ldrh	r3, [r4, #12]
 8008942:	bf15      	itete	ne
 8008944:	6560      	strne	r0, [r4, #84]	; 0x54
 8008946:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800894a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800894e:	81a3      	strheq	r3, [r4, #12]
 8008950:	bf18      	it	ne
 8008952:	81a3      	strhne	r3, [r4, #12]
 8008954:	bd10      	pop	{r4, pc}

08008956 <__sclose>:
 8008956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800895a:	f000 bee3 	b.w	8009724 <_close_r>

0800895e <strchr>:
 800895e:	b2c9      	uxtb	r1, r1
 8008960:	4603      	mov	r3, r0
 8008962:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008966:	b11a      	cbz	r2, 8008970 <strchr+0x12>
 8008968:	428a      	cmp	r2, r1
 800896a:	d1f9      	bne.n	8008960 <strchr+0x2>
 800896c:	4618      	mov	r0, r3
 800896e:	4770      	bx	lr
 8008970:	2900      	cmp	r1, #0
 8008972:	bf18      	it	ne
 8008974:	2300      	movne	r3, #0
 8008976:	e7f9      	b.n	800896c <strchr+0xe>

08008978 <strstr>:
 8008978:	780a      	ldrb	r2, [r1, #0]
 800897a:	b570      	push	{r4, r5, r6, lr}
 800897c:	b96a      	cbnz	r2, 800899a <strstr+0x22>
 800897e:	bd70      	pop	{r4, r5, r6, pc}
 8008980:	429a      	cmp	r2, r3
 8008982:	d109      	bne.n	8008998 <strstr+0x20>
 8008984:	460c      	mov	r4, r1
 8008986:	4605      	mov	r5, r0
 8008988:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800898c:	2b00      	cmp	r3, #0
 800898e:	d0f6      	beq.n	800897e <strstr+0x6>
 8008990:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008994:	429e      	cmp	r6, r3
 8008996:	d0f7      	beq.n	8008988 <strstr+0x10>
 8008998:	3001      	adds	r0, #1
 800899a:	7803      	ldrb	r3, [r0, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1ef      	bne.n	8008980 <strstr+0x8>
 80089a0:	4618      	mov	r0, r3
 80089a2:	e7ec      	b.n	800897e <strstr+0x6>

080089a4 <sulp>:
 80089a4:	b570      	push	{r4, r5, r6, lr}
 80089a6:	4604      	mov	r4, r0
 80089a8:	460d      	mov	r5, r1
 80089aa:	ec45 4b10 	vmov	d0, r4, r5
 80089ae:	4616      	mov	r6, r2
 80089b0:	f002 fc64 	bl	800b27c <__ulp>
 80089b4:	ec51 0b10 	vmov	r0, r1, d0
 80089b8:	b17e      	cbz	r6, 80089da <sulp+0x36>
 80089ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80089be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	dd09      	ble.n	80089da <sulp+0x36>
 80089c6:	051b      	lsls	r3, r3, #20
 80089c8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80089cc:	2400      	movs	r4, #0
 80089ce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80089d2:	4622      	mov	r2, r4
 80089d4:	462b      	mov	r3, r5
 80089d6:	f7f7 fe0f 	bl	80005f8 <__aeabi_dmul>
 80089da:	bd70      	pop	{r4, r5, r6, pc}
 80089dc:	0000      	movs	r0, r0
	...

080089e0 <_strtod_l>:
 80089e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e4:	ed2d 8b02 	vpush	{d8}
 80089e8:	b09d      	sub	sp, #116	; 0x74
 80089ea:	461f      	mov	r7, r3
 80089ec:	2300      	movs	r3, #0
 80089ee:	9318      	str	r3, [sp, #96]	; 0x60
 80089f0:	4ba2      	ldr	r3, [pc, #648]	; (8008c7c <_strtod_l+0x29c>)
 80089f2:	9213      	str	r2, [sp, #76]	; 0x4c
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	9305      	str	r3, [sp, #20]
 80089f8:	4604      	mov	r4, r0
 80089fa:	4618      	mov	r0, r3
 80089fc:	4688      	mov	r8, r1
 80089fe:	f7f7 fbe7 	bl	80001d0 <strlen>
 8008a02:	f04f 0a00 	mov.w	sl, #0
 8008a06:	4605      	mov	r5, r0
 8008a08:	f04f 0b00 	mov.w	fp, #0
 8008a0c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008a10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a12:	781a      	ldrb	r2, [r3, #0]
 8008a14:	2a2b      	cmp	r2, #43	; 0x2b
 8008a16:	d04e      	beq.n	8008ab6 <_strtod_l+0xd6>
 8008a18:	d83b      	bhi.n	8008a92 <_strtod_l+0xb2>
 8008a1a:	2a0d      	cmp	r2, #13
 8008a1c:	d834      	bhi.n	8008a88 <_strtod_l+0xa8>
 8008a1e:	2a08      	cmp	r2, #8
 8008a20:	d834      	bhi.n	8008a8c <_strtod_l+0xac>
 8008a22:	2a00      	cmp	r2, #0
 8008a24:	d03e      	beq.n	8008aa4 <_strtod_l+0xc4>
 8008a26:	2300      	movs	r3, #0
 8008a28:	930a      	str	r3, [sp, #40]	; 0x28
 8008a2a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008a2c:	7833      	ldrb	r3, [r6, #0]
 8008a2e:	2b30      	cmp	r3, #48	; 0x30
 8008a30:	f040 80b0 	bne.w	8008b94 <_strtod_l+0x1b4>
 8008a34:	7873      	ldrb	r3, [r6, #1]
 8008a36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a3a:	2b58      	cmp	r3, #88	; 0x58
 8008a3c:	d168      	bne.n	8008b10 <_strtod_l+0x130>
 8008a3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a40:	9301      	str	r3, [sp, #4]
 8008a42:	ab18      	add	r3, sp, #96	; 0x60
 8008a44:	9702      	str	r7, [sp, #8]
 8008a46:	9300      	str	r3, [sp, #0]
 8008a48:	4a8d      	ldr	r2, [pc, #564]	; (8008c80 <_strtod_l+0x2a0>)
 8008a4a:	ab19      	add	r3, sp, #100	; 0x64
 8008a4c:	a917      	add	r1, sp, #92	; 0x5c
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f001 fd5c 	bl	800a50c <__gethex>
 8008a54:	f010 0707 	ands.w	r7, r0, #7
 8008a58:	4605      	mov	r5, r0
 8008a5a:	d005      	beq.n	8008a68 <_strtod_l+0x88>
 8008a5c:	2f06      	cmp	r7, #6
 8008a5e:	d12c      	bne.n	8008aba <_strtod_l+0xda>
 8008a60:	3601      	adds	r6, #1
 8008a62:	2300      	movs	r3, #0
 8008a64:	9617      	str	r6, [sp, #92]	; 0x5c
 8008a66:	930a      	str	r3, [sp, #40]	; 0x28
 8008a68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f040 8590 	bne.w	8009590 <_strtod_l+0xbb0>
 8008a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a72:	b1eb      	cbz	r3, 8008ab0 <_strtod_l+0xd0>
 8008a74:	4652      	mov	r2, sl
 8008a76:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008a7a:	ec43 2b10 	vmov	d0, r2, r3
 8008a7e:	b01d      	add	sp, #116	; 0x74
 8008a80:	ecbd 8b02 	vpop	{d8}
 8008a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a88:	2a20      	cmp	r2, #32
 8008a8a:	d1cc      	bne.n	8008a26 <_strtod_l+0x46>
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008a90:	e7be      	b.n	8008a10 <_strtod_l+0x30>
 8008a92:	2a2d      	cmp	r2, #45	; 0x2d
 8008a94:	d1c7      	bne.n	8008a26 <_strtod_l+0x46>
 8008a96:	2201      	movs	r2, #1
 8008a98:	920a      	str	r2, [sp, #40]	; 0x28
 8008a9a:	1c5a      	adds	r2, r3, #1
 8008a9c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008a9e:	785b      	ldrb	r3, [r3, #1]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d1c2      	bne.n	8008a2a <_strtod_l+0x4a>
 8008aa4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008aa6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f040 856e 	bne.w	800958c <_strtod_l+0xbac>
 8008ab0:	4652      	mov	r2, sl
 8008ab2:	465b      	mov	r3, fp
 8008ab4:	e7e1      	b.n	8008a7a <_strtod_l+0x9a>
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	e7ee      	b.n	8008a98 <_strtod_l+0xb8>
 8008aba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008abc:	b13a      	cbz	r2, 8008ace <_strtod_l+0xee>
 8008abe:	2135      	movs	r1, #53	; 0x35
 8008ac0:	a81a      	add	r0, sp, #104	; 0x68
 8008ac2:	f002 fce6 	bl	800b492 <__copybits>
 8008ac6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f002 f8a5 	bl	800ac18 <_Bfree>
 8008ace:	3f01      	subs	r7, #1
 8008ad0:	2f04      	cmp	r7, #4
 8008ad2:	d806      	bhi.n	8008ae2 <_strtod_l+0x102>
 8008ad4:	e8df f007 	tbb	[pc, r7]
 8008ad8:	1714030a 	.word	0x1714030a
 8008adc:	0a          	.byte	0x0a
 8008add:	00          	.byte	0x00
 8008ade:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008ae2:	0728      	lsls	r0, r5, #28
 8008ae4:	d5c0      	bpl.n	8008a68 <_strtod_l+0x88>
 8008ae6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008aea:	e7bd      	b.n	8008a68 <_strtod_l+0x88>
 8008aec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008af0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008af2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008af6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008afa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008afe:	e7f0      	b.n	8008ae2 <_strtod_l+0x102>
 8008b00:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008c84 <_strtod_l+0x2a4>
 8008b04:	e7ed      	b.n	8008ae2 <_strtod_l+0x102>
 8008b06:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008b0a:	f04f 3aff 	mov.w	sl, #4294967295
 8008b0e:	e7e8      	b.n	8008ae2 <_strtod_l+0x102>
 8008b10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b12:	1c5a      	adds	r2, r3, #1
 8008b14:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b16:	785b      	ldrb	r3, [r3, #1]
 8008b18:	2b30      	cmp	r3, #48	; 0x30
 8008b1a:	d0f9      	beq.n	8008b10 <_strtod_l+0x130>
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d0a3      	beq.n	8008a68 <_strtod_l+0x88>
 8008b20:	2301      	movs	r3, #1
 8008b22:	f04f 0900 	mov.w	r9, #0
 8008b26:	9304      	str	r3, [sp, #16]
 8008b28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b2a:	9308      	str	r3, [sp, #32]
 8008b2c:	f8cd 901c 	str.w	r9, [sp, #28]
 8008b30:	464f      	mov	r7, r9
 8008b32:	220a      	movs	r2, #10
 8008b34:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008b36:	7806      	ldrb	r6, [r0, #0]
 8008b38:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008b3c:	b2d9      	uxtb	r1, r3
 8008b3e:	2909      	cmp	r1, #9
 8008b40:	d92a      	bls.n	8008b98 <_strtod_l+0x1b8>
 8008b42:	9905      	ldr	r1, [sp, #20]
 8008b44:	462a      	mov	r2, r5
 8008b46:	f003 fac3 	bl	800c0d0 <strncmp>
 8008b4a:	b398      	cbz	r0, 8008bb4 <_strtod_l+0x1d4>
 8008b4c:	2000      	movs	r0, #0
 8008b4e:	4632      	mov	r2, r6
 8008b50:	463d      	mov	r5, r7
 8008b52:	9005      	str	r0, [sp, #20]
 8008b54:	4603      	mov	r3, r0
 8008b56:	2a65      	cmp	r2, #101	; 0x65
 8008b58:	d001      	beq.n	8008b5e <_strtod_l+0x17e>
 8008b5a:	2a45      	cmp	r2, #69	; 0x45
 8008b5c:	d118      	bne.n	8008b90 <_strtod_l+0x1b0>
 8008b5e:	b91d      	cbnz	r5, 8008b68 <_strtod_l+0x188>
 8008b60:	9a04      	ldr	r2, [sp, #16]
 8008b62:	4302      	orrs	r2, r0
 8008b64:	d09e      	beq.n	8008aa4 <_strtod_l+0xc4>
 8008b66:	2500      	movs	r5, #0
 8008b68:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008b6c:	f108 0201 	add.w	r2, r8, #1
 8008b70:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b72:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008b76:	2a2b      	cmp	r2, #43	; 0x2b
 8008b78:	d075      	beq.n	8008c66 <_strtod_l+0x286>
 8008b7a:	2a2d      	cmp	r2, #45	; 0x2d
 8008b7c:	d07b      	beq.n	8008c76 <_strtod_l+0x296>
 8008b7e:	f04f 0c00 	mov.w	ip, #0
 8008b82:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008b86:	2909      	cmp	r1, #9
 8008b88:	f240 8082 	bls.w	8008c90 <_strtod_l+0x2b0>
 8008b8c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008b90:	2600      	movs	r6, #0
 8008b92:	e09d      	b.n	8008cd0 <_strtod_l+0x2f0>
 8008b94:	2300      	movs	r3, #0
 8008b96:	e7c4      	b.n	8008b22 <_strtod_l+0x142>
 8008b98:	2f08      	cmp	r7, #8
 8008b9a:	bfd8      	it	le
 8008b9c:	9907      	ldrle	r1, [sp, #28]
 8008b9e:	f100 0001 	add.w	r0, r0, #1
 8008ba2:	bfda      	itte	le
 8008ba4:	fb02 3301 	mlale	r3, r2, r1, r3
 8008ba8:	9307      	strle	r3, [sp, #28]
 8008baa:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008bae:	3701      	adds	r7, #1
 8008bb0:	9017      	str	r0, [sp, #92]	; 0x5c
 8008bb2:	e7bf      	b.n	8008b34 <_strtod_l+0x154>
 8008bb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008bb6:	195a      	adds	r2, r3, r5
 8008bb8:	9217      	str	r2, [sp, #92]	; 0x5c
 8008bba:	5d5a      	ldrb	r2, [r3, r5]
 8008bbc:	2f00      	cmp	r7, #0
 8008bbe:	d037      	beq.n	8008c30 <_strtod_l+0x250>
 8008bc0:	9005      	str	r0, [sp, #20]
 8008bc2:	463d      	mov	r5, r7
 8008bc4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008bc8:	2b09      	cmp	r3, #9
 8008bca:	d912      	bls.n	8008bf2 <_strtod_l+0x212>
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e7c2      	b.n	8008b56 <_strtod_l+0x176>
 8008bd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008bd2:	1c5a      	adds	r2, r3, #1
 8008bd4:	9217      	str	r2, [sp, #92]	; 0x5c
 8008bd6:	785a      	ldrb	r2, [r3, #1]
 8008bd8:	3001      	adds	r0, #1
 8008bda:	2a30      	cmp	r2, #48	; 0x30
 8008bdc:	d0f8      	beq.n	8008bd0 <_strtod_l+0x1f0>
 8008bde:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008be2:	2b08      	cmp	r3, #8
 8008be4:	f200 84d9 	bhi.w	800959a <_strtod_l+0xbba>
 8008be8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008bea:	9005      	str	r0, [sp, #20]
 8008bec:	2000      	movs	r0, #0
 8008bee:	9308      	str	r3, [sp, #32]
 8008bf0:	4605      	mov	r5, r0
 8008bf2:	3a30      	subs	r2, #48	; 0x30
 8008bf4:	f100 0301 	add.w	r3, r0, #1
 8008bf8:	d014      	beq.n	8008c24 <_strtod_l+0x244>
 8008bfa:	9905      	ldr	r1, [sp, #20]
 8008bfc:	4419      	add	r1, r3
 8008bfe:	9105      	str	r1, [sp, #20]
 8008c00:	462b      	mov	r3, r5
 8008c02:	eb00 0e05 	add.w	lr, r0, r5
 8008c06:	210a      	movs	r1, #10
 8008c08:	4573      	cmp	r3, lr
 8008c0a:	d113      	bne.n	8008c34 <_strtod_l+0x254>
 8008c0c:	182b      	adds	r3, r5, r0
 8008c0e:	2b08      	cmp	r3, #8
 8008c10:	f105 0501 	add.w	r5, r5, #1
 8008c14:	4405      	add	r5, r0
 8008c16:	dc1c      	bgt.n	8008c52 <_strtod_l+0x272>
 8008c18:	9907      	ldr	r1, [sp, #28]
 8008c1a:	230a      	movs	r3, #10
 8008c1c:	fb03 2301 	mla	r3, r3, r1, r2
 8008c20:	9307      	str	r3, [sp, #28]
 8008c22:	2300      	movs	r3, #0
 8008c24:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c26:	1c51      	adds	r1, r2, #1
 8008c28:	9117      	str	r1, [sp, #92]	; 0x5c
 8008c2a:	7852      	ldrb	r2, [r2, #1]
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	e7c9      	b.n	8008bc4 <_strtod_l+0x1e4>
 8008c30:	4638      	mov	r0, r7
 8008c32:	e7d2      	b.n	8008bda <_strtod_l+0x1fa>
 8008c34:	2b08      	cmp	r3, #8
 8008c36:	dc04      	bgt.n	8008c42 <_strtod_l+0x262>
 8008c38:	9e07      	ldr	r6, [sp, #28]
 8008c3a:	434e      	muls	r6, r1
 8008c3c:	9607      	str	r6, [sp, #28]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	e7e2      	b.n	8008c08 <_strtod_l+0x228>
 8008c42:	f103 0c01 	add.w	ip, r3, #1
 8008c46:	f1bc 0f10 	cmp.w	ip, #16
 8008c4a:	bfd8      	it	le
 8008c4c:	fb01 f909 	mulle.w	r9, r1, r9
 8008c50:	e7f5      	b.n	8008c3e <_strtod_l+0x25e>
 8008c52:	2d10      	cmp	r5, #16
 8008c54:	bfdc      	itt	le
 8008c56:	230a      	movle	r3, #10
 8008c58:	fb03 2909 	mlale	r9, r3, r9, r2
 8008c5c:	e7e1      	b.n	8008c22 <_strtod_l+0x242>
 8008c5e:	2300      	movs	r3, #0
 8008c60:	9305      	str	r3, [sp, #20]
 8008c62:	2301      	movs	r3, #1
 8008c64:	e77c      	b.n	8008b60 <_strtod_l+0x180>
 8008c66:	f04f 0c00 	mov.w	ip, #0
 8008c6a:	f108 0202 	add.w	r2, r8, #2
 8008c6e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c70:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008c74:	e785      	b.n	8008b82 <_strtod_l+0x1a2>
 8008c76:	f04f 0c01 	mov.w	ip, #1
 8008c7a:	e7f6      	b.n	8008c6a <_strtod_l+0x28a>
 8008c7c:	0800cff8 	.word	0x0800cff8
 8008c80:	0800cdac 	.word	0x0800cdac
 8008c84:	7ff00000 	.word	0x7ff00000
 8008c88:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c8a:	1c51      	adds	r1, r2, #1
 8008c8c:	9117      	str	r1, [sp, #92]	; 0x5c
 8008c8e:	7852      	ldrb	r2, [r2, #1]
 8008c90:	2a30      	cmp	r2, #48	; 0x30
 8008c92:	d0f9      	beq.n	8008c88 <_strtod_l+0x2a8>
 8008c94:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008c98:	2908      	cmp	r1, #8
 8008c9a:	f63f af79 	bhi.w	8008b90 <_strtod_l+0x1b0>
 8008c9e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008ca2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008ca4:	9206      	str	r2, [sp, #24]
 8008ca6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008ca8:	1c51      	adds	r1, r2, #1
 8008caa:	9117      	str	r1, [sp, #92]	; 0x5c
 8008cac:	7852      	ldrb	r2, [r2, #1]
 8008cae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008cb2:	2e09      	cmp	r6, #9
 8008cb4:	d937      	bls.n	8008d26 <_strtod_l+0x346>
 8008cb6:	9e06      	ldr	r6, [sp, #24]
 8008cb8:	1b89      	subs	r1, r1, r6
 8008cba:	2908      	cmp	r1, #8
 8008cbc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008cc0:	dc02      	bgt.n	8008cc8 <_strtod_l+0x2e8>
 8008cc2:	4576      	cmp	r6, lr
 8008cc4:	bfa8      	it	ge
 8008cc6:	4676      	movge	r6, lr
 8008cc8:	f1bc 0f00 	cmp.w	ip, #0
 8008ccc:	d000      	beq.n	8008cd0 <_strtod_l+0x2f0>
 8008cce:	4276      	negs	r6, r6
 8008cd0:	2d00      	cmp	r5, #0
 8008cd2:	d14d      	bne.n	8008d70 <_strtod_l+0x390>
 8008cd4:	9904      	ldr	r1, [sp, #16]
 8008cd6:	4301      	orrs	r1, r0
 8008cd8:	f47f aec6 	bne.w	8008a68 <_strtod_l+0x88>
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f47f aee1 	bne.w	8008aa4 <_strtod_l+0xc4>
 8008ce2:	2a69      	cmp	r2, #105	; 0x69
 8008ce4:	d027      	beq.n	8008d36 <_strtod_l+0x356>
 8008ce6:	dc24      	bgt.n	8008d32 <_strtod_l+0x352>
 8008ce8:	2a49      	cmp	r2, #73	; 0x49
 8008cea:	d024      	beq.n	8008d36 <_strtod_l+0x356>
 8008cec:	2a4e      	cmp	r2, #78	; 0x4e
 8008cee:	f47f aed9 	bne.w	8008aa4 <_strtod_l+0xc4>
 8008cf2:	499f      	ldr	r1, [pc, #636]	; (8008f70 <_strtod_l+0x590>)
 8008cf4:	a817      	add	r0, sp, #92	; 0x5c
 8008cf6:	f001 fe61 	bl	800a9bc <__match>
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	f43f aed2 	beq.w	8008aa4 <_strtod_l+0xc4>
 8008d00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	2b28      	cmp	r3, #40	; 0x28
 8008d06:	d12d      	bne.n	8008d64 <_strtod_l+0x384>
 8008d08:	499a      	ldr	r1, [pc, #616]	; (8008f74 <_strtod_l+0x594>)
 8008d0a:	aa1a      	add	r2, sp, #104	; 0x68
 8008d0c:	a817      	add	r0, sp, #92	; 0x5c
 8008d0e:	f001 fe69 	bl	800a9e4 <__hexnan>
 8008d12:	2805      	cmp	r0, #5
 8008d14:	d126      	bne.n	8008d64 <_strtod_l+0x384>
 8008d16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d18:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008d1c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008d20:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008d24:	e6a0      	b.n	8008a68 <_strtod_l+0x88>
 8008d26:	210a      	movs	r1, #10
 8008d28:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008d2c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008d30:	e7b9      	b.n	8008ca6 <_strtod_l+0x2c6>
 8008d32:	2a6e      	cmp	r2, #110	; 0x6e
 8008d34:	e7db      	b.n	8008cee <_strtod_l+0x30e>
 8008d36:	4990      	ldr	r1, [pc, #576]	; (8008f78 <_strtod_l+0x598>)
 8008d38:	a817      	add	r0, sp, #92	; 0x5c
 8008d3a:	f001 fe3f 	bl	800a9bc <__match>
 8008d3e:	2800      	cmp	r0, #0
 8008d40:	f43f aeb0 	beq.w	8008aa4 <_strtod_l+0xc4>
 8008d44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d46:	498d      	ldr	r1, [pc, #564]	; (8008f7c <_strtod_l+0x59c>)
 8008d48:	3b01      	subs	r3, #1
 8008d4a:	a817      	add	r0, sp, #92	; 0x5c
 8008d4c:	9317      	str	r3, [sp, #92]	; 0x5c
 8008d4e:	f001 fe35 	bl	800a9bc <__match>
 8008d52:	b910      	cbnz	r0, 8008d5a <_strtod_l+0x37a>
 8008d54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d56:	3301      	adds	r3, #1
 8008d58:	9317      	str	r3, [sp, #92]	; 0x5c
 8008d5a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008f8c <_strtod_l+0x5ac>
 8008d5e:	f04f 0a00 	mov.w	sl, #0
 8008d62:	e681      	b.n	8008a68 <_strtod_l+0x88>
 8008d64:	4886      	ldr	r0, [pc, #536]	; (8008f80 <_strtod_l+0x5a0>)
 8008d66:	f003 f963 	bl	800c030 <nan>
 8008d6a:	ec5b ab10 	vmov	sl, fp, d0
 8008d6e:	e67b      	b.n	8008a68 <_strtod_l+0x88>
 8008d70:	9b05      	ldr	r3, [sp, #20]
 8008d72:	9807      	ldr	r0, [sp, #28]
 8008d74:	1af3      	subs	r3, r6, r3
 8008d76:	2f00      	cmp	r7, #0
 8008d78:	bf08      	it	eq
 8008d7a:	462f      	moveq	r7, r5
 8008d7c:	2d10      	cmp	r5, #16
 8008d7e:	9306      	str	r3, [sp, #24]
 8008d80:	46a8      	mov	r8, r5
 8008d82:	bfa8      	it	ge
 8008d84:	f04f 0810 	movge.w	r8, #16
 8008d88:	f7f7 fbbc 	bl	8000504 <__aeabi_ui2d>
 8008d8c:	2d09      	cmp	r5, #9
 8008d8e:	4682      	mov	sl, r0
 8008d90:	468b      	mov	fp, r1
 8008d92:	dd13      	ble.n	8008dbc <_strtod_l+0x3dc>
 8008d94:	4b7b      	ldr	r3, [pc, #492]	; (8008f84 <_strtod_l+0x5a4>)
 8008d96:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008d9a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008d9e:	f7f7 fc2b 	bl	80005f8 <__aeabi_dmul>
 8008da2:	4682      	mov	sl, r0
 8008da4:	4648      	mov	r0, r9
 8008da6:	468b      	mov	fp, r1
 8008da8:	f7f7 fbac 	bl	8000504 <__aeabi_ui2d>
 8008dac:	4602      	mov	r2, r0
 8008dae:	460b      	mov	r3, r1
 8008db0:	4650      	mov	r0, sl
 8008db2:	4659      	mov	r1, fp
 8008db4:	f7f7 fa6a 	bl	800028c <__adddf3>
 8008db8:	4682      	mov	sl, r0
 8008dba:	468b      	mov	fp, r1
 8008dbc:	2d0f      	cmp	r5, #15
 8008dbe:	dc38      	bgt.n	8008e32 <_strtod_l+0x452>
 8008dc0:	9b06      	ldr	r3, [sp, #24]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	f43f ae50 	beq.w	8008a68 <_strtod_l+0x88>
 8008dc8:	dd24      	ble.n	8008e14 <_strtod_l+0x434>
 8008dca:	2b16      	cmp	r3, #22
 8008dcc:	dc0b      	bgt.n	8008de6 <_strtod_l+0x406>
 8008dce:	496d      	ldr	r1, [pc, #436]	; (8008f84 <_strtod_l+0x5a4>)
 8008dd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008dd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dd8:	4652      	mov	r2, sl
 8008dda:	465b      	mov	r3, fp
 8008ddc:	f7f7 fc0c 	bl	80005f8 <__aeabi_dmul>
 8008de0:	4682      	mov	sl, r0
 8008de2:	468b      	mov	fp, r1
 8008de4:	e640      	b.n	8008a68 <_strtod_l+0x88>
 8008de6:	9a06      	ldr	r2, [sp, #24]
 8008de8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008dec:	4293      	cmp	r3, r2
 8008dee:	db20      	blt.n	8008e32 <_strtod_l+0x452>
 8008df0:	4c64      	ldr	r4, [pc, #400]	; (8008f84 <_strtod_l+0x5a4>)
 8008df2:	f1c5 050f 	rsb	r5, r5, #15
 8008df6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008dfa:	4652      	mov	r2, sl
 8008dfc:	465b      	mov	r3, fp
 8008dfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e02:	f7f7 fbf9 	bl	80005f8 <__aeabi_dmul>
 8008e06:	9b06      	ldr	r3, [sp, #24]
 8008e08:	1b5d      	subs	r5, r3, r5
 8008e0a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008e0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008e12:	e7e3      	b.n	8008ddc <_strtod_l+0x3fc>
 8008e14:	9b06      	ldr	r3, [sp, #24]
 8008e16:	3316      	adds	r3, #22
 8008e18:	db0b      	blt.n	8008e32 <_strtod_l+0x452>
 8008e1a:	9b05      	ldr	r3, [sp, #20]
 8008e1c:	1b9e      	subs	r6, r3, r6
 8008e1e:	4b59      	ldr	r3, [pc, #356]	; (8008f84 <_strtod_l+0x5a4>)
 8008e20:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008e24:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e28:	4650      	mov	r0, sl
 8008e2a:	4659      	mov	r1, fp
 8008e2c:	f7f7 fd0e 	bl	800084c <__aeabi_ddiv>
 8008e30:	e7d6      	b.n	8008de0 <_strtod_l+0x400>
 8008e32:	9b06      	ldr	r3, [sp, #24]
 8008e34:	eba5 0808 	sub.w	r8, r5, r8
 8008e38:	4498      	add	r8, r3
 8008e3a:	f1b8 0f00 	cmp.w	r8, #0
 8008e3e:	dd74      	ble.n	8008f2a <_strtod_l+0x54a>
 8008e40:	f018 030f 	ands.w	r3, r8, #15
 8008e44:	d00a      	beq.n	8008e5c <_strtod_l+0x47c>
 8008e46:	494f      	ldr	r1, [pc, #316]	; (8008f84 <_strtod_l+0x5a4>)
 8008e48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e4c:	4652      	mov	r2, sl
 8008e4e:	465b      	mov	r3, fp
 8008e50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e54:	f7f7 fbd0 	bl	80005f8 <__aeabi_dmul>
 8008e58:	4682      	mov	sl, r0
 8008e5a:	468b      	mov	fp, r1
 8008e5c:	f038 080f 	bics.w	r8, r8, #15
 8008e60:	d04f      	beq.n	8008f02 <_strtod_l+0x522>
 8008e62:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008e66:	dd22      	ble.n	8008eae <_strtod_l+0x4ce>
 8008e68:	2500      	movs	r5, #0
 8008e6a:	462e      	mov	r6, r5
 8008e6c:	9507      	str	r5, [sp, #28]
 8008e6e:	9505      	str	r5, [sp, #20]
 8008e70:	2322      	movs	r3, #34	; 0x22
 8008e72:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008f8c <_strtod_l+0x5ac>
 8008e76:	6023      	str	r3, [r4, #0]
 8008e78:	f04f 0a00 	mov.w	sl, #0
 8008e7c:	9b07      	ldr	r3, [sp, #28]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	f43f adf2 	beq.w	8008a68 <_strtod_l+0x88>
 8008e84:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008e86:	4620      	mov	r0, r4
 8008e88:	f001 fec6 	bl	800ac18 <_Bfree>
 8008e8c:	9905      	ldr	r1, [sp, #20]
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f001 fec2 	bl	800ac18 <_Bfree>
 8008e94:	4631      	mov	r1, r6
 8008e96:	4620      	mov	r0, r4
 8008e98:	f001 febe 	bl	800ac18 <_Bfree>
 8008e9c:	9907      	ldr	r1, [sp, #28]
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	f001 feba 	bl	800ac18 <_Bfree>
 8008ea4:	4629      	mov	r1, r5
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	f001 feb6 	bl	800ac18 <_Bfree>
 8008eac:	e5dc      	b.n	8008a68 <_strtod_l+0x88>
 8008eae:	4b36      	ldr	r3, [pc, #216]	; (8008f88 <_strtod_l+0x5a8>)
 8008eb0:	9304      	str	r3, [sp, #16]
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008eb8:	4650      	mov	r0, sl
 8008eba:	4659      	mov	r1, fp
 8008ebc:	4699      	mov	r9, r3
 8008ebe:	f1b8 0f01 	cmp.w	r8, #1
 8008ec2:	dc21      	bgt.n	8008f08 <_strtod_l+0x528>
 8008ec4:	b10b      	cbz	r3, 8008eca <_strtod_l+0x4ea>
 8008ec6:	4682      	mov	sl, r0
 8008ec8:	468b      	mov	fp, r1
 8008eca:	4b2f      	ldr	r3, [pc, #188]	; (8008f88 <_strtod_l+0x5a8>)
 8008ecc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008ed0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008ed4:	4652      	mov	r2, sl
 8008ed6:	465b      	mov	r3, fp
 8008ed8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008edc:	f7f7 fb8c 	bl	80005f8 <__aeabi_dmul>
 8008ee0:	4b2a      	ldr	r3, [pc, #168]	; (8008f8c <_strtod_l+0x5ac>)
 8008ee2:	460a      	mov	r2, r1
 8008ee4:	400b      	ands	r3, r1
 8008ee6:	492a      	ldr	r1, [pc, #168]	; (8008f90 <_strtod_l+0x5b0>)
 8008ee8:	428b      	cmp	r3, r1
 8008eea:	4682      	mov	sl, r0
 8008eec:	d8bc      	bhi.n	8008e68 <_strtod_l+0x488>
 8008eee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008ef2:	428b      	cmp	r3, r1
 8008ef4:	bf86      	itte	hi
 8008ef6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008f94 <_strtod_l+0x5b4>
 8008efa:	f04f 3aff 	movhi.w	sl, #4294967295
 8008efe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008f02:	2300      	movs	r3, #0
 8008f04:	9304      	str	r3, [sp, #16]
 8008f06:	e084      	b.n	8009012 <_strtod_l+0x632>
 8008f08:	f018 0f01 	tst.w	r8, #1
 8008f0c:	d005      	beq.n	8008f1a <_strtod_l+0x53a>
 8008f0e:	9b04      	ldr	r3, [sp, #16]
 8008f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f14:	f7f7 fb70 	bl	80005f8 <__aeabi_dmul>
 8008f18:	2301      	movs	r3, #1
 8008f1a:	9a04      	ldr	r2, [sp, #16]
 8008f1c:	3208      	adds	r2, #8
 8008f1e:	f109 0901 	add.w	r9, r9, #1
 8008f22:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008f26:	9204      	str	r2, [sp, #16]
 8008f28:	e7c9      	b.n	8008ebe <_strtod_l+0x4de>
 8008f2a:	d0ea      	beq.n	8008f02 <_strtod_l+0x522>
 8008f2c:	f1c8 0800 	rsb	r8, r8, #0
 8008f30:	f018 020f 	ands.w	r2, r8, #15
 8008f34:	d00a      	beq.n	8008f4c <_strtod_l+0x56c>
 8008f36:	4b13      	ldr	r3, [pc, #76]	; (8008f84 <_strtod_l+0x5a4>)
 8008f38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f3c:	4650      	mov	r0, sl
 8008f3e:	4659      	mov	r1, fp
 8008f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f44:	f7f7 fc82 	bl	800084c <__aeabi_ddiv>
 8008f48:	4682      	mov	sl, r0
 8008f4a:	468b      	mov	fp, r1
 8008f4c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008f50:	d0d7      	beq.n	8008f02 <_strtod_l+0x522>
 8008f52:	f1b8 0f1f 	cmp.w	r8, #31
 8008f56:	dd1f      	ble.n	8008f98 <_strtod_l+0x5b8>
 8008f58:	2500      	movs	r5, #0
 8008f5a:	462e      	mov	r6, r5
 8008f5c:	9507      	str	r5, [sp, #28]
 8008f5e:	9505      	str	r5, [sp, #20]
 8008f60:	2322      	movs	r3, #34	; 0x22
 8008f62:	f04f 0a00 	mov.w	sl, #0
 8008f66:	f04f 0b00 	mov.w	fp, #0
 8008f6a:	6023      	str	r3, [r4, #0]
 8008f6c:	e786      	b.n	8008e7c <_strtod_l+0x49c>
 8008f6e:	bf00      	nop
 8008f70:	0800cd81 	.word	0x0800cd81
 8008f74:	0800cdc0 	.word	0x0800cdc0
 8008f78:	0800cd79 	.word	0x0800cd79
 8008f7c:	0800cf04 	.word	0x0800cf04
 8008f80:	0800d1cb 	.word	0x0800d1cb
 8008f84:	0800d090 	.word	0x0800d090
 8008f88:	0800d068 	.word	0x0800d068
 8008f8c:	7ff00000 	.word	0x7ff00000
 8008f90:	7ca00000 	.word	0x7ca00000
 8008f94:	7fefffff 	.word	0x7fefffff
 8008f98:	f018 0310 	ands.w	r3, r8, #16
 8008f9c:	bf18      	it	ne
 8008f9e:	236a      	movne	r3, #106	; 0x6a
 8008fa0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009350 <_strtod_l+0x970>
 8008fa4:	9304      	str	r3, [sp, #16]
 8008fa6:	4650      	mov	r0, sl
 8008fa8:	4659      	mov	r1, fp
 8008faa:	2300      	movs	r3, #0
 8008fac:	f018 0f01 	tst.w	r8, #1
 8008fb0:	d004      	beq.n	8008fbc <_strtod_l+0x5dc>
 8008fb2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008fb6:	f7f7 fb1f 	bl	80005f8 <__aeabi_dmul>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008fc0:	f109 0908 	add.w	r9, r9, #8
 8008fc4:	d1f2      	bne.n	8008fac <_strtod_l+0x5cc>
 8008fc6:	b10b      	cbz	r3, 8008fcc <_strtod_l+0x5ec>
 8008fc8:	4682      	mov	sl, r0
 8008fca:	468b      	mov	fp, r1
 8008fcc:	9b04      	ldr	r3, [sp, #16]
 8008fce:	b1c3      	cbz	r3, 8009002 <_strtod_l+0x622>
 8008fd0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008fd4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	4659      	mov	r1, fp
 8008fdc:	dd11      	ble.n	8009002 <_strtod_l+0x622>
 8008fde:	2b1f      	cmp	r3, #31
 8008fe0:	f340 8124 	ble.w	800922c <_strtod_l+0x84c>
 8008fe4:	2b34      	cmp	r3, #52	; 0x34
 8008fe6:	bfde      	ittt	le
 8008fe8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008fec:	f04f 33ff 	movle.w	r3, #4294967295
 8008ff0:	fa03 f202 	lslle.w	r2, r3, r2
 8008ff4:	f04f 0a00 	mov.w	sl, #0
 8008ff8:	bfcc      	ite	gt
 8008ffa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008ffe:	ea02 0b01 	andle.w	fp, r2, r1
 8009002:	2200      	movs	r2, #0
 8009004:	2300      	movs	r3, #0
 8009006:	4650      	mov	r0, sl
 8009008:	4659      	mov	r1, fp
 800900a:	f7f7 fd5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800900e:	2800      	cmp	r0, #0
 8009010:	d1a2      	bne.n	8008f58 <_strtod_l+0x578>
 8009012:	9b07      	ldr	r3, [sp, #28]
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	9908      	ldr	r1, [sp, #32]
 8009018:	462b      	mov	r3, r5
 800901a:	463a      	mov	r2, r7
 800901c:	4620      	mov	r0, r4
 800901e:	f001 fe63 	bl	800ace8 <__s2b>
 8009022:	9007      	str	r0, [sp, #28]
 8009024:	2800      	cmp	r0, #0
 8009026:	f43f af1f 	beq.w	8008e68 <_strtod_l+0x488>
 800902a:	9b05      	ldr	r3, [sp, #20]
 800902c:	1b9e      	subs	r6, r3, r6
 800902e:	9b06      	ldr	r3, [sp, #24]
 8009030:	2b00      	cmp	r3, #0
 8009032:	bfb4      	ite	lt
 8009034:	4633      	movlt	r3, r6
 8009036:	2300      	movge	r3, #0
 8009038:	930c      	str	r3, [sp, #48]	; 0x30
 800903a:	9b06      	ldr	r3, [sp, #24]
 800903c:	2500      	movs	r5, #0
 800903e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009042:	9312      	str	r3, [sp, #72]	; 0x48
 8009044:	462e      	mov	r6, r5
 8009046:	9b07      	ldr	r3, [sp, #28]
 8009048:	4620      	mov	r0, r4
 800904a:	6859      	ldr	r1, [r3, #4]
 800904c:	f001 fda4 	bl	800ab98 <_Balloc>
 8009050:	9005      	str	r0, [sp, #20]
 8009052:	2800      	cmp	r0, #0
 8009054:	f43f af0c 	beq.w	8008e70 <_strtod_l+0x490>
 8009058:	9b07      	ldr	r3, [sp, #28]
 800905a:	691a      	ldr	r2, [r3, #16]
 800905c:	3202      	adds	r2, #2
 800905e:	f103 010c 	add.w	r1, r3, #12
 8009062:	0092      	lsls	r2, r2, #2
 8009064:	300c      	adds	r0, #12
 8009066:	f001 fd89 	bl	800ab7c <memcpy>
 800906a:	ec4b ab10 	vmov	d0, sl, fp
 800906e:	aa1a      	add	r2, sp, #104	; 0x68
 8009070:	a919      	add	r1, sp, #100	; 0x64
 8009072:	4620      	mov	r0, r4
 8009074:	f002 f97e 	bl	800b374 <__d2b>
 8009078:	ec4b ab18 	vmov	d8, sl, fp
 800907c:	9018      	str	r0, [sp, #96]	; 0x60
 800907e:	2800      	cmp	r0, #0
 8009080:	f43f aef6 	beq.w	8008e70 <_strtod_l+0x490>
 8009084:	2101      	movs	r1, #1
 8009086:	4620      	mov	r0, r4
 8009088:	f001 fec8 	bl	800ae1c <__i2b>
 800908c:	4606      	mov	r6, r0
 800908e:	2800      	cmp	r0, #0
 8009090:	f43f aeee 	beq.w	8008e70 <_strtod_l+0x490>
 8009094:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009096:	9904      	ldr	r1, [sp, #16]
 8009098:	2b00      	cmp	r3, #0
 800909a:	bfab      	itete	ge
 800909c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800909e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80090a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80090a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80090a6:	bfac      	ite	ge
 80090a8:	eb03 0902 	addge.w	r9, r3, r2
 80090ac:	1ad7      	sublt	r7, r2, r3
 80090ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80090b0:	eba3 0801 	sub.w	r8, r3, r1
 80090b4:	4490      	add	r8, r2
 80090b6:	4ba1      	ldr	r3, [pc, #644]	; (800933c <_strtod_l+0x95c>)
 80090b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80090bc:	4598      	cmp	r8, r3
 80090be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80090c2:	f280 80c7 	bge.w	8009254 <_strtod_l+0x874>
 80090c6:	eba3 0308 	sub.w	r3, r3, r8
 80090ca:	2b1f      	cmp	r3, #31
 80090cc:	eba2 0203 	sub.w	r2, r2, r3
 80090d0:	f04f 0101 	mov.w	r1, #1
 80090d4:	f300 80b1 	bgt.w	800923a <_strtod_l+0x85a>
 80090d8:	fa01 f303 	lsl.w	r3, r1, r3
 80090dc:	930d      	str	r3, [sp, #52]	; 0x34
 80090de:	2300      	movs	r3, #0
 80090e0:	9308      	str	r3, [sp, #32]
 80090e2:	eb09 0802 	add.w	r8, r9, r2
 80090e6:	9b04      	ldr	r3, [sp, #16]
 80090e8:	45c1      	cmp	r9, r8
 80090ea:	4417      	add	r7, r2
 80090ec:	441f      	add	r7, r3
 80090ee:	464b      	mov	r3, r9
 80090f0:	bfa8      	it	ge
 80090f2:	4643      	movge	r3, r8
 80090f4:	42bb      	cmp	r3, r7
 80090f6:	bfa8      	it	ge
 80090f8:	463b      	movge	r3, r7
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	bfc2      	ittt	gt
 80090fe:	eba8 0803 	subgt.w	r8, r8, r3
 8009102:	1aff      	subgt	r7, r7, r3
 8009104:	eba9 0903 	subgt.w	r9, r9, r3
 8009108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800910a:	2b00      	cmp	r3, #0
 800910c:	dd17      	ble.n	800913e <_strtod_l+0x75e>
 800910e:	4631      	mov	r1, r6
 8009110:	461a      	mov	r2, r3
 8009112:	4620      	mov	r0, r4
 8009114:	f001 ff42 	bl	800af9c <__pow5mult>
 8009118:	4606      	mov	r6, r0
 800911a:	2800      	cmp	r0, #0
 800911c:	f43f aea8 	beq.w	8008e70 <_strtod_l+0x490>
 8009120:	4601      	mov	r1, r0
 8009122:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009124:	4620      	mov	r0, r4
 8009126:	f001 fe8f 	bl	800ae48 <__multiply>
 800912a:	900b      	str	r0, [sp, #44]	; 0x2c
 800912c:	2800      	cmp	r0, #0
 800912e:	f43f ae9f 	beq.w	8008e70 <_strtod_l+0x490>
 8009132:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009134:	4620      	mov	r0, r4
 8009136:	f001 fd6f 	bl	800ac18 <_Bfree>
 800913a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800913c:	9318      	str	r3, [sp, #96]	; 0x60
 800913e:	f1b8 0f00 	cmp.w	r8, #0
 8009142:	f300 808c 	bgt.w	800925e <_strtod_l+0x87e>
 8009146:	9b06      	ldr	r3, [sp, #24]
 8009148:	2b00      	cmp	r3, #0
 800914a:	dd08      	ble.n	800915e <_strtod_l+0x77e>
 800914c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800914e:	9905      	ldr	r1, [sp, #20]
 8009150:	4620      	mov	r0, r4
 8009152:	f001 ff23 	bl	800af9c <__pow5mult>
 8009156:	9005      	str	r0, [sp, #20]
 8009158:	2800      	cmp	r0, #0
 800915a:	f43f ae89 	beq.w	8008e70 <_strtod_l+0x490>
 800915e:	2f00      	cmp	r7, #0
 8009160:	dd08      	ble.n	8009174 <_strtod_l+0x794>
 8009162:	9905      	ldr	r1, [sp, #20]
 8009164:	463a      	mov	r2, r7
 8009166:	4620      	mov	r0, r4
 8009168:	f001 ff72 	bl	800b050 <__lshift>
 800916c:	9005      	str	r0, [sp, #20]
 800916e:	2800      	cmp	r0, #0
 8009170:	f43f ae7e 	beq.w	8008e70 <_strtod_l+0x490>
 8009174:	f1b9 0f00 	cmp.w	r9, #0
 8009178:	dd08      	ble.n	800918c <_strtod_l+0x7ac>
 800917a:	4631      	mov	r1, r6
 800917c:	464a      	mov	r2, r9
 800917e:	4620      	mov	r0, r4
 8009180:	f001 ff66 	bl	800b050 <__lshift>
 8009184:	4606      	mov	r6, r0
 8009186:	2800      	cmp	r0, #0
 8009188:	f43f ae72 	beq.w	8008e70 <_strtod_l+0x490>
 800918c:	9a05      	ldr	r2, [sp, #20]
 800918e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009190:	4620      	mov	r0, r4
 8009192:	f001 ffe9 	bl	800b168 <__mdiff>
 8009196:	4605      	mov	r5, r0
 8009198:	2800      	cmp	r0, #0
 800919a:	f43f ae69 	beq.w	8008e70 <_strtod_l+0x490>
 800919e:	68c3      	ldr	r3, [r0, #12]
 80091a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80091a2:	2300      	movs	r3, #0
 80091a4:	60c3      	str	r3, [r0, #12]
 80091a6:	4631      	mov	r1, r6
 80091a8:	f001 ffc2 	bl	800b130 <__mcmp>
 80091ac:	2800      	cmp	r0, #0
 80091ae:	da60      	bge.n	8009272 <_strtod_l+0x892>
 80091b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091b2:	ea53 030a 	orrs.w	r3, r3, sl
 80091b6:	f040 8082 	bne.w	80092be <_strtod_l+0x8de>
 80091ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d17d      	bne.n	80092be <_strtod_l+0x8de>
 80091c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80091c6:	0d1b      	lsrs	r3, r3, #20
 80091c8:	051b      	lsls	r3, r3, #20
 80091ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80091ce:	d976      	bls.n	80092be <_strtod_l+0x8de>
 80091d0:	696b      	ldr	r3, [r5, #20]
 80091d2:	b913      	cbnz	r3, 80091da <_strtod_l+0x7fa>
 80091d4:	692b      	ldr	r3, [r5, #16]
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	dd71      	ble.n	80092be <_strtod_l+0x8de>
 80091da:	4629      	mov	r1, r5
 80091dc:	2201      	movs	r2, #1
 80091de:	4620      	mov	r0, r4
 80091e0:	f001 ff36 	bl	800b050 <__lshift>
 80091e4:	4631      	mov	r1, r6
 80091e6:	4605      	mov	r5, r0
 80091e8:	f001 ffa2 	bl	800b130 <__mcmp>
 80091ec:	2800      	cmp	r0, #0
 80091ee:	dd66      	ble.n	80092be <_strtod_l+0x8de>
 80091f0:	9904      	ldr	r1, [sp, #16]
 80091f2:	4a53      	ldr	r2, [pc, #332]	; (8009340 <_strtod_l+0x960>)
 80091f4:	465b      	mov	r3, fp
 80091f6:	2900      	cmp	r1, #0
 80091f8:	f000 8081 	beq.w	80092fe <_strtod_l+0x91e>
 80091fc:	ea02 010b 	and.w	r1, r2, fp
 8009200:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009204:	dc7b      	bgt.n	80092fe <_strtod_l+0x91e>
 8009206:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800920a:	f77f aea9 	ble.w	8008f60 <_strtod_l+0x580>
 800920e:	4b4d      	ldr	r3, [pc, #308]	; (8009344 <_strtod_l+0x964>)
 8009210:	4650      	mov	r0, sl
 8009212:	4659      	mov	r1, fp
 8009214:	2200      	movs	r2, #0
 8009216:	f7f7 f9ef 	bl	80005f8 <__aeabi_dmul>
 800921a:	460b      	mov	r3, r1
 800921c:	4303      	orrs	r3, r0
 800921e:	bf08      	it	eq
 8009220:	2322      	moveq	r3, #34	; 0x22
 8009222:	4682      	mov	sl, r0
 8009224:	468b      	mov	fp, r1
 8009226:	bf08      	it	eq
 8009228:	6023      	streq	r3, [r4, #0]
 800922a:	e62b      	b.n	8008e84 <_strtod_l+0x4a4>
 800922c:	f04f 32ff 	mov.w	r2, #4294967295
 8009230:	fa02 f303 	lsl.w	r3, r2, r3
 8009234:	ea03 0a0a 	and.w	sl, r3, sl
 8009238:	e6e3      	b.n	8009002 <_strtod_l+0x622>
 800923a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800923e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009242:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009246:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800924a:	fa01 f308 	lsl.w	r3, r1, r8
 800924e:	9308      	str	r3, [sp, #32]
 8009250:	910d      	str	r1, [sp, #52]	; 0x34
 8009252:	e746      	b.n	80090e2 <_strtod_l+0x702>
 8009254:	2300      	movs	r3, #0
 8009256:	9308      	str	r3, [sp, #32]
 8009258:	2301      	movs	r3, #1
 800925a:	930d      	str	r3, [sp, #52]	; 0x34
 800925c:	e741      	b.n	80090e2 <_strtod_l+0x702>
 800925e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009260:	4642      	mov	r2, r8
 8009262:	4620      	mov	r0, r4
 8009264:	f001 fef4 	bl	800b050 <__lshift>
 8009268:	9018      	str	r0, [sp, #96]	; 0x60
 800926a:	2800      	cmp	r0, #0
 800926c:	f47f af6b 	bne.w	8009146 <_strtod_l+0x766>
 8009270:	e5fe      	b.n	8008e70 <_strtod_l+0x490>
 8009272:	465f      	mov	r7, fp
 8009274:	d16e      	bne.n	8009354 <_strtod_l+0x974>
 8009276:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009278:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800927c:	b342      	cbz	r2, 80092d0 <_strtod_l+0x8f0>
 800927e:	4a32      	ldr	r2, [pc, #200]	; (8009348 <_strtod_l+0x968>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d128      	bne.n	80092d6 <_strtod_l+0x8f6>
 8009284:	9b04      	ldr	r3, [sp, #16]
 8009286:	4651      	mov	r1, sl
 8009288:	b1eb      	cbz	r3, 80092c6 <_strtod_l+0x8e6>
 800928a:	4b2d      	ldr	r3, [pc, #180]	; (8009340 <_strtod_l+0x960>)
 800928c:	403b      	ands	r3, r7
 800928e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009292:	f04f 32ff 	mov.w	r2, #4294967295
 8009296:	d819      	bhi.n	80092cc <_strtod_l+0x8ec>
 8009298:	0d1b      	lsrs	r3, r3, #20
 800929a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800929e:	fa02 f303 	lsl.w	r3, r2, r3
 80092a2:	4299      	cmp	r1, r3
 80092a4:	d117      	bne.n	80092d6 <_strtod_l+0x8f6>
 80092a6:	4b29      	ldr	r3, [pc, #164]	; (800934c <_strtod_l+0x96c>)
 80092a8:	429f      	cmp	r7, r3
 80092aa:	d102      	bne.n	80092b2 <_strtod_l+0x8d2>
 80092ac:	3101      	adds	r1, #1
 80092ae:	f43f addf 	beq.w	8008e70 <_strtod_l+0x490>
 80092b2:	4b23      	ldr	r3, [pc, #140]	; (8009340 <_strtod_l+0x960>)
 80092b4:	403b      	ands	r3, r7
 80092b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80092ba:	f04f 0a00 	mov.w	sl, #0
 80092be:	9b04      	ldr	r3, [sp, #16]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d1a4      	bne.n	800920e <_strtod_l+0x82e>
 80092c4:	e5de      	b.n	8008e84 <_strtod_l+0x4a4>
 80092c6:	f04f 33ff 	mov.w	r3, #4294967295
 80092ca:	e7ea      	b.n	80092a2 <_strtod_l+0x8c2>
 80092cc:	4613      	mov	r3, r2
 80092ce:	e7e8      	b.n	80092a2 <_strtod_l+0x8c2>
 80092d0:	ea53 030a 	orrs.w	r3, r3, sl
 80092d4:	d08c      	beq.n	80091f0 <_strtod_l+0x810>
 80092d6:	9b08      	ldr	r3, [sp, #32]
 80092d8:	b1db      	cbz	r3, 8009312 <_strtod_l+0x932>
 80092da:	423b      	tst	r3, r7
 80092dc:	d0ef      	beq.n	80092be <_strtod_l+0x8de>
 80092de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092e0:	9a04      	ldr	r2, [sp, #16]
 80092e2:	4650      	mov	r0, sl
 80092e4:	4659      	mov	r1, fp
 80092e6:	b1c3      	cbz	r3, 800931a <_strtod_l+0x93a>
 80092e8:	f7ff fb5c 	bl	80089a4 <sulp>
 80092ec:	4602      	mov	r2, r0
 80092ee:	460b      	mov	r3, r1
 80092f0:	ec51 0b18 	vmov	r0, r1, d8
 80092f4:	f7f6 ffca 	bl	800028c <__adddf3>
 80092f8:	4682      	mov	sl, r0
 80092fa:	468b      	mov	fp, r1
 80092fc:	e7df      	b.n	80092be <_strtod_l+0x8de>
 80092fe:	4013      	ands	r3, r2
 8009300:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009304:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009308:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800930c:	f04f 3aff 	mov.w	sl, #4294967295
 8009310:	e7d5      	b.n	80092be <_strtod_l+0x8de>
 8009312:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009314:	ea13 0f0a 	tst.w	r3, sl
 8009318:	e7e0      	b.n	80092dc <_strtod_l+0x8fc>
 800931a:	f7ff fb43 	bl	80089a4 <sulp>
 800931e:	4602      	mov	r2, r0
 8009320:	460b      	mov	r3, r1
 8009322:	ec51 0b18 	vmov	r0, r1, d8
 8009326:	f7f6 ffaf 	bl	8000288 <__aeabi_dsub>
 800932a:	2200      	movs	r2, #0
 800932c:	2300      	movs	r3, #0
 800932e:	4682      	mov	sl, r0
 8009330:	468b      	mov	fp, r1
 8009332:	f7f7 fbc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009336:	2800      	cmp	r0, #0
 8009338:	d0c1      	beq.n	80092be <_strtod_l+0x8de>
 800933a:	e611      	b.n	8008f60 <_strtod_l+0x580>
 800933c:	fffffc02 	.word	0xfffffc02
 8009340:	7ff00000 	.word	0x7ff00000
 8009344:	39500000 	.word	0x39500000
 8009348:	000fffff 	.word	0x000fffff
 800934c:	7fefffff 	.word	0x7fefffff
 8009350:	0800cdd8 	.word	0x0800cdd8
 8009354:	4631      	mov	r1, r6
 8009356:	4628      	mov	r0, r5
 8009358:	f002 f868 	bl	800b42c <__ratio>
 800935c:	ec59 8b10 	vmov	r8, r9, d0
 8009360:	ee10 0a10 	vmov	r0, s0
 8009364:	2200      	movs	r2, #0
 8009366:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800936a:	4649      	mov	r1, r9
 800936c:	f7f7 fbc0 	bl	8000af0 <__aeabi_dcmple>
 8009370:	2800      	cmp	r0, #0
 8009372:	d07a      	beq.n	800946a <_strtod_l+0xa8a>
 8009374:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009376:	2b00      	cmp	r3, #0
 8009378:	d04a      	beq.n	8009410 <_strtod_l+0xa30>
 800937a:	4b95      	ldr	r3, [pc, #596]	; (80095d0 <_strtod_l+0xbf0>)
 800937c:	2200      	movs	r2, #0
 800937e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009382:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80095d0 <_strtod_l+0xbf0>
 8009386:	f04f 0800 	mov.w	r8, #0
 800938a:	4b92      	ldr	r3, [pc, #584]	; (80095d4 <_strtod_l+0xbf4>)
 800938c:	403b      	ands	r3, r7
 800938e:	930d      	str	r3, [sp, #52]	; 0x34
 8009390:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009392:	4b91      	ldr	r3, [pc, #580]	; (80095d8 <_strtod_l+0xbf8>)
 8009394:	429a      	cmp	r2, r3
 8009396:	f040 80b0 	bne.w	80094fa <_strtod_l+0xb1a>
 800939a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800939e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80093a2:	ec4b ab10 	vmov	d0, sl, fp
 80093a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80093aa:	f001 ff67 	bl	800b27c <__ulp>
 80093ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80093b2:	ec53 2b10 	vmov	r2, r3, d0
 80093b6:	f7f7 f91f 	bl	80005f8 <__aeabi_dmul>
 80093ba:	4652      	mov	r2, sl
 80093bc:	465b      	mov	r3, fp
 80093be:	f7f6 ff65 	bl	800028c <__adddf3>
 80093c2:	460b      	mov	r3, r1
 80093c4:	4983      	ldr	r1, [pc, #524]	; (80095d4 <_strtod_l+0xbf4>)
 80093c6:	4a85      	ldr	r2, [pc, #532]	; (80095dc <_strtod_l+0xbfc>)
 80093c8:	4019      	ands	r1, r3
 80093ca:	4291      	cmp	r1, r2
 80093cc:	4682      	mov	sl, r0
 80093ce:	d960      	bls.n	8009492 <_strtod_l+0xab2>
 80093d0:	ee18 3a90 	vmov	r3, s17
 80093d4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80093d8:	4293      	cmp	r3, r2
 80093da:	d104      	bne.n	80093e6 <_strtod_l+0xa06>
 80093dc:	ee18 3a10 	vmov	r3, s16
 80093e0:	3301      	adds	r3, #1
 80093e2:	f43f ad45 	beq.w	8008e70 <_strtod_l+0x490>
 80093e6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80095e8 <_strtod_l+0xc08>
 80093ea:	f04f 3aff 	mov.w	sl, #4294967295
 80093ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80093f0:	4620      	mov	r0, r4
 80093f2:	f001 fc11 	bl	800ac18 <_Bfree>
 80093f6:	9905      	ldr	r1, [sp, #20]
 80093f8:	4620      	mov	r0, r4
 80093fa:	f001 fc0d 	bl	800ac18 <_Bfree>
 80093fe:	4631      	mov	r1, r6
 8009400:	4620      	mov	r0, r4
 8009402:	f001 fc09 	bl	800ac18 <_Bfree>
 8009406:	4629      	mov	r1, r5
 8009408:	4620      	mov	r0, r4
 800940a:	f001 fc05 	bl	800ac18 <_Bfree>
 800940e:	e61a      	b.n	8009046 <_strtod_l+0x666>
 8009410:	f1ba 0f00 	cmp.w	sl, #0
 8009414:	d11b      	bne.n	800944e <_strtod_l+0xa6e>
 8009416:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800941a:	b9f3      	cbnz	r3, 800945a <_strtod_l+0xa7a>
 800941c:	4b6c      	ldr	r3, [pc, #432]	; (80095d0 <_strtod_l+0xbf0>)
 800941e:	2200      	movs	r2, #0
 8009420:	4640      	mov	r0, r8
 8009422:	4649      	mov	r1, r9
 8009424:	f7f7 fb5a 	bl	8000adc <__aeabi_dcmplt>
 8009428:	b9d0      	cbnz	r0, 8009460 <_strtod_l+0xa80>
 800942a:	4640      	mov	r0, r8
 800942c:	4649      	mov	r1, r9
 800942e:	4b6c      	ldr	r3, [pc, #432]	; (80095e0 <_strtod_l+0xc00>)
 8009430:	2200      	movs	r2, #0
 8009432:	f7f7 f8e1 	bl	80005f8 <__aeabi_dmul>
 8009436:	4680      	mov	r8, r0
 8009438:	4689      	mov	r9, r1
 800943a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800943e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009442:	9315      	str	r3, [sp, #84]	; 0x54
 8009444:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009448:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800944c:	e79d      	b.n	800938a <_strtod_l+0x9aa>
 800944e:	f1ba 0f01 	cmp.w	sl, #1
 8009452:	d102      	bne.n	800945a <_strtod_l+0xa7a>
 8009454:	2f00      	cmp	r7, #0
 8009456:	f43f ad83 	beq.w	8008f60 <_strtod_l+0x580>
 800945a:	4b62      	ldr	r3, [pc, #392]	; (80095e4 <_strtod_l+0xc04>)
 800945c:	2200      	movs	r2, #0
 800945e:	e78e      	b.n	800937e <_strtod_l+0x99e>
 8009460:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80095e0 <_strtod_l+0xc00>
 8009464:	f04f 0800 	mov.w	r8, #0
 8009468:	e7e7      	b.n	800943a <_strtod_l+0xa5a>
 800946a:	4b5d      	ldr	r3, [pc, #372]	; (80095e0 <_strtod_l+0xc00>)
 800946c:	4640      	mov	r0, r8
 800946e:	4649      	mov	r1, r9
 8009470:	2200      	movs	r2, #0
 8009472:	f7f7 f8c1 	bl	80005f8 <__aeabi_dmul>
 8009476:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009478:	4680      	mov	r8, r0
 800947a:	4689      	mov	r9, r1
 800947c:	b933      	cbnz	r3, 800948c <_strtod_l+0xaac>
 800947e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009482:	900e      	str	r0, [sp, #56]	; 0x38
 8009484:	930f      	str	r3, [sp, #60]	; 0x3c
 8009486:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800948a:	e7dd      	b.n	8009448 <_strtod_l+0xa68>
 800948c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009490:	e7f9      	b.n	8009486 <_strtod_l+0xaa6>
 8009492:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009496:	9b04      	ldr	r3, [sp, #16]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d1a8      	bne.n	80093ee <_strtod_l+0xa0e>
 800949c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80094a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80094a2:	0d1b      	lsrs	r3, r3, #20
 80094a4:	051b      	lsls	r3, r3, #20
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d1a1      	bne.n	80093ee <_strtod_l+0xa0e>
 80094aa:	4640      	mov	r0, r8
 80094ac:	4649      	mov	r1, r9
 80094ae:	f7f7 fd11 	bl	8000ed4 <__aeabi_d2lz>
 80094b2:	f7f7 f873 	bl	800059c <__aeabi_l2d>
 80094b6:	4602      	mov	r2, r0
 80094b8:	460b      	mov	r3, r1
 80094ba:	4640      	mov	r0, r8
 80094bc:	4649      	mov	r1, r9
 80094be:	f7f6 fee3 	bl	8000288 <__aeabi_dsub>
 80094c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094c8:	ea43 030a 	orr.w	r3, r3, sl
 80094cc:	4313      	orrs	r3, r2
 80094ce:	4680      	mov	r8, r0
 80094d0:	4689      	mov	r9, r1
 80094d2:	d055      	beq.n	8009580 <_strtod_l+0xba0>
 80094d4:	a336      	add	r3, pc, #216	; (adr r3, 80095b0 <_strtod_l+0xbd0>)
 80094d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094da:	f7f7 faff 	bl	8000adc <__aeabi_dcmplt>
 80094de:	2800      	cmp	r0, #0
 80094e0:	f47f acd0 	bne.w	8008e84 <_strtod_l+0x4a4>
 80094e4:	a334      	add	r3, pc, #208	; (adr r3, 80095b8 <_strtod_l+0xbd8>)
 80094e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ea:	4640      	mov	r0, r8
 80094ec:	4649      	mov	r1, r9
 80094ee:	f7f7 fb13 	bl	8000b18 <__aeabi_dcmpgt>
 80094f2:	2800      	cmp	r0, #0
 80094f4:	f43f af7b 	beq.w	80093ee <_strtod_l+0xa0e>
 80094f8:	e4c4      	b.n	8008e84 <_strtod_l+0x4a4>
 80094fa:	9b04      	ldr	r3, [sp, #16]
 80094fc:	b333      	cbz	r3, 800954c <_strtod_l+0xb6c>
 80094fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009500:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009504:	d822      	bhi.n	800954c <_strtod_l+0xb6c>
 8009506:	a32e      	add	r3, pc, #184	; (adr r3, 80095c0 <_strtod_l+0xbe0>)
 8009508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950c:	4640      	mov	r0, r8
 800950e:	4649      	mov	r1, r9
 8009510:	f7f7 faee 	bl	8000af0 <__aeabi_dcmple>
 8009514:	b1a0      	cbz	r0, 8009540 <_strtod_l+0xb60>
 8009516:	4649      	mov	r1, r9
 8009518:	4640      	mov	r0, r8
 800951a:	f7f7 fb45 	bl	8000ba8 <__aeabi_d2uiz>
 800951e:	2801      	cmp	r0, #1
 8009520:	bf38      	it	cc
 8009522:	2001      	movcc	r0, #1
 8009524:	f7f6 ffee 	bl	8000504 <__aeabi_ui2d>
 8009528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800952a:	4680      	mov	r8, r0
 800952c:	4689      	mov	r9, r1
 800952e:	bb23      	cbnz	r3, 800957a <_strtod_l+0xb9a>
 8009530:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009534:	9010      	str	r0, [sp, #64]	; 0x40
 8009536:	9311      	str	r3, [sp, #68]	; 0x44
 8009538:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800953c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009542:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009544:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009548:	1a9b      	subs	r3, r3, r2
 800954a:	9309      	str	r3, [sp, #36]	; 0x24
 800954c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009550:	eeb0 0a48 	vmov.f32	s0, s16
 8009554:	eef0 0a68 	vmov.f32	s1, s17
 8009558:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800955c:	f001 fe8e 	bl	800b27c <__ulp>
 8009560:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009564:	ec53 2b10 	vmov	r2, r3, d0
 8009568:	f7f7 f846 	bl	80005f8 <__aeabi_dmul>
 800956c:	ec53 2b18 	vmov	r2, r3, d8
 8009570:	f7f6 fe8c 	bl	800028c <__adddf3>
 8009574:	4682      	mov	sl, r0
 8009576:	468b      	mov	fp, r1
 8009578:	e78d      	b.n	8009496 <_strtod_l+0xab6>
 800957a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800957e:	e7db      	b.n	8009538 <_strtod_l+0xb58>
 8009580:	a311      	add	r3, pc, #68	; (adr r3, 80095c8 <_strtod_l+0xbe8>)
 8009582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009586:	f7f7 faa9 	bl	8000adc <__aeabi_dcmplt>
 800958a:	e7b2      	b.n	80094f2 <_strtod_l+0xb12>
 800958c:	2300      	movs	r3, #0
 800958e:	930a      	str	r3, [sp, #40]	; 0x28
 8009590:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009592:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009594:	6013      	str	r3, [r2, #0]
 8009596:	f7ff ba6b 	b.w	8008a70 <_strtod_l+0x90>
 800959a:	2a65      	cmp	r2, #101	; 0x65
 800959c:	f43f ab5f 	beq.w	8008c5e <_strtod_l+0x27e>
 80095a0:	2a45      	cmp	r2, #69	; 0x45
 80095a2:	f43f ab5c 	beq.w	8008c5e <_strtod_l+0x27e>
 80095a6:	2301      	movs	r3, #1
 80095a8:	f7ff bb94 	b.w	8008cd4 <_strtod_l+0x2f4>
 80095ac:	f3af 8000 	nop.w
 80095b0:	94a03595 	.word	0x94a03595
 80095b4:	3fdfffff 	.word	0x3fdfffff
 80095b8:	35afe535 	.word	0x35afe535
 80095bc:	3fe00000 	.word	0x3fe00000
 80095c0:	ffc00000 	.word	0xffc00000
 80095c4:	41dfffff 	.word	0x41dfffff
 80095c8:	94a03595 	.word	0x94a03595
 80095cc:	3fcfffff 	.word	0x3fcfffff
 80095d0:	3ff00000 	.word	0x3ff00000
 80095d4:	7ff00000 	.word	0x7ff00000
 80095d8:	7fe00000 	.word	0x7fe00000
 80095dc:	7c9fffff 	.word	0x7c9fffff
 80095e0:	3fe00000 	.word	0x3fe00000
 80095e4:	bff00000 	.word	0xbff00000
 80095e8:	7fefffff 	.word	0x7fefffff

080095ec <_strtod_r>:
 80095ec:	4b01      	ldr	r3, [pc, #4]	; (80095f4 <_strtod_r+0x8>)
 80095ee:	f7ff b9f7 	b.w	80089e0 <_strtod_l>
 80095f2:	bf00      	nop
 80095f4:	20000158 	.word	0x20000158

080095f8 <_strtol_l.constprop.0>:
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095fe:	d001      	beq.n	8009604 <_strtol_l.constprop.0+0xc>
 8009600:	2b24      	cmp	r3, #36	; 0x24
 8009602:	d906      	bls.n	8009612 <_strtol_l.constprop.0+0x1a>
 8009604:	f7fe fa68 	bl	8007ad8 <__errno>
 8009608:	2316      	movs	r3, #22
 800960a:	6003      	str	r3, [r0, #0]
 800960c:	2000      	movs	r0, #0
 800960e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009612:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80096f8 <_strtol_l.constprop.0+0x100>
 8009616:	460d      	mov	r5, r1
 8009618:	462e      	mov	r6, r5
 800961a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800961e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009622:	f017 0708 	ands.w	r7, r7, #8
 8009626:	d1f7      	bne.n	8009618 <_strtol_l.constprop.0+0x20>
 8009628:	2c2d      	cmp	r4, #45	; 0x2d
 800962a:	d132      	bne.n	8009692 <_strtol_l.constprop.0+0x9a>
 800962c:	782c      	ldrb	r4, [r5, #0]
 800962e:	2701      	movs	r7, #1
 8009630:	1cb5      	adds	r5, r6, #2
 8009632:	2b00      	cmp	r3, #0
 8009634:	d05b      	beq.n	80096ee <_strtol_l.constprop.0+0xf6>
 8009636:	2b10      	cmp	r3, #16
 8009638:	d109      	bne.n	800964e <_strtol_l.constprop.0+0x56>
 800963a:	2c30      	cmp	r4, #48	; 0x30
 800963c:	d107      	bne.n	800964e <_strtol_l.constprop.0+0x56>
 800963e:	782c      	ldrb	r4, [r5, #0]
 8009640:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009644:	2c58      	cmp	r4, #88	; 0x58
 8009646:	d14d      	bne.n	80096e4 <_strtol_l.constprop.0+0xec>
 8009648:	786c      	ldrb	r4, [r5, #1]
 800964a:	2310      	movs	r3, #16
 800964c:	3502      	adds	r5, #2
 800964e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009652:	f108 38ff 	add.w	r8, r8, #4294967295
 8009656:	f04f 0c00 	mov.w	ip, #0
 800965a:	fbb8 f9f3 	udiv	r9, r8, r3
 800965e:	4666      	mov	r6, ip
 8009660:	fb03 8a19 	mls	sl, r3, r9, r8
 8009664:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009668:	f1be 0f09 	cmp.w	lr, #9
 800966c:	d816      	bhi.n	800969c <_strtol_l.constprop.0+0xa4>
 800966e:	4674      	mov	r4, lr
 8009670:	42a3      	cmp	r3, r4
 8009672:	dd24      	ble.n	80096be <_strtol_l.constprop.0+0xc6>
 8009674:	f1bc 0f00 	cmp.w	ip, #0
 8009678:	db1e      	blt.n	80096b8 <_strtol_l.constprop.0+0xc0>
 800967a:	45b1      	cmp	r9, r6
 800967c:	d31c      	bcc.n	80096b8 <_strtol_l.constprop.0+0xc0>
 800967e:	d101      	bne.n	8009684 <_strtol_l.constprop.0+0x8c>
 8009680:	45a2      	cmp	sl, r4
 8009682:	db19      	blt.n	80096b8 <_strtol_l.constprop.0+0xc0>
 8009684:	fb06 4603 	mla	r6, r6, r3, r4
 8009688:	f04f 0c01 	mov.w	ip, #1
 800968c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009690:	e7e8      	b.n	8009664 <_strtol_l.constprop.0+0x6c>
 8009692:	2c2b      	cmp	r4, #43	; 0x2b
 8009694:	bf04      	itt	eq
 8009696:	782c      	ldrbeq	r4, [r5, #0]
 8009698:	1cb5      	addeq	r5, r6, #2
 800969a:	e7ca      	b.n	8009632 <_strtol_l.constprop.0+0x3a>
 800969c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80096a0:	f1be 0f19 	cmp.w	lr, #25
 80096a4:	d801      	bhi.n	80096aa <_strtol_l.constprop.0+0xb2>
 80096a6:	3c37      	subs	r4, #55	; 0x37
 80096a8:	e7e2      	b.n	8009670 <_strtol_l.constprop.0+0x78>
 80096aa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80096ae:	f1be 0f19 	cmp.w	lr, #25
 80096b2:	d804      	bhi.n	80096be <_strtol_l.constprop.0+0xc6>
 80096b4:	3c57      	subs	r4, #87	; 0x57
 80096b6:	e7db      	b.n	8009670 <_strtol_l.constprop.0+0x78>
 80096b8:	f04f 3cff 	mov.w	ip, #4294967295
 80096bc:	e7e6      	b.n	800968c <_strtol_l.constprop.0+0x94>
 80096be:	f1bc 0f00 	cmp.w	ip, #0
 80096c2:	da05      	bge.n	80096d0 <_strtol_l.constprop.0+0xd8>
 80096c4:	2322      	movs	r3, #34	; 0x22
 80096c6:	6003      	str	r3, [r0, #0]
 80096c8:	4646      	mov	r6, r8
 80096ca:	b942      	cbnz	r2, 80096de <_strtol_l.constprop.0+0xe6>
 80096cc:	4630      	mov	r0, r6
 80096ce:	e79e      	b.n	800960e <_strtol_l.constprop.0+0x16>
 80096d0:	b107      	cbz	r7, 80096d4 <_strtol_l.constprop.0+0xdc>
 80096d2:	4276      	negs	r6, r6
 80096d4:	2a00      	cmp	r2, #0
 80096d6:	d0f9      	beq.n	80096cc <_strtol_l.constprop.0+0xd4>
 80096d8:	f1bc 0f00 	cmp.w	ip, #0
 80096dc:	d000      	beq.n	80096e0 <_strtol_l.constprop.0+0xe8>
 80096de:	1e69      	subs	r1, r5, #1
 80096e0:	6011      	str	r1, [r2, #0]
 80096e2:	e7f3      	b.n	80096cc <_strtol_l.constprop.0+0xd4>
 80096e4:	2430      	movs	r4, #48	; 0x30
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1b1      	bne.n	800964e <_strtol_l.constprop.0+0x56>
 80096ea:	2308      	movs	r3, #8
 80096ec:	e7af      	b.n	800964e <_strtol_l.constprop.0+0x56>
 80096ee:	2c30      	cmp	r4, #48	; 0x30
 80096f0:	d0a5      	beq.n	800963e <_strtol_l.constprop.0+0x46>
 80096f2:	230a      	movs	r3, #10
 80096f4:	e7ab      	b.n	800964e <_strtol_l.constprop.0+0x56>
 80096f6:	bf00      	nop
 80096f8:	0800ce01 	.word	0x0800ce01

080096fc <_strtol_r>:
 80096fc:	f7ff bf7c 	b.w	80095f8 <_strtol_l.constprop.0>

08009700 <_write_r>:
 8009700:	b538      	push	{r3, r4, r5, lr}
 8009702:	4d07      	ldr	r5, [pc, #28]	; (8009720 <_write_r+0x20>)
 8009704:	4604      	mov	r4, r0
 8009706:	4608      	mov	r0, r1
 8009708:	4611      	mov	r1, r2
 800970a:	2200      	movs	r2, #0
 800970c:	602a      	str	r2, [r5, #0]
 800970e:	461a      	mov	r2, r3
 8009710:	f7f9 fbbf 	bl	8002e92 <_write>
 8009714:	1c43      	adds	r3, r0, #1
 8009716:	d102      	bne.n	800971e <_write_r+0x1e>
 8009718:	682b      	ldr	r3, [r5, #0]
 800971a:	b103      	cbz	r3, 800971e <_write_r+0x1e>
 800971c:	6023      	str	r3, [r4, #0]
 800971e:	bd38      	pop	{r3, r4, r5, pc}
 8009720:	20000920 	.word	0x20000920

08009724 <_close_r>:
 8009724:	b538      	push	{r3, r4, r5, lr}
 8009726:	4d06      	ldr	r5, [pc, #24]	; (8009740 <_close_r+0x1c>)
 8009728:	2300      	movs	r3, #0
 800972a:	4604      	mov	r4, r0
 800972c:	4608      	mov	r0, r1
 800972e:	602b      	str	r3, [r5, #0]
 8009730:	f7f9 fbcb 	bl	8002eca <_close>
 8009734:	1c43      	adds	r3, r0, #1
 8009736:	d102      	bne.n	800973e <_close_r+0x1a>
 8009738:	682b      	ldr	r3, [r5, #0]
 800973a:	b103      	cbz	r3, 800973e <_close_r+0x1a>
 800973c:	6023      	str	r3, [r4, #0]
 800973e:	bd38      	pop	{r3, r4, r5, pc}
 8009740:	20000920 	.word	0x20000920

08009744 <quorem>:
 8009744:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009748:	6903      	ldr	r3, [r0, #16]
 800974a:	690c      	ldr	r4, [r1, #16]
 800974c:	42a3      	cmp	r3, r4
 800974e:	4607      	mov	r7, r0
 8009750:	f2c0 8081 	blt.w	8009856 <quorem+0x112>
 8009754:	3c01      	subs	r4, #1
 8009756:	f101 0814 	add.w	r8, r1, #20
 800975a:	f100 0514 	add.w	r5, r0, #20
 800975e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009762:	9301      	str	r3, [sp, #4]
 8009764:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009768:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800976c:	3301      	adds	r3, #1
 800976e:	429a      	cmp	r2, r3
 8009770:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009774:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009778:	fbb2 f6f3 	udiv	r6, r2, r3
 800977c:	d331      	bcc.n	80097e2 <quorem+0x9e>
 800977e:	f04f 0e00 	mov.w	lr, #0
 8009782:	4640      	mov	r0, r8
 8009784:	46ac      	mov	ip, r5
 8009786:	46f2      	mov	sl, lr
 8009788:	f850 2b04 	ldr.w	r2, [r0], #4
 800978c:	b293      	uxth	r3, r2
 800978e:	fb06 e303 	mla	r3, r6, r3, lr
 8009792:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009796:	b29b      	uxth	r3, r3
 8009798:	ebaa 0303 	sub.w	r3, sl, r3
 800979c:	f8dc a000 	ldr.w	sl, [ip]
 80097a0:	0c12      	lsrs	r2, r2, #16
 80097a2:	fa13 f38a 	uxtah	r3, r3, sl
 80097a6:	fb06 e202 	mla	r2, r6, r2, lr
 80097aa:	9300      	str	r3, [sp, #0]
 80097ac:	9b00      	ldr	r3, [sp, #0]
 80097ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80097b2:	b292      	uxth	r2, r2
 80097b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80097b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80097c0:	4581      	cmp	r9, r0
 80097c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097c6:	f84c 3b04 	str.w	r3, [ip], #4
 80097ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80097ce:	d2db      	bcs.n	8009788 <quorem+0x44>
 80097d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80097d4:	b92b      	cbnz	r3, 80097e2 <quorem+0x9e>
 80097d6:	9b01      	ldr	r3, [sp, #4]
 80097d8:	3b04      	subs	r3, #4
 80097da:	429d      	cmp	r5, r3
 80097dc:	461a      	mov	r2, r3
 80097de:	d32e      	bcc.n	800983e <quorem+0xfa>
 80097e0:	613c      	str	r4, [r7, #16]
 80097e2:	4638      	mov	r0, r7
 80097e4:	f001 fca4 	bl	800b130 <__mcmp>
 80097e8:	2800      	cmp	r0, #0
 80097ea:	db24      	blt.n	8009836 <quorem+0xf2>
 80097ec:	3601      	adds	r6, #1
 80097ee:	4628      	mov	r0, r5
 80097f0:	f04f 0c00 	mov.w	ip, #0
 80097f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80097f8:	f8d0 e000 	ldr.w	lr, [r0]
 80097fc:	b293      	uxth	r3, r2
 80097fe:	ebac 0303 	sub.w	r3, ip, r3
 8009802:	0c12      	lsrs	r2, r2, #16
 8009804:	fa13 f38e 	uxtah	r3, r3, lr
 8009808:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800980c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009810:	b29b      	uxth	r3, r3
 8009812:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009816:	45c1      	cmp	r9, r8
 8009818:	f840 3b04 	str.w	r3, [r0], #4
 800981c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009820:	d2e8      	bcs.n	80097f4 <quorem+0xb0>
 8009822:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009826:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800982a:	b922      	cbnz	r2, 8009836 <quorem+0xf2>
 800982c:	3b04      	subs	r3, #4
 800982e:	429d      	cmp	r5, r3
 8009830:	461a      	mov	r2, r3
 8009832:	d30a      	bcc.n	800984a <quorem+0x106>
 8009834:	613c      	str	r4, [r7, #16]
 8009836:	4630      	mov	r0, r6
 8009838:	b003      	add	sp, #12
 800983a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800983e:	6812      	ldr	r2, [r2, #0]
 8009840:	3b04      	subs	r3, #4
 8009842:	2a00      	cmp	r2, #0
 8009844:	d1cc      	bne.n	80097e0 <quorem+0x9c>
 8009846:	3c01      	subs	r4, #1
 8009848:	e7c7      	b.n	80097da <quorem+0x96>
 800984a:	6812      	ldr	r2, [r2, #0]
 800984c:	3b04      	subs	r3, #4
 800984e:	2a00      	cmp	r2, #0
 8009850:	d1f0      	bne.n	8009834 <quorem+0xf0>
 8009852:	3c01      	subs	r4, #1
 8009854:	e7eb      	b.n	800982e <quorem+0xea>
 8009856:	2000      	movs	r0, #0
 8009858:	e7ee      	b.n	8009838 <quorem+0xf4>
 800985a:	0000      	movs	r0, r0
 800985c:	0000      	movs	r0, r0
	...

08009860 <_dtoa_r>:
 8009860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009864:	ed2d 8b04 	vpush	{d8-d9}
 8009868:	ec57 6b10 	vmov	r6, r7, d0
 800986c:	b093      	sub	sp, #76	; 0x4c
 800986e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009870:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009874:	9106      	str	r1, [sp, #24]
 8009876:	ee10 aa10 	vmov	sl, s0
 800987a:	4604      	mov	r4, r0
 800987c:	9209      	str	r2, [sp, #36]	; 0x24
 800987e:	930c      	str	r3, [sp, #48]	; 0x30
 8009880:	46bb      	mov	fp, r7
 8009882:	b975      	cbnz	r5, 80098a2 <_dtoa_r+0x42>
 8009884:	2010      	movs	r0, #16
 8009886:	f001 f95f 	bl	800ab48 <malloc>
 800988a:	4602      	mov	r2, r0
 800988c:	6260      	str	r0, [r4, #36]	; 0x24
 800988e:	b920      	cbnz	r0, 800989a <_dtoa_r+0x3a>
 8009890:	4ba7      	ldr	r3, [pc, #668]	; (8009b30 <_dtoa_r+0x2d0>)
 8009892:	21ea      	movs	r1, #234	; 0xea
 8009894:	48a7      	ldr	r0, [pc, #668]	; (8009b34 <_dtoa_r+0x2d4>)
 8009896:	f002 fceb 	bl	800c270 <__assert_func>
 800989a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800989e:	6005      	str	r5, [r0, #0]
 80098a0:	60c5      	str	r5, [r0, #12]
 80098a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098a4:	6819      	ldr	r1, [r3, #0]
 80098a6:	b151      	cbz	r1, 80098be <_dtoa_r+0x5e>
 80098a8:	685a      	ldr	r2, [r3, #4]
 80098aa:	604a      	str	r2, [r1, #4]
 80098ac:	2301      	movs	r3, #1
 80098ae:	4093      	lsls	r3, r2
 80098b0:	608b      	str	r3, [r1, #8]
 80098b2:	4620      	mov	r0, r4
 80098b4:	f001 f9b0 	bl	800ac18 <_Bfree>
 80098b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098ba:	2200      	movs	r2, #0
 80098bc:	601a      	str	r2, [r3, #0]
 80098be:	1e3b      	subs	r3, r7, #0
 80098c0:	bfaa      	itet	ge
 80098c2:	2300      	movge	r3, #0
 80098c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80098c8:	f8c8 3000 	strge.w	r3, [r8]
 80098cc:	4b9a      	ldr	r3, [pc, #616]	; (8009b38 <_dtoa_r+0x2d8>)
 80098ce:	bfbc      	itt	lt
 80098d0:	2201      	movlt	r2, #1
 80098d2:	f8c8 2000 	strlt.w	r2, [r8]
 80098d6:	ea33 030b 	bics.w	r3, r3, fp
 80098da:	d11b      	bne.n	8009914 <_dtoa_r+0xb4>
 80098dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098de:	f242 730f 	movw	r3, #9999	; 0x270f
 80098e2:	6013      	str	r3, [r2, #0]
 80098e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80098e8:	4333      	orrs	r3, r6
 80098ea:	f000 8592 	beq.w	800a412 <_dtoa_r+0xbb2>
 80098ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098f0:	b963      	cbnz	r3, 800990c <_dtoa_r+0xac>
 80098f2:	4b92      	ldr	r3, [pc, #584]	; (8009b3c <_dtoa_r+0x2dc>)
 80098f4:	e022      	b.n	800993c <_dtoa_r+0xdc>
 80098f6:	4b92      	ldr	r3, [pc, #584]	; (8009b40 <_dtoa_r+0x2e0>)
 80098f8:	9301      	str	r3, [sp, #4]
 80098fa:	3308      	adds	r3, #8
 80098fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80098fe:	6013      	str	r3, [r2, #0]
 8009900:	9801      	ldr	r0, [sp, #4]
 8009902:	b013      	add	sp, #76	; 0x4c
 8009904:	ecbd 8b04 	vpop	{d8-d9}
 8009908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800990c:	4b8b      	ldr	r3, [pc, #556]	; (8009b3c <_dtoa_r+0x2dc>)
 800990e:	9301      	str	r3, [sp, #4]
 8009910:	3303      	adds	r3, #3
 8009912:	e7f3      	b.n	80098fc <_dtoa_r+0x9c>
 8009914:	2200      	movs	r2, #0
 8009916:	2300      	movs	r3, #0
 8009918:	4650      	mov	r0, sl
 800991a:	4659      	mov	r1, fp
 800991c:	f7f7 f8d4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009920:	ec4b ab19 	vmov	d9, sl, fp
 8009924:	4680      	mov	r8, r0
 8009926:	b158      	cbz	r0, 8009940 <_dtoa_r+0xe0>
 8009928:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800992a:	2301      	movs	r3, #1
 800992c:	6013      	str	r3, [r2, #0]
 800992e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009930:	2b00      	cmp	r3, #0
 8009932:	f000 856b 	beq.w	800a40c <_dtoa_r+0xbac>
 8009936:	4883      	ldr	r0, [pc, #524]	; (8009b44 <_dtoa_r+0x2e4>)
 8009938:	6018      	str	r0, [r3, #0]
 800993a:	1e43      	subs	r3, r0, #1
 800993c:	9301      	str	r3, [sp, #4]
 800993e:	e7df      	b.n	8009900 <_dtoa_r+0xa0>
 8009940:	ec4b ab10 	vmov	d0, sl, fp
 8009944:	aa10      	add	r2, sp, #64	; 0x40
 8009946:	a911      	add	r1, sp, #68	; 0x44
 8009948:	4620      	mov	r0, r4
 800994a:	f001 fd13 	bl	800b374 <__d2b>
 800994e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009952:	ee08 0a10 	vmov	s16, r0
 8009956:	2d00      	cmp	r5, #0
 8009958:	f000 8084 	beq.w	8009a64 <_dtoa_r+0x204>
 800995c:	ee19 3a90 	vmov	r3, s19
 8009960:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009964:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009968:	4656      	mov	r6, sl
 800996a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800996e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009972:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009976:	4b74      	ldr	r3, [pc, #464]	; (8009b48 <_dtoa_r+0x2e8>)
 8009978:	2200      	movs	r2, #0
 800997a:	4630      	mov	r0, r6
 800997c:	4639      	mov	r1, r7
 800997e:	f7f6 fc83 	bl	8000288 <__aeabi_dsub>
 8009982:	a365      	add	r3, pc, #404	; (adr r3, 8009b18 <_dtoa_r+0x2b8>)
 8009984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009988:	f7f6 fe36 	bl	80005f8 <__aeabi_dmul>
 800998c:	a364      	add	r3, pc, #400	; (adr r3, 8009b20 <_dtoa_r+0x2c0>)
 800998e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009992:	f7f6 fc7b 	bl	800028c <__adddf3>
 8009996:	4606      	mov	r6, r0
 8009998:	4628      	mov	r0, r5
 800999a:	460f      	mov	r7, r1
 800999c:	f7f6 fdc2 	bl	8000524 <__aeabi_i2d>
 80099a0:	a361      	add	r3, pc, #388	; (adr r3, 8009b28 <_dtoa_r+0x2c8>)
 80099a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a6:	f7f6 fe27 	bl	80005f8 <__aeabi_dmul>
 80099aa:	4602      	mov	r2, r0
 80099ac:	460b      	mov	r3, r1
 80099ae:	4630      	mov	r0, r6
 80099b0:	4639      	mov	r1, r7
 80099b2:	f7f6 fc6b 	bl	800028c <__adddf3>
 80099b6:	4606      	mov	r6, r0
 80099b8:	460f      	mov	r7, r1
 80099ba:	f7f7 f8cd 	bl	8000b58 <__aeabi_d2iz>
 80099be:	2200      	movs	r2, #0
 80099c0:	9000      	str	r0, [sp, #0]
 80099c2:	2300      	movs	r3, #0
 80099c4:	4630      	mov	r0, r6
 80099c6:	4639      	mov	r1, r7
 80099c8:	f7f7 f888 	bl	8000adc <__aeabi_dcmplt>
 80099cc:	b150      	cbz	r0, 80099e4 <_dtoa_r+0x184>
 80099ce:	9800      	ldr	r0, [sp, #0]
 80099d0:	f7f6 fda8 	bl	8000524 <__aeabi_i2d>
 80099d4:	4632      	mov	r2, r6
 80099d6:	463b      	mov	r3, r7
 80099d8:	f7f7 f876 	bl	8000ac8 <__aeabi_dcmpeq>
 80099dc:	b910      	cbnz	r0, 80099e4 <_dtoa_r+0x184>
 80099de:	9b00      	ldr	r3, [sp, #0]
 80099e0:	3b01      	subs	r3, #1
 80099e2:	9300      	str	r3, [sp, #0]
 80099e4:	9b00      	ldr	r3, [sp, #0]
 80099e6:	2b16      	cmp	r3, #22
 80099e8:	d85a      	bhi.n	8009aa0 <_dtoa_r+0x240>
 80099ea:	9a00      	ldr	r2, [sp, #0]
 80099ec:	4b57      	ldr	r3, [pc, #348]	; (8009b4c <_dtoa_r+0x2ec>)
 80099ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f6:	ec51 0b19 	vmov	r0, r1, d9
 80099fa:	f7f7 f86f 	bl	8000adc <__aeabi_dcmplt>
 80099fe:	2800      	cmp	r0, #0
 8009a00:	d050      	beq.n	8009aa4 <_dtoa_r+0x244>
 8009a02:	9b00      	ldr	r3, [sp, #0]
 8009a04:	3b01      	subs	r3, #1
 8009a06:	9300      	str	r3, [sp, #0]
 8009a08:	2300      	movs	r3, #0
 8009a0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a0e:	1b5d      	subs	r5, r3, r5
 8009a10:	1e6b      	subs	r3, r5, #1
 8009a12:	9305      	str	r3, [sp, #20]
 8009a14:	bf45      	ittet	mi
 8009a16:	f1c5 0301 	rsbmi	r3, r5, #1
 8009a1a:	9304      	strmi	r3, [sp, #16]
 8009a1c:	2300      	movpl	r3, #0
 8009a1e:	2300      	movmi	r3, #0
 8009a20:	bf4c      	ite	mi
 8009a22:	9305      	strmi	r3, [sp, #20]
 8009a24:	9304      	strpl	r3, [sp, #16]
 8009a26:	9b00      	ldr	r3, [sp, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	db3d      	blt.n	8009aa8 <_dtoa_r+0x248>
 8009a2c:	9b05      	ldr	r3, [sp, #20]
 8009a2e:	9a00      	ldr	r2, [sp, #0]
 8009a30:	920a      	str	r2, [sp, #40]	; 0x28
 8009a32:	4413      	add	r3, r2
 8009a34:	9305      	str	r3, [sp, #20]
 8009a36:	2300      	movs	r3, #0
 8009a38:	9307      	str	r3, [sp, #28]
 8009a3a:	9b06      	ldr	r3, [sp, #24]
 8009a3c:	2b09      	cmp	r3, #9
 8009a3e:	f200 8089 	bhi.w	8009b54 <_dtoa_r+0x2f4>
 8009a42:	2b05      	cmp	r3, #5
 8009a44:	bfc4      	itt	gt
 8009a46:	3b04      	subgt	r3, #4
 8009a48:	9306      	strgt	r3, [sp, #24]
 8009a4a:	9b06      	ldr	r3, [sp, #24]
 8009a4c:	f1a3 0302 	sub.w	r3, r3, #2
 8009a50:	bfcc      	ite	gt
 8009a52:	2500      	movgt	r5, #0
 8009a54:	2501      	movle	r5, #1
 8009a56:	2b03      	cmp	r3, #3
 8009a58:	f200 8087 	bhi.w	8009b6a <_dtoa_r+0x30a>
 8009a5c:	e8df f003 	tbb	[pc, r3]
 8009a60:	59383a2d 	.word	0x59383a2d
 8009a64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009a68:	441d      	add	r5, r3
 8009a6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009a6e:	2b20      	cmp	r3, #32
 8009a70:	bfc1      	itttt	gt
 8009a72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009a7a:	fa0b f303 	lslgt.w	r3, fp, r3
 8009a7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009a82:	bfda      	itte	le
 8009a84:	f1c3 0320 	rsble	r3, r3, #32
 8009a88:	fa06 f003 	lslle.w	r0, r6, r3
 8009a8c:	4318      	orrgt	r0, r3
 8009a8e:	f7f6 fd39 	bl	8000504 <__aeabi_ui2d>
 8009a92:	2301      	movs	r3, #1
 8009a94:	4606      	mov	r6, r0
 8009a96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009a9a:	3d01      	subs	r5, #1
 8009a9c:	930e      	str	r3, [sp, #56]	; 0x38
 8009a9e:	e76a      	b.n	8009976 <_dtoa_r+0x116>
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e7b2      	b.n	8009a0a <_dtoa_r+0x1aa>
 8009aa4:	900b      	str	r0, [sp, #44]	; 0x2c
 8009aa6:	e7b1      	b.n	8009a0c <_dtoa_r+0x1ac>
 8009aa8:	9b04      	ldr	r3, [sp, #16]
 8009aaa:	9a00      	ldr	r2, [sp, #0]
 8009aac:	1a9b      	subs	r3, r3, r2
 8009aae:	9304      	str	r3, [sp, #16]
 8009ab0:	4253      	negs	r3, r2
 8009ab2:	9307      	str	r3, [sp, #28]
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	930a      	str	r3, [sp, #40]	; 0x28
 8009ab8:	e7bf      	b.n	8009a3a <_dtoa_r+0x1da>
 8009aba:	2300      	movs	r3, #0
 8009abc:	9308      	str	r3, [sp, #32]
 8009abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	dc55      	bgt.n	8009b70 <_dtoa_r+0x310>
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009aca:	461a      	mov	r2, r3
 8009acc:	9209      	str	r2, [sp, #36]	; 0x24
 8009ace:	e00c      	b.n	8009aea <_dtoa_r+0x28a>
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e7f3      	b.n	8009abc <_dtoa_r+0x25c>
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ad8:	9308      	str	r3, [sp, #32]
 8009ada:	9b00      	ldr	r3, [sp, #0]
 8009adc:	4413      	add	r3, r2
 8009ade:	9302      	str	r3, [sp, #8]
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	9303      	str	r3, [sp, #12]
 8009ae6:	bfb8      	it	lt
 8009ae8:	2301      	movlt	r3, #1
 8009aea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009aec:	2200      	movs	r2, #0
 8009aee:	6042      	str	r2, [r0, #4]
 8009af0:	2204      	movs	r2, #4
 8009af2:	f102 0614 	add.w	r6, r2, #20
 8009af6:	429e      	cmp	r6, r3
 8009af8:	6841      	ldr	r1, [r0, #4]
 8009afa:	d93d      	bls.n	8009b78 <_dtoa_r+0x318>
 8009afc:	4620      	mov	r0, r4
 8009afe:	f001 f84b 	bl	800ab98 <_Balloc>
 8009b02:	9001      	str	r0, [sp, #4]
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d13b      	bne.n	8009b80 <_dtoa_r+0x320>
 8009b08:	4b11      	ldr	r3, [pc, #68]	; (8009b50 <_dtoa_r+0x2f0>)
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009b10:	e6c0      	b.n	8009894 <_dtoa_r+0x34>
 8009b12:	2301      	movs	r3, #1
 8009b14:	e7df      	b.n	8009ad6 <_dtoa_r+0x276>
 8009b16:	bf00      	nop
 8009b18:	636f4361 	.word	0x636f4361
 8009b1c:	3fd287a7 	.word	0x3fd287a7
 8009b20:	8b60c8b3 	.word	0x8b60c8b3
 8009b24:	3fc68a28 	.word	0x3fc68a28
 8009b28:	509f79fb 	.word	0x509f79fb
 8009b2c:	3fd34413 	.word	0x3fd34413
 8009b30:	0800cf0e 	.word	0x0800cf0e
 8009b34:	0800cf25 	.word	0x0800cf25
 8009b38:	7ff00000 	.word	0x7ff00000
 8009b3c:	0800cf0a 	.word	0x0800cf0a
 8009b40:	0800cf01 	.word	0x0800cf01
 8009b44:	0800d17a 	.word	0x0800d17a
 8009b48:	3ff80000 	.word	0x3ff80000
 8009b4c:	0800d090 	.word	0x0800d090
 8009b50:	0800cf80 	.word	0x0800cf80
 8009b54:	2501      	movs	r5, #1
 8009b56:	2300      	movs	r3, #0
 8009b58:	9306      	str	r3, [sp, #24]
 8009b5a:	9508      	str	r5, [sp, #32]
 8009b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009b64:	2200      	movs	r2, #0
 8009b66:	2312      	movs	r3, #18
 8009b68:	e7b0      	b.n	8009acc <_dtoa_r+0x26c>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	9308      	str	r3, [sp, #32]
 8009b6e:	e7f5      	b.n	8009b5c <_dtoa_r+0x2fc>
 8009b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009b76:	e7b8      	b.n	8009aea <_dtoa_r+0x28a>
 8009b78:	3101      	adds	r1, #1
 8009b7a:	6041      	str	r1, [r0, #4]
 8009b7c:	0052      	lsls	r2, r2, #1
 8009b7e:	e7b8      	b.n	8009af2 <_dtoa_r+0x292>
 8009b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b82:	9a01      	ldr	r2, [sp, #4]
 8009b84:	601a      	str	r2, [r3, #0]
 8009b86:	9b03      	ldr	r3, [sp, #12]
 8009b88:	2b0e      	cmp	r3, #14
 8009b8a:	f200 809d 	bhi.w	8009cc8 <_dtoa_r+0x468>
 8009b8e:	2d00      	cmp	r5, #0
 8009b90:	f000 809a 	beq.w	8009cc8 <_dtoa_r+0x468>
 8009b94:	9b00      	ldr	r3, [sp, #0]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	dd32      	ble.n	8009c00 <_dtoa_r+0x3a0>
 8009b9a:	4ab7      	ldr	r2, [pc, #732]	; (8009e78 <_dtoa_r+0x618>)
 8009b9c:	f003 030f 	and.w	r3, r3, #15
 8009ba0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009ba4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ba8:	9b00      	ldr	r3, [sp, #0]
 8009baa:	05d8      	lsls	r0, r3, #23
 8009bac:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009bb0:	d516      	bpl.n	8009be0 <_dtoa_r+0x380>
 8009bb2:	4bb2      	ldr	r3, [pc, #712]	; (8009e7c <_dtoa_r+0x61c>)
 8009bb4:	ec51 0b19 	vmov	r0, r1, d9
 8009bb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009bbc:	f7f6 fe46 	bl	800084c <__aeabi_ddiv>
 8009bc0:	f007 070f 	and.w	r7, r7, #15
 8009bc4:	4682      	mov	sl, r0
 8009bc6:	468b      	mov	fp, r1
 8009bc8:	2503      	movs	r5, #3
 8009bca:	4eac      	ldr	r6, [pc, #688]	; (8009e7c <_dtoa_r+0x61c>)
 8009bcc:	b957      	cbnz	r7, 8009be4 <_dtoa_r+0x384>
 8009bce:	4642      	mov	r2, r8
 8009bd0:	464b      	mov	r3, r9
 8009bd2:	4650      	mov	r0, sl
 8009bd4:	4659      	mov	r1, fp
 8009bd6:	f7f6 fe39 	bl	800084c <__aeabi_ddiv>
 8009bda:	4682      	mov	sl, r0
 8009bdc:	468b      	mov	fp, r1
 8009bde:	e028      	b.n	8009c32 <_dtoa_r+0x3d2>
 8009be0:	2502      	movs	r5, #2
 8009be2:	e7f2      	b.n	8009bca <_dtoa_r+0x36a>
 8009be4:	07f9      	lsls	r1, r7, #31
 8009be6:	d508      	bpl.n	8009bfa <_dtoa_r+0x39a>
 8009be8:	4640      	mov	r0, r8
 8009bea:	4649      	mov	r1, r9
 8009bec:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009bf0:	f7f6 fd02 	bl	80005f8 <__aeabi_dmul>
 8009bf4:	3501      	adds	r5, #1
 8009bf6:	4680      	mov	r8, r0
 8009bf8:	4689      	mov	r9, r1
 8009bfa:	107f      	asrs	r7, r7, #1
 8009bfc:	3608      	adds	r6, #8
 8009bfe:	e7e5      	b.n	8009bcc <_dtoa_r+0x36c>
 8009c00:	f000 809b 	beq.w	8009d3a <_dtoa_r+0x4da>
 8009c04:	9b00      	ldr	r3, [sp, #0]
 8009c06:	4f9d      	ldr	r7, [pc, #628]	; (8009e7c <_dtoa_r+0x61c>)
 8009c08:	425e      	negs	r6, r3
 8009c0a:	4b9b      	ldr	r3, [pc, #620]	; (8009e78 <_dtoa_r+0x618>)
 8009c0c:	f006 020f 	and.w	r2, r6, #15
 8009c10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c18:	ec51 0b19 	vmov	r0, r1, d9
 8009c1c:	f7f6 fcec 	bl	80005f8 <__aeabi_dmul>
 8009c20:	1136      	asrs	r6, r6, #4
 8009c22:	4682      	mov	sl, r0
 8009c24:	468b      	mov	fp, r1
 8009c26:	2300      	movs	r3, #0
 8009c28:	2502      	movs	r5, #2
 8009c2a:	2e00      	cmp	r6, #0
 8009c2c:	d17a      	bne.n	8009d24 <_dtoa_r+0x4c4>
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1d3      	bne.n	8009bda <_dtoa_r+0x37a>
 8009c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f000 8082 	beq.w	8009d3e <_dtoa_r+0x4de>
 8009c3a:	4b91      	ldr	r3, [pc, #580]	; (8009e80 <_dtoa_r+0x620>)
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	4650      	mov	r0, sl
 8009c40:	4659      	mov	r1, fp
 8009c42:	f7f6 ff4b 	bl	8000adc <__aeabi_dcmplt>
 8009c46:	2800      	cmp	r0, #0
 8009c48:	d079      	beq.n	8009d3e <_dtoa_r+0x4de>
 8009c4a:	9b03      	ldr	r3, [sp, #12]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d076      	beq.n	8009d3e <_dtoa_r+0x4de>
 8009c50:	9b02      	ldr	r3, [sp, #8]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	dd36      	ble.n	8009cc4 <_dtoa_r+0x464>
 8009c56:	9b00      	ldr	r3, [sp, #0]
 8009c58:	4650      	mov	r0, sl
 8009c5a:	4659      	mov	r1, fp
 8009c5c:	1e5f      	subs	r7, r3, #1
 8009c5e:	2200      	movs	r2, #0
 8009c60:	4b88      	ldr	r3, [pc, #544]	; (8009e84 <_dtoa_r+0x624>)
 8009c62:	f7f6 fcc9 	bl	80005f8 <__aeabi_dmul>
 8009c66:	9e02      	ldr	r6, [sp, #8]
 8009c68:	4682      	mov	sl, r0
 8009c6a:	468b      	mov	fp, r1
 8009c6c:	3501      	adds	r5, #1
 8009c6e:	4628      	mov	r0, r5
 8009c70:	f7f6 fc58 	bl	8000524 <__aeabi_i2d>
 8009c74:	4652      	mov	r2, sl
 8009c76:	465b      	mov	r3, fp
 8009c78:	f7f6 fcbe 	bl	80005f8 <__aeabi_dmul>
 8009c7c:	4b82      	ldr	r3, [pc, #520]	; (8009e88 <_dtoa_r+0x628>)
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f7f6 fb04 	bl	800028c <__adddf3>
 8009c84:	46d0      	mov	r8, sl
 8009c86:	46d9      	mov	r9, fp
 8009c88:	4682      	mov	sl, r0
 8009c8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009c8e:	2e00      	cmp	r6, #0
 8009c90:	d158      	bne.n	8009d44 <_dtoa_r+0x4e4>
 8009c92:	4b7e      	ldr	r3, [pc, #504]	; (8009e8c <_dtoa_r+0x62c>)
 8009c94:	2200      	movs	r2, #0
 8009c96:	4640      	mov	r0, r8
 8009c98:	4649      	mov	r1, r9
 8009c9a:	f7f6 faf5 	bl	8000288 <__aeabi_dsub>
 8009c9e:	4652      	mov	r2, sl
 8009ca0:	465b      	mov	r3, fp
 8009ca2:	4680      	mov	r8, r0
 8009ca4:	4689      	mov	r9, r1
 8009ca6:	f7f6 ff37 	bl	8000b18 <__aeabi_dcmpgt>
 8009caa:	2800      	cmp	r0, #0
 8009cac:	f040 8295 	bne.w	800a1da <_dtoa_r+0x97a>
 8009cb0:	4652      	mov	r2, sl
 8009cb2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009cb6:	4640      	mov	r0, r8
 8009cb8:	4649      	mov	r1, r9
 8009cba:	f7f6 ff0f 	bl	8000adc <__aeabi_dcmplt>
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	f040 8289 	bne.w	800a1d6 <_dtoa_r+0x976>
 8009cc4:	ec5b ab19 	vmov	sl, fp, d9
 8009cc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f2c0 8148 	blt.w	8009f60 <_dtoa_r+0x700>
 8009cd0:	9a00      	ldr	r2, [sp, #0]
 8009cd2:	2a0e      	cmp	r2, #14
 8009cd4:	f300 8144 	bgt.w	8009f60 <_dtoa_r+0x700>
 8009cd8:	4b67      	ldr	r3, [pc, #412]	; (8009e78 <_dtoa_r+0x618>)
 8009cda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cde:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	f280 80d5 	bge.w	8009e94 <_dtoa_r+0x634>
 8009cea:	9b03      	ldr	r3, [sp, #12]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	f300 80d1 	bgt.w	8009e94 <_dtoa_r+0x634>
 8009cf2:	f040 826f 	bne.w	800a1d4 <_dtoa_r+0x974>
 8009cf6:	4b65      	ldr	r3, [pc, #404]	; (8009e8c <_dtoa_r+0x62c>)
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	4640      	mov	r0, r8
 8009cfc:	4649      	mov	r1, r9
 8009cfe:	f7f6 fc7b 	bl	80005f8 <__aeabi_dmul>
 8009d02:	4652      	mov	r2, sl
 8009d04:	465b      	mov	r3, fp
 8009d06:	f7f6 fefd 	bl	8000b04 <__aeabi_dcmpge>
 8009d0a:	9e03      	ldr	r6, [sp, #12]
 8009d0c:	4637      	mov	r7, r6
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	f040 8245 	bne.w	800a19e <_dtoa_r+0x93e>
 8009d14:	9d01      	ldr	r5, [sp, #4]
 8009d16:	2331      	movs	r3, #49	; 0x31
 8009d18:	f805 3b01 	strb.w	r3, [r5], #1
 8009d1c:	9b00      	ldr	r3, [sp, #0]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	9300      	str	r3, [sp, #0]
 8009d22:	e240      	b.n	800a1a6 <_dtoa_r+0x946>
 8009d24:	07f2      	lsls	r2, r6, #31
 8009d26:	d505      	bpl.n	8009d34 <_dtoa_r+0x4d4>
 8009d28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d2c:	f7f6 fc64 	bl	80005f8 <__aeabi_dmul>
 8009d30:	3501      	adds	r5, #1
 8009d32:	2301      	movs	r3, #1
 8009d34:	1076      	asrs	r6, r6, #1
 8009d36:	3708      	adds	r7, #8
 8009d38:	e777      	b.n	8009c2a <_dtoa_r+0x3ca>
 8009d3a:	2502      	movs	r5, #2
 8009d3c:	e779      	b.n	8009c32 <_dtoa_r+0x3d2>
 8009d3e:	9f00      	ldr	r7, [sp, #0]
 8009d40:	9e03      	ldr	r6, [sp, #12]
 8009d42:	e794      	b.n	8009c6e <_dtoa_r+0x40e>
 8009d44:	9901      	ldr	r1, [sp, #4]
 8009d46:	4b4c      	ldr	r3, [pc, #304]	; (8009e78 <_dtoa_r+0x618>)
 8009d48:	4431      	add	r1, r6
 8009d4a:	910d      	str	r1, [sp, #52]	; 0x34
 8009d4c:	9908      	ldr	r1, [sp, #32]
 8009d4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009d52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d56:	2900      	cmp	r1, #0
 8009d58:	d043      	beq.n	8009de2 <_dtoa_r+0x582>
 8009d5a:	494d      	ldr	r1, [pc, #308]	; (8009e90 <_dtoa_r+0x630>)
 8009d5c:	2000      	movs	r0, #0
 8009d5e:	f7f6 fd75 	bl	800084c <__aeabi_ddiv>
 8009d62:	4652      	mov	r2, sl
 8009d64:	465b      	mov	r3, fp
 8009d66:	f7f6 fa8f 	bl	8000288 <__aeabi_dsub>
 8009d6a:	9d01      	ldr	r5, [sp, #4]
 8009d6c:	4682      	mov	sl, r0
 8009d6e:	468b      	mov	fp, r1
 8009d70:	4649      	mov	r1, r9
 8009d72:	4640      	mov	r0, r8
 8009d74:	f7f6 fef0 	bl	8000b58 <__aeabi_d2iz>
 8009d78:	4606      	mov	r6, r0
 8009d7a:	f7f6 fbd3 	bl	8000524 <__aeabi_i2d>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	460b      	mov	r3, r1
 8009d82:	4640      	mov	r0, r8
 8009d84:	4649      	mov	r1, r9
 8009d86:	f7f6 fa7f 	bl	8000288 <__aeabi_dsub>
 8009d8a:	3630      	adds	r6, #48	; 0x30
 8009d8c:	f805 6b01 	strb.w	r6, [r5], #1
 8009d90:	4652      	mov	r2, sl
 8009d92:	465b      	mov	r3, fp
 8009d94:	4680      	mov	r8, r0
 8009d96:	4689      	mov	r9, r1
 8009d98:	f7f6 fea0 	bl	8000adc <__aeabi_dcmplt>
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	d163      	bne.n	8009e68 <_dtoa_r+0x608>
 8009da0:	4642      	mov	r2, r8
 8009da2:	464b      	mov	r3, r9
 8009da4:	4936      	ldr	r1, [pc, #216]	; (8009e80 <_dtoa_r+0x620>)
 8009da6:	2000      	movs	r0, #0
 8009da8:	f7f6 fa6e 	bl	8000288 <__aeabi_dsub>
 8009dac:	4652      	mov	r2, sl
 8009dae:	465b      	mov	r3, fp
 8009db0:	f7f6 fe94 	bl	8000adc <__aeabi_dcmplt>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	f040 80b5 	bne.w	8009f24 <_dtoa_r+0x6c4>
 8009dba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dbc:	429d      	cmp	r5, r3
 8009dbe:	d081      	beq.n	8009cc4 <_dtoa_r+0x464>
 8009dc0:	4b30      	ldr	r3, [pc, #192]	; (8009e84 <_dtoa_r+0x624>)
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	4650      	mov	r0, sl
 8009dc6:	4659      	mov	r1, fp
 8009dc8:	f7f6 fc16 	bl	80005f8 <__aeabi_dmul>
 8009dcc:	4b2d      	ldr	r3, [pc, #180]	; (8009e84 <_dtoa_r+0x624>)
 8009dce:	4682      	mov	sl, r0
 8009dd0:	468b      	mov	fp, r1
 8009dd2:	4640      	mov	r0, r8
 8009dd4:	4649      	mov	r1, r9
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f7f6 fc0e 	bl	80005f8 <__aeabi_dmul>
 8009ddc:	4680      	mov	r8, r0
 8009dde:	4689      	mov	r9, r1
 8009de0:	e7c6      	b.n	8009d70 <_dtoa_r+0x510>
 8009de2:	4650      	mov	r0, sl
 8009de4:	4659      	mov	r1, fp
 8009de6:	f7f6 fc07 	bl	80005f8 <__aeabi_dmul>
 8009dea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dec:	9d01      	ldr	r5, [sp, #4]
 8009dee:	930f      	str	r3, [sp, #60]	; 0x3c
 8009df0:	4682      	mov	sl, r0
 8009df2:	468b      	mov	fp, r1
 8009df4:	4649      	mov	r1, r9
 8009df6:	4640      	mov	r0, r8
 8009df8:	f7f6 feae 	bl	8000b58 <__aeabi_d2iz>
 8009dfc:	4606      	mov	r6, r0
 8009dfe:	f7f6 fb91 	bl	8000524 <__aeabi_i2d>
 8009e02:	3630      	adds	r6, #48	; 0x30
 8009e04:	4602      	mov	r2, r0
 8009e06:	460b      	mov	r3, r1
 8009e08:	4640      	mov	r0, r8
 8009e0a:	4649      	mov	r1, r9
 8009e0c:	f7f6 fa3c 	bl	8000288 <__aeabi_dsub>
 8009e10:	f805 6b01 	strb.w	r6, [r5], #1
 8009e14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e16:	429d      	cmp	r5, r3
 8009e18:	4680      	mov	r8, r0
 8009e1a:	4689      	mov	r9, r1
 8009e1c:	f04f 0200 	mov.w	r2, #0
 8009e20:	d124      	bne.n	8009e6c <_dtoa_r+0x60c>
 8009e22:	4b1b      	ldr	r3, [pc, #108]	; (8009e90 <_dtoa_r+0x630>)
 8009e24:	4650      	mov	r0, sl
 8009e26:	4659      	mov	r1, fp
 8009e28:	f7f6 fa30 	bl	800028c <__adddf3>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	460b      	mov	r3, r1
 8009e30:	4640      	mov	r0, r8
 8009e32:	4649      	mov	r1, r9
 8009e34:	f7f6 fe70 	bl	8000b18 <__aeabi_dcmpgt>
 8009e38:	2800      	cmp	r0, #0
 8009e3a:	d173      	bne.n	8009f24 <_dtoa_r+0x6c4>
 8009e3c:	4652      	mov	r2, sl
 8009e3e:	465b      	mov	r3, fp
 8009e40:	4913      	ldr	r1, [pc, #76]	; (8009e90 <_dtoa_r+0x630>)
 8009e42:	2000      	movs	r0, #0
 8009e44:	f7f6 fa20 	bl	8000288 <__aeabi_dsub>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	4640      	mov	r0, r8
 8009e4e:	4649      	mov	r1, r9
 8009e50:	f7f6 fe44 	bl	8000adc <__aeabi_dcmplt>
 8009e54:	2800      	cmp	r0, #0
 8009e56:	f43f af35 	beq.w	8009cc4 <_dtoa_r+0x464>
 8009e5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009e5c:	1e6b      	subs	r3, r5, #1
 8009e5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e64:	2b30      	cmp	r3, #48	; 0x30
 8009e66:	d0f8      	beq.n	8009e5a <_dtoa_r+0x5fa>
 8009e68:	9700      	str	r7, [sp, #0]
 8009e6a:	e049      	b.n	8009f00 <_dtoa_r+0x6a0>
 8009e6c:	4b05      	ldr	r3, [pc, #20]	; (8009e84 <_dtoa_r+0x624>)
 8009e6e:	f7f6 fbc3 	bl	80005f8 <__aeabi_dmul>
 8009e72:	4680      	mov	r8, r0
 8009e74:	4689      	mov	r9, r1
 8009e76:	e7bd      	b.n	8009df4 <_dtoa_r+0x594>
 8009e78:	0800d090 	.word	0x0800d090
 8009e7c:	0800d068 	.word	0x0800d068
 8009e80:	3ff00000 	.word	0x3ff00000
 8009e84:	40240000 	.word	0x40240000
 8009e88:	401c0000 	.word	0x401c0000
 8009e8c:	40140000 	.word	0x40140000
 8009e90:	3fe00000 	.word	0x3fe00000
 8009e94:	9d01      	ldr	r5, [sp, #4]
 8009e96:	4656      	mov	r6, sl
 8009e98:	465f      	mov	r7, fp
 8009e9a:	4642      	mov	r2, r8
 8009e9c:	464b      	mov	r3, r9
 8009e9e:	4630      	mov	r0, r6
 8009ea0:	4639      	mov	r1, r7
 8009ea2:	f7f6 fcd3 	bl	800084c <__aeabi_ddiv>
 8009ea6:	f7f6 fe57 	bl	8000b58 <__aeabi_d2iz>
 8009eaa:	4682      	mov	sl, r0
 8009eac:	f7f6 fb3a 	bl	8000524 <__aeabi_i2d>
 8009eb0:	4642      	mov	r2, r8
 8009eb2:	464b      	mov	r3, r9
 8009eb4:	f7f6 fba0 	bl	80005f8 <__aeabi_dmul>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	460b      	mov	r3, r1
 8009ebc:	4630      	mov	r0, r6
 8009ebe:	4639      	mov	r1, r7
 8009ec0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009ec4:	f7f6 f9e0 	bl	8000288 <__aeabi_dsub>
 8009ec8:	f805 6b01 	strb.w	r6, [r5], #1
 8009ecc:	9e01      	ldr	r6, [sp, #4]
 8009ece:	9f03      	ldr	r7, [sp, #12]
 8009ed0:	1bae      	subs	r6, r5, r6
 8009ed2:	42b7      	cmp	r7, r6
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	d135      	bne.n	8009f46 <_dtoa_r+0x6e6>
 8009eda:	f7f6 f9d7 	bl	800028c <__adddf3>
 8009ede:	4642      	mov	r2, r8
 8009ee0:	464b      	mov	r3, r9
 8009ee2:	4606      	mov	r6, r0
 8009ee4:	460f      	mov	r7, r1
 8009ee6:	f7f6 fe17 	bl	8000b18 <__aeabi_dcmpgt>
 8009eea:	b9d0      	cbnz	r0, 8009f22 <_dtoa_r+0x6c2>
 8009eec:	4642      	mov	r2, r8
 8009eee:	464b      	mov	r3, r9
 8009ef0:	4630      	mov	r0, r6
 8009ef2:	4639      	mov	r1, r7
 8009ef4:	f7f6 fde8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ef8:	b110      	cbz	r0, 8009f00 <_dtoa_r+0x6a0>
 8009efa:	f01a 0f01 	tst.w	sl, #1
 8009efe:	d110      	bne.n	8009f22 <_dtoa_r+0x6c2>
 8009f00:	4620      	mov	r0, r4
 8009f02:	ee18 1a10 	vmov	r1, s16
 8009f06:	f000 fe87 	bl	800ac18 <_Bfree>
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	9800      	ldr	r0, [sp, #0]
 8009f0e:	702b      	strb	r3, [r5, #0]
 8009f10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f12:	3001      	adds	r0, #1
 8009f14:	6018      	str	r0, [r3, #0]
 8009f16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	f43f acf1 	beq.w	8009900 <_dtoa_r+0xa0>
 8009f1e:	601d      	str	r5, [r3, #0]
 8009f20:	e4ee      	b.n	8009900 <_dtoa_r+0xa0>
 8009f22:	9f00      	ldr	r7, [sp, #0]
 8009f24:	462b      	mov	r3, r5
 8009f26:	461d      	mov	r5, r3
 8009f28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f2c:	2a39      	cmp	r2, #57	; 0x39
 8009f2e:	d106      	bne.n	8009f3e <_dtoa_r+0x6de>
 8009f30:	9a01      	ldr	r2, [sp, #4]
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d1f7      	bne.n	8009f26 <_dtoa_r+0x6c6>
 8009f36:	9901      	ldr	r1, [sp, #4]
 8009f38:	2230      	movs	r2, #48	; 0x30
 8009f3a:	3701      	adds	r7, #1
 8009f3c:	700a      	strb	r2, [r1, #0]
 8009f3e:	781a      	ldrb	r2, [r3, #0]
 8009f40:	3201      	adds	r2, #1
 8009f42:	701a      	strb	r2, [r3, #0]
 8009f44:	e790      	b.n	8009e68 <_dtoa_r+0x608>
 8009f46:	4ba6      	ldr	r3, [pc, #664]	; (800a1e0 <_dtoa_r+0x980>)
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f7f6 fb55 	bl	80005f8 <__aeabi_dmul>
 8009f4e:	2200      	movs	r2, #0
 8009f50:	2300      	movs	r3, #0
 8009f52:	4606      	mov	r6, r0
 8009f54:	460f      	mov	r7, r1
 8009f56:	f7f6 fdb7 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f5a:	2800      	cmp	r0, #0
 8009f5c:	d09d      	beq.n	8009e9a <_dtoa_r+0x63a>
 8009f5e:	e7cf      	b.n	8009f00 <_dtoa_r+0x6a0>
 8009f60:	9a08      	ldr	r2, [sp, #32]
 8009f62:	2a00      	cmp	r2, #0
 8009f64:	f000 80d7 	beq.w	800a116 <_dtoa_r+0x8b6>
 8009f68:	9a06      	ldr	r2, [sp, #24]
 8009f6a:	2a01      	cmp	r2, #1
 8009f6c:	f300 80ba 	bgt.w	800a0e4 <_dtoa_r+0x884>
 8009f70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f72:	2a00      	cmp	r2, #0
 8009f74:	f000 80b2 	beq.w	800a0dc <_dtoa_r+0x87c>
 8009f78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f7c:	9e07      	ldr	r6, [sp, #28]
 8009f7e:	9d04      	ldr	r5, [sp, #16]
 8009f80:	9a04      	ldr	r2, [sp, #16]
 8009f82:	441a      	add	r2, r3
 8009f84:	9204      	str	r2, [sp, #16]
 8009f86:	9a05      	ldr	r2, [sp, #20]
 8009f88:	2101      	movs	r1, #1
 8009f8a:	441a      	add	r2, r3
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	9205      	str	r2, [sp, #20]
 8009f90:	f000 ff44 	bl	800ae1c <__i2b>
 8009f94:	4607      	mov	r7, r0
 8009f96:	2d00      	cmp	r5, #0
 8009f98:	dd0c      	ble.n	8009fb4 <_dtoa_r+0x754>
 8009f9a:	9b05      	ldr	r3, [sp, #20]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	dd09      	ble.n	8009fb4 <_dtoa_r+0x754>
 8009fa0:	42ab      	cmp	r3, r5
 8009fa2:	9a04      	ldr	r2, [sp, #16]
 8009fa4:	bfa8      	it	ge
 8009fa6:	462b      	movge	r3, r5
 8009fa8:	1ad2      	subs	r2, r2, r3
 8009faa:	9204      	str	r2, [sp, #16]
 8009fac:	9a05      	ldr	r2, [sp, #20]
 8009fae:	1aed      	subs	r5, r5, r3
 8009fb0:	1ad3      	subs	r3, r2, r3
 8009fb2:	9305      	str	r3, [sp, #20]
 8009fb4:	9b07      	ldr	r3, [sp, #28]
 8009fb6:	b31b      	cbz	r3, 800a000 <_dtoa_r+0x7a0>
 8009fb8:	9b08      	ldr	r3, [sp, #32]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	f000 80af 	beq.w	800a11e <_dtoa_r+0x8be>
 8009fc0:	2e00      	cmp	r6, #0
 8009fc2:	dd13      	ble.n	8009fec <_dtoa_r+0x78c>
 8009fc4:	4639      	mov	r1, r7
 8009fc6:	4632      	mov	r2, r6
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f000 ffe7 	bl	800af9c <__pow5mult>
 8009fce:	ee18 2a10 	vmov	r2, s16
 8009fd2:	4601      	mov	r1, r0
 8009fd4:	4607      	mov	r7, r0
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	f000 ff36 	bl	800ae48 <__multiply>
 8009fdc:	ee18 1a10 	vmov	r1, s16
 8009fe0:	4680      	mov	r8, r0
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f000 fe18 	bl	800ac18 <_Bfree>
 8009fe8:	ee08 8a10 	vmov	s16, r8
 8009fec:	9b07      	ldr	r3, [sp, #28]
 8009fee:	1b9a      	subs	r2, r3, r6
 8009ff0:	d006      	beq.n	800a000 <_dtoa_r+0x7a0>
 8009ff2:	ee18 1a10 	vmov	r1, s16
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	f000 ffd0 	bl	800af9c <__pow5mult>
 8009ffc:	ee08 0a10 	vmov	s16, r0
 800a000:	2101      	movs	r1, #1
 800a002:	4620      	mov	r0, r4
 800a004:	f000 ff0a 	bl	800ae1c <__i2b>
 800a008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	4606      	mov	r6, r0
 800a00e:	f340 8088 	ble.w	800a122 <_dtoa_r+0x8c2>
 800a012:	461a      	mov	r2, r3
 800a014:	4601      	mov	r1, r0
 800a016:	4620      	mov	r0, r4
 800a018:	f000 ffc0 	bl	800af9c <__pow5mult>
 800a01c:	9b06      	ldr	r3, [sp, #24]
 800a01e:	2b01      	cmp	r3, #1
 800a020:	4606      	mov	r6, r0
 800a022:	f340 8081 	ble.w	800a128 <_dtoa_r+0x8c8>
 800a026:	f04f 0800 	mov.w	r8, #0
 800a02a:	6933      	ldr	r3, [r6, #16]
 800a02c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a030:	6918      	ldr	r0, [r3, #16]
 800a032:	f000 fea3 	bl	800ad7c <__hi0bits>
 800a036:	f1c0 0020 	rsb	r0, r0, #32
 800a03a:	9b05      	ldr	r3, [sp, #20]
 800a03c:	4418      	add	r0, r3
 800a03e:	f010 001f 	ands.w	r0, r0, #31
 800a042:	f000 8092 	beq.w	800a16a <_dtoa_r+0x90a>
 800a046:	f1c0 0320 	rsb	r3, r0, #32
 800a04a:	2b04      	cmp	r3, #4
 800a04c:	f340 808a 	ble.w	800a164 <_dtoa_r+0x904>
 800a050:	f1c0 001c 	rsb	r0, r0, #28
 800a054:	9b04      	ldr	r3, [sp, #16]
 800a056:	4403      	add	r3, r0
 800a058:	9304      	str	r3, [sp, #16]
 800a05a:	9b05      	ldr	r3, [sp, #20]
 800a05c:	4403      	add	r3, r0
 800a05e:	4405      	add	r5, r0
 800a060:	9305      	str	r3, [sp, #20]
 800a062:	9b04      	ldr	r3, [sp, #16]
 800a064:	2b00      	cmp	r3, #0
 800a066:	dd07      	ble.n	800a078 <_dtoa_r+0x818>
 800a068:	ee18 1a10 	vmov	r1, s16
 800a06c:	461a      	mov	r2, r3
 800a06e:	4620      	mov	r0, r4
 800a070:	f000 ffee 	bl	800b050 <__lshift>
 800a074:	ee08 0a10 	vmov	s16, r0
 800a078:	9b05      	ldr	r3, [sp, #20]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	dd05      	ble.n	800a08a <_dtoa_r+0x82a>
 800a07e:	4631      	mov	r1, r6
 800a080:	461a      	mov	r2, r3
 800a082:	4620      	mov	r0, r4
 800a084:	f000 ffe4 	bl	800b050 <__lshift>
 800a088:	4606      	mov	r6, r0
 800a08a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d06e      	beq.n	800a16e <_dtoa_r+0x90e>
 800a090:	ee18 0a10 	vmov	r0, s16
 800a094:	4631      	mov	r1, r6
 800a096:	f001 f84b 	bl	800b130 <__mcmp>
 800a09a:	2800      	cmp	r0, #0
 800a09c:	da67      	bge.n	800a16e <_dtoa_r+0x90e>
 800a09e:	9b00      	ldr	r3, [sp, #0]
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	ee18 1a10 	vmov	r1, s16
 800a0a6:	9300      	str	r3, [sp, #0]
 800a0a8:	220a      	movs	r2, #10
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	f000 fdd5 	bl	800ac5c <__multadd>
 800a0b2:	9b08      	ldr	r3, [sp, #32]
 800a0b4:	ee08 0a10 	vmov	s16, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	f000 81b1 	beq.w	800a420 <_dtoa_r+0xbc0>
 800a0be:	2300      	movs	r3, #0
 800a0c0:	4639      	mov	r1, r7
 800a0c2:	220a      	movs	r2, #10
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	f000 fdc9 	bl	800ac5c <__multadd>
 800a0ca:	9b02      	ldr	r3, [sp, #8]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	4607      	mov	r7, r0
 800a0d0:	f300 808e 	bgt.w	800a1f0 <_dtoa_r+0x990>
 800a0d4:	9b06      	ldr	r3, [sp, #24]
 800a0d6:	2b02      	cmp	r3, #2
 800a0d8:	dc51      	bgt.n	800a17e <_dtoa_r+0x91e>
 800a0da:	e089      	b.n	800a1f0 <_dtoa_r+0x990>
 800a0dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a0e2:	e74b      	b.n	8009f7c <_dtoa_r+0x71c>
 800a0e4:	9b03      	ldr	r3, [sp, #12]
 800a0e6:	1e5e      	subs	r6, r3, #1
 800a0e8:	9b07      	ldr	r3, [sp, #28]
 800a0ea:	42b3      	cmp	r3, r6
 800a0ec:	bfbf      	itttt	lt
 800a0ee:	9b07      	ldrlt	r3, [sp, #28]
 800a0f0:	9607      	strlt	r6, [sp, #28]
 800a0f2:	1af2      	sublt	r2, r6, r3
 800a0f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a0f6:	bfb6      	itet	lt
 800a0f8:	189b      	addlt	r3, r3, r2
 800a0fa:	1b9e      	subge	r6, r3, r6
 800a0fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a0fe:	9b03      	ldr	r3, [sp, #12]
 800a100:	bfb8      	it	lt
 800a102:	2600      	movlt	r6, #0
 800a104:	2b00      	cmp	r3, #0
 800a106:	bfb7      	itett	lt
 800a108:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a10c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a110:	1a9d      	sublt	r5, r3, r2
 800a112:	2300      	movlt	r3, #0
 800a114:	e734      	b.n	8009f80 <_dtoa_r+0x720>
 800a116:	9e07      	ldr	r6, [sp, #28]
 800a118:	9d04      	ldr	r5, [sp, #16]
 800a11a:	9f08      	ldr	r7, [sp, #32]
 800a11c:	e73b      	b.n	8009f96 <_dtoa_r+0x736>
 800a11e:	9a07      	ldr	r2, [sp, #28]
 800a120:	e767      	b.n	8009ff2 <_dtoa_r+0x792>
 800a122:	9b06      	ldr	r3, [sp, #24]
 800a124:	2b01      	cmp	r3, #1
 800a126:	dc18      	bgt.n	800a15a <_dtoa_r+0x8fa>
 800a128:	f1ba 0f00 	cmp.w	sl, #0
 800a12c:	d115      	bne.n	800a15a <_dtoa_r+0x8fa>
 800a12e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a132:	b993      	cbnz	r3, 800a15a <_dtoa_r+0x8fa>
 800a134:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a138:	0d1b      	lsrs	r3, r3, #20
 800a13a:	051b      	lsls	r3, r3, #20
 800a13c:	b183      	cbz	r3, 800a160 <_dtoa_r+0x900>
 800a13e:	9b04      	ldr	r3, [sp, #16]
 800a140:	3301      	adds	r3, #1
 800a142:	9304      	str	r3, [sp, #16]
 800a144:	9b05      	ldr	r3, [sp, #20]
 800a146:	3301      	adds	r3, #1
 800a148:	9305      	str	r3, [sp, #20]
 800a14a:	f04f 0801 	mov.w	r8, #1
 800a14e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a150:	2b00      	cmp	r3, #0
 800a152:	f47f af6a 	bne.w	800a02a <_dtoa_r+0x7ca>
 800a156:	2001      	movs	r0, #1
 800a158:	e76f      	b.n	800a03a <_dtoa_r+0x7da>
 800a15a:	f04f 0800 	mov.w	r8, #0
 800a15e:	e7f6      	b.n	800a14e <_dtoa_r+0x8ee>
 800a160:	4698      	mov	r8, r3
 800a162:	e7f4      	b.n	800a14e <_dtoa_r+0x8ee>
 800a164:	f43f af7d 	beq.w	800a062 <_dtoa_r+0x802>
 800a168:	4618      	mov	r0, r3
 800a16a:	301c      	adds	r0, #28
 800a16c:	e772      	b.n	800a054 <_dtoa_r+0x7f4>
 800a16e:	9b03      	ldr	r3, [sp, #12]
 800a170:	2b00      	cmp	r3, #0
 800a172:	dc37      	bgt.n	800a1e4 <_dtoa_r+0x984>
 800a174:	9b06      	ldr	r3, [sp, #24]
 800a176:	2b02      	cmp	r3, #2
 800a178:	dd34      	ble.n	800a1e4 <_dtoa_r+0x984>
 800a17a:	9b03      	ldr	r3, [sp, #12]
 800a17c:	9302      	str	r3, [sp, #8]
 800a17e:	9b02      	ldr	r3, [sp, #8]
 800a180:	b96b      	cbnz	r3, 800a19e <_dtoa_r+0x93e>
 800a182:	4631      	mov	r1, r6
 800a184:	2205      	movs	r2, #5
 800a186:	4620      	mov	r0, r4
 800a188:	f000 fd68 	bl	800ac5c <__multadd>
 800a18c:	4601      	mov	r1, r0
 800a18e:	4606      	mov	r6, r0
 800a190:	ee18 0a10 	vmov	r0, s16
 800a194:	f000 ffcc 	bl	800b130 <__mcmp>
 800a198:	2800      	cmp	r0, #0
 800a19a:	f73f adbb 	bgt.w	8009d14 <_dtoa_r+0x4b4>
 800a19e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1a0:	9d01      	ldr	r5, [sp, #4]
 800a1a2:	43db      	mvns	r3, r3
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	f04f 0800 	mov.w	r8, #0
 800a1aa:	4631      	mov	r1, r6
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	f000 fd33 	bl	800ac18 <_Bfree>
 800a1b2:	2f00      	cmp	r7, #0
 800a1b4:	f43f aea4 	beq.w	8009f00 <_dtoa_r+0x6a0>
 800a1b8:	f1b8 0f00 	cmp.w	r8, #0
 800a1bc:	d005      	beq.n	800a1ca <_dtoa_r+0x96a>
 800a1be:	45b8      	cmp	r8, r7
 800a1c0:	d003      	beq.n	800a1ca <_dtoa_r+0x96a>
 800a1c2:	4641      	mov	r1, r8
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	f000 fd27 	bl	800ac18 <_Bfree>
 800a1ca:	4639      	mov	r1, r7
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	f000 fd23 	bl	800ac18 <_Bfree>
 800a1d2:	e695      	b.n	8009f00 <_dtoa_r+0x6a0>
 800a1d4:	2600      	movs	r6, #0
 800a1d6:	4637      	mov	r7, r6
 800a1d8:	e7e1      	b.n	800a19e <_dtoa_r+0x93e>
 800a1da:	9700      	str	r7, [sp, #0]
 800a1dc:	4637      	mov	r7, r6
 800a1de:	e599      	b.n	8009d14 <_dtoa_r+0x4b4>
 800a1e0:	40240000 	.word	0x40240000
 800a1e4:	9b08      	ldr	r3, [sp, #32]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	f000 80ca 	beq.w	800a380 <_dtoa_r+0xb20>
 800a1ec:	9b03      	ldr	r3, [sp, #12]
 800a1ee:	9302      	str	r3, [sp, #8]
 800a1f0:	2d00      	cmp	r5, #0
 800a1f2:	dd05      	ble.n	800a200 <_dtoa_r+0x9a0>
 800a1f4:	4639      	mov	r1, r7
 800a1f6:	462a      	mov	r2, r5
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	f000 ff29 	bl	800b050 <__lshift>
 800a1fe:	4607      	mov	r7, r0
 800a200:	f1b8 0f00 	cmp.w	r8, #0
 800a204:	d05b      	beq.n	800a2be <_dtoa_r+0xa5e>
 800a206:	6879      	ldr	r1, [r7, #4]
 800a208:	4620      	mov	r0, r4
 800a20a:	f000 fcc5 	bl	800ab98 <_Balloc>
 800a20e:	4605      	mov	r5, r0
 800a210:	b928      	cbnz	r0, 800a21e <_dtoa_r+0x9be>
 800a212:	4b87      	ldr	r3, [pc, #540]	; (800a430 <_dtoa_r+0xbd0>)
 800a214:	4602      	mov	r2, r0
 800a216:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a21a:	f7ff bb3b 	b.w	8009894 <_dtoa_r+0x34>
 800a21e:	693a      	ldr	r2, [r7, #16]
 800a220:	3202      	adds	r2, #2
 800a222:	0092      	lsls	r2, r2, #2
 800a224:	f107 010c 	add.w	r1, r7, #12
 800a228:	300c      	adds	r0, #12
 800a22a:	f000 fca7 	bl	800ab7c <memcpy>
 800a22e:	2201      	movs	r2, #1
 800a230:	4629      	mov	r1, r5
 800a232:	4620      	mov	r0, r4
 800a234:	f000 ff0c 	bl	800b050 <__lshift>
 800a238:	9b01      	ldr	r3, [sp, #4]
 800a23a:	f103 0901 	add.w	r9, r3, #1
 800a23e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a242:	4413      	add	r3, r2
 800a244:	9305      	str	r3, [sp, #20]
 800a246:	f00a 0301 	and.w	r3, sl, #1
 800a24a:	46b8      	mov	r8, r7
 800a24c:	9304      	str	r3, [sp, #16]
 800a24e:	4607      	mov	r7, r0
 800a250:	4631      	mov	r1, r6
 800a252:	ee18 0a10 	vmov	r0, s16
 800a256:	f7ff fa75 	bl	8009744 <quorem>
 800a25a:	4641      	mov	r1, r8
 800a25c:	9002      	str	r0, [sp, #8]
 800a25e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a262:	ee18 0a10 	vmov	r0, s16
 800a266:	f000 ff63 	bl	800b130 <__mcmp>
 800a26a:	463a      	mov	r2, r7
 800a26c:	9003      	str	r0, [sp, #12]
 800a26e:	4631      	mov	r1, r6
 800a270:	4620      	mov	r0, r4
 800a272:	f000 ff79 	bl	800b168 <__mdiff>
 800a276:	68c2      	ldr	r2, [r0, #12]
 800a278:	f109 3bff 	add.w	fp, r9, #4294967295
 800a27c:	4605      	mov	r5, r0
 800a27e:	bb02      	cbnz	r2, 800a2c2 <_dtoa_r+0xa62>
 800a280:	4601      	mov	r1, r0
 800a282:	ee18 0a10 	vmov	r0, s16
 800a286:	f000 ff53 	bl	800b130 <__mcmp>
 800a28a:	4602      	mov	r2, r0
 800a28c:	4629      	mov	r1, r5
 800a28e:	4620      	mov	r0, r4
 800a290:	9207      	str	r2, [sp, #28]
 800a292:	f000 fcc1 	bl	800ac18 <_Bfree>
 800a296:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a29a:	ea43 0102 	orr.w	r1, r3, r2
 800a29e:	9b04      	ldr	r3, [sp, #16]
 800a2a0:	430b      	orrs	r3, r1
 800a2a2:	464d      	mov	r5, r9
 800a2a4:	d10f      	bne.n	800a2c6 <_dtoa_r+0xa66>
 800a2a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a2aa:	d02a      	beq.n	800a302 <_dtoa_r+0xaa2>
 800a2ac:	9b03      	ldr	r3, [sp, #12]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	dd02      	ble.n	800a2b8 <_dtoa_r+0xa58>
 800a2b2:	9b02      	ldr	r3, [sp, #8]
 800a2b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a2b8:	f88b a000 	strb.w	sl, [fp]
 800a2bc:	e775      	b.n	800a1aa <_dtoa_r+0x94a>
 800a2be:	4638      	mov	r0, r7
 800a2c0:	e7ba      	b.n	800a238 <_dtoa_r+0x9d8>
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	e7e2      	b.n	800a28c <_dtoa_r+0xa2c>
 800a2c6:	9b03      	ldr	r3, [sp, #12]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	db04      	blt.n	800a2d6 <_dtoa_r+0xa76>
 800a2cc:	9906      	ldr	r1, [sp, #24]
 800a2ce:	430b      	orrs	r3, r1
 800a2d0:	9904      	ldr	r1, [sp, #16]
 800a2d2:	430b      	orrs	r3, r1
 800a2d4:	d122      	bne.n	800a31c <_dtoa_r+0xabc>
 800a2d6:	2a00      	cmp	r2, #0
 800a2d8:	ddee      	ble.n	800a2b8 <_dtoa_r+0xa58>
 800a2da:	ee18 1a10 	vmov	r1, s16
 800a2de:	2201      	movs	r2, #1
 800a2e0:	4620      	mov	r0, r4
 800a2e2:	f000 feb5 	bl	800b050 <__lshift>
 800a2e6:	4631      	mov	r1, r6
 800a2e8:	ee08 0a10 	vmov	s16, r0
 800a2ec:	f000 ff20 	bl	800b130 <__mcmp>
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	dc03      	bgt.n	800a2fc <_dtoa_r+0xa9c>
 800a2f4:	d1e0      	bne.n	800a2b8 <_dtoa_r+0xa58>
 800a2f6:	f01a 0f01 	tst.w	sl, #1
 800a2fa:	d0dd      	beq.n	800a2b8 <_dtoa_r+0xa58>
 800a2fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a300:	d1d7      	bne.n	800a2b2 <_dtoa_r+0xa52>
 800a302:	2339      	movs	r3, #57	; 0x39
 800a304:	f88b 3000 	strb.w	r3, [fp]
 800a308:	462b      	mov	r3, r5
 800a30a:	461d      	mov	r5, r3
 800a30c:	3b01      	subs	r3, #1
 800a30e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a312:	2a39      	cmp	r2, #57	; 0x39
 800a314:	d071      	beq.n	800a3fa <_dtoa_r+0xb9a>
 800a316:	3201      	adds	r2, #1
 800a318:	701a      	strb	r2, [r3, #0]
 800a31a:	e746      	b.n	800a1aa <_dtoa_r+0x94a>
 800a31c:	2a00      	cmp	r2, #0
 800a31e:	dd07      	ble.n	800a330 <_dtoa_r+0xad0>
 800a320:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a324:	d0ed      	beq.n	800a302 <_dtoa_r+0xaa2>
 800a326:	f10a 0301 	add.w	r3, sl, #1
 800a32a:	f88b 3000 	strb.w	r3, [fp]
 800a32e:	e73c      	b.n	800a1aa <_dtoa_r+0x94a>
 800a330:	9b05      	ldr	r3, [sp, #20]
 800a332:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a336:	4599      	cmp	r9, r3
 800a338:	d047      	beq.n	800a3ca <_dtoa_r+0xb6a>
 800a33a:	ee18 1a10 	vmov	r1, s16
 800a33e:	2300      	movs	r3, #0
 800a340:	220a      	movs	r2, #10
 800a342:	4620      	mov	r0, r4
 800a344:	f000 fc8a 	bl	800ac5c <__multadd>
 800a348:	45b8      	cmp	r8, r7
 800a34a:	ee08 0a10 	vmov	s16, r0
 800a34e:	f04f 0300 	mov.w	r3, #0
 800a352:	f04f 020a 	mov.w	r2, #10
 800a356:	4641      	mov	r1, r8
 800a358:	4620      	mov	r0, r4
 800a35a:	d106      	bne.n	800a36a <_dtoa_r+0xb0a>
 800a35c:	f000 fc7e 	bl	800ac5c <__multadd>
 800a360:	4680      	mov	r8, r0
 800a362:	4607      	mov	r7, r0
 800a364:	f109 0901 	add.w	r9, r9, #1
 800a368:	e772      	b.n	800a250 <_dtoa_r+0x9f0>
 800a36a:	f000 fc77 	bl	800ac5c <__multadd>
 800a36e:	4639      	mov	r1, r7
 800a370:	4680      	mov	r8, r0
 800a372:	2300      	movs	r3, #0
 800a374:	220a      	movs	r2, #10
 800a376:	4620      	mov	r0, r4
 800a378:	f000 fc70 	bl	800ac5c <__multadd>
 800a37c:	4607      	mov	r7, r0
 800a37e:	e7f1      	b.n	800a364 <_dtoa_r+0xb04>
 800a380:	9b03      	ldr	r3, [sp, #12]
 800a382:	9302      	str	r3, [sp, #8]
 800a384:	9d01      	ldr	r5, [sp, #4]
 800a386:	ee18 0a10 	vmov	r0, s16
 800a38a:	4631      	mov	r1, r6
 800a38c:	f7ff f9da 	bl	8009744 <quorem>
 800a390:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a394:	9b01      	ldr	r3, [sp, #4]
 800a396:	f805 ab01 	strb.w	sl, [r5], #1
 800a39a:	1aea      	subs	r2, r5, r3
 800a39c:	9b02      	ldr	r3, [sp, #8]
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	dd09      	ble.n	800a3b6 <_dtoa_r+0xb56>
 800a3a2:	ee18 1a10 	vmov	r1, s16
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	220a      	movs	r2, #10
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	f000 fc56 	bl	800ac5c <__multadd>
 800a3b0:	ee08 0a10 	vmov	s16, r0
 800a3b4:	e7e7      	b.n	800a386 <_dtoa_r+0xb26>
 800a3b6:	9b02      	ldr	r3, [sp, #8]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	bfc8      	it	gt
 800a3bc:	461d      	movgt	r5, r3
 800a3be:	9b01      	ldr	r3, [sp, #4]
 800a3c0:	bfd8      	it	le
 800a3c2:	2501      	movle	r5, #1
 800a3c4:	441d      	add	r5, r3
 800a3c6:	f04f 0800 	mov.w	r8, #0
 800a3ca:	ee18 1a10 	vmov	r1, s16
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	f000 fe3d 	bl	800b050 <__lshift>
 800a3d6:	4631      	mov	r1, r6
 800a3d8:	ee08 0a10 	vmov	s16, r0
 800a3dc:	f000 fea8 	bl	800b130 <__mcmp>
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	dc91      	bgt.n	800a308 <_dtoa_r+0xaa8>
 800a3e4:	d102      	bne.n	800a3ec <_dtoa_r+0xb8c>
 800a3e6:	f01a 0f01 	tst.w	sl, #1
 800a3ea:	d18d      	bne.n	800a308 <_dtoa_r+0xaa8>
 800a3ec:	462b      	mov	r3, r5
 800a3ee:	461d      	mov	r5, r3
 800a3f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3f4:	2a30      	cmp	r2, #48	; 0x30
 800a3f6:	d0fa      	beq.n	800a3ee <_dtoa_r+0xb8e>
 800a3f8:	e6d7      	b.n	800a1aa <_dtoa_r+0x94a>
 800a3fa:	9a01      	ldr	r2, [sp, #4]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d184      	bne.n	800a30a <_dtoa_r+0xaaa>
 800a400:	9b00      	ldr	r3, [sp, #0]
 800a402:	3301      	adds	r3, #1
 800a404:	9300      	str	r3, [sp, #0]
 800a406:	2331      	movs	r3, #49	; 0x31
 800a408:	7013      	strb	r3, [r2, #0]
 800a40a:	e6ce      	b.n	800a1aa <_dtoa_r+0x94a>
 800a40c:	4b09      	ldr	r3, [pc, #36]	; (800a434 <_dtoa_r+0xbd4>)
 800a40e:	f7ff ba95 	b.w	800993c <_dtoa_r+0xdc>
 800a412:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a414:	2b00      	cmp	r3, #0
 800a416:	f47f aa6e 	bne.w	80098f6 <_dtoa_r+0x96>
 800a41a:	4b07      	ldr	r3, [pc, #28]	; (800a438 <_dtoa_r+0xbd8>)
 800a41c:	f7ff ba8e 	b.w	800993c <_dtoa_r+0xdc>
 800a420:	9b02      	ldr	r3, [sp, #8]
 800a422:	2b00      	cmp	r3, #0
 800a424:	dcae      	bgt.n	800a384 <_dtoa_r+0xb24>
 800a426:	9b06      	ldr	r3, [sp, #24]
 800a428:	2b02      	cmp	r3, #2
 800a42a:	f73f aea8 	bgt.w	800a17e <_dtoa_r+0x91e>
 800a42e:	e7a9      	b.n	800a384 <_dtoa_r+0xb24>
 800a430:	0800cf80 	.word	0x0800cf80
 800a434:	0800d179 	.word	0x0800d179
 800a438:	0800cf01 	.word	0x0800cf01

0800a43c <rshift>:
 800a43c:	6903      	ldr	r3, [r0, #16]
 800a43e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a442:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a446:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a44a:	f100 0414 	add.w	r4, r0, #20
 800a44e:	dd45      	ble.n	800a4dc <rshift+0xa0>
 800a450:	f011 011f 	ands.w	r1, r1, #31
 800a454:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a458:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a45c:	d10c      	bne.n	800a478 <rshift+0x3c>
 800a45e:	f100 0710 	add.w	r7, r0, #16
 800a462:	4629      	mov	r1, r5
 800a464:	42b1      	cmp	r1, r6
 800a466:	d334      	bcc.n	800a4d2 <rshift+0x96>
 800a468:	1a9b      	subs	r3, r3, r2
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	1eea      	subs	r2, r5, #3
 800a46e:	4296      	cmp	r6, r2
 800a470:	bf38      	it	cc
 800a472:	2300      	movcc	r3, #0
 800a474:	4423      	add	r3, r4
 800a476:	e015      	b.n	800a4a4 <rshift+0x68>
 800a478:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a47c:	f1c1 0820 	rsb	r8, r1, #32
 800a480:	40cf      	lsrs	r7, r1
 800a482:	f105 0e04 	add.w	lr, r5, #4
 800a486:	46a1      	mov	r9, r4
 800a488:	4576      	cmp	r6, lr
 800a48a:	46f4      	mov	ip, lr
 800a48c:	d815      	bhi.n	800a4ba <rshift+0x7e>
 800a48e:	1a9a      	subs	r2, r3, r2
 800a490:	0092      	lsls	r2, r2, #2
 800a492:	3a04      	subs	r2, #4
 800a494:	3501      	adds	r5, #1
 800a496:	42ae      	cmp	r6, r5
 800a498:	bf38      	it	cc
 800a49a:	2200      	movcc	r2, #0
 800a49c:	18a3      	adds	r3, r4, r2
 800a49e:	50a7      	str	r7, [r4, r2]
 800a4a0:	b107      	cbz	r7, 800a4a4 <rshift+0x68>
 800a4a2:	3304      	adds	r3, #4
 800a4a4:	1b1a      	subs	r2, r3, r4
 800a4a6:	42a3      	cmp	r3, r4
 800a4a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a4ac:	bf08      	it	eq
 800a4ae:	2300      	moveq	r3, #0
 800a4b0:	6102      	str	r2, [r0, #16]
 800a4b2:	bf08      	it	eq
 800a4b4:	6143      	streq	r3, [r0, #20]
 800a4b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4ba:	f8dc c000 	ldr.w	ip, [ip]
 800a4be:	fa0c fc08 	lsl.w	ip, ip, r8
 800a4c2:	ea4c 0707 	orr.w	r7, ip, r7
 800a4c6:	f849 7b04 	str.w	r7, [r9], #4
 800a4ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a4ce:	40cf      	lsrs	r7, r1
 800a4d0:	e7da      	b.n	800a488 <rshift+0x4c>
 800a4d2:	f851 cb04 	ldr.w	ip, [r1], #4
 800a4d6:	f847 cf04 	str.w	ip, [r7, #4]!
 800a4da:	e7c3      	b.n	800a464 <rshift+0x28>
 800a4dc:	4623      	mov	r3, r4
 800a4de:	e7e1      	b.n	800a4a4 <rshift+0x68>

0800a4e0 <__hexdig_fun>:
 800a4e0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a4e4:	2b09      	cmp	r3, #9
 800a4e6:	d802      	bhi.n	800a4ee <__hexdig_fun+0xe>
 800a4e8:	3820      	subs	r0, #32
 800a4ea:	b2c0      	uxtb	r0, r0
 800a4ec:	4770      	bx	lr
 800a4ee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a4f2:	2b05      	cmp	r3, #5
 800a4f4:	d801      	bhi.n	800a4fa <__hexdig_fun+0x1a>
 800a4f6:	3847      	subs	r0, #71	; 0x47
 800a4f8:	e7f7      	b.n	800a4ea <__hexdig_fun+0xa>
 800a4fa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a4fe:	2b05      	cmp	r3, #5
 800a500:	d801      	bhi.n	800a506 <__hexdig_fun+0x26>
 800a502:	3827      	subs	r0, #39	; 0x27
 800a504:	e7f1      	b.n	800a4ea <__hexdig_fun+0xa>
 800a506:	2000      	movs	r0, #0
 800a508:	4770      	bx	lr
	...

0800a50c <__gethex>:
 800a50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a510:	ed2d 8b02 	vpush	{d8}
 800a514:	b089      	sub	sp, #36	; 0x24
 800a516:	ee08 0a10 	vmov	s16, r0
 800a51a:	9304      	str	r3, [sp, #16]
 800a51c:	4bb4      	ldr	r3, [pc, #720]	; (800a7f0 <__gethex+0x2e4>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	9301      	str	r3, [sp, #4]
 800a522:	4618      	mov	r0, r3
 800a524:	468b      	mov	fp, r1
 800a526:	4690      	mov	r8, r2
 800a528:	f7f5 fe52 	bl	80001d0 <strlen>
 800a52c:	9b01      	ldr	r3, [sp, #4]
 800a52e:	f8db 2000 	ldr.w	r2, [fp]
 800a532:	4403      	add	r3, r0
 800a534:	4682      	mov	sl, r0
 800a536:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a53a:	9305      	str	r3, [sp, #20]
 800a53c:	1c93      	adds	r3, r2, #2
 800a53e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a542:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a546:	32fe      	adds	r2, #254	; 0xfe
 800a548:	18d1      	adds	r1, r2, r3
 800a54a:	461f      	mov	r7, r3
 800a54c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a550:	9100      	str	r1, [sp, #0]
 800a552:	2830      	cmp	r0, #48	; 0x30
 800a554:	d0f8      	beq.n	800a548 <__gethex+0x3c>
 800a556:	f7ff ffc3 	bl	800a4e0 <__hexdig_fun>
 800a55a:	4604      	mov	r4, r0
 800a55c:	2800      	cmp	r0, #0
 800a55e:	d13a      	bne.n	800a5d6 <__gethex+0xca>
 800a560:	9901      	ldr	r1, [sp, #4]
 800a562:	4652      	mov	r2, sl
 800a564:	4638      	mov	r0, r7
 800a566:	f001 fdb3 	bl	800c0d0 <strncmp>
 800a56a:	4605      	mov	r5, r0
 800a56c:	2800      	cmp	r0, #0
 800a56e:	d168      	bne.n	800a642 <__gethex+0x136>
 800a570:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a574:	eb07 060a 	add.w	r6, r7, sl
 800a578:	f7ff ffb2 	bl	800a4e0 <__hexdig_fun>
 800a57c:	2800      	cmp	r0, #0
 800a57e:	d062      	beq.n	800a646 <__gethex+0x13a>
 800a580:	4633      	mov	r3, r6
 800a582:	7818      	ldrb	r0, [r3, #0]
 800a584:	2830      	cmp	r0, #48	; 0x30
 800a586:	461f      	mov	r7, r3
 800a588:	f103 0301 	add.w	r3, r3, #1
 800a58c:	d0f9      	beq.n	800a582 <__gethex+0x76>
 800a58e:	f7ff ffa7 	bl	800a4e0 <__hexdig_fun>
 800a592:	2301      	movs	r3, #1
 800a594:	fab0 f480 	clz	r4, r0
 800a598:	0964      	lsrs	r4, r4, #5
 800a59a:	4635      	mov	r5, r6
 800a59c:	9300      	str	r3, [sp, #0]
 800a59e:	463a      	mov	r2, r7
 800a5a0:	4616      	mov	r6, r2
 800a5a2:	3201      	adds	r2, #1
 800a5a4:	7830      	ldrb	r0, [r6, #0]
 800a5a6:	f7ff ff9b 	bl	800a4e0 <__hexdig_fun>
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	d1f8      	bne.n	800a5a0 <__gethex+0x94>
 800a5ae:	9901      	ldr	r1, [sp, #4]
 800a5b0:	4652      	mov	r2, sl
 800a5b2:	4630      	mov	r0, r6
 800a5b4:	f001 fd8c 	bl	800c0d0 <strncmp>
 800a5b8:	b980      	cbnz	r0, 800a5dc <__gethex+0xd0>
 800a5ba:	b94d      	cbnz	r5, 800a5d0 <__gethex+0xc4>
 800a5bc:	eb06 050a 	add.w	r5, r6, sl
 800a5c0:	462a      	mov	r2, r5
 800a5c2:	4616      	mov	r6, r2
 800a5c4:	3201      	adds	r2, #1
 800a5c6:	7830      	ldrb	r0, [r6, #0]
 800a5c8:	f7ff ff8a 	bl	800a4e0 <__hexdig_fun>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	d1f8      	bne.n	800a5c2 <__gethex+0xb6>
 800a5d0:	1bad      	subs	r5, r5, r6
 800a5d2:	00ad      	lsls	r5, r5, #2
 800a5d4:	e004      	b.n	800a5e0 <__gethex+0xd4>
 800a5d6:	2400      	movs	r4, #0
 800a5d8:	4625      	mov	r5, r4
 800a5da:	e7e0      	b.n	800a59e <__gethex+0x92>
 800a5dc:	2d00      	cmp	r5, #0
 800a5de:	d1f7      	bne.n	800a5d0 <__gethex+0xc4>
 800a5e0:	7833      	ldrb	r3, [r6, #0]
 800a5e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a5e6:	2b50      	cmp	r3, #80	; 0x50
 800a5e8:	d13b      	bne.n	800a662 <__gethex+0x156>
 800a5ea:	7873      	ldrb	r3, [r6, #1]
 800a5ec:	2b2b      	cmp	r3, #43	; 0x2b
 800a5ee:	d02c      	beq.n	800a64a <__gethex+0x13e>
 800a5f0:	2b2d      	cmp	r3, #45	; 0x2d
 800a5f2:	d02e      	beq.n	800a652 <__gethex+0x146>
 800a5f4:	1c71      	adds	r1, r6, #1
 800a5f6:	f04f 0900 	mov.w	r9, #0
 800a5fa:	7808      	ldrb	r0, [r1, #0]
 800a5fc:	f7ff ff70 	bl	800a4e0 <__hexdig_fun>
 800a600:	1e43      	subs	r3, r0, #1
 800a602:	b2db      	uxtb	r3, r3
 800a604:	2b18      	cmp	r3, #24
 800a606:	d82c      	bhi.n	800a662 <__gethex+0x156>
 800a608:	f1a0 0210 	sub.w	r2, r0, #16
 800a60c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a610:	f7ff ff66 	bl	800a4e0 <__hexdig_fun>
 800a614:	1e43      	subs	r3, r0, #1
 800a616:	b2db      	uxtb	r3, r3
 800a618:	2b18      	cmp	r3, #24
 800a61a:	d91d      	bls.n	800a658 <__gethex+0x14c>
 800a61c:	f1b9 0f00 	cmp.w	r9, #0
 800a620:	d000      	beq.n	800a624 <__gethex+0x118>
 800a622:	4252      	negs	r2, r2
 800a624:	4415      	add	r5, r2
 800a626:	f8cb 1000 	str.w	r1, [fp]
 800a62a:	b1e4      	cbz	r4, 800a666 <__gethex+0x15a>
 800a62c:	9b00      	ldr	r3, [sp, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	bf14      	ite	ne
 800a632:	2700      	movne	r7, #0
 800a634:	2706      	moveq	r7, #6
 800a636:	4638      	mov	r0, r7
 800a638:	b009      	add	sp, #36	; 0x24
 800a63a:	ecbd 8b02 	vpop	{d8}
 800a63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a642:	463e      	mov	r6, r7
 800a644:	4625      	mov	r5, r4
 800a646:	2401      	movs	r4, #1
 800a648:	e7ca      	b.n	800a5e0 <__gethex+0xd4>
 800a64a:	f04f 0900 	mov.w	r9, #0
 800a64e:	1cb1      	adds	r1, r6, #2
 800a650:	e7d3      	b.n	800a5fa <__gethex+0xee>
 800a652:	f04f 0901 	mov.w	r9, #1
 800a656:	e7fa      	b.n	800a64e <__gethex+0x142>
 800a658:	230a      	movs	r3, #10
 800a65a:	fb03 0202 	mla	r2, r3, r2, r0
 800a65e:	3a10      	subs	r2, #16
 800a660:	e7d4      	b.n	800a60c <__gethex+0x100>
 800a662:	4631      	mov	r1, r6
 800a664:	e7df      	b.n	800a626 <__gethex+0x11a>
 800a666:	1bf3      	subs	r3, r6, r7
 800a668:	3b01      	subs	r3, #1
 800a66a:	4621      	mov	r1, r4
 800a66c:	2b07      	cmp	r3, #7
 800a66e:	dc0b      	bgt.n	800a688 <__gethex+0x17c>
 800a670:	ee18 0a10 	vmov	r0, s16
 800a674:	f000 fa90 	bl	800ab98 <_Balloc>
 800a678:	4604      	mov	r4, r0
 800a67a:	b940      	cbnz	r0, 800a68e <__gethex+0x182>
 800a67c:	4b5d      	ldr	r3, [pc, #372]	; (800a7f4 <__gethex+0x2e8>)
 800a67e:	4602      	mov	r2, r0
 800a680:	21de      	movs	r1, #222	; 0xde
 800a682:	485d      	ldr	r0, [pc, #372]	; (800a7f8 <__gethex+0x2ec>)
 800a684:	f001 fdf4 	bl	800c270 <__assert_func>
 800a688:	3101      	adds	r1, #1
 800a68a:	105b      	asrs	r3, r3, #1
 800a68c:	e7ee      	b.n	800a66c <__gethex+0x160>
 800a68e:	f100 0914 	add.w	r9, r0, #20
 800a692:	f04f 0b00 	mov.w	fp, #0
 800a696:	f1ca 0301 	rsb	r3, sl, #1
 800a69a:	f8cd 9008 	str.w	r9, [sp, #8]
 800a69e:	f8cd b000 	str.w	fp, [sp]
 800a6a2:	9306      	str	r3, [sp, #24]
 800a6a4:	42b7      	cmp	r7, r6
 800a6a6:	d340      	bcc.n	800a72a <__gethex+0x21e>
 800a6a8:	9802      	ldr	r0, [sp, #8]
 800a6aa:	9b00      	ldr	r3, [sp, #0]
 800a6ac:	f840 3b04 	str.w	r3, [r0], #4
 800a6b0:	eba0 0009 	sub.w	r0, r0, r9
 800a6b4:	1080      	asrs	r0, r0, #2
 800a6b6:	0146      	lsls	r6, r0, #5
 800a6b8:	6120      	str	r0, [r4, #16]
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f000 fb5e 	bl	800ad7c <__hi0bits>
 800a6c0:	1a30      	subs	r0, r6, r0
 800a6c2:	f8d8 6000 	ldr.w	r6, [r8]
 800a6c6:	42b0      	cmp	r0, r6
 800a6c8:	dd63      	ble.n	800a792 <__gethex+0x286>
 800a6ca:	1b87      	subs	r7, r0, r6
 800a6cc:	4639      	mov	r1, r7
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	f000 ff02 	bl	800b4d8 <__any_on>
 800a6d4:	4682      	mov	sl, r0
 800a6d6:	b1a8      	cbz	r0, 800a704 <__gethex+0x1f8>
 800a6d8:	1e7b      	subs	r3, r7, #1
 800a6da:	1159      	asrs	r1, r3, #5
 800a6dc:	f003 021f 	and.w	r2, r3, #31
 800a6e0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a6e4:	f04f 0a01 	mov.w	sl, #1
 800a6e8:	fa0a f202 	lsl.w	r2, sl, r2
 800a6ec:	420a      	tst	r2, r1
 800a6ee:	d009      	beq.n	800a704 <__gethex+0x1f8>
 800a6f0:	4553      	cmp	r3, sl
 800a6f2:	dd05      	ble.n	800a700 <__gethex+0x1f4>
 800a6f4:	1eb9      	subs	r1, r7, #2
 800a6f6:	4620      	mov	r0, r4
 800a6f8:	f000 feee 	bl	800b4d8 <__any_on>
 800a6fc:	2800      	cmp	r0, #0
 800a6fe:	d145      	bne.n	800a78c <__gethex+0x280>
 800a700:	f04f 0a02 	mov.w	sl, #2
 800a704:	4639      	mov	r1, r7
 800a706:	4620      	mov	r0, r4
 800a708:	f7ff fe98 	bl	800a43c <rshift>
 800a70c:	443d      	add	r5, r7
 800a70e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a712:	42ab      	cmp	r3, r5
 800a714:	da4c      	bge.n	800a7b0 <__gethex+0x2a4>
 800a716:	ee18 0a10 	vmov	r0, s16
 800a71a:	4621      	mov	r1, r4
 800a71c:	f000 fa7c 	bl	800ac18 <_Bfree>
 800a720:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a722:	2300      	movs	r3, #0
 800a724:	6013      	str	r3, [r2, #0]
 800a726:	27a3      	movs	r7, #163	; 0xa3
 800a728:	e785      	b.n	800a636 <__gethex+0x12a>
 800a72a:	1e73      	subs	r3, r6, #1
 800a72c:	9a05      	ldr	r2, [sp, #20]
 800a72e:	9303      	str	r3, [sp, #12]
 800a730:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a734:	4293      	cmp	r3, r2
 800a736:	d019      	beq.n	800a76c <__gethex+0x260>
 800a738:	f1bb 0f20 	cmp.w	fp, #32
 800a73c:	d107      	bne.n	800a74e <__gethex+0x242>
 800a73e:	9b02      	ldr	r3, [sp, #8]
 800a740:	9a00      	ldr	r2, [sp, #0]
 800a742:	f843 2b04 	str.w	r2, [r3], #4
 800a746:	9302      	str	r3, [sp, #8]
 800a748:	2300      	movs	r3, #0
 800a74a:	9300      	str	r3, [sp, #0]
 800a74c:	469b      	mov	fp, r3
 800a74e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a752:	f7ff fec5 	bl	800a4e0 <__hexdig_fun>
 800a756:	9b00      	ldr	r3, [sp, #0]
 800a758:	f000 000f 	and.w	r0, r0, #15
 800a75c:	fa00 f00b 	lsl.w	r0, r0, fp
 800a760:	4303      	orrs	r3, r0
 800a762:	9300      	str	r3, [sp, #0]
 800a764:	f10b 0b04 	add.w	fp, fp, #4
 800a768:	9b03      	ldr	r3, [sp, #12]
 800a76a:	e00d      	b.n	800a788 <__gethex+0x27c>
 800a76c:	9b03      	ldr	r3, [sp, #12]
 800a76e:	9a06      	ldr	r2, [sp, #24]
 800a770:	4413      	add	r3, r2
 800a772:	42bb      	cmp	r3, r7
 800a774:	d3e0      	bcc.n	800a738 <__gethex+0x22c>
 800a776:	4618      	mov	r0, r3
 800a778:	9901      	ldr	r1, [sp, #4]
 800a77a:	9307      	str	r3, [sp, #28]
 800a77c:	4652      	mov	r2, sl
 800a77e:	f001 fca7 	bl	800c0d0 <strncmp>
 800a782:	9b07      	ldr	r3, [sp, #28]
 800a784:	2800      	cmp	r0, #0
 800a786:	d1d7      	bne.n	800a738 <__gethex+0x22c>
 800a788:	461e      	mov	r6, r3
 800a78a:	e78b      	b.n	800a6a4 <__gethex+0x198>
 800a78c:	f04f 0a03 	mov.w	sl, #3
 800a790:	e7b8      	b.n	800a704 <__gethex+0x1f8>
 800a792:	da0a      	bge.n	800a7aa <__gethex+0x29e>
 800a794:	1a37      	subs	r7, r6, r0
 800a796:	4621      	mov	r1, r4
 800a798:	ee18 0a10 	vmov	r0, s16
 800a79c:	463a      	mov	r2, r7
 800a79e:	f000 fc57 	bl	800b050 <__lshift>
 800a7a2:	1bed      	subs	r5, r5, r7
 800a7a4:	4604      	mov	r4, r0
 800a7a6:	f100 0914 	add.w	r9, r0, #20
 800a7aa:	f04f 0a00 	mov.w	sl, #0
 800a7ae:	e7ae      	b.n	800a70e <__gethex+0x202>
 800a7b0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a7b4:	42a8      	cmp	r0, r5
 800a7b6:	dd72      	ble.n	800a89e <__gethex+0x392>
 800a7b8:	1b45      	subs	r5, r0, r5
 800a7ba:	42ae      	cmp	r6, r5
 800a7bc:	dc36      	bgt.n	800a82c <__gethex+0x320>
 800a7be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a7c2:	2b02      	cmp	r3, #2
 800a7c4:	d02a      	beq.n	800a81c <__gethex+0x310>
 800a7c6:	2b03      	cmp	r3, #3
 800a7c8:	d02c      	beq.n	800a824 <__gethex+0x318>
 800a7ca:	2b01      	cmp	r3, #1
 800a7cc:	d11c      	bne.n	800a808 <__gethex+0x2fc>
 800a7ce:	42ae      	cmp	r6, r5
 800a7d0:	d11a      	bne.n	800a808 <__gethex+0x2fc>
 800a7d2:	2e01      	cmp	r6, #1
 800a7d4:	d112      	bne.n	800a7fc <__gethex+0x2f0>
 800a7d6:	9a04      	ldr	r2, [sp, #16]
 800a7d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a7dc:	6013      	str	r3, [r2, #0]
 800a7de:	2301      	movs	r3, #1
 800a7e0:	6123      	str	r3, [r4, #16]
 800a7e2:	f8c9 3000 	str.w	r3, [r9]
 800a7e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a7e8:	2762      	movs	r7, #98	; 0x62
 800a7ea:	601c      	str	r4, [r3, #0]
 800a7ec:	e723      	b.n	800a636 <__gethex+0x12a>
 800a7ee:	bf00      	nop
 800a7f0:	0800cff8 	.word	0x0800cff8
 800a7f4:	0800cf80 	.word	0x0800cf80
 800a7f8:	0800cf91 	.word	0x0800cf91
 800a7fc:	1e71      	subs	r1, r6, #1
 800a7fe:	4620      	mov	r0, r4
 800a800:	f000 fe6a 	bl	800b4d8 <__any_on>
 800a804:	2800      	cmp	r0, #0
 800a806:	d1e6      	bne.n	800a7d6 <__gethex+0x2ca>
 800a808:	ee18 0a10 	vmov	r0, s16
 800a80c:	4621      	mov	r1, r4
 800a80e:	f000 fa03 	bl	800ac18 <_Bfree>
 800a812:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a814:	2300      	movs	r3, #0
 800a816:	6013      	str	r3, [r2, #0]
 800a818:	2750      	movs	r7, #80	; 0x50
 800a81a:	e70c      	b.n	800a636 <__gethex+0x12a>
 800a81c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d1f2      	bne.n	800a808 <__gethex+0x2fc>
 800a822:	e7d8      	b.n	800a7d6 <__gethex+0x2ca>
 800a824:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1d5      	bne.n	800a7d6 <__gethex+0x2ca>
 800a82a:	e7ed      	b.n	800a808 <__gethex+0x2fc>
 800a82c:	1e6f      	subs	r7, r5, #1
 800a82e:	f1ba 0f00 	cmp.w	sl, #0
 800a832:	d131      	bne.n	800a898 <__gethex+0x38c>
 800a834:	b127      	cbz	r7, 800a840 <__gethex+0x334>
 800a836:	4639      	mov	r1, r7
 800a838:	4620      	mov	r0, r4
 800a83a:	f000 fe4d 	bl	800b4d8 <__any_on>
 800a83e:	4682      	mov	sl, r0
 800a840:	117b      	asrs	r3, r7, #5
 800a842:	2101      	movs	r1, #1
 800a844:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a848:	f007 071f 	and.w	r7, r7, #31
 800a84c:	fa01 f707 	lsl.w	r7, r1, r7
 800a850:	421f      	tst	r7, r3
 800a852:	4629      	mov	r1, r5
 800a854:	4620      	mov	r0, r4
 800a856:	bf18      	it	ne
 800a858:	f04a 0a02 	orrne.w	sl, sl, #2
 800a85c:	1b76      	subs	r6, r6, r5
 800a85e:	f7ff fded 	bl	800a43c <rshift>
 800a862:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a866:	2702      	movs	r7, #2
 800a868:	f1ba 0f00 	cmp.w	sl, #0
 800a86c:	d048      	beq.n	800a900 <__gethex+0x3f4>
 800a86e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a872:	2b02      	cmp	r3, #2
 800a874:	d015      	beq.n	800a8a2 <__gethex+0x396>
 800a876:	2b03      	cmp	r3, #3
 800a878:	d017      	beq.n	800a8aa <__gethex+0x39e>
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d109      	bne.n	800a892 <__gethex+0x386>
 800a87e:	f01a 0f02 	tst.w	sl, #2
 800a882:	d006      	beq.n	800a892 <__gethex+0x386>
 800a884:	f8d9 0000 	ldr.w	r0, [r9]
 800a888:	ea4a 0a00 	orr.w	sl, sl, r0
 800a88c:	f01a 0f01 	tst.w	sl, #1
 800a890:	d10e      	bne.n	800a8b0 <__gethex+0x3a4>
 800a892:	f047 0710 	orr.w	r7, r7, #16
 800a896:	e033      	b.n	800a900 <__gethex+0x3f4>
 800a898:	f04f 0a01 	mov.w	sl, #1
 800a89c:	e7d0      	b.n	800a840 <__gethex+0x334>
 800a89e:	2701      	movs	r7, #1
 800a8a0:	e7e2      	b.n	800a868 <__gethex+0x35c>
 800a8a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8a4:	f1c3 0301 	rsb	r3, r3, #1
 800a8a8:	9315      	str	r3, [sp, #84]	; 0x54
 800a8aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d0f0      	beq.n	800a892 <__gethex+0x386>
 800a8b0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a8b4:	f104 0314 	add.w	r3, r4, #20
 800a8b8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a8bc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a8c0:	f04f 0c00 	mov.w	ip, #0
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8ca:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a8ce:	d01c      	beq.n	800a90a <__gethex+0x3fe>
 800a8d0:	3201      	adds	r2, #1
 800a8d2:	6002      	str	r2, [r0, #0]
 800a8d4:	2f02      	cmp	r7, #2
 800a8d6:	f104 0314 	add.w	r3, r4, #20
 800a8da:	d13f      	bne.n	800a95c <__gethex+0x450>
 800a8dc:	f8d8 2000 	ldr.w	r2, [r8]
 800a8e0:	3a01      	subs	r2, #1
 800a8e2:	42b2      	cmp	r2, r6
 800a8e4:	d10a      	bne.n	800a8fc <__gethex+0x3f0>
 800a8e6:	1171      	asrs	r1, r6, #5
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a8ee:	f006 061f 	and.w	r6, r6, #31
 800a8f2:	fa02 f606 	lsl.w	r6, r2, r6
 800a8f6:	421e      	tst	r6, r3
 800a8f8:	bf18      	it	ne
 800a8fa:	4617      	movne	r7, r2
 800a8fc:	f047 0720 	orr.w	r7, r7, #32
 800a900:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a902:	601c      	str	r4, [r3, #0]
 800a904:	9b04      	ldr	r3, [sp, #16]
 800a906:	601d      	str	r5, [r3, #0]
 800a908:	e695      	b.n	800a636 <__gethex+0x12a>
 800a90a:	4299      	cmp	r1, r3
 800a90c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a910:	d8d8      	bhi.n	800a8c4 <__gethex+0x3b8>
 800a912:	68a3      	ldr	r3, [r4, #8]
 800a914:	459b      	cmp	fp, r3
 800a916:	db19      	blt.n	800a94c <__gethex+0x440>
 800a918:	6861      	ldr	r1, [r4, #4]
 800a91a:	ee18 0a10 	vmov	r0, s16
 800a91e:	3101      	adds	r1, #1
 800a920:	f000 f93a 	bl	800ab98 <_Balloc>
 800a924:	4681      	mov	r9, r0
 800a926:	b918      	cbnz	r0, 800a930 <__gethex+0x424>
 800a928:	4b1a      	ldr	r3, [pc, #104]	; (800a994 <__gethex+0x488>)
 800a92a:	4602      	mov	r2, r0
 800a92c:	2184      	movs	r1, #132	; 0x84
 800a92e:	e6a8      	b.n	800a682 <__gethex+0x176>
 800a930:	6922      	ldr	r2, [r4, #16]
 800a932:	3202      	adds	r2, #2
 800a934:	f104 010c 	add.w	r1, r4, #12
 800a938:	0092      	lsls	r2, r2, #2
 800a93a:	300c      	adds	r0, #12
 800a93c:	f000 f91e 	bl	800ab7c <memcpy>
 800a940:	4621      	mov	r1, r4
 800a942:	ee18 0a10 	vmov	r0, s16
 800a946:	f000 f967 	bl	800ac18 <_Bfree>
 800a94a:	464c      	mov	r4, r9
 800a94c:	6923      	ldr	r3, [r4, #16]
 800a94e:	1c5a      	adds	r2, r3, #1
 800a950:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a954:	6122      	str	r2, [r4, #16]
 800a956:	2201      	movs	r2, #1
 800a958:	615a      	str	r2, [r3, #20]
 800a95a:	e7bb      	b.n	800a8d4 <__gethex+0x3c8>
 800a95c:	6922      	ldr	r2, [r4, #16]
 800a95e:	455a      	cmp	r2, fp
 800a960:	dd0b      	ble.n	800a97a <__gethex+0x46e>
 800a962:	2101      	movs	r1, #1
 800a964:	4620      	mov	r0, r4
 800a966:	f7ff fd69 	bl	800a43c <rshift>
 800a96a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a96e:	3501      	adds	r5, #1
 800a970:	42ab      	cmp	r3, r5
 800a972:	f6ff aed0 	blt.w	800a716 <__gethex+0x20a>
 800a976:	2701      	movs	r7, #1
 800a978:	e7c0      	b.n	800a8fc <__gethex+0x3f0>
 800a97a:	f016 061f 	ands.w	r6, r6, #31
 800a97e:	d0fa      	beq.n	800a976 <__gethex+0x46a>
 800a980:	4453      	add	r3, sl
 800a982:	f1c6 0620 	rsb	r6, r6, #32
 800a986:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a98a:	f000 f9f7 	bl	800ad7c <__hi0bits>
 800a98e:	42b0      	cmp	r0, r6
 800a990:	dbe7      	blt.n	800a962 <__gethex+0x456>
 800a992:	e7f0      	b.n	800a976 <__gethex+0x46a>
 800a994:	0800cf80 	.word	0x0800cf80

0800a998 <L_shift>:
 800a998:	f1c2 0208 	rsb	r2, r2, #8
 800a99c:	0092      	lsls	r2, r2, #2
 800a99e:	b570      	push	{r4, r5, r6, lr}
 800a9a0:	f1c2 0620 	rsb	r6, r2, #32
 800a9a4:	6843      	ldr	r3, [r0, #4]
 800a9a6:	6804      	ldr	r4, [r0, #0]
 800a9a8:	fa03 f506 	lsl.w	r5, r3, r6
 800a9ac:	432c      	orrs	r4, r5
 800a9ae:	40d3      	lsrs	r3, r2
 800a9b0:	6004      	str	r4, [r0, #0]
 800a9b2:	f840 3f04 	str.w	r3, [r0, #4]!
 800a9b6:	4288      	cmp	r0, r1
 800a9b8:	d3f4      	bcc.n	800a9a4 <L_shift+0xc>
 800a9ba:	bd70      	pop	{r4, r5, r6, pc}

0800a9bc <__match>:
 800a9bc:	b530      	push	{r4, r5, lr}
 800a9be:	6803      	ldr	r3, [r0, #0]
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9c6:	b914      	cbnz	r4, 800a9ce <__match+0x12>
 800a9c8:	6003      	str	r3, [r0, #0]
 800a9ca:	2001      	movs	r0, #1
 800a9cc:	bd30      	pop	{r4, r5, pc}
 800a9ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a9d6:	2d19      	cmp	r5, #25
 800a9d8:	bf98      	it	ls
 800a9da:	3220      	addls	r2, #32
 800a9dc:	42a2      	cmp	r2, r4
 800a9de:	d0f0      	beq.n	800a9c2 <__match+0x6>
 800a9e0:	2000      	movs	r0, #0
 800a9e2:	e7f3      	b.n	800a9cc <__match+0x10>

0800a9e4 <__hexnan>:
 800a9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e8:	680b      	ldr	r3, [r1, #0]
 800a9ea:	115e      	asrs	r6, r3, #5
 800a9ec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a9f0:	f013 031f 	ands.w	r3, r3, #31
 800a9f4:	b087      	sub	sp, #28
 800a9f6:	bf18      	it	ne
 800a9f8:	3604      	addne	r6, #4
 800a9fa:	2500      	movs	r5, #0
 800a9fc:	1f37      	subs	r7, r6, #4
 800a9fe:	4690      	mov	r8, r2
 800aa00:	6802      	ldr	r2, [r0, #0]
 800aa02:	9301      	str	r3, [sp, #4]
 800aa04:	4682      	mov	sl, r0
 800aa06:	f846 5c04 	str.w	r5, [r6, #-4]
 800aa0a:	46b9      	mov	r9, r7
 800aa0c:	463c      	mov	r4, r7
 800aa0e:	9502      	str	r5, [sp, #8]
 800aa10:	46ab      	mov	fp, r5
 800aa12:	7851      	ldrb	r1, [r2, #1]
 800aa14:	1c53      	adds	r3, r2, #1
 800aa16:	9303      	str	r3, [sp, #12]
 800aa18:	b341      	cbz	r1, 800aa6c <__hexnan+0x88>
 800aa1a:	4608      	mov	r0, r1
 800aa1c:	9205      	str	r2, [sp, #20]
 800aa1e:	9104      	str	r1, [sp, #16]
 800aa20:	f7ff fd5e 	bl	800a4e0 <__hexdig_fun>
 800aa24:	2800      	cmp	r0, #0
 800aa26:	d14f      	bne.n	800aac8 <__hexnan+0xe4>
 800aa28:	9904      	ldr	r1, [sp, #16]
 800aa2a:	9a05      	ldr	r2, [sp, #20]
 800aa2c:	2920      	cmp	r1, #32
 800aa2e:	d818      	bhi.n	800aa62 <__hexnan+0x7e>
 800aa30:	9b02      	ldr	r3, [sp, #8]
 800aa32:	459b      	cmp	fp, r3
 800aa34:	dd13      	ble.n	800aa5e <__hexnan+0x7a>
 800aa36:	454c      	cmp	r4, r9
 800aa38:	d206      	bcs.n	800aa48 <__hexnan+0x64>
 800aa3a:	2d07      	cmp	r5, #7
 800aa3c:	dc04      	bgt.n	800aa48 <__hexnan+0x64>
 800aa3e:	462a      	mov	r2, r5
 800aa40:	4649      	mov	r1, r9
 800aa42:	4620      	mov	r0, r4
 800aa44:	f7ff ffa8 	bl	800a998 <L_shift>
 800aa48:	4544      	cmp	r4, r8
 800aa4a:	d950      	bls.n	800aaee <__hexnan+0x10a>
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	f1a4 0904 	sub.w	r9, r4, #4
 800aa52:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa56:	f8cd b008 	str.w	fp, [sp, #8]
 800aa5a:	464c      	mov	r4, r9
 800aa5c:	461d      	mov	r5, r3
 800aa5e:	9a03      	ldr	r2, [sp, #12]
 800aa60:	e7d7      	b.n	800aa12 <__hexnan+0x2e>
 800aa62:	2929      	cmp	r1, #41	; 0x29
 800aa64:	d156      	bne.n	800ab14 <__hexnan+0x130>
 800aa66:	3202      	adds	r2, #2
 800aa68:	f8ca 2000 	str.w	r2, [sl]
 800aa6c:	f1bb 0f00 	cmp.w	fp, #0
 800aa70:	d050      	beq.n	800ab14 <__hexnan+0x130>
 800aa72:	454c      	cmp	r4, r9
 800aa74:	d206      	bcs.n	800aa84 <__hexnan+0xa0>
 800aa76:	2d07      	cmp	r5, #7
 800aa78:	dc04      	bgt.n	800aa84 <__hexnan+0xa0>
 800aa7a:	462a      	mov	r2, r5
 800aa7c:	4649      	mov	r1, r9
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f7ff ff8a 	bl	800a998 <L_shift>
 800aa84:	4544      	cmp	r4, r8
 800aa86:	d934      	bls.n	800aaf2 <__hexnan+0x10e>
 800aa88:	f1a8 0204 	sub.w	r2, r8, #4
 800aa8c:	4623      	mov	r3, r4
 800aa8e:	f853 1b04 	ldr.w	r1, [r3], #4
 800aa92:	f842 1f04 	str.w	r1, [r2, #4]!
 800aa96:	429f      	cmp	r7, r3
 800aa98:	d2f9      	bcs.n	800aa8e <__hexnan+0xaa>
 800aa9a:	1b3b      	subs	r3, r7, r4
 800aa9c:	f023 0303 	bic.w	r3, r3, #3
 800aaa0:	3304      	adds	r3, #4
 800aaa2:	3401      	adds	r4, #1
 800aaa4:	3e03      	subs	r6, #3
 800aaa6:	42b4      	cmp	r4, r6
 800aaa8:	bf88      	it	hi
 800aaaa:	2304      	movhi	r3, #4
 800aaac:	4443      	add	r3, r8
 800aaae:	2200      	movs	r2, #0
 800aab0:	f843 2b04 	str.w	r2, [r3], #4
 800aab4:	429f      	cmp	r7, r3
 800aab6:	d2fb      	bcs.n	800aab0 <__hexnan+0xcc>
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	b91b      	cbnz	r3, 800aac4 <__hexnan+0xe0>
 800aabc:	4547      	cmp	r7, r8
 800aabe:	d127      	bne.n	800ab10 <__hexnan+0x12c>
 800aac0:	2301      	movs	r3, #1
 800aac2:	603b      	str	r3, [r7, #0]
 800aac4:	2005      	movs	r0, #5
 800aac6:	e026      	b.n	800ab16 <__hexnan+0x132>
 800aac8:	3501      	adds	r5, #1
 800aaca:	2d08      	cmp	r5, #8
 800aacc:	f10b 0b01 	add.w	fp, fp, #1
 800aad0:	dd06      	ble.n	800aae0 <__hexnan+0xfc>
 800aad2:	4544      	cmp	r4, r8
 800aad4:	d9c3      	bls.n	800aa5e <__hexnan+0x7a>
 800aad6:	2300      	movs	r3, #0
 800aad8:	f844 3c04 	str.w	r3, [r4, #-4]
 800aadc:	2501      	movs	r5, #1
 800aade:	3c04      	subs	r4, #4
 800aae0:	6822      	ldr	r2, [r4, #0]
 800aae2:	f000 000f 	and.w	r0, r0, #15
 800aae6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800aaea:	6022      	str	r2, [r4, #0]
 800aaec:	e7b7      	b.n	800aa5e <__hexnan+0x7a>
 800aaee:	2508      	movs	r5, #8
 800aaf0:	e7b5      	b.n	800aa5e <__hexnan+0x7a>
 800aaf2:	9b01      	ldr	r3, [sp, #4]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d0df      	beq.n	800aab8 <__hexnan+0xd4>
 800aaf8:	f04f 32ff 	mov.w	r2, #4294967295
 800aafc:	f1c3 0320 	rsb	r3, r3, #32
 800ab00:	fa22 f303 	lsr.w	r3, r2, r3
 800ab04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ab08:	401a      	ands	r2, r3
 800ab0a:	f846 2c04 	str.w	r2, [r6, #-4]
 800ab0e:	e7d3      	b.n	800aab8 <__hexnan+0xd4>
 800ab10:	3f04      	subs	r7, #4
 800ab12:	e7d1      	b.n	800aab8 <__hexnan+0xd4>
 800ab14:	2004      	movs	r0, #4
 800ab16:	b007      	add	sp, #28
 800ab18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab1c <_localeconv_r>:
 800ab1c:	4800      	ldr	r0, [pc, #0]	; (800ab20 <_localeconv_r+0x4>)
 800ab1e:	4770      	bx	lr
 800ab20:	20000248 	.word	0x20000248

0800ab24 <_lseek_r>:
 800ab24:	b538      	push	{r3, r4, r5, lr}
 800ab26:	4d07      	ldr	r5, [pc, #28]	; (800ab44 <_lseek_r+0x20>)
 800ab28:	4604      	mov	r4, r0
 800ab2a:	4608      	mov	r0, r1
 800ab2c:	4611      	mov	r1, r2
 800ab2e:	2200      	movs	r2, #0
 800ab30:	602a      	str	r2, [r5, #0]
 800ab32:	461a      	mov	r2, r3
 800ab34:	f7f8 f9f0 	bl	8002f18 <_lseek>
 800ab38:	1c43      	adds	r3, r0, #1
 800ab3a:	d102      	bne.n	800ab42 <_lseek_r+0x1e>
 800ab3c:	682b      	ldr	r3, [r5, #0]
 800ab3e:	b103      	cbz	r3, 800ab42 <_lseek_r+0x1e>
 800ab40:	6023      	str	r3, [r4, #0]
 800ab42:	bd38      	pop	{r3, r4, r5, pc}
 800ab44:	20000920 	.word	0x20000920

0800ab48 <malloc>:
 800ab48:	4b02      	ldr	r3, [pc, #8]	; (800ab54 <malloc+0xc>)
 800ab4a:	4601      	mov	r1, r0
 800ab4c:	6818      	ldr	r0, [r3, #0]
 800ab4e:	f000 bd67 	b.w	800b620 <_malloc_r>
 800ab52:	bf00      	nop
 800ab54:	200000f0 	.word	0x200000f0

0800ab58 <__ascii_mbtowc>:
 800ab58:	b082      	sub	sp, #8
 800ab5a:	b901      	cbnz	r1, 800ab5e <__ascii_mbtowc+0x6>
 800ab5c:	a901      	add	r1, sp, #4
 800ab5e:	b142      	cbz	r2, 800ab72 <__ascii_mbtowc+0x1a>
 800ab60:	b14b      	cbz	r3, 800ab76 <__ascii_mbtowc+0x1e>
 800ab62:	7813      	ldrb	r3, [r2, #0]
 800ab64:	600b      	str	r3, [r1, #0]
 800ab66:	7812      	ldrb	r2, [r2, #0]
 800ab68:	1e10      	subs	r0, r2, #0
 800ab6a:	bf18      	it	ne
 800ab6c:	2001      	movne	r0, #1
 800ab6e:	b002      	add	sp, #8
 800ab70:	4770      	bx	lr
 800ab72:	4610      	mov	r0, r2
 800ab74:	e7fb      	b.n	800ab6e <__ascii_mbtowc+0x16>
 800ab76:	f06f 0001 	mvn.w	r0, #1
 800ab7a:	e7f8      	b.n	800ab6e <__ascii_mbtowc+0x16>

0800ab7c <memcpy>:
 800ab7c:	440a      	add	r2, r1
 800ab7e:	4291      	cmp	r1, r2
 800ab80:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab84:	d100      	bne.n	800ab88 <memcpy+0xc>
 800ab86:	4770      	bx	lr
 800ab88:	b510      	push	{r4, lr}
 800ab8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab92:	4291      	cmp	r1, r2
 800ab94:	d1f9      	bne.n	800ab8a <memcpy+0xe>
 800ab96:	bd10      	pop	{r4, pc}

0800ab98 <_Balloc>:
 800ab98:	b570      	push	{r4, r5, r6, lr}
 800ab9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab9c:	4604      	mov	r4, r0
 800ab9e:	460d      	mov	r5, r1
 800aba0:	b976      	cbnz	r6, 800abc0 <_Balloc+0x28>
 800aba2:	2010      	movs	r0, #16
 800aba4:	f7ff ffd0 	bl	800ab48 <malloc>
 800aba8:	4602      	mov	r2, r0
 800abaa:	6260      	str	r0, [r4, #36]	; 0x24
 800abac:	b920      	cbnz	r0, 800abb8 <_Balloc+0x20>
 800abae:	4b18      	ldr	r3, [pc, #96]	; (800ac10 <_Balloc+0x78>)
 800abb0:	4818      	ldr	r0, [pc, #96]	; (800ac14 <_Balloc+0x7c>)
 800abb2:	2166      	movs	r1, #102	; 0x66
 800abb4:	f001 fb5c 	bl	800c270 <__assert_func>
 800abb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abbc:	6006      	str	r6, [r0, #0]
 800abbe:	60c6      	str	r6, [r0, #12]
 800abc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800abc2:	68f3      	ldr	r3, [r6, #12]
 800abc4:	b183      	cbz	r3, 800abe8 <_Balloc+0x50>
 800abc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abc8:	68db      	ldr	r3, [r3, #12]
 800abca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800abce:	b9b8      	cbnz	r0, 800ac00 <_Balloc+0x68>
 800abd0:	2101      	movs	r1, #1
 800abd2:	fa01 f605 	lsl.w	r6, r1, r5
 800abd6:	1d72      	adds	r2, r6, #5
 800abd8:	0092      	lsls	r2, r2, #2
 800abda:	4620      	mov	r0, r4
 800abdc:	f000 fc9d 	bl	800b51a <_calloc_r>
 800abe0:	b160      	cbz	r0, 800abfc <_Balloc+0x64>
 800abe2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800abe6:	e00e      	b.n	800ac06 <_Balloc+0x6e>
 800abe8:	2221      	movs	r2, #33	; 0x21
 800abea:	2104      	movs	r1, #4
 800abec:	4620      	mov	r0, r4
 800abee:	f000 fc94 	bl	800b51a <_calloc_r>
 800abf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abf4:	60f0      	str	r0, [r6, #12]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d1e4      	bne.n	800abc6 <_Balloc+0x2e>
 800abfc:	2000      	movs	r0, #0
 800abfe:	bd70      	pop	{r4, r5, r6, pc}
 800ac00:	6802      	ldr	r2, [r0, #0]
 800ac02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac06:	2300      	movs	r3, #0
 800ac08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac0c:	e7f7      	b.n	800abfe <_Balloc+0x66>
 800ac0e:	bf00      	nop
 800ac10:	0800cf0e 	.word	0x0800cf0e
 800ac14:	0800d00c 	.word	0x0800d00c

0800ac18 <_Bfree>:
 800ac18:	b570      	push	{r4, r5, r6, lr}
 800ac1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac1c:	4605      	mov	r5, r0
 800ac1e:	460c      	mov	r4, r1
 800ac20:	b976      	cbnz	r6, 800ac40 <_Bfree+0x28>
 800ac22:	2010      	movs	r0, #16
 800ac24:	f7ff ff90 	bl	800ab48 <malloc>
 800ac28:	4602      	mov	r2, r0
 800ac2a:	6268      	str	r0, [r5, #36]	; 0x24
 800ac2c:	b920      	cbnz	r0, 800ac38 <_Bfree+0x20>
 800ac2e:	4b09      	ldr	r3, [pc, #36]	; (800ac54 <_Bfree+0x3c>)
 800ac30:	4809      	ldr	r0, [pc, #36]	; (800ac58 <_Bfree+0x40>)
 800ac32:	218a      	movs	r1, #138	; 0x8a
 800ac34:	f001 fb1c 	bl	800c270 <__assert_func>
 800ac38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac3c:	6006      	str	r6, [r0, #0]
 800ac3e:	60c6      	str	r6, [r0, #12]
 800ac40:	b13c      	cbz	r4, 800ac52 <_Bfree+0x3a>
 800ac42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ac44:	6862      	ldr	r2, [r4, #4]
 800ac46:	68db      	ldr	r3, [r3, #12]
 800ac48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac4c:	6021      	str	r1, [r4, #0]
 800ac4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac52:	bd70      	pop	{r4, r5, r6, pc}
 800ac54:	0800cf0e 	.word	0x0800cf0e
 800ac58:	0800d00c 	.word	0x0800d00c

0800ac5c <__multadd>:
 800ac5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac60:	690d      	ldr	r5, [r1, #16]
 800ac62:	4607      	mov	r7, r0
 800ac64:	460c      	mov	r4, r1
 800ac66:	461e      	mov	r6, r3
 800ac68:	f101 0c14 	add.w	ip, r1, #20
 800ac6c:	2000      	movs	r0, #0
 800ac6e:	f8dc 3000 	ldr.w	r3, [ip]
 800ac72:	b299      	uxth	r1, r3
 800ac74:	fb02 6101 	mla	r1, r2, r1, r6
 800ac78:	0c1e      	lsrs	r6, r3, #16
 800ac7a:	0c0b      	lsrs	r3, r1, #16
 800ac7c:	fb02 3306 	mla	r3, r2, r6, r3
 800ac80:	b289      	uxth	r1, r1
 800ac82:	3001      	adds	r0, #1
 800ac84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac88:	4285      	cmp	r5, r0
 800ac8a:	f84c 1b04 	str.w	r1, [ip], #4
 800ac8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac92:	dcec      	bgt.n	800ac6e <__multadd+0x12>
 800ac94:	b30e      	cbz	r6, 800acda <__multadd+0x7e>
 800ac96:	68a3      	ldr	r3, [r4, #8]
 800ac98:	42ab      	cmp	r3, r5
 800ac9a:	dc19      	bgt.n	800acd0 <__multadd+0x74>
 800ac9c:	6861      	ldr	r1, [r4, #4]
 800ac9e:	4638      	mov	r0, r7
 800aca0:	3101      	adds	r1, #1
 800aca2:	f7ff ff79 	bl	800ab98 <_Balloc>
 800aca6:	4680      	mov	r8, r0
 800aca8:	b928      	cbnz	r0, 800acb6 <__multadd+0x5a>
 800acaa:	4602      	mov	r2, r0
 800acac:	4b0c      	ldr	r3, [pc, #48]	; (800ace0 <__multadd+0x84>)
 800acae:	480d      	ldr	r0, [pc, #52]	; (800ace4 <__multadd+0x88>)
 800acb0:	21b5      	movs	r1, #181	; 0xb5
 800acb2:	f001 fadd 	bl	800c270 <__assert_func>
 800acb6:	6922      	ldr	r2, [r4, #16]
 800acb8:	3202      	adds	r2, #2
 800acba:	f104 010c 	add.w	r1, r4, #12
 800acbe:	0092      	lsls	r2, r2, #2
 800acc0:	300c      	adds	r0, #12
 800acc2:	f7ff ff5b 	bl	800ab7c <memcpy>
 800acc6:	4621      	mov	r1, r4
 800acc8:	4638      	mov	r0, r7
 800acca:	f7ff ffa5 	bl	800ac18 <_Bfree>
 800acce:	4644      	mov	r4, r8
 800acd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800acd4:	3501      	adds	r5, #1
 800acd6:	615e      	str	r6, [r3, #20]
 800acd8:	6125      	str	r5, [r4, #16]
 800acda:	4620      	mov	r0, r4
 800acdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ace0:	0800cf80 	.word	0x0800cf80
 800ace4:	0800d00c 	.word	0x0800d00c

0800ace8 <__s2b>:
 800ace8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acec:	460c      	mov	r4, r1
 800acee:	4615      	mov	r5, r2
 800acf0:	461f      	mov	r7, r3
 800acf2:	2209      	movs	r2, #9
 800acf4:	3308      	adds	r3, #8
 800acf6:	4606      	mov	r6, r0
 800acf8:	fb93 f3f2 	sdiv	r3, r3, r2
 800acfc:	2100      	movs	r1, #0
 800acfe:	2201      	movs	r2, #1
 800ad00:	429a      	cmp	r2, r3
 800ad02:	db09      	blt.n	800ad18 <__s2b+0x30>
 800ad04:	4630      	mov	r0, r6
 800ad06:	f7ff ff47 	bl	800ab98 <_Balloc>
 800ad0a:	b940      	cbnz	r0, 800ad1e <__s2b+0x36>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	4b19      	ldr	r3, [pc, #100]	; (800ad74 <__s2b+0x8c>)
 800ad10:	4819      	ldr	r0, [pc, #100]	; (800ad78 <__s2b+0x90>)
 800ad12:	21ce      	movs	r1, #206	; 0xce
 800ad14:	f001 faac 	bl	800c270 <__assert_func>
 800ad18:	0052      	lsls	r2, r2, #1
 800ad1a:	3101      	adds	r1, #1
 800ad1c:	e7f0      	b.n	800ad00 <__s2b+0x18>
 800ad1e:	9b08      	ldr	r3, [sp, #32]
 800ad20:	6143      	str	r3, [r0, #20]
 800ad22:	2d09      	cmp	r5, #9
 800ad24:	f04f 0301 	mov.w	r3, #1
 800ad28:	6103      	str	r3, [r0, #16]
 800ad2a:	dd16      	ble.n	800ad5a <__s2b+0x72>
 800ad2c:	f104 0909 	add.w	r9, r4, #9
 800ad30:	46c8      	mov	r8, r9
 800ad32:	442c      	add	r4, r5
 800ad34:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ad38:	4601      	mov	r1, r0
 800ad3a:	3b30      	subs	r3, #48	; 0x30
 800ad3c:	220a      	movs	r2, #10
 800ad3e:	4630      	mov	r0, r6
 800ad40:	f7ff ff8c 	bl	800ac5c <__multadd>
 800ad44:	45a0      	cmp	r8, r4
 800ad46:	d1f5      	bne.n	800ad34 <__s2b+0x4c>
 800ad48:	f1a5 0408 	sub.w	r4, r5, #8
 800ad4c:	444c      	add	r4, r9
 800ad4e:	1b2d      	subs	r5, r5, r4
 800ad50:	1963      	adds	r3, r4, r5
 800ad52:	42bb      	cmp	r3, r7
 800ad54:	db04      	blt.n	800ad60 <__s2b+0x78>
 800ad56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad5a:	340a      	adds	r4, #10
 800ad5c:	2509      	movs	r5, #9
 800ad5e:	e7f6      	b.n	800ad4e <__s2b+0x66>
 800ad60:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ad64:	4601      	mov	r1, r0
 800ad66:	3b30      	subs	r3, #48	; 0x30
 800ad68:	220a      	movs	r2, #10
 800ad6a:	4630      	mov	r0, r6
 800ad6c:	f7ff ff76 	bl	800ac5c <__multadd>
 800ad70:	e7ee      	b.n	800ad50 <__s2b+0x68>
 800ad72:	bf00      	nop
 800ad74:	0800cf80 	.word	0x0800cf80
 800ad78:	0800d00c 	.word	0x0800d00c

0800ad7c <__hi0bits>:
 800ad7c:	0c03      	lsrs	r3, r0, #16
 800ad7e:	041b      	lsls	r3, r3, #16
 800ad80:	b9d3      	cbnz	r3, 800adb8 <__hi0bits+0x3c>
 800ad82:	0400      	lsls	r0, r0, #16
 800ad84:	2310      	movs	r3, #16
 800ad86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ad8a:	bf04      	itt	eq
 800ad8c:	0200      	lsleq	r0, r0, #8
 800ad8e:	3308      	addeq	r3, #8
 800ad90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ad94:	bf04      	itt	eq
 800ad96:	0100      	lsleq	r0, r0, #4
 800ad98:	3304      	addeq	r3, #4
 800ad9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ad9e:	bf04      	itt	eq
 800ada0:	0080      	lsleq	r0, r0, #2
 800ada2:	3302      	addeq	r3, #2
 800ada4:	2800      	cmp	r0, #0
 800ada6:	db05      	blt.n	800adb4 <__hi0bits+0x38>
 800ada8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800adac:	f103 0301 	add.w	r3, r3, #1
 800adb0:	bf08      	it	eq
 800adb2:	2320      	moveq	r3, #32
 800adb4:	4618      	mov	r0, r3
 800adb6:	4770      	bx	lr
 800adb8:	2300      	movs	r3, #0
 800adba:	e7e4      	b.n	800ad86 <__hi0bits+0xa>

0800adbc <__lo0bits>:
 800adbc:	6803      	ldr	r3, [r0, #0]
 800adbe:	f013 0207 	ands.w	r2, r3, #7
 800adc2:	4601      	mov	r1, r0
 800adc4:	d00b      	beq.n	800adde <__lo0bits+0x22>
 800adc6:	07da      	lsls	r2, r3, #31
 800adc8:	d423      	bmi.n	800ae12 <__lo0bits+0x56>
 800adca:	0798      	lsls	r0, r3, #30
 800adcc:	bf49      	itett	mi
 800adce:	085b      	lsrmi	r3, r3, #1
 800add0:	089b      	lsrpl	r3, r3, #2
 800add2:	2001      	movmi	r0, #1
 800add4:	600b      	strmi	r3, [r1, #0]
 800add6:	bf5c      	itt	pl
 800add8:	600b      	strpl	r3, [r1, #0]
 800adda:	2002      	movpl	r0, #2
 800addc:	4770      	bx	lr
 800adde:	b298      	uxth	r0, r3
 800ade0:	b9a8      	cbnz	r0, 800ae0e <__lo0bits+0x52>
 800ade2:	0c1b      	lsrs	r3, r3, #16
 800ade4:	2010      	movs	r0, #16
 800ade6:	b2da      	uxtb	r2, r3
 800ade8:	b90a      	cbnz	r2, 800adee <__lo0bits+0x32>
 800adea:	3008      	adds	r0, #8
 800adec:	0a1b      	lsrs	r3, r3, #8
 800adee:	071a      	lsls	r2, r3, #28
 800adf0:	bf04      	itt	eq
 800adf2:	091b      	lsreq	r3, r3, #4
 800adf4:	3004      	addeq	r0, #4
 800adf6:	079a      	lsls	r2, r3, #30
 800adf8:	bf04      	itt	eq
 800adfa:	089b      	lsreq	r3, r3, #2
 800adfc:	3002      	addeq	r0, #2
 800adfe:	07da      	lsls	r2, r3, #31
 800ae00:	d403      	bmi.n	800ae0a <__lo0bits+0x4e>
 800ae02:	085b      	lsrs	r3, r3, #1
 800ae04:	f100 0001 	add.w	r0, r0, #1
 800ae08:	d005      	beq.n	800ae16 <__lo0bits+0x5a>
 800ae0a:	600b      	str	r3, [r1, #0]
 800ae0c:	4770      	bx	lr
 800ae0e:	4610      	mov	r0, r2
 800ae10:	e7e9      	b.n	800ade6 <__lo0bits+0x2a>
 800ae12:	2000      	movs	r0, #0
 800ae14:	4770      	bx	lr
 800ae16:	2020      	movs	r0, #32
 800ae18:	4770      	bx	lr
	...

0800ae1c <__i2b>:
 800ae1c:	b510      	push	{r4, lr}
 800ae1e:	460c      	mov	r4, r1
 800ae20:	2101      	movs	r1, #1
 800ae22:	f7ff feb9 	bl	800ab98 <_Balloc>
 800ae26:	4602      	mov	r2, r0
 800ae28:	b928      	cbnz	r0, 800ae36 <__i2b+0x1a>
 800ae2a:	4b05      	ldr	r3, [pc, #20]	; (800ae40 <__i2b+0x24>)
 800ae2c:	4805      	ldr	r0, [pc, #20]	; (800ae44 <__i2b+0x28>)
 800ae2e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ae32:	f001 fa1d 	bl	800c270 <__assert_func>
 800ae36:	2301      	movs	r3, #1
 800ae38:	6144      	str	r4, [r0, #20]
 800ae3a:	6103      	str	r3, [r0, #16]
 800ae3c:	bd10      	pop	{r4, pc}
 800ae3e:	bf00      	nop
 800ae40:	0800cf80 	.word	0x0800cf80
 800ae44:	0800d00c 	.word	0x0800d00c

0800ae48 <__multiply>:
 800ae48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae4c:	4691      	mov	r9, r2
 800ae4e:	690a      	ldr	r2, [r1, #16]
 800ae50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ae54:	429a      	cmp	r2, r3
 800ae56:	bfb8      	it	lt
 800ae58:	460b      	movlt	r3, r1
 800ae5a:	460c      	mov	r4, r1
 800ae5c:	bfbc      	itt	lt
 800ae5e:	464c      	movlt	r4, r9
 800ae60:	4699      	movlt	r9, r3
 800ae62:	6927      	ldr	r7, [r4, #16]
 800ae64:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ae68:	68a3      	ldr	r3, [r4, #8]
 800ae6a:	6861      	ldr	r1, [r4, #4]
 800ae6c:	eb07 060a 	add.w	r6, r7, sl
 800ae70:	42b3      	cmp	r3, r6
 800ae72:	b085      	sub	sp, #20
 800ae74:	bfb8      	it	lt
 800ae76:	3101      	addlt	r1, #1
 800ae78:	f7ff fe8e 	bl	800ab98 <_Balloc>
 800ae7c:	b930      	cbnz	r0, 800ae8c <__multiply+0x44>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	4b44      	ldr	r3, [pc, #272]	; (800af94 <__multiply+0x14c>)
 800ae82:	4845      	ldr	r0, [pc, #276]	; (800af98 <__multiply+0x150>)
 800ae84:	f240 115d 	movw	r1, #349	; 0x15d
 800ae88:	f001 f9f2 	bl	800c270 <__assert_func>
 800ae8c:	f100 0514 	add.w	r5, r0, #20
 800ae90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae94:	462b      	mov	r3, r5
 800ae96:	2200      	movs	r2, #0
 800ae98:	4543      	cmp	r3, r8
 800ae9a:	d321      	bcc.n	800aee0 <__multiply+0x98>
 800ae9c:	f104 0314 	add.w	r3, r4, #20
 800aea0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aea4:	f109 0314 	add.w	r3, r9, #20
 800aea8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aeac:	9202      	str	r2, [sp, #8]
 800aeae:	1b3a      	subs	r2, r7, r4
 800aeb0:	3a15      	subs	r2, #21
 800aeb2:	f022 0203 	bic.w	r2, r2, #3
 800aeb6:	3204      	adds	r2, #4
 800aeb8:	f104 0115 	add.w	r1, r4, #21
 800aebc:	428f      	cmp	r7, r1
 800aebe:	bf38      	it	cc
 800aec0:	2204      	movcc	r2, #4
 800aec2:	9201      	str	r2, [sp, #4]
 800aec4:	9a02      	ldr	r2, [sp, #8]
 800aec6:	9303      	str	r3, [sp, #12]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d80c      	bhi.n	800aee6 <__multiply+0x9e>
 800aecc:	2e00      	cmp	r6, #0
 800aece:	dd03      	ble.n	800aed8 <__multiply+0x90>
 800aed0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d05a      	beq.n	800af8e <__multiply+0x146>
 800aed8:	6106      	str	r6, [r0, #16]
 800aeda:	b005      	add	sp, #20
 800aedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aee0:	f843 2b04 	str.w	r2, [r3], #4
 800aee4:	e7d8      	b.n	800ae98 <__multiply+0x50>
 800aee6:	f8b3 a000 	ldrh.w	sl, [r3]
 800aeea:	f1ba 0f00 	cmp.w	sl, #0
 800aeee:	d024      	beq.n	800af3a <__multiply+0xf2>
 800aef0:	f104 0e14 	add.w	lr, r4, #20
 800aef4:	46a9      	mov	r9, r5
 800aef6:	f04f 0c00 	mov.w	ip, #0
 800aefa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aefe:	f8d9 1000 	ldr.w	r1, [r9]
 800af02:	fa1f fb82 	uxth.w	fp, r2
 800af06:	b289      	uxth	r1, r1
 800af08:	fb0a 110b 	mla	r1, sl, fp, r1
 800af0c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800af10:	f8d9 2000 	ldr.w	r2, [r9]
 800af14:	4461      	add	r1, ip
 800af16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800af1a:	fb0a c20b 	mla	r2, sl, fp, ip
 800af1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800af22:	b289      	uxth	r1, r1
 800af24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800af28:	4577      	cmp	r7, lr
 800af2a:	f849 1b04 	str.w	r1, [r9], #4
 800af2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800af32:	d8e2      	bhi.n	800aefa <__multiply+0xb2>
 800af34:	9a01      	ldr	r2, [sp, #4]
 800af36:	f845 c002 	str.w	ip, [r5, r2]
 800af3a:	9a03      	ldr	r2, [sp, #12]
 800af3c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800af40:	3304      	adds	r3, #4
 800af42:	f1b9 0f00 	cmp.w	r9, #0
 800af46:	d020      	beq.n	800af8a <__multiply+0x142>
 800af48:	6829      	ldr	r1, [r5, #0]
 800af4a:	f104 0c14 	add.w	ip, r4, #20
 800af4e:	46ae      	mov	lr, r5
 800af50:	f04f 0a00 	mov.w	sl, #0
 800af54:	f8bc b000 	ldrh.w	fp, [ip]
 800af58:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800af5c:	fb09 220b 	mla	r2, r9, fp, r2
 800af60:	4492      	add	sl, r2
 800af62:	b289      	uxth	r1, r1
 800af64:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800af68:	f84e 1b04 	str.w	r1, [lr], #4
 800af6c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800af70:	f8be 1000 	ldrh.w	r1, [lr]
 800af74:	0c12      	lsrs	r2, r2, #16
 800af76:	fb09 1102 	mla	r1, r9, r2, r1
 800af7a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800af7e:	4567      	cmp	r7, ip
 800af80:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800af84:	d8e6      	bhi.n	800af54 <__multiply+0x10c>
 800af86:	9a01      	ldr	r2, [sp, #4]
 800af88:	50a9      	str	r1, [r5, r2]
 800af8a:	3504      	adds	r5, #4
 800af8c:	e79a      	b.n	800aec4 <__multiply+0x7c>
 800af8e:	3e01      	subs	r6, #1
 800af90:	e79c      	b.n	800aecc <__multiply+0x84>
 800af92:	bf00      	nop
 800af94:	0800cf80 	.word	0x0800cf80
 800af98:	0800d00c 	.word	0x0800d00c

0800af9c <__pow5mult>:
 800af9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afa0:	4615      	mov	r5, r2
 800afa2:	f012 0203 	ands.w	r2, r2, #3
 800afa6:	4606      	mov	r6, r0
 800afa8:	460f      	mov	r7, r1
 800afaa:	d007      	beq.n	800afbc <__pow5mult+0x20>
 800afac:	4c25      	ldr	r4, [pc, #148]	; (800b044 <__pow5mult+0xa8>)
 800afae:	3a01      	subs	r2, #1
 800afb0:	2300      	movs	r3, #0
 800afb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800afb6:	f7ff fe51 	bl	800ac5c <__multadd>
 800afba:	4607      	mov	r7, r0
 800afbc:	10ad      	asrs	r5, r5, #2
 800afbe:	d03d      	beq.n	800b03c <__pow5mult+0xa0>
 800afc0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800afc2:	b97c      	cbnz	r4, 800afe4 <__pow5mult+0x48>
 800afc4:	2010      	movs	r0, #16
 800afc6:	f7ff fdbf 	bl	800ab48 <malloc>
 800afca:	4602      	mov	r2, r0
 800afcc:	6270      	str	r0, [r6, #36]	; 0x24
 800afce:	b928      	cbnz	r0, 800afdc <__pow5mult+0x40>
 800afd0:	4b1d      	ldr	r3, [pc, #116]	; (800b048 <__pow5mult+0xac>)
 800afd2:	481e      	ldr	r0, [pc, #120]	; (800b04c <__pow5mult+0xb0>)
 800afd4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800afd8:	f001 f94a 	bl	800c270 <__assert_func>
 800afdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800afe0:	6004      	str	r4, [r0, #0]
 800afe2:	60c4      	str	r4, [r0, #12]
 800afe4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800afe8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800afec:	b94c      	cbnz	r4, 800b002 <__pow5mult+0x66>
 800afee:	f240 2171 	movw	r1, #625	; 0x271
 800aff2:	4630      	mov	r0, r6
 800aff4:	f7ff ff12 	bl	800ae1c <__i2b>
 800aff8:	2300      	movs	r3, #0
 800affa:	f8c8 0008 	str.w	r0, [r8, #8]
 800affe:	4604      	mov	r4, r0
 800b000:	6003      	str	r3, [r0, #0]
 800b002:	f04f 0900 	mov.w	r9, #0
 800b006:	07eb      	lsls	r3, r5, #31
 800b008:	d50a      	bpl.n	800b020 <__pow5mult+0x84>
 800b00a:	4639      	mov	r1, r7
 800b00c:	4622      	mov	r2, r4
 800b00e:	4630      	mov	r0, r6
 800b010:	f7ff ff1a 	bl	800ae48 <__multiply>
 800b014:	4639      	mov	r1, r7
 800b016:	4680      	mov	r8, r0
 800b018:	4630      	mov	r0, r6
 800b01a:	f7ff fdfd 	bl	800ac18 <_Bfree>
 800b01e:	4647      	mov	r7, r8
 800b020:	106d      	asrs	r5, r5, #1
 800b022:	d00b      	beq.n	800b03c <__pow5mult+0xa0>
 800b024:	6820      	ldr	r0, [r4, #0]
 800b026:	b938      	cbnz	r0, 800b038 <__pow5mult+0x9c>
 800b028:	4622      	mov	r2, r4
 800b02a:	4621      	mov	r1, r4
 800b02c:	4630      	mov	r0, r6
 800b02e:	f7ff ff0b 	bl	800ae48 <__multiply>
 800b032:	6020      	str	r0, [r4, #0]
 800b034:	f8c0 9000 	str.w	r9, [r0]
 800b038:	4604      	mov	r4, r0
 800b03a:	e7e4      	b.n	800b006 <__pow5mult+0x6a>
 800b03c:	4638      	mov	r0, r7
 800b03e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b042:	bf00      	nop
 800b044:	0800d158 	.word	0x0800d158
 800b048:	0800cf0e 	.word	0x0800cf0e
 800b04c:	0800d00c 	.word	0x0800d00c

0800b050 <__lshift>:
 800b050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b054:	460c      	mov	r4, r1
 800b056:	6849      	ldr	r1, [r1, #4]
 800b058:	6923      	ldr	r3, [r4, #16]
 800b05a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b05e:	68a3      	ldr	r3, [r4, #8]
 800b060:	4607      	mov	r7, r0
 800b062:	4691      	mov	r9, r2
 800b064:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b068:	f108 0601 	add.w	r6, r8, #1
 800b06c:	42b3      	cmp	r3, r6
 800b06e:	db0b      	blt.n	800b088 <__lshift+0x38>
 800b070:	4638      	mov	r0, r7
 800b072:	f7ff fd91 	bl	800ab98 <_Balloc>
 800b076:	4605      	mov	r5, r0
 800b078:	b948      	cbnz	r0, 800b08e <__lshift+0x3e>
 800b07a:	4602      	mov	r2, r0
 800b07c:	4b2a      	ldr	r3, [pc, #168]	; (800b128 <__lshift+0xd8>)
 800b07e:	482b      	ldr	r0, [pc, #172]	; (800b12c <__lshift+0xdc>)
 800b080:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b084:	f001 f8f4 	bl	800c270 <__assert_func>
 800b088:	3101      	adds	r1, #1
 800b08a:	005b      	lsls	r3, r3, #1
 800b08c:	e7ee      	b.n	800b06c <__lshift+0x1c>
 800b08e:	2300      	movs	r3, #0
 800b090:	f100 0114 	add.w	r1, r0, #20
 800b094:	f100 0210 	add.w	r2, r0, #16
 800b098:	4618      	mov	r0, r3
 800b09a:	4553      	cmp	r3, sl
 800b09c:	db37      	blt.n	800b10e <__lshift+0xbe>
 800b09e:	6920      	ldr	r0, [r4, #16]
 800b0a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b0a4:	f104 0314 	add.w	r3, r4, #20
 800b0a8:	f019 091f 	ands.w	r9, r9, #31
 800b0ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b0b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b0b4:	d02f      	beq.n	800b116 <__lshift+0xc6>
 800b0b6:	f1c9 0e20 	rsb	lr, r9, #32
 800b0ba:	468a      	mov	sl, r1
 800b0bc:	f04f 0c00 	mov.w	ip, #0
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	fa02 f209 	lsl.w	r2, r2, r9
 800b0c6:	ea42 020c 	orr.w	r2, r2, ip
 800b0ca:	f84a 2b04 	str.w	r2, [sl], #4
 800b0ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0d2:	4298      	cmp	r0, r3
 800b0d4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b0d8:	d8f2      	bhi.n	800b0c0 <__lshift+0x70>
 800b0da:	1b03      	subs	r3, r0, r4
 800b0dc:	3b15      	subs	r3, #21
 800b0de:	f023 0303 	bic.w	r3, r3, #3
 800b0e2:	3304      	adds	r3, #4
 800b0e4:	f104 0215 	add.w	r2, r4, #21
 800b0e8:	4290      	cmp	r0, r2
 800b0ea:	bf38      	it	cc
 800b0ec:	2304      	movcc	r3, #4
 800b0ee:	f841 c003 	str.w	ip, [r1, r3]
 800b0f2:	f1bc 0f00 	cmp.w	ip, #0
 800b0f6:	d001      	beq.n	800b0fc <__lshift+0xac>
 800b0f8:	f108 0602 	add.w	r6, r8, #2
 800b0fc:	3e01      	subs	r6, #1
 800b0fe:	4638      	mov	r0, r7
 800b100:	612e      	str	r6, [r5, #16]
 800b102:	4621      	mov	r1, r4
 800b104:	f7ff fd88 	bl	800ac18 <_Bfree>
 800b108:	4628      	mov	r0, r5
 800b10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b10e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b112:	3301      	adds	r3, #1
 800b114:	e7c1      	b.n	800b09a <__lshift+0x4a>
 800b116:	3904      	subs	r1, #4
 800b118:	f853 2b04 	ldr.w	r2, [r3], #4
 800b11c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b120:	4298      	cmp	r0, r3
 800b122:	d8f9      	bhi.n	800b118 <__lshift+0xc8>
 800b124:	e7ea      	b.n	800b0fc <__lshift+0xac>
 800b126:	bf00      	nop
 800b128:	0800cf80 	.word	0x0800cf80
 800b12c:	0800d00c 	.word	0x0800d00c

0800b130 <__mcmp>:
 800b130:	b530      	push	{r4, r5, lr}
 800b132:	6902      	ldr	r2, [r0, #16]
 800b134:	690c      	ldr	r4, [r1, #16]
 800b136:	1b12      	subs	r2, r2, r4
 800b138:	d10e      	bne.n	800b158 <__mcmp+0x28>
 800b13a:	f100 0314 	add.w	r3, r0, #20
 800b13e:	3114      	adds	r1, #20
 800b140:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b144:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b148:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b14c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b150:	42a5      	cmp	r5, r4
 800b152:	d003      	beq.n	800b15c <__mcmp+0x2c>
 800b154:	d305      	bcc.n	800b162 <__mcmp+0x32>
 800b156:	2201      	movs	r2, #1
 800b158:	4610      	mov	r0, r2
 800b15a:	bd30      	pop	{r4, r5, pc}
 800b15c:	4283      	cmp	r3, r0
 800b15e:	d3f3      	bcc.n	800b148 <__mcmp+0x18>
 800b160:	e7fa      	b.n	800b158 <__mcmp+0x28>
 800b162:	f04f 32ff 	mov.w	r2, #4294967295
 800b166:	e7f7      	b.n	800b158 <__mcmp+0x28>

0800b168 <__mdiff>:
 800b168:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b16c:	460c      	mov	r4, r1
 800b16e:	4606      	mov	r6, r0
 800b170:	4611      	mov	r1, r2
 800b172:	4620      	mov	r0, r4
 800b174:	4690      	mov	r8, r2
 800b176:	f7ff ffdb 	bl	800b130 <__mcmp>
 800b17a:	1e05      	subs	r5, r0, #0
 800b17c:	d110      	bne.n	800b1a0 <__mdiff+0x38>
 800b17e:	4629      	mov	r1, r5
 800b180:	4630      	mov	r0, r6
 800b182:	f7ff fd09 	bl	800ab98 <_Balloc>
 800b186:	b930      	cbnz	r0, 800b196 <__mdiff+0x2e>
 800b188:	4b3a      	ldr	r3, [pc, #232]	; (800b274 <__mdiff+0x10c>)
 800b18a:	4602      	mov	r2, r0
 800b18c:	f240 2132 	movw	r1, #562	; 0x232
 800b190:	4839      	ldr	r0, [pc, #228]	; (800b278 <__mdiff+0x110>)
 800b192:	f001 f86d 	bl	800c270 <__assert_func>
 800b196:	2301      	movs	r3, #1
 800b198:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b19c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1a0:	bfa4      	itt	ge
 800b1a2:	4643      	movge	r3, r8
 800b1a4:	46a0      	movge	r8, r4
 800b1a6:	4630      	mov	r0, r6
 800b1a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b1ac:	bfa6      	itte	ge
 800b1ae:	461c      	movge	r4, r3
 800b1b0:	2500      	movge	r5, #0
 800b1b2:	2501      	movlt	r5, #1
 800b1b4:	f7ff fcf0 	bl	800ab98 <_Balloc>
 800b1b8:	b920      	cbnz	r0, 800b1c4 <__mdiff+0x5c>
 800b1ba:	4b2e      	ldr	r3, [pc, #184]	; (800b274 <__mdiff+0x10c>)
 800b1bc:	4602      	mov	r2, r0
 800b1be:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b1c2:	e7e5      	b.n	800b190 <__mdiff+0x28>
 800b1c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b1c8:	6926      	ldr	r6, [r4, #16]
 800b1ca:	60c5      	str	r5, [r0, #12]
 800b1cc:	f104 0914 	add.w	r9, r4, #20
 800b1d0:	f108 0514 	add.w	r5, r8, #20
 800b1d4:	f100 0e14 	add.w	lr, r0, #20
 800b1d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b1dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b1e0:	f108 0210 	add.w	r2, r8, #16
 800b1e4:	46f2      	mov	sl, lr
 800b1e6:	2100      	movs	r1, #0
 800b1e8:	f859 3b04 	ldr.w	r3, [r9], #4
 800b1ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b1f0:	fa1f f883 	uxth.w	r8, r3
 800b1f4:	fa11 f18b 	uxtah	r1, r1, fp
 800b1f8:	0c1b      	lsrs	r3, r3, #16
 800b1fa:	eba1 0808 	sub.w	r8, r1, r8
 800b1fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b202:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b206:	fa1f f888 	uxth.w	r8, r8
 800b20a:	1419      	asrs	r1, r3, #16
 800b20c:	454e      	cmp	r6, r9
 800b20e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b212:	f84a 3b04 	str.w	r3, [sl], #4
 800b216:	d8e7      	bhi.n	800b1e8 <__mdiff+0x80>
 800b218:	1b33      	subs	r3, r6, r4
 800b21a:	3b15      	subs	r3, #21
 800b21c:	f023 0303 	bic.w	r3, r3, #3
 800b220:	3304      	adds	r3, #4
 800b222:	3415      	adds	r4, #21
 800b224:	42a6      	cmp	r6, r4
 800b226:	bf38      	it	cc
 800b228:	2304      	movcc	r3, #4
 800b22a:	441d      	add	r5, r3
 800b22c:	4473      	add	r3, lr
 800b22e:	469e      	mov	lr, r3
 800b230:	462e      	mov	r6, r5
 800b232:	4566      	cmp	r6, ip
 800b234:	d30e      	bcc.n	800b254 <__mdiff+0xec>
 800b236:	f10c 0203 	add.w	r2, ip, #3
 800b23a:	1b52      	subs	r2, r2, r5
 800b23c:	f022 0203 	bic.w	r2, r2, #3
 800b240:	3d03      	subs	r5, #3
 800b242:	45ac      	cmp	ip, r5
 800b244:	bf38      	it	cc
 800b246:	2200      	movcc	r2, #0
 800b248:	441a      	add	r2, r3
 800b24a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b24e:	b17b      	cbz	r3, 800b270 <__mdiff+0x108>
 800b250:	6107      	str	r7, [r0, #16]
 800b252:	e7a3      	b.n	800b19c <__mdiff+0x34>
 800b254:	f856 8b04 	ldr.w	r8, [r6], #4
 800b258:	fa11 f288 	uxtah	r2, r1, r8
 800b25c:	1414      	asrs	r4, r2, #16
 800b25e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b262:	b292      	uxth	r2, r2
 800b264:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b268:	f84e 2b04 	str.w	r2, [lr], #4
 800b26c:	1421      	asrs	r1, r4, #16
 800b26e:	e7e0      	b.n	800b232 <__mdiff+0xca>
 800b270:	3f01      	subs	r7, #1
 800b272:	e7ea      	b.n	800b24a <__mdiff+0xe2>
 800b274:	0800cf80 	.word	0x0800cf80
 800b278:	0800d00c 	.word	0x0800d00c

0800b27c <__ulp>:
 800b27c:	b082      	sub	sp, #8
 800b27e:	ed8d 0b00 	vstr	d0, [sp]
 800b282:	9b01      	ldr	r3, [sp, #4]
 800b284:	4912      	ldr	r1, [pc, #72]	; (800b2d0 <__ulp+0x54>)
 800b286:	4019      	ands	r1, r3
 800b288:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b28c:	2900      	cmp	r1, #0
 800b28e:	dd05      	ble.n	800b29c <__ulp+0x20>
 800b290:	2200      	movs	r2, #0
 800b292:	460b      	mov	r3, r1
 800b294:	ec43 2b10 	vmov	d0, r2, r3
 800b298:	b002      	add	sp, #8
 800b29a:	4770      	bx	lr
 800b29c:	4249      	negs	r1, r1
 800b29e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b2a2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b2a6:	f04f 0200 	mov.w	r2, #0
 800b2aa:	f04f 0300 	mov.w	r3, #0
 800b2ae:	da04      	bge.n	800b2ba <__ulp+0x3e>
 800b2b0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b2b4:	fa41 f300 	asr.w	r3, r1, r0
 800b2b8:	e7ec      	b.n	800b294 <__ulp+0x18>
 800b2ba:	f1a0 0114 	sub.w	r1, r0, #20
 800b2be:	291e      	cmp	r1, #30
 800b2c0:	bfda      	itte	le
 800b2c2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b2c6:	fa20 f101 	lsrle.w	r1, r0, r1
 800b2ca:	2101      	movgt	r1, #1
 800b2cc:	460a      	mov	r2, r1
 800b2ce:	e7e1      	b.n	800b294 <__ulp+0x18>
 800b2d0:	7ff00000 	.word	0x7ff00000

0800b2d4 <__b2d>:
 800b2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2d6:	6905      	ldr	r5, [r0, #16]
 800b2d8:	f100 0714 	add.w	r7, r0, #20
 800b2dc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b2e0:	1f2e      	subs	r6, r5, #4
 800b2e2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	f7ff fd48 	bl	800ad7c <__hi0bits>
 800b2ec:	f1c0 0320 	rsb	r3, r0, #32
 800b2f0:	280a      	cmp	r0, #10
 800b2f2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b370 <__b2d+0x9c>
 800b2f6:	600b      	str	r3, [r1, #0]
 800b2f8:	dc14      	bgt.n	800b324 <__b2d+0x50>
 800b2fa:	f1c0 0e0b 	rsb	lr, r0, #11
 800b2fe:	fa24 f10e 	lsr.w	r1, r4, lr
 800b302:	42b7      	cmp	r7, r6
 800b304:	ea41 030c 	orr.w	r3, r1, ip
 800b308:	bf34      	ite	cc
 800b30a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b30e:	2100      	movcs	r1, #0
 800b310:	3015      	adds	r0, #21
 800b312:	fa04 f000 	lsl.w	r0, r4, r0
 800b316:	fa21 f10e 	lsr.w	r1, r1, lr
 800b31a:	ea40 0201 	orr.w	r2, r0, r1
 800b31e:	ec43 2b10 	vmov	d0, r2, r3
 800b322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b324:	42b7      	cmp	r7, r6
 800b326:	bf3a      	itte	cc
 800b328:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b32c:	f1a5 0608 	subcc.w	r6, r5, #8
 800b330:	2100      	movcs	r1, #0
 800b332:	380b      	subs	r0, #11
 800b334:	d017      	beq.n	800b366 <__b2d+0x92>
 800b336:	f1c0 0c20 	rsb	ip, r0, #32
 800b33a:	fa04 f500 	lsl.w	r5, r4, r0
 800b33e:	42be      	cmp	r6, r7
 800b340:	fa21 f40c 	lsr.w	r4, r1, ip
 800b344:	ea45 0504 	orr.w	r5, r5, r4
 800b348:	bf8c      	ite	hi
 800b34a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b34e:	2400      	movls	r4, #0
 800b350:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b354:	fa01 f000 	lsl.w	r0, r1, r0
 800b358:	fa24 f40c 	lsr.w	r4, r4, ip
 800b35c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b360:	ea40 0204 	orr.w	r2, r0, r4
 800b364:	e7db      	b.n	800b31e <__b2d+0x4a>
 800b366:	ea44 030c 	orr.w	r3, r4, ip
 800b36a:	460a      	mov	r2, r1
 800b36c:	e7d7      	b.n	800b31e <__b2d+0x4a>
 800b36e:	bf00      	nop
 800b370:	3ff00000 	.word	0x3ff00000

0800b374 <__d2b>:
 800b374:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b378:	4689      	mov	r9, r1
 800b37a:	2101      	movs	r1, #1
 800b37c:	ec57 6b10 	vmov	r6, r7, d0
 800b380:	4690      	mov	r8, r2
 800b382:	f7ff fc09 	bl	800ab98 <_Balloc>
 800b386:	4604      	mov	r4, r0
 800b388:	b930      	cbnz	r0, 800b398 <__d2b+0x24>
 800b38a:	4602      	mov	r2, r0
 800b38c:	4b25      	ldr	r3, [pc, #148]	; (800b424 <__d2b+0xb0>)
 800b38e:	4826      	ldr	r0, [pc, #152]	; (800b428 <__d2b+0xb4>)
 800b390:	f240 310a 	movw	r1, #778	; 0x30a
 800b394:	f000 ff6c 	bl	800c270 <__assert_func>
 800b398:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b39c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b3a0:	bb35      	cbnz	r5, 800b3f0 <__d2b+0x7c>
 800b3a2:	2e00      	cmp	r6, #0
 800b3a4:	9301      	str	r3, [sp, #4]
 800b3a6:	d028      	beq.n	800b3fa <__d2b+0x86>
 800b3a8:	4668      	mov	r0, sp
 800b3aa:	9600      	str	r6, [sp, #0]
 800b3ac:	f7ff fd06 	bl	800adbc <__lo0bits>
 800b3b0:	9900      	ldr	r1, [sp, #0]
 800b3b2:	b300      	cbz	r0, 800b3f6 <__d2b+0x82>
 800b3b4:	9a01      	ldr	r2, [sp, #4]
 800b3b6:	f1c0 0320 	rsb	r3, r0, #32
 800b3ba:	fa02 f303 	lsl.w	r3, r2, r3
 800b3be:	430b      	orrs	r3, r1
 800b3c0:	40c2      	lsrs	r2, r0
 800b3c2:	6163      	str	r3, [r4, #20]
 800b3c4:	9201      	str	r2, [sp, #4]
 800b3c6:	9b01      	ldr	r3, [sp, #4]
 800b3c8:	61a3      	str	r3, [r4, #24]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	bf14      	ite	ne
 800b3ce:	2202      	movne	r2, #2
 800b3d0:	2201      	moveq	r2, #1
 800b3d2:	6122      	str	r2, [r4, #16]
 800b3d4:	b1d5      	cbz	r5, 800b40c <__d2b+0x98>
 800b3d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b3da:	4405      	add	r5, r0
 800b3dc:	f8c9 5000 	str.w	r5, [r9]
 800b3e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b3e4:	f8c8 0000 	str.w	r0, [r8]
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	b003      	add	sp, #12
 800b3ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b3f4:	e7d5      	b.n	800b3a2 <__d2b+0x2e>
 800b3f6:	6161      	str	r1, [r4, #20]
 800b3f8:	e7e5      	b.n	800b3c6 <__d2b+0x52>
 800b3fa:	a801      	add	r0, sp, #4
 800b3fc:	f7ff fcde 	bl	800adbc <__lo0bits>
 800b400:	9b01      	ldr	r3, [sp, #4]
 800b402:	6163      	str	r3, [r4, #20]
 800b404:	2201      	movs	r2, #1
 800b406:	6122      	str	r2, [r4, #16]
 800b408:	3020      	adds	r0, #32
 800b40a:	e7e3      	b.n	800b3d4 <__d2b+0x60>
 800b40c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b410:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b414:	f8c9 0000 	str.w	r0, [r9]
 800b418:	6918      	ldr	r0, [r3, #16]
 800b41a:	f7ff fcaf 	bl	800ad7c <__hi0bits>
 800b41e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b422:	e7df      	b.n	800b3e4 <__d2b+0x70>
 800b424:	0800cf80 	.word	0x0800cf80
 800b428:	0800d00c 	.word	0x0800d00c

0800b42c <__ratio>:
 800b42c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b430:	4688      	mov	r8, r1
 800b432:	4669      	mov	r1, sp
 800b434:	4681      	mov	r9, r0
 800b436:	f7ff ff4d 	bl	800b2d4 <__b2d>
 800b43a:	a901      	add	r1, sp, #4
 800b43c:	4640      	mov	r0, r8
 800b43e:	ec55 4b10 	vmov	r4, r5, d0
 800b442:	f7ff ff47 	bl	800b2d4 <__b2d>
 800b446:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b44a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b44e:	eba3 0c02 	sub.w	ip, r3, r2
 800b452:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b456:	1a9b      	subs	r3, r3, r2
 800b458:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b45c:	ec51 0b10 	vmov	r0, r1, d0
 800b460:	2b00      	cmp	r3, #0
 800b462:	bfd6      	itet	le
 800b464:	460a      	movle	r2, r1
 800b466:	462a      	movgt	r2, r5
 800b468:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b46c:	468b      	mov	fp, r1
 800b46e:	462f      	mov	r7, r5
 800b470:	bfd4      	ite	le
 800b472:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b476:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b47a:	4620      	mov	r0, r4
 800b47c:	ee10 2a10 	vmov	r2, s0
 800b480:	465b      	mov	r3, fp
 800b482:	4639      	mov	r1, r7
 800b484:	f7f5 f9e2 	bl	800084c <__aeabi_ddiv>
 800b488:	ec41 0b10 	vmov	d0, r0, r1
 800b48c:	b003      	add	sp, #12
 800b48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b492 <__copybits>:
 800b492:	3901      	subs	r1, #1
 800b494:	b570      	push	{r4, r5, r6, lr}
 800b496:	1149      	asrs	r1, r1, #5
 800b498:	6914      	ldr	r4, [r2, #16]
 800b49a:	3101      	adds	r1, #1
 800b49c:	f102 0314 	add.w	r3, r2, #20
 800b4a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b4a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b4a8:	1f05      	subs	r5, r0, #4
 800b4aa:	42a3      	cmp	r3, r4
 800b4ac:	d30c      	bcc.n	800b4c8 <__copybits+0x36>
 800b4ae:	1aa3      	subs	r3, r4, r2
 800b4b0:	3b11      	subs	r3, #17
 800b4b2:	f023 0303 	bic.w	r3, r3, #3
 800b4b6:	3211      	adds	r2, #17
 800b4b8:	42a2      	cmp	r2, r4
 800b4ba:	bf88      	it	hi
 800b4bc:	2300      	movhi	r3, #0
 800b4be:	4418      	add	r0, r3
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	4288      	cmp	r0, r1
 800b4c4:	d305      	bcc.n	800b4d2 <__copybits+0x40>
 800b4c6:	bd70      	pop	{r4, r5, r6, pc}
 800b4c8:	f853 6b04 	ldr.w	r6, [r3], #4
 800b4cc:	f845 6f04 	str.w	r6, [r5, #4]!
 800b4d0:	e7eb      	b.n	800b4aa <__copybits+0x18>
 800b4d2:	f840 3b04 	str.w	r3, [r0], #4
 800b4d6:	e7f4      	b.n	800b4c2 <__copybits+0x30>

0800b4d8 <__any_on>:
 800b4d8:	f100 0214 	add.w	r2, r0, #20
 800b4dc:	6900      	ldr	r0, [r0, #16]
 800b4de:	114b      	asrs	r3, r1, #5
 800b4e0:	4298      	cmp	r0, r3
 800b4e2:	b510      	push	{r4, lr}
 800b4e4:	db11      	blt.n	800b50a <__any_on+0x32>
 800b4e6:	dd0a      	ble.n	800b4fe <__any_on+0x26>
 800b4e8:	f011 011f 	ands.w	r1, r1, #31
 800b4ec:	d007      	beq.n	800b4fe <__any_on+0x26>
 800b4ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b4f2:	fa24 f001 	lsr.w	r0, r4, r1
 800b4f6:	fa00 f101 	lsl.w	r1, r0, r1
 800b4fa:	428c      	cmp	r4, r1
 800b4fc:	d10b      	bne.n	800b516 <__any_on+0x3e>
 800b4fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b502:	4293      	cmp	r3, r2
 800b504:	d803      	bhi.n	800b50e <__any_on+0x36>
 800b506:	2000      	movs	r0, #0
 800b508:	bd10      	pop	{r4, pc}
 800b50a:	4603      	mov	r3, r0
 800b50c:	e7f7      	b.n	800b4fe <__any_on+0x26>
 800b50e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b512:	2900      	cmp	r1, #0
 800b514:	d0f5      	beq.n	800b502 <__any_on+0x2a>
 800b516:	2001      	movs	r0, #1
 800b518:	e7f6      	b.n	800b508 <__any_on+0x30>

0800b51a <_calloc_r>:
 800b51a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b51c:	fba1 2402 	umull	r2, r4, r1, r2
 800b520:	b94c      	cbnz	r4, 800b536 <_calloc_r+0x1c>
 800b522:	4611      	mov	r1, r2
 800b524:	9201      	str	r2, [sp, #4]
 800b526:	f000 f87b 	bl	800b620 <_malloc_r>
 800b52a:	9a01      	ldr	r2, [sp, #4]
 800b52c:	4605      	mov	r5, r0
 800b52e:	b930      	cbnz	r0, 800b53e <_calloc_r+0x24>
 800b530:	4628      	mov	r0, r5
 800b532:	b003      	add	sp, #12
 800b534:	bd30      	pop	{r4, r5, pc}
 800b536:	220c      	movs	r2, #12
 800b538:	6002      	str	r2, [r0, #0]
 800b53a:	2500      	movs	r5, #0
 800b53c:	e7f8      	b.n	800b530 <_calloc_r+0x16>
 800b53e:	4621      	mov	r1, r4
 800b540:	f7fc faf4 	bl	8007b2c <memset>
 800b544:	e7f4      	b.n	800b530 <_calloc_r+0x16>
	...

0800b548 <_free_r>:
 800b548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b54a:	2900      	cmp	r1, #0
 800b54c:	d044      	beq.n	800b5d8 <_free_r+0x90>
 800b54e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b552:	9001      	str	r0, [sp, #4]
 800b554:	2b00      	cmp	r3, #0
 800b556:	f1a1 0404 	sub.w	r4, r1, #4
 800b55a:	bfb8      	it	lt
 800b55c:	18e4      	addlt	r4, r4, r3
 800b55e:	f001 f88b 	bl	800c678 <__malloc_lock>
 800b562:	4a1e      	ldr	r2, [pc, #120]	; (800b5dc <_free_r+0x94>)
 800b564:	9801      	ldr	r0, [sp, #4]
 800b566:	6813      	ldr	r3, [r2, #0]
 800b568:	b933      	cbnz	r3, 800b578 <_free_r+0x30>
 800b56a:	6063      	str	r3, [r4, #4]
 800b56c:	6014      	str	r4, [r2, #0]
 800b56e:	b003      	add	sp, #12
 800b570:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b574:	f001 b886 	b.w	800c684 <__malloc_unlock>
 800b578:	42a3      	cmp	r3, r4
 800b57a:	d908      	bls.n	800b58e <_free_r+0x46>
 800b57c:	6825      	ldr	r5, [r4, #0]
 800b57e:	1961      	adds	r1, r4, r5
 800b580:	428b      	cmp	r3, r1
 800b582:	bf01      	itttt	eq
 800b584:	6819      	ldreq	r1, [r3, #0]
 800b586:	685b      	ldreq	r3, [r3, #4]
 800b588:	1949      	addeq	r1, r1, r5
 800b58a:	6021      	streq	r1, [r4, #0]
 800b58c:	e7ed      	b.n	800b56a <_free_r+0x22>
 800b58e:	461a      	mov	r2, r3
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	b10b      	cbz	r3, 800b598 <_free_r+0x50>
 800b594:	42a3      	cmp	r3, r4
 800b596:	d9fa      	bls.n	800b58e <_free_r+0x46>
 800b598:	6811      	ldr	r1, [r2, #0]
 800b59a:	1855      	adds	r5, r2, r1
 800b59c:	42a5      	cmp	r5, r4
 800b59e:	d10b      	bne.n	800b5b8 <_free_r+0x70>
 800b5a0:	6824      	ldr	r4, [r4, #0]
 800b5a2:	4421      	add	r1, r4
 800b5a4:	1854      	adds	r4, r2, r1
 800b5a6:	42a3      	cmp	r3, r4
 800b5a8:	6011      	str	r1, [r2, #0]
 800b5aa:	d1e0      	bne.n	800b56e <_free_r+0x26>
 800b5ac:	681c      	ldr	r4, [r3, #0]
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	6053      	str	r3, [r2, #4]
 800b5b2:	4421      	add	r1, r4
 800b5b4:	6011      	str	r1, [r2, #0]
 800b5b6:	e7da      	b.n	800b56e <_free_r+0x26>
 800b5b8:	d902      	bls.n	800b5c0 <_free_r+0x78>
 800b5ba:	230c      	movs	r3, #12
 800b5bc:	6003      	str	r3, [r0, #0]
 800b5be:	e7d6      	b.n	800b56e <_free_r+0x26>
 800b5c0:	6825      	ldr	r5, [r4, #0]
 800b5c2:	1961      	adds	r1, r4, r5
 800b5c4:	428b      	cmp	r3, r1
 800b5c6:	bf04      	itt	eq
 800b5c8:	6819      	ldreq	r1, [r3, #0]
 800b5ca:	685b      	ldreq	r3, [r3, #4]
 800b5cc:	6063      	str	r3, [r4, #4]
 800b5ce:	bf04      	itt	eq
 800b5d0:	1949      	addeq	r1, r1, r5
 800b5d2:	6021      	streq	r1, [r4, #0]
 800b5d4:	6054      	str	r4, [r2, #4]
 800b5d6:	e7ca      	b.n	800b56e <_free_r+0x26>
 800b5d8:	b003      	add	sp, #12
 800b5da:	bd30      	pop	{r4, r5, pc}
 800b5dc:	20000918 	.word	0x20000918

0800b5e0 <sbrk_aligned>:
 800b5e0:	b570      	push	{r4, r5, r6, lr}
 800b5e2:	4e0e      	ldr	r6, [pc, #56]	; (800b61c <sbrk_aligned+0x3c>)
 800b5e4:	460c      	mov	r4, r1
 800b5e6:	6831      	ldr	r1, [r6, #0]
 800b5e8:	4605      	mov	r5, r0
 800b5ea:	b911      	cbnz	r1, 800b5f2 <sbrk_aligned+0x12>
 800b5ec:	f000 fd28 	bl	800c040 <_sbrk_r>
 800b5f0:	6030      	str	r0, [r6, #0]
 800b5f2:	4621      	mov	r1, r4
 800b5f4:	4628      	mov	r0, r5
 800b5f6:	f000 fd23 	bl	800c040 <_sbrk_r>
 800b5fa:	1c43      	adds	r3, r0, #1
 800b5fc:	d00a      	beq.n	800b614 <sbrk_aligned+0x34>
 800b5fe:	1cc4      	adds	r4, r0, #3
 800b600:	f024 0403 	bic.w	r4, r4, #3
 800b604:	42a0      	cmp	r0, r4
 800b606:	d007      	beq.n	800b618 <sbrk_aligned+0x38>
 800b608:	1a21      	subs	r1, r4, r0
 800b60a:	4628      	mov	r0, r5
 800b60c:	f000 fd18 	bl	800c040 <_sbrk_r>
 800b610:	3001      	adds	r0, #1
 800b612:	d101      	bne.n	800b618 <sbrk_aligned+0x38>
 800b614:	f04f 34ff 	mov.w	r4, #4294967295
 800b618:	4620      	mov	r0, r4
 800b61a:	bd70      	pop	{r4, r5, r6, pc}
 800b61c:	2000091c 	.word	0x2000091c

0800b620 <_malloc_r>:
 800b620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b624:	1ccd      	adds	r5, r1, #3
 800b626:	f025 0503 	bic.w	r5, r5, #3
 800b62a:	3508      	adds	r5, #8
 800b62c:	2d0c      	cmp	r5, #12
 800b62e:	bf38      	it	cc
 800b630:	250c      	movcc	r5, #12
 800b632:	2d00      	cmp	r5, #0
 800b634:	4607      	mov	r7, r0
 800b636:	db01      	blt.n	800b63c <_malloc_r+0x1c>
 800b638:	42a9      	cmp	r1, r5
 800b63a:	d905      	bls.n	800b648 <_malloc_r+0x28>
 800b63c:	230c      	movs	r3, #12
 800b63e:	603b      	str	r3, [r7, #0]
 800b640:	2600      	movs	r6, #0
 800b642:	4630      	mov	r0, r6
 800b644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b648:	4e2e      	ldr	r6, [pc, #184]	; (800b704 <_malloc_r+0xe4>)
 800b64a:	f001 f815 	bl	800c678 <__malloc_lock>
 800b64e:	6833      	ldr	r3, [r6, #0]
 800b650:	461c      	mov	r4, r3
 800b652:	bb34      	cbnz	r4, 800b6a2 <_malloc_r+0x82>
 800b654:	4629      	mov	r1, r5
 800b656:	4638      	mov	r0, r7
 800b658:	f7ff ffc2 	bl	800b5e0 <sbrk_aligned>
 800b65c:	1c43      	adds	r3, r0, #1
 800b65e:	4604      	mov	r4, r0
 800b660:	d14d      	bne.n	800b6fe <_malloc_r+0xde>
 800b662:	6834      	ldr	r4, [r6, #0]
 800b664:	4626      	mov	r6, r4
 800b666:	2e00      	cmp	r6, #0
 800b668:	d140      	bne.n	800b6ec <_malloc_r+0xcc>
 800b66a:	6823      	ldr	r3, [r4, #0]
 800b66c:	4631      	mov	r1, r6
 800b66e:	4638      	mov	r0, r7
 800b670:	eb04 0803 	add.w	r8, r4, r3
 800b674:	f000 fce4 	bl	800c040 <_sbrk_r>
 800b678:	4580      	cmp	r8, r0
 800b67a:	d13a      	bne.n	800b6f2 <_malloc_r+0xd2>
 800b67c:	6821      	ldr	r1, [r4, #0]
 800b67e:	3503      	adds	r5, #3
 800b680:	1a6d      	subs	r5, r5, r1
 800b682:	f025 0503 	bic.w	r5, r5, #3
 800b686:	3508      	adds	r5, #8
 800b688:	2d0c      	cmp	r5, #12
 800b68a:	bf38      	it	cc
 800b68c:	250c      	movcc	r5, #12
 800b68e:	4629      	mov	r1, r5
 800b690:	4638      	mov	r0, r7
 800b692:	f7ff ffa5 	bl	800b5e0 <sbrk_aligned>
 800b696:	3001      	adds	r0, #1
 800b698:	d02b      	beq.n	800b6f2 <_malloc_r+0xd2>
 800b69a:	6823      	ldr	r3, [r4, #0]
 800b69c:	442b      	add	r3, r5
 800b69e:	6023      	str	r3, [r4, #0]
 800b6a0:	e00e      	b.n	800b6c0 <_malloc_r+0xa0>
 800b6a2:	6822      	ldr	r2, [r4, #0]
 800b6a4:	1b52      	subs	r2, r2, r5
 800b6a6:	d41e      	bmi.n	800b6e6 <_malloc_r+0xc6>
 800b6a8:	2a0b      	cmp	r2, #11
 800b6aa:	d916      	bls.n	800b6da <_malloc_r+0xba>
 800b6ac:	1961      	adds	r1, r4, r5
 800b6ae:	42a3      	cmp	r3, r4
 800b6b0:	6025      	str	r5, [r4, #0]
 800b6b2:	bf18      	it	ne
 800b6b4:	6059      	strne	r1, [r3, #4]
 800b6b6:	6863      	ldr	r3, [r4, #4]
 800b6b8:	bf08      	it	eq
 800b6ba:	6031      	streq	r1, [r6, #0]
 800b6bc:	5162      	str	r2, [r4, r5]
 800b6be:	604b      	str	r3, [r1, #4]
 800b6c0:	4638      	mov	r0, r7
 800b6c2:	f104 060b 	add.w	r6, r4, #11
 800b6c6:	f000 ffdd 	bl	800c684 <__malloc_unlock>
 800b6ca:	f026 0607 	bic.w	r6, r6, #7
 800b6ce:	1d23      	adds	r3, r4, #4
 800b6d0:	1af2      	subs	r2, r6, r3
 800b6d2:	d0b6      	beq.n	800b642 <_malloc_r+0x22>
 800b6d4:	1b9b      	subs	r3, r3, r6
 800b6d6:	50a3      	str	r3, [r4, r2]
 800b6d8:	e7b3      	b.n	800b642 <_malloc_r+0x22>
 800b6da:	6862      	ldr	r2, [r4, #4]
 800b6dc:	42a3      	cmp	r3, r4
 800b6de:	bf0c      	ite	eq
 800b6e0:	6032      	streq	r2, [r6, #0]
 800b6e2:	605a      	strne	r2, [r3, #4]
 800b6e4:	e7ec      	b.n	800b6c0 <_malloc_r+0xa0>
 800b6e6:	4623      	mov	r3, r4
 800b6e8:	6864      	ldr	r4, [r4, #4]
 800b6ea:	e7b2      	b.n	800b652 <_malloc_r+0x32>
 800b6ec:	4634      	mov	r4, r6
 800b6ee:	6876      	ldr	r6, [r6, #4]
 800b6f0:	e7b9      	b.n	800b666 <_malloc_r+0x46>
 800b6f2:	230c      	movs	r3, #12
 800b6f4:	603b      	str	r3, [r7, #0]
 800b6f6:	4638      	mov	r0, r7
 800b6f8:	f000 ffc4 	bl	800c684 <__malloc_unlock>
 800b6fc:	e7a1      	b.n	800b642 <_malloc_r+0x22>
 800b6fe:	6025      	str	r5, [r4, #0]
 800b700:	e7de      	b.n	800b6c0 <_malloc_r+0xa0>
 800b702:	bf00      	nop
 800b704:	20000918 	.word	0x20000918

0800b708 <__ssputs_r>:
 800b708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b70c:	688e      	ldr	r6, [r1, #8]
 800b70e:	429e      	cmp	r6, r3
 800b710:	4682      	mov	sl, r0
 800b712:	460c      	mov	r4, r1
 800b714:	4690      	mov	r8, r2
 800b716:	461f      	mov	r7, r3
 800b718:	d838      	bhi.n	800b78c <__ssputs_r+0x84>
 800b71a:	898a      	ldrh	r2, [r1, #12]
 800b71c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b720:	d032      	beq.n	800b788 <__ssputs_r+0x80>
 800b722:	6825      	ldr	r5, [r4, #0]
 800b724:	6909      	ldr	r1, [r1, #16]
 800b726:	eba5 0901 	sub.w	r9, r5, r1
 800b72a:	6965      	ldr	r5, [r4, #20]
 800b72c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b730:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b734:	3301      	adds	r3, #1
 800b736:	444b      	add	r3, r9
 800b738:	106d      	asrs	r5, r5, #1
 800b73a:	429d      	cmp	r5, r3
 800b73c:	bf38      	it	cc
 800b73e:	461d      	movcc	r5, r3
 800b740:	0553      	lsls	r3, r2, #21
 800b742:	d531      	bpl.n	800b7a8 <__ssputs_r+0xa0>
 800b744:	4629      	mov	r1, r5
 800b746:	f7ff ff6b 	bl	800b620 <_malloc_r>
 800b74a:	4606      	mov	r6, r0
 800b74c:	b950      	cbnz	r0, 800b764 <__ssputs_r+0x5c>
 800b74e:	230c      	movs	r3, #12
 800b750:	f8ca 3000 	str.w	r3, [sl]
 800b754:	89a3      	ldrh	r3, [r4, #12]
 800b756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b75a:	81a3      	strh	r3, [r4, #12]
 800b75c:	f04f 30ff 	mov.w	r0, #4294967295
 800b760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b764:	6921      	ldr	r1, [r4, #16]
 800b766:	464a      	mov	r2, r9
 800b768:	f7ff fa08 	bl	800ab7c <memcpy>
 800b76c:	89a3      	ldrh	r3, [r4, #12]
 800b76e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b776:	81a3      	strh	r3, [r4, #12]
 800b778:	6126      	str	r6, [r4, #16]
 800b77a:	6165      	str	r5, [r4, #20]
 800b77c:	444e      	add	r6, r9
 800b77e:	eba5 0509 	sub.w	r5, r5, r9
 800b782:	6026      	str	r6, [r4, #0]
 800b784:	60a5      	str	r5, [r4, #8]
 800b786:	463e      	mov	r6, r7
 800b788:	42be      	cmp	r6, r7
 800b78a:	d900      	bls.n	800b78e <__ssputs_r+0x86>
 800b78c:	463e      	mov	r6, r7
 800b78e:	6820      	ldr	r0, [r4, #0]
 800b790:	4632      	mov	r2, r6
 800b792:	4641      	mov	r1, r8
 800b794:	f000 ff56 	bl	800c644 <memmove>
 800b798:	68a3      	ldr	r3, [r4, #8]
 800b79a:	1b9b      	subs	r3, r3, r6
 800b79c:	60a3      	str	r3, [r4, #8]
 800b79e:	6823      	ldr	r3, [r4, #0]
 800b7a0:	4433      	add	r3, r6
 800b7a2:	6023      	str	r3, [r4, #0]
 800b7a4:	2000      	movs	r0, #0
 800b7a6:	e7db      	b.n	800b760 <__ssputs_r+0x58>
 800b7a8:	462a      	mov	r2, r5
 800b7aa:	f000 ff71 	bl	800c690 <_realloc_r>
 800b7ae:	4606      	mov	r6, r0
 800b7b0:	2800      	cmp	r0, #0
 800b7b2:	d1e1      	bne.n	800b778 <__ssputs_r+0x70>
 800b7b4:	6921      	ldr	r1, [r4, #16]
 800b7b6:	4650      	mov	r0, sl
 800b7b8:	f7ff fec6 	bl	800b548 <_free_r>
 800b7bc:	e7c7      	b.n	800b74e <__ssputs_r+0x46>
	...

0800b7c0 <_svfiprintf_r>:
 800b7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c4:	4698      	mov	r8, r3
 800b7c6:	898b      	ldrh	r3, [r1, #12]
 800b7c8:	061b      	lsls	r3, r3, #24
 800b7ca:	b09d      	sub	sp, #116	; 0x74
 800b7cc:	4607      	mov	r7, r0
 800b7ce:	460d      	mov	r5, r1
 800b7d0:	4614      	mov	r4, r2
 800b7d2:	d50e      	bpl.n	800b7f2 <_svfiprintf_r+0x32>
 800b7d4:	690b      	ldr	r3, [r1, #16]
 800b7d6:	b963      	cbnz	r3, 800b7f2 <_svfiprintf_r+0x32>
 800b7d8:	2140      	movs	r1, #64	; 0x40
 800b7da:	f7ff ff21 	bl	800b620 <_malloc_r>
 800b7de:	6028      	str	r0, [r5, #0]
 800b7e0:	6128      	str	r0, [r5, #16]
 800b7e2:	b920      	cbnz	r0, 800b7ee <_svfiprintf_r+0x2e>
 800b7e4:	230c      	movs	r3, #12
 800b7e6:	603b      	str	r3, [r7, #0]
 800b7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ec:	e0d1      	b.n	800b992 <_svfiprintf_r+0x1d2>
 800b7ee:	2340      	movs	r3, #64	; 0x40
 800b7f0:	616b      	str	r3, [r5, #20]
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b7f6:	2320      	movs	r3, #32
 800b7f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b800:	2330      	movs	r3, #48	; 0x30
 800b802:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b9ac <_svfiprintf_r+0x1ec>
 800b806:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b80a:	f04f 0901 	mov.w	r9, #1
 800b80e:	4623      	mov	r3, r4
 800b810:	469a      	mov	sl, r3
 800b812:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b816:	b10a      	cbz	r2, 800b81c <_svfiprintf_r+0x5c>
 800b818:	2a25      	cmp	r2, #37	; 0x25
 800b81a:	d1f9      	bne.n	800b810 <_svfiprintf_r+0x50>
 800b81c:	ebba 0b04 	subs.w	fp, sl, r4
 800b820:	d00b      	beq.n	800b83a <_svfiprintf_r+0x7a>
 800b822:	465b      	mov	r3, fp
 800b824:	4622      	mov	r2, r4
 800b826:	4629      	mov	r1, r5
 800b828:	4638      	mov	r0, r7
 800b82a:	f7ff ff6d 	bl	800b708 <__ssputs_r>
 800b82e:	3001      	adds	r0, #1
 800b830:	f000 80aa 	beq.w	800b988 <_svfiprintf_r+0x1c8>
 800b834:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b836:	445a      	add	r2, fp
 800b838:	9209      	str	r2, [sp, #36]	; 0x24
 800b83a:	f89a 3000 	ldrb.w	r3, [sl]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	f000 80a2 	beq.w	800b988 <_svfiprintf_r+0x1c8>
 800b844:	2300      	movs	r3, #0
 800b846:	f04f 32ff 	mov.w	r2, #4294967295
 800b84a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b84e:	f10a 0a01 	add.w	sl, sl, #1
 800b852:	9304      	str	r3, [sp, #16]
 800b854:	9307      	str	r3, [sp, #28]
 800b856:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b85a:	931a      	str	r3, [sp, #104]	; 0x68
 800b85c:	4654      	mov	r4, sl
 800b85e:	2205      	movs	r2, #5
 800b860:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b864:	4851      	ldr	r0, [pc, #324]	; (800b9ac <_svfiprintf_r+0x1ec>)
 800b866:	f7f4 fcbb 	bl	80001e0 <memchr>
 800b86a:	9a04      	ldr	r2, [sp, #16]
 800b86c:	b9d8      	cbnz	r0, 800b8a6 <_svfiprintf_r+0xe6>
 800b86e:	06d0      	lsls	r0, r2, #27
 800b870:	bf44      	itt	mi
 800b872:	2320      	movmi	r3, #32
 800b874:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b878:	0711      	lsls	r1, r2, #28
 800b87a:	bf44      	itt	mi
 800b87c:	232b      	movmi	r3, #43	; 0x2b
 800b87e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b882:	f89a 3000 	ldrb.w	r3, [sl]
 800b886:	2b2a      	cmp	r3, #42	; 0x2a
 800b888:	d015      	beq.n	800b8b6 <_svfiprintf_r+0xf6>
 800b88a:	9a07      	ldr	r2, [sp, #28]
 800b88c:	4654      	mov	r4, sl
 800b88e:	2000      	movs	r0, #0
 800b890:	f04f 0c0a 	mov.w	ip, #10
 800b894:	4621      	mov	r1, r4
 800b896:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b89a:	3b30      	subs	r3, #48	; 0x30
 800b89c:	2b09      	cmp	r3, #9
 800b89e:	d94e      	bls.n	800b93e <_svfiprintf_r+0x17e>
 800b8a0:	b1b0      	cbz	r0, 800b8d0 <_svfiprintf_r+0x110>
 800b8a2:	9207      	str	r2, [sp, #28]
 800b8a4:	e014      	b.n	800b8d0 <_svfiprintf_r+0x110>
 800b8a6:	eba0 0308 	sub.w	r3, r0, r8
 800b8aa:	fa09 f303 	lsl.w	r3, r9, r3
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	9304      	str	r3, [sp, #16]
 800b8b2:	46a2      	mov	sl, r4
 800b8b4:	e7d2      	b.n	800b85c <_svfiprintf_r+0x9c>
 800b8b6:	9b03      	ldr	r3, [sp, #12]
 800b8b8:	1d19      	adds	r1, r3, #4
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	9103      	str	r1, [sp, #12]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	bfbb      	ittet	lt
 800b8c2:	425b      	neglt	r3, r3
 800b8c4:	f042 0202 	orrlt.w	r2, r2, #2
 800b8c8:	9307      	strge	r3, [sp, #28]
 800b8ca:	9307      	strlt	r3, [sp, #28]
 800b8cc:	bfb8      	it	lt
 800b8ce:	9204      	strlt	r2, [sp, #16]
 800b8d0:	7823      	ldrb	r3, [r4, #0]
 800b8d2:	2b2e      	cmp	r3, #46	; 0x2e
 800b8d4:	d10c      	bne.n	800b8f0 <_svfiprintf_r+0x130>
 800b8d6:	7863      	ldrb	r3, [r4, #1]
 800b8d8:	2b2a      	cmp	r3, #42	; 0x2a
 800b8da:	d135      	bne.n	800b948 <_svfiprintf_r+0x188>
 800b8dc:	9b03      	ldr	r3, [sp, #12]
 800b8de:	1d1a      	adds	r2, r3, #4
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	9203      	str	r2, [sp, #12]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	bfb8      	it	lt
 800b8e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b8ec:	3402      	adds	r4, #2
 800b8ee:	9305      	str	r3, [sp, #20]
 800b8f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b9bc <_svfiprintf_r+0x1fc>
 800b8f4:	7821      	ldrb	r1, [r4, #0]
 800b8f6:	2203      	movs	r2, #3
 800b8f8:	4650      	mov	r0, sl
 800b8fa:	f7f4 fc71 	bl	80001e0 <memchr>
 800b8fe:	b140      	cbz	r0, 800b912 <_svfiprintf_r+0x152>
 800b900:	2340      	movs	r3, #64	; 0x40
 800b902:	eba0 000a 	sub.w	r0, r0, sl
 800b906:	fa03 f000 	lsl.w	r0, r3, r0
 800b90a:	9b04      	ldr	r3, [sp, #16]
 800b90c:	4303      	orrs	r3, r0
 800b90e:	3401      	adds	r4, #1
 800b910:	9304      	str	r3, [sp, #16]
 800b912:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b916:	4826      	ldr	r0, [pc, #152]	; (800b9b0 <_svfiprintf_r+0x1f0>)
 800b918:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b91c:	2206      	movs	r2, #6
 800b91e:	f7f4 fc5f 	bl	80001e0 <memchr>
 800b922:	2800      	cmp	r0, #0
 800b924:	d038      	beq.n	800b998 <_svfiprintf_r+0x1d8>
 800b926:	4b23      	ldr	r3, [pc, #140]	; (800b9b4 <_svfiprintf_r+0x1f4>)
 800b928:	bb1b      	cbnz	r3, 800b972 <_svfiprintf_r+0x1b2>
 800b92a:	9b03      	ldr	r3, [sp, #12]
 800b92c:	3307      	adds	r3, #7
 800b92e:	f023 0307 	bic.w	r3, r3, #7
 800b932:	3308      	adds	r3, #8
 800b934:	9303      	str	r3, [sp, #12]
 800b936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b938:	4433      	add	r3, r6
 800b93a:	9309      	str	r3, [sp, #36]	; 0x24
 800b93c:	e767      	b.n	800b80e <_svfiprintf_r+0x4e>
 800b93e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b942:	460c      	mov	r4, r1
 800b944:	2001      	movs	r0, #1
 800b946:	e7a5      	b.n	800b894 <_svfiprintf_r+0xd4>
 800b948:	2300      	movs	r3, #0
 800b94a:	3401      	adds	r4, #1
 800b94c:	9305      	str	r3, [sp, #20]
 800b94e:	4619      	mov	r1, r3
 800b950:	f04f 0c0a 	mov.w	ip, #10
 800b954:	4620      	mov	r0, r4
 800b956:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b95a:	3a30      	subs	r2, #48	; 0x30
 800b95c:	2a09      	cmp	r2, #9
 800b95e:	d903      	bls.n	800b968 <_svfiprintf_r+0x1a8>
 800b960:	2b00      	cmp	r3, #0
 800b962:	d0c5      	beq.n	800b8f0 <_svfiprintf_r+0x130>
 800b964:	9105      	str	r1, [sp, #20]
 800b966:	e7c3      	b.n	800b8f0 <_svfiprintf_r+0x130>
 800b968:	fb0c 2101 	mla	r1, ip, r1, r2
 800b96c:	4604      	mov	r4, r0
 800b96e:	2301      	movs	r3, #1
 800b970:	e7f0      	b.n	800b954 <_svfiprintf_r+0x194>
 800b972:	ab03      	add	r3, sp, #12
 800b974:	9300      	str	r3, [sp, #0]
 800b976:	462a      	mov	r2, r5
 800b978:	4b0f      	ldr	r3, [pc, #60]	; (800b9b8 <_svfiprintf_r+0x1f8>)
 800b97a:	a904      	add	r1, sp, #16
 800b97c:	4638      	mov	r0, r7
 800b97e:	f7fc f97d 	bl	8007c7c <_printf_float>
 800b982:	1c42      	adds	r2, r0, #1
 800b984:	4606      	mov	r6, r0
 800b986:	d1d6      	bne.n	800b936 <_svfiprintf_r+0x176>
 800b988:	89ab      	ldrh	r3, [r5, #12]
 800b98a:	065b      	lsls	r3, r3, #25
 800b98c:	f53f af2c 	bmi.w	800b7e8 <_svfiprintf_r+0x28>
 800b990:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b992:	b01d      	add	sp, #116	; 0x74
 800b994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b998:	ab03      	add	r3, sp, #12
 800b99a:	9300      	str	r3, [sp, #0]
 800b99c:	462a      	mov	r2, r5
 800b99e:	4b06      	ldr	r3, [pc, #24]	; (800b9b8 <_svfiprintf_r+0x1f8>)
 800b9a0:	a904      	add	r1, sp, #16
 800b9a2:	4638      	mov	r0, r7
 800b9a4:	f7fc fc0e 	bl	80081c4 <_printf_i>
 800b9a8:	e7eb      	b.n	800b982 <_svfiprintf_r+0x1c2>
 800b9aa:	bf00      	nop
 800b9ac:	0800d164 	.word	0x0800d164
 800b9b0:	0800d16e 	.word	0x0800d16e
 800b9b4:	08007c7d 	.word	0x08007c7d
 800b9b8:	0800b709 	.word	0x0800b709
 800b9bc:	0800d16a 	.word	0x0800d16a

0800b9c0 <_sungetc_r>:
 800b9c0:	b538      	push	{r3, r4, r5, lr}
 800b9c2:	1c4b      	adds	r3, r1, #1
 800b9c4:	4614      	mov	r4, r2
 800b9c6:	d103      	bne.n	800b9d0 <_sungetc_r+0x10>
 800b9c8:	f04f 35ff 	mov.w	r5, #4294967295
 800b9cc:	4628      	mov	r0, r5
 800b9ce:	bd38      	pop	{r3, r4, r5, pc}
 800b9d0:	8993      	ldrh	r3, [r2, #12]
 800b9d2:	f023 0320 	bic.w	r3, r3, #32
 800b9d6:	8193      	strh	r3, [r2, #12]
 800b9d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b9da:	6852      	ldr	r2, [r2, #4]
 800b9dc:	b2cd      	uxtb	r5, r1
 800b9de:	b18b      	cbz	r3, 800ba04 <_sungetc_r+0x44>
 800b9e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	dd08      	ble.n	800b9f8 <_sungetc_r+0x38>
 800b9e6:	6823      	ldr	r3, [r4, #0]
 800b9e8:	1e5a      	subs	r2, r3, #1
 800b9ea:	6022      	str	r2, [r4, #0]
 800b9ec:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b9f0:	6863      	ldr	r3, [r4, #4]
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	6063      	str	r3, [r4, #4]
 800b9f6:	e7e9      	b.n	800b9cc <_sungetc_r+0xc>
 800b9f8:	4621      	mov	r1, r4
 800b9fa:	f000 fbf1 	bl	800c1e0 <__submore>
 800b9fe:	2800      	cmp	r0, #0
 800ba00:	d0f1      	beq.n	800b9e6 <_sungetc_r+0x26>
 800ba02:	e7e1      	b.n	800b9c8 <_sungetc_r+0x8>
 800ba04:	6921      	ldr	r1, [r4, #16]
 800ba06:	6823      	ldr	r3, [r4, #0]
 800ba08:	b151      	cbz	r1, 800ba20 <_sungetc_r+0x60>
 800ba0a:	4299      	cmp	r1, r3
 800ba0c:	d208      	bcs.n	800ba20 <_sungetc_r+0x60>
 800ba0e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ba12:	42a9      	cmp	r1, r5
 800ba14:	d104      	bne.n	800ba20 <_sungetc_r+0x60>
 800ba16:	3b01      	subs	r3, #1
 800ba18:	3201      	adds	r2, #1
 800ba1a:	6023      	str	r3, [r4, #0]
 800ba1c:	6062      	str	r2, [r4, #4]
 800ba1e:	e7d5      	b.n	800b9cc <_sungetc_r+0xc>
 800ba20:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ba24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba28:	6363      	str	r3, [r4, #52]	; 0x34
 800ba2a:	2303      	movs	r3, #3
 800ba2c:	63a3      	str	r3, [r4, #56]	; 0x38
 800ba2e:	4623      	mov	r3, r4
 800ba30:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ba34:	6023      	str	r3, [r4, #0]
 800ba36:	2301      	movs	r3, #1
 800ba38:	e7dc      	b.n	800b9f4 <_sungetc_r+0x34>

0800ba3a <__ssrefill_r>:
 800ba3a:	b510      	push	{r4, lr}
 800ba3c:	460c      	mov	r4, r1
 800ba3e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ba40:	b169      	cbz	r1, 800ba5e <__ssrefill_r+0x24>
 800ba42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba46:	4299      	cmp	r1, r3
 800ba48:	d001      	beq.n	800ba4e <__ssrefill_r+0x14>
 800ba4a:	f7ff fd7d 	bl	800b548 <_free_r>
 800ba4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba50:	6063      	str	r3, [r4, #4]
 800ba52:	2000      	movs	r0, #0
 800ba54:	6360      	str	r0, [r4, #52]	; 0x34
 800ba56:	b113      	cbz	r3, 800ba5e <__ssrefill_r+0x24>
 800ba58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ba5a:	6023      	str	r3, [r4, #0]
 800ba5c:	bd10      	pop	{r4, pc}
 800ba5e:	6923      	ldr	r3, [r4, #16]
 800ba60:	6023      	str	r3, [r4, #0]
 800ba62:	2300      	movs	r3, #0
 800ba64:	6063      	str	r3, [r4, #4]
 800ba66:	89a3      	ldrh	r3, [r4, #12]
 800ba68:	f043 0320 	orr.w	r3, r3, #32
 800ba6c:	81a3      	strh	r3, [r4, #12]
 800ba6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba72:	e7f3      	b.n	800ba5c <__ssrefill_r+0x22>

0800ba74 <__ssvfiscanf_r>:
 800ba74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba78:	460c      	mov	r4, r1
 800ba7a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800ba7e:	2100      	movs	r1, #0
 800ba80:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800ba84:	49a6      	ldr	r1, [pc, #664]	; (800bd20 <__ssvfiscanf_r+0x2ac>)
 800ba86:	91a0      	str	r1, [sp, #640]	; 0x280
 800ba88:	f10d 0804 	add.w	r8, sp, #4
 800ba8c:	49a5      	ldr	r1, [pc, #660]	; (800bd24 <__ssvfiscanf_r+0x2b0>)
 800ba8e:	4fa6      	ldr	r7, [pc, #664]	; (800bd28 <__ssvfiscanf_r+0x2b4>)
 800ba90:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800bd2c <__ssvfiscanf_r+0x2b8>
 800ba94:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800ba98:	4606      	mov	r6, r0
 800ba9a:	91a1      	str	r1, [sp, #644]	; 0x284
 800ba9c:	9300      	str	r3, [sp, #0]
 800ba9e:	7813      	ldrb	r3, [r2, #0]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f000 815a 	beq.w	800bd5a <__ssvfiscanf_r+0x2e6>
 800baa6:	5dd9      	ldrb	r1, [r3, r7]
 800baa8:	f011 0108 	ands.w	r1, r1, #8
 800baac:	f102 0501 	add.w	r5, r2, #1
 800bab0:	d019      	beq.n	800bae6 <__ssvfiscanf_r+0x72>
 800bab2:	6863      	ldr	r3, [r4, #4]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	dd0f      	ble.n	800bad8 <__ssvfiscanf_r+0x64>
 800bab8:	6823      	ldr	r3, [r4, #0]
 800baba:	781a      	ldrb	r2, [r3, #0]
 800babc:	5cba      	ldrb	r2, [r7, r2]
 800babe:	0712      	lsls	r2, r2, #28
 800bac0:	d401      	bmi.n	800bac6 <__ssvfiscanf_r+0x52>
 800bac2:	462a      	mov	r2, r5
 800bac4:	e7eb      	b.n	800ba9e <__ssvfiscanf_r+0x2a>
 800bac6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bac8:	3201      	adds	r2, #1
 800baca:	9245      	str	r2, [sp, #276]	; 0x114
 800bacc:	6862      	ldr	r2, [r4, #4]
 800bace:	3301      	adds	r3, #1
 800bad0:	3a01      	subs	r2, #1
 800bad2:	6062      	str	r2, [r4, #4]
 800bad4:	6023      	str	r3, [r4, #0]
 800bad6:	e7ec      	b.n	800bab2 <__ssvfiscanf_r+0x3e>
 800bad8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bada:	4621      	mov	r1, r4
 800badc:	4630      	mov	r0, r6
 800bade:	4798      	blx	r3
 800bae0:	2800      	cmp	r0, #0
 800bae2:	d0e9      	beq.n	800bab8 <__ssvfiscanf_r+0x44>
 800bae4:	e7ed      	b.n	800bac2 <__ssvfiscanf_r+0x4e>
 800bae6:	2b25      	cmp	r3, #37	; 0x25
 800bae8:	d012      	beq.n	800bb10 <__ssvfiscanf_r+0x9c>
 800baea:	469a      	mov	sl, r3
 800baec:	6863      	ldr	r3, [r4, #4]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	f340 8091 	ble.w	800bc16 <__ssvfiscanf_r+0x1a2>
 800baf4:	6822      	ldr	r2, [r4, #0]
 800baf6:	7813      	ldrb	r3, [r2, #0]
 800baf8:	4553      	cmp	r3, sl
 800bafa:	f040 812e 	bne.w	800bd5a <__ssvfiscanf_r+0x2e6>
 800bafe:	6863      	ldr	r3, [r4, #4]
 800bb00:	3b01      	subs	r3, #1
 800bb02:	6063      	str	r3, [r4, #4]
 800bb04:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bb06:	3201      	adds	r2, #1
 800bb08:	3301      	adds	r3, #1
 800bb0a:	6022      	str	r2, [r4, #0]
 800bb0c:	9345      	str	r3, [sp, #276]	; 0x114
 800bb0e:	e7d8      	b.n	800bac2 <__ssvfiscanf_r+0x4e>
 800bb10:	9141      	str	r1, [sp, #260]	; 0x104
 800bb12:	9143      	str	r1, [sp, #268]	; 0x10c
 800bb14:	7853      	ldrb	r3, [r2, #1]
 800bb16:	2b2a      	cmp	r3, #42	; 0x2a
 800bb18:	bf02      	ittt	eq
 800bb1a:	2310      	moveq	r3, #16
 800bb1c:	1c95      	addeq	r5, r2, #2
 800bb1e:	9341      	streq	r3, [sp, #260]	; 0x104
 800bb20:	220a      	movs	r2, #10
 800bb22:	46aa      	mov	sl, r5
 800bb24:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800bb28:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800bb2c:	2b09      	cmp	r3, #9
 800bb2e:	d91d      	bls.n	800bb6c <__ssvfiscanf_r+0xf8>
 800bb30:	487e      	ldr	r0, [pc, #504]	; (800bd2c <__ssvfiscanf_r+0x2b8>)
 800bb32:	2203      	movs	r2, #3
 800bb34:	f7f4 fb54 	bl	80001e0 <memchr>
 800bb38:	b140      	cbz	r0, 800bb4c <__ssvfiscanf_r+0xd8>
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	eba0 0009 	sub.w	r0, r0, r9
 800bb40:	fa03 f000 	lsl.w	r0, r3, r0
 800bb44:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bb46:	4318      	orrs	r0, r3
 800bb48:	9041      	str	r0, [sp, #260]	; 0x104
 800bb4a:	4655      	mov	r5, sl
 800bb4c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bb50:	2b78      	cmp	r3, #120	; 0x78
 800bb52:	d806      	bhi.n	800bb62 <__ssvfiscanf_r+0xee>
 800bb54:	2b57      	cmp	r3, #87	; 0x57
 800bb56:	d810      	bhi.n	800bb7a <__ssvfiscanf_r+0x106>
 800bb58:	2b25      	cmp	r3, #37	; 0x25
 800bb5a:	d0c6      	beq.n	800baea <__ssvfiscanf_r+0x76>
 800bb5c:	d856      	bhi.n	800bc0c <__ssvfiscanf_r+0x198>
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d064      	beq.n	800bc2c <__ssvfiscanf_r+0x1b8>
 800bb62:	2303      	movs	r3, #3
 800bb64:	9347      	str	r3, [sp, #284]	; 0x11c
 800bb66:	230a      	movs	r3, #10
 800bb68:	9342      	str	r3, [sp, #264]	; 0x108
 800bb6a:	e071      	b.n	800bc50 <__ssvfiscanf_r+0x1dc>
 800bb6c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bb6e:	fb02 1103 	mla	r1, r2, r3, r1
 800bb72:	3930      	subs	r1, #48	; 0x30
 800bb74:	9143      	str	r1, [sp, #268]	; 0x10c
 800bb76:	4655      	mov	r5, sl
 800bb78:	e7d3      	b.n	800bb22 <__ssvfiscanf_r+0xae>
 800bb7a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800bb7e:	2a20      	cmp	r2, #32
 800bb80:	d8ef      	bhi.n	800bb62 <__ssvfiscanf_r+0xee>
 800bb82:	a101      	add	r1, pc, #4	; (adr r1, 800bb88 <__ssvfiscanf_r+0x114>)
 800bb84:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bb88:	0800bc3b 	.word	0x0800bc3b
 800bb8c:	0800bb63 	.word	0x0800bb63
 800bb90:	0800bb63 	.word	0x0800bb63
 800bb94:	0800bc99 	.word	0x0800bc99
 800bb98:	0800bb63 	.word	0x0800bb63
 800bb9c:	0800bb63 	.word	0x0800bb63
 800bba0:	0800bb63 	.word	0x0800bb63
 800bba4:	0800bb63 	.word	0x0800bb63
 800bba8:	0800bb63 	.word	0x0800bb63
 800bbac:	0800bb63 	.word	0x0800bb63
 800bbb0:	0800bb63 	.word	0x0800bb63
 800bbb4:	0800bcaf 	.word	0x0800bcaf
 800bbb8:	0800bc85 	.word	0x0800bc85
 800bbbc:	0800bc13 	.word	0x0800bc13
 800bbc0:	0800bc13 	.word	0x0800bc13
 800bbc4:	0800bc13 	.word	0x0800bc13
 800bbc8:	0800bb63 	.word	0x0800bb63
 800bbcc:	0800bc89 	.word	0x0800bc89
 800bbd0:	0800bb63 	.word	0x0800bb63
 800bbd4:	0800bb63 	.word	0x0800bb63
 800bbd8:	0800bb63 	.word	0x0800bb63
 800bbdc:	0800bb63 	.word	0x0800bb63
 800bbe0:	0800bcbf 	.word	0x0800bcbf
 800bbe4:	0800bc91 	.word	0x0800bc91
 800bbe8:	0800bc33 	.word	0x0800bc33
 800bbec:	0800bb63 	.word	0x0800bb63
 800bbf0:	0800bb63 	.word	0x0800bb63
 800bbf4:	0800bcbb 	.word	0x0800bcbb
 800bbf8:	0800bb63 	.word	0x0800bb63
 800bbfc:	0800bc85 	.word	0x0800bc85
 800bc00:	0800bb63 	.word	0x0800bb63
 800bc04:	0800bb63 	.word	0x0800bb63
 800bc08:	0800bc3b 	.word	0x0800bc3b
 800bc0c:	3b45      	subs	r3, #69	; 0x45
 800bc0e:	2b02      	cmp	r3, #2
 800bc10:	d8a7      	bhi.n	800bb62 <__ssvfiscanf_r+0xee>
 800bc12:	2305      	movs	r3, #5
 800bc14:	e01b      	b.n	800bc4e <__ssvfiscanf_r+0x1da>
 800bc16:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bc18:	4621      	mov	r1, r4
 800bc1a:	4630      	mov	r0, r6
 800bc1c:	4798      	blx	r3
 800bc1e:	2800      	cmp	r0, #0
 800bc20:	f43f af68 	beq.w	800baf4 <__ssvfiscanf_r+0x80>
 800bc24:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bc26:	2800      	cmp	r0, #0
 800bc28:	f040 808d 	bne.w	800bd46 <__ssvfiscanf_r+0x2d2>
 800bc2c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc30:	e08f      	b.n	800bd52 <__ssvfiscanf_r+0x2de>
 800bc32:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bc34:	f042 0220 	orr.w	r2, r2, #32
 800bc38:	9241      	str	r2, [sp, #260]	; 0x104
 800bc3a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bc3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc40:	9241      	str	r2, [sp, #260]	; 0x104
 800bc42:	2210      	movs	r2, #16
 800bc44:	2b6f      	cmp	r3, #111	; 0x6f
 800bc46:	9242      	str	r2, [sp, #264]	; 0x108
 800bc48:	bf34      	ite	cc
 800bc4a:	2303      	movcc	r3, #3
 800bc4c:	2304      	movcs	r3, #4
 800bc4e:	9347      	str	r3, [sp, #284]	; 0x11c
 800bc50:	6863      	ldr	r3, [r4, #4]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	dd42      	ble.n	800bcdc <__ssvfiscanf_r+0x268>
 800bc56:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bc58:	0659      	lsls	r1, r3, #25
 800bc5a:	d404      	bmi.n	800bc66 <__ssvfiscanf_r+0x1f2>
 800bc5c:	6823      	ldr	r3, [r4, #0]
 800bc5e:	781a      	ldrb	r2, [r3, #0]
 800bc60:	5cba      	ldrb	r2, [r7, r2]
 800bc62:	0712      	lsls	r2, r2, #28
 800bc64:	d441      	bmi.n	800bcea <__ssvfiscanf_r+0x276>
 800bc66:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bc68:	2b02      	cmp	r3, #2
 800bc6a:	dc50      	bgt.n	800bd0e <__ssvfiscanf_r+0x29a>
 800bc6c:	466b      	mov	r3, sp
 800bc6e:	4622      	mov	r2, r4
 800bc70:	a941      	add	r1, sp, #260	; 0x104
 800bc72:	4630      	mov	r0, r6
 800bc74:	f000 f876 	bl	800bd64 <_scanf_chars>
 800bc78:	2801      	cmp	r0, #1
 800bc7a:	d06e      	beq.n	800bd5a <__ssvfiscanf_r+0x2e6>
 800bc7c:	2802      	cmp	r0, #2
 800bc7e:	f47f af20 	bne.w	800bac2 <__ssvfiscanf_r+0x4e>
 800bc82:	e7cf      	b.n	800bc24 <__ssvfiscanf_r+0x1b0>
 800bc84:	220a      	movs	r2, #10
 800bc86:	e7dd      	b.n	800bc44 <__ssvfiscanf_r+0x1d0>
 800bc88:	2300      	movs	r3, #0
 800bc8a:	9342      	str	r3, [sp, #264]	; 0x108
 800bc8c:	2303      	movs	r3, #3
 800bc8e:	e7de      	b.n	800bc4e <__ssvfiscanf_r+0x1da>
 800bc90:	2308      	movs	r3, #8
 800bc92:	9342      	str	r3, [sp, #264]	; 0x108
 800bc94:	2304      	movs	r3, #4
 800bc96:	e7da      	b.n	800bc4e <__ssvfiscanf_r+0x1da>
 800bc98:	4629      	mov	r1, r5
 800bc9a:	4640      	mov	r0, r8
 800bc9c:	f000 f9e0 	bl	800c060 <__sccl>
 800bca0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bca6:	9341      	str	r3, [sp, #260]	; 0x104
 800bca8:	4605      	mov	r5, r0
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e7cf      	b.n	800bc4e <__ssvfiscanf_r+0x1da>
 800bcae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bcb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcb4:	9341      	str	r3, [sp, #260]	; 0x104
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	e7c9      	b.n	800bc4e <__ssvfiscanf_r+0x1da>
 800bcba:	2302      	movs	r3, #2
 800bcbc:	e7c7      	b.n	800bc4e <__ssvfiscanf_r+0x1da>
 800bcbe:	9841      	ldr	r0, [sp, #260]	; 0x104
 800bcc0:	06c3      	lsls	r3, r0, #27
 800bcc2:	f53f aefe 	bmi.w	800bac2 <__ssvfiscanf_r+0x4e>
 800bcc6:	9b00      	ldr	r3, [sp, #0]
 800bcc8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bcca:	1d19      	adds	r1, r3, #4
 800bccc:	9100      	str	r1, [sp, #0]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f010 0f01 	tst.w	r0, #1
 800bcd4:	bf14      	ite	ne
 800bcd6:	801a      	strhne	r2, [r3, #0]
 800bcd8:	601a      	streq	r2, [r3, #0]
 800bcda:	e6f2      	b.n	800bac2 <__ssvfiscanf_r+0x4e>
 800bcdc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bcde:	4621      	mov	r1, r4
 800bce0:	4630      	mov	r0, r6
 800bce2:	4798      	blx	r3
 800bce4:	2800      	cmp	r0, #0
 800bce6:	d0b6      	beq.n	800bc56 <__ssvfiscanf_r+0x1e2>
 800bce8:	e79c      	b.n	800bc24 <__ssvfiscanf_r+0x1b0>
 800bcea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bcec:	3201      	adds	r2, #1
 800bcee:	9245      	str	r2, [sp, #276]	; 0x114
 800bcf0:	6862      	ldr	r2, [r4, #4]
 800bcf2:	3a01      	subs	r2, #1
 800bcf4:	2a00      	cmp	r2, #0
 800bcf6:	6062      	str	r2, [r4, #4]
 800bcf8:	dd02      	ble.n	800bd00 <__ssvfiscanf_r+0x28c>
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	6023      	str	r3, [r4, #0]
 800bcfe:	e7ad      	b.n	800bc5c <__ssvfiscanf_r+0x1e8>
 800bd00:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bd02:	4621      	mov	r1, r4
 800bd04:	4630      	mov	r0, r6
 800bd06:	4798      	blx	r3
 800bd08:	2800      	cmp	r0, #0
 800bd0a:	d0a7      	beq.n	800bc5c <__ssvfiscanf_r+0x1e8>
 800bd0c:	e78a      	b.n	800bc24 <__ssvfiscanf_r+0x1b0>
 800bd0e:	2b04      	cmp	r3, #4
 800bd10:	dc0e      	bgt.n	800bd30 <__ssvfiscanf_r+0x2bc>
 800bd12:	466b      	mov	r3, sp
 800bd14:	4622      	mov	r2, r4
 800bd16:	a941      	add	r1, sp, #260	; 0x104
 800bd18:	4630      	mov	r0, r6
 800bd1a:	f000 f87d 	bl	800be18 <_scanf_i>
 800bd1e:	e7ab      	b.n	800bc78 <__ssvfiscanf_r+0x204>
 800bd20:	0800b9c1 	.word	0x0800b9c1
 800bd24:	0800ba3b 	.word	0x0800ba3b
 800bd28:	0800ce01 	.word	0x0800ce01
 800bd2c:	0800d16a 	.word	0x0800d16a
 800bd30:	4b0b      	ldr	r3, [pc, #44]	; (800bd60 <__ssvfiscanf_r+0x2ec>)
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	f43f aec5 	beq.w	800bac2 <__ssvfiscanf_r+0x4e>
 800bd38:	466b      	mov	r3, sp
 800bd3a:	4622      	mov	r2, r4
 800bd3c:	a941      	add	r1, sp, #260	; 0x104
 800bd3e:	4630      	mov	r0, r6
 800bd40:	f7fc fb66 	bl	8008410 <_scanf_float>
 800bd44:	e798      	b.n	800bc78 <__ssvfiscanf_r+0x204>
 800bd46:	89a3      	ldrh	r3, [r4, #12]
 800bd48:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bd4c:	bf18      	it	ne
 800bd4e:	f04f 30ff 	movne.w	r0, #4294967295
 800bd52:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800bd56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd5a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bd5c:	e7f9      	b.n	800bd52 <__ssvfiscanf_r+0x2de>
 800bd5e:	bf00      	nop
 800bd60:	08008411 	.word	0x08008411

0800bd64 <_scanf_chars>:
 800bd64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd68:	4615      	mov	r5, r2
 800bd6a:	688a      	ldr	r2, [r1, #8]
 800bd6c:	4680      	mov	r8, r0
 800bd6e:	460c      	mov	r4, r1
 800bd70:	b932      	cbnz	r2, 800bd80 <_scanf_chars+0x1c>
 800bd72:	698a      	ldr	r2, [r1, #24]
 800bd74:	2a00      	cmp	r2, #0
 800bd76:	bf0c      	ite	eq
 800bd78:	2201      	moveq	r2, #1
 800bd7a:	f04f 32ff 	movne.w	r2, #4294967295
 800bd7e:	608a      	str	r2, [r1, #8]
 800bd80:	6822      	ldr	r2, [r4, #0]
 800bd82:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800be14 <_scanf_chars+0xb0>
 800bd86:	06d1      	lsls	r1, r2, #27
 800bd88:	bf5f      	itttt	pl
 800bd8a:	681a      	ldrpl	r2, [r3, #0]
 800bd8c:	1d11      	addpl	r1, r2, #4
 800bd8e:	6019      	strpl	r1, [r3, #0]
 800bd90:	6816      	ldrpl	r6, [r2, #0]
 800bd92:	2700      	movs	r7, #0
 800bd94:	69a0      	ldr	r0, [r4, #24]
 800bd96:	b188      	cbz	r0, 800bdbc <_scanf_chars+0x58>
 800bd98:	2801      	cmp	r0, #1
 800bd9a:	d107      	bne.n	800bdac <_scanf_chars+0x48>
 800bd9c:	682a      	ldr	r2, [r5, #0]
 800bd9e:	7811      	ldrb	r1, [r2, #0]
 800bda0:	6962      	ldr	r2, [r4, #20]
 800bda2:	5c52      	ldrb	r2, [r2, r1]
 800bda4:	b952      	cbnz	r2, 800bdbc <_scanf_chars+0x58>
 800bda6:	2f00      	cmp	r7, #0
 800bda8:	d031      	beq.n	800be0e <_scanf_chars+0xaa>
 800bdaa:	e022      	b.n	800bdf2 <_scanf_chars+0x8e>
 800bdac:	2802      	cmp	r0, #2
 800bdae:	d120      	bne.n	800bdf2 <_scanf_chars+0x8e>
 800bdb0:	682b      	ldr	r3, [r5, #0]
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800bdb8:	071b      	lsls	r3, r3, #28
 800bdba:	d41a      	bmi.n	800bdf2 <_scanf_chars+0x8e>
 800bdbc:	6823      	ldr	r3, [r4, #0]
 800bdbe:	06da      	lsls	r2, r3, #27
 800bdc0:	bf5e      	ittt	pl
 800bdc2:	682b      	ldrpl	r3, [r5, #0]
 800bdc4:	781b      	ldrbpl	r3, [r3, #0]
 800bdc6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800bdca:	682a      	ldr	r2, [r5, #0]
 800bdcc:	686b      	ldr	r3, [r5, #4]
 800bdce:	3201      	adds	r2, #1
 800bdd0:	602a      	str	r2, [r5, #0]
 800bdd2:	68a2      	ldr	r2, [r4, #8]
 800bdd4:	3b01      	subs	r3, #1
 800bdd6:	3a01      	subs	r2, #1
 800bdd8:	606b      	str	r3, [r5, #4]
 800bdda:	3701      	adds	r7, #1
 800bddc:	60a2      	str	r2, [r4, #8]
 800bdde:	b142      	cbz	r2, 800bdf2 <_scanf_chars+0x8e>
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	dcd7      	bgt.n	800bd94 <_scanf_chars+0x30>
 800bde4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bde8:	4629      	mov	r1, r5
 800bdea:	4640      	mov	r0, r8
 800bdec:	4798      	blx	r3
 800bdee:	2800      	cmp	r0, #0
 800bdf0:	d0d0      	beq.n	800bd94 <_scanf_chars+0x30>
 800bdf2:	6823      	ldr	r3, [r4, #0]
 800bdf4:	f013 0310 	ands.w	r3, r3, #16
 800bdf8:	d105      	bne.n	800be06 <_scanf_chars+0xa2>
 800bdfa:	68e2      	ldr	r2, [r4, #12]
 800bdfc:	3201      	adds	r2, #1
 800bdfe:	60e2      	str	r2, [r4, #12]
 800be00:	69a2      	ldr	r2, [r4, #24]
 800be02:	b102      	cbz	r2, 800be06 <_scanf_chars+0xa2>
 800be04:	7033      	strb	r3, [r6, #0]
 800be06:	6923      	ldr	r3, [r4, #16]
 800be08:	443b      	add	r3, r7
 800be0a:	6123      	str	r3, [r4, #16]
 800be0c:	2000      	movs	r0, #0
 800be0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be12:	bf00      	nop
 800be14:	0800ce01 	.word	0x0800ce01

0800be18 <_scanf_i>:
 800be18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be1c:	4698      	mov	r8, r3
 800be1e:	4b76      	ldr	r3, [pc, #472]	; (800bff8 <_scanf_i+0x1e0>)
 800be20:	460c      	mov	r4, r1
 800be22:	4682      	mov	sl, r0
 800be24:	4616      	mov	r6, r2
 800be26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800be2a:	b087      	sub	sp, #28
 800be2c:	ab03      	add	r3, sp, #12
 800be2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800be32:	4b72      	ldr	r3, [pc, #456]	; (800bffc <_scanf_i+0x1e4>)
 800be34:	69a1      	ldr	r1, [r4, #24]
 800be36:	4a72      	ldr	r2, [pc, #456]	; (800c000 <_scanf_i+0x1e8>)
 800be38:	2903      	cmp	r1, #3
 800be3a:	bf18      	it	ne
 800be3c:	461a      	movne	r2, r3
 800be3e:	68a3      	ldr	r3, [r4, #8]
 800be40:	9201      	str	r2, [sp, #4]
 800be42:	1e5a      	subs	r2, r3, #1
 800be44:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800be48:	bf88      	it	hi
 800be4a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800be4e:	4627      	mov	r7, r4
 800be50:	bf82      	ittt	hi
 800be52:	eb03 0905 	addhi.w	r9, r3, r5
 800be56:	f240 135d 	movwhi	r3, #349	; 0x15d
 800be5a:	60a3      	strhi	r3, [r4, #8]
 800be5c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800be60:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800be64:	bf98      	it	ls
 800be66:	f04f 0900 	movls.w	r9, #0
 800be6a:	6023      	str	r3, [r4, #0]
 800be6c:	463d      	mov	r5, r7
 800be6e:	f04f 0b00 	mov.w	fp, #0
 800be72:	6831      	ldr	r1, [r6, #0]
 800be74:	ab03      	add	r3, sp, #12
 800be76:	7809      	ldrb	r1, [r1, #0]
 800be78:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800be7c:	2202      	movs	r2, #2
 800be7e:	f7f4 f9af 	bl	80001e0 <memchr>
 800be82:	b328      	cbz	r0, 800bed0 <_scanf_i+0xb8>
 800be84:	f1bb 0f01 	cmp.w	fp, #1
 800be88:	d159      	bne.n	800bf3e <_scanf_i+0x126>
 800be8a:	6862      	ldr	r2, [r4, #4]
 800be8c:	b92a      	cbnz	r2, 800be9a <_scanf_i+0x82>
 800be8e:	6822      	ldr	r2, [r4, #0]
 800be90:	2308      	movs	r3, #8
 800be92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be96:	6063      	str	r3, [r4, #4]
 800be98:	6022      	str	r2, [r4, #0]
 800be9a:	6822      	ldr	r2, [r4, #0]
 800be9c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800bea0:	6022      	str	r2, [r4, #0]
 800bea2:	68a2      	ldr	r2, [r4, #8]
 800bea4:	1e51      	subs	r1, r2, #1
 800bea6:	60a1      	str	r1, [r4, #8]
 800bea8:	b192      	cbz	r2, 800bed0 <_scanf_i+0xb8>
 800beaa:	6832      	ldr	r2, [r6, #0]
 800beac:	1c51      	adds	r1, r2, #1
 800beae:	6031      	str	r1, [r6, #0]
 800beb0:	7812      	ldrb	r2, [r2, #0]
 800beb2:	f805 2b01 	strb.w	r2, [r5], #1
 800beb6:	6872      	ldr	r2, [r6, #4]
 800beb8:	3a01      	subs	r2, #1
 800beba:	2a00      	cmp	r2, #0
 800bebc:	6072      	str	r2, [r6, #4]
 800bebe:	dc07      	bgt.n	800bed0 <_scanf_i+0xb8>
 800bec0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800bec4:	4631      	mov	r1, r6
 800bec6:	4650      	mov	r0, sl
 800bec8:	4790      	blx	r2
 800beca:	2800      	cmp	r0, #0
 800becc:	f040 8085 	bne.w	800bfda <_scanf_i+0x1c2>
 800bed0:	f10b 0b01 	add.w	fp, fp, #1
 800bed4:	f1bb 0f03 	cmp.w	fp, #3
 800bed8:	d1cb      	bne.n	800be72 <_scanf_i+0x5a>
 800beda:	6863      	ldr	r3, [r4, #4]
 800bedc:	b90b      	cbnz	r3, 800bee2 <_scanf_i+0xca>
 800bede:	230a      	movs	r3, #10
 800bee0:	6063      	str	r3, [r4, #4]
 800bee2:	6863      	ldr	r3, [r4, #4]
 800bee4:	4947      	ldr	r1, [pc, #284]	; (800c004 <_scanf_i+0x1ec>)
 800bee6:	6960      	ldr	r0, [r4, #20]
 800bee8:	1ac9      	subs	r1, r1, r3
 800beea:	f000 f8b9 	bl	800c060 <__sccl>
 800beee:	f04f 0b00 	mov.w	fp, #0
 800bef2:	68a3      	ldr	r3, [r4, #8]
 800bef4:	6822      	ldr	r2, [r4, #0]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d03d      	beq.n	800bf76 <_scanf_i+0x15e>
 800befa:	6831      	ldr	r1, [r6, #0]
 800befc:	6960      	ldr	r0, [r4, #20]
 800befe:	f891 c000 	ldrb.w	ip, [r1]
 800bf02:	f810 000c 	ldrb.w	r0, [r0, ip]
 800bf06:	2800      	cmp	r0, #0
 800bf08:	d035      	beq.n	800bf76 <_scanf_i+0x15e>
 800bf0a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800bf0e:	d124      	bne.n	800bf5a <_scanf_i+0x142>
 800bf10:	0510      	lsls	r0, r2, #20
 800bf12:	d522      	bpl.n	800bf5a <_scanf_i+0x142>
 800bf14:	f10b 0b01 	add.w	fp, fp, #1
 800bf18:	f1b9 0f00 	cmp.w	r9, #0
 800bf1c:	d003      	beq.n	800bf26 <_scanf_i+0x10e>
 800bf1e:	3301      	adds	r3, #1
 800bf20:	f109 39ff 	add.w	r9, r9, #4294967295
 800bf24:	60a3      	str	r3, [r4, #8]
 800bf26:	6873      	ldr	r3, [r6, #4]
 800bf28:	3b01      	subs	r3, #1
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	6073      	str	r3, [r6, #4]
 800bf2e:	dd1b      	ble.n	800bf68 <_scanf_i+0x150>
 800bf30:	6833      	ldr	r3, [r6, #0]
 800bf32:	3301      	adds	r3, #1
 800bf34:	6033      	str	r3, [r6, #0]
 800bf36:	68a3      	ldr	r3, [r4, #8]
 800bf38:	3b01      	subs	r3, #1
 800bf3a:	60a3      	str	r3, [r4, #8]
 800bf3c:	e7d9      	b.n	800bef2 <_scanf_i+0xda>
 800bf3e:	f1bb 0f02 	cmp.w	fp, #2
 800bf42:	d1ae      	bne.n	800bea2 <_scanf_i+0x8a>
 800bf44:	6822      	ldr	r2, [r4, #0]
 800bf46:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800bf4a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bf4e:	d1bf      	bne.n	800bed0 <_scanf_i+0xb8>
 800bf50:	2310      	movs	r3, #16
 800bf52:	6063      	str	r3, [r4, #4]
 800bf54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf58:	e7a2      	b.n	800bea0 <_scanf_i+0x88>
 800bf5a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800bf5e:	6022      	str	r2, [r4, #0]
 800bf60:	780b      	ldrb	r3, [r1, #0]
 800bf62:	f805 3b01 	strb.w	r3, [r5], #1
 800bf66:	e7de      	b.n	800bf26 <_scanf_i+0x10e>
 800bf68:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bf6c:	4631      	mov	r1, r6
 800bf6e:	4650      	mov	r0, sl
 800bf70:	4798      	blx	r3
 800bf72:	2800      	cmp	r0, #0
 800bf74:	d0df      	beq.n	800bf36 <_scanf_i+0x11e>
 800bf76:	6823      	ldr	r3, [r4, #0]
 800bf78:	05db      	lsls	r3, r3, #23
 800bf7a:	d50d      	bpl.n	800bf98 <_scanf_i+0x180>
 800bf7c:	42bd      	cmp	r5, r7
 800bf7e:	d909      	bls.n	800bf94 <_scanf_i+0x17c>
 800bf80:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bf84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bf88:	4632      	mov	r2, r6
 800bf8a:	4650      	mov	r0, sl
 800bf8c:	4798      	blx	r3
 800bf8e:	f105 39ff 	add.w	r9, r5, #4294967295
 800bf92:	464d      	mov	r5, r9
 800bf94:	42bd      	cmp	r5, r7
 800bf96:	d02d      	beq.n	800bff4 <_scanf_i+0x1dc>
 800bf98:	6822      	ldr	r2, [r4, #0]
 800bf9a:	f012 0210 	ands.w	r2, r2, #16
 800bf9e:	d113      	bne.n	800bfc8 <_scanf_i+0x1b0>
 800bfa0:	702a      	strb	r2, [r5, #0]
 800bfa2:	6863      	ldr	r3, [r4, #4]
 800bfa4:	9e01      	ldr	r6, [sp, #4]
 800bfa6:	4639      	mov	r1, r7
 800bfa8:	4650      	mov	r0, sl
 800bfaa:	47b0      	blx	r6
 800bfac:	6821      	ldr	r1, [r4, #0]
 800bfae:	f8d8 3000 	ldr.w	r3, [r8]
 800bfb2:	f011 0f20 	tst.w	r1, #32
 800bfb6:	d013      	beq.n	800bfe0 <_scanf_i+0x1c8>
 800bfb8:	1d1a      	adds	r2, r3, #4
 800bfba:	f8c8 2000 	str.w	r2, [r8]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	6018      	str	r0, [r3, #0]
 800bfc2:	68e3      	ldr	r3, [r4, #12]
 800bfc4:	3301      	adds	r3, #1
 800bfc6:	60e3      	str	r3, [r4, #12]
 800bfc8:	1bed      	subs	r5, r5, r7
 800bfca:	44ab      	add	fp, r5
 800bfcc:	6925      	ldr	r5, [r4, #16]
 800bfce:	445d      	add	r5, fp
 800bfd0:	6125      	str	r5, [r4, #16]
 800bfd2:	2000      	movs	r0, #0
 800bfd4:	b007      	add	sp, #28
 800bfd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfda:	f04f 0b00 	mov.w	fp, #0
 800bfde:	e7ca      	b.n	800bf76 <_scanf_i+0x15e>
 800bfe0:	1d1a      	adds	r2, r3, #4
 800bfe2:	f8c8 2000 	str.w	r2, [r8]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f011 0f01 	tst.w	r1, #1
 800bfec:	bf14      	ite	ne
 800bfee:	8018      	strhne	r0, [r3, #0]
 800bff0:	6018      	streq	r0, [r3, #0]
 800bff2:	e7e6      	b.n	800bfc2 <_scanf_i+0x1aa>
 800bff4:	2001      	movs	r0, #1
 800bff6:	e7ed      	b.n	800bfd4 <_scanf_i+0x1bc>
 800bff8:	0800cd44 	.word	0x0800cd44
 800bffc:	0800c1dd 	.word	0x0800c1dd
 800c000:	080096fd 	.word	0x080096fd
 800c004:	0800d18e 	.word	0x0800d18e

0800c008 <_read_r>:
 800c008:	b538      	push	{r3, r4, r5, lr}
 800c00a:	4d07      	ldr	r5, [pc, #28]	; (800c028 <_read_r+0x20>)
 800c00c:	4604      	mov	r4, r0
 800c00e:	4608      	mov	r0, r1
 800c010:	4611      	mov	r1, r2
 800c012:	2200      	movs	r2, #0
 800c014:	602a      	str	r2, [r5, #0]
 800c016:	461a      	mov	r2, r3
 800c018:	f7f6 ff1e 	bl	8002e58 <_read>
 800c01c:	1c43      	adds	r3, r0, #1
 800c01e:	d102      	bne.n	800c026 <_read_r+0x1e>
 800c020:	682b      	ldr	r3, [r5, #0]
 800c022:	b103      	cbz	r3, 800c026 <_read_r+0x1e>
 800c024:	6023      	str	r3, [r4, #0]
 800c026:	bd38      	pop	{r3, r4, r5, pc}
 800c028:	20000920 	.word	0x20000920
 800c02c:	00000000 	.word	0x00000000

0800c030 <nan>:
 800c030:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c038 <nan+0x8>
 800c034:	4770      	bx	lr
 800c036:	bf00      	nop
 800c038:	00000000 	.word	0x00000000
 800c03c:	7ff80000 	.word	0x7ff80000

0800c040 <_sbrk_r>:
 800c040:	b538      	push	{r3, r4, r5, lr}
 800c042:	4d06      	ldr	r5, [pc, #24]	; (800c05c <_sbrk_r+0x1c>)
 800c044:	2300      	movs	r3, #0
 800c046:	4604      	mov	r4, r0
 800c048:	4608      	mov	r0, r1
 800c04a:	602b      	str	r3, [r5, #0]
 800c04c:	f7f6 ff72 	bl	8002f34 <_sbrk>
 800c050:	1c43      	adds	r3, r0, #1
 800c052:	d102      	bne.n	800c05a <_sbrk_r+0x1a>
 800c054:	682b      	ldr	r3, [r5, #0]
 800c056:	b103      	cbz	r3, 800c05a <_sbrk_r+0x1a>
 800c058:	6023      	str	r3, [r4, #0]
 800c05a:	bd38      	pop	{r3, r4, r5, pc}
 800c05c:	20000920 	.word	0x20000920

0800c060 <__sccl>:
 800c060:	b570      	push	{r4, r5, r6, lr}
 800c062:	780b      	ldrb	r3, [r1, #0]
 800c064:	4604      	mov	r4, r0
 800c066:	2b5e      	cmp	r3, #94	; 0x5e
 800c068:	bf0b      	itete	eq
 800c06a:	784b      	ldrbeq	r3, [r1, #1]
 800c06c:	1c48      	addne	r0, r1, #1
 800c06e:	1c88      	addeq	r0, r1, #2
 800c070:	2200      	movne	r2, #0
 800c072:	bf08      	it	eq
 800c074:	2201      	moveq	r2, #1
 800c076:	1e61      	subs	r1, r4, #1
 800c078:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c07c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c080:	42a9      	cmp	r1, r5
 800c082:	d1fb      	bne.n	800c07c <__sccl+0x1c>
 800c084:	b90b      	cbnz	r3, 800c08a <__sccl+0x2a>
 800c086:	3801      	subs	r0, #1
 800c088:	bd70      	pop	{r4, r5, r6, pc}
 800c08a:	f082 0201 	eor.w	r2, r2, #1
 800c08e:	54e2      	strb	r2, [r4, r3]
 800c090:	4605      	mov	r5, r0
 800c092:	4628      	mov	r0, r5
 800c094:	f810 1b01 	ldrb.w	r1, [r0], #1
 800c098:	292d      	cmp	r1, #45	; 0x2d
 800c09a:	d006      	beq.n	800c0aa <__sccl+0x4a>
 800c09c:	295d      	cmp	r1, #93	; 0x5d
 800c09e:	d0f3      	beq.n	800c088 <__sccl+0x28>
 800c0a0:	b909      	cbnz	r1, 800c0a6 <__sccl+0x46>
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	e7f0      	b.n	800c088 <__sccl+0x28>
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	e7f1      	b.n	800c08e <__sccl+0x2e>
 800c0aa:	786e      	ldrb	r6, [r5, #1]
 800c0ac:	2e5d      	cmp	r6, #93	; 0x5d
 800c0ae:	d0fa      	beq.n	800c0a6 <__sccl+0x46>
 800c0b0:	42b3      	cmp	r3, r6
 800c0b2:	dcf8      	bgt.n	800c0a6 <__sccl+0x46>
 800c0b4:	3502      	adds	r5, #2
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	3101      	adds	r1, #1
 800c0ba:	428e      	cmp	r6, r1
 800c0bc:	5462      	strb	r2, [r4, r1]
 800c0be:	dcfb      	bgt.n	800c0b8 <__sccl+0x58>
 800c0c0:	1af1      	subs	r1, r6, r3
 800c0c2:	3901      	subs	r1, #1
 800c0c4:	1c58      	adds	r0, r3, #1
 800c0c6:	42b3      	cmp	r3, r6
 800c0c8:	bfa8      	it	ge
 800c0ca:	2100      	movge	r1, #0
 800c0cc:	1843      	adds	r3, r0, r1
 800c0ce:	e7e0      	b.n	800c092 <__sccl+0x32>

0800c0d0 <strncmp>:
 800c0d0:	b510      	push	{r4, lr}
 800c0d2:	b17a      	cbz	r2, 800c0f4 <strncmp+0x24>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	3901      	subs	r1, #1
 800c0d8:	1884      	adds	r4, r0, r2
 800c0da:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c0de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c0e2:	4290      	cmp	r0, r2
 800c0e4:	d101      	bne.n	800c0ea <strncmp+0x1a>
 800c0e6:	42a3      	cmp	r3, r4
 800c0e8:	d101      	bne.n	800c0ee <strncmp+0x1e>
 800c0ea:	1a80      	subs	r0, r0, r2
 800c0ec:	bd10      	pop	{r4, pc}
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	d1f3      	bne.n	800c0da <strncmp+0xa>
 800c0f2:	e7fa      	b.n	800c0ea <strncmp+0x1a>
 800c0f4:	4610      	mov	r0, r2
 800c0f6:	e7f9      	b.n	800c0ec <strncmp+0x1c>

0800c0f8 <_strtoul_l.constprop.0>:
 800c0f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c0fc:	4f36      	ldr	r7, [pc, #216]	; (800c1d8 <_strtoul_l.constprop.0+0xe0>)
 800c0fe:	4686      	mov	lr, r0
 800c100:	460d      	mov	r5, r1
 800c102:	4628      	mov	r0, r5
 800c104:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c108:	5de6      	ldrb	r6, [r4, r7]
 800c10a:	f016 0608 	ands.w	r6, r6, #8
 800c10e:	d1f8      	bne.n	800c102 <_strtoul_l.constprop.0+0xa>
 800c110:	2c2d      	cmp	r4, #45	; 0x2d
 800c112:	d12f      	bne.n	800c174 <_strtoul_l.constprop.0+0x7c>
 800c114:	782c      	ldrb	r4, [r5, #0]
 800c116:	2601      	movs	r6, #1
 800c118:	1c85      	adds	r5, r0, #2
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d057      	beq.n	800c1ce <_strtoul_l.constprop.0+0xd6>
 800c11e:	2b10      	cmp	r3, #16
 800c120:	d109      	bne.n	800c136 <_strtoul_l.constprop.0+0x3e>
 800c122:	2c30      	cmp	r4, #48	; 0x30
 800c124:	d107      	bne.n	800c136 <_strtoul_l.constprop.0+0x3e>
 800c126:	7828      	ldrb	r0, [r5, #0]
 800c128:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c12c:	2858      	cmp	r0, #88	; 0x58
 800c12e:	d149      	bne.n	800c1c4 <_strtoul_l.constprop.0+0xcc>
 800c130:	786c      	ldrb	r4, [r5, #1]
 800c132:	2310      	movs	r3, #16
 800c134:	3502      	adds	r5, #2
 800c136:	f04f 38ff 	mov.w	r8, #4294967295
 800c13a:	2700      	movs	r7, #0
 800c13c:	fbb8 f8f3 	udiv	r8, r8, r3
 800c140:	fb03 f908 	mul.w	r9, r3, r8
 800c144:	ea6f 0909 	mvn.w	r9, r9
 800c148:	4638      	mov	r0, r7
 800c14a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c14e:	f1bc 0f09 	cmp.w	ip, #9
 800c152:	d814      	bhi.n	800c17e <_strtoul_l.constprop.0+0x86>
 800c154:	4664      	mov	r4, ip
 800c156:	42a3      	cmp	r3, r4
 800c158:	dd22      	ble.n	800c1a0 <_strtoul_l.constprop.0+0xa8>
 800c15a:	2f00      	cmp	r7, #0
 800c15c:	db1d      	blt.n	800c19a <_strtoul_l.constprop.0+0xa2>
 800c15e:	4580      	cmp	r8, r0
 800c160:	d31b      	bcc.n	800c19a <_strtoul_l.constprop.0+0xa2>
 800c162:	d101      	bne.n	800c168 <_strtoul_l.constprop.0+0x70>
 800c164:	45a1      	cmp	r9, r4
 800c166:	db18      	blt.n	800c19a <_strtoul_l.constprop.0+0xa2>
 800c168:	fb00 4003 	mla	r0, r0, r3, r4
 800c16c:	2701      	movs	r7, #1
 800c16e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c172:	e7ea      	b.n	800c14a <_strtoul_l.constprop.0+0x52>
 800c174:	2c2b      	cmp	r4, #43	; 0x2b
 800c176:	bf04      	itt	eq
 800c178:	782c      	ldrbeq	r4, [r5, #0]
 800c17a:	1c85      	addeq	r5, r0, #2
 800c17c:	e7cd      	b.n	800c11a <_strtoul_l.constprop.0+0x22>
 800c17e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c182:	f1bc 0f19 	cmp.w	ip, #25
 800c186:	d801      	bhi.n	800c18c <_strtoul_l.constprop.0+0x94>
 800c188:	3c37      	subs	r4, #55	; 0x37
 800c18a:	e7e4      	b.n	800c156 <_strtoul_l.constprop.0+0x5e>
 800c18c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c190:	f1bc 0f19 	cmp.w	ip, #25
 800c194:	d804      	bhi.n	800c1a0 <_strtoul_l.constprop.0+0xa8>
 800c196:	3c57      	subs	r4, #87	; 0x57
 800c198:	e7dd      	b.n	800c156 <_strtoul_l.constprop.0+0x5e>
 800c19a:	f04f 37ff 	mov.w	r7, #4294967295
 800c19e:	e7e6      	b.n	800c16e <_strtoul_l.constprop.0+0x76>
 800c1a0:	2f00      	cmp	r7, #0
 800c1a2:	da07      	bge.n	800c1b4 <_strtoul_l.constprop.0+0xbc>
 800c1a4:	2322      	movs	r3, #34	; 0x22
 800c1a6:	f8ce 3000 	str.w	r3, [lr]
 800c1aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ae:	b932      	cbnz	r2, 800c1be <_strtoul_l.constprop.0+0xc6>
 800c1b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1b4:	b106      	cbz	r6, 800c1b8 <_strtoul_l.constprop.0+0xc0>
 800c1b6:	4240      	negs	r0, r0
 800c1b8:	2a00      	cmp	r2, #0
 800c1ba:	d0f9      	beq.n	800c1b0 <_strtoul_l.constprop.0+0xb8>
 800c1bc:	b107      	cbz	r7, 800c1c0 <_strtoul_l.constprop.0+0xc8>
 800c1be:	1e69      	subs	r1, r5, #1
 800c1c0:	6011      	str	r1, [r2, #0]
 800c1c2:	e7f5      	b.n	800c1b0 <_strtoul_l.constprop.0+0xb8>
 800c1c4:	2430      	movs	r4, #48	; 0x30
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d1b5      	bne.n	800c136 <_strtoul_l.constprop.0+0x3e>
 800c1ca:	2308      	movs	r3, #8
 800c1cc:	e7b3      	b.n	800c136 <_strtoul_l.constprop.0+0x3e>
 800c1ce:	2c30      	cmp	r4, #48	; 0x30
 800c1d0:	d0a9      	beq.n	800c126 <_strtoul_l.constprop.0+0x2e>
 800c1d2:	230a      	movs	r3, #10
 800c1d4:	e7af      	b.n	800c136 <_strtoul_l.constprop.0+0x3e>
 800c1d6:	bf00      	nop
 800c1d8:	0800ce01 	.word	0x0800ce01

0800c1dc <_strtoul_r>:
 800c1dc:	f7ff bf8c 	b.w	800c0f8 <_strtoul_l.constprop.0>

0800c1e0 <__submore>:
 800c1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1e4:	460c      	mov	r4, r1
 800c1e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c1e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1ec:	4299      	cmp	r1, r3
 800c1ee:	d11d      	bne.n	800c22c <__submore+0x4c>
 800c1f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c1f4:	f7ff fa14 	bl	800b620 <_malloc_r>
 800c1f8:	b918      	cbnz	r0, 800c202 <__submore+0x22>
 800c1fa:	f04f 30ff 	mov.w	r0, #4294967295
 800c1fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c206:	63a3      	str	r3, [r4, #56]	; 0x38
 800c208:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c20c:	6360      	str	r0, [r4, #52]	; 0x34
 800c20e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c212:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c216:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c21a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c21e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c222:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c226:	6020      	str	r0, [r4, #0]
 800c228:	2000      	movs	r0, #0
 800c22a:	e7e8      	b.n	800c1fe <__submore+0x1e>
 800c22c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c22e:	0077      	lsls	r7, r6, #1
 800c230:	463a      	mov	r2, r7
 800c232:	f000 fa2d 	bl	800c690 <_realloc_r>
 800c236:	4605      	mov	r5, r0
 800c238:	2800      	cmp	r0, #0
 800c23a:	d0de      	beq.n	800c1fa <__submore+0x1a>
 800c23c:	eb00 0806 	add.w	r8, r0, r6
 800c240:	4601      	mov	r1, r0
 800c242:	4632      	mov	r2, r6
 800c244:	4640      	mov	r0, r8
 800c246:	f7fe fc99 	bl	800ab7c <memcpy>
 800c24a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c24e:	f8c4 8000 	str.w	r8, [r4]
 800c252:	e7e9      	b.n	800c228 <__submore+0x48>

0800c254 <__ascii_wctomb>:
 800c254:	b149      	cbz	r1, 800c26a <__ascii_wctomb+0x16>
 800c256:	2aff      	cmp	r2, #255	; 0xff
 800c258:	bf85      	ittet	hi
 800c25a:	238a      	movhi	r3, #138	; 0x8a
 800c25c:	6003      	strhi	r3, [r0, #0]
 800c25e:	700a      	strbls	r2, [r1, #0]
 800c260:	f04f 30ff 	movhi.w	r0, #4294967295
 800c264:	bf98      	it	ls
 800c266:	2001      	movls	r0, #1
 800c268:	4770      	bx	lr
 800c26a:	4608      	mov	r0, r1
 800c26c:	4770      	bx	lr
	...

0800c270 <__assert_func>:
 800c270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c272:	4614      	mov	r4, r2
 800c274:	461a      	mov	r2, r3
 800c276:	4b09      	ldr	r3, [pc, #36]	; (800c29c <__assert_func+0x2c>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4605      	mov	r5, r0
 800c27c:	68d8      	ldr	r0, [r3, #12]
 800c27e:	b14c      	cbz	r4, 800c294 <__assert_func+0x24>
 800c280:	4b07      	ldr	r3, [pc, #28]	; (800c2a0 <__assert_func+0x30>)
 800c282:	9100      	str	r1, [sp, #0]
 800c284:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c288:	4906      	ldr	r1, [pc, #24]	; (800c2a4 <__assert_func+0x34>)
 800c28a:	462b      	mov	r3, r5
 800c28c:	f000 f9a6 	bl	800c5dc <fiprintf>
 800c290:	f000 fc46 	bl	800cb20 <abort>
 800c294:	4b04      	ldr	r3, [pc, #16]	; (800c2a8 <__assert_func+0x38>)
 800c296:	461c      	mov	r4, r3
 800c298:	e7f3      	b.n	800c282 <__assert_func+0x12>
 800c29a:	bf00      	nop
 800c29c:	200000f0 	.word	0x200000f0
 800c2a0:	0800d190 	.word	0x0800d190
 800c2a4:	0800d19d 	.word	0x0800d19d
 800c2a8:	0800d1cb 	.word	0x0800d1cb

0800c2ac <__sflush_r>:
 800c2ac:	898a      	ldrh	r2, [r1, #12]
 800c2ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2b2:	4605      	mov	r5, r0
 800c2b4:	0710      	lsls	r0, r2, #28
 800c2b6:	460c      	mov	r4, r1
 800c2b8:	d458      	bmi.n	800c36c <__sflush_r+0xc0>
 800c2ba:	684b      	ldr	r3, [r1, #4]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	dc05      	bgt.n	800c2cc <__sflush_r+0x20>
 800c2c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	dc02      	bgt.n	800c2cc <__sflush_r+0x20>
 800c2c6:	2000      	movs	r0, #0
 800c2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2ce:	2e00      	cmp	r6, #0
 800c2d0:	d0f9      	beq.n	800c2c6 <__sflush_r+0x1a>
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c2d8:	682f      	ldr	r7, [r5, #0]
 800c2da:	602b      	str	r3, [r5, #0]
 800c2dc:	d032      	beq.n	800c344 <__sflush_r+0x98>
 800c2de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c2e0:	89a3      	ldrh	r3, [r4, #12]
 800c2e2:	075a      	lsls	r2, r3, #29
 800c2e4:	d505      	bpl.n	800c2f2 <__sflush_r+0x46>
 800c2e6:	6863      	ldr	r3, [r4, #4]
 800c2e8:	1ac0      	subs	r0, r0, r3
 800c2ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c2ec:	b10b      	cbz	r3, 800c2f2 <__sflush_r+0x46>
 800c2ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c2f0:	1ac0      	subs	r0, r0, r3
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2f8:	6a21      	ldr	r1, [r4, #32]
 800c2fa:	4628      	mov	r0, r5
 800c2fc:	47b0      	blx	r6
 800c2fe:	1c43      	adds	r3, r0, #1
 800c300:	89a3      	ldrh	r3, [r4, #12]
 800c302:	d106      	bne.n	800c312 <__sflush_r+0x66>
 800c304:	6829      	ldr	r1, [r5, #0]
 800c306:	291d      	cmp	r1, #29
 800c308:	d82c      	bhi.n	800c364 <__sflush_r+0xb8>
 800c30a:	4a2a      	ldr	r2, [pc, #168]	; (800c3b4 <__sflush_r+0x108>)
 800c30c:	40ca      	lsrs	r2, r1
 800c30e:	07d6      	lsls	r6, r2, #31
 800c310:	d528      	bpl.n	800c364 <__sflush_r+0xb8>
 800c312:	2200      	movs	r2, #0
 800c314:	6062      	str	r2, [r4, #4]
 800c316:	04d9      	lsls	r1, r3, #19
 800c318:	6922      	ldr	r2, [r4, #16]
 800c31a:	6022      	str	r2, [r4, #0]
 800c31c:	d504      	bpl.n	800c328 <__sflush_r+0x7c>
 800c31e:	1c42      	adds	r2, r0, #1
 800c320:	d101      	bne.n	800c326 <__sflush_r+0x7a>
 800c322:	682b      	ldr	r3, [r5, #0]
 800c324:	b903      	cbnz	r3, 800c328 <__sflush_r+0x7c>
 800c326:	6560      	str	r0, [r4, #84]	; 0x54
 800c328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c32a:	602f      	str	r7, [r5, #0]
 800c32c:	2900      	cmp	r1, #0
 800c32e:	d0ca      	beq.n	800c2c6 <__sflush_r+0x1a>
 800c330:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c334:	4299      	cmp	r1, r3
 800c336:	d002      	beq.n	800c33e <__sflush_r+0x92>
 800c338:	4628      	mov	r0, r5
 800c33a:	f7ff f905 	bl	800b548 <_free_r>
 800c33e:	2000      	movs	r0, #0
 800c340:	6360      	str	r0, [r4, #52]	; 0x34
 800c342:	e7c1      	b.n	800c2c8 <__sflush_r+0x1c>
 800c344:	6a21      	ldr	r1, [r4, #32]
 800c346:	2301      	movs	r3, #1
 800c348:	4628      	mov	r0, r5
 800c34a:	47b0      	blx	r6
 800c34c:	1c41      	adds	r1, r0, #1
 800c34e:	d1c7      	bne.n	800c2e0 <__sflush_r+0x34>
 800c350:	682b      	ldr	r3, [r5, #0]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d0c4      	beq.n	800c2e0 <__sflush_r+0x34>
 800c356:	2b1d      	cmp	r3, #29
 800c358:	d001      	beq.n	800c35e <__sflush_r+0xb2>
 800c35a:	2b16      	cmp	r3, #22
 800c35c:	d101      	bne.n	800c362 <__sflush_r+0xb6>
 800c35e:	602f      	str	r7, [r5, #0]
 800c360:	e7b1      	b.n	800c2c6 <__sflush_r+0x1a>
 800c362:	89a3      	ldrh	r3, [r4, #12]
 800c364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c368:	81a3      	strh	r3, [r4, #12]
 800c36a:	e7ad      	b.n	800c2c8 <__sflush_r+0x1c>
 800c36c:	690f      	ldr	r7, [r1, #16]
 800c36e:	2f00      	cmp	r7, #0
 800c370:	d0a9      	beq.n	800c2c6 <__sflush_r+0x1a>
 800c372:	0793      	lsls	r3, r2, #30
 800c374:	680e      	ldr	r6, [r1, #0]
 800c376:	bf08      	it	eq
 800c378:	694b      	ldreq	r3, [r1, #20]
 800c37a:	600f      	str	r7, [r1, #0]
 800c37c:	bf18      	it	ne
 800c37e:	2300      	movne	r3, #0
 800c380:	eba6 0807 	sub.w	r8, r6, r7
 800c384:	608b      	str	r3, [r1, #8]
 800c386:	f1b8 0f00 	cmp.w	r8, #0
 800c38a:	dd9c      	ble.n	800c2c6 <__sflush_r+0x1a>
 800c38c:	6a21      	ldr	r1, [r4, #32]
 800c38e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c390:	4643      	mov	r3, r8
 800c392:	463a      	mov	r2, r7
 800c394:	4628      	mov	r0, r5
 800c396:	47b0      	blx	r6
 800c398:	2800      	cmp	r0, #0
 800c39a:	dc06      	bgt.n	800c3aa <__sflush_r+0xfe>
 800c39c:	89a3      	ldrh	r3, [r4, #12]
 800c39e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3a2:	81a3      	strh	r3, [r4, #12]
 800c3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3a8:	e78e      	b.n	800c2c8 <__sflush_r+0x1c>
 800c3aa:	4407      	add	r7, r0
 800c3ac:	eba8 0800 	sub.w	r8, r8, r0
 800c3b0:	e7e9      	b.n	800c386 <__sflush_r+0xda>
 800c3b2:	bf00      	nop
 800c3b4:	20400001 	.word	0x20400001

0800c3b8 <_fflush_r>:
 800c3b8:	b538      	push	{r3, r4, r5, lr}
 800c3ba:	690b      	ldr	r3, [r1, #16]
 800c3bc:	4605      	mov	r5, r0
 800c3be:	460c      	mov	r4, r1
 800c3c0:	b913      	cbnz	r3, 800c3c8 <_fflush_r+0x10>
 800c3c2:	2500      	movs	r5, #0
 800c3c4:	4628      	mov	r0, r5
 800c3c6:	bd38      	pop	{r3, r4, r5, pc}
 800c3c8:	b118      	cbz	r0, 800c3d2 <_fflush_r+0x1a>
 800c3ca:	6983      	ldr	r3, [r0, #24]
 800c3cc:	b90b      	cbnz	r3, 800c3d2 <_fflush_r+0x1a>
 800c3ce:	f000 f887 	bl	800c4e0 <__sinit>
 800c3d2:	4b14      	ldr	r3, [pc, #80]	; (800c424 <_fflush_r+0x6c>)
 800c3d4:	429c      	cmp	r4, r3
 800c3d6:	d11b      	bne.n	800c410 <_fflush_r+0x58>
 800c3d8:	686c      	ldr	r4, [r5, #4]
 800c3da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d0ef      	beq.n	800c3c2 <_fflush_r+0xa>
 800c3e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c3e4:	07d0      	lsls	r0, r2, #31
 800c3e6:	d404      	bmi.n	800c3f2 <_fflush_r+0x3a>
 800c3e8:	0599      	lsls	r1, r3, #22
 800c3ea:	d402      	bmi.n	800c3f2 <_fflush_r+0x3a>
 800c3ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3ee:	f000 f927 	bl	800c640 <__retarget_lock_acquire_recursive>
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	4621      	mov	r1, r4
 800c3f6:	f7ff ff59 	bl	800c2ac <__sflush_r>
 800c3fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3fc:	07da      	lsls	r2, r3, #31
 800c3fe:	4605      	mov	r5, r0
 800c400:	d4e0      	bmi.n	800c3c4 <_fflush_r+0xc>
 800c402:	89a3      	ldrh	r3, [r4, #12]
 800c404:	059b      	lsls	r3, r3, #22
 800c406:	d4dd      	bmi.n	800c3c4 <_fflush_r+0xc>
 800c408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c40a:	f000 f91a 	bl	800c642 <__retarget_lock_release_recursive>
 800c40e:	e7d9      	b.n	800c3c4 <_fflush_r+0xc>
 800c410:	4b05      	ldr	r3, [pc, #20]	; (800c428 <_fflush_r+0x70>)
 800c412:	429c      	cmp	r4, r3
 800c414:	d101      	bne.n	800c41a <_fflush_r+0x62>
 800c416:	68ac      	ldr	r4, [r5, #8]
 800c418:	e7df      	b.n	800c3da <_fflush_r+0x22>
 800c41a:	4b04      	ldr	r3, [pc, #16]	; (800c42c <_fflush_r+0x74>)
 800c41c:	429c      	cmp	r4, r3
 800c41e:	bf08      	it	eq
 800c420:	68ec      	ldreq	r4, [r5, #12]
 800c422:	e7da      	b.n	800c3da <_fflush_r+0x22>
 800c424:	0800d1ec 	.word	0x0800d1ec
 800c428:	0800d20c 	.word	0x0800d20c
 800c42c:	0800d1cc 	.word	0x0800d1cc

0800c430 <std>:
 800c430:	2300      	movs	r3, #0
 800c432:	b510      	push	{r4, lr}
 800c434:	4604      	mov	r4, r0
 800c436:	e9c0 3300 	strd	r3, r3, [r0]
 800c43a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c43e:	6083      	str	r3, [r0, #8]
 800c440:	8181      	strh	r1, [r0, #12]
 800c442:	6643      	str	r3, [r0, #100]	; 0x64
 800c444:	81c2      	strh	r2, [r0, #14]
 800c446:	6183      	str	r3, [r0, #24]
 800c448:	4619      	mov	r1, r3
 800c44a:	2208      	movs	r2, #8
 800c44c:	305c      	adds	r0, #92	; 0x5c
 800c44e:	f7fb fb6d 	bl	8007b2c <memset>
 800c452:	4b05      	ldr	r3, [pc, #20]	; (800c468 <std+0x38>)
 800c454:	6263      	str	r3, [r4, #36]	; 0x24
 800c456:	4b05      	ldr	r3, [pc, #20]	; (800c46c <std+0x3c>)
 800c458:	62a3      	str	r3, [r4, #40]	; 0x28
 800c45a:	4b05      	ldr	r3, [pc, #20]	; (800c470 <std+0x40>)
 800c45c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c45e:	4b05      	ldr	r3, [pc, #20]	; (800c474 <std+0x44>)
 800c460:	6224      	str	r4, [r4, #32]
 800c462:	6323      	str	r3, [r4, #48]	; 0x30
 800c464:	bd10      	pop	{r4, pc}
 800c466:	bf00      	nop
 800c468:	080088d5 	.word	0x080088d5
 800c46c:	080088fb 	.word	0x080088fb
 800c470:	08008933 	.word	0x08008933
 800c474:	08008957 	.word	0x08008957

0800c478 <_cleanup_r>:
 800c478:	4901      	ldr	r1, [pc, #4]	; (800c480 <_cleanup_r+0x8>)
 800c47a:	f000 b8c1 	b.w	800c600 <_fwalk_reent>
 800c47e:	bf00      	nop
 800c480:	0800c3b9 	.word	0x0800c3b9

0800c484 <__sfmoreglue>:
 800c484:	b570      	push	{r4, r5, r6, lr}
 800c486:	2268      	movs	r2, #104	; 0x68
 800c488:	1e4d      	subs	r5, r1, #1
 800c48a:	4355      	muls	r5, r2
 800c48c:	460e      	mov	r6, r1
 800c48e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c492:	f7ff f8c5 	bl	800b620 <_malloc_r>
 800c496:	4604      	mov	r4, r0
 800c498:	b140      	cbz	r0, 800c4ac <__sfmoreglue+0x28>
 800c49a:	2100      	movs	r1, #0
 800c49c:	e9c0 1600 	strd	r1, r6, [r0]
 800c4a0:	300c      	adds	r0, #12
 800c4a2:	60a0      	str	r0, [r4, #8]
 800c4a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c4a8:	f7fb fb40 	bl	8007b2c <memset>
 800c4ac:	4620      	mov	r0, r4
 800c4ae:	bd70      	pop	{r4, r5, r6, pc}

0800c4b0 <__sfp_lock_acquire>:
 800c4b0:	4801      	ldr	r0, [pc, #4]	; (800c4b8 <__sfp_lock_acquire+0x8>)
 800c4b2:	f000 b8c5 	b.w	800c640 <__retarget_lock_acquire_recursive>
 800c4b6:	bf00      	nop
 800c4b8:	20000925 	.word	0x20000925

0800c4bc <__sfp_lock_release>:
 800c4bc:	4801      	ldr	r0, [pc, #4]	; (800c4c4 <__sfp_lock_release+0x8>)
 800c4be:	f000 b8c0 	b.w	800c642 <__retarget_lock_release_recursive>
 800c4c2:	bf00      	nop
 800c4c4:	20000925 	.word	0x20000925

0800c4c8 <__sinit_lock_acquire>:
 800c4c8:	4801      	ldr	r0, [pc, #4]	; (800c4d0 <__sinit_lock_acquire+0x8>)
 800c4ca:	f000 b8b9 	b.w	800c640 <__retarget_lock_acquire_recursive>
 800c4ce:	bf00      	nop
 800c4d0:	20000926 	.word	0x20000926

0800c4d4 <__sinit_lock_release>:
 800c4d4:	4801      	ldr	r0, [pc, #4]	; (800c4dc <__sinit_lock_release+0x8>)
 800c4d6:	f000 b8b4 	b.w	800c642 <__retarget_lock_release_recursive>
 800c4da:	bf00      	nop
 800c4dc:	20000926 	.word	0x20000926

0800c4e0 <__sinit>:
 800c4e0:	b510      	push	{r4, lr}
 800c4e2:	4604      	mov	r4, r0
 800c4e4:	f7ff fff0 	bl	800c4c8 <__sinit_lock_acquire>
 800c4e8:	69a3      	ldr	r3, [r4, #24]
 800c4ea:	b11b      	cbz	r3, 800c4f4 <__sinit+0x14>
 800c4ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4f0:	f7ff bff0 	b.w	800c4d4 <__sinit_lock_release>
 800c4f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c4f8:	6523      	str	r3, [r4, #80]	; 0x50
 800c4fa:	4b13      	ldr	r3, [pc, #76]	; (800c548 <__sinit+0x68>)
 800c4fc:	4a13      	ldr	r2, [pc, #76]	; (800c54c <__sinit+0x6c>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	62a2      	str	r2, [r4, #40]	; 0x28
 800c502:	42a3      	cmp	r3, r4
 800c504:	bf04      	itt	eq
 800c506:	2301      	moveq	r3, #1
 800c508:	61a3      	streq	r3, [r4, #24]
 800c50a:	4620      	mov	r0, r4
 800c50c:	f000 f820 	bl	800c550 <__sfp>
 800c510:	6060      	str	r0, [r4, #4]
 800c512:	4620      	mov	r0, r4
 800c514:	f000 f81c 	bl	800c550 <__sfp>
 800c518:	60a0      	str	r0, [r4, #8]
 800c51a:	4620      	mov	r0, r4
 800c51c:	f000 f818 	bl	800c550 <__sfp>
 800c520:	2200      	movs	r2, #0
 800c522:	60e0      	str	r0, [r4, #12]
 800c524:	2104      	movs	r1, #4
 800c526:	6860      	ldr	r0, [r4, #4]
 800c528:	f7ff ff82 	bl	800c430 <std>
 800c52c:	68a0      	ldr	r0, [r4, #8]
 800c52e:	2201      	movs	r2, #1
 800c530:	2109      	movs	r1, #9
 800c532:	f7ff ff7d 	bl	800c430 <std>
 800c536:	68e0      	ldr	r0, [r4, #12]
 800c538:	2202      	movs	r2, #2
 800c53a:	2112      	movs	r1, #18
 800c53c:	f7ff ff78 	bl	800c430 <std>
 800c540:	2301      	movs	r3, #1
 800c542:	61a3      	str	r3, [r4, #24]
 800c544:	e7d2      	b.n	800c4ec <__sinit+0xc>
 800c546:	bf00      	nop
 800c548:	0800cd70 	.word	0x0800cd70
 800c54c:	0800c479 	.word	0x0800c479

0800c550 <__sfp>:
 800c550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c552:	4607      	mov	r7, r0
 800c554:	f7ff ffac 	bl	800c4b0 <__sfp_lock_acquire>
 800c558:	4b1e      	ldr	r3, [pc, #120]	; (800c5d4 <__sfp+0x84>)
 800c55a:	681e      	ldr	r6, [r3, #0]
 800c55c:	69b3      	ldr	r3, [r6, #24]
 800c55e:	b913      	cbnz	r3, 800c566 <__sfp+0x16>
 800c560:	4630      	mov	r0, r6
 800c562:	f7ff ffbd 	bl	800c4e0 <__sinit>
 800c566:	3648      	adds	r6, #72	; 0x48
 800c568:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c56c:	3b01      	subs	r3, #1
 800c56e:	d503      	bpl.n	800c578 <__sfp+0x28>
 800c570:	6833      	ldr	r3, [r6, #0]
 800c572:	b30b      	cbz	r3, 800c5b8 <__sfp+0x68>
 800c574:	6836      	ldr	r6, [r6, #0]
 800c576:	e7f7      	b.n	800c568 <__sfp+0x18>
 800c578:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c57c:	b9d5      	cbnz	r5, 800c5b4 <__sfp+0x64>
 800c57e:	4b16      	ldr	r3, [pc, #88]	; (800c5d8 <__sfp+0x88>)
 800c580:	60e3      	str	r3, [r4, #12]
 800c582:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c586:	6665      	str	r5, [r4, #100]	; 0x64
 800c588:	f000 f859 	bl	800c63e <__retarget_lock_init_recursive>
 800c58c:	f7ff ff96 	bl	800c4bc <__sfp_lock_release>
 800c590:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c594:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c598:	6025      	str	r5, [r4, #0]
 800c59a:	61a5      	str	r5, [r4, #24]
 800c59c:	2208      	movs	r2, #8
 800c59e:	4629      	mov	r1, r5
 800c5a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c5a4:	f7fb fac2 	bl	8007b2c <memset>
 800c5a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c5ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5b4:	3468      	adds	r4, #104	; 0x68
 800c5b6:	e7d9      	b.n	800c56c <__sfp+0x1c>
 800c5b8:	2104      	movs	r1, #4
 800c5ba:	4638      	mov	r0, r7
 800c5bc:	f7ff ff62 	bl	800c484 <__sfmoreglue>
 800c5c0:	4604      	mov	r4, r0
 800c5c2:	6030      	str	r0, [r6, #0]
 800c5c4:	2800      	cmp	r0, #0
 800c5c6:	d1d5      	bne.n	800c574 <__sfp+0x24>
 800c5c8:	f7ff ff78 	bl	800c4bc <__sfp_lock_release>
 800c5cc:	230c      	movs	r3, #12
 800c5ce:	603b      	str	r3, [r7, #0]
 800c5d0:	e7ee      	b.n	800c5b0 <__sfp+0x60>
 800c5d2:	bf00      	nop
 800c5d4:	0800cd70 	.word	0x0800cd70
 800c5d8:	ffff0001 	.word	0xffff0001

0800c5dc <fiprintf>:
 800c5dc:	b40e      	push	{r1, r2, r3}
 800c5de:	b503      	push	{r0, r1, lr}
 800c5e0:	4601      	mov	r1, r0
 800c5e2:	ab03      	add	r3, sp, #12
 800c5e4:	4805      	ldr	r0, [pc, #20]	; (800c5fc <fiprintf+0x20>)
 800c5e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5ea:	6800      	ldr	r0, [r0, #0]
 800c5ec:	9301      	str	r3, [sp, #4]
 800c5ee:	f000 f8a7 	bl	800c740 <_vfiprintf_r>
 800c5f2:	b002      	add	sp, #8
 800c5f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5f8:	b003      	add	sp, #12
 800c5fa:	4770      	bx	lr
 800c5fc:	200000f0 	.word	0x200000f0

0800c600 <_fwalk_reent>:
 800c600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c604:	4606      	mov	r6, r0
 800c606:	4688      	mov	r8, r1
 800c608:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c60c:	2700      	movs	r7, #0
 800c60e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c612:	f1b9 0901 	subs.w	r9, r9, #1
 800c616:	d505      	bpl.n	800c624 <_fwalk_reent+0x24>
 800c618:	6824      	ldr	r4, [r4, #0]
 800c61a:	2c00      	cmp	r4, #0
 800c61c:	d1f7      	bne.n	800c60e <_fwalk_reent+0xe>
 800c61e:	4638      	mov	r0, r7
 800c620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c624:	89ab      	ldrh	r3, [r5, #12]
 800c626:	2b01      	cmp	r3, #1
 800c628:	d907      	bls.n	800c63a <_fwalk_reent+0x3a>
 800c62a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c62e:	3301      	adds	r3, #1
 800c630:	d003      	beq.n	800c63a <_fwalk_reent+0x3a>
 800c632:	4629      	mov	r1, r5
 800c634:	4630      	mov	r0, r6
 800c636:	47c0      	blx	r8
 800c638:	4307      	orrs	r7, r0
 800c63a:	3568      	adds	r5, #104	; 0x68
 800c63c:	e7e9      	b.n	800c612 <_fwalk_reent+0x12>

0800c63e <__retarget_lock_init_recursive>:
 800c63e:	4770      	bx	lr

0800c640 <__retarget_lock_acquire_recursive>:
 800c640:	4770      	bx	lr

0800c642 <__retarget_lock_release_recursive>:
 800c642:	4770      	bx	lr

0800c644 <memmove>:
 800c644:	4288      	cmp	r0, r1
 800c646:	b510      	push	{r4, lr}
 800c648:	eb01 0402 	add.w	r4, r1, r2
 800c64c:	d902      	bls.n	800c654 <memmove+0x10>
 800c64e:	4284      	cmp	r4, r0
 800c650:	4623      	mov	r3, r4
 800c652:	d807      	bhi.n	800c664 <memmove+0x20>
 800c654:	1e43      	subs	r3, r0, #1
 800c656:	42a1      	cmp	r1, r4
 800c658:	d008      	beq.n	800c66c <memmove+0x28>
 800c65a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c65e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c662:	e7f8      	b.n	800c656 <memmove+0x12>
 800c664:	4402      	add	r2, r0
 800c666:	4601      	mov	r1, r0
 800c668:	428a      	cmp	r2, r1
 800c66a:	d100      	bne.n	800c66e <memmove+0x2a>
 800c66c:	bd10      	pop	{r4, pc}
 800c66e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c672:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c676:	e7f7      	b.n	800c668 <memmove+0x24>

0800c678 <__malloc_lock>:
 800c678:	4801      	ldr	r0, [pc, #4]	; (800c680 <__malloc_lock+0x8>)
 800c67a:	f7ff bfe1 	b.w	800c640 <__retarget_lock_acquire_recursive>
 800c67e:	bf00      	nop
 800c680:	20000924 	.word	0x20000924

0800c684 <__malloc_unlock>:
 800c684:	4801      	ldr	r0, [pc, #4]	; (800c68c <__malloc_unlock+0x8>)
 800c686:	f7ff bfdc 	b.w	800c642 <__retarget_lock_release_recursive>
 800c68a:	bf00      	nop
 800c68c:	20000924 	.word	0x20000924

0800c690 <_realloc_r>:
 800c690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c694:	4680      	mov	r8, r0
 800c696:	4614      	mov	r4, r2
 800c698:	460e      	mov	r6, r1
 800c69a:	b921      	cbnz	r1, 800c6a6 <_realloc_r+0x16>
 800c69c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6a0:	4611      	mov	r1, r2
 800c6a2:	f7fe bfbd 	b.w	800b620 <_malloc_r>
 800c6a6:	b92a      	cbnz	r2, 800c6b4 <_realloc_r+0x24>
 800c6a8:	f7fe ff4e 	bl	800b548 <_free_r>
 800c6ac:	4625      	mov	r5, r4
 800c6ae:	4628      	mov	r0, r5
 800c6b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6b4:	f000 faa0 	bl	800cbf8 <_malloc_usable_size_r>
 800c6b8:	4284      	cmp	r4, r0
 800c6ba:	4607      	mov	r7, r0
 800c6bc:	d802      	bhi.n	800c6c4 <_realloc_r+0x34>
 800c6be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c6c2:	d812      	bhi.n	800c6ea <_realloc_r+0x5a>
 800c6c4:	4621      	mov	r1, r4
 800c6c6:	4640      	mov	r0, r8
 800c6c8:	f7fe ffaa 	bl	800b620 <_malloc_r>
 800c6cc:	4605      	mov	r5, r0
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	d0ed      	beq.n	800c6ae <_realloc_r+0x1e>
 800c6d2:	42bc      	cmp	r4, r7
 800c6d4:	4622      	mov	r2, r4
 800c6d6:	4631      	mov	r1, r6
 800c6d8:	bf28      	it	cs
 800c6da:	463a      	movcs	r2, r7
 800c6dc:	f7fe fa4e 	bl	800ab7c <memcpy>
 800c6e0:	4631      	mov	r1, r6
 800c6e2:	4640      	mov	r0, r8
 800c6e4:	f7fe ff30 	bl	800b548 <_free_r>
 800c6e8:	e7e1      	b.n	800c6ae <_realloc_r+0x1e>
 800c6ea:	4635      	mov	r5, r6
 800c6ec:	e7df      	b.n	800c6ae <_realloc_r+0x1e>

0800c6ee <__sfputc_r>:
 800c6ee:	6893      	ldr	r3, [r2, #8]
 800c6f0:	3b01      	subs	r3, #1
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	b410      	push	{r4}
 800c6f6:	6093      	str	r3, [r2, #8]
 800c6f8:	da08      	bge.n	800c70c <__sfputc_r+0x1e>
 800c6fa:	6994      	ldr	r4, [r2, #24]
 800c6fc:	42a3      	cmp	r3, r4
 800c6fe:	db01      	blt.n	800c704 <__sfputc_r+0x16>
 800c700:	290a      	cmp	r1, #10
 800c702:	d103      	bne.n	800c70c <__sfputc_r+0x1e>
 800c704:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c708:	f000 b94a 	b.w	800c9a0 <__swbuf_r>
 800c70c:	6813      	ldr	r3, [r2, #0]
 800c70e:	1c58      	adds	r0, r3, #1
 800c710:	6010      	str	r0, [r2, #0]
 800c712:	7019      	strb	r1, [r3, #0]
 800c714:	4608      	mov	r0, r1
 800c716:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c71a:	4770      	bx	lr

0800c71c <__sfputs_r>:
 800c71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c71e:	4606      	mov	r6, r0
 800c720:	460f      	mov	r7, r1
 800c722:	4614      	mov	r4, r2
 800c724:	18d5      	adds	r5, r2, r3
 800c726:	42ac      	cmp	r4, r5
 800c728:	d101      	bne.n	800c72e <__sfputs_r+0x12>
 800c72a:	2000      	movs	r0, #0
 800c72c:	e007      	b.n	800c73e <__sfputs_r+0x22>
 800c72e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c732:	463a      	mov	r2, r7
 800c734:	4630      	mov	r0, r6
 800c736:	f7ff ffda 	bl	800c6ee <__sfputc_r>
 800c73a:	1c43      	adds	r3, r0, #1
 800c73c:	d1f3      	bne.n	800c726 <__sfputs_r+0xa>
 800c73e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c740 <_vfiprintf_r>:
 800c740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c744:	460d      	mov	r5, r1
 800c746:	b09d      	sub	sp, #116	; 0x74
 800c748:	4614      	mov	r4, r2
 800c74a:	4698      	mov	r8, r3
 800c74c:	4606      	mov	r6, r0
 800c74e:	b118      	cbz	r0, 800c758 <_vfiprintf_r+0x18>
 800c750:	6983      	ldr	r3, [r0, #24]
 800c752:	b90b      	cbnz	r3, 800c758 <_vfiprintf_r+0x18>
 800c754:	f7ff fec4 	bl	800c4e0 <__sinit>
 800c758:	4b89      	ldr	r3, [pc, #548]	; (800c980 <_vfiprintf_r+0x240>)
 800c75a:	429d      	cmp	r5, r3
 800c75c:	d11b      	bne.n	800c796 <_vfiprintf_r+0x56>
 800c75e:	6875      	ldr	r5, [r6, #4]
 800c760:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c762:	07d9      	lsls	r1, r3, #31
 800c764:	d405      	bmi.n	800c772 <_vfiprintf_r+0x32>
 800c766:	89ab      	ldrh	r3, [r5, #12]
 800c768:	059a      	lsls	r2, r3, #22
 800c76a:	d402      	bmi.n	800c772 <_vfiprintf_r+0x32>
 800c76c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c76e:	f7ff ff67 	bl	800c640 <__retarget_lock_acquire_recursive>
 800c772:	89ab      	ldrh	r3, [r5, #12]
 800c774:	071b      	lsls	r3, r3, #28
 800c776:	d501      	bpl.n	800c77c <_vfiprintf_r+0x3c>
 800c778:	692b      	ldr	r3, [r5, #16]
 800c77a:	b9eb      	cbnz	r3, 800c7b8 <_vfiprintf_r+0x78>
 800c77c:	4629      	mov	r1, r5
 800c77e:	4630      	mov	r0, r6
 800c780:	f000 f960 	bl	800ca44 <__swsetup_r>
 800c784:	b1c0      	cbz	r0, 800c7b8 <_vfiprintf_r+0x78>
 800c786:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c788:	07dc      	lsls	r4, r3, #31
 800c78a:	d50e      	bpl.n	800c7aa <_vfiprintf_r+0x6a>
 800c78c:	f04f 30ff 	mov.w	r0, #4294967295
 800c790:	b01d      	add	sp, #116	; 0x74
 800c792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c796:	4b7b      	ldr	r3, [pc, #492]	; (800c984 <_vfiprintf_r+0x244>)
 800c798:	429d      	cmp	r5, r3
 800c79a:	d101      	bne.n	800c7a0 <_vfiprintf_r+0x60>
 800c79c:	68b5      	ldr	r5, [r6, #8]
 800c79e:	e7df      	b.n	800c760 <_vfiprintf_r+0x20>
 800c7a0:	4b79      	ldr	r3, [pc, #484]	; (800c988 <_vfiprintf_r+0x248>)
 800c7a2:	429d      	cmp	r5, r3
 800c7a4:	bf08      	it	eq
 800c7a6:	68f5      	ldreq	r5, [r6, #12]
 800c7a8:	e7da      	b.n	800c760 <_vfiprintf_r+0x20>
 800c7aa:	89ab      	ldrh	r3, [r5, #12]
 800c7ac:	0598      	lsls	r0, r3, #22
 800c7ae:	d4ed      	bmi.n	800c78c <_vfiprintf_r+0x4c>
 800c7b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7b2:	f7ff ff46 	bl	800c642 <__retarget_lock_release_recursive>
 800c7b6:	e7e9      	b.n	800c78c <_vfiprintf_r+0x4c>
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	9309      	str	r3, [sp, #36]	; 0x24
 800c7bc:	2320      	movs	r3, #32
 800c7be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7c6:	2330      	movs	r3, #48	; 0x30
 800c7c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c98c <_vfiprintf_r+0x24c>
 800c7cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7d0:	f04f 0901 	mov.w	r9, #1
 800c7d4:	4623      	mov	r3, r4
 800c7d6:	469a      	mov	sl, r3
 800c7d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7dc:	b10a      	cbz	r2, 800c7e2 <_vfiprintf_r+0xa2>
 800c7de:	2a25      	cmp	r2, #37	; 0x25
 800c7e0:	d1f9      	bne.n	800c7d6 <_vfiprintf_r+0x96>
 800c7e2:	ebba 0b04 	subs.w	fp, sl, r4
 800c7e6:	d00b      	beq.n	800c800 <_vfiprintf_r+0xc0>
 800c7e8:	465b      	mov	r3, fp
 800c7ea:	4622      	mov	r2, r4
 800c7ec:	4629      	mov	r1, r5
 800c7ee:	4630      	mov	r0, r6
 800c7f0:	f7ff ff94 	bl	800c71c <__sfputs_r>
 800c7f4:	3001      	adds	r0, #1
 800c7f6:	f000 80aa 	beq.w	800c94e <_vfiprintf_r+0x20e>
 800c7fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7fc:	445a      	add	r2, fp
 800c7fe:	9209      	str	r2, [sp, #36]	; 0x24
 800c800:	f89a 3000 	ldrb.w	r3, [sl]
 800c804:	2b00      	cmp	r3, #0
 800c806:	f000 80a2 	beq.w	800c94e <_vfiprintf_r+0x20e>
 800c80a:	2300      	movs	r3, #0
 800c80c:	f04f 32ff 	mov.w	r2, #4294967295
 800c810:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c814:	f10a 0a01 	add.w	sl, sl, #1
 800c818:	9304      	str	r3, [sp, #16]
 800c81a:	9307      	str	r3, [sp, #28]
 800c81c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c820:	931a      	str	r3, [sp, #104]	; 0x68
 800c822:	4654      	mov	r4, sl
 800c824:	2205      	movs	r2, #5
 800c826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c82a:	4858      	ldr	r0, [pc, #352]	; (800c98c <_vfiprintf_r+0x24c>)
 800c82c:	f7f3 fcd8 	bl	80001e0 <memchr>
 800c830:	9a04      	ldr	r2, [sp, #16]
 800c832:	b9d8      	cbnz	r0, 800c86c <_vfiprintf_r+0x12c>
 800c834:	06d1      	lsls	r1, r2, #27
 800c836:	bf44      	itt	mi
 800c838:	2320      	movmi	r3, #32
 800c83a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c83e:	0713      	lsls	r3, r2, #28
 800c840:	bf44      	itt	mi
 800c842:	232b      	movmi	r3, #43	; 0x2b
 800c844:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c848:	f89a 3000 	ldrb.w	r3, [sl]
 800c84c:	2b2a      	cmp	r3, #42	; 0x2a
 800c84e:	d015      	beq.n	800c87c <_vfiprintf_r+0x13c>
 800c850:	9a07      	ldr	r2, [sp, #28]
 800c852:	4654      	mov	r4, sl
 800c854:	2000      	movs	r0, #0
 800c856:	f04f 0c0a 	mov.w	ip, #10
 800c85a:	4621      	mov	r1, r4
 800c85c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c860:	3b30      	subs	r3, #48	; 0x30
 800c862:	2b09      	cmp	r3, #9
 800c864:	d94e      	bls.n	800c904 <_vfiprintf_r+0x1c4>
 800c866:	b1b0      	cbz	r0, 800c896 <_vfiprintf_r+0x156>
 800c868:	9207      	str	r2, [sp, #28]
 800c86a:	e014      	b.n	800c896 <_vfiprintf_r+0x156>
 800c86c:	eba0 0308 	sub.w	r3, r0, r8
 800c870:	fa09 f303 	lsl.w	r3, r9, r3
 800c874:	4313      	orrs	r3, r2
 800c876:	9304      	str	r3, [sp, #16]
 800c878:	46a2      	mov	sl, r4
 800c87a:	e7d2      	b.n	800c822 <_vfiprintf_r+0xe2>
 800c87c:	9b03      	ldr	r3, [sp, #12]
 800c87e:	1d19      	adds	r1, r3, #4
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	9103      	str	r1, [sp, #12]
 800c884:	2b00      	cmp	r3, #0
 800c886:	bfbb      	ittet	lt
 800c888:	425b      	neglt	r3, r3
 800c88a:	f042 0202 	orrlt.w	r2, r2, #2
 800c88e:	9307      	strge	r3, [sp, #28]
 800c890:	9307      	strlt	r3, [sp, #28]
 800c892:	bfb8      	it	lt
 800c894:	9204      	strlt	r2, [sp, #16]
 800c896:	7823      	ldrb	r3, [r4, #0]
 800c898:	2b2e      	cmp	r3, #46	; 0x2e
 800c89a:	d10c      	bne.n	800c8b6 <_vfiprintf_r+0x176>
 800c89c:	7863      	ldrb	r3, [r4, #1]
 800c89e:	2b2a      	cmp	r3, #42	; 0x2a
 800c8a0:	d135      	bne.n	800c90e <_vfiprintf_r+0x1ce>
 800c8a2:	9b03      	ldr	r3, [sp, #12]
 800c8a4:	1d1a      	adds	r2, r3, #4
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	9203      	str	r2, [sp, #12]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	bfb8      	it	lt
 800c8ae:	f04f 33ff 	movlt.w	r3, #4294967295
 800c8b2:	3402      	adds	r4, #2
 800c8b4:	9305      	str	r3, [sp, #20]
 800c8b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c99c <_vfiprintf_r+0x25c>
 800c8ba:	7821      	ldrb	r1, [r4, #0]
 800c8bc:	2203      	movs	r2, #3
 800c8be:	4650      	mov	r0, sl
 800c8c0:	f7f3 fc8e 	bl	80001e0 <memchr>
 800c8c4:	b140      	cbz	r0, 800c8d8 <_vfiprintf_r+0x198>
 800c8c6:	2340      	movs	r3, #64	; 0x40
 800c8c8:	eba0 000a 	sub.w	r0, r0, sl
 800c8cc:	fa03 f000 	lsl.w	r0, r3, r0
 800c8d0:	9b04      	ldr	r3, [sp, #16]
 800c8d2:	4303      	orrs	r3, r0
 800c8d4:	3401      	adds	r4, #1
 800c8d6:	9304      	str	r3, [sp, #16]
 800c8d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8dc:	482c      	ldr	r0, [pc, #176]	; (800c990 <_vfiprintf_r+0x250>)
 800c8de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8e2:	2206      	movs	r2, #6
 800c8e4:	f7f3 fc7c 	bl	80001e0 <memchr>
 800c8e8:	2800      	cmp	r0, #0
 800c8ea:	d03f      	beq.n	800c96c <_vfiprintf_r+0x22c>
 800c8ec:	4b29      	ldr	r3, [pc, #164]	; (800c994 <_vfiprintf_r+0x254>)
 800c8ee:	bb1b      	cbnz	r3, 800c938 <_vfiprintf_r+0x1f8>
 800c8f0:	9b03      	ldr	r3, [sp, #12]
 800c8f2:	3307      	adds	r3, #7
 800c8f4:	f023 0307 	bic.w	r3, r3, #7
 800c8f8:	3308      	adds	r3, #8
 800c8fa:	9303      	str	r3, [sp, #12]
 800c8fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8fe:	443b      	add	r3, r7
 800c900:	9309      	str	r3, [sp, #36]	; 0x24
 800c902:	e767      	b.n	800c7d4 <_vfiprintf_r+0x94>
 800c904:	fb0c 3202 	mla	r2, ip, r2, r3
 800c908:	460c      	mov	r4, r1
 800c90a:	2001      	movs	r0, #1
 800c90c:	e7a5      	b.n	800c85a <_vfiprintf_r+0x11a>
 800c90e:	2300      	movs	r3, #0
 800c910:	3401      	adds	r4, #1
 800c912:	9305      	str	r3, [sp, #20]
 800c914:	4619      	mov	r1, r3
 800c916:	f04f 0c0a 	mov.w	ip, #10
 800c91a:	4620      	mov	r0, r4
 800c91c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c920:	3a30      	subs	r2, #48	; 0x30
 800c922:	2a09      	cmp	r2, #9
 800c924:	d903      	bls.n	800c92e <_vfiprintf_r+0x1ee>
 800c926:	2b00      	cmp	r3, #0
 800c928:	d0c5      	beq.n	800c8b6 <_vfiprintf_r+0x176>
 800c92a:	9105      	str	r1, [sp, #20]
 800c92c:	e7c3      	b.n	800c8b6 <_vfiprintf_r+0x176>
 800c92e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c932:	4604      	mov	r4, r0
 800c934:	2301      	movs	r3, #1
 800c936:	e7f0      	b.n	800c91a <_vfiprintf_r+0x1da>
 800c938:	ab03      	add	r3, sp, #12
 800c93a:	9300      	str	r3, [sp, #0]
 800c93c:	462a      	mov	r2, r5
 800c93e:	4b16      	ldr	r3, [pc, #88]	; (800c998 <_vfiprintf_r+0x258>)
 800c940:	a904      	add	r1, sp, #16
 800c942:	4630      	mov	r0, r6
 800c944:	f7fb f99a 	bl	8007c7c <_printf_float>
 800c948:	4607      	mov	r7, r0
 800c94a:	1c78      	adds	r0, r7, #1
 800c94c:	d1d6      	bne.n	800c8fc <_vfiprintf_r+0x1bc>
 800c94e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c950:	07d9      	lsls	r1, r3, #31
 800c952:	d405      	bmi.n	800c960 <_vfiprintf_r+0x220>
 800c954:	89ab      	ldrh	r3, [r5, #12]
 800c956:	059a      	lsls	r2, r3, #22
 800c958:	d402      	bmi.n	800c960 <_vfiprintf_r+0x220>
 800c95a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c95c:	f7ff fe71 	bl	800c642 <__retarget_lock_release_recursive>
 800c960:	89ab      	ldrh	r3, [r5, #12]
 800c962:	065b      	lsls	r3, r3, #25
 800c964:	f53f af12 	bmi.w	800c78c <_vfiprintf_r+0x4c>
 800c968:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c96a:	e711      	b.n	800c790 <_vfiprintf_r+0x50>
 800c96c:	ab03      	add	r3, sp, #12
 800c96e:	9300      	str	r3, [sp, #0]
 800c970:	462a      	mov	r2, r5
 800c972:	4b09      	ldr	r3, [pc, #36]	; (800c998 <_vfiprintf_r+0x258>)
 800c974:	a904      	add	r1, sp, #16
 800c976:	4630      	mov	r0, r6
 800c978:	f7fb fc24 	bl	80081c4 <_printf_i>
 800c97c:	e7e4      	b.n	800c948 <_vfiprintf_r+0x208>
 800c97e:	bf00      	nop
 800c980:	0800d1ec 	.word	0x0800d1ec
 800c984:	0800d20c 	.word	0x0800d20c
 800c988:	0800d1cc 	.word	0x0800d1cc
 800c98c:	0800d164 	.word	0x0800d164
 800c990:	0800d16e 	.word	0x0800d16e
 800c994:	08007c7d 	.word	0x08007c7d
 800c998:	0800c71d 	.word	0x0800c71d
 800c99c:	0800d16a 	.word	0x0800d16a

0800c9a0 <__swbuf_r>:
 800c9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9a2:	460e      	mov	r6, r1
 800c9a4:	4614      	mov	r4, r2
 800c9a6:	4605      	mov	r5, r0
 800c9a8:	b118      	cbz	r0, 800c9b2 <__swbuf_r+0x12>
 800c9aa:	6983      	ldr	r3, [r0, #24]
 800c9ac:	b90b      	cbnz	r3, 800c9b2 <__swbuf_r+0x12>
 800c9ae:	f7ff fd97 	bl	800c4e0 <__sinit>
 800c9b2:	4b21      	ldr	r3, [pc, #132]	; (800ca38 <__swbuf_r+0x98>)
 800c9b4:	429c      	cmp	r4, r3
 800c9b6:	d12b      	bne.n	800ca10 <__swbuf_r+0x70>
 800c9b8:	686c      	ldr	r4, [r5, #4]
 800c9ba:	69a3      	ldr	r3, [r4, #24]
 800c9bc:	60a3      	str	r3, [r4, #8]
 800c9be:	89a3      	ldrh	r3, [r4, #12]
 800c9c0:	071a      	lsls	r2, r3, #28
 800c9c2:	d52f      	bpl.n	800ca24 <__swbuf_r+0x84>
 800c9c4:	6923      	ldr	r3, [r4, #16]
 800c9c6:	b36b      	cbz	r3, 800ca24 <__swbuf_r+0x84>
 800c9c8:	6923      	ldr	r3, [r4, #16]
 800c9ca:	6820      	ldr	r0, [r4, #0]
 800c9cc:	1ac0      	subs	r0, r0, r3
 800c9ce:	6963      	ldr	r3, [r4, #20]
 800c9d0:	b2f6      	uxtb	r6, r6
 800c9d2:	4283      	cmp	r3, r0
 800c9d4:	4637      	mov	r7, r6
 800c9d6:	dc04      	bgt.n	800c9e2 <__swbuf_r+0x42>
 800c9d8:	4621      	mov	r1, r4
 800c9da:	4628      	mov	r0, r5
 800c9dc:	f7ff fcec 	bl	800c3b8 <_fflush_r>
 800c9e0:	bb30      	cbnz	r0, 800ca30 <__swbuf_r+0x90>
 800c9e2:	68a3      	ldr	r3, [r4, #8]
 800c9e4:	3b01      	subs	r3, #1
 800c9e6:	60a3      	str	r3, [r4, #8]
 800c9e8:	6823      	ldr	r3, [r4, #0]
 800c9ea:	1c5a      	adds	r2, r3, #1
 800c9ec:	6022      	str	r2, [r4, #0]
 800c9ee:	701e      	strb	r6, [r3, #0]
 800c9f0:	6963      	ldr	r3, [r4, #20]
 800c9f2:	3001      	adds	r0, #1
 800c9f4:	4283      	cmp	r3, r0
 800c9f6:	d004      	beq.n	800ca02 <__swbuf_r+0x62>
 800c9f8:	89a3      	ldrh	r3, [r4, #12]
 800c9fa:	07db      	lsls	r3, r3, #31
 800c9fc:	d506      	bpl.n	800ca0c <__swbuf_r+0x6c>
 800c9fe:	2e0a      	cmp	r6, #10
 800ca00:	d104      	bne.n	800ca0c <__swbuf_r+0x6c>
 800ca02:	4621      	mov	r1, r4
 800ca04:	4628      	mov	r0, r5
 800ca06:	f7ff fcd7 	bl	800c3b8 <_fflush_r>
 800ca0a:	b988      	cbnz	r0, 800ca30 <__swbuf_r+0x90>
 800ca0c:	4638      	mov	r0, r7
 800ca0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca10:	4b0a      	ldr	r3, [pc, #40]	; (800ca3c <__swbuf_r+0x9c>)
 800ca12:	429c      	cmp	r4, r3
 800ca14:	d101      	bne.n	800ca1a <__swbuf_r+0x7a>
 800ca16:	68ac      	ldr	r4, [r5, #8]
 800ca18:	e7cf      	b.n	800c9ba <__swbuf_r+0x1a>
 800ca1a:	4b09      	ldr	r3, [pc, #36]	; (800ca40 <__swbuf_r+0xa0>)
 800ca1c:	429c      	cmp	r4, r3
 800ca1e:	bf08      	it	eq
 800ca20:	68ec      	ldreq	r4, [r5, #12]
 800ca22:	e7ca      	b.n	800c9ba <__swbuf_r+0x1a>
 800ca24:	4621      	mov	r1, r4
 800ca26:	4628      	mov	r0, r5
 800ca28:	f000 f80c 	bl	800ca44 <__swsetup_r>
 800ca2c:	2800      	cmp	r0, #0
 800ca2e:	d0cb      	beq.n	800c9c8 <__swbuf_r+0x28>
 800ca30:	f04f 37ff 	mov.w	r7, #4294967295
 800ca34:	e7ea      	b.n	800ca0c <__swbuf_r+0x6c>
 800ca36:	bf00      	nop
 800ca38:	0800d1ec 	.word	0x0800d1ec
 800ca3c:	0800d20c 	.word	0x0800d20c
 800ca40:	0800d1cc 	.word	0x0800d1cc

0800ca44 <__swsetup_r>:
 800ca44:	4b32      	ldr	r3, [pc, #200]	; (800cb10 <__swsetup_r+0xcc>)
 800ca46:	b570      	push	{r4, r5, r6, lr}
 800ca48:	681d      	ldr	r5, [r3, #0]
 800ca4a:	4606      	mov	r6, r0
 800ca4c:	460c      	mov	r4, r1
 800ca4e:	b125      	cbz	r5, 800ca5a <__swsetup_r+0x16>
 800ca50:	69ab      	ldr	r3, [r5, #24]
 800ca52:	b913      	cbnz	r3, 800ca5a <__swsetup_r+0x16>
 800ca54:	4628      	mov	r0, r5
 800ca56:	f7ff fd43 	bl	800c4e0 <__sinit>
 800ca5a:	4b2e      	ldr	r3, [pc, #184]	; (800cb14 <__swsetup_r+0xd0>)
 800ca5c:	429c      	cmp	r4, r3
 800ca5e:	d10f      	bne.n	800ca80 <__swsetup_r+0x3c>
 800ca60:	686c      	ldr	r4, [r5, #4]
 800ca62:	89a3      	ldrh	r3, [r4, #12]
 800ca64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca68:	0719      	lsls	r1, r3, #28
 800ca6a:	d42c      	bmi.n	800cac6 <__swsetup_r+0x82>
 800ca6c:	06dd      	lsls	r5, r3, #27
 800ca6e:	d411      	bmi.n	800ca94 <__swsetup_r+0x50>
 800ca70:	2309      	movs	r3, #9
 800ca72:	6033      	str	r3, [r6, #0]
 800ca74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ca78:	81a3      	strh	r3, [r4, #12]
 800ca7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ca7e:	e03e      	b.n	800cafe <__swsetup_r+0xba>
 800ca80:	4b25      	ldr	r3, [pc, #148]	; (800cb18 <__swsetup_r+0xd4>)
 800ca82:	429c      	cmp	r4, r3
 800ca84:	d101      	bne.n	800ca8a <__swsetup_r+0x46>
 800ca86:	68ac      	ldr	r4, [r5, #8]
 800ca88:	e7eb      	b.n	800ca62 <__swsetup_r+0x1e>
 800ca8a:	4b24      	ldr	r3, [pc, #144]	; (800cb1c <__swsetup_r+0xd8>)
 800ca8c:	429c      	cmp	r4, r3
 800ca8e:	bf08      	it	eq
 800ca90:	68ec      	ldreq	r4, [r5, #12]
 800ca92:	e7e6      	b.n	800ca62 <__swsetup_r+0x1e>
 800ca94:	0758      	lsls	r0, r3, #29
 800ca96:	d512      	bpl.n	800cabe <__swsetup_r+0x7a>
 800ca98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca9a:	b141      	cbz	r1, 800caae <__swsetup_r+0x6a>
 800ca9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800caa0:	4299      	cmp	r1, r3
 800caa2:	d002      	beq.n	800caaa <__swsetup_r+0x66>
 800caa4:	4630      	mov	r0, r6
 800caa6:	f7fe fd4f 	bl	800b548 <_free_r>
 800caaa:	2300      	movs	r3, #0
 800caac:	6363      	str	r3, [r4, #52]	; 0x34
 800caae:	89a3      	ldrh	r3, [r4, #12]
 800cab0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cab4:	81a3      	strh	r3, [r4, #12]
 800cab6:	2300      	movs	r3, #0
 800cab8:	6063      	str	r3, [r4, #4]
 800caba:	6923      	ldr	r3, [r4, #16]
 800cabc:	6023      	str	r3, [r4, #0]
 800cabe:	89a3      	ldrh	r3, [r4, #12]
 800cac0:	f043 0308 	orr.w	r3, r3, #8
 800cac4:	81a3      	strh	r3, [r4, #12]
 800cac6:	6923      	ldr	r3, [r4, #16]
 800cac8:	b94b      	cbnz	r3, 800cade <__swsetup_r+0x9a>
 800caca:	89a3      	ldrh	r3, [r4, #12]
 800cacc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cad4:	d003      	beq.n	800cade <__swsetup_r+0x9a>
 800cad6:	4621      	mov	r1, r4
 800cad8:	4630      	mov	r0, r6
 800cada:	f000 f84d 	bl	800cb78 <__smakebuf_r>
 800cade:	89a0      	ldrh	r0, [r4, #12]
 800cae0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cae4:	f010 0301 	ands.w	r3, r0, #1
 800cae8:	d00a      	beq.n	800cb00 <__swsetup_r+0xbc>
 800caea:	2300      	movs	r3, #0
 800caec:	60a3      	str	r3, [r4, #8]
 800caee:	6963      	ldr	r3, [r4, #20]
 800caf0:	425b      	negs	r3, r3
 800caf2:	61a3      	str	r3, [r4, #24]
 800caf4:	6923      	ldr	r3, [r4, #16]
 800caf6:	b943      	cbnz	r3, 800cb0a <__swsetup_r+0xc6>
 800caf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cafc:	d1ba      	bne.n	800ca74 <__swsetup_r+0x30>
 800cafe:	bd70      	pop	{r4, r5, r6, pc}
 800cb00:	0781      	lsls	r1, r0, #30
 800cb02:	bf58      	it	pl
 800cb04:	6963      	ldrpl	r3, [r4, #20]
 800cb06:	60a3      	str	r3, [r4, #8]
 800cb08:	e7f4      	b.n	800caf4 <__swsetup_r+0xb0>
 800cb0a:	2000      	movs	r0, #0
 800cb0c:	e7f7      	b.n	800cafe <__swsetup_r+0xba>
 800cb0e:	bf00      	nop
 800cb10:	200000f0 	.word	0x200000f0
 800cb14:	0800d1ec 	.word	0x0800d1ec
 800cb18:	0800d20c 	.word	0x0800d20c
 800cb1c:	0800d1cc 	.word	0x0800d1cc

0800cb20 <abort>:
 800cb20:	b508      	push	{r3, lr}
 800cb22:	2006      	movs	r0, #6
 800cb24:	f000 f898 	bl	800cc58 <raise>
 800cb28:	2001      	movs	r0, #1
 800cb2a:	f7f6 f98b 	bl	8002e44 <_exit>

0800cb2e <__swhatbuf_r>:
 800cb2e:	b570      	push	{r4, r5, r6, lr}
 800cb30:	460e      	mov	r6, r1
 800cb32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb36:	2900      	cmp	r1, #0
 800cb38:	b096      	sub	sp, #88	; 0x58
 800cb3a:	4614      	mov	r4, r2
 800cb3c:	461d      	mov	r5, r3
 800cb3e:	da08      	bge.n	800cb52 <__swhatbuf_r+0x24>
 800cb40:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cb44:	2200      	movs	r2, #0
 800cb46:	602a      	str	r2, [r5, #0]
 800cb48:	061a      	lsls	r2, r3, #24
 800cb4a:	d410      	bmi.n	800cb6e <__swhatbuf_r+0x40>
 800cb4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb50:	e00e      	b.n	800cb70 <__swhatbuf_r+0x42>
 800cb52:	466a      	mov	r2, sp
 800cb54:	f000 f89c 	bl	800cc90 <_fstat_r>
 800cb58:	2800      	cmp	r0, #0
 800cb5a:	dbf1      	blt.n	800cb40 <__swhatbuf_r+0x12>
 800cb5c:	9a01      	ldr	r2, [sp, #4]
 800cb5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cb62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cb66:	425a      	negs	r2, r3
 800cb68:	415a      	adcs	r2, r3
 800cb6a:	602a      	str	r2, [r5, #0]
 800cb6c:	e7ee      	b.n	800cb4c <__swhatbuf_r+0x1e>
 800cb6e:	2340      	movs	r3, #64	; 0x40
 800cb70:	2000      	movs	r0, #0
 800cb72:	6023      	str	r3, [r4, #0]
 800cb74:	b016      	add	sp, #88	; 0x58
 800cb76:	bd70      	pop	{r4, r5, r6, pc}

0800cb78 <__smakebuf_r>:
 800cb78:	898b      	ldrh	r3, [r1, #12]
 800cb7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb7c:	079d      	lsls	r5, r3, #30
 800cb7e:	4606      	mov	r6, r0
 800cb80:	460c      	mov	r4, r1
 800cb82:	d507      	bpl.n	800cb94 <__smakebuf_r+0x1c>
 800cb84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cb88:	6023      	str	r3, [r4, #0]
 800cb8a:	6123      	str	r3, [r4, #16]
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	6163      	str	r3, [r4, #20]
 800cb90:	b002      	add	sp, #8
 800cb92:	bd70      	pop	{r4, r5, r6, pc}
 800cb94:	ab01      	add	r3, sp, #4
 800cb96:	466a      	mov	r2, sp
 800cb98:	f7ff ffc9 	bl	800cb2e <__swhatbuf_r>
 800cb9c:	9900      	ldr	r1, [sp, #0]
 800cb9e:	4605      	mov	r5, r0
 800cba0:	4630      	mov	r0, r6
 800cba2:	f7fe fd3d 	bl	800b620 <_malloc_r>
 800cba6:	b948      	cbnz	r0, 800cbbc <__smakebuf_r+0x44>
 800cba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbac:	059a      	lsls	r2, r3, #22
 800cbae:	d4ef      	bmi.n	800cb90 <__smakebuf_r+0x18>
 800cbb0:	f023 0303 	bic.w	r3, r3, #3
 800cbb4:	f043 0302 	orr.w	r3, r3, #2
 800cbb8:	81a3      	strh	r3, [r4, #12]
 800cbba:	e7e3      	b.n	800cb84 <__smakebuf_r+0xc>
 800cbbc:	4b0d      	ldr	r3, [pc, #52]	; (800cbf4 <__smakebuf_r+0x7c>)
 800cbbe:	62b3      	str	r3, [r6, #40]	; 0x28
 800cbc0:	89a3      	ldrh	r3, [r4, #12]
 800cbc2:	6020      	str	r0, [r4, #0]
 800cbc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbc8:	81a3      	strh	r3, [r4, #12]
 800cbca:	9b00      	ldr	r3, [sp, #0]
 800cbcc:	6163      	str	r3, [r4, #20]
 800cbce:	9b01      	ldr	r3, [sp, #4]
 800cbd0:	6120      	str	r0, [r4, #16]
 800cbd2:	b15b      	cbz	r3, 800cbec <__smakebuf_r+0x74>
 800cbd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbd8:	4630      	mov	r0, r6
 800cbda:	f000 f86b 	bl	800ccb4 <_isatty_r>
 800cbde:	b128      	cbz	r0, 800cbec <__smakebuf_r+0x74>
 800cbe0:	89a3      	ldrh	r3, [r4, #12]
 800cbe2:	f023 0303 	bic.w	r3, r3, #3
 800cbe6:	f043 0301 	orr.w	r3, r3, #1
 800cbea:	81a3      	strh	r3, [r4, #12]
 800cbec:	89a0      	ldrh	r0, [r4, #12]
 800cbee:	4305      	orrs	r5, r0
 800cbf0:	81a5      	strh	r5, [r4, #12]
 800cbf2:	e7cd      	b.n	800cb90 <__smakebuf_r+0x18>
 800cbf4:	0800c479 	.word	0x0800c479

0800cbf8 <_malloc_usable_size_r>:
 800cbf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbfc:	1f18      	subs	r0, r3, #4
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	bfbc      	itt	lt
 800cc02:	580b      	ldrlt	r3, [r1, r0]
 800cc04:	18c0      	addlt	r0, r0, r3
 800cc06:	4770      	bx	lr

0800cc08 <_raise_r>:
 800cc08:	291f      	cmp	r1, #31
 800cc0a:	b538      	push	{r3, r4, r5, lr}
 800cc0c:	4604      	mov	r4, r0
 800cc0e:	460d      	mov	r5, r1
 800cc10:	d904      	bls.n	800cc1c <_raise_r+0x14>
 800cc12:	2316      	movs	r3, #22
 800cc14:	6003      	str	r3, [r0, #0]
 800cc16:	f04f 30ff 	mov.w	r0, #4294967295
 800cc1a:	bd38      	pop	{r3, r4, r5, pc}
 800cc1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cc1e:	b112      	cbz	r2, 800cc26 <_raise_r+0x1e>
 800cc20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc24:	b94b      	cbnz	r3, 800cc3a <_raise_r+0x32>
 800cc26:	4620      	mov	r0, r4
 800cc28:	f000 f830 	bl	800cc8c <_getpid_r>
 800cc2c:	462a      	mov	r2, r5
 800cc2e:	4601      	mov	r1, r0
 800cc30:	4620      	mov	r0, r4
 800cc32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc36:	f000 b817 	b.w	800cc68 <_kill_r>
 800cc3a:	2b01      	cmp	r3, #1
 800cc3c:	d00a      	beq.n	800cc54 <_raise_r+0x4c>
 800cc3e:	1c59      	adds	r1, r3, #1
 800cc40:	d103      	bne.n	800cc4a <_raise_r+0x42>
 800cc42:	2316      	movs	r3, #22
 800cc44:	6003      	str	r3, [r0, #0]
 800cc46:	2001      	movs	r0, #1
 800cc48:	e7e7      	b.n	800cc1a <_raise_r+0x12>
 800cc4a:	2400      	movs	r4, #0
 800cc4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cc50:	4628      	mov	r0, r5
 800cc52:	4798      	blx	r3
 800cc54:	2000      	movs	r0, #0
 800cc56:	e7e0      	b.n	800cc1a <_raise_r+0x12>

0800cc58 <raise>:
 800cc58:	4b02      	ldr	r3, [pc, #8]	; (800cc64 <raise+0xc>)
 800cc5a:	4601      	mov	r1, r0
 800cc5c:	6818      	ldr	r0, [r3, #0]
 800cc5e:	f7ff bfd3 	b.w	800cc08 <_raise_r>
 800cc62:	bf00      	nop
 800cc64:	200000f0 	.word	0x200000f0

0800cc68 <_kill_r>:
 800cc68:	b538      	push	{r3, r4, r5, lr}
 800cc6a:	4d07      	ldr	r5, [pc, #28]	; (800cc88 <_kill_r+0x20>)
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	4604      	mov	r4, r0
 800cc70:	4608      	mov	r0, r1
 800cc72:	4611      	mov	r1, r2
 800cc74:	602b      	str	r3, [r5, #0]
 800cc76:	f7f6 f8d5 	bl	8002e24 <_kill>
 800cc7a:	1c43      	adds	r3, r0, #1
 800cc7c:	d102      	bne.n	800cc84 <_kill_r+0x1c>
 800cc7e:	682b      	ldr	r3, [r5, #0]
 800cc80:	b103      	cbz	r3, 800cc84 <_kill_r+0x1c>
 800cc82:	6023      	str	r3, [r4, #0]
 800cc84:	bd38      	pop	{r3, r4, r5, pc}
 800cc86:	bf00      	nop
 800cc88:	20000920 	.word	0x20000920

0800cc8c <_getpid_r>:
 800cc8c:	f7f6 b8c2 	b.w	8002e14 <_getpid>

0800cc90 <_fstat_r>:
 800cc90:	b538      	push	{r3, r4, r5, lr}
 800cc92:	4d07      	ldr	r5, [pc, #28]	; (800ccb0 <_fstat_r+0x20>)
 800cc94:	2300      	movs	r3, #0
 800cc96:	4604      	mov	r4, r0
 800cc98:	4608      	mov	r0, r1
 800cc9a:	4611      	mov	r1, r2
 800cc9c:	602b      	str	r3, [r5, #0]
 800cc9e:	f7f6 f920 	bl	8002ee2 <_fstat>
 800cca2:	1c43      	adds	r3, r0, #1
 800cca4:	d102      	bne.n	800ccac <_fstat_r+0x1c>
 800cca6:	682b      	ldr	r3, [r5, #0]
 800cca8:	b103      	cbz	r3, 800ccac <_fstat_r+0x1c>
 800ccaa:	6023      	str	r3, [r4, #0]
 800ccac:	bd38      	pop	{r3, r4, r5, pc}
 800ccae:	bf00      	nop
 800ccb0:	20000920 	.word	0x20000920

0800ccb4 <_isatty_r>:
 800ccb4:	b538      	push	{r3, r4, r5, lr}
 800ccb6:	4d06      	ldr	r5, [pc, #24]	; (800ccd0 <_isatty_r+0x1c>)
 800ccb8:	2300      	movs	r3, #0
 800ccba:	4604      	mov	r4, r0
 800ccbc:	4608      	mov	r0, r1
 800ccbe:	602b      	str	r3, [r5, #0]
 800ccc0:	f7f6 f91f 	bl	8002f02 <_isatty>
 800ccc4:	1c43      	adds	r3, r0, #1
 800ccc6:	d102      	bne.n	800ccce <_isatty_r+0x1a>
 800ccc8:	682b      	ldr	r3, [r5, #0]
 800ccca:	b103      	cbz	r3, 800ccce <_isatty_r+0x1a>
 800cccc:	6023      	str	r3, [r4, #0]
 800ccce:	bd38      	pop	{r3, r4, r5, pc}
 800ccd0:	20000920 	.word	0x20000920

0800ccd4 <_init>:
 800ccd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccd6:	bf00      	nop
 800ccd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccda:	bc08      	pop	{r3}
 800ccdc:	469e      	mov	lr, r3
 800ccde:	4770      	bx	lr

0800cce0 <_fini>:
 800cce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cce2:	bf00      	nop
 800cce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cce6:	bc08      	pop	{r3}
 800cce8:	469e      	mov	lr, r3
 800ccea:	4770      	bx	lr
