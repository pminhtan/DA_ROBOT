
Robot_4D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000caec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  0800cc80  0800cc80  0001cc80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1bc  0800d1bc  000202c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1bc  0800d1bc  0001d1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1c4  0800d1c4  000202c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1c4  0800d1c4  0001d1c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1c8  0800d1c8  0001d1c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c4  20000000  0800d1cc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202c4  2**0
                  CONTENTS
 10 .bss          00000664  200002c4  200002c4  000202c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000928  20000928  000202c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010b42  00000000  00000000  000202f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002389  00000000  00000000  00030e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e80  00000000  00000000  000331c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d98  00000000  00000000  00034040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000222a2  00000000  00000000  00034dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010841  00000000  00000000  0005707a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd581  00000000  00000000  000678bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00134e3c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005524  00000000  00000000  00134e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cc64 	.word	0x0800cc64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800cc64 	.word	0x0800cc64

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_frsub>:
 8000c88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c8c:	e002      	b.n	8000c94 <__addsf3>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_fsub>:
 8000c90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c94 <__addsf3>:
 8000c94:	0042      	lsls	r2, r0, #1
 8000c96:	bf1f      	itttt	ne
 8000c98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c9c:	ea92 0f03 	teqne	r2, r3
 8000ca0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ca4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca8:	d06a      	beq.n	8000d80 <__addsf3+0xec>
 8000caa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cb2:	bfc1      	itttt	gt
 8000cb4:	18d2      	addgt	r2, r2, r3
 8000cb6:	4041      	eorgt	r1, r0
 8000cb8:	4048      	eorgt	r0, r1
 8000cba:	4041      	eorgt	r1, r0
 8000cbc:	bfb8      	it	lt
 8000cbe:	425b      	neglt	r3, r3
 8000cc0:	2b19      	cmp	r3, #25
 8000cc2:	bf88      	it	hi
 8000cc4:	4770      	bxhi	lr
 8000cc6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cd2:	bf18      	it	ne
 8000cd4:	4240      	negne	r0, r0
 8000cd6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cda:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cde:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4249      	negne	r1, r1
 8000ce6:	ea92 0f03 	teq	r2, r3
 8000cea:	d03f      	beq.n	8000d6c <__addsf3+0xd8>
 8000cec:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cf4:	eb10 000c 	adds.w	r0, r0, ip
 8000cf8:	f1c3 0320 	rsb	r3, r3, #32
 8000cfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000d00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__addsf3+0x78>
 8000d06:	4249      	negs	r1, r1
 8000d08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d10:	d313      	bcc.n	8000d3a <__addsf3+0xa6>
 8000d12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d16:	d306      	bcc.n	8000d26 <__addsf3+0x92>
 8000d18:	0840      	lsrs	r0, r0, #1
 8000d1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d1e:	f102 0201 	add.w	r2, r2, #1
 8000d22:	2afe      	cmp	r2, #254	; 0xfe
 8000d24:	d251      	bcs.n	8000dca <__addsf3+0x136>
 8000d26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2e:	bf08      	it	eq
 8000d30:	f020 0001 	biceq.w	r0, r0, #1
 8000d34:	ea40 0003 	orr.w	r0, r0, r3
 8000d38:	4770      	bx	lr
 8000d3a:	0049      	lsls	r1, r1, #1
 8000d3c:	eb40 0000 	adc.w	r0, r0, r0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	bf28      	it	cs
 8000d44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d48:	d2ed      	bcs.n	8000d26 <__addsf3+0x92>
 8000d4a:	fab0 fc80 	clz	ip, r0
 8000d4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d52:	ebb2 020c 	subs.w	r2, r2, ip
 8000d56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d5a:	bfaa      	itet	ge
 8000d5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d60:	4252      	neglt	r2, r2
 8000d62:	4318      	orrge	r0, r3
 8000d64:	bfbc      	itt	lt
 8000d66:	40d0      	lsrlt	r0, r2
 8000d68:	4318      	orrlt	r0, r3
 8000d6a:	4770      	bx	lr
 8000d6c:	f092 0f00 	teq	r2, #0
 8000d70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d74:	bf06      	itte	eq
 8000d76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d7a:	3201      	addeq	r2, #1
 8000d7c:	3b01      	subne	r3, #1
 8000d7e:	e7b5      	b.n	8000cec <__addsf3+0x58>
 8000d80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d88:	bf18      	it	ne
 8000d8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d8e:	d021      	beq.n	8000dd4 <__addsf3+0x140>
 8000d90:	ea92 0f03 	teq	r2, r3
 8000d94:	d004      	beq.n	8000da0 <__addsf3+0x10c>
 8000d96:	f092 0f00 	teq	r2, #0
 8000d9a:	bf08      	it	eq
 8000d9c:	4608      	moveq	r0, r1
 8000d9e:	4770      	bx	lr
 8000da0:	ea90 0f01 	teq	r0, r1
 8000da4:	bf1c      	itt	ne
 8000da6:	2000      	movne	r0, #0
 8000da8:	4770      	bxne	lr
 8000daa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dae:	d104      	bne.n	8000dba <__addsf3+0x126>
 8000db0:	0040      	lsls	r0, r0, #1
 8000db2:	bf28      	it	cs
 8000db4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dbe:	bf3c      	itt	cc
 8000dc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dc4:	4770      	bxcc	lr
 8000dc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dd8:	bf16      	itet	ne
 8000dda:	4608      	movne	r0, r1
 8000ddc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de0:	4601      	movne	r1, r0
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	bf06      	itte	eq
 8000de6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dea:	ea90 0f01 	teqeq	r0, r1
 8000dee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_ui2f>:
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e004      	b.n	8000e04 <__aeabi_i2f+0x8>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_i2f>:
 8000dfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e00:	bf48      	it	mi
 8000e02:	4240      	negmi	r0, r0
 8000e04:	ea5f 0c00 	movs.w	ip, r0
 8000e08:	bf08      	it	eq
 8000e0a:	4770      	bxeq	lr
 8000e0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e10:	4601      	mov	r1, r0
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	e01c      	b.n	8000e52 <__aeabi_l2f+0x2a>

08000e18 <__aeabi_ul2f>:
 8000e18:	ea50 0201 	orrs.w	r2, r0, r1
 8000e1c:	bf08      	it	eq
 8000e1e:	4770      	bxeq	lr
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e00a      	b.n	8000e3c <__aeabi_l2f+0x14>
 8000e26:	bf00      	nop

08000e28 <__aeabi_l2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e34:	d502      	bpl.n	8000e3c <__aeabi_l2f+0x14>
 8000e36:	4240      	negs	r0, r0
 8000e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3c:	ea5f 0c01 	movs.w	ip, r1
 8000e40:	bf02      	ittt	eq
 8000e42:	4684      	moveq	ip, r0
 8000e44:	4601      	moveq	r1, r0
 8000e46:	2000      	moveq	r0, #0
 8000e48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e4c:	bf08      	it	eq
 8000e4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e56:	fabc f28c 	clz	r2, ip
 8000e5a:	3a08      	subs	r2, #8
 8000e5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e60:	db10      	blt.n	8000e84 <__aeabi_l2f+0x5c>
 8000e62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e66:	4463      	add	r3, ip
 8000e68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6c:	f1c2 0220 	rsb	r2, r2, #32
 8000e70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e74:	fa20 f202 	lsr.w	r2, r0, r2
 8000e78:	eb43 0002 	adc.w	r0, r3, r2
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f102 0220 	add.w	r2, r2, #32
 8000e88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e94:	fa21 f202 	lsr.w	r2, r1, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_uldivmod>:
 8000ea4:	b953      	cbnz	r3, 8000ebc <__aeabi_uldivmod+0x18>
 8000ea6:	b94a      	cbnz	r2, 8000ebc <__aeabi_uldivmod+0x18>
 8000ea8:	2900      	cmp	r1, #0
 8000eaa:	bf08      	it	eq
 8000eac:	2800      	cmpeq	r0, #0
 8000eae:	bf1c      	itt	ne
 8000eb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000eb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000eb8:	f000 b9aa 	b.w	8001210 <__aeabi_idiv0>
 8000ebc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ec0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ec4:	f000 f83c 	bl	8000f40 <__udivmoddi4>
 8000ec8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ecc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ed0:	b004      	add	sp, #16
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_d2lz>:
 8000ed4:	b538      	push	{r3, r4, r5, lr}
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2300      	movs	r3, #0
 8000eda:	4604      	mov	r4, r0
 8000edc:	460d      	mov	r5, r1
 8000ede:	f7ff fdfd 	bl	8000adc <__aeabi_dcmplt>
 8000ee2:	b928      	cbnz	r0, 8000ef0 <__aeabi_d2lz+0x1c>
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	4629      	mov	r1, r5
 8000ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000eec:	f000 b80a 	b.w	8000f04 <__aeabi_d2ulz>
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000ef6:	f000 f805 	bl	8000f04 <__aeabi_d2ulz>
 8000efa:	4240      	negs	r0, r0
 8000efc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f00:	bd38      	pop	{r3, r4, r5, pc}
 8000f02:	bf00      	nop

08000f04 <__aeabi_d2ulz>:
 8000f04:	b5d0      	push	{r4, r6, r7, lr}
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <__aeabi_d2ulz+0x34>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	4606      	mov	r6, r0
 8000f0c:	460f      	mov	r7, r1
 8000f0e:	f7ff fb73 	bl	80005f8 <__aeabi_dmul>
 8000f12:	f7ff fe49 	bl	8000ba8 <__aeabi_d2uiz>
 8000f16:	4604      	mov	r4, r0
 8000f18:	f7ff faf4 	bl	8000504 <__aeabi_ui2d>
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <__aeabi_d2ulz+0x38>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f7ff fb6a 	bl	80005f8 <__aeabi_dmul>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4630      	mov	r0, r6
 8000f2a:	4639      	mov	r1, r7
 8000f2c:	f7ff f9ac 	bl	8000288 <__aeabi_dsub>
 8000f30:	f7ff fe3a 	bl	8000ba8 <__aeabi_d2uiz>
 8000f34:	4621      	mov	r1, r4
 8000f36:	bdd0      	pop	{r4, r6, r7, pc}
 8000f38:	3df00000 	.word	0x3df00000
 8000f3c:	41f00000 	.word	0x41f00000

08000f40 <__udivmoddi4>:
 8000f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f44:	9d08      	ldr	r5, [sp, #32]
 8000f46:	4604      	mov	r4, r0
 8000f48:	468e      	mov	lr, r1
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d14d      	bne.n	8000fea <__udivmoddi4+0xaa>
 8000f4e:	428a      	cmp	r2, r1
 8000f50:	4694      	mov	ip, r2
 8000f52:	d969      	bls.n	8001028 <__udivmoddi4+0xe8>
 8000f54:	fab2 f282 	clz	r2, r2
 8000f58:	b152      	cbz	r2, 8000f70 <__udivmoddi4+0x30>
 8000f5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000f5e:	f1c2 0120 	rsb	r1, r2, #32
 8000f62:	fa20 f101 	lsr.w	r1, r0, r1
 8000f66:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f6a:	ea41 0e03 	orr.w	lr, r1, r3
 8000f6e:	4094      	lsls	r4, r2
 8000f70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f74:	0c21      	lsrs	r1, r4, #16
 8000f76:	fbbe f6f8 	udiv	r6, lr, r8
 8000f7a:	fa1f f78c 	uxth.w	r7, ip
 8000f7e:	fb08 e316 	mls	r3, r8, r6, lr
 8000f82:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000f86:	fb06 f107 	mul.w	r1, r6, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d90a      	bls.n	8000fa4 <__udivmoddi4+0x64>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f96:	f080 811f 	bcs.w	80011d8 <__udivmoddi4+0x298>
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	f240 811c 	bls.w	80011d8 <__udivmoddi4+0x298>
 8000fa0:	3e02      	subs	r6, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1a5b      	subs	r3, r3, r1
 8000fa6:	b2a4      	uxth	r4, r4
 8000fa8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fac:	fb08 3310 	mls	r3, r8, r0, r3
 8000fb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb4:	fb00 f707 	mul.w	r7, r0, r7
 8000fb8:	42a7      	cmp	r7, r4
 8000fba:	d90a      	bls.n	8000fd2 <__udivmoddi4+0x92>
 8000fbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fc4:	f080 810a 	bcs.w	80011dc <__udivmoddi4+0x29c>
 8000fc8:	42a7      	cmp	r7, r4
 8000fca:	f240 8107 	bls.w	80011dc <__udivmoddi4+0x29c>
 8000fce:	4464      	add	r4, ip
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000fd6:	1be4      	subs	r4, r4, r7
 8000fd8:	2600      	movs	r6, #0
 8000fda:	b11d      	cbz	r5, 8000fe4 <__udivmoddi4+0xa4>
 8000fdc:	40d4      	lsrs	r4, r2
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e9c5 4300 	strd	r4, r3, [r5]
 8000fe4:	4631      	mov	r1, r6
 8000fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fea:	428b      	cmp	r3, r1
 8000fec:	d909      	bls.n	8001002 <__udivmoddi4+0xc2>
 8000fee:	2d00      	cmp	r5, #0
 8000ff0:	f000 80ef 	beq.w	80011d2 <__udivmoddi4+0x292>
 8000ff4:	2600      	movs	r6, #0
 8000ff6:	e9c5 0100 	strd	r0, r1, [r5]
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	4631      	mov	r1, r6
 8000ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001002:	fab3 f683 	clz	r6, r3
 8001006:	2e00      	cmp	r6, #0
 8001008:	d14a      	bne.n	80010a0 <__udivmoddi4+0x160>
 800100a:	428b      	cmp	r3, r1
 800100c:	d302      	bcc.n	8001014 <__udivmoddi4+0xd4>
 800100e:	4282      	cmp	r2, r0
 8001010:	f200 80f9 	bhi.w	8001206 <__udivmoddi4+0x2c6>
 8001014:	1a84      	subs	r4, r0, r2
 8001016:	eb61 0303 	sbc.w	r3, r1, r3
 800101a:	2001      	movs	r0, #1
 800101c:	469e      	mov	lr, r3
 800101e:	2d00      	cmp	r5, #0
 8001020:	d0e0      	beq.n	8000fe4 <__udivmoddi4+0xa4>
 8001022:	e9c5 4e00 	strd	r4, lr, [r5]
 8001026:	e7dd      	b.n	8000fe4 <__udivmoddi4+0xa4>
 8001028:	b902      	cbnz	r2, 800102c <__udivmoddi4+0xec>
 800102a:	deff      	udf	#255	; 0xff
 800102c:	fab2 f282 	clz	r2, r2
 8001030:	2a00      	cmp	r2, #0
 8001032:	f040 8092 	bne.w	800115a <__udivmoddi4+0x21a>
 8001036:	eba1 010c 	sub.w	r1, r1, ip
 800103a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800103e:	fa1f fe8c 	uxth.w	lr, ip
 8001042:	2601      	movs	r6, #1
 8001044:	0c20      	lsrs	r0, r4, #16
 8001046:	fbb1 f3f7 	udiv	r3, r1, r7
 800104a:	fb07 1113 	mls	r1, r7, r3, r1
 800104e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001052:	fb0e f003 	mul.w	r0, lr, r3
 8001056:	4288      	cmp	r0, r1
 8001058:	d908      	bls.n	800106c <__udivmoddi4+0x12c>
 800105a:	eb1c 0101 	adds.w	r1, ip, r1
 800105e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001062:	d202      	bcs.n	800106a <__udivmoddi4+0x12a>
 8001064:	4288      	cmp	r0, r1
 8001066:	f200 80cb 	bhi.w	8001200 <__udivmoddi4+0x2c0>
 800106a:	4643      	mov	r3, r8
 800106c:	1a09      	subs	r1, r1, r0
 800106e:	b2a4      	uxth	r4, r4
 8001070:	fbb1 f0f7 	udiv	r0, r1, r7
 8001074:	fb07 1110 	mls	r1, r7, r0, r1
 8001078:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800107c:	fb0e fe00 	mul.w	lr, lr, r0
 8001080:	45a6      	cmp	lr, r4
 8001082:	d908      	bls.n	8001096 <__udivmoddi4+0x156>
 8001084:	eb1c 0404 	adds.w	r4, ip, r4
 8001088:	f100 31ff 	add.w	r1, r0, #4294967295
 800108c:	d202      	bcs.n	8001094 <__udivmoddi4+0x154>
 800108e:	45a6      	cmp	lr, r4
 8001090:	f200 80bb 	bhi.w	800120a <__udivmoddi4+0x2ca>
 8001094:	4608      	mov	r0, r1
 8001096:	eba4 040e 	sub.w	r4, r4, lr
 800109a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800109e:	e79c      	b.n	8000fda <__udivmoddi4+0x9a>
 80010a0:	f1c6 0720 	rsb	r7, r6, #32
 80010a4:	40b3      	lsls	r3, r6
 80010a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80010aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80010ae:	fa20 f407 	lsr.w	r4, r0, r7
 80010b2:	fa01 f306 	lsl.w	r3, r1, r6
 80010b6:	431c      	orrs	r4, r3
 80010b8:	40f9      	lsrs	r1, r7
 80010ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80010be:	fa00 f306 	lsl.w	r3, r0, r6
 80010c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80010c6:	0c20      	lsrs	r0, r4, #16
 80010c8:	fa1f fe8c 	uxth.w	lr, ip
 80010cc:	fb09 1118 	mls	r1, r9, r8, r1
 80010d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010d4:	fb08 f00e 	mul.w	r0, r8, lr
 80010d8:	4288      	cmp	r0, r1
 80010da:	fa02 f206 	lsl.w	r2, r2, r6
 80010de:	d90b      	bls.n	80010f8 <__udivmoddi4+0x1b8>
 80010e0:	eb1c 0101 	adds.w	r1, ip, r1
 80010e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80010e8:	f080 8088 	bcs.w	80011fc <__udivmoddi4+0x2bc>
 80010ec:	4288      	cmp	r0, r1
 80010ee:	f240 8085 	bls.w	80011fc <__udivmoddi4+0x2bc>
 80010f2:	f1a8 0802 	sub.w	r8, r8, #2
 80010f6:	4461      	add	r1, ip
 80010f8:	1a09      	subs	r1, r1, r0
 80010fa:	b2a4      	uxth	r4, r4
 80010fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8001100:	fb09 1110 	mls	r1, r9, r0, r1
 8001104:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001108:	fb00 fe0e 	mul.w	lr, r0, lr
 800110c:	458e      	cmp	lr, r1
 800110e:	d908      	bls.n	8001122 <__udivmoddi4+0x1e2>
 8001110:	eb1c 0101 	adds.w	r1, ip, r1
 8001114:	f100 34ff 	add.w	r4, r0, #4294967295
 8001118:	d26c      	bcs.n	80011f4 <__udivmoddi4+0x2b4>
 800111a:	458e      	cmp	lr, r1
 800111c:	d96a      	bls.n	80011f4 <__udivmoddi4+0x2b4>
 800111e:	3802      	subs	r0, #2
 8001120:	4461      	add	r1, ip
 8001122:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001126:	fba0 9402 	umull	r9, r4, r0, r2
 800112a:	eba1 010e 	sub.w	r1, r1, lr
 800112e:	42a1      	cmp	r1, r4
 8001130:	46c8      	mov	r8, r9
 8001132:	46a6      	mov	lr, r4
 8001134:	d356      	bcc.n	80011e4 <__udivmoddi4+0x2a4>
 8001136:	d053      	beq.n	80011e0 <__udivmoddi4+0x2a0>
 8001138:	b15d      	cbz	r5, 8001152 <__udivmoddi4+0x212>
 800113a:	ebb3 0208 	subs.w	r2, r3, r8
 800113e:	eb61 010e 	sbc.w	r1, r1, lr
 8001142:	fa01 f707 	lsl.w	r7, r1, r7
 8001146:	fa22 f306 	lsr.w	r3, r2, r6
 800114a:	40f1      	lsrs	r1, r6
 800114c:	431f      	orrs	r7, r3
 800114e:	e9c5 7100 	strd	r7, r1, [r5]
 8001152:	2600      	movs	r6, #0
 8001154:	4631      	mov	r1, r6
 8001156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800115a:	f1c2 0320 	rsb	r3, r2, #32
 800115e:	40d8      	lsrs	r0, r3
 8001160:	fa0c fc02 	lsl.w	ip, ip, r2
 8001164:	fa21 f303 	lsr.w	r3, r1, r3
 8001168:	4091      	lsls	r1, r2
 800116a:	4301      	orrs	r1, r0
 800116c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001170:	fa1f fe8c 	uxth.w	lr, ip
 8001174:	fbb3 f0f7 	udiv	r0, r3, r7
 8001178:	fb07 3610 	mls	r6, r7, r0, r3
 800117c:	0c0b      	lsrs	r3, r1, #16
 800117e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001182:	fb00 f60e 	mul.w	r6, r0, lr
 8001186:	429e      	cmp	r6, r3
 8001188:	fa04 f402 	lsl.w	r4, r4, r2
 800118c:	d908      	bls.n	80011a0 <__udivmoddi4+0x260>
 800118e:	eb1c 0303 	adds.w	r3, ip, r3
 8001192:	f100 38ff 	add.w	r8, r0, #4294967295
 8001196:	d22f      	bcs.n	80011f8 <__udivmoddi4+0x2b8>
 8001198:	429e      	cmp	r6, r3
 800119a:	d92d      	bls.n	80011f8 <__udivmoddi4+0x2b8>
 800119c:	3802      	subs	r0, #2
 800119e:	4463      	add	r3, ip
 80011a0:	1b9b      	subs	r3, r3, r6
 80011a2:	b289      	uxth	r1, r1
 80011a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80011a8:	fb07 3316 	mls	r3, r7, r6, r3
 80011ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80011b0:	fb06 f30e 	mul.w	r3, r6, lr
 80011b4:	428b      	cmp	r3, r1
 80011b6:	d908      	bls.n	80011ca <__udivmoddi4+0x28a>
 80011b8:	eb1c 0101 	adds.w	r1, ip, r1
 80011bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80011c0:	d216      	bcs.n	80011f0 <__udivmoddi4+0x2b0>
 80011c2:	428b      	cmp	r3, r1
 80011c4:	d914      	bls.n	80011f0 <__udivmoddi4+0x2b0>
 80011c6:	3e02      	subs	r6, #2
 80011c8:	4461      	add	r1, ip
 80011ca:	1ac9      	subs	r1, r1, r3
 80011cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80011d0:	e738      	b.n	8001044 <__udivmoddi4+0x104>
 80011d2:	462e      	mov	r6, r5
 80011d4:	4628      	mov	r0, r5
 80011d6:	e705      	b.n	8000fe4 <__udivmoddi4+0xa4>
 80011d8:	4606      	mov	r6, r0
 80011da:	e6e3      	b.n	8000fa4 <__udivmoddi4+0x64>
 80011dc:	4618      	mov	r0, r3
 80011de:	e6f8      	b.n	8000fd2 <__udivmoddi4+0x92>
 80011e0:	454b      	cmp	r3, r9
 80011e2:	d2a9      	bcs.n	8001138 <__udivmoddi4+0x1f8>
 80011e4:	ebb9 0802 	subs.w	r8, r9, r2
 80011e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80011ec:	3801      	subs	r0, #1
 80011ee:	e7a3      	b.n	8001138 <__udivmoddi4+0x1f8>
 80011f0:	4646      	mov	r6, r8
 80011f2:	e7ea      	b.n	80011ca <__udivmoddi4+0x28a>
 80011f4:	4620      	mov	r0, r4
 80011f6:	e794      	b.n	8001122 <__udivmoddi4+0x1e2>
 80011f8:	4640      	mov	r0, r8
 80011fa:	e7d1      	b.n	80011a0 <__udivmoddi4+0x260>
 80011fc:	46d0      	mov	r8, sl
 80011fe:	e77b      	b.n	80010f8 <__udivmoddi4+0x1b8>
 8001200:	3b02      	subs	r3, #2
 8001202:	4461      	add	r1, ip
 8001204:	e732      	b.n	800106c <__udivmoddi4+0x12c>
 8001206:	4630      	mov	r0, r6
 8001208:	e709      	b.n	800101e <__udivmoddi4+0xde>
 800120a:	4464      	add	r4, ip
 800120c:	3802      	subs	r0, #2
 800120e:	e742      	b.n	8001096 <__udivmoddi4+0x156>

08001210 <__aeabi_idiv0>:
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop

08001214 <UART_Handle>:
float setpoint1, setpoint2, setpoint3, setpoint4;
float preSetpoint1, preSetpoint2, preSetpoint3, preSetpoint4;
float p0_1=0, p0_2=0, p0_3=0, p0_4=0;

void UART_Handle(char* data)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af02      	add	r7, sp, #8
 800121a:	6078      	str	r0, [r7, #4]
  if (flag_uart_rx == 1 && strstr(data, "\n"))
 800121c:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <UART_Handle+0xc0>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d153      	bne.n	80012cc <UART_Handle+0xb8>
 8001224:	210a      	movs	r1, #10
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f007 fb61 	bl	80088ee <strchr>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d04c      	beq.n	80012cc <UART_Handle+0xb8>
  {
    if (strstr(data, "t1"))
 8001232:	4929      	ldr	r1, [pc, #164]	; (80012d8 <UART_Handle+0xc4>)
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f007 fb67 	bl	8008908 <strstr>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d00a      	beq.n	8001256 <UART_Handle+0x42>
    {
    	sscanf(data, "t1:%f,t2:%f,t3:%f,t4:%f\n", &setpoint1, &setpoint2, &setpoint3, &setpoint4);
 8001240:	4b26      	ldr	r3, [pc, #152]	; (80012dc <UART_Handle+0xc8>)
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <UART_Handle+0xcc>)
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <UART_Handle+0xd0>)
 800124a:	4a27      	ldr	r2, [pc, #156]	; (80012e8 <UART_Handle+0xd4>)
 800124c:	4927      	ldr	r1, [pc, #156]	; (80012ec <UART_Handle+0xd8>)
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f007 fadc 	bl	800880c <siscanf>
 8001254:	e02e      	b.n	80012b4 <UART_Handle+0xa0>
//      MOTOR_setAngle(&motor1, t1);
//      MOTOR_setAngle(&motor2, t2);
//      MOTOR_setAngle(&motor3, t3);
//      MOTOR_setAngle(&motor4, t4);
    }
    else if (strstr(data, "home"))
 8001256:	4926      	ldr	r1, [pc, #152]	; (80012f0 <UART_Handle+0xdc>)
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f007 fb55 	bl	8008908 <strstr>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d01e      	beq.n	80012a2 <UART_Handle+0x8e>
	{
    	setHome234Flag = 1;
 8001264:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <UART_Handle+0xe0>)
 8001266:	2201      	movs	r2, #1
 8001268:	701a      	strb	r2, [r3, #0]
    	setHome1234Flag = 1;
 800126a:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <UART_Handle+0xe4>)
 800126c:	2201      	movs	r2, #1
 800126e:	701a      	strb	r2, [r3, #0]
    	setHomeJ1 = setHomeJ2 = setHomeJ3 = setHomeJ4 = 0;
 8001270:	4b22      	ldr	r3, [pc, #136]	; (80012fc <UART_Handle+0xe8>)
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
 8001276:	4b21      	ldr	r3, [pc, #132]	; (80012fc <UART_Handle+0xe8>)
 8001278:	781a      	ldrb	r2, [r3, #0]
 800127a:	4b21      	ldr	r3, [pc, #132]	; (8001300 <UART_Handle+0xec>)
 800127c:	701a      	strb	r2, [r3, #0]
 800127e:	4b20      	ldr	r3, [pc, #128]	; (8001300 <UART_Handle+0xec>)
 8001280:	781a      	ldrb	r2, [r3, #0]
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <UART_Handle+0xf0>)
 8001284:	701a      	strb	r2, [r3, #0]
 8001286:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <UART_Handle+0xf0>)
 8001288:	781a      	ldrb	r2, [r3, #0]
 800128a:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <UART_Handle+0xf4>)
 800128c:	701a      	strb	r2, [r3, #0]
    	if(setHomeOk == 0) MOTOR_setAngle(&motor2, 300);
 800128e:	4b1f      	ldr	r3, [pc, #124]	; (800130c <UART_Handle+0xf8>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10e      	bne.n	80012b4 <UART_Handle+0xa0>
 8001296:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8001310 <UART_Handle+0xfc>
 800129a:	481e      	ldr	r0, [pc, #120]	; (8001314 <UART_Handle+0x100>)
 800129c:	f006 f934 	bl	8007508 <MOTOR_setAngle>
 80012a0:	e008      	b.n	80012b4 <UART_Handle+0xa0>
	}
    else if(strstr(data,"Reset"))
 80012a2:	491d      	ldr	r1, [pc, #116]	; (8001318 <UART_Handle+0x104>)
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f007 fb2f 	bl	8008908 <strstr>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <UART_Handle+0xa0>
	{
    	HAL_NVIC_SystemReset();
 80012b0:	f002 f807 	bl	80032c2 <HAL_NVIC_SystemReset>
	}
    flag_uart_rx = 0;
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <UART_Handle+0xc0>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
	memset(data, 0, strlen(data));
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7fe ff88 	bl	80001d0 <strlen>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	2100      	movs	r1, #0
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f006 fbf8 	bl	8007abc <memset>
  }
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200005e0 	.word	0x200005e0
 80012d8:	0800cc80 	.word	0x0800cc80
 80012dc:	200008e8 	.word	0x200008e8
 80012e0:	200008e4 	.word	0x200008e4
 80012e4:	200008e0 	.word	0x200008e0
 80012e8:	200008dc 	.word	0x200008dc
 80012ec:	0800cc84 	.word	0x0800cc84
 80012f0:	0800cca0 	.word	0x0800cca0
 80012f4:	200005e9 	.word	0x200005e9
 80012f8:	200005ea 	.word	0x200005ea
 80012fc:	200005e8 	.word	0x200005e8
 8001300:	200005e7 	.word	0x200005e7
 8001304:	200005e6 	.word	0x200005e6
 8001308:	200005e5 	.word	0x200005e5
 800130c:	200005e4 	.word	0x200005e4
 8001310:	43960000 	.word	0x43960000
 8001314:	200006a4 	.word	0x200006a4
 8001318:	0800cca8 	.word	0x0800cca8

0800131c <UartIdle_Init>:
void UartIdle_Init()
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*)uartLogBuffer, MAX_MESG);
 8001320:	2264      	movs	r2, #100	; 0x64
 8001322:	4907      	ldr	r1, [pc, #28]	; (8001340 <UartIdle_Init+0x24>)
 8001324:	4807      	ldr	r0, [pc, #28]	; (8001344 <UartIdle_Init+0x28>)
 8001326:	f004 fd80 	bl	8005e2a <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 800132a:	4b07      	ldr	r3, [pc, #28]	; (8001348 <UartIdle_Init+0x2c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <UartIdle_Init+0x2c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0208 	bic.w	r2, r2, #8
 8001338:	601a      	str	r2, [r3, #0]
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000057c 	.word	0x2000057c
 8001344:	200004d8 	.word	0x200004d8
 8001348:	2000051c 	.word	0x2000051c

0800134c <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef* huart, uint16_t Size)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART3)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a08      	ldr	r2, [pc, #32]	; (8001380 <HAL_UARTEx_RxEventCallback+0x34>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d10a      	bne.n	8001378 <HAL_UARTEx_RxEventCallback+0x2c>
  {
    uartLogRxSize = Size;
 8001362:	4a08      	ldr	r2, [pc, #32]	; (8001384 <HAL_UARTEx_RxEventCallback+0x38>)
 8001364:	887b      	ldrh	r3, [r7, #2]
 8001366:	8013      	strh	r3, [r2, #0]
    flag_uart_rx = 1;
 8001368:	4b07      	ldr	r3, [pc, #28]	; (8001388 <HAL_UARTEx_RxEventCallback+0x3c>)
 800136a:	2201      	movs	r2, #1
 800136c:	701a      	strb	r2, [r3, #0]
    HAL_UARTEx_ReceiveToIdle_DMA(huart, (uint8_t*)uartLogBuffer, MAX_MESG);
 800136e:	2264      	movs	r2, #100	; 0x64
 8001370:	4906      	ldr	r1, [pc, #24]	; (800138c <HAL_UARTEx_RxEventCallback+0x40>)
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f004 fd59 	bl	8005e2a <HAL_UARTEx_ReceiveToIdle_DMA>
  }
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40004800 	.word	0x40004800
 8001384:	200005e2 	.word	0x200005e2
 8001388:	200005e0 	.word	0x200005e0
 800138c:	2000057c 	.word	0x2000057c

08001390 <p>:

float p(float p0, float pf, float tf, float v0, float vf, float T)
{
 8001390:	b480      	push	{r7}
 8001392:	b087      	sub	sp, #28
 8001394:	af00      	add	r7, sp, #0
 8001396:	ed87 0a05 	vstr	s0, [r7, #20]
 800139a:	edc7 0a04 	vstr	s1, [r7, #16]
 800139e:	ed87 1a03 	vstr	s2, [r7, #12]
 80013a2:	edc7 1a02 	vstr	s3, [r7, #8]
 80013a6:	ed87 2a01 	vstr	s4, [r7, #4]
 80013aa:	edc7 2a00 	vstr	s5, [r7]
    return p0+v0*T+(3*(pf-p0)/(tf*tf)-2*v0/tf-vf/tf)*(T*T)+(-2*(pf-p0)/(tf*tf*tf)+(vf+v0)/(tf*tf))*(T*T*T);
 80013ae:	ed97 7a02 	vldr	s14, [r7, #8]
 80013b2:	edd7 7a00 	vldr	s15, [r7]
 80013b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80013be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013c2:	edd7 6a04 	vldr	s13, [r7, #16]
 80013c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80013ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80013ce:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80013d2:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80013d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80013da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80013de:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80013e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80013e6:	ee77 5aa7 	vadd.f32	s11, s15, s15
 80013ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80013ee:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80013f2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80013f6:	edd7 5a01 	vldr	s11, [r7, #4]
 80013fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80013fe:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8001402:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001406:	edd7 7a00 	vldr	s15, [r7]
 800140a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800140e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001412:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001416:	edd7 6a04 	vldr	s13, [r7, #16]
 800141a:	edd7 7a05 	vldr	s15, [r7, #20]
 800141e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001422:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
 8001426:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800142a:	edd7 7a03 	vldr	s15, [r7, #12]
 800142e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001432:	edd7 7a03 	vldr	s15, [r7, #12]
 8001436:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800143a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800143e:	ed97 6a01 	vldr	s12, [r7, #4]
 8001442:	edd7 7a02 	vldr	s15, [r7, #8]
 8001446:	ee76 5a27 	vadd.f32	s11, s12, s15
 800144a:	edd7 7a03 	vldr	s15, [r7, #12]
 800144e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8001452:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8001456:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800145a:	edd7 7a00 	vldr	s15, [r7]
 800145e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8001462:	edd7 7a00 	vldr	s15, [r7]
 8001466:	ee66 7a27 	vmul.f32	s15, s12, s15
 800146a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800146e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001472:	eeb0 0a67 	vmov.f32	s0, s15
 8001476:	371c      	adds	r7, #28
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	if(htim == &htim9)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4ac3      	ldr	r2, [pc, #780]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800148c:	4293      	cmp	r3, r2
 800148e:	f040 817b 	bne.w	8001788 <HAL_TIM_PeriodElapsedCallback+0x308>
	{
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001492:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001496:	48c1      	ldr	r0, [pc, #772]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001498:	f002 fcf3 	bl	8003e82 <HAL_GPIO_TogglePin>
	  static uint8_t mode = 0;
	  switch (mode)
 800149c:	4bc0      	ldr	r3, [pc, #768]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b04      	cmp	r3, #4
 80014a2:	f200 8173 	bhi.w	800178c <HAL_TIM_PeriodElapsedCallback+0x30c>
 80014a6:	a201      	add	r2, pc, #4	; (adr r2, 80014ac <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80014a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ac:	080014c1 	.word	0x080014c1
 80014b0:	0800153b 	.word	0x0800153b
 80014b4:	080015b5 	.word	0x080015b5
 80014b8:	0800162f 	.word	0x0800162f
 80014bc:	080016a9 	.word	0x080016a9
	  {
	  case 0:
		if(T1 <= Tf)
 80014c0:	4bb8      	ldr	r3, [pc, #736]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80014c2:	ed93 7a00 	vldr	s14, [r3]
 80014c6:	4bb8      	ldr	r3, [pc, #736]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d4:	d82a      	bhi.n	800152c <HAL_TIM_PeriodElapsedCallback+0xac>
		{
			T1 += 5;
 80014d6:	4bb3      	ldr	r3, [pc, #716]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80014d8:	edd3 7a00 	vldr	s15, [r3]
 80014dc:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80014e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014e4:	4baf      	ldr	r3, [pc, #700]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80014e6:	edc3 7a00 	vstr	s15, [r3]
			MOTOR_setAngle(&motor1, p(p0_1, setpoint1, Tf, 0, 0, T1));
 80014ea:	4bb0      	ldr	r3, [pc, #704]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80014ec:	edd3 7a00 	vldr	s15, [r3]
 80014f0:	4baf      	ldr	r3, [pc, #700]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80014f2:	ed93 7a00 	vldr	s14, [r3]
 80014f6:	4bac      	ldr	r3, [pc, #688]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80014f8:	edd3 6a00 	vldr	s13, [r3]
 80014fc:	4ba9      	ldr	r3, [pc, #676]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80014fe:	ed93 6a00 	vldr	s12, [r3]
 8001502:	eef0 2a46 	vmov.f32	s5, s12
 8001506:	ed9f 2aab 	vldr	s4, [pc, #684]	; 80017b4 <HAL_TIM_PeriodElapsedCallback+0x334>
 800150a:	eddf 1aaa 	vldr	s3, [pc, #680]	; 80017b4 <HAL_TIM_PeriodElapsedCallback+0x334>
 800150e:	eeb0 1a66 	vmov.f32	s2, s13
 8001512:	eef0 0a47 	vmov.f32	s1, s14
 8001516:	eeb0 0a67 	vmov.f32	s0, s15
 800151a:	f7ff ff39 	bl	8001390 <p>
 800151e:	eef0 7a40 	vmov.f32	s15, s0
 8001522:	eeb0 0a67 	vmov.f32	s0, s15
 8001526:	48a4      	ldr	r0, [pc, #656]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001528:	f005 ffee 	bl	8007508 <MOTOR_setAngle>
		}
		MOTOR_runAngle(&motor1);
 800152c:	48a2      	ldr	r0, [pc, #648]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800152e:	f006 f801 	bl	8007534 <MOTOR_runAngle>
		mode = 1;
 8001532:	4b9b      	ldr	r3, [pc, #620]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001534:	2201      	movs	r2, #1
 8001536:	701a      	strb	r2, [r3, #0]
		break;
 8001538:	e129      	b.n	800178e <HAL_TIM_PeriodElapsedCallback+0x30e>
	  case 1:
		if(T2 <= Tf)
 800153a:	4ba0      	ldr	r3, [pc, #640]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800153c:	ed93 7a00 	vldr	s14, [r3]
 8001540:	4b99      	ldr	r3, [pc, #612]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001542:	edd3 7a00 	vldr	s15, [r3]
 8001546:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800154a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154e:	d82a      	bhi.n	80015a6 <HAL_TIM_PeriodElapsedCallback+0x126>
		{
			T2 += 5;
 8001550:	4b9a      	ldr	r3, [pc, #616]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001552:	edd3 7a00 	vldr	s15, [r3]
 8001556:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800155a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800155e:	4b97      	ldr	r3, [pc, #604]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001560:	edc3 7a00 	vstr	s15, [r3]
			MOTOR_setAngle(&motor2, p(p0_2, setpoint2, Tf, 0, 0, T2));
 8001564:	4b96      	ldr	r3, [pc, #600]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001566:	edd3 7a00 	vldr	s15, [r3]
 800156a:	4b96      	ldr	r3, [pc, #600]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800156c:	ed93 7a00 	vldr	s14, [r3]
 8001570:	4b8d      	ldr	r3, [pc, #564]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001572:	edd3 6a00 	vldr	s13, [r3]
 8001576:	4b91      	ldr	r3, [pc, #580]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001578:	ed93 6a00 	vldr	s12, [r3]
 800157c:	eef0 2a46 	vmov.f32	s5, s12
 8001580:	ed9f 2a8c 	vldr	s4, [pc, #560]	; 80017b4 <HAL_TIM_PeriodElapsedCallback+0x334>
 8001584:	eddf 1a8b 	vldr	s3, [pc, #556]	; 80017b4 <HAL_TIM_PeriodElapsedCallback+0x334>
 8001588:	eeb0 1a66 	vmov.f32	s2, s13
 800158c:	eef0 0a47 	vmov.f32	s1, s14
 8001590:	eeb0 0a67 	vmov.f32	s0, s15
 8001594:	f7ff fefc 	bl	8001390 <p>
 8001598:	eef0 7a40 	vmov.f32	s15, s0
 800159c:	eeb0 0a67 	vmov.f32	s0, s15
 80015a0:	4889      	ldr	r0, [pc, #548]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80015a2:	f005 ffb1 	bl	8007508 <MOTOR_setAngle>
		}
		MOTOR_runAngle(&motor2);
 80015a6:	4888      	ldr	r0, [pc, #544]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80015a8:	f005 ffc4 	bl	8007534 <MOTOR_runAngle>
		mode = 2;
 80015ac:	4b7c      	ldr	r3, [pc, #496]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80015ae:	2202      	movs	r2, #2
 80015b0:	701a      	strb	r2, [r3, #0]
		break;
 80015b2:	e0ec      	b.n	800178e <HAL_TIM_PeriodElapsedCallback+0x30e>
	  case 2:
		if(T3 <= Tf)
 80015b4:	4b85      	ldr	r3, [pc, #532]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80015b6:	ed93 7a00 	vldr	s14, [r3]
 80015ba:	4b7b      	ldr	r3, [pc, #492]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80015bc:	edd3 7a00 	vldr	s15, [r3]
 80015c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c8:	d82a      	bhi.n	8001620 <HAL_TIM_PeriodElapsedCallback+0x1a0>
		{
			T3 += 5;
 80015ca:	4b80      	ldr	r3, [pc, #512]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80015d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015d8:	4b7c      	ldr	r3, [pc, #496]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80015da:	edc3 7a00 	vstr	s15, [r3]
			MOTOR_setAngle(&motor3, p(p0_3, setpoint3, Tf, 0, 0, T3));
 80015de:	4b7c      	ldr	r3, [pc, #496]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80015e0:	edd3 7a00 	vldr	s15, [r3]
 80015e4:	4b7b      	ldr	r3, [pc, #492]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x354>)
 80015e6:	ed93 7a00 	vldr	s14, [r3]
 80015ea:	4b6f      	ldr	r3, [pc, #444]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80015ec:	edd3 6a00 	vldr	s13, [r3]
 80015f0:	4b76      	ldr	r3, [pc, #472]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80015f2:	ed93 6a00 	vldr	s12, [r3]
 80015f6:	eef0 2a46 	vmov.f32	s5, s12
 80015fa:	ed9f 2a6e 	vldr	s4, [pc, #440]	; 80017b4 <HAL_TIM_PeriodElapsedCallback+0x334>
 80015fe:	eddf 1a6d 	vldr	s3, [pc, #436]	; 80017b4 <HAL_TIM_PeriodElapsedCallback+0x334>
 8001602:	eeb0 1a66 	vmov.f32	s2, s13
 8001606:	eef0 0a47 	vmov.f32	s1, s14
 800160a:	eeb0 0a67 	vmov.f32	s0, s15
 800160e:	f7ff febf 	bl	8001390 <p>
 8001612:	eef0 7a40 	vmov.f32	s15, s0
 8001616:	eeb0 0a67 	vmov.f32	s0, s15
 800161a:	486f      	ldr	r0, [pc, #444]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800161c:	f005 ff74 	bl	8007508 <MOTOR_setAngle>
		}
		MOTOR_runAngle(&motor3);
 8001620:	486d      	ldr	r0, [pc, #436]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001622:	f005 ff87 	bl	8007534 <MOTOR_runAngle>
		mode = 3;
 8001626:	4b5e      	ldr	r3, [pc, #376]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001628:	2203      	movs	r2, #3
 800162a:	701a      	strb	r2, [r3, #0]
		break;
 800162c:	e0af      	b.n	800178e <HAL_TIM_PeriodElapsedCallback+0x30e>
	  case 3:
		if(T4 <= Tf)
 800162e:	4b6b      	ldr	r3, [pc, #428]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8001630:	ed93 7a00 	vldr	s14, [r3]
 8001634:	4b5c      	ldr	r3, [pc, #368]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001636:	edd3 7a00 	vldr	s15, [r3]
 800163a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800163e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001642:	d82a      	bhi.n	800169a <HAL_TIM_PeriodElapsedCallback+0x21a>
		{
			T4 += 5;
 8001644:	4b65      	ldr	r3, [pc, #404]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8001646:	edd3 7a00 	vldr	s15, [r3]
 800164a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800164e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001652:	4b62      	ldr	r3, [pc, #392]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8001654:	edc3 7a00 	vstr	s15, [r3]
			MOTOR_setAngle(&motor4, p(p0_4, setpoint4, Tf, 0, 0, T4));
 8001658:	4b61      	ldr	r3, [pc, #388]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800165a:	edd3 7a00 	vldr	s15, [r3]
 800165e:	4b61      	ldr	r3, [pc, #388]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001660:	ed93 7a00 	vldr	s14, [r3]
 8001664:	4b50      	ldr	r3, [pc, #320]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001666:	edd3 6a00 	vldr	s13, [r3]
 800166a:	4b5c      	ldr	r3, [pc, #368]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x35c>)
 800166c:	ed93 6a00 	vldr	s12, [r3]
 8001670:	eef0 2a46 	vmov.f32	s5, s12
 8001674:	ed9f 2a4f 	vldr	s4, [pc, #316]	; 80017b4 <HAL_TIM_PeriodElapsedCallback+0x334>
 8001678:	eddf 1a4e 	vldr	s3, [pc, #312]	; 80017b4 <HAL_TIM_PeriodElapsedCallback+0x334>
 800167c:	eeb0 1a66 	vmov.f32	s2, s13
 8001680:	eef0 0a47 	vmov.f32	s1, s14
 8001684:	eeb0 0a67 	vmov.f32	s0, s15
 8001688:	f7ff fe82 	bl	8001390 <p>
 800168c:	eef0 7a40 	vmov.f32	s15, s0
 8001690:	eeb0 0a67 	vmov.f32	s0, s15
 8001694:	4854      	ldr	r0, [pc, #336]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8001696:	f005 ff37 	bl	8007508 <MOTOR_setAngle>
		}
		MOTOR_runAngle(&motor4);
 800169a:	4853      	ldr	r0, [pc, #332]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800169c:	f005 ff4a 	bl	8007534 <MOTOR_runAngle>
		mode = 4;
 80016a0:	4b3f      	ldr	r3, [pc, #252]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80016a2:	2204      	movs	r2, #4
 80016a4:	701a      	strb	r2, [r3, #0]
		break;
 80016a6:	e072      	b.n	800178e <HAL_TIM_PeriodElapsedCallback+0x30e>
	  case 4:
		if(setpoint1 != preSetpoint1)
 80016a8:	4b41      	ldr	r3, [pc, #260]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80016aa:	ed93 7a00 	vldr	s14, [r3]
 80016ae:	4b4f      	ldr	r3, [pc, #316]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	eeb4 7a67 	vcmp.f32	s14, s15
 80016b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016bc:	d00f      	beq.n	80016de <HAL_TIM_PeriodElapsedCallback+0x25e>
		{
			T1 = 0;
 80016be:	4b39      	ldr	r3, [pc, #228]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
			p0_1=MOTOR_getPos(&motor1);
 80016c6:	483c      	ldr	r0, [pc, #240]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80016c8:	f006 f832 	bl	8007730 <MOTOR_getPos>
 80016cc:	eef0 7a40 	vmov.f32	s15, s0
 80016d0:	4b36      	ldr	r3, [pc, #216]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80016d2:	edc3 7a00 	vstr	s15, [r3]
			preSetpoint1 = setpoint1;
 80016d6:	4b36      	ldr	r3, [pc, #216]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a44      	ldr	r2, [pc, #272]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80016dc:	6013      	str	r3, [r2, #0]
		}
		if(setpoint2 != preSetpoint2)
 80016de:	4b39      	ldr	r3, [pc, #228]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80016e0:	ed93 7a00 	vldr	s14, [r3]
 80016e4:	4b42      	ldr	r3, [pc, #264]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80016e6:	edd3 7a00 	vldr	s15, [r3]
 80016ea:	eeb4 7a67 	vcmp.f32	s14, s15
 80016ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f2:	d00f      	beq.n	8001714 <HAL_TIM_PeriodElapsedCallback+0x294>
		{
			T2 = 0;
 80016f4:	4b31      	ldr	r3, [pc, #196]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
			p0_2=MOTOR_getPos(&motor2);
 80016fc:	4832      	ldr	r0, [pc, #200]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80016fe:	f006 f817 	bl	8007730 <MOTOR_getPos>
 8001702:	eef0 7a40 	vmov.f32	s15, s0
 8001706:	4b2e      	ldr	r3, [pc, #184]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001708:	edc3 7a00 	vstr	s15, [r3]
			preSetpoint2 = setpoint2;
 800170c:	4b2d      	ldr	r3, [pc, #180]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a37      	ldr	r2, [pc, #220]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001712:	6013      	str	r3, [r2, #0]
		}
		if(setpoint3 != preSetpoint3)
 8001714:	4b2f      	ldr	r3, [pc, #188]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8001716:	ed93 7a00 	vldr	s14, [r3]
 800171a:	4b36      	ldr	r3, [pc, #216]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800171c:	edd3 7a00 	vldr	s15, [r3]
 8001720:	eeb4 7a67 	vcmp.f32	s14, s15
 8001724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001728:	d00f      	beq.n	800174a <HAL_TIM_PeriodElapsedCallback+0x2ca>
		{
			T3 = 0;
 800172a:	4b28      	ldr	r3, [pc, #160]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800172c:	f04f 0200 	mov.w	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
			p0_3=MOTOR_getPos(&motor3);
 8001732:	4829      	ldr	r0, [pc, #164]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001734:	f005 fffc 	bl	8007730 <MOTOR_getPos>
 8001738:	eef0 7a40 	vmov.f32	s15, s0
 800173c:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800173e:	edc3 7a00 	vstr	s15, [r3]
			preSetpoint3 = setpoint3;
 8001742:	4b24      	ldr	r3, [pc, #144]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a2b      	ldr	r2, [pc, #172]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8001748:	6013      	str	r3, [r2, #0]
		}
		if(setpoint4 != preSetpoint4)
 800174a:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800174c:	ed93 7a00 	vldr	s14, [r3]
 8001750:	4b29      	ldr	r3, [pc, #164]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8001752:	edd3 7a00 	vldr	s15, [r3]
 8001756:	eeb4 7a67 	vcmp.f32	s14, s15
 800175a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175e:	d00f      	beq.n	8001780 <HAL_TIM_PeriodElapsedCallback+0x300>
		{
			T4 = 0;
 8001760:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
			p0_4=MOTOR_getPos(&motor4);
 8001768:	481f      	ldr	r0, [pc, #124]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800176a:	f005 ffe1 	bl	8007730 <MOTOR_getPos>
 800176e:	eef0 7a40 	vmov.f32	s15, s0
 8001772:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001774:	edc3 7a00 	vstr	s15, [r3]
			preSetpoint4 = setpoint4;
 8001778:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a1e      	ldr	r2, [pc, #120]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800177e:	6013      	str	r3, [r2, #0]
		}
		mode = 0;
 8001780:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
		break;
 8001786:	e002      	b.n	800178e <HAL_TIM_PeriodElapsedCallback+0x30e>
	  default:
		break;
	  }
	}
 8001788:	bf00      	nop
 800178a:	e000      	b.n	800178e <HAL_TIM_PeriodElapsedCallback+0x30e>
		break;
 800178c:	bf00      	nop
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000490 	.word	0x20000490
 800179c:	40020800 	.word	0x40020800
 80017a0:	2000090c 	.word	0x2000090c
 80017a4:	200008cc 	.word	0x200008cc
 80017a8:	200000e0 	.word	0x200000e0
 80017ac:	200008fc 	.word	0x200008fc
 80017b0:	200008dc 	.word	0x200008dc
 80017b4:	00000000 	.word	0x00000000
 80017b8:	200005ec 	.word	0x200005ec
 80017bc:	200008d0 	.word	0x200008d0
 80017c0:	20000900 	.word	0x20000900
 80017c4:	200008e0 	.word	0x200008e0
 80017c8:	200006a4 	.word	0x200006a4
 80017cc:	200008d4 	.word	0x200008d4
 80017d0:	20000904 	.word	0x20000904
 80017d4:	200008e4 	.word	0x200008e4
 80017d8:	2000075c 	.word	0x2000075c
 80017dc:	200008d8 	.word	0x200008d8
 80017e0:	20000908 	.word	0x20000908
 80017e4:	200008e8 	.word	0x200008e8
 80017e8:	20000814 	.word	0x20000814
 80017ec:	200008ec 	.word	0x200008ec
 80017f0:	200008f0 	.word	0x200008f0
 80017f4:	200008f4 	.word	0x200008f4
 80017f8:	200008f8 	.word	0x200008f8

080017fc <SetHome>:

void SetHome(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
	if(setHome1234Flag == 1 && setHomeOk == 0)
 8001800:	4bb0      	ldr	r3, [pc, #704]	; (8001ac4 <SetHome+0x2c8>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b01      	cmp	r3, #1
 8001806:	f040 813d 	bne.w	8001a84 <SetHome+0x288>
 800180a:	4baf      	ldr	r3, [pc, #700]	; (8001ac8 <SetHome+0x2cc>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	f040 8138 	bne.w	8001a84 <SetHome+0x288>
	{
		if (setHomeJ1 == 1 && setHomeJ2 == 1 && setHomeJ3 == 1 && setHomeJ4 == 1)
 8001814:	4bad      	ldr	r3, [pc, #692]	; (8001acc <SetHome+0x2d0>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d16b      	bne.n	80018f4 <SetHome+0xf8>
 800181c:	4bac      	ldr	r3, [pc, #688]	; (8001ad0 <SetHome+0x2d4>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d167      	bne.n	80018f4 <SetHome+0xf8>
 8001824:	4bab      	ldr	r3, [pc, #684]	; (8001ad4 <SetHome+0x2d8>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d163      	bne.n	80018f4 <SetHome+0xf8>
 800182c:	4baa      	ldr	r3, [pc, #680]	; (8001ad8 <SetHome+0x2dc>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d15f      	bne.n	80018f4 <SetHome+0xf8>
		{
			MOTOR_setAngle(&motor1, 0);
 8001834:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 8001adc <SetHome+0x2e0>
 8001838:	48a9      	ldr	r0, [pc, #676]	; (8001ae0 <SetHome+0x2e4>)
 800183a:	f005 fe65 	bl	8007508 <MOTOR_setAngle>
			MOTOR_setAngle(&motor2, -180);
 800183e:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 8001ae4 <SetHome+0x2e8>
 8001842:	48a9      	ldr	r0, [pc, #676]	; (8001ae8 <SetHome+0x2ec>)
 8001844:	f005 fe60 	bl	8007508 <MOTOR_setAngle>
			MOTOR_setAngle(&motor3, 130);
 8001848:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 8001aec <SetHome+0x2f0>
 800184c:	48a8      	ldr	r0, [pc, #672]	; (8001af0 <SetHome+0x2f4>)
 800184e:	f005 fe5b 	bl	8007508 <MOTOR_setAngle>
			MOTOR_setAngle(&motor4, -72);
 8001852:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 8001af4 <SetHome+0x2f8>
 8001856:	48a8      	ldr	r0, [pc, #672]	; (8001af8 <SetHome+0x2fc>)
 8001858:	f005 fe56 	bl	8007508 <MOTOR_setAngle>
			if(fabs(MOTOR_getPos(&motor2) + 180) < 1 && fabs(MOTOR_getPos(&motor3) - 130) < 1 && fabs(MOTOR_getPos(&motor4) + 72) < 1)
 800185c:	48a2      	ldr	r0, [pc, #648]	; (8001ae8 <SetHome+0x2ec>)
 800185e:	f005 ff67 	bl	8007730 <MOTOR_getPos>
 8001862:	eef0 7a40 	vmov.f32	s15, s0
 8001866:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8001afc <SetHome+0x300>
 800186a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800186e:	eef0 7ae7 	vabs.f32	s15, s15
 8001872:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001876:	eef4 7ac7 	vcmpe.f32	s15, s14
 800187a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187e:	f140 80bb 	bpl.w	80019f8 <SetHome+0x1fc>
 8001882:	489b      	ldr	r0, [pc, #620]	; (8001af0 <SetHome+0x2f4>)
 8001884:	f005 ff54 	bl	8007730 <MOTOR_getPos>
 8001888:	eef0 7a40 	vmov.f32	s15, s0
 800188c:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8001aec <SetHome+0x2f0>
 8001890:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001894:	eef0 7ae7 	vabs.f32	s15, s15
 8001898:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800189c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a4:	d400      	bmi.n	80018a8 <SetHome+0xac>
 80018a6:	e0a7      	b.n	80019f8 <SetHome+0x1fc>
 80018a8:	4893      	ldr	r0, [pc, #588]	; (8001af8 <SetHome+0x2fc>)
 80018aa:	f005 ff41 	bl	8007730 <MOTOR_getPos>
 80018ae:	eef0 7a40 	vmov.f32	s15, s0
 80018b2:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001b00 <SetHome+0x304>
 80018b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018ba:	eef0 7ae7 	vabs.f32	s15, s15
 80018be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ca:	d400      	bmi.n	80018ce <SetHome+0xd2>
 80018cc:	e094      	b.n	80019f8 <SetHome+0x1fc>
			{
				setHome234Flag = 0;
 80018ce:	4b8d      	ldr	r3, [pc, #564]	; (8001b04 <SetHome+0x308>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
				setHome1234Flag = 0;
 80018d4:	4b7b      	ldr	r3, [pc, #492]	; (8001ac4 <SetHome+0x2c8>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
				setHomeOk = 1;
 80018da:	4b7b      	ldr	r3, [pc, #492]	; (8001ac8 <SetHome+0x2cc>)
 80018dc:	2201      	movs	r2, #1
 80018de:	701a      	strb	r2, [r3, #0]
				MOTOR_reset(&motor2);
 80018e0:	4881      	ldr	r0, [pc, #516]	; (8001ae8 <SetHome+0x2ec>)
 80018e2:	f005 feec 	bl	80076be <MOTOR_reset>
				MOTOR_reset(&motor3);
 80018e6:	4882      	ldr	r0, [pc, #520]	; (8001af0 <SetHome+0x2f4>)
 80018e8:	f005 fee9 	bl	80076be <MOTOR_reset>
				MOTOR_reset(&motor4);
 80018ec:	4882      	ldr	r0, [pc, #520]	; (8001af8 <SetHome+0x2fc>)
 80018ee:	f005 fee6 	bl	80076be <MOTOR_reset>
			if(fabs(MOTOR_getPos(&motor2) + 180) < 1 && fabs(MOTOR_getPos(&motor3) - 130) < 1 && fabs(MOTOR_getPos(&motor4) + 72) < 1)
 80018f2:	e081      	b.n	80019f8 <SetHome+0x1fc>
			}
		}
		else if(setHomeJ2 == 1 && setHomeJ3 == 1 && setHomeJ4 == 1)
 80018f4:	4b76      	ldr	r3, [pc, #472]	; (8001ad0 <SetHome+0x2d4>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d17d      	bne.n	80019f8 <SetHome+0x1fc>
 80018fc:	4b75      	ldr	r3, [pc, #468]	; (8001ad4 <SetHome+0x2d8>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d179      	bne.n	80019f8 <SetHome+0x1fc>
 8001904:	4b74      	ldr	r3, [pc, #464]	; (8001ad8 <SetHome+0x2dc>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d175      	bne.n	80019f8 <SetHome+0x1fc>
		{
			if(fabs(motor1.setPoint) <= 2)
 800190c:	4b74      	ldr	r3, [pc, #464]	; (8001ae0 <SetHome+0x2e4>)
 800190e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8001912:	eef0 7ae7 	vabs.f32	s15, s15
 8001916:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800191a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800191e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001922:	d805      	bhi.n	8001930 <SetHome+0x134>
			{
				MOTOR_setAngle(&motor1, -45.0f);
 8001924:	ed9f 0a78 	vldr	s0, [pc, #480]	; 8001b08 <SetHome+0x30c>
 8001928:	486d      	ldr	r0, [pc, #436]	; (8001ae0 <SetHome+0x2e4>)
 800192a:	f005 fded 	bl	8007508 <MOTOR_setAngle>
 800192e:	e063      	b.n	80019f8 <SetHome+0x1fc>
			}
			else if(fabs(MOTOR_getPos(&motor1) + 45.0f) < 2 && (int)(motor1.setPoint / motor1.ratioJoint) == -45)
 8001930:	486b      	ldr	r0, [pc, #428]	; (8001ae0 <SetHome+0x2e4>)
 8001932:	f005 fefd 	bl	8007730 <MOTOR_getPos>
 8001936:	eef0 7a40 	vmov.f32	s15, s0
 800193a:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001b0c <SetHome+0x310>
 800193e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001942:	eef0 7ae7 	vabs.f32	s15, s15
 8001946:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800194a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800194e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001952:	d514      	bpl.n	800197e <SetHome+0x182>
 8001954:	4b62      	ldr	r3, [pc, #392]	; (8001ae0 <SetHome+0x2e4>)
 8001956:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800195a:	4b61      	ldr	r3, [pc, #388]	; (8001ae0 <SetHome+0x2e4>)
 800195c:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8001960:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001964:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001968:	ee17 3a90 	vmov	r3, s15
 800196c:	f113 0f2d 	cmn.w	r3, #45	; 0x2d
 8001970:	d105      	bne.n	800197e <SetHome+0x182>
			{
				MOTOR_setAngle(&motor1, 45.0f);
 8001972:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8001b0c <SetHome+0x310>
 8001976:	485a      	ldr	r0, [pc, #360]	; (8001ae0 <SetHome+0x2e4>)
 8001978:	f005 fdc6 	bl	8007508 <MOTOR_setAngle>
 800197c:	e03c      	b.n	80019f8 <SetHome+0x1fc>
			}
			else if(fabs(MOTOR_getPos(&motor1) - 45.0f) < 2 && (int)(motor1.setPoint / motor1.ratioJoint) == 45)
 800197e:	4858      	ldr	r0, [pc, #352]	; (8001ae0 <SetHome+0x2e4>)
 8001980:	f005 fed6 	bl	8007730 <MOTOR_getPos>
 8001984:	eef0 7a40 	vmov.f32	s15, s0
 8001988:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8001b0c <SetHome+0x310>
 800198c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001990:	eef0 7ae7 	vabs.f32	s15, s15
 8001994:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001998:	eef4 7ac7 	vcmpe.f32	s15, s14
 800199c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a0:	d513      	bpl.n	80019ca <SetHome+0x1ce>
 80019a2:	4b4f      	ldr	r3, [pc, #316]	; (8001ae0 <SetHome+0x2e4>)
 80019a4:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 80019a8:	4b4d      	ldr	r3, [pc, #308]	; (8001ae0 <SetHome+0x2e4>)
 80019aa:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 80019ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019b6:	ee17 3a90 	vmov	r3, s15
 80019ba:	2b2d      	cmp	r3, #45	; 0x2d
 80019bc:	d105      	bne.n	80019ca <SetHome+0x1ce>
			{
				MOTOR_setAngle(&motor1, -100.0f);
 80019be:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8001b10 <SetHome+0x314>
 80019c2:	4847      	ldr	r0, [pc, #284]	; (8001ae0 <SetHome+0x2e4>)
 80019c4:	f005 fda0 	bl	8007508 <MOTOR_setAngle>
 80019c8:	e016      	b.n	80019f8 <SetHome+0x1fc>
			}
			else if(fabs(MOTOR_getPos(&motor1) + 100.0f) < 2)
 80019ca:	4845      	ldr	r0, [pc, #276]	; (8001ae0 <SetHome+0x2e4>)
 80019cc:	f005 feb0 	bl	8007730 <MOTOR_getPos>
 80019d0:	eef0 7a40 	vmov.f32	s15, s0
 80019d4:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001b14 <SetHome+0x318>
 80019d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019dc:	eef0 7ae7 	vabs.f32	s15, s15
 80019e0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80019e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ec:	d504      	bpl.n	80019f8 <SetHome+0x1fc>
			{
				MOTOR_setAngle(&motor1, 100.0f);
 80019ee:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8001b14 <SetHome+0x318>
 80019f2:	483b      	ldr	r0, [pc, #236]	; (8001ae0 <SetHome+0x2e4>)
 80019f4:	f005 fd88 	bl	8007508 <MOTOR_setAngle>
			}
		}
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 1 && setHomeJ1 == 0)
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	4847      	ldr	r0, [pc, #284]	; (8001b18 <SetHome+0x31c>)
 80019fc:	f002 fa10 	bl	8003e20 <HAL_GPIO_ReadPin>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d109      	bne.n	8001a1a <SetHome+0x21e>
 8001a06:	4b31      	ldr	r3, [pc, #196]	; (8001acc <SetHome+0x2d0>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d105      	bne.n	8001a1a <SetHome+0x21e>
		{
			setHomeJ1 = 1;
 8001a0e:	4b2f      	ldr	r3, [pc, #188]	; (8001acc <SetHome+0x2d0>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor1);
 8001a14:	4832      	ldr	r0, [pc, #200]	; (8001ae0 <SetHome+0x2e4>)
 8001a16:	f005 fe52 	bl	80076be <MOTOR_reset>
		}
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == 1 && setHomeJ2 == 0)
 8001a1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a1e:	483e      	ldr	r0, [pc, #248]	; (8001b18 <SetHome+0x31c>)
 8001a20:	f002 f9fe 	bl	8003e20 <HAL_GPIO_ReadPin>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d109      	bne.n	8001a3e <SetHome+0x242>
 8001a2a:	4b29      	ldr	r3, [pc, #164]	; (8001ad0 <SetHome+0x2d4>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d105      	bne.n	8001a3e <SetHome+0x242>
		{
			setHomeJ2 = 1;
 8001a32:	4b27      	ldr	r3, [pc, #156]	; (8001ad0 <SetHome+0x2d4>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor2);
 8001a38:	482b      	ldr	r0, [pc, #172]	; (8001ae8 <SetHome+0x2ec>)
 8001a3a:	f005 fe40 	bl	80076be <MOTOR_reset>
		}
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 0 && setHomeJ3 == 0)
 8001a3e:	2104      	movs	r1, #4
 8001a40:	4836      	ldr	r0, [pc, #216]	; (8001b1c <SetHome+0x320>)
 8001a42:	f002 f9ed 	bl	8003e20 <HAL_GPIO_ReadPin>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d109      	bne.n	8001a60 <SetHome+0x264>
 8001a4c:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <SetHome+0x2d8>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d105      	bne.n	8001a60 <SetHome+0x264>
		{
			setHomeJ3 = 1;
 8001a54:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <SetHome+0x2d8>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor3);
 8001a5a:	4825      	ldr	r0, [pc, #148]	; (8001af0 <SetHome+0x2f4>)
 8001a5c:	f005 fe2f 	bl	80076be <MOTOR_reset>
		}
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6) == 0 && setHomeJ4 == 0)
 8001a60:	2140      	movs	r1, #64	; 0x40
 8001a62:	482e      	ldr	r0, [pc, #184]	; (8001b1c <SetHome+0x320>)
 8001a64:	f002 f9dc 	bl	8003e20 <HAL_GPIO_ReadPin>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d126      	bne.n	8001abc <SetHome+0x2c0>
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <SetHome+0x2dc>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d122      	bne.n	8001abc <SetHome+0x2c0>
		{
			setHomeJ4 = 1;
 8001a76:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <SetHome+0x2dc>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor4);
 8001a7c:	481e      	ldr	r0, [pc, #120]	; (8001af8 <SetHome+0x2fc>)
 8001a7e:	f005 fe1e 	bl	80076be <MOTOR_reset>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6) == 0 && setHomeJ4 == 0)
 8001a82:	e01b      	b.n	8001abc <SetHome+0x2c0>
		}
	}
	else if(setHome1234Flag == 1 && setHomeOk == 1)
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <SetHome+0x2c8>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d118      	bne.n	8001abe <SetHome+0x2c2>
 8001a8c:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <SetHome+0x2cc>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d114      	bne.n	8001abe <SetHome+0x2c2>
	{
//		MOTOR_setAngle(&motor1, 0);
//		MOTOR_setAngle(&motor2, 0);
//		MOTOR_setAngle(&motor3, 0);
//		MOTOR_setAngle(&motor4, 0);
		setpoint1 = 0;
 8001a94:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <SetHome+0x324>)
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
		setpoint2 = 0;
 8001a9c:	4b21      	ldr	r3, [pc, #132]	; (8001b24 <SetHome+0x328>)
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
		setpoint3 = 0;
 8001aa4:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <SetHome+0x32c>)
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
		setpoint4 = 0;
 8001aac:	4b1f      	ldr	r3, [pc, #124]	; (8001b2c <SetHome+0x330>)
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
		setHome1234Flag = 0;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <SetHome+0x2c8>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
	}
}
 8001aba:	e000      	b.n	8001abe <SetHome+0x2c2>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6) == 0 && setHomeJ4 == 0)
 8001abc:	bf00      	nop
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200005ea 	.word	0x200005ea
 8001ac8:	200005e4 	.word	0x200005e4
 8001acc:	200005e5 	.word	0x200005e5
 8001ad0:	200005e6 	.word	0x200005e6
 8001ad4:	200005e7 	.word	0x200005e7
 8001ad8:	200005e8 	.word	0x200005e8
 8001adc:	00000000 	.word	0x00000000
 8001ae0:	200005ec 	.word	0x200005ec
 8001ae4:	c3340000 	.word	0xc3340000
 8001ae8:	200006a4 	.word	0x200006a4
 8001aec:	43020000 	.word	0x43020000
 8001af0:	2000075c 	.word	0x2000075c
 8001af4:	c2900000 	.word	0xc2900000
 8001af8:	20000814 	.word	0x20000814
 8001afc:	43340000 	.word	0x43340000
 8001b00:	42900000 	.word	0x42900000
 8001b04:	200005e9 	.word	0x200005e9
 8001b08:	c2340000 	.word	0xc2340000
 8001b0c:	42340000 	.word	0x42340000
 8001b10:	c2c80000 	.word	0xc2c80000
 8001b14:	42c80000 	.word	0x42c80000
 8001b18:	40020800 	.word	0x40020800
 8001b1c:	40020c00 	.word	0x40020c00
 8001b20:	200008dc 	.word	0x200008dc
 8001b24:	200008e0 	.word	0x200008e0
 8001b28:	200008e4 	.word	0x200008e4
 8001b2c:	200008e8 	.word	0x200008e8

08001b30 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	80fb      	strh	r3, [r7, #6]
	if(setHome1234Flag == 1 && setHomeOk == 0)
 8001b3a:	4b2c      	ldr	r3, [pc, #176]	; (8001bec <HAL_GPIO_EXTI_Callback+0xbc>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d14f      	bne.n	8001be2 <HAL_GPIO_EXTI_Callback+0xb2>
 8001b42:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d14b      	bne.n	8001be2 <HAL_GPIO_EXTI_Callback+0xb2>
	{
		if(GPIO_Pin == GPIO_PIN_11 && setHomeJ2 == 0)
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b50:	d11c      	bne.n	8001b8c <HAL_GPIO_EXTI_Callback+0x5c>
 8001b52:	4b28      	ldr	r3, [pc, #160]	; (8001bf4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d118      	bne.n	8001b8c <HAL_GPIO_EXTI_Callback+0x5c>
		{
			setHomeJ2 = 1;
 8001b5a:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor2);
 8001b60:	4825      	ldr	r0, [pc, #148]	; (8001bf8 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001b62:	f005 fdac 	bl	80076be <MOTOR_reset>
			if(setHomeJ3 == 0)
 8001b66:	4b25      	ldr	r3, [pc, #148]	; (8001bfc <HAL_GPIO_EXTI_Callback+0xcc>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d104      	bne.n	8001b78 <HAL_GPIO_EXTI_Callback+0x48>
			{
				MOTOR_setAngle(&motor3, -200);
 8001b6e:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8001c00 <HAL_GPIO_EXTI_Callback+0xd0>
 8001b72:	4824      	ldr	r0, [pc, #144]	; (8001c04 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001b74:	f005 fcc8 	bl	8007508 <MOTOR_setAngle>
			}
			if(setHomeJ4 == 0)
 8001b78:	4b23      	ldr	r3, [pc, #140]	; (8001c08 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d12f      	bne.n	8001be0 <HAL_GPIO_EXTI_Callback+0xb0>
			{
				MOTOR_setAngle(&motor4, 200);
 8001b80:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001c0c <HAL_GPIO_EXTI_Callback+0xdc>
 8001b84:	4822      	ldr	r0, [pc, #136]	; (8001c10 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001b86:	f005 fcbf 	bl	8007508 <MOTOR_setAngle>
		{
 8001b8a:	e029      	b.n	8001be0 <HAL_GPIO_EXTI_Callback+0xb0>
			}
		}
		else if(GPIO_Pin == GPIO_PIN_2 && setHomeJ3 == 0)
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d10a      	bne.n	8001ba8 <HAL_GPIO_EXTI_Callback+0x78>
 8001b92:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <HAL_GPIO_EXTI_Callback+0xcc>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d106      	bne.n	8001ba8 <HAL_GPIO_EXTI_Callback+0x78>
		{
			setHomeJ3 = 1;
 8001b9a:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <HAL_GPIO_EXTI_Callback+0xcc>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor3);
 8001ba0:	4818      	ldr	r0, [pc, #96]	; (8001c04 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001ba2:	f005 fd8c 	bl	80076be <MOTOR_reset>
		{
 8001ba6:	e01c      	b.n	8001be2 <HAL_GPIO_EXTI_Callback+0xb2>

		}
		else if(GPIO_Pin == GPIO_PIN_6 && setHomeJ4 == 0)
 8001ba8:	88fb      	ldrh	r3, [r7, #6]
 8001baa:	2b40      	cmp	r3, #64	; 0x40
 8001bac:	d10a      	bne.n	8001bc4 <HAL_GPIO_EXTI_Callback+0x94>
 8001bae:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d106      	bne.n	8001bc4 <HAL_GPIO_EXTI_Callback+0x94>
		{
			setHomeJ4 = 1;
 8001bb6:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor4);
 8001bbc:	4814      	ldr	r0, [pc, #80]	; (8001c10 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001bbe:	f005 fd7e 	bl	80076be <MOTOR_reset>
		{
 8001bc2:	e00e      	b.n	8001be2 <HAL_GPIO_EXTI_Callback+0xb2>
		}
		else if(GPIO_Pin == GPIO_PIN_7 && setHomeJ1 == 0)
 8001bc4:	88fb      	ldrh	r3, [r7, #6]
 8001bc6:	2b80      	cmp	r3, #128	; 0x80
 8001bc8:	d10b      	bne.n	8001be2 <HAL_GPIO_EXTI_Callback+0xb2>
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d107      	bne.n	8001be2 <HAL_GPIO_EXTI_Callback+0xb2>
		{
			setHomeJ1 = 1;
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor1);
 8001bd8:	480f      	ldr	r0, [pc, #60]	; (8001c18 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001bda:	f005 fd70 	bl	80076be <MOTOR_reset>
		}
	}
}
 8001bde:	e000      	b.n	8001be2 <HAL_GPIO_EXTI_Callback+0xb2>
		{
 8001be0:	bf00      	nop
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200005ea 	.word	0x200005ea
 8001bf0:	200005e4 	.word	0x200005e4
 8001bf4:	200005e6 	.word	0x200005e6
 8001bf8:	200006a4 	.word	0x200006a4
 8001bfc:	200005e7 	.word	0x200005e7
 8001c00:	c3480000 	.word	0xc3480000
 8001c04:	2000075c 	.word	0x2000075c
 8001c08:	200005e8 	.word	0x200005e8
 8001c0c:	43480000 	.word	0x43480000
 8001c10:	20000814 	.word	0x20000814
 8001c14:	200005e5 	.word	0x200005e5
 8001c18:	200005ec 	.word	0x200005ec

08001c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c20:	b090      	sub	sp, #64	; 0x40
 8001c22:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c24:	f001 f9c0 	bl	8002fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c28:	f000 f950 	bl	8001ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c2c:	f000 fd08 	bl	8002640 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c30:	f000 fce6 	bl	8002600 <MX_DMA_Init>
  MX_TIM1_Init();
 8001c34:	f000 f9b4 	bl	8001fa0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001c38:	f000 fa0a 	bl	8002050 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001c3c:	f000 fa5c 	bl	80020f8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001c40:	f000 faae 	bl	80021a0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001c44:	f000 fb44 	bl	80022d0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001c48:	f000 fb96 	bl	8002378 <MX_TIM8_Init>
  MX_TIM9_Init();
 8001c4c:	f000 fc40 	bl	80024d0 <MX_TIM9_Init>
  MX_USART3_UART_Init();
 8001c50:	f000 fcac 	bl	80025ac <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  MOTOR_setPIDPosition(&motor1, 5, 0, 0, 5);
 8001c54:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8001c58:	ed9f 1a88 	vldr	s2, [pc, #544]	; 8001e7c <main+0x260>
 8001c5c:	eddf 0a87 	vldr	s1, [pc, #540]	; 8001e7c <main+0x260>
 8001c60:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001c64:	4886      	ldr	r0, [pc, #536]	; (8001e80 <main+0x264>)
 8001c66:	f005 fbf3 	bl	8007450 <MOTOR_setPIDPosition>
  MOTOR_setPIDVelocity(&motor1, 1, 60, 0, 5);
 8001c6a:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8001c6e:	ed9f 1a83 	vldr	s2, [pc, #524]	; 8001e7c <main+0x260>
 8001c72:	eddf 0a84 	vldr	s1, [pc, #528]	; 8001e84 <main+0x268>
 8001c76:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001c7a:	4881      	ldr	r0, [pc, #516]	; (8001e80 <main+0x264>)
 8001c7c:	f005 fbcc 	bl	8007418 <MOTOR_setPIDVelocity>
  MOTOR_setOutputRange(&motor1, -999, 999);
 8001c80:	eddf 0a81 	vldr	s1, [pc, #516]	; 8001e88 <main+0x26c>
 8001c84:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8001e8c <main+0x270>
 8001c88:	487d      	ldr	r0, [pc, #500]	; (8001e80 <main+0x264>)
 8001c8a:	f005 fbff 	bl	800748c <MOTOR_setOutputRange>
  MOTOR_setWindupRange(&motor1, -900, 900);
 8001c8e:	eddf 0a80 	vldr	s1, [pc, #512]	; 8001e90 <main+0x274>
 8001c92:	ed9f 0a80 	vldr	s0, [pc, #512]	; 8001e94 <main+0x278>
 8001c96:	487a      	ldr	r0, [pc, #488]	; (8001e80 <main+0x264>)
 8001c98:	f005 fc1a 	bl	80074d0 <MOTOR_setWindupRange>
  MOTOR_init(&motor1, &driver1, 3.75, GPIO_PIN_7, 500);
 8001c9c:	eddf 0a7e 	vldr	s1, [pc, #504]	; 8001e98 <main+0x27c>
 8001ca0:	2280      	movs	r2, #128	; 0x80
 8001ca2:	eeb0 0a0e 	vmov.f32	s0, #14	; 0x40700000  3.750
 8001ca6:	497d      	ldr	r1, [pc, #500]	; (8001e9c <main+0x280>)
 8001ca8:	4875      	ldr	r0, [pc, #468]	; (8001e80 <main+0x264>)
 8001caa:	f005 fca3 	bl	80075f4 <MOTOR_init>

  MOTOR_setPIDPosition(&motor2, 5, 0, 0, 5);
 8001cae:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8001cb2:	ed9f 1a72 	vldr	s2, [pc, #456]	; 8001e7c <main+0x260>
 8001cb6:	eddf 0a71 	vldr	s1, [pc, #452]	; 8001e7c <main+0x260>
 8001cba:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001cbe:	4878      	ldr	r0, [pc, #480]	; (8001ea0 <main+0x284>)
 8001cc0:	f005 fbc6 	bl	8007450 <MOTOR_setPIDPosition>
  MOTOR_setPIDVelocity(&motor2, 1, 60, 0, 5);
 8001cc4:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8001cc8:	ed9f 1a6c 	vldr	s2, [pc, #432]	; 8001e7c <main+0x260>
 8001ccc:	eddf 0a6d 	vldr	s1, [pc, #436]	; 8001e84 <main+0x268>
 8001cd0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001cd4:	4872      	ldr	r0, [pc, #456]	; (8001ea0 <main+0x284>)
 8001cd6:	f005 fb9f 	bl	8007418 <MOTOR_setPIDVelocity>
  MOTOR_setOutputRange(&motor2, -999, 999);
 8001cda:	eddf 0a6b 	vldr	s1, [pc, #428]	; 8001e88 <main+0x26c>
 8001cde:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8001e8c <main+0x270>
 8001ce2:	486f      	ldr	r0, [pc, #444]	; (8001ea0 <main+0x284>)
 8001ce4:	f005 fbd2 	bl	800748c <MOTOR_setOutputRange>
  MOTOR_setWindupRange(&motor2, -900, 900);
 8001ce8:	eddf 0a69 	vldr	s1, [pc, #420]	; 8001e90 <main+0x274>
 8001cec:	ed9f 0a69 	vldr	s0, [pc, #420]	; 8001e94 <main+0x278>
 8001cf0:	486b      	ldr	r0, [pc, #428]	; (8001ea0 <main+0x284>)
 8001cf2:	f005 fbed 	bl	80074d0 <MOTOR_setWindupRange>
  MOTOR_init(&motor2, &driver2, 3.75, GPIO_PIN_11, 500);
 8001cf6:	eddf 0a68 	vldr	s1, [pc, #416]	; 8001e98 <main+0x27c>
 8001cfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cfe:	eeb0 0a0e 	vmov.f32	s0, #14	; 0x40700000  3.750
 8001d02:	4968      	ldr	r1, [pc, #416]	; (8001ea4 <main+0x288>)
 8001d04:	4866      	ldr	r0, [pc, #408]	; (8001ea0 <main+0x284>)
 8001d06:	f005 fc75 	bl	80075f4 <MOTOR_init>

  MOTOR_setPIDPosition(&motor3, 5, 0, 0, 5);
 8001d0a:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8001d0e:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 8001e7c <main+0x260>
 8001d12:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8001e7c <main+0x260>
 8001d16:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001d1a:	4863      	ldr	r0, [pc, #396]	; (8001ea8 <main+0x28c>)
 8001d1c:	f005 fb98 	bl	8007450 <MOTOR_setPIDPosition>
  MOTOR_setPIDVelocity(&motor3, 1, 60, 0, 5);
 8001d20:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8001d24:	ed9f 1a55 	vldr	s2, [pc, #340]	; 8001e7c <main+0x260>
 8001d28:	eddf 0a56 	vldr	s1, [pc, #344]	; 8001e84 <main+0x268>
 8001d2c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001d30:	485d      	ldr	r0, [pc, #372]	; (8001ea8 <main+0x28c>)
 8001d32:	f005 fb71 	bl	8007418 <MOTOR_setPIDVelocity>
  MOTOR_setOutputRange(&motor3, -999, 999);
 8001d36:	eddf 0a54 	vldr	s1, [pc, #336]	; 8001e88 <main+0x26c>
 8001d3a:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8001e8c <main+0x270>
 8001d3e:	485a      	ldr	r0, [pc, #360]	; (8001ea8 <main+0x28c>)
 8001d40:	f005 fba4 	bl	800748c <MOTOR_setOutputRange>
  MOTOR_setWindupRange(&motor3, -900, 900);
 8001d44:	eddf 0a52 	vldr	s1, [pc, #328]	; 8001e90 <main+0x274>
 8001d48:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8001e94 <main+0x278>
 8001d4c:	4856      	ldr	r0, [pc, #344]	; (8001ea8 <main+0x28c>)
 8001d4e:	f005 fbbf 	bl	80074d0 <MOTOR_setWindupRange>
  MOTOR_init(&motor3, &driver3, 3.75, GPIO_PIN_2, 500);
 8001d52:	eddf 0a51 	vldr	s1, [pc, #324]	; 8001e98 <main+0x27c>
 8001d56:	2204      	movs	r2, #4
 8001d58:	eeb0 0a0e 	vmov.f32	s0, #14	; 0x40700000  3.750
 8001d5c:	4953      	ldr	r1, [pc, #332]	; (8001eac <main+0x290>)
 8001d5e:	4852      	ldr	r0, [pc, #328]	; (8001ea8 <main+0x28c>)
 8001d60:	f005 fc48 	bl	80075f4 <MOTOR_init>

  MOTOR_setPIDPosition(&motor4, 5, 0, 0, 5);
 8001d64:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8001d68:	ed9f 1a44 	vldr	s2, [pc, #272]	; 8001e7c <main+0x260>
 8001d6c:	eddf 0a43 	vldr	s1, [pc, #268]	; 8001e7c <main+0x260>
 8001d70:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001d74:	484e      	ldr	r0, [pc, #312]	; (8001eb0 <main+0x294>)
 8001d76:	f005 fb6b 	bl	8007450 <MOTOR_setPIDPosition>
  MOTOR_setPIDVelocity(&motor4, 1, 50, 0, 5);
 8001d7a:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8001d7e:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 8001e7c <main+0x260>
 8001d82:	eddf 0a4c 	vldr	s1, [pc, #304]	; 8001eb4 <main+0x298>
 8001d86:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001d8a:	4849      	ldr	r0, [pc, #292]	; (8001eb0 <main+0x294>)
 8001d8c:	f005 fb44 	bl	8007418 <MOTOR_setPIDVelocity>
  MOTOR_setOutputRange(&motor4, -999, 999);
 8001d90:	eddf 0a3d 	vldr	s1, [pc, #244]	; 8001e88 <main+0x26c>
 8001d94:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8001e8c <main+0x270>
 8001d98:	4845      	ldr	r0, [pc, #276]	; (8001eb0 <main+0x294>)
 8001d9a:	f005 fb77 	bl	800748c <MOTOR_setOutputRange>
  MOTOR_setWindupRange(&motor4, -900, 900);
 8001d9e:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8001e90 <main+0x274>
 8001da2:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8001e94 <main+0x278>
 8001da6:	4842      	ldr	r0, [pc, #264]	; (8001eb0 <main+0x294>)
 8001da8:	f005 fb92 	bl	80074d0 <MOTOR_setWindupRange>
  MOTOR_init(&motor4, &driver4, 1.875, GPIO_PIN_6, 500);
 8001dac:	eddf 0a3a 	vldr	s1, [pc, #232]	; 8001e98 <main+0x27c>
 8001db0:	2240      	movs	r2, #64	; 0x40
 8001db2:	eeb7 0a0e 	vmov.f32	s0, #126	; 0x3ff00000  1.875
 8001db6:	4940      	ldr	r1, [pc, #256]	; (8001eb8 <main+0x29c>)
 8001db8:	483d      	ldr	r0, [pc, #244]	; (8001eb0 <main+0x294>)
 8001dba:	f005 fc1b 	bl	80075f4 <MOTOR_init>


  HAL_TIM_Base_Start_IT(&htim9);
 8001dbe:	483f      	ldr	r0, [pc, #252]	; (8001ebc <main+0x2a0>)
 8001dc0:	f002 fde2 	bl	8004988 <HAL_TIM_Base_Start_IT>
  htim9.Instance->ARR = 999;
 8001dc4:	4b3d      	ldr	r3, [pc, #244]	; (8001ebc <main+0x2a0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dcc:	62da      	str	r2, [r3, #44]	; 0x2c
  UartIdle_Init();
 8001dce:	f7ff faa5 	bl	800131c <UartIdle_Init>

  uint32_t pre_time = HAL_GetTick();
 8001dd2:	f001 f94f 	bl	8003074 <HAL_GetTick>
 8001dd6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    UART_Handle(uartLogBuffer);
 8001dd8:	4839      	ldr	r0, [pc, #228]	; (8001ec0 <main+0x2a4>)
 8001dda:	f7ff fa1b 	bl	8001214 <UART_Handle>
    SetHome();
 8001dde:	f7ff fd0d 	bl	80017fc <SetHome>
    if (HAL_GetTick() - pre_time >= 500)
 8001de2:	f001 f947 	bl	8003074 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001df0:	d3f2      	bcc.n	8001dd8 <main+0x1bc>
    {
      sprintf(data_angle, "t1:%.0f,t2:%.0f,t3:%.0f,t4:%.0f\n", (float)MOTOR_getPos(&motor1), (float)MOTOR_getPos(&motor2), (float)MOTOR_getPos(&motor3), (float)MOTOR_getPos(&motor4));
 8001df2:	4823      	ldr	r0, [pc, #140]	; (8001e80 <main+0x264>)
 8001df4:	f005 fc9c 	bl	8007730 <MOTOR_getPos>
 8001df8:	ee10 3a10 	vmov	r3, s0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe fba3 	bl	8000548 <__aeabi_f2d>
 8001e02:	4682      	mov	sl, r0
 8001e04:	468b      	mov	fp, r1
 8001e06:	4826      	ldr	r0, [pc, #152]	; (8001ea0 <main+0x284>)
 8001e08:	f005 fc92 	bl	8007730 <MOTOR_getPos>
 8001e0c:	ee10 3a10 	vmov	r3, s0
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fb99 	bl	8000548 <__aeabi_f2d>
 8001e16:	4604      	mov	r4, r0
 8001e18:	460d      	mov	r5, r1
 8001e1a:	4823      	ldr	r0, [pc, #140]	; (8001ea8 <main+0x28c>)
 8001e1c:	f005 fc88 	bl	8007730 <MOTOR_getPos>
 8001e20:	ee10 3a10 	vmov	r3, s0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fb8f 	bl	8000548 <__aeabi_f2d>
 8001e2a:	4680      	mov	r8, r0
 8001e2c:	4689      	mov	r9, r1
 8001e2e:	4820      	ldr	r0, [pc, #128]	; (8001eb0 <main+0x294>)
 8001e30:	f005 fc7e 	bl	8007730 <MOTOR_getPos>
 8001e34:	ee10 3a10 	vmov	r3, s0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe fb85 	bl	8000548 <__aeabi_f2d>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	1d38      	adds	r0, r7, #4
 8001e44:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001e48:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001e4c:	e9cd 4500 	strd	r4, r5, [sp]
 8001e50:	4652      	mov	r2, sl
 8001e52:	465b      	mov	r3, fp
 8001e54:	491b      	ldr	r1, [pc, #108]	; (8001ec4 <main+0x2a8>)
 8001e56:	f006 fcb9 	bl	80087cc <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)data_angle, strlen(data_angle), HAL_MAX_DELAY);
 8001e5a:	1d3b      	adds	r3, r7, #4
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe f9b7 	bl	80001d0 <strlen>
 8001e62:	4603      	mov	r3, r0
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	1d39      	adds	r1, r7, #4
 8001e68:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6c:	4816      	ldr	r0, [pc, #88]	; (8001ec8 <main+0x2ac>)
 8001e6e:	f003 ff4a 	bl	8005d06 <HAL_UART_Transmit>

      pre_time = HAL_GetTick();
 8001e72:	f001 f8ff 	bl	8003074 <HAL_GetTick>
 8001e76:	6278      	str	r0, [r7, #36]	; 0x24
    UART_Handle(uartLogBuffer);
 8001e78:	e7ae      	b.n	8001dd8 <main+0x1bc>
 8001e7a:	bf00      	nop
 8001e7c:	00000000 	.word	0x00000000
 8001e80:	200005ec 	.word	0x200005ec
 8001e84:	42700000 	.word	0x42700000
 8001e88:	4479c000 	.word	0x4479c000
 8001e8c:	c479c000 	.word	0xc479c000
 8001e90:	44610000 	.word	0x44610000
 8001e94:	c4610000 	.word	0xc4610000
 8001e98:	43fa0000 	.word	0x43fa0000
 8001e9c:	20000000 	.word	0x20000000
 8001ea0:	200006a4 	.word	0x200006a4
 8001ea4:	20000038 	.word	0x20000038
 8001ea8:	2000075c 	.word	0x2000075c
 8001eac:	20000070 	.word	0x20000070
 8001eb0:	20000814 	.word	0x20000814
 8001eb4:	42480000 	.word	0x42480000
 8001eb8:	200000a8 	.word	0x200000a8
 8001ebc:	20000490 	.word	0x20000490
 8001ec0:	2000057c 	.word	0x2000057c
 8001ec4:	0800ccb0 	.word	0x0800ccb0
 8001ec8:	200004d8 	.word	0x200004d8

08001ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b094      	sub	sp, #80	; 0x50
 8001ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ed2:	f107 0320 	add.w	r3, r7, #32
 8001ed6:	2230      	movs	r2, #48	; 0x30
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4618      	mov	r0, r3
 8001edc:	f005 fdee 	bl	8007abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ee0:	f107 030c 	add.w	r3, r7, #12
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	4b28      	ldr	r3, [pc, #160]	; (8001f98 <SystemClock_Config+0xcc>)
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	4a27      	ldr	r2, [pc, #156]	; (8001f98 <SystemClock_Config+0xcc>)
 8001efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efe:	6413      	str	r3, [r2, #64]	; 0x40
 8001f00:	4b25      	ldr	r3, [pc, #148]	; (8001f98 <SystemClock_Config+0xcc>)
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <SystemClock_Config+0xd0>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a21      	ldr	r2, [pc, #132]	; (8001f9c <SystemClock_Config+0xd0>)
 8001f16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <SystemClock_Config+0xd0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f30:	2310      	movs	r3, #16
 8001f32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f34:	2302      	movs	r3, #2
 8001f36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f3c:	2308      	movs	r3, #8
 8001f3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f40:	23a8      	movs	r3, #168	; 0xa8
 8001f42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f44:	2302      	movs	r3, #2
 8001f46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f48:	2304      	movs	r3, #4
 8001f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f4c:	f107 0320 	add.w	r3, r7, #32
 8001f50:	4618      	mov	r0, r3
 8001f52:	f001 ffc9 	bl	8003ee8 <HAL_RCC_OscConfig>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f5c:	f000 fc1a 	bl	8002794 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f60:	230f      	movs	r3, #15
 8001f62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f64:	2302      	movs	r3, #2
 8001f66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f78:	f107 030c 	add.w	r3, r7, #12
 8001f7c:	2105      	movs	r1, #5
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f002 fa2a 	bl	80043d8 <HAL_RCC_ClockConfig>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001f8a:	f000 fc03 	bl	8002794 <Error_Handler>
  }
}
 8001f8e:	bf00      	nop
 8001f90:	3750      	adds	r7, #80	; 0x50
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40007000 	.word	0x40007000

08001fa0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08c      	sub	sp, #48	; 0x30
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fa6:	f107 030c 	add.w	r3, r7, #12
 8001faa:	2224      	movs	r2, #36	; 0x24
 8001fac:	2100      	movs	r1, #0
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f005 fd84 	bl	8007abc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb4:	1d3b      	adds	r3, r7, #4
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fbc:	4b22      	ldr	r3, [pc, #136]	; (8002048 <MX_TIM1_Init+0xa8>)
 8001fbe:	4a23      	ldr	r2, [pc, #140]	; (800204c <MX_TIM1_Init+0xac>)
 8001fc0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001fc2:	4b21      	ldr	r3, [pc, #132]	; (8002048 <MX_TIM1_Init+0xa8>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc8:	4b1f      	ldr	r3, [pc, #124]	; (8002048 <MX_TIM1_Init+0xa8>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001fce:	4b1e      	ldr	r3, [pc, #120]	; (8002048 <MX_TIM1_Init+0xa8>)
 8001fd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fd4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd6:	4b1c      	ldr	r3, [pc, #112]	; (8002048 <MX_TIM1_Init+0xa8>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fdc:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <MX_TIM1_Init+0xa8>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe2:	4b19      	ldr	r3, [pc, #100]	; (8002048 <MX_TIM1_Init+0xa8>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fec:	2300      	movs	r3, #0
 8001fee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002000:	2301      	movs	r3, #1
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002004:	2300      	movs	r3, #0
 8002006:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800200c:	f107 030c 	add.w	r3, r7, #12
 8002010:	4619      	mov	r1, r3
 8002012:	480d      	ldr	r0, [pc, #52]	; (8002048 <MX_TIM1_Init+0xa8>)
 8002014:	f002 fe4a 	bl	8004cac <HAL_TIM_Encoder_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800201e:	f000 fbb9 	bl	8002794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002022:	2300      	movs	r3, #0
 8002024:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002026:	2300      	movs	r3, #0
 8002028:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800202a:	1d3b      	adds	r3, r7, #4
 800202c:	4619      	mov	r1, r3
 800202e:	4806      	ldr	r0, [pc, #24]	; (8002048 <MX_TIM1_Init+0xa8>)
 8002030:	f003 fd3a 	bl	8005aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800203a:	f000 fbab 	bl	8002794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800203e:	bf00      	nop
 8002040:	3730      	adds	r7, #48	; 0x30
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200002e0 	.word	0x200002e0
 800204c:	40010000 	.word	0x40010000

08002050 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08c      	sub	sp, #48	; 0x30
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002056:	f107 030c 	add.w	r3, r7, #12
 800205a:	2224      	movs	r2, #36	; 0x24
 800205c:	2100      	movs	r1, #0
 800205e:	4618      	mov	r0, r3
 8002060:	f005 fd2c 	bl	8007abc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002064:	1d3b      	adds	r3, r7, #4
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800206c:	4b21      	ldr	r3, [pc, #132]	; (80020f4 <MX_TIM2_Init+0xa4>)
 800206e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002072:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002074:	4b1f      	ldr	r3, [pc, #124]	; (80020f4 <MX_TIM2_Init+0xa4>)
 8002076:	2200      	movs	r2, #0
 8002078:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800207a:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <MX_TIM2_Init+0xa4>)
 800207c:	2200      	movs	r2, #0
 800207e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002080:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <MX_TIM2_Init+0xa4>)
 8002082:	f04f 32ff 	mov.w	r2, #4294967295
 8002086:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <MX_TIM2_Init+0xa4>)
 800208a:	2200      	movs	r2, #0
 800208c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800208e:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <MX_TIM2_Init+0xa4>)
 8002090:	2200      	movs	r2, #0
 8002092:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002094:	2303      	movs	r3, #3
 8002096:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002098:	2300      	movs	r3, #0
 800209a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800209c:	2301      	movs	r3, #1
 800209e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020a8:	2300      	movs	r3, #0
 80020aa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020ac:	2301      	movs	r3, #1
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020b0:	2300      	movs	r3, #0
 80020b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80020b8:	f107 030c 	add.w	r3, r7, #12
 80020bc:	4619      	mov	r1, r3
 80020be:	480d      	ldr	r0, [pc, #52]	; (80020f4 <MX_TIM2_Init+0xa4>)
 80020c0:	f002 fdf4 	bl	8004cac <HAL_TIM_Encoder_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80020ca:	f000 fb63 	bl	8002794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020d6:	1d3b      	adds	r3, r7, #4
 80020d8:	4619      	mov	r1, r3
 80020da:	4806      	ldr	r0, [pc, #24]	; (80020f4 <MX_TIM2_Init+0xa4>)
 80020dc:	f003 fce4 	bl	8005aa8 <HAL_TIMEx_MasterConfigSynchronization>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80020e6:	f000 fb55 	bl	8002794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020ea:	bf00      	nop
 80020ec:	3730      	adds	r7, #48	; 0x30
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000328 	.word	0x20000328

080020f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08c      	sub	sp, #48	; 0x30
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020fe:	f107 030c 	add.w	r3, r7, #12
 8002102:	2224      	movs	r2, #36	; 0x24
 8002104:	2100      	movs	r1, #0
 8002106:	4618      	mov	r0, r3
 8002108:	f005 fcd8 	bl	8007abc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800210c:	1d3b      	adds	r3, r7, #4
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002114:	4b20      	ldr	r3, [pc, #128]	; (8002198 <MX_TIM3_Init+0xa0>)
 8002116:	4a21      	ldr	r2, [pc, #132]	; (800219c <MX_TIM3_Init+0xa4>)
 8002118:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800211a:	4b1f      	ldr	r3, [pc, #124]	; (8002198 <MX_TIM3_Init+0xa0>)
 800211c:	2200      	movs	r2, #0
 800211e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002120:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <MX_TIM3_Init+0xa0>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002126:	4b1c      	ldr	r3, [pc, #112]	; (8002198 <MX_TIM3_Init+0xa0>)
 8002128:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800212c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800212e:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <MX_TIM3_Init+0xa0>)
 8002130:	2200      	movs	r2, #0
 8002132:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002134:	4b18      	ldr	r3, [pc, #96]	; (8002198 <MX_TIM3_Init+0xa0>)
 8002136:	2200      	movs	r2, #0
 8002138:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800213a:	2303      	movs	r3, #3
 800213c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002142:	2301      	movs	r3, #1
 8002144:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002146:	2300      	movs	r3, #0
 8002148:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800214e:	2300      	movs	r3, #0
 8002150:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002152:	2301      	movs	r3, #1
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002156:	2300      	movs	r3, #0
 8002158:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800215e:	f107 030c 	add.w	r3, r7, #12
 8002162:	4619      	mov	r1, r3
 8002164:	480c      	ldr	r0, [pc, #48]	; (8002198 <MX_TIM3_Init+0xa0>)
 8002166:	f002 fda1 	bl	8004cac <HAL_TIM_Encoder_Init>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002170:	f000 fb10 	bl	8002794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002174:	2300      	movs	r3, #0
 8002176:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002178:	2300      	movs	r3, #0
 800217a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800217c:	1d3b      	adds	r3, r7, #4
 800217e:	4619      	mov	r1, r3
 8002180:	4805      	ldr	r0, [pc, #20]	; (8002198 <MX_TIM3_Init+0xa0>)
 8002182:	f003 fc91 	bl	8005aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800218c:	f000 fb02 	bl	8002794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002190:	bf00      	nop
 8002192:	3730      	adds	r7, #48	; 0x30
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20000370 	.word	0x20000370
 800219c:	40000400 	.word	0x40000400

080021a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08e      	sub	sp, #56	; 0x38
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b4:	f107 0320 	add.w	r3, r7, #32
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021be:	1d3b      	adds	r3, r7, #4
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
 80021cc:	615a      	str	r2, [r3, #20]
 80021ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021d0:	4b3d      	ldr	r3, [pc, #244]	; (80022c8 <MX_TIM4_Init+0x128>)
 80021d2:	4a3e      	ldr	r2, [pc, #248]	; (80022cc <MX_TIM4_Init+0x12c>)
 80021d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 80021d6:	4b3c      	ldr	r3, [pc, #240]	; (80022c8 <MX_TIM4_Init+0x128>)
 80021d8:	2253      	movs	r2, #83	; 0x53
 80021da:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021dc:	4b3a      	ldr	r3, [pc, #232]	; (80022c8 <MX_TIM4_Init+0x128>)
 80021de:	2200      	movs	r2, #0
 80021e0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80021e2:	4b39      	ldr	r3, [pc, #228]	; (80022c8 <MX_TIM4_Init+0x128>)
 80021e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ea:	4b37      	ldr	r3, [pc, #220]	; (80022c8 <MX_TIM4_Init+0x128>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f0:	4b35      	ldr	r3, [pc, #212]	; (80022c8 <MX_TIM4_Init+0x128>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021f6:	4834      	ldr	r0, [pc, #208]	; (80022c8 <MX_TIM4_Init+0x128>)
 80021f8:	f002 fb0e 	bl	8004818 <HAL_TIM_Base_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002202:	f000 fac7 	bl	8002794 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800220a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800220c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002210:	4619      	mov	r1, r3
 8002212:	482d      	ldr	r0, [pc, #180]	; (80022c8 <MX_TIM4_Init+0x128>)
 8002214:	f003 f848 	bl	80052a8 <HAL_TIM_ConfigClockSource>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800221e:	f000 fab9 	bl	8002794 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002222:	4829      	ldr	r0, [pc, #164]	; (80022c8 <MX_TIM4_Init+0x128>)
 8002224:	f002 fc20 	bl	8004a68 <HAL_TIM_PWM_Init>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800222e:	f000 fab1 	bl	8002794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002232:	2300      	movs	r3, #0
 8002234:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002236:	2300      	movs	r3, #0
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800223a:	f107 0320 	add.w	r3, r7, #32
 800223e:	4619      	mov	r1, r3
 8002240:	4821      	ldr	r0, [pc, #132]	; (80022c8 <MX_TIM4_Init+0x128>)
 8002242:	f003 fc31 	bl	8005aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800224c:	f000 faa2 	bl	8002794 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002250:	2360      	movs	r3, #96	; 0x60
 8002252:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	2200      	movs	r2, #0
 8002264:	4619      	mov	r1, r3
 8002266:	4818      	ldr	r0, [pc, #96]	; (80022c8 <MX_TIM4_Init+0x128>)
 8002268:	f002 ff5c 	bl	8005124 <HAL_TIM_PWM_ConfigChannel>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002272:	f000 fa8f 	bl	8002794 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	2204      	movs	r2, #4
 800227a:	4619      	mov	r1, r3
 800227c:	4812      	ldr	r0, [pc, #72]	; (80022c8 <MX_TIM4_Init+0x128>)
 800227e:	f002 ff51 	bl	8005124 <HAL_TIM_PWM_ConfigChannel>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8002288:	f000 fa84 	bl	8002794 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800228c:	1d3b      	adds	r3, r7, #4
 800228e:	2208      	movs	r2, #8
 8002290:	4619      	mov	r1, r3
 8002292:	480d      	ldr	r0, [pc, #52]	; (80022c8 <MX_TIM4_Init+0x128>)
 8002294:	f002 ff46 	bl	8005124 <HAL_TIM_PWM_ConfigChannel>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800229e:	f000 fa79 	bl	8002794 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022a2:	1d3b      	adds	r3, r7, #4
 80022a4:	220c      	movs	r2, #12
 80022a6:	4619      	mov	r1, r3
 80022a8:	4807      	ldr	r0, [pc, #28]	; (80022c8 <MX_TIM4_Init+0x128>)
 80022aa:	f002 ff3b 	bl	8005124 <HAL_TIM_PWM_ConfigChannel>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 80022b4:	f000 fa6e 	bl	8002794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80022b8:	4803      	ldr	r0, [pc, #12]	; (80022c8 <MX_TIM4_Init+0x128>)
 80022ba:	f000 fbf9 	bl	8002ab0 <HAL_TIM_MspPostInit>

}
 80022be:	bf00      	nop
 80022c0:	3738      	adds	r7, #56	; 0x38
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	200003b8 	.word	0x200003b8
 80022cc:	40000800 	.word	0x40000800

080022d0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08c      	sub	sp, #48	; 0x30
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022d6:	f107 030c 	add.w	r3, r7, #12
 80022da:	2224      	movs	r2, #36	; 0x24
 80022dc:	2100      	movs	r1, #0
 80022de:	4618      	mov	r0, r3
 80022e0:	f005 fbec 	bl	8007abc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e4:	1d3b      	adds	r3, r7, #4
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80022ec:	4b20      	ldr	r3, [pc, #128]	; (8002370 <MX_TIM5_Init+0xa0>)
 80022ee:	4a21      	ldr	r2, [pc, #132]	; (8002374 <MX_TIM5_Init+0xa4>)
 80022f0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80022f2:	4b1f      	ldr	r3, [pc, #124]	; (8002370 <MX_TIM5_Init+0xa0>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f8:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <MX_TIM5_Init+0xa0>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80022fe:	4b1c      	ldr	r3, [pc, #112]	; (8002370 <MX_TIM5_Init+0xa0>)
 8002300:	f04f 32ff 	mov.w	r2, #4294967295
 8002304:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002306:	4b1a      	ldr	r3, [pc, #104]	; (8002370 <MX_TIM5_Init+0xa0>)
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800230c:	4b18      	ldr	r3, [pc, #96]	; (8002370 <MX_TIM5_Init+0xa0>)
 800230e:	2200      	movs	r2, #0
 8002310:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002312:	2303      	movs	r3, #3
 8002314:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002316:	2300      	movs	r3, #0
 8002318:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800231a:	2301      	movs	r3, #1
 800231c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800231e:	2300      	movs	r3, #0
 8002320:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002326:	2300      	movs	r3, #0
 8002328:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800232a:	2301      	movs	r3, #1
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800232e:	2300      	movs	r3, #0
 8002330:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002332:	2300      	movs	r3, #0
 8002334:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002336:	f107 030c 	add.w	r3, r7, #12
 800233a:	4619      	mov	r1, r3
 800233c:	480c      	ldr	r0, [pc, #48]	; (8002370 <MX_TIM5_Init+0xa0>)
 800233e:	f002 fcb5 	bl	8004cac <HAL_TIM_Encoder_Init>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002348:	f000 fa24 	bl	8002794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800234c:	2300      	movs	r3, #0
 800234e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002350:	2300      	movs	r3, #0
 8002352:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002354:	1d3b      	adds	r3, r7, #4
 8002356:	4619      	mov	r1, r3
 8002358:	4805      	ldr	r0, [pc, #20]	; (8002370 <MX_TIM5_Init+0xa0>)
 800235a:	f003 fba5 	bl	8005aa8 <HAL_TIMEx_MasterConfigSynchronization>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002364:	f000 fa16 	bl	8002794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002368:	bf00      	nop
 800236a:	3730      	adds	r7, #48	; 0x30
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000400 	.word	0x20000400
 8002374:	40000c00 	.word	0x40000c00

08002378 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b096      	sub	sp, #88	; 0x58
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800237e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800238c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	605a      	str	r2, [r3, #4]
 80023a0:	609a      	str	r2, [r3, #8]
 80023a2:	60da      	str	r2, [r3, #12]
 80023a4:	611a      	str	r2, [r3, #16]
 80023a6:	615a      	str	r2, [r3, #20]
 80023a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023aa:	1d3b      	adds	r3, r7, #4
 80023ac:	2220      	movs	r2, #32
 80023ae:	2100      	movs	r1, #0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f005 fb83 	bl	8007abc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80023b6:	4b44      	ldr	r3, [pc, #272]	; (80024c8 <MX_TIM8_Init+0x150>)
 80023b8:	4a44      	ldr	r2, [pc, #272]	; (80024cc <MX_TIM8_Init+0x154>)
 80023ba:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 80023bc:	4b42      	ldr	r3, [pc, #264]	; (80024c8 <MX_TIM8_Init+0x150>)
 80023be:	22a7      	movs	r2, #167	; 0xa7
 80023c0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c2:	4b41      	ldr	r3, [pc, #260]	; (80024c8 <MX_TIM8_Init+0x150>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 80023c8:	4b3f      	ldr	r3, [pc, #252]	; (80024c8 <MX_TIM8_Init+0x150>)
 80023ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023ce:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d0:	4b3d      	ldr	r3, [pc, #244]	; (80024c8 <MX_TIM8_Init+0x150>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80023d6:	4b3c      	ldr	r3, [pc, #240]	; (80024c8 <MX_TIM8_Init+0x150>)
 80023d8:	2200      	movs	r2, #0
 80023da:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023dc:	4b3a      	ldr	r3, [pc, #232]	; (80024c8 <MX_TIM8_Init+0x150>)
 80023de:	2200      	movs	r2, #0
 80023e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80023e2:	4839      	ldr	r0, [pc, #228]	; (80024c8 <MX_TIM8_Init+0x150>)
 80023e4:	f002 fa18 	bl	8004818 <HAL_TIM_Base_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80023ee:	f000 f9d1 	bl	8002794 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023f6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80023f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023fc:	4619      	mov	r1, r3
 80023fe:	4832      	ldr	r0, [pc, #200]	; (80024c8 <MX_TIM8_Init+0x150>)
 8002400:	f002 ff52 	bl	80052a8 <HAL_TIM_ConfigClockSource>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800240a:	f000 f9c3 	bl	8002794 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800240e:	482e      	ldr	r0, [pc, #184]	; (80024c8 <MX_TIM8_Init+0x150>)
 8002410:	f002 fb2a 	bl	8004a68 <HAL_TIM_PWM_Init>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800241a:	f000 f9bb 	bl	8002794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800241e:	2300      	movs	r3, #0
 8002420:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002422:	2300      	movs	r3, #0
 8002424:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002426:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800242a:	4619      	mov	r1, r3
 800242c:	4826      	ldr	r0, [pc, #152]	; (80024c8 <MX_TIM8_Init+0x150>)
 800242e:	f003 fb3b 	bl	8005aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002438:	f000 f9ac 	bl	8002794 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800243c:	2360      	movs	r3, #96	; 0x60
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002444:	2300      	movs	r3, #0
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002448:	2300      	movs	r3, #0
 800244a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800244c:	2300      	movs	r3, #0
 800244e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002450:	2300      	movs	r3, #0
 8002452:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002454:	2300      	movs	r3, #0
 8002456:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800245c:	2208      	movs	r2, #8
 800245e:	4619      	mov	r1, r3
 8002460:	4819      	ldr	r0, [pc, #100]	; (80024c8 <MX_TIM8_Init+0x150>)
 8002462:	f002 fe5f 	bl	8005124 <HAL_TIM_PWM_ConfigChannel>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800246c:	f000 f992 	bl	8002794 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002474:	220c      	movs	r2, #12
 8002476:	4619      	mov	r1, r3
 8002478:	4813      	ldr	r0, [pc, #76]	; (80024c8 <MX_TIM8_Init+0x150>)
 800247a:	f002 fe53 	bl	8005124 <HAL_TIM_PWM_ConfigChannel>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002484:	f000 f986 	bl	8002794 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002488:	2300      	movs	r3, #0
 800248a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800248c:	2300      	movs	r3, #0
 800248e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002490:	2300      	movs	r3, #0
 8002492:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800249c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024a2:	2300      	movs	r3, #0
 80024a4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80024a6:	1d3b      	adds	r3, r7, #4
 80024a8:	4619      	mov	r1, r3
 80024aa:	4807      	ldr	r0, [pc, #28]	; (80024c8 <MX_TIM8_Init+0x150>)
 80024ac:	f003 fb78 	bl	8005ba0 <HAL_TIMEx_ConfigBreakDeadTime>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80024b6:	f000 f96d 	bl	8002794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80024ba:	4803      	ldr	r0, [pc, #12]	; (80024c8 <MX_TIM8_Init+0x150>)
 80024bc:	f000 faf8 	bl	8002ab0 <HAL_TIM_MspPostInit>

}
 80024c0:	bf00      	nop
 80024c2:	3758      	adds	r7, #88	; 0x58
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000448 	.word	0x20000448
 80024cc:	40010400 	.word	0x40010400

080024d0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08c      	sub	sp, #48	; 0x30
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024d6:	f107 0320 	add.w	r3, r7, #32
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	609a      	str	r2, [r3, #8]
 80024e2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024e4:	1d3b      	adds	r3, r7, #4
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	605a      	str	r2, [r3, #4]
 80024ec:	609a      	str	r2, [r3, #8]
 80024ee:	60da      	str	r2, [r3, #12]
 80024f0:	611a      	str	r2, [r3, #16]
 80024f2:	615a      	str	r2, [r3, #20]
 80024f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80024f6:	4b2b      	ldr	r3, [pc, #172]	; (80025a4 <MX_TIM9_Init+0xd4>)
 80024f8:	4a2b      	ldr	r2, [pc, #172]	; (80025a8 <MX_TIM9_Init+0xd8>)
 80024fa:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 168-1;
 80024fc:	4b29      	ldr	r3, [pc, #164]	; (80025a4 <MX_TIM9_Init+0xd4>)
 80024fe:	22a7      	movs	r2, #167	; 0xa7
 8002500:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002502:	4b28      	ldr	r3, [pc, #160]	; (80025a4 <MX_TIM9_Init+0xd4>)
 8002504:	2200      	movs	r2, #0
 8002506:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8002508:	4b26      	ldr	r3, [pc, #152]	; (80025a4 <MX_TIM9_Init+0xd4>)
 800250a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800250e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002510:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <MX_TIM9_Init+0xd4>)
 8002512:	2200      	movs	r2, #0
 8002514:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002516:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <MX_TIM9_Init+0xd4>)
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800251c:	4821      	ldr	r0, [pc, #132]	; (80025a4 <MX_TIM9_Init+0xd4>)
 800251e:	f002 f97b 	bl	8004818 <HAL_TIM_Base_Init>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8002528:	f000 f934 	bl	8002794 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800252c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002530:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002532:	f107 0320 	add.w	r3, r7, #32
 8002536:	4619      	mov	r1, r3
 8002538:	481a      	ldr	r0, [pc, #104]	; (80025a4 <MX_TIM9_Init+0xd4>)
 800253a:	f002 feb5 	bl	80052a8 <HAL_TIM_ConfigClockSource>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8002544:	f000 f926 	bl	8002794 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002548:	4816      	ldr	r0, [pc, #88]	; (80025a4 <MX_TIM9_Init+0xd4>)
 800254a:	f002 fa8d 	bl	8004a68 <HAL_TIM_PWM_Init>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8002554:	f000 f91e 	bl	8002794 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002558:	2360      	movs	r3, #96	; 0x60
 800255a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002560:	2300      	movs	r3, #0
 8002562:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002568:	1d3b      	adds	r3, r7, #4
 800256a:	2200      	movs	r2, #0
 800256c:	4619      	mov	r1, r3
 800256e:	480d      	ldr	r0, [pc, #52]	; (80025a4 <MX_TIM9_Init+0xd4>)
 8002570:	f002 fdd8 	bl	8005124 <HAL_TIM_PWM_ConfigChannel>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 800257a:	f000 f90b 	bl	8002794 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800257e:	1d3b      	adds	r3, r7, #4
 8002580:	2204      	movs	r2, #4
 8002582:	4619      	mov	r1, r3
 8002584:	4807      	ldr	r0, [pc, #28]	; (80025a4 <MX_TIM9_Init+0xd4>)
 8002586:	f002 fdcd 	bl	8005124 <HAL_TIM_PWM_ConfigChannel>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 8002590:	f000 f900 	bl	8002794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002594:	4803      	ldr	r0, [pc, #12]	; (80025a4 <MX_TIM9_Init+0xd4>)
 8002596:	f000 fa8b 	bl	8002ab0 <HAL_TIM_MspPostInit>

}
 800259a:	bf00      	nop
 800259c:	3730      	adds	r7, #48	; 0x30
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000490 	.word	0x20000490
 80025a8:	40014000 	.word	0x40014000

080025ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80025b0:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <MX_USART3_UART_Init+0x48>)
 80025b2:	4a11      	ldr	r2, [pc, #68]	; (80025f8 <MX_USART3_UART_Init+0x4c>)
 80025b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 250000;
 80025b6:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <MX_USART3_UART_Init+0x48>)
 80025b8:	4a10      	ldr	r2, [pc, #64]	; (80025fc <MX_USART3_UART_Init+0x50>)
 80025ba:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80025bc:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <MX_USART3_UART_Init+0x48>)
 80025be:	2200      	movs	r2, #0
 80025c0:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80025c2:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <MX_USART3_UART_Init+0x48>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80025c8:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <MX_USART3_UART_Init+0x48>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <MX_USART3_UART_Init+0x48>)
 80025d0:	220c      	movs	r2, #12
 80025d2:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025d4:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <MX_USART3_UART_Init+0x48>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <MX_USART3_UART_Init+0x48>)
 80025dc:	2200      	movs	r2, #0
 80025de:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025e0:	4804      	ldr	r0, [pc, #16]	; (80025f4 <MX_USART3_UART_Init+0x48>)
 80025e2:	f003 fb43 	bl	8005c6c <HAL_UART_Init>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 80025ec:	f000 f8d2 	bl	8002794 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80025f0:	bf00      	nop
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	200004d8 	.word	0x200004d8
 80025f8:	40004800 	.word	0x40004800
 80025fc:	0003d090 	.word	0x0003d090

08002600 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	607b      	str	r3, [r7, #4]
 800260a:	4b0c      	ldr	r3, [pc, #48]	; (800263c <MX_DMA_Init+0x3c>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	4a0b      	ldr	r2, [pc, #44]	; (800263c <MX_DMA_Init+0x3c>)
 8002610:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002614:	6313      	str	r3, [r2, #48]	; 0x30
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <MX_DMA_Init+0x3c>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800261e:	607b      	str	r3, [r7, #4]
 8002620:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 3, 0);
 8002622:	2200      	movs	r2, #0
 8002624:	2103      	movs	r1, #3
 8002626:	200c      	movs	r0, #12
 8002628:	f000 fe21 	bl	800326e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800262c:	200c      	movs	r0, #12
 800262e:	f000 fe3a 	bl	80032a6 <HAL_NVIC_EnableIRQ>

}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40023800 	.word	0x40023800

08002640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08a      	sub	sp, #40	; 0x28
 8002644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002646:	f107 0314 	add.w	r3, r7, #20
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	609a      	str	r2, [r3, #8]
 8002652:	60da      	str	r2, [r3, #12]
 8002654:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	4b4a      	ldr	r3, [pc, #296]	; (8002784 <MX_GPIO_Init+0x144>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	4a49      	ldr	r2, [pc, #292]	; (8002784 <MX_GPIO_Init+0x144>)
 8002660:	f043 0304 	orr.w	r3, r3, #4
 8002664:	6313      	str	r3, [r2, #48]	; 0x30
 8002666:	4b47      	ldr	r3, [pc, #284]	; (8002784 <MX_GPIO_Init+0x144>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	4b43      	ldr	r3, [pc, #268]	; (8002784 <MX_GPIO_Init+0x144>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	4a42      	ldr	r2, [pc, #264]	; (8002784 <MX_GPIO_Init+0x144>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6313      	str	r3, [r2, #48]	; 0x30
 8002682:	4b40      	ldr	r3, [pc, #256]	; (8002784 <MX_GPIO_Init+0x144>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	4b3c      	ldr	r3, [pc, #240]	; (8002784 <MX_GPIO_Init+0x144>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	4a3b      	ldr	r2, [pc, #236]	; (8002784 <MX_GPIO_Init+0x144>)
 8002698:	f043 0302 	orr.w	r3, r3, #2
 800269c:	6313      	str	r3, [r2, #48]	; 0x30
 800269e:	4b39      	ldr	r3, [pc, #228]	; (8002784 <MX_GPIO_Init+0x144>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	607b      	str	r3, [r7, #4]
 80026ae:	4b35      	ldr	r3, [pc, #212]	; (8002784 <MX_GPIO_Init+0x144>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	4a34      	ldr	r2, [pc, #208]	; (8002784 <MX_GPIO_Init+0x144>)
 80026b4:	f043 0308 	orr.w	r3, r3, #8
 80026b8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ba:	4b32      	ldr	r3, [pc, #200]	; (8002784 <MX_GPIO_Init+0x144>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	607b      	str	r3, [r7, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80026c6:	2200      	movs	r2, #0
 80026c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026cc:	482e      	ldr	r0, [pc, #184]	; (8002788 <MX_GPIO_Init+0x148>)
 80026ce:	f001 fbbf 	bl	8003e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80026d2:	2200      	movs	r2, #0
 80026d4:	2140      	movs	r1, #64	; 0x40
 80026d6:	482d      	ldr	r0, [pc, #180]	; (800278c <MX_GPIO_Init+0x14c>)
 80026d8:	f001 fbba 	bl	8003e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80026dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e2:	2301      	movs	r3, #1
 80026e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ea:	2300      	movs	r3, #0
 80026ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ee:	f107 0314 	add.w	r3, r7, #20
 80026f2:	4619      	mov	r1, r3
 80026f4:	4824      	ldr	r0, [pc, #144]	; (8002788 <MX_GPIO_Init+0x148>)
 80026f6:	f001 f9f7 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11;
 80026fa:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 80026fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002700:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002706:	2301      	movs	r3, #1
 8002708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800270a:	f107 0314 	add.w	r3, r7, #20
 800270e:	4619      	mov	r1, r3
 8002710:	481d      	ldr	r0, [pc, #116]	; (8002788 <MX_GPIO_Init+0x148>)
 8002712:	f001 f9e9 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD2 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8002716:	2344      	movs	r3, #68	; 0x44
 8002718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800271a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800271e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002720:	2301      	movs	r3, #1
 8002722:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002724:	f107 0314 	add.w	r3, r7, #20
 8002728:	4619      	mov	r1, r3
 800272a:	4819      	ldr	r0, [pc, #100]	; (8002790 <MX_GPIO_Init+0x150>)
 800272c:	f001 f9dc 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002730:	2340      	movs	r3, #64	; 0x40
 8002732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002734:	2301      	movs	r3, #1
 8002736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273c:	2300      	movs	r3, #0
 800273e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	4619      	mov	r1, r3
 8002746:	4811      	ldr	r0, [pc, #68]	; (800278c <MX_GPIO_Init+0x14c>)
 8002748:	f001 f9ce 	bl	8003ae8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 800274c:	2200      	movs	r2, #0
 800274e:	2101      	movs	r1, #1
 8002750:	2008      	movs	r0, #8
 8002752:	f000 fd8c 	bl	800326e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002756:	2008      	movs	r0, #8
 8002758:	f000 fda5 	bl	80032a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800275c:	2200      	movs	r2, #0
 800275e:	2101      	movs	r1, #1
 8002760:	2017      	movs	r0, #23
 8002762:	f000 fd84 	bl	800326e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002766:	2017      	movs	r0, #23
 8002768:	f000 fd9d 	bl	80032a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800276c:	2200      	movs	r2, #0
 800276e:	2101      	movs	r1, #1
 8002770:	2028      	movs	r0, #40	; 0x28
 8002772:	f000 fd7c 	bl	800326e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002776:	2028      	movs	r0, #40	; 0x28
 8002778:	f000 fd95 	bl	80032a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800277c:	bf00      	nop
 800277e:	3728      	adds	r7, #40	; 0x28
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40023800 	.word	0x40023800
 8002788:	40020800 	.word	0x40020800
 800278c:	40020400 	.word	0x40020400
 8002790:	40020c00 	.word	0x40020c00

08002794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002798:	b672      	cpsid	i
}
 800279a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800279c:	e7fe      	b.n	800279c <Error_Handler+0x8>
	...

080027a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	607b      	str	r3, [r7, #4]
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <HAL_MspInit+0x4c>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	4a0f      	ldr	r2, [pc, #60]	; (80027ec <HAL_MspInit+0x4c>)
 80027b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b4:	6453      	str	r3, [r2, #68]	; 0x44
 80027b6:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <HAL_MspInit+0x4c>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027be:	607b      	str	r3, [r7, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	603b      	str	r3, [r7, #0]
 80027c6:	4b09      	ldr	r3, [pc, #36]	; (80027ec <HAL_MspInit+0x4c>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	4a08      	ldr	r2, [pc, #32]	; (80027ec <HAL_MspInit+0x4c>)
 80027cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d0:	6413      	str	r3, [r2, #64]	; 0x40
 80027d2:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_MspInit+0x4c>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	40023800 	.word	0x40023800

080027f0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b090      	sub	sp, #64	; 0x40
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	60da      	str	r2, [r3, #12]
 8002806:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a78      	ldr	r2, [pc, #480]	; (80029f0 <HAL_TIM_Encoder_MspInit+0x200>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d135      	bne.n	800287e <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	62bb      	str	r3, [r7, #40]	; 0x28
 8002816:	4b77      	ldr	r3, [pc, #476]	; (80029f4 <HAL_TIM_Encoder_MspInit+0x204>)
 8002818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281a:	4a76      	ldr	r2, [pc, #472]	; (80029f4 <HAL_TIM_Encoder_MspInit+0x204>)
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	6453      	str	r3, [r2, #68]	; 0x44
 8002822:	4b74      	ldr	r3, [pc, #464]	; (80029f4 <HAL_TIM_Encoder_MspInit+0x204>)
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	62bb      	str	r3, [r7, #40]	; 0x28
 800282c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
 8002832:	4b70      	ldr	r3, [pc, #448]	; (80029f4 <HAL_TIM_Encoder_MspInit+0x204>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	4a6f      	ldr	r2, [pc, #444]	; (80029f4 <HAL_TIM_Encoder_MspInit+0x204>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6313      	str	r3, [r2, #48]	; 0x30
 800283e:	4b6d      	ldr	r3, [pc, #436]	; (80029f4 <HAL_TIM_Encoder_MspInit+0x204>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_J1_Pin|ENC_B_J1_Pin;
 800284a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002850:	2302      	movs	r3, #2
 8002852:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002858:	2300      	movs	r3, #0
 800285a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800285c:	2301      	movs	r3, #1
 800285e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002860:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002864:	4619      	mov	r1, r3
 8002866:	4864      	ldr	r0, [pc, #400]	; (80029f8 <HAL_TIM_Encoder_MspInit+0x208>)
 8002868:	f001 f93e 	bl	8003ae8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 0);
 800286c:	2200      	movs	r2, #0
 800286e:	2102      	movs	r1, #2
 8002870:	2018      	movs	r0, #24
 8002872:	f000 fcfc 	bl	800326e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002876:	2018      	movs	r0, #24
 8002878:	f000 fd15 	bl	80032a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800287c:	e0b3      	b.n	80029e6 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM2)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002886:	d14b      	bne.n	8002920 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002888:	2300      	movs	r3, #0
 800288a:	623b      	str	r3, [r7, #32]
 800288c:	4b59      	ldr	r3, [pc, #356]	; (80029f4 <HAL_TIM_Encoder_MspInit+0x204>)
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	4a58      	ldr	r2, [pc, #352]	; (80029f4 <HAL_TIM_Encoder_MspInit+0x204>)
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	6413      	str	r3, [r2, #64]	; 0x40
 8002898:	4b56      	ldr	r3, [pc, #344]	; (80029f4 <HAL_TIM_Encoder_MspInit+0x204>)
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	623b      	str	r3, [r7, #32]
 80028a2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a4:	2300      	movs	r3, #0
 80028a6:	61fb      	str	r3, [r7, #28]
 80028a8:	4b52      	ldr	r3, [pc, #328]	; (80029f4 <HAL_TIM_Encoder_MspInit+0x204>)
 80028aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ac:	4a51      	ldr	r2, [pc, #324]	; (80029f4 <HAL_TIM_Encoder_MspInit+0x204>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6313      	str	r3, [r2, #48]	; 0x30
 80028b4:	4b4f      	ldr	r3, [pc, #316]	; (80029f4 <HAL_TIM_Encoder_MspInit+0x204>)
 80028b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c0:	2300      	movs	r3, #0
 80028c2:	61bb      	str	r3, [r7, #24]
 80028c4:	4b4b      	ldr	r3, [pc, #300]	; (80029f4 <HAL_TIM_Encoder_MspInit+0x204>)
 80028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c8:	4a4a      	ldr	r2, [pc, #296]	; (80029f4 <HAL_TIM_Encoder_MspInit+0x204>)
 80028ca:	f043 0302 	orr.w	r3, r3, #2
 80028ce:	6313      	str	r3, [r2, #48]	; 0x30
 80028d0:	4b48      	ldr	r3, [pc, #288]	; (80029f4 <HAL_TIM_Encoder_MspInit+0x204>)
 80028d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	61bb      	str	r3, [r7, #24]
 80028da:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENC_A_J2_Pin;
 80028dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e2:	2302      	movs	r3, #2
 80028e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ea:	2300      	movs	r3, #0
 80028ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028ee:	2301      	movs	r3, #1
 80028f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC_A_J2_GPIO_Port, &GPIO_InitStruct);
 80028f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028f6:	4619      	mov	r1, r3
 80028f8:	483f      	ldr	r0, [pc, #252]	; (80029f8 <HAL_TIM_Encoder_MspInit+0x208>)
 80028fa:	f001 f8f5 	bl	8003ae8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC_B_J2_Pin;
 80028fe:	2308      	movs	r3, #8
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002902:	2302      	movs	r3, #2
 8002904:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290a:	2300      	movs	r3, #0
 800290c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800290e:	2301      	movs	r3, #1
 8002910:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC_B_J2_GPIO_Port, &GPIO_InitStruct);
 8002912:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002916:	4619      	mov	r1, r3
 8002918:	4838      	ldr	r0, [pc, #224]	; (80029fc <HAL_TIM_Encoder_MspInit+0x20c>)
 800291a:	f001 f8e5 	bl	8003ae8 <HAL_GPIO_Init>
}
 800291e:	e062      	b.n	80029e6 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM3)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a36      	ldr	r2, [pc, #216]	; (8002a00 <HAL_TIM_Encoder_MspInit+0x210>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d12c      	bne.n	8002984 <HAL_TIM_Encoder_MspInit+0x194>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	4b31      	ldr	r3, [pc, #196]	; (80029f4 <HAL_TIM_Encoder_MspInit+0x204>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	4a30      	ldr	r2, [pc, #192]	; (80029f4 <HAL_TIM_Encoder_MspInit+0x204>)
 8002934:	f043 0302 	orr.w	r3, r3, #2
 8002938:	6413      	str	r3, [r2, #64]	; 0x40
 800293a:	4b2e      	ldr	r3, [pc, #184]	; (80029f4 <HAL_TIM_Encoder_MspInit+0x204>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	4b2a      	ldr	r3, [pc, #168]	; (80029f4 <HAL_TIM_Encoder_MspInit+0x204>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	4a29      	ldr	r2, [pc, #164]	; (80029f4 <HAL_TIM_Encoder_MspInit+0x204>)
 8002950:	f043 0302 	orr.w	r3, r3, #2
 8002954:	6313      	str	r3, [r2, #48]	; 0x30
 8002956:	4b27      	ldr	r3, [pc, #156]	; (80029f4 <HAL_TIM_Encoder_MspInit+0x204>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC_A_J3_Pin|ENC_B_J3_Pin;
 8002962:	2330      	movs	r3, #48	; 0x30
 8002964:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002966:	2302      	movs	r3, #2
 8002968:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296e:	2300      	movs	r3, #0
 8002970:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002972:	2302      	movs	r3, #2
 8002974:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002976:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800297a:	4619      	mov	r1, r3
 800297c:	481f      	ldr	r0, [pc, #124]	; (80029fc <HAL_TIM_Encoder_MspInit+0x20c>)
 800297e:	f001 f8b3 	bl	8003ae8 <HAL_GPIO_Init>
}
 8002982:	e030      	b.n	80029e6 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM5)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a1e      	ldr	r2, [pc, #120]	; (8002a04 <HAL_TIM_Encoder_MspInit+0x214>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d12b      	bne.n	80029e6 <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	4b18      	ldr	r3, [pc, #96]	; (80029f4 <HAL_TIM_Encoder_MspInit+0x204>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	4a17      	ldr	r2, [pc, #92]	; (80029f4 <HAL_TIM_Encoder_MspInit+0x204>)
 8002998:	f043 0308 	orr.w	r3, r3, #8
 800299c:	6413      	str	r3, [r2, #64]	; 0x40
 800299e:	4b15      	ldr	r3, [pc, #84]	; (80029f4 <HAL_TIM_Encoder_MspInit+0x204>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <HAL_TIM_Encoder_MspInit+0x204>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	4a10      	ldr	r2, [pc, #64]	; (80029f4 <HAL_TIM_Encoder_MspInit+0x204>)
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ba:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <HAL_TIM_Encoder_MspInit+0x204>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_A_J4_Pin|ENC_B_J4_Pin;
 80029c6:	2303      	movs	r3, #3
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ca:	2302      	movs	r3, #2
 80029cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d2:	2300      	movs	r3, #0
 80029d4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80029d6:	2302      	movs	r3, #2
 80029d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029de:	4619      	mov	r1, r3
 80029e0:	4805      	ldr	r0, [pc, #20]	; (80029f8 <HAL_TIM_Encoder_MspInit+0x208>)
 80029e2:	f001 f881 	bl	8003ae8 <HAL_GPIO_Init>
}
 80029e6:	bf00      	nop
 80029e8:	3740      	adds	r7, #64	; 0x40
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40010000 	.word	0x40010000
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40020000 	.word	0x40020000
 80029fc:	40020400 	.word	0x40020400
 8002a00:	40000400 	.word	0x40000400
 8002a04:	40000c00 	.word	0x40000c00

08002a08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a22      	ldr	r2, [pc, #136]	; (8002aa0 <HAL_TIM_Base_MspInit+0x98>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d10e      	bne.n	8002a38 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	4b21      	ldr	r3, [pc, #132]	; (8002aa4 <HAL_TIM_Base_MspInit+0x9c>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	4a20      	ldr	r2, [pc, #128]	; (8002aa4 <HAL_TIM_Base_MspInit+0x9c>)
 8002a24:	f043 0304 	orr.w	r3, r3, #4
 8002a28:	6413      	str	r3, [r2, #64]	; 0x40
 8002a2a:	4b1e      	ldr	r3, [pc, #120]	; (8002aa4 <HAL_TIM_Base_MspInit+0x9c>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002a36:	e02e      	b.n	8002a96 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM8)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a1a      	ldr	r2, [pc, #104]	; (8002aa8 <HAL_TIM_Base_MspInit+0xa0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d10e      	bne.n	8002a60 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <HAL_TIM_Base_MspInit+0x9c>)
 8002a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4a:	4a16      	ldr	r2, [pc, #88]	; (8002aa4 <HAL_TIM_Base_MspInit+0x9c>)
 8002a4c:	f043 0302 	orr.w	r3, r3, #2
 8002a50:	6453      	str	r3, [r2, #68]	; 0x44
 8002a52:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <HAL_TIM_Base_MspInit+0x9c>)
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	693b      	ldr	r3, [r7, #16]
}
 8002a5e:	e01a      	b.n	8002a96 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM9)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a11      	ldr	r2, [pc, #68]	; (8002aac <HAL_TIM_Base_MspInit+0xa4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d115      	bne.n	8002a96 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <HAL_TIM_Base_MspInit+0x9c>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	4a0c      	ldr	r2, [pc, #48]	; (8002aa4 <HAL_TIM_Base_MspInit+0x9c>)
 8002a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a78:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7a:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <HAL_TIM_Base_MspInit+0x9c>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 0);
 8002a86:	2200      	movs	r2, #0
 8002a88:	2102      	movs	r1, #2
 8002a8a:	2018      	movs	r0, #24
 8002a8c:	f000 fbef 	bl	800326e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002a90:	2018      	movs	r0, #24
 8002a92:	f000 fc08 	bl	80032a6 <HAL_NVIC_EnableIRQ>
}
 8002a96:	bf00      	nop
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40000800 	.word	0x40000800
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40010400 	.word	0x40010400
 8002aac:	40014000 	.word	0x40014000

08002ab0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08a      	sub	sp, #40	; 0x28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab8:	f107 0314 	add.w	r3, r7, #20
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
 8002ac6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a37      	ldr	r2, [pc, #220]	; (8002bac <HAL_TIM_MspPostInit+0xfc>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d11f      	bne.n	8002b12 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	4b36      	ldr	r3, [pc, #216]	; (8002bb0 <HAL_TIM_MspPostInit+0x100>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	4a35      	ldr	r2, [pc, #212]	; (8002bb0 <HAL_TIM_MspPostInit+0x100>)
 8002adc:	f043 0308 	orr.w	r3, r3, #8
 8002ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae2:	4b33      	ldr	r3, [pc, #204]	; (8002bb0 <HAL_TIM_MspPostInit+0x100>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	693b      	ldr	r3, [r7, #16]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM3_A_Pin|PWM3_B_Pin|PWM2_A_Pin|PWM2_B_Pin;
 8002aee:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af4:	2302      	movs	r3, #2
 8002af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afc:	2300      	movs	r3, #0
 8002afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b00:	2302      	movs	r3, #2
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b04:	f107 0314 	add.w	r3, r7, #20
 8002b08:	4619      	mov	r1, r3
 8002b0a:	482a      	ldr	r0, [pc, #168]	; (8002bb4 <HAL_TIM_MspPostInit+0x104>)
 8002b0c:	f000 ffec 	bl	8003ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002b10:	e047      	b.n	8002ba2 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a28      	ldr	r2, [pc, #160]	; (8002bb8 <HAL_TIM_MspPostInit+0x108>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d11f      	bne.n	8002b5c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	4b23      	ldr	r3, [pc, #140]	; (8002bb0 <HAL_TIM_MspPostInit+0x100>)
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	4a22      	ldr	r2, [pc, #136]	; (8002bb0 <HAL_TIM_MspPostInit+0x100>)
 8002b26:	f043 0304 	orr.w	r3, r3, #4
 8002b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2c:	4b20      	ldr	r3, [pc, #128]	; (8002bb0 <HAL_TIM_MspPostInit+0x100>)
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_A_Pin|PWM1_B_Pin;
 8002b38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b46:	2300      	movs	r3, #0
 8002b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b4e:	f107 0314 	add.w	r3, r7, #20
 8002b52:	4619      	mov	r1, r3
 8002b54:	4819      	ldr	r0, [pc, #100]	; (8002bbc <HAL_TIM_MspPostInit+0x10c>)
 8002b56:	f000 ffc7 	bl	8003ae8 <HAL_GPIO_Init>
}
 8002b5a:	e022      	b.n	8002ba2 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM9)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a17      	ldr	r2, [pc, #92]	; (8002bc0 <HAL_TIM_MspPostInit+0x110>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d11d      	bne.n	8002ba2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <HAL_TIM_MspPostInit+0x100>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	4a10      	ldr	r2, [pc, #64]	; (8002bb0 <HAL_TIM_MspPostInit+0x100>)
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	6313      	str	r3, [r2, #48]	; 0x30
 8002b76:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <HAL_TIM_MspPostInit+0x100>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	60bb      	str	r3, [r7, #8]
 8002b80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM4_A_Pin|PWM4_B_Pin;
 8002b82:	230c      	movs	r3, #12
 8002b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b86:	2302      	movs	r3, #2
 8002b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002b92:	2303      	movs	r3, #3
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b96:	f107 0314 	add.w	r3, r7, #20
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4809      	ldr	r0, [pc, #36]	; (8002bc4 <HAL_TIM_MspPostInit+0x114>)
 8002b9e:	f000 ffa3 	bl	8003ae8 <HAL_GPIO_Init>
}
 8002ba2:	bf00      	nop
 8002ba4:	3728      	adds	r7, #40	; 0x28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40000800 	.word	0x40000800
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40020c00 	.word	0x40020c00
 8002bb8:	40010400 	.word	0x40010400
 8002bbc:	40020800 	.word	0x40020800
 8002bc0:	40014000 	.word	0x40014000
 8002bc4:	40020000 	.word	0x40020000

08002bc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08a      	sub	sp, #40	; 0x28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd0:	f107 0314 	add.w	r3, r7, #20
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a35      	ldr	r2, [pc, #212]	; (8002cbc <HAL_UART_MspInit+0xf4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d163      	bne.n	8002cb2 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	4b34      	ldr	r3, [pc, #208]	; (8002cc0 <HAL_UART_MspInit+0xf8>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	4a33      	ldr	r2, [pc, #204]	; (8002cc0 <HAL_UART_MspInit+0xf8>)
 8002bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfa:	4b31      	ldr	r3, [pc, #196]	; (8002cc0 <HAL_UART_MspInit+0xf8>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c02:	613b      	str	r3, [r7, #16]
 8002c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	4b2d      	ldr	r3, [pc, #180]	; (8002cc0 <HAL_UART_MspInit+0xf8>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	4a2c      	ldr	r2, [pc, #176]	; (8002cc0 <HAL_UART_MspInit+0xf8>)
 8002c10:	f043 0302 	orr.w	r3, r3, #2
 8002c14:	6313      	str	r3, [r2, #48]	; 0x30
 8002c16:	4b2a      	ldr	r3, [pc, #168]	; (8002cc0 <HAL_UART_MspInit+0xf8>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002c22:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c30:	2303      	movs	r3, #3
 8002c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c34:	2307      	movs	r3, #7
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c38:	f107 0314 	add.w	r3, r7, #20
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4821      	ldr	r0, [pc, #132]	; (8002cc4 <HAL_UART_MspInit+0xfc>)
 8002c40:	f000 ff52 	bl	8003ae8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002c44:	4b20      	ldr	r3, [pc, #128]	; (8002cc8 <HAL_UART_MspInit+0x100>)
 8002c46:	4a21      	ldr	r2, [pc, #132]	; (8002ccc <HAL_UART_MspInit+0x104>)
 8002c48:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002c4a:	4b1f      	ldr	r3, [pc, #124]	; (8002cc8 <HAL_UART_MspInit+0x100>)
 8002c4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c50:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c52:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <HAL_UART_MspInit+0x100>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c58:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <HAL_UART_MspInit+0x100>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c5e:	4b1a      	ldr	r3, [pc, #104]	; (8002cc8 <HAL_UART_MspInit+0x100>)
 8002c60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c64:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c66:	4b18      	ldr	r3, [pc, #96]	; (8002cc8 <HAL_UART_MspInit+0x100>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c6c:	4b16      	ldr	r3, [pc, #88]	; (8002cc8 <HAL_UART_MspInit+0x100>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002c72:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <HAL_UART_MspInit+0x100>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002c78:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <HAL_UART_MspInit+0x100>)
 8002c7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c7e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c80:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <HAL_UART_MspInit+0x100>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002c86:	4810      	ldr	r0, [pc, #64]	; (8002cc8 <HAL_UART_MspInit+0x100>)
 8002c88:	f000 fb2c 	bl	80032e4 <HAL_DMA_Init>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002c92:	f7ff fd7f 	bl	8002794 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a0b      	ldr	r2, [pc, #44]	; (8002cc8 <HAL_UART_MspInit+0x100>)
 8002c9a:	639a      	str	r2, [r3, #56]	; 0x38
 8002c9c:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <HAL_UART_MspInit+0x100>)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	2027      	movs	r0, #39	; 0x27
 8002ca8:	f000 fae1 	bl	800326e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002cac:	2027      	movs	r0, #39	; 0x27
 8002cae:	f000 fafa 	bl	80032a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002cb2:	bf00      	nop
 8002cb4:	3728      	adds	r7, #40	; 0x28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40004800 	.word	0x40004800
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	40020400 	.word	0x40020400
 8002cc8:	2000051c 	.word	0x2000051c
 8002ccc:	40026028 	.word	0x40026028

08002cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cd4:	e7fe      	b.n	8002cd4 <NMI_Handler+0x4>

08002cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cda:	e7fe      	b.n	8002cda <HardFault_Handler+0x4>

08002cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ce0:	e7fe      	b.n	8002ce0 <MemManage_Handler+0x4>

08002ce2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ce6:	e7fe      	b.n	8002ce6 <BusFault_Handler+0x4>

08002ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cec:	e7fe      	b.n	8002cec <UsageFault_Handler+0x4>

08002cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d1c:	f000 f996 	bl	800304c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d20:	bf00      	nop
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002d28:	2004      	movs	r0, #4
 8002d2a:	f001 f8c5 	bl	8003eb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002d38:	4802      	ldr	r0, [pc, #8]	; (8002d44 <DMA1_Stream1_IRQHandler+0x10>)
 8002d3a:	f000 fc6b 	bl	8003614 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	2000051c 	.word	0x2000051c

08002d48 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002d4c:	2040      	movs	r0, #64	; 0x40
 8002d4e:	f001 f8b3 	bl	8003eb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002d52:	2080      	movs	r0, #128	; 0x80
 8002d54:	f001 f8b0 	bl	8003eb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002d58:	bf00      	nop
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d60:	4803      	ldr	r0, [pc, #12]	; (8002d70 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8002d62:	f002 f8d7 	bl	8004f14 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8002d66:	4803      	ldr	r0, [pc, #12]	; (8002d74 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8002d68:	f002 f8d4 	bl	8004f14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002d6c:	bf00      	nop
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	200002e0 	.word	0x200002e0
 8002d74:	20000490 	.word	0x20000490

08002d78 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002d7c:	4802      	ldr	r0, [pc, #8]	; (8002d88 <USART3_IRQHandler+0x10>)
 8002d7e:	f003 f8b9 	bl	8005ef4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	200004d8 	.word	0x200004d8

08002d8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002d90:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002d94:	f001 f890 	bl	8003eb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002d98:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002d9c:	f001 f88c 	bl	8003eb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002da0:	bf00      	nop
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  return 1;
 8002da8:	2301      	movs	r3, #1
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <_kill>:

int _kill(int pid, int sig)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002dbe:	f004 fe53 	bl	8007a68 <__errno>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2216      	movs	r2, #22
 8002dc6:	601a      	str	r2, [r3, #0]
  return -1;
 8002dc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <_exit>:

void _exit (int status)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7ff ffe7 	bl	8002db4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002de6:	e7fe      	b.n	8002de6 <_exit+0x12>

08002de8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	e00a      	b.n	8002e10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dfa:	f3af 8000 	nop.w
 8002dfe:	4601      	mov	r1, r0
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	60ba      	str	r2, [r7, #8]
 8002e06:	b2ca      	uxtb	r2, r1
 8002e08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	dbf0      	blt.n	8002dfa <_read+0x12>
  }

  return len;
 8002e18:	687b      	ldr	r3, [r7, #4]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b086      	sub	sp, #24
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	e009      	b.n	8002e48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	60ba      	str	r2, [r7, #8]
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	3301      	adds	r3, #1
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	dbf1      	blt.n	8002e34 <_write+0x12>
  }
  return len;
 8002e50:	687b      	ldr	r3, [r7, #4]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <_close>:

int _close(int file)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e82:	605a      	str	r2, [r3, #4]
  return 0;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <_isatty>:

int _isatty(int file)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e9a:	2301      	movs	r3, #1
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
	...

08002ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ecc:	4a14      	ldr	r2, [pc, #80]	; (8002f20 <_sbrk+0x5c>)
 8002ece:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <_sbrk+0x60>)
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ed8:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <_sbrk+0x64>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d102      	bne.n	8002ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ee0:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <_sbrk+0x64>)
 8002ee2:	4a12      	ldr	r2, [pc, #72]	; (8002f2c <_sbrk+0x68>)
 8002ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ee6:	4b10      	ldr	r3, [pc, #64]	; (8002f28 <_sbrk+0x64>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4413      	add	r3, r2
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d207      	bcs.n	8002f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ef4:	f004 fdb8 	bl	8007a68 <__errno>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	220c      	movs	r2, #12
 8002efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002efe:	f04f 33ff 	mov.w	r3, #4294967295
 8002f02:	e009      	b.n	8002f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f04:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <_sbrk+0x64>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f0a:	4b07      	ldr	r3, [pc, #28]	; (8002f28 <_sbrk+0x64>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4413      	add	r3, r2
 8002f12:	4a05      	ldr	r2, [pc, #20]	; (8002f28 <_sbrk+0x64>)
 8002f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f16:	68fb      	ldr	r3, [r7, #12]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	20020000 	.word	0x20020000
 8002f24:	00000400 	.word	0x00000400
 8002f28:	20000910 	.word	0x20000910
 8002f2c:	20000928 	.word	0x20000928

08002f30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f34:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <SystemInit+0x20>)
 8002f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3a:	4a05      	ldr	r2, [pc, #20]	; (8002f50 <SystemInit+0x20>)
 8002f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f44:	bf00      	nop
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8002f54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f58:	480d      	ldr	r0, [pc, #52]	; (8002f90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f5a:	490e      	ldr	r1, [pc, #56]	; (8002f94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f5c:	4a0e      	ldr	r2, [pc, #56]	; (8002f98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f60:	e002      	b.n	8002f68 <LoopCopyDataInit>

08002f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f66:	3304      	adds	r3, #4

08002f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f6c:	d3f9      	bcc.n	8002f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f6e:	4a0b      	ldr	r2, [pc, #44]	; (8002f9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f70:	4c0b      	ldr	r4, [pc, #44]	; (8002fa0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f74:	e001      	b.n	8002f7a <LoopFillZerobss>

08002f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f78:	3204      	adds	r2, #4

08002f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f7c:	d3fb      	bcc.n	8002f76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f7e:	f7ff ffd7 	bl	8002f30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f82:	f004 fd77 	bl	8007a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f86:	f7fe fe49 	bl	8001c1c <main>
  bx  lr    
 8002f8a:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8002f8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f94:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8002f98:	0800d1cc 	.word	0x0800d1cc
  ldr r2, =_sbss
 8002f9c:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8002fa0:	20000928 	.word	0x20000928

08002fa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fa4:	e7fe      	b.n	8002fa4 <ADC_IRQHandler>
	...

08002fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fac:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <HAL_Init+0x40>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a0d      	ldr	r2, [pc, #52]	; (8002fe8 <HAL_Init+0x40>)
 8002fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <HAL_Init+0x40>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <HAL_Init+0x40>)
 8002fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fc4:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <HAL_Init+0x40>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a07      	ldr	r2, [pc, #28]	; (8002fe8 <HAL_Init+0x40>)
 8002fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fd0:	2003      	movs	r0, #3
 8002fd2:	f000 f941 	bl	8003258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fd6:	200f      	movs	r0, #15
 8002fd8:	f000 f808 	bl	8002fec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fdc:	f7ff fbe0 	bl	80027a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40023c00 	.word	0x40023c00

08002fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ff4:	4b12      	ldr	r3, [pc, #72]	; (8003040 <HAL_InitTick+0x54>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	4b12      	ldr	r3, [pc, #72]	; (8003044 <HAL_InitTick+0x58>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003002:	fbb3 f3f1 	udiv	r3, r3, r1
 8003006:	fbb2 f3f3 	udiv	r3, r2, r3
 800300a:	4618      	mov	r0, r3
 800300c:	f000 f95d 	bl	80032ca <HAL_SYSTICK_Config>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e00e      	b.n	8003038 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b0f      	cmp	r3, #15
 800301e:	d80a      	bhi.n	8003036 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003020:	2200      	movs	r2, #0
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	f04f 30ff 	mov.w	r0, #4294967295
 8003028:	f000 f921 	bl	800326e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800302c:	4a06      	ldr	r2, [pc, #24]	; (8003048 <HAL_InitTick+0x5c>)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	e000      	b.n	8003038 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
}
 8003038:	4618      	mov	r0, r3
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	200000e4 	.word	0x200000e4
 8003044:	200000ec 	.word	0x200000ec
 8003048:	200000e8 	.word	0x200000e8

0800304c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003050:	4b06      	ldr	r3, [pc, #24]	; (800306c <HAL_IncTick+0x20>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	461a      	mov	r2, r3
 8003056:	4b06      	ldr	r3, [pc, #24]	; (8003070 <HAL_IncTick+0x24>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4413      	add	r3, r2
 800305c:	4a04      	ldr	r2, [pc, #16]	; (8003070 <HAL_IncTick+0x24>)
 800305e:	6013      	str	r3, [r2, #0]
}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	200000ec 	.word	0x200000ec
 8003070:	20000914 	.word	0x20000914

08003074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return uwTick;
 8003078:	4b03      	ldr	r3, [pc, #12]	; (8003088 <HAL_GetTick+0x14>)
 800307a:	681b      	ldr	r3, [r3, #0]
}
 800307c:	4618      	mov	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	20000914 	.word	0x20000914

0800308c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800309c:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <__NVIC_SetPriorityGrouping+0x44>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030a8:	4013      	ands	r3, r2
 80030aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030be:	4a04      	ldr	r2, [pc, #16]	; (80030d0 <__NVIC_SetPriorityGrouping+0x44>)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	60d3      	str	r3, [r2, #12]
}
 80030c4:	bf00      	nop
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030d8:	4b04      	ldr	r3, [pc, #16]	; (80030ec <__NVIC_GetPriorityGrouping+0x18>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	0a1b      	lsrs	r3, r3, #8
 80030de:	f003 0307 	and.w	r3, r3, #7
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	e000ed00 	.word	0xe000ed00

080030f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	db0b      	blt.n	800311a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	f003 021f 	and.w	r2, r3, #31
 8003108:	4907      	ldr	r1, [pc, #28]	; (8003128 <__NVIC_EnableIRQ+0x38>)
 800310a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	2001      	movs	r0, #1
 8003112:	fa00 f202 	lsl.w	r2, r0, r2
 8003116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	e000e100 	.word	0xe000e100

0800312c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	6039      	str	r1, [r7, #0]
 8003136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313c:	2b00      	cmp	r3, #0
 800313e:	db0a      	blt.n	8003156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	b2da      	uxtb	r2, r3
 8003144:	490c      	ldr	r1, [pc, #48]	; (8003178 <__NVIC_SetPriority+0x4c>)
 8003146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314a:	0112      	lsls	r2, r2, #4
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	440b      	add	r3, r1
 8003150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003154:	e00a      	b.n	800316c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	b2da      	uxtb	r2, r3
 800315a:	4908      	ldr	r1, [pc, #32]	; (800317c <__NVIC_SetPriority+0x50>)
 800315c:	79fb      	ldrb	r3, [r7, #7]
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	3b04      	subs	r3, #4
 8003164:	0112      	lsls	r2, r2, #4
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	440b      	add	r3, r1
 800316a:	761a      	strb	r2, [r3, #24]
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	e000e100 	.word	0xe000e100
 800317c:	e000ed00 	.word	0xe000ed00

08003180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003180:	b480      	push	{r7}
 8003182:	b089      	sub	sp, #36	; 0x24
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f1c3 0307 	rsb	r3, r3, #7
 800319a:	2b04      	cmp	r3, #4
 800319c:	bf28      	it	cs
 800319e:	2304      	movcs	r3, #4
 80031a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	3304      	adds	r3, #4
 80031a6:	2b06      	cmp	r3, #6
 80031a8:	d902      	bls.n	80031b0 <NVIC_EncodePriority+0x30>
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	3b03      	subs	r3, #3
 80031ae:	e000      	b.n	80031b2 <NVIC_EncodePriority+0x32>
 80031b0:	2300      	movs	r3, #0
 80031b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b4:	f04f 32ff 	mov.w	r2, #4294967295
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43da      	mvns	r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	401a      	ands	r2, r3
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031c8:	f04f 31ff 	mov.w	r1, #4294967295
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	fa01 f303 	lsl.w	r3, r1, r3
 80031d2:	43d9      	mvns	r1, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d8:	4313      	orrs	r3, r2
         );
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3724      	adds	r7, #36	; 0x24
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
	...

080031e8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80031ec:	f3bf 8f4f 	dsb	sy
}
 80031f0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80031f2:	4b06      	ldr	r3, [pc, #24]	; (800320c <__NVIC_SystemReset+0x24>)
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80031fa:	4904      	ldr	r1, [pc, #16]	; (800320c <__NVIC_SystemReset+0x24>)
 80031fc:	4b04      	ldr	r3, [pc, #16]	; (8003210 <__NVIC_SystemReset+0x28>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003202:	f3bf 8f4f 	dsb	sy
}
 8003206:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003208:	bf00      	nop
 800320a:	e7fd      	b.n	8003208 <__NVIC_SystemReset+0x20>
 800320c:	e000ed00 	.word	0xe000ed00
 8003210:	05fa0004 	.word	0x05fa0004

08003214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3b01      	subs	r3, #1
 8003220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003224:	d301      	bcc.n	800322a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003226:	2301      	movs	r3, #1
 8003228:	e00f      	b.n	800324a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800322a:	4a0a      	ldr	r2, [pc, #40]	; (8003254 <SysTick_Config+0x40>)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3b01      	subs	r3, #1
 8003230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003232:	210f      	movs	r1, #15
 8003234:	f04f 30ff 	mov.w	r0, #4294967295
 8003238:	f7ff ff78 	bl	800312c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <SysTick_Config+0x40>)
 800323e:	2200      	movs	r2, #0
 8003240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003242:	4b04      	ldr	r3, [pc, #16]	; (8003254 <SysTick_Config+0x40>)
 8003244:	2207      	movs	r2, #7
 8003246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	e000e010 	.word	0xe000e010

08003258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff ff13 	bl	800308c <__NVIC_SetPriorityGrouping>
}
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800326e:	b580      	push	{r7, lr}
 8003270:	b086      	sub	sp, #24
 8003272:	af00      	add	r7, sp, #0
 8003274:	4603      	mov	r3, r0
 8003276:	60b9      	str	r1, [r7, #8]
 8003278:	607a      	str	r2, [r7, #4]
 800327a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003280:	f7ff ff28 	bl	80030d4 <__NVIC_GetPriorityGrouping>
 8003284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	68b9      	ldr	r1, [r7, #8]
 800328a:	6978      	ldr	r0, [r7, #20]
 800328c:	f7ff ff78 	bl	8003180 <NVIC_EncodePriority>
 8003290:	4602      	mov	r2, r0
 8003292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003296:	4611      	mov	r1, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff ff47 	bl	800312c <__NVIC_SetPriority>
}
 800329e:	bf00      	nop
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	4603      	mov	r3, r0
 80032ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff ff1b 	bl	80030f0 <__NVIC_EnableIRQ>
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80032c6:	f7ff ff8f 	bl	80031e8 <__NVIC_SystemReset>

080032ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b082      	sub	sp, #8
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff ff9e 	bl	8003214 <SysTick_Config>
 80032d8:	4603      	mov	r3, r0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032f0:	f7ff fec0 	bl	8003074 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e099      	b.n	8003434 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0201 	bic.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003320:	e00f      	b.n	8003342 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003322:	f7ff fea7 	bl	8003074 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b05      	cmp	r3, #5
 800332e:	d908      	bls.n	8003342 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2203      	movs	r2, #3
 800333a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e078      	b.n	8003434 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1e8      	bne.n	8003322 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	4b38      	ldr	r3, [pc, #224]	; (800343c <HAL_DMA_Init+0x158>)
 800335c:	4013      	ands	r3, r2
 800335e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800336e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800337a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003386:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	4313      	orrs	r3, r2
 8003392:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	2b04      	cmp	r3, #4
 800339a:	d107      	bne.n	80033ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	4313      	orrs	r3, r2
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f023 0307 	bic.w	r3, r3, #7
 80033c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d117      	bne.n	8003406 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4313      	orrs	r3, r2
 80033de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00e      	beq.n	8003406 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 fb01 	bl	80039f0 <DMA_CheckFifoParam>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d008      	beq.n	8003406 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2240      	movs	r2, #64	; 0x40
 80033f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003402:	2301      	movs	r3, #1
 8003404:	e016      	b.n	8003434 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 fab8 	bl	8003984 <DMA_CalcBaseAndBitshift>
 8003414:	4603      	mov	r3, r0
 8003416:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341c:	223f      	movs	r2, #63	; 0x3f
 800341e:	409a      	lsls	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	f010803f 	.word	0xf010803f

08003440 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
 800344c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800344e:	2300      	movs	r3, #0
 8003450:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003456:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800345e:	2b01      	cmp	r3, #1
 8003460:	d101      	bne.n	8003466 <HAL_DMA_Start_IT+0x26>
 8003462:	2302      	movs	r3, #2
 8003464:	e040      	b.n	80034e8 <HAL_DMA_Start_IT+0xa8>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b01      	cmp	r3, #1
 8003478:	d12f      	bne.n	80034da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2202      	movs	r2, #2
 800347e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	68b9      	ldr	r1, [r7, #8]
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 fa4a 	bl	8003928 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003498:	223f      	movs	r2, #63	; 0x3f
 800349a:	409a      	lsls	r2, r3
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0216 	orr.w	r2, r2, #22
 80034ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d007      	beq.n	80034c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0208 	orr.w	r2, r2, #8
 80034c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	e005      	b.n	80034e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034e2:	2302      	movs	r3, #2
 80034e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034fe:	f7ff fdb9 	bl	8003074 <HAL_GetTick>
 8003502:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d008      	beq.n	8003522 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2280      	movs	r2, #128	; 0x80
 8003514:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e052      	b.n	80035c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0216 	bic.w	r2, r2, #22
 8003530:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695a      	ldr	r2, [r3, #20]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003540:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	d103      	bne.n	8003552 <HAL_DMA_Abort+0x62>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800354e:	2b00      	cmp	r3, #0
 8003550:	d007      	beq.n	8003562 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0208 	bic.w	r2, r2, #8
 8003560:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0201 	bic.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003572:	e013      	b.n	800359c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003574:	f7ff fd7e 	bl	8003074 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b05      	cmp	r3, #5
 8003580:	d90c      	bls.n	800359c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2220      	movs	r2, #32
 8003586:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2203      	movs	r2, #3
 800358c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e015      	b.n	80035c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1e4      	bne.n	8003574 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ae:	223f      	movs	r2, #63	; 0x3f
 80035b0:	409a      	lsls	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d004      	beq.n	80035ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2280      	movs	r2, #128	; 0x80
 80035e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e00c      	b.n	8003608 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2205      	movs	r2, #5
 80035f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0201 	bic.w	r2, r2, #1
 8003604:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003620:	4b8e      	ldr	r3, [pc, #568]	; (800385c <HAL_DMA_IRQHandler+0x248>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a8e      	ldr	r2, [pc, #568]	; (8003860 <HAL_DMA_IRQHandler+0x24c>)
 8003626:	fba2 2303 	umull	r2, r3, r2, r3
 800362a:	0a9b      	lsrs	r3, r3, #10
 800362c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003632:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363e:	2208      	movs	r2, #8
 8003640:	409a      	lsls	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4013      	ands	r3, r2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d01a      	beq.n	8003680 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d013      	beq.n	8003680 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0204 	bic.w	r2, r2, #4
 8003666:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366c:	2208      	movs	r2, #8
 800366e:	409a      	lsls	r2, r3
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003678:	f043 0201 	orr.w	r2, r3, #1
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003684:	2201      	movs	r2, #1
 8003686:	409a      	lsls	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4013      	ands	r3, r2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d012      	beq.n	80036b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00b      	beq.n	80036b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a2:	2201      	movs	r2, #1
 80036a4:	409a      	lsls	r2, r3
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ae:	f043 0202 	orr.w	r2, r3, #2
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ba:	2204      	movs	r2, #4
 80036bc:	409a      	lsls	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	4013      	ands	r3, r2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d012      	beq.n	80036ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00b      	beq.n	80036ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d8:	2204      	movs	r2, #4
 80036da:	409a      	lsls	r2, r3
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e4:	f043 0204 	orr.w	r2, r3, #4
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f0:	2210      	movs	r2, #16
 80036f2:	409a      	lsls	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4013      	ands	r3, r2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d043      	beq.n	8003784 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	2b00      	cmp	r3, #0
 8003708:	d03c      	beq.n	8003784 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370e:	2210      	movs	r2, #16
 8003710:	409a      	lsls	r2, r3
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d018      	beq.n	8003756 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d108      	bne.n	8003744 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	2b00      	cmp	r3, #0
 8003738:	d024      	beq.n	8003784 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	4798      	blx	r3
 8003742:	e01f      	b.n	8003784 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003748:	2b00      	cmp	r3, #0
 800374a:	d01b      	beq.n	8003784 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	4798      	blx	r3
 8003754:	e016      	b.n	8003784 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003760:	2b00      	cmp	r3, #0
 8003762:	d107      	bne.n	8003774 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0208 	bic.w	r2, r2, #8
 8003772:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003788:	2220      	movs	r2, #32
 800378a:	409a      	lsls	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4013      	ands	r3, r2
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 808f 	beq.w	80038b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0310 	and.w	r3, r3, #16
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 8087 	beq.w	80038b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037aa:	2220      	movs	r2, #32
 80037ac:	409a      	lsls	r2, r3
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b05      	cmp	r3, #5
 80037bc:	d136      	bne.n	800382c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0216 	bic.w	r2, r2, #22
 80037cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695a      	ldr	r2, [r3, #20]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d103      	bne.n	80037ee <HAL_DMA_IRQHandler+0x1da>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d007      	beq.n	80037fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0208 	bic.w	r2, r2, #8
 80037fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003802:	223f      	movs	r2, #63	; 0x3f
 8003804:	409a      	lsls	r2, r3
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800381e:	2b00      	cmp	r3, #0
 8003820:	d07e      	beq.n	8003920 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	4798      	blx	r3
        }
        return;
 800382a:	e079      	b.n	8003920 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d01d      	beq.n	8003876 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10d      	bne.n	8003864 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384c:	2b00      	cmp	r3, #0
 800384e:	d031      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	4798      	blx	r3
 8003858:	e02c      	b.n	80038b4 <HAL_DMA_IRQHandler+0x2a0>
 800385a:	bf00      	nop
 800385c:	200000e4 	.word	0x200000e4
 8003860:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003868:	2b00      	cmp	r3, #0
 800386a:	d023      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	4798      	blx	r3
 8003874:	e01e      	b.n	80038b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10f      	bne.n	80038a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0210 	bic.w	r2, r2, #16
 8003892:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d032      	beq.n	8003922 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d022      	beq.n	800390e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2205      	movs	r2, #5
 80038cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0201 	bic.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	3301      	adds	r3, #1
 80038e4:	60bb      	str	r3, [r7, #8]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d307      	bcc.n	80038fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f2      	bne.n	80038e0 <HAL_DMA_IRQHandler+0x2cc>
 80038fa:	e000      	b.n	80038fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003912:	2b00      	cmp	r3, #0
 8003914:	d005      	beq.n	8003922 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	4798      	blx	r3
 800391e:	e000      	b.n	8003922 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003920:	bf00      	nop
    }
  }
}
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003944:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	2b40      	cmp	r3, #64	; 0x40
 8003954:	d108      	bne.n	8003968 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003966:	e007      	b.n	8003978 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	60da      	str	r2, [r3, #12]
}
 8003978:	bf00      	nop
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	b2db      	uxtb	r3, r3
 8003992:	3b10      	subs	r3, #16
 8003994:	4a14      	ldr	r2, [pc, #80]	; (80039e8 <DMA_CalcBaseAndBitshift+0x64>)
 8003996:	fba2 2303 	umull	r2, r3, r2, r3
 800399a:	091b      	lsrs	r3, r3, #4
 800399c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800399e:	4a13      	ldr	r2, [pc, #76]	; (80039ec <DMA_CalcBaseAndBitshift+0x68>)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4413      	add	r3, r2
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	461a      	mov	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2b03      	cmp	r3, #3
 80039b0:	d909      	bls.n	80039c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039ba:	f023 0303 	bic.w	r3, r3, #3
 80039be:	1d1a      	adds	r2, r3, #4
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	659a      	str	r2, [r3, #88]	; 0x58
 80039c4:	e007      	b.n	80039d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039ce:	f023 0303 	bic.w	r3, r3, #3
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	aaaaaaab 	.word	0xaaaaaaab
 80039ec:	0800ccf8 	.word	0x0800ccf8

080039f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d11f      	bne.n	8003a4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2b03      	cmp	r3, #3
 8003a0e:	d856      	bhi.n	8003abe <DMA_CheckFifoParam+0xce>
 8003a10:	a201      	add	r2, pc, #4	; (adr r2, 8003a18 <DMA_CheckFifoParam+0x28>)
 8003a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a16:	bf00      	nop
 8003a18:	08003a29 	.word	0x08003a29
 8003a1c:	08003a3b 	.word	0x08003a3b
 8003a20:	08003a29 	.word	0x08003a29
 8003a24:	08003abf 	.word	0x08003abf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d046      	beq.n	8003ac2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a38:	e043      	b.n	8003ac2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a42:	d140      	bne.n	8003ac6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a48:	e03d      	b.n	8003ac6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a52:	d121      	bne.n	8003a98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2b03      	cmp	r3, #3
 8003a58:	d837      	bhi.n	8003aca <DMA_CheckFifoParam+0xda>
 8003a5a:	a201      	add	r2, pc, #4	; (adr r2, 8003a60 <DMA_CheckFifoParam+0x70>)
 8003a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a60:	08003a71 	.word	0x08003a71
 8003a64:	08003a77 	.word	0x08003a77
 8003a68:	08003a71 	.word	0x08003a71
 8003a6c:	08003a89 	.word	0x08003a89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	73fb      	strb	r3, [r7, #15]
      break;
 8003a74:	e030      	b.n	8003ad8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d025      	beq.n	8003ace <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a86:	e022      	b.n	8003ace <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a90:	d11f      	bne.n	8003ad2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a96:	e01c      	b.n	8003ad2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d903      	bls.n	8003aa6 <DMA_CheckFifoParam+0xb6>
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2b03      	cmp	r3, #3
 8003aa2:	d003      	beq.n	8003aac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003aa4:	e018      	b.n	8003ad8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	73fb      	strb	r3, [r7, #15]
      break;
 8003aaa:	e015      	b.n	8003ad8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00e      	beq.n	8003ad6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	73fb      	strb	r3, [r7, #15]
      break;
 8003abc:	e00b      	b.n	8003ad6 <DMA_CheckFifoParam+0xe6>
      break;
 8003abe:	bf00      	nop
 8003ac0:	e00a      	b.n	8003ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e008      	b.n	8003ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e006      	b.n	8003ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8003aca:	bf00      	nop
 8003acc:	e004      	b.n	8003ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ace:	bf00      	nop
 8003ad0:	e002      	b.n	8003ad8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003ad2:	bf00      	nop
 8003ad4:	e000      	b.n	8003ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ad6:	bf00      	nop
    }
  } 
  
  return status; 
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop

08003ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b089      	sub	sp, #36	; 0x24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
 8003b02:	e16b      	b.n	8003ddc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b04:	2201      	movs	r2, #1
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4013      	ands	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	f040 815a 	bne.w	8003dd6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d005      	beq.n	8003b3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d130      	bne.n	8003b9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	2203      	movs	r2, #3
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	43db      	mvns	r3, r3
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b70:	2201      	movs	r2, #1
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	091b      	lsrs	r3, r3, #4
 8003b86:	f003 0201 	and.w	r2, r3, #1
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f003 0303 	and.w	r3, r3, #3
 8003ba4:	2b03      	cmp	r3, #3
 8003ba6:	d017      	beq.n	8003bd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	2203      	movs	r2, #3
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d123      	bne.n	8003c2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	08da      	lsrs	r2, r3, #3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3208      	adds	r2, #8
 8003bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	220f      	movs	r2, #15
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	43db      	mvns	r3, r3
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	4013      	ands	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	691a      	ldr	r2, [r3, #16]
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	08da      	lsrs	r2, r3, #3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	3208      	adds	r2, #8
 8003c26:	69b9      	ldr	r1, [r7, #24]
 8003c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	2203      	movs	r2, #3
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4013      	ands	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 0203 	and.w	r2, r3, #3
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 80b4 	beq.w	8003dd6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	4b60      	ldr	r3, [pc, #384]	; (8003df4 <HAL_GPIO_Init+0x30c>)
 8003c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c76:	4a5f      	ldr	r2, [pc, #380]	; (8003df4 <HAL_GPIO_Init+0x30c>)
 8003c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c7e:	4b5d      	ldr	r3, [pc, #372]	; (8003df4 <HAL_GPIO_Init+0x30c>)
 8003c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c8a:	4a5b      	ldr	r2, [pc, #364]	; (8003df8 <HAL_GPIO_Init+0x310>)
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	089b      	lsrs	r3, r3, #2
 8003c90:	3302      	adds	r3, #2
 8003c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	220f      	movs	r2, #15
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43db      	mvns	r3, r3
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	4013      	ands	r3, r2
 8003cac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a52      	ldr	r2, [pc, #328]	; (8003dfc <HAL_GPIO_Init+0x314>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d02b      	beq.n	8003d0e <HAL_GPIO_Init+0x226>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a51      	ldr	r2, [pc, #324]	; (8003e00 <HAL_GPIO_Init+0x318>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d025      	beq.n	8003d0a <HAL_GPIO_Init+0x222>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a50      	ldr	r2, [pc, #320]	; (8003e04 <HAL_GPIO_Init+0x31c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d01f      	beq.n	8003d06 <HAL_GPIO_Init+0x21e>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a4f      	ldr	r2, [pc, #316]	; (8003e08 <HAL_GPIO_Init+0x320>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d019      	beq.n	8003d02 <HAL_GPIO_Init+0x21a>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a4e      	ldr	r2, [pc, #312]	; (8003e0c <HAL_GPIO_Init+0x324>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d013      	beq.n	8003cfe <HAL_GPIO_Init+0x216>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a4d      	ldr	r2, [pc, #308]	; (8003e10 <HAL_GPIO_Init+0x328>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00d      	beq.n	8003cfa <HAL_GPIO_Init+0x212>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a4c      	ldr	r2, [pc, #304]	; (8003e14 <HAL_GPIO_Init+0x32c>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d007      	beq.n	8003cf6 <HAL_GPIO_Init+0x20e>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a4b      	ldr	r2, [pc, #300]	; (8003e18 <HAL_GPIO_Init+0x330>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d101      	bne.n	8003cf2 <HAL_GPIO_Init+0x20a>
 8003cee:	2307      	movs	r3, #7
 8003cf0:	e00e      	b.n	8003d10 <HAL_GPIO_Init+0x228>
 8003cf2:	2308      	movs	r3, #8
 8003cf4:	e00c      	b.n	8003d10 <HAL_GPIO_Init+0x228>
 8003cf6:	2306      	movs	r3, #6
 8003cf8:	e00a      	b.n	8003d10 <HAL_GPIO_Init+0x228>
 8003cfa:	2305      	movs	r3, #5
 8003cfc:	e008      	b.n	8003d10 <HAL_GPIO_Init+0x228>
 8003cfe:	2304      	movs	r3, #4
 8003d00:	e006      	b.n	8003d10 <HAL_GPIO_Init+0x228>
 8003d02:	2303      	movs	r3, #3
 8003d04:	e004      	b.n	8003d10 <HAL_GPIO_Init+0x228>
 8003d06:	2302      	movs	r3, #2
 8003d08:	e002      	b.n	8003d10 <HAL_GPIO_Init+0x228>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e000      	b.n	8003d10 <HAL_GPIO_Init+0x228>
 8003d0e:	2300      	movs	r3, #0
 8003d10:	69fa      	ldr	r2, [r7, #28]
 8003d12:	f002 0203 	and.w	r2, r2, #3
 8003d16:	0092      	lsls	r2, r2, #2
 8003d18:	4093      	lsls	r3, r2
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d20:	4935      	ldr	r1, [pc, #212]	; (8003df8 <HAL_GPIO_Init+0x310>)
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	089b      	lsrs	r3, r3, #2
 8003d26:	3302      	adds	r3, #2
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d2e:	4b3b      	ldr	r3, [pc, #236]	; (8003e1c <HAL_GPIO_Init+0x334>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	43db      	mvns	r3, r3
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d52:	4a32      	ldr	r2, [pc, #200]	; (8003e1c <HAL_GPIO_Init+0x334>)
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d58:	4b30      	ldr	r3, [pc, #192]	; (8003e1c <HAL_GPIO_Init+0x334>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	43db      	mvns	r3, r3
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	4013      	ands	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d003      	beq.n	8003d7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d7c:	4a27      	ldr	r2, [pc, #156]	; (8003e1c <HAL_GPIO_Init+0x334>)
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d82:	4b26      	ldr	r3, [pc, #152]	; (8003e1c <HAL_GPIO_Init+0x334>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	43db      	mvns	r3, r3
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003da6:	4a1d      	ldr	r2, [pc, #116]	; (8003e1c <HAL_GPIO_Init+0x334>)
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dac:	4b1b      	ldr	r3, [pc, #108]	; (8003e1c <HAL_GPIO_Init+0x334>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	43db      	mvns	r3, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4013      	ands	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d003      	beq.n	8003dd0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003dd0:	4a12      	ldr	r2, [pc, #72]	; (8003e1c <HAL_GPIO_Init+0x334>)
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	61fb      	str	r3, [r7, #28]
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	2b0f      	cmp	r3, #15
 8003de0:	f67f ae90 	bls.w	8003b04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop
 8003de8:	3724      	adds	r7, #36	; 0x24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	40023800 	.word	0x40023800
 8003df8:	40013800 	.word	0x40013800
 8003dfc:	40020000 	.word	0x40020000
 8003e00:	40020400 	.word	0x40020400
 8003e04:	40020800 	.word	0x40020800
 8003e08:	40020c00 	.word	0x40020c00
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	40021400 	.word	0x40021400
 8003e14:	40021800 	.word	0x40021800
 8003e18:	40021c00 	.word	0x40021c00
 8003e1c:	40013c00 	.word	0x40013c00

08003e20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	887b      	ldrh	r3, [r7, #2]
 8003e32:	4013      	ands	r3, r2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	73fb      	strb	r3, [r7, #15]
 8003e3c:	e001      	b.n	8003e42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	807b      	strh	r3, [r7, #2]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e60:	787b      	ldrb	r3, [r7, #1]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e66:	887a      	ldrh	r2, [r7, #2]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e6c:	e003      	b.n	8003e76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e6e:	887b      	ldrh	r3, [r7, #2]
 8003e70:	041a      	lsls	r2, r3, #16
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	619a      	str	r2, [r3, #24]
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b085      	sub	sp, #20
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e94:	887a      	ldrh	r2, [r7, #2]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	041a      	lsls	r2, r3, #16
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	43d9      	mvns	r1, r3
 8003ea0:	887b      	ldrh	r3, [r7, #2]
 8003ea2:	400b      	ands	r3, r1
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	619a      	str	r2, [r3, #24]
}
 8003eaa:	bf00      	nop
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
	...

08003eb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ec2:	4b08      	ldr	r3, [pc, #32]	; (8003ee4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ec4:	695a      	ldr	r2, [r3, #20]
 8003ec6:	88fb      	ldrh	r3, [r7, #6]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d006      	beq.n	8003edc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ece:	4a05      	ldr	r2, [pc, #20]	; (8003ee4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ed0:	88fb      	ldrh	r3, [r7, #6]
 8003ed2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ed4:	88fb      	ldrh	r3, [r7, #6]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fd fe2a 	bl	8001b30 <HAL_GPIO_EXTI_Callback>
  }
}
 8003edc:	bf00      	nop
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40013c00 	.word	0x40013c00

08003ee8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e267      	b.n	80043ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d075      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f06:	4b88      	ldr	r3, [pc, #544]	; (8004128 <HAL_RCC_OscConfig+0x240>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 030c 	and.w	r3, r3, #12
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d00c      	beq.n	8003f2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f12:	4b85      	ldr	r3, [pc, #532]	; (8004128 <HAL_RCC_OscConfig+0x240>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d112      	bne.n	8003f44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f1e:	4b82      	ldr	r3, [pc, #520]	; (8004128 <HAL_RCC_OscConfig+0x240>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f2a:	d10b      	bne.n	8003f44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f2c:	4b7e      	ldr	r3, [pc, #504]	; (8004128 <HAL_RCC_OscConfig+0x240>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d05b      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x108>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d157      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e242      	b.n	80043ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f4c:	d106      	bne.n	8003f5c <HAL_RCC_OscConfig+0x74>
 8003f4e:	4b76      	ldr	r3, [pc, #472]	; (8004128 <HAL_RCC_OscConfig+0x240>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a75      	ldr	r2, [pc, #468]	; (8004128 <HAL_RCC_OscConfig+0x240>)
 8003f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	e01d      	b.n	8003f98 <HAL_RCC_OscConfig+0xb0>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f64:	d10c      	bne.n	8003f80 <HAL_RCC_OscConfig+0x98>
 8003f66:	4b70      	ldr	r3, [pc, #448]	; (8004128 <HAL_RCC_OscConfig+0x240>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a6f      	ldr	r2, [pc, #444]	; (8004128 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	4b6d      	ldr	r3, [pc, #436]	; (8004128 <HAL_RCC_OscConfig+0x240>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a6c      	ldr	r2, [pc, #432]	; (8004128 <HAL_RCC_OscConfig+0x240>)
 8003f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	e00b      	b.n	8003f98 <HAL_RCC_OscConfig+0xb0>
 8003f80:	4b69      	ldr	r3, [pc, #420]	; (8004128 <HAL_RCC_OscConfig+0x240>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a68      	ldr	r2, [pc, #416]	; (8004128 <HAL_RCC_OscConfig+0x240>)
 8003f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f8a:	6013      	str	r3, [r2, #0]
 8003f8c:	4b66      	ldr	r3, [pc, #408]	; (8004128 <HAL_RCC_OscConfig+0x240>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a65      	ldr	r2, [pc, #404]	; (8004128 <HAL_RCC_OscConfig+0x240>)
 8003f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d013      	beq.n	8003fc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa0:	f7ff f868 	bl	8003074 <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fa8:	f7ff f864 	bl	8003074 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b64      	cmp	r3, #100	; 0x64
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e207      	b.n	80043ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fba:	4b5b      	ldr	r3, [pc, #364]	; (8004128 <HAL_RCC_OscConfig+0x240>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0f0      	beq.n	8003fa8 <HAL_RCC_OscConfig+0xc0>
 8003fc6:	e014      	b.n	8003ff2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc8:	f7ff f854 	bl	8003074 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fd0:	f7ff f850 	bl	8003074 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b64      	cmp	r3, #100	; 0x64
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e1f3      	b.n	80043ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fe2:	4b51      	ldr	r3, [pc, #324]	; (8004128 <HAL_RCC_OscConfig+0x240>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1f0      	bne.n	8003fd0 <HAL_RCC_OscConfig+0xe8>
 8003fee:	e000      	b.n	8003ff2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d063      	beq.n	80040c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ffe:	4b4a      	ldr	r3, [pc, #296]	; (8004128 <HAL_RCC_OscConfig+0x240>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 030c 	and.w	r3, r3, #12
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00b      	beq.n	8004022 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800400a:	4b47      	ldr	r3, [pc, #284]	; (8004128 <HAL_RCC_OscConfig+0x240>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004012:	2b08      	cmp	r3, #8
 8004014:	d11c      	bne.n	8004050 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004016:	4b44      	ldr	r3, [pc, #272]	; (8004128 <HAL_RCC_OscConfig+0x240>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d116      	bne.n	8004050 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004022:	4b41      	ldr	r3, [pc, #260]	; (8004128 <HAL_RCC_OscConfig+0x240>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d005      	beq.n	800403a <HAL_RCC_OscConfig+0x152>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d001      	beq.n	800403a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e1c7      	b.n	80043ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800403a:	4b3b      	ldr	r3, [pc, #236]	; (8004128 <HAL_RCC_OscConfig+0x240>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	4937      	ldr	r1, [pc, #220]	; (8004128 <HAL_RCC_OscConfig+0x240>)
 800404a:	4313      	orrs	r3, r2
 800404c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800404e:	e03a      	b.n	80040c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d020      	beq.n	800409a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004058:	4b34      	ldr	r3, [pc, #208]	; (800412c <HAL_RCC_OscConfig+0x244>)
 800405a:	2201      	movs	r2, #1
 800405c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405e:	f7ff f809 	bl	8003074 <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004066:	f7ff f805 	bl	8003074 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e1a8      	b.n	80043ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004078:	4b2b      	ldr	r3, [pc, #172]	; (8004128 <HAL_RCC_OscConfig+0x240>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0f0      	beq.n	8004066 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004084:	4b28      	ldr	r3, [pc, #160]	; (8004128 <HAL_RCC_OscConfig+0x240>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	4925      	ldr	r1, [pc, #148]	; (8004128 <HAL_RCC_OscConfig+0x240>)
 8004094:	4313      	orrs	r3, r2
 8004096:	600b      	str	r3, [r1, #0]
 8004098:	e015      	b.n	80040c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800409a:	4b24      	ldr	r3, [pc, #144]	; (800412c <HAL_RCC_OscConfig+0x244>)
 800409c:	2200      	movs	r2, #0
 800409e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a0:	f7fe ffe8 	bl	8003074 <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040a8:	f7fe ffe4 	bl	8003074 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e187      	b.n	80043ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ba:	4b1b      	ldr	r3, [pc, #108]	; (8004128 <HAL_RCC_OscConfig+0x240>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1f0      	bne.n	80040a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d036      	beq.n	8004140 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d016      	beq.n	8004108 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040da:	4b15      	ldr	r3, [pc, #84]	; (8004130 <HAL_RCC_OscConfig+0x248>)
 80040dc:	2201      	movs	r2, #1
 80040de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e0:	f7fe ffc8 	bl	8003074 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040e8:	f7fe ffc4 	bl	8003074 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e167      	b.n	80043ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040fa:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <HAL_RCC_OscConfig+0x240>)
 80040fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0f0      	beq.n	80040e8 <HAL_RCC_OscConfig+0x200>
 8004106:	e01b      	b.n	8004140 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004108:	4b09      	ldr	r3, [pc, #36]	; (8004130 <HAL_RCC_OscConfig+0x248>)
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800410e:	f7fe ffb1 	bl	8003074 <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004114:	e00e      	b.n	8004134 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004116:	f7fe ffad 	bl	8003074 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d907      	bls.n	8004134 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e150      	b.n	80043ca <HAL_RCC_OscConfig+0x4e2>
 8004128:	40023800 	.word	0x40023800
 800412c:	42470000 	.word	0x42470000
 8004130:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004134:	4b88      	ldr	r3, [pc, #544]	; (8004358 <HAL_RCC_OscConfig+0x470>)
 8004136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1ea      	bne.n	8004116 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 8097 	beq.w	800427c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800414e:	2300      	movs	r3, #0
 8004150:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004152:	4b81      	ldr	r3, [pc, #516]	; (8004358 <HAL_RCC_OscConfig+0x470>)
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10f      	bne.n	800417e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800415e:	2300      	movs	r3, #0
 8004160:	60bb      	str	r3, [r7, #8]
 8004162:	4b7d      	ldr	r3, [pc, #500]	; (8004358 <HAL_RCC_OscConfig+0x470>)
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	4a7c      	ldr	r2, [pc, #496]	; (8004358 <HAL_RCC_OscConfig+0x470>)
 8004168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800416c:	6413      	str	r3, [r2, #64]	; 0x40
 800416e:	4b7a      	ldr	r3, [pc, #488]	; (8004358 <HAL_RCC_OscConfig+0x470>)
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004176:	60bb      	str	r3, [r7, #8]
 8004178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800417a:	2301      	movs	r3, #1
 800417c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800417e:	4b77      	ldr	r3, [pc, #476]	; (800435c <HAL_RCC_OscConfig+0x474>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004186:	2b00      	cmp	r3, #0
 8004188:	d118      	bne.n	80041bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800418a:	4b74      	ldr	r3, [pc, #464]	; (800435c <HAL_RCC_OscConfig+0x474>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a73      	ldr	r2, [pc, #460]	; (800435c <HAL_RCC_OscConfig+0x474>)
 8004190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004194:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004196:	f7fe ff6d 	bl	8003074 <HAL_GetTick>
 800419a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419c:	e008      	b.n	80041b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800419e:	f7fe ff69 	bl	8003074 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d901      	bls.n	80041b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e10c      	b.n	80043ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b0:	4b6a      	ldr	r3, [pc, #424]	; (800435c <HAL_RCC_OscConfig+0x474>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d0f0      	beq.n	800419e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d106      	bne.n	80041d2 <HAL_RCC_OscConfig+0x2ea>
 80041c4:	4b64      	ldr	r3, [pc, #400]	; (8004358 <HAL_RCC_OscConfig+0x470>)
 80041c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c8:	4a63      	ldr	r2, [pc, #396]	; (8004358 <HAL_RCC_OscConfig+0x470>)
 80041ca:	f043 0301 	orr.w	r3, r3, #1
 80041ce:	6713      	str	r3, [r2, #112]	; 0x70
 80041d0:	e01c      	b.n	800420c <HAL_RCC_OscConfig+0x324>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	2b05      	cmp	r3, #5
 80041d8:	d10c      	bne.n	80041f4 <HAL_RCC_OscConfig+0x30c>
 80041da:	4b5f      	ldr	r3, [pc, #380]	; (8004358 <HAL_RCC_OscConfig+0x470>)
 80041dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041de:	4a5e      	ldr	r2, [pc, #376]	; (8004358 <HAL_RCC_OscConfig+0x470>)
 80041e0:	f043 0304 	orr.w	r3, r3, #4
 80041e4:	6713      	str	r3, [r2, #112]	; 0x70
 80041e6:	4b5c      	ldr	r3, [pc, #368]	; (8004358 <HAL_RCC_OscConfig+0x470>)
 80041e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ea:	4a5b      	ldr	r2, [pc, #364]	; (8004358 <HAL_RCC_OscConfig+0x470>)
 80041ec:	f043 0301 	orr.w	r3, r3, #1
 80041f0:	6713      	str	r3, [r2, #112]	; 0x70
 80041f2:	e00b      	b.n	800420c <HAL_RCC_OscConfig+0x324>
 80041f4:	4b58      	ldr	r3, [pc, #352]	; (8004358 <HAL_RCC_OscConfig+0x470>)
 80041f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f8:	4a57      	ldr	r2, [pc, #348]	; (8004358 <HAL_RCC_OscConfig+0x470>)
 80041fa:	f023 0301 	bic.w	r3, r3, #1
 80041fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004200:	4b55      	ldr	r3, [pc, #340]	; (8004358 <HAL_RCC_OscConfig+0x470>)
 8004202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004204:	4a54      	ldr	r2, [pc, #336]	; (8004358 <HAL_RCC_OscConfig+0x470>)
 8004206:	f023 0304 	bic.w	r3, r3, #4
 800420a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d015      	beq.n	8004240 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004214:	f7fe ff2e 	bl	8003074 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800421a:	e00a      	b.n	8004232 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800421c:	f7fe ff2a 	bl	8003074 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	f241 3288 	movw	r2, #5000	; 0x1388
 800422a:	4293      	cmp	r3, r2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e0cb      	b.n	80043ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004232:	4b49      	ldr	r3, [pc, #292]	; (8004358 <HAL_RCC_OscConfig+0x470>)
 8004234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0ee      	beq.n	800421c <HAL_RCC_OscConfig+0x334>
 800423e:	e014      	b.n	800426a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004240:	f7fe ff18 	bl	8003074 <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004246:	e00a      	b.n	800425e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004248:	f7fe ff14 	bl	8003074 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	f241 3288 	movw	r2, #5000	; 0x1388
 8004256:	4293      	cmp	r3, r2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e0b5      	b.n	80043ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800425e:	4b3e      	ldr	r3, [pc, #248]	; (8004358 <HAL_RCC_OscConfig+0x470>)
 8004260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1ee      	bne.n	8004248 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800426a:	7dfb      	ldrb	r3, [r7, #23]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d105      	bne.n	800427c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004270:	4b39      	ldr	r3, [pc, #228]	; (8004358 <HAL_RCC_OscConfig+0x470>)
 8004272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004274:	4a38      	ldr	r2, [pc, #224]	; (8004358 <HAL_RCC_OscConfig+0x470>)
 8004276:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800427a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 80a1 	beq.w	80043c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004286:	4b34      	ldr	r3, [pc, #208]	; (8004358 <HAL_RCC_OscConfig+0x470>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 030c 	and.w	r3, r3, #12
 800428e:	2b08      	cmp	r3, #8
 8004290:	d05c      	beq.n	800434c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d141      	bne.n	800431e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800429a:	4b31      	ldr	r3, [pc, #196]	; (8004360 <HAL_RCC_OscConfig+0x478>)
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a0:	f7fe fee8 	bl	8003074 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042a8:	f7fe fee4 	bl	8003074 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e087      	b.n	80043ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ba:	4b27      	ldr	r3, [pc, #156]	; (8004358 <HAL_RCC_OscConfig+0x470>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69da      	ldr	r2, [r3, #28]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	019b      	lsls	r3, r3, #6
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042dc:	085b      	lsrs	r3, r3, #1
 80042de:	3b01      	subs	r3, #1
 80042e0:	041b      	lsls	r3, r3, #16
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e8:	061b      	lsls	r3, r3, #24
 80042ea:	491b      	ldr	r1, [pc, #108]	; (8004358 <HAL_RCC_OscConfig+0x470>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042f0:	4b1b      	ldr	r3, [pc, #108]	; (8004360 <HAL_RCC_OscConfig+0x478>)
 80042f2:	2201      	movs	r2, #1
 80042f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f6:	f7fe febd 	bl	8003074 <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042fc:	e008      	b.n	8004310 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042fe:	f7fe feb9 	bl	8003074 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e05c      	b.n	80043ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004310:	4b11      	ldr	r3, [pc, #68]	; (8004358 <HAL_RCC_OscConfig+0x470>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0f0      	beq.n	80042fe <HAL_RCC_OscConfig+0x416>
 800431c:	e054      	b.n	80043c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800431e:	4b10      	ldr	r3, [pc, #64]	; (8004360 <HAL_RCC_OscConfig+0x478>)
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004324:	f7fe fea6 	bl	8003074 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800432c:	f7fe fea2 	bl	8003074 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e045      	b.n	80043ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800433e:	4b06      	ldr	r3, [pc, #24]	; (8004358 <HAL_RCC_OscConfig+0x470>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f0      	bne.n	800432c <HAL_RCC_OscConfig+0x444>
 800434a:	e03d      	b.n	80043c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d107      	bne.n	8004364 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e038      	b.n	80043ca <HAL_RCC_OscConfig+0x4e2>
 8004358:	40023800 	.word	0x40023800
 800435c:	40007000 	.word	0x40007000
 8004360:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004364:	4b1b      	ldr	r3, [pc, #108]	; (80043d4 <HAL_RCC_OscConfig+0x4ec>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d028      	beq.n	80043c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800437c:	429a      	cmp	r2, r3
 800437e:	d121      	bne.n	80043c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800438a:	429a      	cmp	r2, r3
 800438c:	d11a      	bne.n	80043c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004394:	4013      	ands	r3, r2
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800439a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800439c:	4293      	cmp	r3, r2
 800439e:	d111      	bne.n	80043c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043aa:	085b      	lsrs	r3, r3, #1
 80043ac:	3b01      	subs	r3, #1
 80043ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d107      	bne.n	80043c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d001      	beq.n	80043c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e000      	b.n	80043ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	40023800 	.word	0x40023800

080043d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e0cc      	b.n	8004586 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043ec:	4b68      	ldr	r3, [pc, #416]	; (8004590 <HAL_RCC_ClockConfig+0x1b8>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d90c      	bls.n	8004414 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043fa:	4b65      	ldr	r3, [pc, #404]	; (8004590 <HAL_RCC_ClockConfig+0x1b8>)
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004402:	4b63      	ldr	r3, [pc, #396]	; (8004590 <HAL_RCC_ClockConfig+0x1b8>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	429a      	cmp	r2, r3
 800440e:	d001      	beq.n	8004414 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e0b8      	b.n	8004586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d020      	beq.n	8004462 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	d005      	beq.n	8004438 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800442c:	4b59      	ldr	r3, [pc, #356]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	4a58      	ldr	r2, [pc, #352]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004436:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0308 	and.w	r3, r3, #8
 8004440:	2b00      	cmp	r3, #0
 8004442:	d005      	beq.n	8004450 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004444:	4b53      	ldr	r3, [pc, #332]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	4a52      	ldr	r2, [pc, #328]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 800444a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800444e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004450:	4b50      	ldr	r3, [pc, #320]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	494d      	ldr	r1, [pc, #308]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	4313      	orrs	r3, r2
 8004460:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d044      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d107      	bne.n	8004486 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004476:	4b47      	ldr	r3, [pc, #284]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d119      	bne.n	80044b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e07f      	b.n	8004586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b02      	cmp	r3, #2
 800448c:	d003      	beq.n	8004496 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004492:	2b03      	cmp	r3, #3
 8004494:	d107      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004496:	4b3f      	ldr	r3, [pc, #252]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d109      	bne.n	80044b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e06f      	b.n	8004586 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a6:	4b3b      	ldr	r3, [pc, #236]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e067      	b.n	8004586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044b6:	4b37      	ldr	r3, [pc, #220]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f023 0203 	bic.w	r2, r3, #3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	4934      	ldr	r1, [pc, #208]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044c8:	f7fe fdd4 	bl	8003074 <HAL_GetTick>
 80044cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ce:	e00a      	b.n	80044e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044d0:	f7fe fdd0 	bl	8003074 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	f241 3288 	movw	r2, #5000	; 0x1388
 80044de:	4293      	cmp	r3, r2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e04f      	b.n	8004586 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e6:	4b2b      	ldr	r3, [pc, #172]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 020c 	and.w	r2, r3, #12
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d1eb      	bne.n	80044d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044f8:	4b25      	ldr	r3, [pc, #148]	; (8004590 <HAL_RCC_ClockConfig+0x1b8>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	429a      	cmp	r2, r3
 8004504:	d20c      	bcs.n	8004520 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004506:	4b22      	ldr	r3, [pc, #136]	; (8004590 <HAL_RCC_ClockConfig+0x1b8>)
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800450e:	4b20      	ldr	r3, [pc, #128]	; (8004590 <HAL_RCC_ClockConfig+0x1b8>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	429a      	cmp	r2, r3
 800451a:	d001      	beq.n	8004520 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e032      	b.n	8004586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b00      	cmp	r3, #0
 800452a:	d008      	beq.n	800453e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800452c:	4b19      	ldr	r3, [pc, #100]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	4916      	ldr	r1, [pc, #88]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 800453a:	4313      	orrs	r3, r2
 800453c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	2b00      	cmp	r3, #0
 8004548:	d009      	beq.n	800455e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800454a:	4b12      	ldr	r3, [pc, #72]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	490e      	ldr	r1, [pc, #56]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	4313      	orrs	r3, r2
 800455c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800455e:	f000 f821 	bl	80045a4 <HAL_RCC_GetSysClockFreq>
 8004562:	4602      	mov	r2, r0
 8004564:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	091b      	lsrs	r3, r3, #4
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	490a      	ldr	r1, [pc, #40]	; (8004598 <HAL_RCC_ClockConfig+0x1c0>)
 8004570:	5ccb      	ldrb	r3, [r1, r3]
 8004572:	fa22 f303 	lsr.w	r3, r2, r3
 8004576:	4a09      	ldr	r2, [pc, #36]	; (800459c <HAL_RCC_ClockConfig+0x1c4>)
 8004578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800457a:	4b09      	ldr	r3, [pc, #36]	; (80045a0 <HAL_RCC_ClockConfig+0x1c8>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f7fe fd34 	bl	8002fec <HAL_InitTick>

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	40023c00 	.word	0x40023c00
 8004594:	40023800 	.word	0x40023800
 8004598:	0800cce0 	.word	0x0800cce0
 800459c:	200000e4 	.word	0x200000e4
 80045a0:	200000e8 	.word	0x200000e8

080045a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045a8:	b094      	sub	sp, #80	; 0x50
 80045aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045ac:	2300      	movs	r3, #0
 80045ae:	647b      	str	r3, [r7, #68]	; 0x44
 80045b0:	2300      	movs	r3, #0
 80045b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045b4:	2300      	movs	r3, #0
 80045b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045bc:	4b79      	ldr	r3, [pc, #484]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f003 030c 	and.w	r3, r3, #12
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d00d      	beq.n	80045e4 <HAL_RCC_GetSysClockFreq+0x40>
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	f200 80e1 	bhi.w	8004790 <HAL_RCC_GetSysClockFreq+0x1ec>
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <HAL_RCC_GetSysClockFreq+0x34>
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d003      	beq.n	80045de <HAL_RCC_GetSysClockFreq+0x3a>
 80045d6:	e0db      	b.n	8004790 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045d8:	4b73      	ldr	r3, [pc, #460]	; (80047a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80045da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80045dc:	e0db      	b.n	8004796 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045de:	4b73      	ldr	r3, [pc, #460]	; (80047ac <HAL_RCC_GetSysClockFreq+0x208>)
 80045e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045e2:	e0d8      	b.n	8004796 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045e4:	4b6f      	ldr	r3, [pc, #444]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045ee:	4b6d      	ldr	r3, [pc, #436]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d063      	beq.n	80046c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045fa:	4b6a      	ldr	r3, [pc, #424]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	099b      	lsrs	r3, r3, #6
 8004600:	2200      	movs	r2, #0
 8004602:	63bb      	str	r3, [r7, #56]	; 0x38
 8004604:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800460c:	633b      	str	r3, [r7, #48]	; 0x30
 800460e:	2300      	movs	r3, #0
 8004610:	637b      	str	r3, [r7, #52]	; 0x34
 8004612:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004616:	4622      	mov	r2, r4
 8004618:	462b      	mov	r3, r5
 800461a:	f04f 0000 	mov.w	r0, #0
 800461e:	f04f 0100 	mov.w	r1, #0
 8004622:	0159      	lsls	r1, r3, #5
 8004624:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004628:	0150      	lsls	r0, r2, #5
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	4621      	mov	r1, r4
 8004630:	1a51      	subs	r1, r2, r1
 8004632:	6139      	str	r1, [r7, #16]
 8004634:	4629      	mov	r1, r5
 8004636:	eb63 0301 	sbc.w	r3, r3, r1
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004648:	4659      	mov	r1, fp
 800464a:	018b      	lsls	r3, r1, #6
 800464c:	4651      	mov	r1, sl
 800464e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004652:	4651      	mov	r1, sl
 8004654:	018a      	lsls	r2, r1, #6
 8004656:	4651      	mov	r1, sl
 8004658:	ebb2 0801 	subs.w	r8, r2, r1
 800465c:	4659      	mov	r1, fp
 800465e:	eb63 0901 	sbc.w	r9, r3, r1
 8004662:	f04f 0200 	mov.w	r2, #0
 8004666:	f04f 0300 	mov.w	r3, #0
 800466a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800466e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004672:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004676:	4690      	mov	r8, r2
 8004678:	4699      	mov	r9, r3
 800467a:	4623      	mov	r3, r4
 800467c:	eb18 0303 	adds.w	r3, r8, r3
 8004680:	60bb      	str	r3, [r7, #8]
 8004682:	462b      	mov	r3, r5
 8004684:	eb49 0303 	adc.w	r3, r9, r3
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	f04f 0200 	mov.w	r2, #0
 800468e:	f04f 0300 	mov.w	r3, #0
 8004692:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004696:	4629      	mov	r1, r5
 8004698:	024b      	lsls	r3, r1, #9
 800469a:	4621      	mov	r1, r4
 800469c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046a0:	4621      	mov	r1, r4
 80046a2:	024a      	lsls	r2, r1, #9
 80046a4:	4610      	mov	r0, r2
 80046a6:	4619      	mov	r1, r3
 80046a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046aa:	2200      	movs	r2, #0
 80046ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80046ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046b4:	f7fc fbf6 	bl	8000ea4 <__aeabi_uldivmod>
 80046b8:	4602      	mov	r2, r0
 80046ba:	460b      	mov	r3, r1
 80046bc:	4613      	mov	r3, r2
 80046be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046c0:	e058      	b.n	8004774 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046c2:	4b38      	ldr	r3, [pc, #224]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	099b      	lsrs	r3, r3, #6
 80046c8:	2200      	movs	r2, #0
 80046ca:	4618      	mov	r0, r3
 80046cc:	4611      	mov	r1, r2
 80046ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046d2:	623b      	str	r3, [r7, #32]
 80046d4:	2300      	movs	r3, #0
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24
 80046d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046dc:	4642      	mov	r2, r8
 80046de:	464b      	mov	r3, r9
 80046e0:	f04f 0000 	mov.w	r0, #0
 80046e4:	f04f 0100 	mov.w	r1, #0
 80046e8:	0159      	lsls	r1, r3, #5
 80046ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046ee:	0150      	lsls	r0, r2, #5
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	4641      	mov	r1, r8
 80046f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80046fa:	4649      	mov	r1, r9
 80046fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004700:	f04f 0200 	mov.w	r2, #0
 8004704:	f04f 0300 	mov.w	r3, #0
 8004708:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800470c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004710:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004714:	ebb2 040a 	subs.w	r4, r2, sl
 8004718:	eb63 050b 	sbc.w	r5, r3, fp
 800471c:	f04f 0200 	mov.w	r2, #0
 8004720:	f04f 0300 	mov.w	r3, #0
 8004724:	00eb      	lsls	r3, r5, #3
 8004726:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800472a:	00e2      	lsls	r2, r4, #3
 800472c:	4614      	mov	r4, r2
 800472e:	461d      	mov	r5, r3
 8004730:	4643      	mov	r3, r8
 8004732:	18e3      	adds	r3, r4, r3
 8004734:	603b      	str	r3, [r7, #0]
 8004736:	464b      	mov	r3, r9
 8004738:	eb45 0303 	adc.w	r3, r5, r3
 800473c:	607b      	str	r3, [r7, #4]
 800473e:	f04f 0200 	mov.w	r2, #0
 8004742:	f04f 0300 	mov.w	r3, #0
 8004746:	e9d7 4500 	ldrd	r4, r5, [r7]
 800474a:	4629      	mov	r1, r5
 800474c:	028b      	lsls	r3, r1, #10
 800474e:	4621      	mov	r1, r4
 8004750:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004754:	4621      	mov	r1, r4
 8004756:	028a      	lsls	r2, r1, #10
 8004758:	4610      	mov	r0, r2
 800475a:	4619      	mov	r1, r3
 800475c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800475e:	2200      	movs	r2, #0
 8004760:	61bb      	str	r3, [r7, #24]
 8004762:	61fa      	str	r2, [r7, #28]
 8004764:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004768:	f7fc fb9c 	bl	8000ea4 <__aeabi_uldivmod>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4613      	mov	r3, r2
 8004772:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004774:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	0c1b      	lsrs	r3, r3, #16
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	3301      	adds	r3, #1
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004784:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004788:	fbb2 f3f3 	udiv	r3, r2, r3
 800478c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800478e:	e002      	b.n	8004796 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004790:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004792:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004794:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004798:	4618      	mov	r0, r3
 800479a:	3750      	adds	r7, #80	; 0x50
 800479c:	46bd      	mov	sp, r7
 800479e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047a2:	bf00      	nop
 80047a4:	40023800 	.word	0x40023800
 80047a8:	00f42400 	.word	0x00f42400
 80047ac:	007a1200 	.word	0x007a1200

080047b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047b4:	4b03      	ldr	r3, [pc, #12]	; (80047c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80047b6:	681b      	ldr	r3, [r3, #0]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	200000e4 	.word	0x200000e4

080047c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047cc:	f7ff fff0 	bl	80047b0 <HAL_RCC_GetHCLKFreq>
 80047d0:	4602      	mov	r2, r0
 80047d2:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	0a9b      	lsrs	r3, r3, #10
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	4903      	ldr	r1, [pc, #12]	; (80047ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80047de:	5ccb      	ldrb	r3, [r1, r3]
 80047e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40023800 	.word	0x40023800
 80047ec:	0800ccf0 	.word	0x0800ccf0

080047f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047f4:	f7ff ffdc 	bl	80047b0 <HAL_RCC_GetHCLKFreq>
 80047f8:	4602      	mov	r2, r0
 80047fa:	4b05      	ldr	r3, [pc, #20]	; (8004810 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	0b5b      	lsrs	r3, r3, #13
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	4903      	ldr	r1, [pc, #12]	; (8004814 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004806:	5ccb      	ldrb	r3, [r1, r3]
 8004808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800480c:	4618      	mov	r0, r3
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40023800 	.word	0x40023800
 8004814:	0800ccf0 	.word	0x0800ccf0

08004818 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e041      	b.n	80048ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d106      	bne.n	8004844 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7fe f8e2 	bl	8002a08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	3304      	adds	r3, #4
 8004854:	4619      	mov	r1, r3
 8004856:	4610      	mov	r0, r2
 8004858:	f000 fe16 	bl	8005488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
	...

080048b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d001      	beq.n	80048d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e046      	b.n	800495e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a23      	ldr	r2, [pc, #140]	; (800496c <HAL_TIM_Base_Start+0xb4>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d022      	beq.n	8004928 <HAL_TIM_Base_Start+0x70>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ea:	d01d      	beq.n	8004928 <HAL_TIM_Base_Start+0x70>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a1f      	ldr	r2, [pc, #124]	; (8004970 <HAL_TIM_Base_Start+0xb8>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d018      	beq.n	8004928 <HAL_TIM_Base_Start+0x70>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a1e      	ldr	r2, [pc, #120]	; (8004974 <HAL_TIM_Base_Start+0xbc>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d013      	beq.n	8004928 <HAL_TIM_Base_Start+0x70>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a1c      	ldr	r2, [pc, #112]	; (8004978 <HAL_TIM_Base_Start+0xc0>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d00e      	beq.n	8004928 <HAL_TIM_Base_Start+0x70>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a1b      	ldr	r2, [pc, #108]	; (800497c <HAL_TIM_Base_Start+0xc4>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d009      	beq.n	8004928 <HAL_TIM_Base_Start+0x70>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a19      	ldr	r2, [pc, #100]	; (8004980 <HAL_TIM_Base_Start+0xc8>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d004      	beq.n	8004928 <HAL_TIM_Base_Start+0x70>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a18      	ldr	r2, [pc, #96]	; (8004984 <HAL_TIM_Base_Start+0xcc>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d111      	bne.n	800494c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2b06      	cmp	r3, #6
 8004938:	d010      	beq.n	800495c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f042 0201 	orr.w	r2, r2, #1
 8004948:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800494a:	e007      	b.n	800495c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0201 	orr.w	r2, r2, #1
 800495a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	40010000 	.word	0x40010000
 8004970:	40000400 	.word	0x40000400
 8004974:	40000800 	.word	0x40000800
 8004978:	40000c00 	.word	0x40000c00
 800497c:	40010400 	.word	0x40010400
 8004980:	40014000 	.word	0x40014000
 8004984:	40001800 	.word	0x40001800

08004988 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b01      	cmp	r3, #1
 800499a:	d001      	beq.n	80049a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e04e      	b.n	8004a3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0201 	orr.w	r2, r2, #1
 80049b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a23      	ldr	r2, [pc, #140]	; (8004a4c <HAL_TIM_Base_Start_IT+0xc4>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d022      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x80>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ca:	d01d      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x80>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a1f      	ldr	r2, [pc, #124]	; (8004a50 <HAL_TIM_Base_Start_IT+0xc8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d018      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x80>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a1e      	ldr	r2, [pc, #120]	; (8004a54 <HAL_TIM_Base_Start_IT+0xcc>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d013      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x80>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a1c      	ldr	r2, [pc, #112]	; (8004a58 <HAL_TIM_Base_Start_IT+0xd0>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00e      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x80>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a1b      	ldr	r2, [pc, #108]	; (8004a5c <HAL_TIM_Base_Start_IT+0xd4>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d009      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x80>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a19      	ldr	r2, [pc, #100]	; (8004a60 <HAL_TIM_Base_Start_IT+0xd8>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d004      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x80>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a18      	ldr	r2, [pc, #96]	; (8004a64 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d111      	bne.n	8004a2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b06      	cmp	r3, #6
 8004a18:	d010      	beq.n	8004a3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f042 0201 	orr.w	r2, r2, #1
 8004a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2a:	e007      	b.n	8004a3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0201 	orr.w	r2, r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	40010000 	.word	0x40010000
 8004a50:	40000400 	.word	0x40000400
 8004a54:	40000800 	.word	0x40000800
 8004a58:	40000c00 	.word	0x40000c00
 8004a5c:	40010400 	.word	0x40010400
 8004a60:	40014000 	.word	0x40014000
 8004a64:	40001800 	.word	0x40001800

08004a68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e041      	b.n	8004afe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d106      	bne.n	8004a94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f839 	bl	8004b06 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4610      	mov	r0, r2
 8004aa8:	f000 fcee 	bl	8005488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
	...

08004b1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d109      	bne.n	8004b40 <HAL_TIM_PWM_Start+0x24>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	bf14      	ite	ne
 8004b38:	2301      	movne	r3, #1
 8004b3a:	2300      	moveq	r3, #0
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	e022      	b.n	8004b86 <HAL_TIM_PWM_Start+0x6a>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d109      	bne.n	8004b5a <HAL_TIM_PWM_Start+0x3e>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	bf14      	ite	ne
 8004b52:	2301      	movne	r3, #1
 8004b54:	2300      	moveq	r3, #0
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	e015      	b.n	8004b86 <HAL_TIM_PWM_Start+0x6a>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d109      	bne.n	8004b74 <HAL_TIM_PWM_Start+0x58>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	bf14      	ite	ne
 8004b6c:	2301      	movne	r3, #1
 8004b6e:	2300      	moveq	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	e008      	b.n	8004b86 <HAL_TIM_PWM_Start+0x6a>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	bf14      	ite	ne
 8004b80:	2301      	movne	r3, #1
 8004b82:	2300      	moveq	r3, #0
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e07c      	b.n	8004c88 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d104      	bne.n	8004b9e <HAL_TIM_PWM_Start+0x82>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b9c:	e013      	b.n	8004bc6 <HAL_TIM_PWM_Start+0xaa>
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d104      	bne.n	8004bae <HAL_TIM_PWM_Start+0x92>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bac:	e00b      	b.n	8004bc6 <HAL_TIM_PWM_Start+0xaa>
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d104      	bne.n	8004bbe <HAL_TIM_PWM_Start+0xa2>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bbc:	e003      	b.n	8004bc6 <HAL_TIM_PWM_Start+0xaa>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	6839      	ldr	r1, [r7, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 ff44 	bl	8005a5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a2d      	ldr	r2, [pc, #180]	; (8004c90 <HAL_TIM_PWM_Start+0x174>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d004      	beq.n	8004be8 <HAL_TIM_PWM_Start+0xcc>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a2c      	ldr	r2, [pc, #176]	; (8004c94 <HAL_TIM_PWM_Start+0x178>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d101      	bne.n	8004bec <HAL_TIM_PWM_Start+0xd0>
 8004be8:	2301      	movs	r3, #1
 8004bea:	e000      	b.n	8004bee <HAL_TIM_PWM_Start+0xd2>
 8004bec:	2300      	movs	r3, #0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d007      	beq.n	8004c02 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a22      	ldr	r2, [pc, #136]	; (8004c90 <HAL_TIM_PWM_Start+0x174>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d022      	beq.n	8004c52 <HAL_TIM_PWM_Start+0x136>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c14:	d01d      	beq.n	8004c52 <HAL_TIM_PWM_Start+0x136>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a1f      	ldr	r2, [pc, #124]	; (8004c98 <HAL_TIM_PWM_Start+0x17c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d018      	beq.n	8004c52 <HAL_TIM_PWM_Start+0x136>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a1d      	ldr	r2, [pc, #116]	; (8004c9c <HAL_TIM_PWM_Start+0x180>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d013      	beq.n	8004c52 <HAL_TIM_PWM_Start+0x136>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a1c      	ldr	r2, [pc, #112]	; (8004ca0 <HAL_TIM_PWM_Start+0x184>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d00e      	beq.n	8004c52 <HAL_TIM_PWM_Start+0x136>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a16      	ldr	r2, [pc, #88]	; (8004c94 <HAL_TIM_PWM_Start+0x178>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d009      	beq.n	8004c52 <HAL_TIM_PWM_Start+0x136>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a18      	ldr	r2, [pc, #96]	; (8004ca4 <HAL_TIM_PWM_Start+0x188>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d004      	beq.n	8004c52 <HAL_TIM_PWM_Start+0x136>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a16      	ldr	r2, [pc, #88]	; (8004ca8 <HAL_TIM_PWM_Start+0x18c>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d111      	bne.n	8004c76 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2b06      	cmp	r3, #6
 8004c62:	d010      	beq.n	8004c86 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0201 	orr.w	r2, r2, #1
 8004c72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c74:	e007      	b.n	8004c86 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f042 0201 	orr.w	r2, r2, #1
 8004c84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40010000 	.word	0x40010000
 8004c94:	40010400 	.word	0x40010400
 8004c98:	40000400 	.word	0x40000400
 8004c9c:	40000800 	.word	0x40000800
 8004ca0:	40000c00 	.word	0x40000c00
 8004ca4:	40014000 	.word	0x40014000
 8004ca8:	40001800 	.word	0x40001800

08004cac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d101      	bne.n	8004cc0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e097      	b.n	8004df0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d106      	bne.n	8004cda <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7fd fd8b 	bl	80027f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2202      	movs	r2, #2
 8004cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6812      	ldr	r2, [r2, #0]
 8004cec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cf0:	f023 0307 	bic.w	r3, r3, #7
 8004cf4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4610      	mov	r0, r2
 8004d02:	f000 fbc1 	bl	8005488 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d2e:	f023 0303 	bic.w	r3, r3, #3
 8004d32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	021b      	lsls	r3, r3, #8
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004d4c:	f023 030c 	bic.w	r3, r3, #12
 8004d50:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	021b      	lsls	r3, r3, #8
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	011a      	lsls	r2, r3, #4
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	031b      	lsls	r3, r3, #12
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004d8a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004d92:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	011b      	lsls	r3, r3, #4
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e08:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e10:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e18:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e20:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d110      	bne.n	8004e4a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d102      	bne.n	8004e34 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e2e:	7b7b      	ldrb	r3, [r7, #13]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d001      	beq.n	8004e38 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e069      	b.n	8004f0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e48:	e031      	b.n	8004eae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d110      	bne.n	8004e72 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e50:	7bbb      	ldrb	r3, [r7, #14]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d102      	bne.n	8004e5c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e56:	7b3b      	ldrb	r3, [r7, #12]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d001      	beq.n	8004e60 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e055      	b.n	8004f0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e70:	e01d      	b.n	8004eae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e72:	7bfb      	ldrb	r3, [r7, #15]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d108      	bne.n	8004e8a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e78:	7bbb      	ldrb	r3, [r7, #14]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d105      	bne.n	8004e8a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e7e:	7b7b      	ldrb	r3, [r7, #13]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d102      	bne.n	8004e8a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e84:	7b3b      	ldrb	r3, [r7, #12]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d001      	beq.n	8004e8e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e03e      	b.n	8004f0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2202      	movs	r2, #2
 8004e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2202      	movs	r2, #2
 8004e9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <HAL_TIM_Encoder_Start+0xc4>
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d008      	beq.n	8004ecc <HAL_TIM_Encoder_Start+0xd4>
 8004eba:	e00f      	b.n	8004edc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 fdc9 	bl	8005a5c <TIM_CCxChannelCmd>
      break;
 8004eca:	e016      	b.n	8004efa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	2104      	movs	r1, #4
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f000 fdc1 	bl	8005a5c <TIM_CCxChannelCmd>
      break;
 8004eda:	e00e      	b.n	8004efa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 fdb9 	bl	8005a5c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	2104      	movs	r1, #4
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 fdb2 	bl	8005a5c <TIM_CCxChannelCmd>
      break;
 8004ef8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f042 0201 	orr.w	r2, r2, #1
 8004f08:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d122      	bne.n	8004f70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d11b      	bne.n	8004f70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f06f 0202 	mvn.w	r2, #2
 8004f40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	f003 0303 	and.w	r3, r3, #3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 fa77 	bl	800544a <HAL_TIM_IC_CaptureCallback>
 8004f5c:	e005      	b.n	8004f6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fa69 	bl	8005436 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fa7a 	bl	800545e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f003 0304 	and.w	r3, r3, #4
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	d122      	bne.n	8004fc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f003 0304 	and.w	r3, r3, #4
 8004f88:	2b04      	cmp	r3, #4
 8004f8a:	d11b      	bne.n	8004fc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f06f 0204 	mvn.w	r2, #4
 8004f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2202      	movs	r2, #2
 8004f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fa4d 	bl	800544a <HAL_TIM_IC_CaptureCallback>
 8004fb0:	e005      	b.n	8004fbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fa3f 	bl	8005436 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 fa50 	bl	800545e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f003 0308 	and.w	r3, r3, #8
 8004fce:	2b08      	cmp	r3, #8
 8004fd0:	d122      	bne.n	8005018 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f003 0308 	and.w	r3, r3, #8
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d11b      	bne.n	8005018 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f06f 0208 	mvn.w	r2, #8
 8004fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2204      	movs	r2, #4
 8004fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	f003 0303 	and.w	r3, r3, #3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fa23 	bl	800544a <HAL_TIM_IC_CaptureCallback>
 8005004:	e005      	b.n	8005012 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fa15 	bl	8005436 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 fa26 	bl	800545e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f003 0310 	and.w	r3, r3, #16
 8005022:	2b10      	cmp	r3, #16
 8005024:	d122      	bne.n	800506c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f003 0310 	and.w	r3, r3, #16
 8005030:	2b10      	cmp	r3, #16
 8005032:	d11b      	bne.n	800506c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f06f 0210 	mvn.w	r2, #16
 800503c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2208      	movs	r2, #8
 8005042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f9f9 	bl	800544a <HAL_TIM_IC_CaptureCallback>
 8005058:	e005      	b.n	8005066 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f9eb 	bl	8005436 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f9fc 	bl	800545e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b01      	cmp	r3, #1
 8005078:	d10e      	bne.n	8005098 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f003 0301 	and.w	r3, r3, #1
 8005084:	2b01      	cmp	r3, #1
 8005086:	d107      	bne.n	8005098 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f06f 0201 	mvn.w	r2, #1
 8005090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7fc f9f4 	bl	8001480 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a2:	2b80      	cmp	r3, #128	; 0x80
 80050a4:	d10e      	bne.n	80050c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b0:	2b80      	cmp	r3, #128	; 0x80
 80050b2:	d107      	bne.n	80050c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 fdca 	bl	8005c58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ce:	2b40      	cmp	r3, #64	; 0x40
 80050d0:	d10e      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050dc:	2b40      	cmp	r3, #64	; 0x40
 80050de:	d107      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f9c1 	bl	8005472 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	f003 0320 	and.w	r3, r3, #32
 80050fa:	2b20      	cmp	r3, #32
 80050fc:	d10e      	bne.n	800511c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f003 0320 	and.w	r3, r3, #32
 8005108:	2b20      	cmp	r3, #32
 800510a:	d107      	bne.n	800511c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f06f 0220 	mvn.w	r2, #32
 8005114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 fd94 	bl	8005c44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800511c:	bf00      	nop
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005130:	2300      	movs	r3, #0
 8005132:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800513a:	2b01      	cmp	r3, #1
 800513c:	d101      	bne.n	8005142 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800513e:	2302      	movs	r3, #2
 8005140:	e0ae      	b.n	80052a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b0c      	cmp	r3, #12
 800514e:	f200 809f 	bhi.w	8005290 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005152:	a201      	add	r2, pc, #4	; (adr r2, 8005158 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005158:	0800518d 	.word	0x0800518d
 800515c:	08005291 	.word	0x08005291
 8005160:	08005291 	.word	0x08005291
 8005164:	08005291 	.word	0x08005291
 8005168:	080051cd 	.word	0x080051cd
 800516c:	08005291 	.word	0x08005291
 8005170:	08005291 	.word	0x08005291
 8005174:	08005291 	.word	0x08005291
 8005178:	0800520f 	.word	0x0800520f
 800517c:	08005291 	.word	0x08005291
 8005180:	08005291 	.word	0x08005291
 8005184:	08005291 	.word	0x08005291
 8005188:	0800524f 	.word	0x0800524f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68b9      	ldr	r1, [r7, #8]
 8005192:	4618      	mov	r0, r3
 8005194:	f000 fa18 	bl	80055c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699a      	ldr	r2, [r3, #24]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0208 	orr.w	r2, r2, #8
 80051a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0204 	bic.w	r2, r2, #4
 80051b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6999      	ldr	r1, [r3, #24]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	691a      	ldr	r2, [r3, #16]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	619a      	str	r2, [r3, #24]
      break;
 80051ca:	e064      	b.n	8005296 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68b9      	ldr	r1, [r7, #8]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fa68 	bl	80056a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699a      	ldr	r2, [r3, #24]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699a      	ldr	r2, [r3, #24]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6999      	ldr	r1, [r3, #24]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	021a      	lsls	r2, r3, #8
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	619a      	str	r2, [r3, #24]
      break;
 800520c:	e043      	b.n	8005296 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68b9      	ldr	r1, [r7, #8]
 8005214:	4618      	mov	r0, r3
 8005216:	f000 fabd 	bl	8005794 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69da      	ldr	r2, [r3, #28]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f042 0208 	orr.w	r2, r2, #8
 8005228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69da      	ldr	r2, [r3, #28]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 0204 	bic.w	r2, r2, #4
 8005238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	69d9      	ldr	r1, [r3, #28]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	61da      	str	r2, [r3, #28]
      break;
 800524c:	e023      	b.n	8005296 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68b9      	ldr	r1, [r7, #8]
 8005254:	4618      	mov	r0, r3
 8005256:	f000 fb11 	bl	800587c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	69da      	ldr	r2, [r3, #28]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	69da      	ldr	r2, [r3, #28]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69d9      	ldr	r1, [r3, #28]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	021a      	lsls	r2, r3, #8
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	61da      	str	r2, [r3, #28]
      break;
 800528e:	e002      	b.n	8005296 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	75fb      	strb	r3, [r7, #23]
      break;
 8005294:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800529e:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3718      	adds	r7, #24
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052b2:	2300      	movs	r3, #0
 80052b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d101      	bne.n	80052c4 <HAL_TIM_ConfigClockSource+0x1c>
 80052c0:	2302      	movs	r3, #2
 80052c2:	e0b4      	b.n	800542e <HAL_TIM_ConfigClockSource+0x186>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052fc:	d03e      	beq.n	800537c <HAL_TIM_ConfigClockSource+0xd4>
 80052fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005302:	f200 8087 	bhi.w	8005414 <HAL_TIM_ConfigClockSource+0x16c>
 8005306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800530a:	f000 8086 	beq.w	800541a <HAL_TIM_ConfigClockSource+0x172>
 800530e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005312:	d87f      	bhi.n	8005414 <HAL_TIM_ConfigClockSource+0x16c>
 8005314:	2b70      	cmp	r3, #112	; 0x70
 8005316:	d01a      	beq.n	800534e <HAL_TIM_ConfigClockSource+0xa6>
 8005318:	2b70      	cmp	r3, #112	; 0x70
 800531a:	d87b      	bhi.n	8005414 <HAL_TIM_ConfigClockSource+0x16c>
 800531c:	2b60      	cmp	r3, #96	; 0x60
 800531e:	d050      	beq.n	80053c2 <HAL_TIM_ConfigClockSource+0x11a>
 8005320:	2b60      	cmp	r3, #96	; 0x60
 8005322:	d877      	bhi.n	8005414 <HAL_TIM_ConfigClockSource+0x16c>
 8005324:	2b50      	cmp	r3, #80	; 0x50
 8005326:	d03c      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0xfa>
 8005328:	2b50      	cmp	r3, #80	; 0x50
 800532a:	d873      	bhi.n	8005414 <HAL_TIM_ConfigClockSource+0x16c>
 800532c:	2b40      	cmp	r3, #64	; 0x40
 800532e:	d058      	beq.n	80053e2 <HAL_TIM_ConfigClockSource+0x13a>
 8005330:	2b40      	cmp	r3, #64	; 0x40
 8005332:	d86f      	bhi.n	8005414 <HAL_TIM_ConfigClockSource+0x16c>
 8005334:	2b30      	cmp	r3, #48	; 0x30
 8005336:	d064      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0x15a>
 8005338:	2b30      	cmp	r3, #48	; 0x30
 800533a:	d86b      	bhi.n	8005414 <HAL_TIM_ConfigClockSource+0x16c>
 800533c:	2b20      	cmp	r3, #32
 800533e:	d060      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0x15a>
 8005340:	2b20      	cmp	r3, #32
 8005342:	d867      	bhi.n	8005414 <HAL_TIM_ConfigClockSource+0x16c>
 8005344:	2b00      	cmp	r3, #0
 8005346:	d05c      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0x15a>
 8005348:	2b10      	cmp	r3, #16
 800534a:	d05a      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0x15a>
 800534c:	e062      	b.n	8005414 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	6899      	ldr	r1, [r3, #8]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f000 fb5d 	bl	8005a1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005370:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	609a      	str	r2, [r3, #8]
      break;
 800537a:	e04f      	b.n	800541c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6818      	ldr	r0, [r3, #0]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	6899      	ldr	r1, [r3, #8]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f000 fb46 	bl	8005a1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689a      	ldr	r2, [r3, #8]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800539e:	609a      	str	r2, [r3, #8]
      break;
 80053a0:	e03c      	b.n	800541c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6818      	ldr	r0, [r3, #0]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	6859      	ldr	r1, [r3, #4]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	461a      	mov	r2, r3
 80053b0:	f000 faba 	bl	8005928 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2150      	movs	r1, #80	; 0x50
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 fb13 	bl	80059e6 <TIM_ITRx_SetConfig>
      break;
 80053c0:	e02c      	b.n	800541c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6818      	ldr	r0, [r3, #0]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	6859      	ldr	r1, [r3, #4]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	461a      	mov	r2, r3
 80053d0:	f000 fad9 	bl	8005986 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2160      	movs	r1, #96	; 0x60
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 fb03 	bl	80059e6 <TIM_ITRx_SetConfig>
      break;
 80053e0:	e01c      	b.n	800541c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6818      	ldr	r0, [r3, #0]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	6859      	ldr	r1, [r3, #4]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	461a      	mov	r2, r3
 80053f0:	f000 fa9a 	bl	8005928 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2140      	movs	r1, #64	; 0x40
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 faf3 	bl	80059e6 <TIM_ITRx_SetConfig>
      break;
 8005400:	e00c      	b.n	800541c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4619      	mov	r1, r3
 800540c:	4610      	mov	r0, r2
 800540e:	f000 faea 	bl	80059e6 <TIM_ITRx_SetConfig>
      break;
 8005412:	e003      	b.n	800541c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	73fb      	strb	r3, [r7, #15]
      break;
 8005418:	e000      	b.n	800541c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800541a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800542c:	7bfb      	ldrb	r3, [r7, #15]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005452:	bf00      	nop
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005466:	bf00      	nop
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005472:	b480      	push	{r7}
 8005474:	b083      	sub	sp, #12
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
	...

08005488 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a40      	ldr	r2, [pc, #256]	; (800559c <TIM_Base_SetConfig+0x114>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d013      	beq.n	80054c8 <TIM_Base_SetConfig+0x40>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a6:	d00f      	beq.n	80054c8 <TIM_Base_SetConfig+0x40>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a3d      	ldr	r2, [pc, #244]	; (80055a0 <TIM_Base_SetConfig+0x118>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d00b      	beq.n	80054c8 <TIM_Base_SetConfig+0x40>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a3c      	ldr	r2, [pc, #240]	; (80055a4 <TIM_Base_SetConfig+0x11c>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d007      	beq.n	80054c8 <TIM_Base_SetConfig+0x40>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a3b      	ldr	r2, [pc, #236]	; (80055a8 <TIM_Base_SetConfig+0x120>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d003      	beq.n	80054c8 <TIM_Base_SetConfig+0x40>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a3a      	ldr	r2, [pc, #232]	; (80055ac <TIM_Base_SetConfig+0x124>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d108      	bne.n	80054da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a2f      	ldr	r2, [pc, #188]	; (800559c <TIM_Base_SetConfig+0x114>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d02b      	beq.n	800553a <TIM_Base_SetConfig+0xb2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e8:	d027      	beq.n	800553a <TIM_Base_SetConfig+0xb2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a2c      	ldr	r2, [pc, #176]	; (80055a0 <TIM_Base_SetConfig+0x118>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d023      	beq.n	800553a <TIM_Base_SetConfig+0xb2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a2b      	ldr	r2, [pc, #172]	; (80055a4 <TIM_Base_SetConfig+0x11c>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d01f      	beq.n	800553a <TIM_Base_SetConfig+0xb2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a2a      	ldr	r2, [pc, #168]	; (80055a8 <TIM_Base_SetConfig+0x120>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d01b      	beq.n	800553a <TIM_Base_SetConfig+0xb2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a29      	ldr	r2, [pc, #164]	; (80055ac <TIM_Base_SetConfig+0x124>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d017      	beq.n	800553a <TIM_Base_SetConfig+0xb2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a28      	ldr	r2, [pc, #160]	; (80055b0 <TIM_Base_SetConfig+0x128>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d013      	beq.n	800553a <TIM_Base_SetConfig+0xb2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a27      	ldr	r2, [pc, #156]	; (80055b4 <TIM_Base_SetConfig+0x12c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d00f      	beq.n	800553a <TIM_Base_SetConfig+0xb2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a26      	ldr	r2, [pc, #152]	; (80055b8 <TIM_Base_SetConfig+0x130>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d00b      	beq.n	800553a <TIM_Base_SetConfig+0xb2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a25      	ldr	r2, [pc, #148]	; (80055bc <TIM_Base_SetConfig+0x134>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d007      	beq.n	800553a <TIM_Base_SetConfig+0xb2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a24      	ldr	r2, [pc, #144]	; (80055c0 <TIM_Base_SetConfig+0x138>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d003      	beq.n	800553a <TIM_Base_SetConfig+0xb2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a23      	ldr	r2, [pc, #140]	; (80055c4 <TIM_Base_SetConfig+0x13c>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d108      	bne.n	800554c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	4313      	orrs	r3, r2
 800554a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	4313      	orrs	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	689a      	ldr	r2, [r3, #8]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a0a      	ldr	r2, [pc, #40]	; (800559c <TIM_Base_SetConfig+0x114>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d003      	beq.n	8005580 <TIM_Base_SetConfig+0xf8>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a0c      	ldr	r2, [pc, #48]	; (80055ac <TIM_Base_SetConfig+0x124>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d103      	bne.n	8005588 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	691a      	ldr	r2, [r3, #16]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	615a      	str	r2, [r3, #20]
}
 800558e:	bf00      	nop
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	40010000 	.word	0x40010000
 80055a0:	40000400 	.word	0x40000400
 80055a4:	40000800 	.word	0x40000800
 80055a8:	40000c00 	.word	0x40000c00
 80055ac:	40010400 	.word	0x40010400
 80055b0:	40014000 	.word	0x40014000
 80055b4:	40014400 	.word	0x40014400
 80055b8:	40014800 	.word	0x40014800
 80055bc:	40001800 	.word	0x40001800
 80055c0:	40001c00 	.word	0x40001c00
 80055c4:	40002000 	.word	0x40002000

080055c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	f023 0201 	bic.w	r2, r3, #1
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 0303 	bic.w	r3, r3, #3
 80055fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	4313      	orrs	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f023 0302 	bic.w	r3, r3, #2
 8005610:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	4313      	orrs	r3, r2
 800561a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a20      	ldr	r2, [pc, #128]	; (80056a0 <TIM_OC1_SetConfig+0xd8>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d003      	beq.n	800562c <TIM_OC1_SetConfig+0x64>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a1f      	ldr	r2, [pc, #124]	; (80056a4 <TIM_OC1_SetConfig+0xdc>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d10c      	bne.n	8005646 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	f023 0308 	bic.w	r3, r3, #8
 8005632:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	4313      	orrs	r3, r2
 800563c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f023 0304 	bic.w	r3, r3, #4
 8005644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a15      	ldr	r2, [pc, #84]	; (80056a0 <TIM_OC1_SetConfig+0xd8>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d003      	beq.n	8005656 <TIM_OC1_SetConfig+0x8e>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a14      	ldr	r2, [pc, #80]	; (80056a4 <TIM_OC1_SetConfig+0xdc>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d111      	bne.n	800567a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800565c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	4313      	orrs	r3, r2
 800566e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	4313      	orrs	r3, r2
 8005678:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	621a      	str	r2, [r3, #32]
}
 8005694:	bf00      	nop
 8005696:	371c      	adds	r7, #28
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	40010000 	.word	0x40010000
 80056a4:	40010400 	.word	0x40010400

080056a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	f023 0210 	bic.w	r2, r3, #16
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	021b      	lsls	r3, r3, #8
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f023 0320 	bic.w	r3, r3, #32
 80056f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	011b      	lsls	r3, r3, #4
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a22      	ldr	r2, [pc, #136]	; (800578c <TIM_OC2_SetConfig+0xe4>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d003      	beq.n	8005710 <TIM_OC2_SetConfig+0x68>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a21      	ldr	r2, [pc, #132]	; (8005790 <TIM_OC2_SetConfig+0xe8>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d10d      	bne.n	800572c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	011b      	lsls	r3, r3, #4
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	4313      	orrs	r3, r2
 8005722:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800572a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a17      	ldr	r2, [pc, #92]	; (800578c <TIM_OC2_SetConfig+0xe4>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d003      	beq.n	800573c <TIM_OC2_SetConfig+0x94>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a16      	ldr	r2, [pc, #88]	; (8005790 <TIM_OC2_SetConfig+0xe8>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d113      	bne.n	8005764 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005742:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800574a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	4313      	orrs	r3, r2
 8005756:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4313      	orrs	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	621a      	str	r2, [r3, #32]
}
 800577e:	bf00      	nop
 8005780:	371c      	adds	r7, #28
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	40010000 	.word	0x40010000
 8005790:	40010400 	.word	0x40010400

08005794 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005794:	b480      	push	{r7}
 8005796:	b087      	sub	sp, #28
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f023 0303 	bic.w	r3, r3, #3
 80057ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	021b      	lsls	r3, r3, #8
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a21      	ldr	r2, [pc, #132]	; (8005874 <TIM_OC3_SetConfig+0xe0>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d003      	beq.n	80057fa <TIM_OC3_SetConfig+0x66>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a20      	ldr	r2, [pc, #128]	; (8005878 <TIM_OC3_SetConfig+0xe4>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d10d      	bne.n	8005816 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005800:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	021b      	lsls	r3, r3, #8
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	4313      	orrs	r3, r2
 800580c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005814:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a16      	ldr	r2, [pc, #88]	; (8005874 <TIM_OC3_SetConfig+0xe0>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d003      	beq.n	8005826 <TIM_OC3_SetConfig+0x92>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a15      	ldr	r2, [pc, #84]	; (8005878 <TIM_OC3_SetConfig+0xe4>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d113      	bne.n	800584e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800582c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005834:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	011b      	lsls	r3, r3, #4
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	4313      	orrs	r3, r2
 8005840:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	011b      	lsls	r3, r3, #4
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	4313      	orrs	r3, r2
 800584c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	621a      	str	r2, [r3, #32]
}
 8005868:	bf00      	nop
 800586a:	371c      	adds	r7, #28
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	40010000 	.word	0x40010000
 8005878:	40010400 	.word	0x40010400

0800587c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800587c:	b480      	push	{r7}
 800587e:	b087      	sub	sp, #28
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	021b      	lsls	r3, r3, #8
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	4313      	orrs	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	031b      	lsls	r3, r3, #12
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a12      	ldr	r2, [pc, #72]	; (8005920 <TIM_OC4_SetConfig+0xa4>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d003      	beq.n	80058e4 <TIM_OC4_SetConfig+0x68>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a11      	ldr	r2, [pc, #68]	; (8005924 <TIM_OC4_SetConfig+0xa8>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d109      	bne.n	80058f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	019b      	lsls	r3, r3, #6
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	621a      	str	r2, [r3, #32]
}
 8005912:	bf00      	nop
 8005914:	371c      	adds	r7, #28
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	40010000 	.word	0x40010000
 8005924:	40010400 	.word	0x40010400

08005928 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	f023 0201 	bic.w	r2, r3, #1
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	011b      	lsls	r3, r3, #4
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	4313      	orrs	r3, r2
 800595c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f023 030a 	bic.w	r3, r3, #10
 8005964:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4313      	orrs	r3, r2
 800596c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	621a      	str	r2, [r3, #32]
}
 800597a:	bf00      	nop
 800597c:	371c      	adds	r7, #28
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005986:	b480      	push	{r7}
 8005988:	b087      	sub	sp, #28
 800598a:	af00      	add	r7, sp, #0
 800598c:	60f8      	str	r0, [r7, #12]
 800598e:	60b9      	str	r1, [r7, #8]
 8005990:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	f023 0210 	bic.w	r2, r3, #16
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	031b      	lsls	r3, r3, #12
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	621a      	str	r2, [r3, #32]
}
 80059da:	bf00      	nop
 80059dc:	371c      	adds	r7, #28
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b085      	sub	sp, #20
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
 80059ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	f043 0307 	orr.w	r3, r3, #7
 8005a08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	609a      	str	r2, [r3, #8]
}
 8005a10:	bf00      	nop
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b087      	sub	sp, #28
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
 8005a28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	021a      	lsls	r2, r3, #8
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	609a      	str	r2, [r3, #8]
}
 8005a50:	bf00      	nop
 8005a52:	371c      	adds	r7, #28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b087      	sub	sp, #28
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f003 031f 	and.w	r3, r3, #31
 8005a6e:	2201      	movs	r2, #1
 8005a70:	fa02 f303 	lsl.w	r3, r2, r3
 8005a74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6a1a      	ldr	r2, [r3, #32]
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	43db      	mvns	r3, r3
 8005a7e:	401a      	ands	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6a1a      	ldr	r2, [r3, #32]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f003 031f 	and.w	r3, r3, #31
 8005a8e:	6879      	ldr	r1, [r7, #4]
 8005a90:	fa01 f303 	lsl.w	r3, r1, r3
 8005a94:	431a      	orrs	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	621a      	str	r2, [r3, #32]
}
 8005a9a:	bf00      	nop
 8005a9c:	371c      	adds	r7, #28
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
	...

08005aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e05a      	b.n	8005b76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a21      	ldr	r2, [pc, #132]	; (8005b84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d022      	beq.n	8005b4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b0c:	d01d      	beq.n	8005b4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a1d      	ldr	r2, [pc, #116]	; (8005b88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d018      	beq.n	8005b4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a1b      	ldr	r2, [pc, #108]	; (8005b8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d013      	beq.n	8005b4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a1a      	ldr	r2, [pc, #104]	; (8005b90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d00e      	beq.n	8005b4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a18      	ldr	r2, [pc, #96]	; (8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d009      	beq.n	8005b4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a17      	ldr	r2, [pc, #92]	; (8005b98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d004      	beq.n	8005b4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a15      	ldr	r2, [pc, #84]	; (8005b9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d10c      	bne.n	8005b64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	40010000 	.word	0x40010000
 8005b88:	40000400 	.word	0x40000400
 8005b8c:	40000800 	.word	0x40000800
 8005b90:	40000c00 	.word	0x40000c00
 8005b94:	40010400 	.word	0x40010400
 8005b98:	40014000 	.word	0x40014000
 8005b9c:	40001800 	.word	0x40001800

08005ba0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d101      	bne.n	8005bbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005bb8:	2302      	movs	r3, #2
 8005bba:	e03d      	b.n	8005c38 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e03f      	b.n	8005cfe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d106      	bne.n	8005c98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7fc ff98 	bl	8002bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2224      	movs	r2, #36	; 0x24
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 ff9b 	bl	8006bec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	691a      	ldr	r2, [r3, #16]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	695a      	ldr	r2, [r3, #20]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68da      	ldr	r2, [r3, #12]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ce4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b08a      	sub	sp, #40	; 0x28
 8005d0a:	af02      	add	r7, sp, #8
 8005d0c:	60f8      	str	r0, [r7, #12]
 8005d0e:	60b9      	str	r1, [r7, #8]
 8005d10:	603b      	str	r3, [r7, #0]
 8005d12:	4613      	mov	r3, r2
 8005d14:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b20      	cmp	r3, #32
 8005d24:	d17c      	bne.n	8005e20 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d002      	beq.n	8005d32 <HAL_UART_Transmit+0x2c>
 8005d2c:	88fb      	ldrh	r3, [r7, #6]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e075      	b.n	8005e22 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d101      	bne.n	8005d44 <HAL_UART_Transmit+0x3e>
 8005d40:	2302      	movs	r3, #2
 8005d42:	e06e      	b.n	8005e22 <HAL_UART_Transmit+0x11c>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2221      	movs	r2, #33	; 0x21
 8005d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d5a:	f7fd f98b 	bl	8003074 <HAL_GetTick>
 8005d5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	88fa      	ldrh	r2, [r7, #6]
 8005d64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	88fa      	ldrh	r2, [r7, #6]
 8005d6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d74:	d108      	bne.n	8005d88 <HAL_UART_Transmit+0x82>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d104      	bne.n	8005d88 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	61bb      	str	r3, [r7, #24]
 8005d86:	e003      	b.n	8005d90 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005d98:	e02a      	b.n	8005df0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	2200      	movs	r2, #0
 8005da2:	2180      	movs	r1, #128	; 0x80
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f000 fc53 	bl	8006650 <UART_WaitOnFlagUntilTimeout>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d001      	beq.n	8005db4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e036      	b.n	8005e22 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10b      	bne.n	8005dd2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	3302      	adds	r3, #2
 8005dce:	61bb      	str	r3, [r7, #24]
 8005dd0:	e007      	b.n	8005de2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	781a      	ldrb	r2, [r3, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	3301      	adds	r3, #1
 8005de0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	3b01      	subs	r3, #1
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1cf      	bne.n	8005d9a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	2200      	movs	r2, #0
 8005e02:	2140      	movs	r1, #64	; 0x40
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f000 fc23 	bl	8006650 <UART_WaitOnFlagUntilTimeout>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d001      	beq.n	8005e14 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e006      	b.n	8005e22 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2220      	movs	r2, #32
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	e000      	b.n	8005e22 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005e20:	2302      	movs	r3, #2
  }
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3720      	adds	r7, #32
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b08c      	sub	sp, #48	; 0x30
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	60f8      	str	r0, [r7, #12]
 8005e32:	60b9      	str	r1, [r7, #8]
 8005e34:	4613      	mov	r3, r2
 8005e36:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b20      	cmp	r3, #32
 8005e42:	d152      	bne.n	8005eea <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005e4a:	88fb      	ldrh	r3, [r7, #6]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d101      	bne.n	8005e54 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e04b      	b.n	8005eec <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d101      	bne.n	8005e62 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	e044      	b.n	8005eec <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005e70:	88fb      	ldrh	r3, [r7, #6]
 8005e72:	461a      	mov	r2, r3
 8005e74:	68b9      	ldr	r1, [r7, #8]
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 fc58 	bl	800672c <UART_Start_Receive_DMA>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005e82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d12c      	bne.n	8005ee4 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d125      	bne.n	8005ede <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e92:	2300      	movs	r3, #0
 8005e94:	613b      	str	r3, [r7, #16]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	613b      	str	r3, [r7, #16]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	613b      	str	r3, [r7, #16]
 8005ea6:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	330c      	adds	r3, #12
 8005eae:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	e853 3f00 	ldrex	r3, [r3]
 8005eb6:	617b      	str	r3, [r7, #20]
   return(result);
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f043 0310 	orr.w	r3, r3, #16
 8005ebe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	330c      	adds	r3, #12
 8005ec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ec8:	627a      	str	r2, [r7, #36]	; 0x24
 8005eca:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ecc:	6a39      	ldr	r1, [r7, #32]
 8005ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed0:	e841 2300 	strex	r3, r2, [r1]
 8005ed4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1e5      	bne.n	8005ea8 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8005edc:	e002      	b.n	8005ee4 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005ee4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ee8:	e000      	b.n	8005eec <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8005eea:	2302      	movs	r3, #2
  }
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3730      	adds	r7, #48	; 0x30
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b0ba      	sub	sp, #232	; 0xe8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005f20:	2300      	movs	r3, #0
 8005f22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f2a:	f003 030f 	and.w	r3, r3, #15
 8005f2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005f32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10f      	bne.n	8005f5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f3e:	f003 0320 	and.w	r3, r3, #32
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d009      	beq.n	8005f5a <HAL_UART_IRQHandler+0x66>
 8005f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f4a:	f003 0320 	and.w	r3, r3, #32
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fd8f 	bl	8006a76 <UART_Receive_IT>
      return;
 8005f58:	e256      	b.n	8006408 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005f5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 80de 	beq.w	8006120 <HAL_UART_IRQHandler+0x22c>
 8005f64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d106      	bne.n	8005f7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 80d1 	beq.w	8006120 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00b      	beq.n	8005fa2 <HAL_UART_IRQHandler+0xae>
 8005f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d005      	beq.n	8005fa2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9a:	f043 0201 	orr.w	r2, r3, #1
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fa6:	f003 0304 	and.w	r3, r3, #4
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00b      	beq.n	8005fc6 <HAL_UART_IRQHandler+0xd2>
 8005fae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d005      	beq.n	8005fc6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbe:	f043 0202 	orr.w	r2, r3, #2
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00b      	beq.n	8005fea <HAL_UART_IRQHandler+0xf6>
 8005fd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d005      	beq.n	8005fea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe2:	f043 0204 	orr.w	r2, r3, #4
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fee:	f003 0308 	and.w	r3, r3, #8
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d011      	beq.n	800601a <HAL_UART_IRQHandler+0x126>
 8005ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ffa:	f003 0320 	and.w	r3, r3, #32
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d105      	bne.n	800600e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006002:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	2b00      	cmp	r3, #0
 800600c:	d005      	beq.n	800601a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	f043 0208 	orr.w	r2, r3, #8
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 81ed 	beq.w	80063fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006028:	f003 0320 	and.w	r3, r3, #32
 800602c:	2b00      	cmp	r3, #0
 800602e:	d008      	beq.n	8006042 <HAL_UART_IRQHandler+0x14e>
 8006030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006034:	f003 0320 	and.w	r3, r3, #32
 8006038:	2b00      	cmp	r3, #0
 800603a:	d002      	beq.n	8006042 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 fd1a 	bl	8006a76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604c:	2b40      	cmp	r3, #64	; 0x40
 800604e:	bf0c      	ite	eq
 8006050:	2301      	moveq	r3, #1
 8006052:	2300      	movne	r3, #0
 8006054:	b2db      	uxtb	r3, r3
 8006056:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605e:	f003 0308 	and.w	r3, r3, #8
 8006062:	2b00      	cmp	r3, #0
 8006064:	d103      	bne.n	800606e <HAL_UART_IRQHandler+0x17a>
 8006066:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800606a:	2b00      	cmp	r3, #0
 800606c:	d04f      	beq.n	800610e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fc22 	bl	80068b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607e:	2b40      	cmp	r3, #64	; 0x40
 8006080:	d141      	bne.n	8006106 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	3314      	adds	r3, #20
 8006088:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006090:	e853 3f00 	ldrex	r3, [r3]
 8006094:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006098:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800609c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	3314      	adds	r3, #20
 80060aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80060ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80060b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80060ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80060be:	e841 2300 	strex	r3, r2, [r1]
 80060c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80060c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1d9      	bne.n	8006082 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d013      	beq.n	80060fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060da:	4a7d      	ldr	r2, [pc, #500]	; (80062d0 <HAL_UART_IRQHandler+0x3dc>)
 80060dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fd fa74 	bl	80035d0 <HAL_DMA_Abort_IT>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d016      	beq.n	800611c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060f8:	4610      	mov	r0, r2
 80060fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060fc:	e00e      	b.n	800611c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f9a4 	bl	800644c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006104:	e00a      	b.n	800611c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f9a0 	bl	800644c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800610c:	e006      	b.n	800611c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f99c 	bl	800644c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800611a:	e170      	b.n	80063fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800611c:	bf00      	nop
    return;
 800611e:	e16e      	b.n	80063fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006124:	2b01      	cmp	r3, #1
 8006126:	f040 814a 	bne.w	80063be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800612a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800612e:	f003 0310 	and.w	r3, r3, #16
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 8143 	beq.w	80063be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800613c:	f003 0310 	and.w	r3, r3, #16
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 813c 	beq.w	80063be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006146:	2300      	movs	r3, #0
 8006148:	60bb      	str	r3, [r7, #8]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	60bb      	str	r3, [r7, #8]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	60bb      	str	r3, [r7, #8]
 800615a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006166:	2b40      	cmp	r3, #64	; 0x40
 8006168:	f040 80b4 	bne.w	80062d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006178:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 8140 	beq.w	8006402 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006186:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800618a:	429a      	cmp	r2, r3
 800618c:	f080 8139 	bcs.w	8006402 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006196:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061a2:	f000 8088 	beq.w	80062b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	330c      	adds	r3, #12
 80061ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061b4:	e853 3f00 	ldrex	r3, [r3]
 80061b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80061bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	330c      	adds	r3, #12
 80061ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80061d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80061de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061e2:	e841 2300 	strex	r3, r2, [r1]
 80061e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80061ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1d9      	bne.n	80061a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	3314      	adds	r3, #20
 80061f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061fc:	e853 3f00 	ldrex	r3, [r3]
 8006200:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006202:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006204:	f023 0301 	bic.w	r3, r3, #1
 8006208:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	3314      	adds	r3, #20
 8006212:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006216:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800621a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800621e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006222:	e841 2300 	strex	r3, r2, [r1]
 8006226:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006228:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1e1      	bne.n	80061f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3314      	adds	r3, #20
 8006234:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006236:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006238:	e853 3f00 	ldrex	r3, [r3]
 800623c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800623e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006244:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3314      	adds	r3, #20
 800624e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006252:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006254:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006256:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006258:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800625a:	e841 2300 	strex	r3, r2, [r1]
 800625e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006260:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1e3      	bne.n	800622e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2220      	movs	r2, #32
 800626a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	330c      	adds	r3, #12
 800627a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800627e:	e853 3f00 	ldrex	r3, [r3]
 8006282:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006286:	f023 0310 	bic.w	r3, r3, #16
 800628a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	330c      	adds	r3, #12
 8006294:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006298:	65ba      	str	r2, [r7, #88]	; 0x58
 800629a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800629e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062a0:	e841 2300 	strex	r3, r2, [r1]
 80062a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80062a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1e3      	bne.n	8006274 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b0:	4618      	mov	r0, r3
 80062b2:	f7fd f91d 	bl	80034f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062be:	b29b      	uxth	r3, r3
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	4619      	mov	r1, r3
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7fb f840 	bl	800134c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062cc:	e099      	b.n	8006402 <HAL_UART_IRQHandler+0x50e>
 80062ce:	bf00      	nop
 80062d0:	0800697f 	.word	0x0800697f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062dc:	b29b      	uxth	r3, r3
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 808b 	beq.w	8006406 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80062f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 8086 	beq.w	8006406 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	330c      	adds	r3, #12
 8006300:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006304:	e853 3f00 	ldrex	r3, [r3]
 8006308:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800630a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800630c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006310:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	330c      	adds	r3, #12
 800631a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800631e:	647a      	str	r2, [r7, #68]	; 0x44
 8006320:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006322:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006324:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006326:	e841 2300 	strex	r3, r2, [r1]
 800632a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800632c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1e3      	bne.n	80062fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3314      	adds	r3, #20
 8006338:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	e853 3f00 	ldrex	r3, [r3]
 8006340:	623b      	str	r3, [r7, #32]
   return(result);
 8006342:	6a3b      	ldr	r3, [r7, #32]
 8006344:	f023 0301 	bic.w	r3, r3, #1
 8006348:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3314      	adds	r3, #20
 8006352:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006356:	633a      	str	r2, [r7, #48]	; 0x30
 8006358:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800635c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800635e:	e841 2300 	strex	r3, r2, [r1]
 8006362:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1e3      	bne.n	8006332 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2220      	movs	r2, #32
 800636e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	330c      	adds	r3, #12
 800637e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	e853 3f00 	ldrex	r3, [r3]
 8006386:	60fb      	str	r3, [r7, #12]
   return(result);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 0310 	bic.w	r3, r3, #16
 800638e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	330c      	adds	r3, #12
 8006398:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800639c:	61fa      	str	r2, [r7, #28]
 800639e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a0:	69b9      	ldr	r1, [r7, #24]
 80063a2:	69fa      	ldr	r2, [r7, #28]
 80063a4:	e841 2300 	strex	r3, r2, [r1]
 80063a8:	617b      	str	r3, [r7, #20]
   return(result);
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1e3      	bne.n	8006378 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063b4:	4619      	mov	r1, r3
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7fa ffc8 	bl	800134c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063bc:	e023      	b.n	8006406 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80063be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d009      	beq.n	80063de <HAL_UART_IRQHandler+0x4ea>
 80063ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fae5 	bl	80069a6 <UART_Transmit_IT>
    return;
 80063dc:	e014      	b.n	8006408 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80063de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00e      	beq.n	8006408 <HAL_UART_IRQHandler+0x514>
 80063ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d008      	beq.n	8006408 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fb25 	bl	8006a46 <UART_EndTransmit_IT>
    return;
 80063fc:	e004      	b.n	8006408 <HAL_UART_IRQHandler+0x514>
    return;
 80063fe:	bf00      	nop
 8006400:	e002      	b.n	8006408 <HAL_UART_IRQHandler+0x514>
      return;
 8006402:	bf00      	nop
 8006404:	e000      	b.n	8006408 <HAL_UART_IRQHandler+0x514>
      return;
 8006406:	bf00      	nop
  }
}
 8006408:	37e8      	adds	r7, #232	; 0xe8
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop

08006410 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b09c      	sub	sp, #112	; 0x70
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006478:	2b00      	cmp	r3, #0
 800647a:	d172      	bne.n	8006562 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800647c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800647e:	2200      	movs	r2, #0
 8006480:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	330c      	adds	r3, #12
 8006488:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800648c:	e853 3f00 	ldrex	r3, [r3]
 8006490:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006498:	66bb      	str	r3, [r7, #104]	; 0x68
 800649a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	330c      	adds	r3, #12
 80064a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80064a2:	65ba      	str	r2, [r7, #88]	; 0x58
 80064a4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064aa:	e841 2300 	strex	r3, r2, [r1]
 80064ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80064b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1e5      	bne.n	8006482 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	3314      	adds	r3, #20
 80064bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c0:	e853 3f00 	ldrex	r3, [r3]
 80064c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c8:	f023 0301 	bic.w	r3, r3, #1
 80064cc:	667b      	str	r3, [r7, #100]	; 0x64
 80064ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	3314      	adds	r3, #20
 80064d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80064d6:	647a      	str	r2, [r7, #68]	; 0x44
 80064d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064de:	e841 2300 	strex	r3, r2, [r1]
 80064e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1e5      	bne.n	80064b6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3314      	adds	r3, #20
 80064f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f4:	e853 3f00 	ldrex	r3, [r3]
 80064f8:	623b      	str	r3, [r7, #32]
   return(result);
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006500:	663b      	str	r3, [r7, #96]	; 0x60
 8006502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	3314      	adds	r3, #20
 8006508:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800650a:	633a      	str	r2, [r7, #48]	; 0x30
 800650c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006512:	e841 2300 	strex	r3, r2, [r1]
 8006516:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1e5      	bne.n	80064ea <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800651e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006520:	2220      	movs	r2, #32
 8006522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652a:	2b01      	cmp	r3, #1
 800652c:	d119      	bne.n	8006562 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800652e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	330c      	adds	r3, #12
 8006534:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	e853 3f00 	ldrex	r3, [r3]
 800653c:	60fb      	str	r3, [r7, #12]
   return(result);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f023 0310 	bic.w	r3, r3, #16
 8006544:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	330c      	adds	r3, #12
 800654c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800654e:	61fa      	str	r2, [r7, #28]
 8006550:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006552:	69b9      	ldr	r1, [r7, #24]
 8006554:	69fa      	ldr	r2, [r7, #28]
 8006556:	e841 2300 	strex	r3, r2, [r1]
 800655a:	617b      	str	r3, [r7, #20]
   return(result);
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1e5      	bne.n	800652e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006566:	2b01      	cmp	r3, #1
 8006568:	d106      	bne.n	8006578 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800656a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800656c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800656e:	4619      	mov	r1, r3
 8006570:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006572:	f7fa feeb 	bl	800134c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006576:	e002      	b.n	800657e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006578:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800657a:	f7ff ff53 	bl	8006424 <HAL_UART_RxCpltCallback>
}
 800657e:	bf00      	nop
 8006580:	3770      	adds	r7, #112	; 0x70
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b084      	sub	sp, #16
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006592:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006598:	2b01      	cmp	r3, #1
 800659a:	d108      	bne.n	80065ae <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065a0:	085b      	lsrs	r3, r3, #1
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	4619      	mov	r1, r3
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f7fa fed0 	bl	800134c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80065ac:	e002      	b.n	80065b4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f7ff ff42 	bl	8006438 <HAL_UART_RxHalfCpltCallback>
}
 80065b4:	bf00      	nop
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d8:	2b80      	cmp	r3, #128	; 0x80
 80065da:	bf0c      	ite	eq
 80065dc:	2301      	moveq	r3, #1
 80065de:	2300      	movne	r3, #0
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b21      	cmp	r3, #33	; 0x21
 80065ee:	d108      	bne.n	8006602 <UART_DMAError+0x46>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d005      	beq.n	8006602 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	2200      	movs	r2, #0
 80065fa:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80065fc:	68b8      	ldr	r0, [r7, #8]
 80065fe:	f000 f933 	bl	8006868 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660c:	2b40      	cmp	r3, #64	; 0x40
 800660e:	bf0c      	ite	eq
 8006610:	2301      	moveq	r3, #1
 8006612:	2300      	movne	r3, #0
 8006614:	b2db      	uxtb	r3, r3
 8006616:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b22      	cmp	r3, #34	; 0x22
 8006622:	d108      	bne.n	8006636 <UART_DMAError+0x7a>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d005      	beq.n	8006636 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2200      	movs	r2, #0
 800662e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006630:	68b8      	ldr	r0, [r7, #8]
 8006632:	f000 f941 	bl	80068b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663a:	f043 0210 	orr.w	r2, r3, #16
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006642:	68b8      	ldr	r0, [r7, #8]
 8006644:	f7ff ff02 	bl	800644c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006648:	bf00      	nop
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b090      	sub	sp, #64	; 0x40
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	603b      	str	r3, [r7, #0]
 800665c:	4613      	mov	r3, r2
 800665e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006660:	e050      	b.n	8006704 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006668:	d04c      	beq.n	8006704 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800666a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800666c:	2b00      	cmp	r3, #0
 800666e:	d007      	beq.n	8006680 <UART_WaitOnFlagUntilTimeout+0x30>
 8006670:	f7fc fd00 	bl	8003074 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800667c:	429a      	cmp	r2, r3
 800667e:	d241      	bcs.n	8006704 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	330c      	adds	r3, #12
 8006686:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668a:	e853 3f00 	ldrex	r3, [r3]
 800668e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	330c      	adds	r3, #12
 800669e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066a0:	637a      	str	r2, [r7, #52]	; 0x34
 80066a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066a8:	e841 2300 	strex	r3, r2, [r1]
 80066ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1e5      	bne.n	8006680 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3314      	adds	r3, #20
 80066ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	e853 3f00 	ldrex	r3, [r3]
 80066c2:	613b      	str	r3, [r7, #16]
   return(result);
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f023 0301 	bic.w	r3, r3, #1
 80066ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3314      	adds	r3, #20
 80066d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066d4:	623a      	str	r2, [r7, #32]
 80066d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d8:	69f9      	ldr	r1, [r7, #28]
 80066da:	6a3a      	ldr	r2, [r7, #32]
 80066dc:	e841 2300 	strex	r3, r2, [r1]
 80066e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1e5      	bne.n	80066b4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2220      	movs	r2, #32
 80066ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2220      	movs	r2, #32
 80066f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e00f      	b.n	8006724 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	4013      	ands	r3, r2
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	429a      	cmp	r2, r3
 8006712:	bf0c      	ite	eq
 8006714:	2301      	moveq	r3, #1
 8006716:	2300      	movne	r3, #0
 8006718:	b2db      	uxtb	r3, r3
 800671a:	461a      	mov	r2, r3
 800671c:	79fb      	ldrb	r3, [r7, #7]
 800671e:	429a      	cmp	r2, r3
 8006720:	d09f      	beq.n	8006662 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3740      	adds	r7, #64	; 0x40
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b098      	sub	sp, #96	; 0x60
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	4613      	mov	r3, r2
 8006738:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	88fa      	ldrh	r2, [r7, #6]
 8006744:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2222      	movs	r2, #34	; 0x22
 8006750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006758:	4a40      	ldr	r2, [pc, #256]	; (800685c <UART_Start_Receive_DMA+0x130>)
 800675a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006760:	4a3f      	ldr	r2, [pc, #252]	; (8006860 <UART_Start_Receive_DMA+0x134>)
 8006762:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006768:	4a3e      	ldr	r2, [pc, #248]	; (8006864 <UART_Start_Receive_DMA+0x138>)
 800676a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006770:	2200      	movs	r2, #0
 8006772:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006774:	f107 0308 	add.w	r3, r7, #8
 8006778:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	3304      	adds	r3, #4
 8006784:	4619      	mov	r1, r3
 8006786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	88fb      	ldrh	r3, [r7, #6]
 800678c:	f7fc fe58 	bl	8003440 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006790:	2300      	movs	r3, #0
 8006792:	613b      	str	r3, [r7, #16]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	613b      	str	r3, [r7, #16]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	613b      	str	r3, [r7, #16]
 80067a4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d019      	beq.n	80067ea <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	330c      	adds	r3, #12
 80067bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067c0:	e853 3f00 	ldrex	r3, [r3]
 80067c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	330c      	adds	r3, #12
 80067d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067d6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80067d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067da:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80067dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067de:	e841 2300 	strex	r3, r2, [r1]
 80067e2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80067e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1e5      	bne.n	80067b6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3314      	adds	r3, #20
 80067f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f4:	e853 3f00 	ldrex	r3, [r3]
 80067f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fc:	f043 0301 	orr.w	r3, r3, #1
 8006800:	657b      	str	r3, [r7, #84]	; 0x54
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3314      	adds	r3, #20
 8006808:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800680a:	63ba      	str	r2, [r7, #56]	; 0x38
 800680c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006810:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006812:	e841 2300 	strex	r3, r2, [r1]
 8006816:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1e5      	bne.n	80067ea <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	3314      	adds	r3, #20
 8006824:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	e853 3f00 	ldrex	r3, [r3]
 800682c:	617b      	str	r3, [r7, #20]
   return(result);
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006834:	653b      	str	r3, [r7, #80]	; 0x50
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3314      	adds	r3, #20
 800683c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800683e:	627a      	str	r2, [r7, #36]	; 0x24
 8006840:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006842:	6a39      	ldr	r1, [r7, #32]
 8006844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006846:	e841 2300 	strex	r3, r2, [r1]
 800684a:	61fb      	str	r3, [r7, #28]
   return(result);
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1e5      	bne.n	800681e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3760      	adds	r7, #96	; 0x60
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	08006461 	.word	0x08006461
 8006860:	08006587 	.word	0x08006587
 8006864:	080065bd 	.word	0x080065bd

08006868 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006868:	b480      	push	{r7}
 800686a:	b089      	sub	sp, #36	; 0x24
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	330c      	adds	r3, #12
 8006876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	e853 3f00 	ldrex	r3, [r3]
 800687e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006886:	61fb      	str	r3, [r7, #28]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	330c      	adds	r3, #12
 800688e:	69fa      	ldr	r2, [r7, #28]
 8006890:	61ba      	str	r2, [r7, #24]
 8006892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006894:	6979      	ldr	r1, [r7, #20]
 8006896:	69ba      	ldr	r2, [r7, #24]
 8006898:	e841 2300 	strex	r3, r2, [r1]
 800689c:	613b      	str	r3, [r7, #16]
   return(result);
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1e5      	bne.n	8006870 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2220      	movs	r2, #32
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80068ac:	bf00      	nop
 80068ae:	3724      	adds	r7, #36	; 0x24
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b095      	sub	sp, #84	; 0x54
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	330c      	adds	r3, #12
 80068c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ca:	e853 3f00 	ldrex	r3, [r3]
 80068ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	330c      	adds	r3, #12
 80068de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068e0:	643a      	str	r2, [r7, #64]	; 0x40
 80068e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068e8:	e841 2300 	strex	r3, r2, [r1]
 80068ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1e5      	bne.n	80068c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	3314      	adds	r3, #20
 80068fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	e853 3f00 	ldrex	r3, [r3]
 8006902:	61fb      	str	r3, [r7, #28]
   return(result);
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	f023 0301 	bic.w	r3, r3, #1
 800690a:	64bb      	str	r3, [r7, #72]	; 0x48
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3314      	adds	r3, #20
 8006912:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006914:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006916:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006918:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800691a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800691c:	e841 2300 	strex	r3, r2, [r1]
 8006920:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1e5      	bne.n	80068f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692c:	2b01      	cmp	r3, #1
 800692e:	d119      	bne.n	8006964 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	330c      	adds	r3, #12
 8006936:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	e853 3f00 	ldrex	r3, [r3]
 800693e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	f023 0310 	bic.w	r3, r3, #16
 8006946:	647b      	str	r3, [r7, #68]	; 0x44
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	330c      	adds	r3, #12
 800694e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006950:	61ba      	str	r2, [r7, #24]
 8006952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006954:	6979      	ldr	r1, [r7, #20]
 8006956:	69ba      	ldr	r2, [r7, #24]
 8006958:	e841 2300 	strex	r3, r2, [r1]
 800695c:	613b      	str	r3, [r7, #16]
   return(result);
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1e5      	bne.n	8006930 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2220      	movs	r2, #32
 8006968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006972:	bf00      	nop
 8006974:	3754      	adds	r7, #84	; 0x54
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b084      	sub	sp, #16
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f7ff fd57 	bl	800644c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800699e:	bf00      	nop
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b085      	sub	sp, #20
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b21      	cmp	r3, #33	; 0x21
 80069b8:	d13e      	bne.n	8006a38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c2:	d114      	bne.n	80069ee <UART_Transmit_IT+0x48>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d110      	bne.n	80069ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a1b      	ldr	r3, [r3, #32]
 80069d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	461a      	mov	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	1c9a      	adds	r2, r3, #2
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	621a      	str	r2, [r3, #32]
 80069ec:	e008      	b.n	8006a00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	1c59      	adds	r1, r3, #1
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	6211      	str	r1, [r2, #32]
 80069f8:	781a      	ldrb	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	3b01      	subs	r3, #1
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10f      	bne.n	8006a34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68da      	ldr	r2, [r3, #12]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68da      	ldr	r2, [r3, #12]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a34:	2300      	movs	r3, #0
 8006a36:	e000      	b.n	8006a3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a38:	2302      	movs	r3, #2
  }
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b082      	sub	sp, #8
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68da      	ldr	r2, [r3, #12]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2220      	movs	r2, #32
 8006a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff fcd2 	bl	8006410 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b08c      	sub	sp, #48	; 0x30
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b22      	cmp	r3, #34	; 0x22
 8006a88:	f040 80ab 	bne.w	8006be2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a94:	d117      	bne.n	8006ac6 <UART_Receive_IT+0x50>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d113      	bne.n	8006ac6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abe:	1c9a      	adds	r2, r3, #2
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	629a      	str	r2, [r3, #40]	; 0x28
 8006ac4:	e026      	b.n	8006b14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006acc:	2300      	movs	r3, #0
 8006ace:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ad8:	d007      	beq.n	8006aea <UART_Receive_IT+0x74>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10a      	bne.n	8006af8 <UART_Receive_IT+0x82>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d106      	bne.n	8006af8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	b2da      	uxtb	r2, r3
 8006af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af4:	701a      	strb	r2, [r3, #0]
 8006af6:	e008      	b.n	8006b0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b04:	b2da      	uxtb	r2, r3
 8006b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0e:	1c5a      	adds	r2, r3, #1
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	4619      	mov	r1, r3
 8006b22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d15a      	bne.n	8006bde <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68da      	ldr	r2, [r3, #12]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f022 0220 	bic.w	r2, r2, #32
 8006b36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68da      	ldr	r2, [r3, #12]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	695a      	ldr	r2, [r3, #20]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f022 0201 	bic.w	r2, r2, #1
 8006b56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d135      	bne.n	8006bd4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	330c      	adds	r3, #12
 8006b74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	e853 3f00 	ldrex	r3, [r3]
 8006b7c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	f023 0310 	bic.w	r3, r3, #16
 8006b84:	627b      	str	r3, [r7, #36]	; 0x24
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	330c      	adds	r3, #12
 8006b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b8e:	623a      	str	r2, [r7, #32]
 8006b90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b92:	69f9      	ldr	r1, [r7, #28]
 8006b94:	6a3a      	ldr	r2, [r7, #32]
 8006b96:	e841 2300 	strex	r3, r2, [r1]
 8006b9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1e5      	bne.n	8006b6e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0310 	and.w	r3, r3, #16
 8006bac:	2b10      	cmp	r3, #16
 8006bae:	d10a      	bne.n	8006bc6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	60fb      	str	r3, [r7, #12]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	60fb      	str	r3, [r7, #12]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	60fb      	str	r3, [r7, #12]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006bca:	4619      	mov	r1, r3
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7fa fbbd 	bl	800134c <HAL_UARTEx_RxEventCallback>
 8006bd2:	e002      	b.n	8006bda <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7ff fc25 	bl	8006424 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	e002      	b.n	8006be4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	e000      	b.n	8006be4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006be2:	2302      	movs	r3, #2
  }
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3730      	adds	r7, #48	; 0x30
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bf0:	b0c0      	sub	sp, #256	; 0x100
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c08:	68d9      	ldr	r1, [r3, #12]
 8006c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	ea40 0301 	orr.w	r3, r0, r1
 8006c14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c1a:	689a      	ldr	r2, [r3, #8]
 8006c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	431a      	orrs	r2, r3
 8006c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	431a      	orrs	r2, r3
 8006c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c30:	69db      	ldr	r3, [r3, #28]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c44:	f021 010c 	bic.w	r1, r1, #12
 8006c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c52:	430b      	orrs	r3, r1
 8006c54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c66:	6999      	ldr	r1, [r3, #24]
 8006c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	ea40 0301 	orr.w	r3, r0, r1
 8006c72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	4b8f      	ldr	r3, [pc, #572]	; (8006eb8 <UART_SetConfig+0x2cc>)
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d005      	beq.n	8006c8c <UART_SetConfig+0xa0>
 8006c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	4b8d      	ldr	r3, [pc, #564]	; (8006ebc <UART_SetConfig+0x2d0>)
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d104      	bne.n	8006c96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c8c:	f7fd fdb0 	bl	80047f0 <HAL_RCC_GetPCLK2Freq>
 8006c90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006c94:	e003      	b.n	8006c9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c96:	f7fd fd97 	bl	80047c8 <HAL_RCC_GetPCLK1Freq>
 8006c9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca2:	69db      	ldr	r3, [r3, #28]
 8006ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ca8:	f040 810c 	bne.w	8006ec4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006cb6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006cba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006cbe:	4622      	mov	r2, r4
 8006cc0:	462b      	mov	r3, r5
 8006cc2:	1891      	adds	r1, r2, r2
 8006cc4:	65b9      	str	r1, [r7, #88]	; 0x58
 8006cc6:	415b      	adcs	r3, r3
 8006cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006cce:	4621      	mov	r1, r4
 8006cd0:	eb12 0801 	adds.w	r8, r2, r1
 8006cd4:	4629      	mov	r1, r5
 8006cd6:	eb43 0901 	adc.w	r9, r3, r1
 8006cda:	f04f 0200 	mov.w	r2, #0
 8006cde:	f04f 0300 	mov.w	r3, #0
 8006ce2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ce6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cee:	4690      	mov	r8, r2
 8006cf0:	4699      	mov	r9, r3
 8006cf2:	4623      	mov	r3, r4
 8006cf4:	eb18 0303 	adds.w	r3, r8, r3
 8006cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006cfc:	462b      	mov	r3, r5
 8006cfe:	eb49 0303 	adc.w	r3, r9, r3
 8006d02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006d16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	18db      	adds	r3, r3, r3
 8006d1e:	653b      	str	r3, [r7, #80]	; 0x50
 8006d20:	4613      	mov	r3, r2
 8006d22:	eb42 0303 	adc.w	r3, r2, r3
 8006d26:	657b      	str	r3, [r7, #84]	; 0x54
 8006d28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006d2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006d30:	f7fa f8b8 	bl	8000ea4 <__aeabi_uldivmod>
 8006d34:	4602      	mov	r2, r0
 8006d36:	460b      	mov	r3, r1
 8006d38:	4b61      	ldr	r3, [pc, #388]	; (8006ec0 <UART_SetConfig+0x2d4>)
 8006d3a:	fba3 2302 	umull	r2, r3, r3, r2
 8006d3e:	095b      	lsrs	r3, r3, #5
 8006d40:	011c      	lsls	r4, r3, #4
 8006d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d46:	2200      	movs	r2, #0
 8006d48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006d50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006d54:	4642      	mov	r2, r8
 8006d56:	464b      	mov	r3, r9
 8006d58:	1891      	adds	r1, r2, r2
 8006d5a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006d5c:	415b      	adcs	r3, r3
 8006d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d64:	4641      	mov	r1, r8
 8006d66:	eb12 0a01 	adds.w	sl, r2, r1
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	eb43 0b01 	adc.w	fp, r3, r1
 8006d70:	f04f 0200 	mov.w	r2, #0
 8006d74:	f04f 0300 	mov.w	r3, #0
 8006d78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d84:	4692      	mov	sl, r2
 8006d86:	469b      	mov	fp, r3
 8006d88:	4643      	mov	r3, r8
 8006d8a:	eb1a 0303 	adds.w	r3, sl, r3
 8006d8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d92:	464b      	mov	r3, r9
 8006d94:	eb4b 0303 	adc.w	r3, fp, r3
 8006d98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006da8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006dac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006db0:	460b      	mov	r3, r1
 8006db2:	18db      	adds	r3, r3, r3
 8006db4:	643b      	str	r3, [r7, #64]	; 0x40
 8006db6:	4613      	mov	r3, r2
 8006db8:	eb42 0303 	adc.w	r3, r2, r3
 8006dbc:	647b      	str	r3, [r7, #68]	; 0x44
 8006dbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006dc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006dc6:	f7fa f86d 	bl	8000ea4 <__aeabi_uldivmod>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	460b      	mov	r3, r1
 8006dce:	4611      	mov	r1, r2
 8006dd0:	4b3b      	ldr	r3, [pc, #236]	; (8006ec0 <UART_SetConfig+0x2d4>)
 8006dd2:	fba3 2301 	umull	r2, r3, r3, r1
 8006dd6:	095b      	lsrs	r3, r3, #5
 8006dd8:	2264      	movs	r2, #100	; 0x64
 8006dda:	fb02 f303 	mul.w	r3, r2, r3
 8006dde:	1acb      	subs	r3, r1, r3
 8006de0:	00db      	lsls	r3, r3, #3
 8006de2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006de6:	4b36      	ldr	r3, [pc, #216]	; (8006ec0 <UART_SetConfig+0x2d4>)
 8006de8:	fba3 2302 	umull	r2, r3, r3, r2
 8006dec:	095b      	lsrs	r3, r3, #5
 8006dee:	005b      	lsls	r3, r3, #1
 8006df0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006df4:	441c      	add	r4, r3
 8006df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006e04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006e08:	4642      	mov	r2, r8
 8006e0a:	464b      	mov	r3, r9
 8006e0c:	1891      	adds	r1, r2, r2
 8006e0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e10:	415b      	adcs	r3, r3
 8006e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e18:	4641      	mov	r1, r8
 8006e1a:	1851      	adds	r1, r2, r1
 8006e1c:	6339      	str	r1, [r7, #48]	; 0x30
 8006e1e:	4649      	mov	r1, r9
 8006e20:	414b      	adcs	r3, r1
 8006e22:	637b      	str	r3, [r7, #52]	; 0x34
 8006e24:	f04f 0200 	mov.w	r2, #0
 8006e28:	f04f 0300 	mov.w	r3, #0
 8006e2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006e30:	4659      	mov	r1, fp
 8006e32:	00cb      	lsls	r3, r1, #3
 8006e34:	4651      	mov	r1, sl
 8006e36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e3a:	4651      	mov	r1, sl
 8006e3c:	00ca      	lsls	r2, r1, #3
 8006e3e:	4610      	mov	r0, r2
 8006e40:	4619      	mov	r1, r3
 8006e42:	4603      	mov	r3, r0
 8006e44:	4642      	mov	r2, r8
 8006e46:	189b      	adds	r3, r3, r2
 8006e48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e4c:	464b      	mov	r3, r9
 8006e4e:	460a      	mov	r2, r1
 8006e50:	eb42 0303 	adc.w	r3, r2, r3
 8006e54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006e68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	18db      	adds	r3, r3, r3
 8006e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e72:	4613      	mov	r3, r2
 8006e74:	eb42 0303 	adc.w	r3, r2, r3
 8006e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006e82:	f7fa f80f 	bl	8000ea4 <__aeabi_uldivmod>
 8006e86:	4602      	mov	r2, r0
 8006e88:	460b      	mov	r3, r1
 8006e8a:	4b0d      	ldr	r3, [pc, #52]	; (8006ec0 <UART_SetConfig+0x2d4>)
 8006e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e90:	095b      	lsrs	r3, r3, #5
 8006e92:	2164      	movs	r1, #100	; 0x64
 8006e94:	fb01 f303 	mul.w	r3, r1, r3
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	00db      	lsls	r3, r3, #3
 8006e9c:	3332      	adds	r3, #50	; 0x32
 8006e9e:	4a08      	ldr	r2, [pc, #32]	; (8006ec0 <UART_SetConfig+0x2d4>)
 8006ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea4:	095b      	lsrs	r3, r3, #5
 8006ea6:	f003 0207 	and.w	r2, r3, #7
 8006eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4422      	add	r2, r4
 8006eb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006eb4:	e105      	b.n	80070c2 <UART_SetConfig+0x4d6>
 8006eb6:	bf00      	nop
 8006eb8:	40011000 	.word	0x40011000
 8006ebc:	40011400 	.word	0x40011400
 8006ec0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ec4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ece:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006ed2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006ed6:	4642      	mov	r2, r8
 8006ed8:	464b      	mov	r3, r9
 8006eda:	1891      	adds	r1, r2, r2
 8006edc:	6239      	str	r1, [r7, #32]
 8006ede:	415b      	adcs	r3, r3
 8006ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ee2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ee6:	4641      	mov	r1, r8
 8006ee8:	1854      	adds	r4, r2, r1
 8006eea:	4649      	mov	r1, r9
 8006eec:	eb43 0501 	adc.w	r5, r3, r1
 8006ef0:	f04f 0200 	mov.w	r2, #0
 8006ef4:	f04f 0300 	mov.w	r3, #0
 8006ef8:	00eb      	lsls	r3, r5, #3
 8006efa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006efe:	00e2      	lsls	r2, r4, #3
 8006f00:	4614      	mov	r4, r2
 8006f02:	461d      	mov	r5, r3
 8006f04:	4643      	mov	r3, r8
 8006f06:	18e3      	adds	r3, r4, r3
 8006f08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f0c:	464b      	mov	r3, r9
 8006f0e:	eb45 0303 	adc.w	r3, r5, r3
 8006f12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f26:	f04f 0200 	mov.w	r2, #0
 8006f2a:	f04f 0300 	mov.w	r3, #0
 8006f2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006f32:	4629      	mov	r1, r5
 8006f34:	008b      	lsls	r3, r1, #2
 8006f36:	4621      	mov	r1, r4
 8006f38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	008a      	lsls	r2, r1, #2
 8006f40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006f44:	f7f9 ffae 	bl	8000ea4 <__aeabi_uldivmod>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4b60      	ldr	r3, [pc, #384]	; (80070d0 <UART_SetConfig+0x4e4>)
 8006f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8006f52:	095b      	lsrs	r3, r3, #5
 8006f54:	011c      	lsls	r4, r3, #4
 8006f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006f64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006f68:	4642      	mov	r2, r8
 8006f6a:	464b      	mov	r3, r9
 8006f6c:	1891      	adds	r1, r2, r2
 8006f6e:	61b9      	str	r1, [r7, #24]
 8006f70:	415b      	adcs	r3, r3
 8006f72:	61fb      	str	r3, [r7, #28]
 8006f74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f78:	4641      	mov	r1, r8
 8006f7a:	1851      	adds	r1, r2, r1
 8006f7c:	6139      	str	r1, [r7, #16]
 8006f7e:	4649      	mov	r1, r9
 8006f80:	414b      	adcs	r3, r1
 8006f82:	617b      	str	r3, [r7, #20]
 8006f84:	f04f 0200 	mov.w	r2, #0
 8006f88:	f04f 0300 	mov.w	r3, #0
 8006f8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f90:	4659      	mov	r1, fp
 8006f92:	00cb      	lsls	r3, r1, #3
 8006f94:	4651      	mov	r1, sl
 8006f96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f9a:	4651      	mov	r1, sl
 8006f9c:	00ca      	lsls	r2, r1, #3
 8006f9e:	4610      	mov	r0, r2
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	4642      	mov	r2, r8
 8006fa6:	189b      	adds	r3, r3, r2
 8006fa8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006fac:	464b      	mov	r3, r9
 8006fae:	460a      	mov	r2, r1
 8006fb0:	eb42 0303 	adc.w	r3, r2, r3
 8006fb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fc2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006fc4:	f04f 0200 	mov.w	r2, #0
 8006fc8:	f04f 0300 	mov.w	r3, #0
 8006fcc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006fd0:	4649      	mov	r1, r9
 8006fd2:	008b      	lsls	r3, r1, #2
 8006fd4:	4641      	mov	r1, r8
 8006fd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fda:	4641      	mov	r1, r8
 8006fdc:	008a      	lsls	r2, r1, #2
 8006fde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006fe2:	f7f9 ff5f 	bl	8000ea4 <__aeabi_uldivmod>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	4b39      	ldr	r3, [pc, #228]	; (80070d0 <UART_SetConfig+0x4e4>)
 8006fec:	fba3 1302 	umull	r1, r3, r3, r2
 8006ff0:	095b      	lsrs	r3, r3, #5
 8006ff2:	2164      	movs	r1, #100	; 0x64
 8006ff4:	fb01 f303 	mul.w	r3, r1, r3
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	011b      	lsls	r3, r3, #4
 8006ffc:	3332      	adds	r3, #50	; 0x32
 8006ffe:	4a34      	ldr	r2, [pc, #208]	; (80070d0 <UART_SetConfig+0x4e4>)
 8007000:	fba2 2303 	umull	r2, r3, r2, r3
 8007004:	095b      	lsrs	r3, r3, #5
 8007006:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800700a:	441c      	add	r4, r3
 800700c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007010:	2200      	movs	r2, #0
 8007012:	673b      	str	r3, [r7, #112]	; 0x70
 8007014:	677a      	str	r2, [r7, #116]	; 0x74
 8007016:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800701a:	4642      	mov	r2, r8
 800701c:	464b      	mov	r3, r9
 800701e:	1891      	adds	r1, r2, r2
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	415b      	adcs	r3, r3
 8007024:	60fb      	str	r3, [r7, #12]
 8007026:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800702a:	4641      	mov	r1, r8
 800702c:	1851      	adds	r1, r2, r1
 800702e:	6039      	str	r1, [r7, #0]
 8007030:	4649      	mov	r1, r9
 8007032:	414b      	adcs	r3, r1
 8007034:	607b      	str	r3, [r7, #4]
 8007036:	f04f 0200 	mov.w	r2, #0
 800703a:	f04f 0300 	mov.w	r3, #0
 800703e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007042:	4659      	mov	r1, fp
 8007044:	00cb      	lsls	r3, r1, #3
 8007046:	4651      	mov	r1, sl
 8007048:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800704c:	4651      	mov	r1, sl
 800704e:	00ca      	lsls	r2, r1, #3
 8007050:	4610      	mov	r0, r2
 8007052:	4619      	mov	r1, r3
 8007054:	4603      	mov	r3, r0
 8007056:	4642      	mov	r2, r8
 8007058:	189b      	adds	r3, r3, r2
 800705a:	66bb      	str	r3, [r7, #104]	; 0x68
 800705c:	464b      	mov	r3, r9
 800705e:	460a      	mov	r2, r1
 8007060:	eb42 0303 	adc.w	r3, r2, r3
 8007064:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	663b      	str	r3, [r7, #96]	; 0x60
 8007070:	667a      	str	r2, [r7, #100]	; 0x64
 8007072:	f04f 0200 	mov.w	r2, #0
 8007076:	f04f 0300 	mov.w	r3, #0
 800707a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800707e:	4649      	mov	r1, r9
 8007080:	008b      	lsls	r3, r1, #2
 8007082:	4641      	mov	r1, r8
 8007084:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007088:	4641      	mov	r1, r8
 800708a:	008a      	lsls	r2, r1, #2
 800708c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007090:	f7f9 ff08 	bl	8000ea4 <__aeabi_uldivmod>
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	4b0d      	ldr	r3, [pc, #52]	; (80070d0 <UART_SetConfig+0x4e4>)
 800709a:	fba3 1302 	umull	r1, r3, r3, r2
 800709e:	095b      	lsrs	r3, r3, #5
 80070a0:	2164      	movs	r1, #100	; 0x64
 80070a2:	fb01 f303 	mul.w	r3, r1, r3
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	011b      	lsls	r3, r3, #4
 80070aa:	3332      	adds	r3, #50	; 0x32
 80070ac:	4a08      	ldr	r2, [pc, #32]	; (80070d0 <UART_SetConfig+0x4e4>)
 80070ae:	fba2 2303 	umull	r2, r3, r2, r3
 80070b2:	095b      	lsrs	r3, r3, #5
 80070b4:	f003 020f 	and.w	r2, r3, #15
 80070b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4422      	add	r2, r4
 80070c0:	609a      	str	r2, [r3, #8]
}
 80070c2:	bf00      	nop
 80070c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80070c8:	46bd      	mov	sp, r7
 80070ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070ce:	bf00      	nop
 80070d0:	51eb851f 	.word	0x51eb851f

080070d4 <MOTOR_driver_setupPWM>:
 *      Author: minht
 */

#include "MOTOR_DRIVER.h"
void MOTOR_driver_setupPWM(MOTOR_DRIVER_t* motor, TIM_HandleTypeDef* htimPWM, uint32_t CH1, uint32_t CH2)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
 80070e0:	603b      	str	r3, [r7, #0]
    motor->htimPWM = htimPWM;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	605a      	str	r2, [r3, #4]
    motor->PWM_CH1 = CH1;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	611a      	str	r2, [r3, #16]
    motor->PWM_CH2 = CH2;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	615a      	str	r2, [r3, #20]
    HAL_TIM_PWM_Start(motor->htimPWM, motor->PWM_CH1);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	4619      	mov	r1, r3
 80070fe:	4610      	mov	r0, r2
 8007100:	f7fd fd0c 	bl	8004b1c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(motor->htimPWM, motor->PWM_CH2);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	685a      	ldr	r2, [r3, #4]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	4619      	mov	r1, r3
 800710e:	4610      	mov	r0, r2
 8007110:	f7fd fd04 	bl	8004b1c <HAL_TIM_PWM_Start>
}
 8007114:	bf00      	nop
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <MOTOR_driver_setupENCODER>:
void MOTOR_driver_setupENCODER(MOTOR_DRIVER_t* motor, TIM_HandleTypeDef *htimENC, uint32_t CH1, uint32_t CH2)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
 8007128:	603b      	str	r3, [r7, #0]
    motor->htimENC = htimENC;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	601a      	str	r2, [r3, #0]
    motor->ENC_CH1 = CH1;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	619a      	str	r2, [r3, #24]
    motor->ENC_CH2 = CH2;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	683a      	ldr	r2, [r7, #0]
 800713a:	61da      	str	r2, [r3, #28]
    HAL_TIM_Base_Start(motor->htimENC);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4618      	mov	r0, r3
 8007142:	f7fd fbb9 	bl	80048b8 <HAL_TIM_Base_Start>
    HAL_TIM_Encoder_Start(motor->htimENC, motor->ENC_CH1 | motor->ENC_CH1);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	4619      	mov	r1, r3
 8007150:	4610      	mov	r0, r2
 8007152:	f7fd fe51 	bl	8004df8 <HAL_TIM_Encoder_Start>
}
 8007156:	bf00      	nop
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <MOTOR_driver_rotary>:
void MOTOR_driver_rotary(MOTOR_DRIVER_t* motor, float duty)
{
 800715e:	b480      	push	{r7}
 8007160:	b083      	sub	sp, #12
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
 8007166:	ed87 0a00 	vstr	s0, [r7]
    if (duty >= 0)
 800716a:	edd7 7a00 	vldr	s15, [r7]
 800716e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007176:	db61      	blt.n	800723c <MOTOR_driver_rotary+0xde>
    {
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH1, (uint16_t)duty);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10b      	bne.n	8007198 <MOTOR_driver_rotary+0x3a>
 8007180:	edd7 7a00 	vldr	s15, [r7]
 8007184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007188:	ee17 3a90 	vmov	r3, s15
 800718c:	b29a      	uxth	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	635a      	str	r2, [r3, #52]	; 0x34
 8007196:	e02d      	b.n	80071f4 <MOTOR_driver_rotary+0x96>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	2b04      	cmp	r3, #4
 800719e:	d10c      	bne.n	80071ba <MOTOR_driver_rotary+0x5c>
 80071a0:	edd7 7a00 	vldr	s15, [r7]
 80071a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071a8:	ee17 3a90 	vmov	r3, s15
 80071ac:	b299      	uxth	r1, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	460b      	mov	r3, r1
 80071b6:	6393      	str	r3, [r2, #56]	; 0x38
 80071b8:	e01c      	b.n	80071f4 <MOTOR_driver_rotary+0x96>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	2b08      	cmp	r3, #8
 80071c0:	d10c      	bne.n	80071dc <MOTOR_driver_rotary+0x7e>
 80071c2:	edd7 7a00 	vldr	s15, [r7]
 80071c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071ca:	ee17 3a90 	vmov	r3, s15
 80071ce:	b299      	uxth	r1, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	460b      	mov	r3, r1
 80071d8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80071da:	e00b      	b.n	80071f4 <MOTOR_driver_rotary+0x96>
 80071dc:	edd7 7a00 	vldr	s15, [r7]
 80071e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071e4:	ee17 3a90 	vmov	r3, s15
 80071e8:	b299      	uxth	r1, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	460b      	mov	r3, r1
 80071f2:	6413      	str	r3, [r2, #64]	; 0x40
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)0);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	695b      	ldr	r3, [r3, #20]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d105      	bne.n	8007208 <MOTOR_driver_rotary+0xaa>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2200      	movs	r2, #0
 8007204:	635a      	str	r2, [r3, #52]	; 0x34
    else
    {
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH1, (uint16_t)0);
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)-duty);
    }
}
 8007206:	e083      	b.n	8007310 <MOTOR_driver_rotary+0x1b2>
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)0);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	695b      	ldr	r3, [r3, #20]
 800720c:	2b04      	cmp	r3, #4
 800720e:	d105      	bne.n	800721c <MOTOR_driver_rotary+0xbe>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	2300      	movs	r3, #0
 8007218:	6393      	str	r3, [r2, #56]	; 0x38
 800721a:	e079      	b.n	8007310 <MOTOR_driver_rotary+0x1b2>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	695b      	ldr	r3, [r3, #20]
 8007220:	2b08      	cmp	r3, #8
 8007222:	d105      	bne.n	8007230 <MOTOR_driver_rotary+0xd2>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	2300      	movs	r3, #0
 800722c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800722e:	e06f      	b.n	8007310 <MOTOR_driver_rotary+0x1b2>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	2300      	movs	r3, #0
 8007238:	6413      	str	r3, [r2, #64]	; 0x40
}
 800723a:	e069      	b.n	8007310 <MOTOR_driver_rotary+0x1b2>
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH1, (uint16_t)0);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d105      	bne.n	8007250 <MOTOR_driver_rotary+0xf2>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2200      	movs	r2, #0
 800724c:	635a      	str	r2, [r3, #52]	; 0x34
 800724e:	e018      	b.n	8007282 <MOTOR_driver_rotary+0x124>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	2b04      	cmp	r3, #4
 8007256:	d105      	bne.n	8007264 <MOTOR_driver_rotary+0x106>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	2300      	movs	r3, #0
 8007260:	6393      	str	r3, [r2, #56]	; 0x38
 8007262:	e00e      	b.n	8007282 <MOTOR_driver_rotary+0x124>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	2b08      	cmp	r3, #8
 800726a:	d105      	bne.n	8007278 <MOTOR_driver_rotary+0x11a>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	2300      	movs	r3, #0
 8007274:	63d3      	str	r3, [r2, #60]	; 0x3c
 8007276:	e004      	b.n	8007282 <MOTOR_driver_rotary+0x124>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	2300      	movs	r3, #0
 8007280:	6413      	str	r3, [r2, #64]	; 0x40
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)-duty);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10d      	bne.n	80072a6 <MOTOR_driver_rotary+0x148>
 800728a:	edd7 7a00 	vldr	s15, [r7]
 800728e:	eef1 7a67 	vneg.f32	s15, s15
 8007292:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007296:	ee17 3a90 	vmov	r3, s15
 800729a:	b29a      	uxth	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80072a4:	e034      	b.n	8007310 <MOTOR_driver_rotary+0x1b2>
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)-duty);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	2b04      	cmp	r3, #4
 80072ac:	d10e      	bne.n	80072cc <MOTOR_driver_rotary+0x16e>
 80072ae:	edd7 7a00 	vldr	s15, [r7]
 80072b2:	eef1 7a67 	vneg.f32	s15, s15
 80072b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072ba:	ee17 3a90 	vmov	r3, s15
 80072be:	b299      	uxth	r1, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	460b      	mov	r3, r1
 80072c8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80072ca:	e021      	b.n	8007310 <MOTOR_driver_rotary+0x1b2>
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)-duty);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	2b08      	cmp	r3, #8
 80072d2:	d10e      	bne.n	80072f2 <MOTOR_driver_rotary+0x194>
 80072d4:	edd7 7a00 	vldr	s15, [r7]
 80072d8:	eef1 7a67 	vneg.f32	s15, s15
 80072dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072e0:	ee17 3a90 	vmov	r3, s15
 80072e4:	b299      	uxth	r1, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	460b      	mov	r3, r1
 80072ee:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80072f0:	e00e      	b.n	8007310 <MOTOR_driver_rotary+0x1b2>
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)-duty);
 80072f2:	edd7 7a00 	vldr	s15, [r7]
 80072f6:	eef1 7a67 	vneg.f32	s15, s15
 80072fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072fe:	ee17 3a90 	vmov	r3, s15
 8007302:	b299      	uxth	r1, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	460b      	mov	r3, r1
 800730c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800730e:	e7ff      	b.n	8007310 <MOTOR_driver_rotary+0x1b2>
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <MOTOR_driver_readPosAndSpeed>:
void MOTOR_driver_readPosAndSpeed(MOTOR_DRIVER_t* motor, float* pos, float* speed, float Ts)
{
 800731c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007320:	b084      	sub	sp, #16
 8007322:	af00      	add	r7, sp, #0
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	607a      	str	r2, [r7, #4]
 800732a:	ed87 0a00 	vstr	s0, [r7]
    motor->EncCount += (int16_t)motor->htimENC->Instance->CNT; // Đọc xung encoder
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007336:	b219      	sxth	r1, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800733e:	b209      	sxth	r1, r1
 8007340:	17c8      	asrs	r0, r1, #31
 8007342:	460c      	mov	r4, r1
 8007344:	4605      	mov	r5, r0
 8007346:	eb12 0804 	adds.w	r8, r2, r4
 800734a:	eb43 0905 	adc.w	r9, r3, r5
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	e9c3 8902 	strd	r8, r9, [r3, #8]
    __HAL_TIM_SET_COUNTER(motor->htimENC, 0); // Reset xung encoder
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2200      	movs	r2, #0
 800735c:	625a      	str	r2, [r3, #36]	; 0x24

    *pos = motor->pos = (float)motor->EncCount / motor->ratio; // Tính góc hiện tại của trục động cơ 
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007364:	4610      	mov	r0, r2
 8007366:	4619      	mov	r1, r3
 8007368:	f7f9 fd5e 	bl	8000e28 <__aeabi_l2f>
 800736c:	ee06 0a90 	vmov	s13, r0
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8007376:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	601a      	str	r2, [r3, #0]
    *speed = motor->speed = (motor->pos - motor->prePos) * 1000 / Ts; // tính vận tốc xoay góc
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8007394:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007398:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80073c8 <MOTOR_driver_readPosAndSpeed+0xac>
 800739c:	ee67 6a87 	vmul.f32	s13, s15, s14
 80073a0:	ed97 7a00 	vldr	s14, [r7]
 80073a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	edc3 7a08 	vstr	s15, [r3, #32]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6a1a      	ldr	r2, [r3, #32]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	601a      	str	r2, [r3, #0]
    motor->prePos = motor->pos;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80073be:	bf00      	nop
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80073c8:	447a0000 	.word	0x447a0000

080073cc <MOTOR_driver_reset>:
void MOTOR_driver_reset(MOTOR_DRIVER_t* motor)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
	motor->EncCount = 0;
 80073d4:	6879      	ldr	r1, [r7, #4]
 80073d6:	f04f 0200 	mov.w	r2, #0
 80073da:	f04f 0300 	mov.w	r3, #0
 80073de:	e9c1 2302 	strd	r2, r3, [r1, #8]
    motor->pos = 0;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f04f 0200 	mov.w	r2, #0
 80073e8:	625a      	str	r2, [r3, #36]	; 0x24
    motor->prePos = 0;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f04f 0200 	mov.w	r2, #0
 80073f0:	62da      	str	r2, [r3, #44]	; 0x2c
    motor->speed = 0;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f04f 0200 	mov.w	r2, #0
 80073f8:	621a      	str	r2, [r3, #32]
    motor->preSpeed = 0;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f04f 0200 	mov.w	r2, #0
 8007400:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_TIM_SET_COUNTER(motor->htimENC, 0);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2200      	movs	r2, #0
 800740a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <MOTOR_setPIDVelocity>:
 *  Created on: Nov 20, 2023
 *      Author: minht
 */
#include "MOTOR_PID_CONTROL.h"
void MOTOR_setPIDVelocity(MOTOR_t* motor, float Kp, float Ki, float Kd, float Ts)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	6178      	str	r0, [r7, #20]
 8007420:	ed87 0a04 	vstr	s0, [r7, #16]
 8007424:	edc7 0a03 	vstr	s1, [r7, #12]
 8007428:	ed87 1a02 	vstr	s2, [r7, #8]
 800742c:	edc7 1a01 	vstr	s3, [r7, #4]
    PID_init(&motor->PIDVelocity, Kp, Ki, Kd, Ts);
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	edd7 1a01 	vldr	s3, [r7, #4]
 8007436:	ed97 1a02 	vldr	s2, [r7, #8]
 800743a:	edd7 0a03 	vldr	s1, [r7, #12]
 800743e:	ed97 0a04 	vldr	s0, [r7, #16]
 8007442:	4618      	mov	r0, r3
 8007444:	f000 f989 	bl	800775a <PID_init>
}
 8007448:	bf00      	nop
 800744a:	3718      	adds	r7, #24
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <MOTOR_setPIDPosition>:
void MOTOR_setPIDPosition(MOTOR_t* motor, float Kp, float Ki, float Kd, float Ts)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
 8007456:	6178      	str	r0, [r7, #20]
 8007458:	ed87 0a04 	vstr	s0, [r7, #16]
 800745c:	edc7 0a03 	vstr	s1, [r7, #12]
 8007460:	ed87 1a02 	vstr	s2, [r7, #8]
 8007464:	edc7 1a01 	vstr	s3, [r7, #4]
    PID_init(&motor->PIDPosition, Kp, Ki, Kd, Ts);
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	3348      	adds	r3, #72	; 0x48
 800746c:	edd7 1a01 	vldr	s3, [r7, #4]
 8007470:	ed97 1a02 	vldr	s2, [r7, #8]
 8007474:	edd7 0a03 	vldr	s1, [r7, #12]
 8007478:	ed97 0a04 	vldr	s0, [r7, #16]
 800747c:	4618      	mov	r0, r3
 800747e:	f000 f96c 	bl	800775a <PID_init>
}
 8007482:	bf00      	nop
 8007484:	3718      	adds	r7, #24
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
	...

0800748c <MOTOR_setOutputRange>:
void MOTOR_setOutputRange(MOTOR_t* motor, float OutMin, float OutMax)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	ed87 0a02 	vstr	s0, [r7, #8]
 8007498:	edc7 0a01 	vstr	s1, [r7, #4]
    PID_setOutputRange(&motor->PIDPosition, -900, 900);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	3348      	adds	r3, #72	; 0x48
 80074a0:	eddf 0a09 	vldr	s1, [pc, #36]	; 80074c8 <MOTOR_setOutputRange+0x3c>
 80074a4:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80074cc <MOTOR_setOutputRange+0x40>
 80074a8:	4618      	mov	r0, r3
 80074aa:	f000 f993 	bl	80077d4 <PID_setOutputRange>
    PID_setOutputRange(&motor->PIDVelocity, OutMin, OutMax);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	edd7 0a01 	vldr	s1, [r7, #4]
 80074b4:	ed97 0a02 	vldr	s0, [r7, #8]
 80074b8:	4618      	mov	r0, r3
 80074ba:	f000 f98b 	bl	80077d4 <PID_setOutputRange>
}
 80074be:	bf00      	nop
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	44610000 	.word	0x44610000
 80074cc:	c4610000 	.word	0xc4610000

080074d0 <MOTOR_setWindupRange>:
void MOTOR_setWindupRange(MOTOR_t* motor, float OutMin, float OutMax)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80074dc:	edc7 0a01 	vstr	s1, [r7, #4]
    PID_setWindupGain(&motor->PIDVelocity, 0);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8007504 <MOTOR_setWindupRange+0x34>
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 f99c 	bl	8007824 <PID_setWindupGain>
    PID_setWindupRange(&motor->PIDVelocity, OutMin, OutMax);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	edd7 0a01 	vldr	s1, [r7, #4]
 80074f2:	ed97 0a02 	vldr	s0, [r7, #8]
 80074f6:	4618      	mov	r0, r3
 80074f8:	f000 f980 	bl	80077fc <PID_setWindupRange>
}
 80074fc:	bf00      	nop
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	00000000 	.word	0x00000000

08007508 <MOTOR_setAngle>:
void MOTOR_setAngle(MOTOR_t* motor, float setAngle)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	ed87 0a00 	vstr	s0, [r7]
    motor->setPoint = setAngle * motor->ratioJoint;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 800751a:	edd7 7a00 	vldr	s15, [r7]
 800751e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <MOTOR_runAngle>:
void MOTOR_runAngle(MOTOR_t* motor)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
//        PID_clear(&motor->PIDPosition);
//        PID_clear(&motor->PIDVelocity);
//        motor->preSetPoint = motor->setPoint;
//    }

    MOTOR_driver_readPosAndSpeed(motor->motorDriver, &motor->pos, &motor->speed, motor->PIDPosition.Sample_time);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f103 01ac 	add.w	r1, r3, #172	; 0xac
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8007554:	eeb0 0a67 	vmov.f32	s0, s15
 8007558:	f7ff fee0 	bl	800731c <MOTOR_driver_readPosAndSpeed>
    motor->error = motor->setPoint - motor->pos;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8007568:	ee77 7a67 	vsub.f32	s15, s14, s15
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
//    motor->error = motor->setPoint;

    // PD+PI controller
    PID_compute(&motor->PIDPosition, motor->error);  // tinh PD
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800757e:	eeb0 0a67 	vmov.f32	s0, s15
 8007582:	4610      	mov	r0, r2
 8007584:	f000 f95e 	bl	8007844 <PID_compute>
    PID_compute(&motor->PIDVelocity, motor->PIDPosition.Output - motor->speed); // tinh PI
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8007596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800759a:	eeb0 0a67 	vmov.f32	s0, s15
 800759e:	4610      	mov	r0, r2
 80075a0:	f000 f950 	bl	8007844 <PID_compute>

    if (fabs(motor->pos) < motor->limitPos)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 80075aa:	eeb0 7ae7 	vabs.f32	s14, s15
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 80075b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80075b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075bc:	d50b      	bpl.n	80075d6 <MOTOR_runAngle+0xa2>
    {
        MOTOR_driver_rotary(motor->motorDriver, motor->PIDVelocity.Output);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80075ca:	eeb0 0a67 	vmov.f32	s0, s15
 80075ce:	4610      	mov	r0, r2
 80075d0:	f7ff fdc5 	bl	800715e <MOTOR_driver_rotary>
    }
    else
    {
        MOTOR_driver_rotary(motor->motorDriver, 0);
    }
}
 80075d4:	e007      	b.n	80075e6 <MOTOR_runAngle+0xb2>
        MOTOR_driver_rotary(motor->motorDriver, 0);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075dc:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80075f0 <MOTOR_runAngle+0xbc>
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7ff fdbc 	bl	800715e <MOTOR_driver_rotary>
}
 80075e6:	bf00      	nop
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	00000000 	.word	0x00000000

080075f4 <MOTOR_init>:
void MOTOR_init(MOTOR_t* motor, MOTOR_DRIVER_t *motorDriver,float ratio, uint16_t pinSetHome, float limitPos)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6178      	str	r0, [r7, #20]
 80075fc:	6139      	str	r1, [r7, #16]
 80075fe:	ed87 0a03 	vstr	s0, [r7, #12]
 8007602:	4613      	mov	r3, r2
 8007604:	edc7 0a01 	vstr	s1, [r7, #4]
 8007608:	817b      	strh	r3, [r7, #10]
    motor->ratioJoint = ratio;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    motor->pinSetHome = 0;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2200      	movs	r2, #0
 8007616:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
    motor->setPoint = 0;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	f04f 0200 	mov.w	r2, #0
 8007620:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    motor->preSetPoint = 0;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	f04f 0200 	mov.w	r2, #0
 800762a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    motor->error = 0;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	f04f 0200 	mov.w	r2, #0
 8007634:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    motor->preError = 0;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	f04f 0200 	mov.w	r2, #0
 800763e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    motor->pos = 0;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	f04f 0200 	mov.w	r2, #0
 8007648:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    motor->speed = 0;
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	f04f 0200 	mov.w	r2, #0
 8007652:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    motor->motorDriver = motorDriver;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    motor->limitPos = limitPos * motor->ratioJoint;
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8007664:	edd7 7a01 	vldr	s15, [r7, #4]
 8007668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
    MOTOR_driver_setupPWM(motor->motorDriver, motor->motorDriver->htimPWM, motor->motorDriver->PWM_CH1, motor->motorDriver->PWM_CH2);
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800767e:	6859      	ldr	r1, [r3, #4]
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007686:	691a      	ldr	r2, [r3, #16]
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	f7ff fd20 	bl	80070d4 <MOTOR_driver_setupPWM>
    MOTOR_driver_setupENCODER(motor->motorDriver, motor->motorDriver->htimENC, motor->motorDriver->ENC_CH1, motor->motorDriver->ENC_CH2);
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076a0:	6819      	ldr	r1, [r3, #0]
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076a8:	699a      	ldr	r2, [r3, #24]
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	f7ff fd33 	bl	800711c <MOTOR_driver_setupENCODER>
}
 80076b6:	bf00      	nop
 80076b8:	3718      	adds	r7, #24
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <MOTOR_reset>:
void MOTOR_reset(MOTOR_t* motor)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b082      	sub	sp, #8
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
    motor->pinSetHome = 0;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
    motor->setPoint = 0;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f04f 0200 	mov.w	r2, #0
 80076d4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    motor->preSetPoint = 0;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f04f 0200 	mov.w	r2, #0
 80076de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    motor->error = 0;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f04f 0200 	mov.w	r2, #0
 80076e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    motor->preError = 0;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f04f 0200 	mov.w	r2, #0
 80076f2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    motor->pos = 0;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f04f 0200 	mov.w	r2, #0
 80076fc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    motor->speed = 0;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f04f 0200 	mov.w	r2, #0
 8007706:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    MOTOR_driver_reset(motor->motorDriver);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007710:	4618      	mov	r0, r3
 8007712:	f7ff fe5b 	bl	80073cc <MOTOR_driver_reset>
    PID_clear(&motor->PIDPosition);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	3348      	adds	r3, #72	; 0x48
 800771a:	4618      	mov	r0, r3
 800771c:	f000 f83c 	bl	8007798 <PID_clear>
    PID_clear(&motor->PIDVelocity);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4618      	mov	r0, r3
 8007724:	f000 f838 	bl	8007798 <PID_clear>
}
 8007728:	bf00      	nop
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <MOTOR_getPos>:
float MOTOR_getPos(MOTOR_t* motor)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
	return motor->pos/motor->ratioJoint;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8007744:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007748:	eef0 7a66 	vmov.f32	s15, s13
}
 800774c:	eeb0 0a67 	vmov.f32	s0, s15
 8007750:	370c      	adds	r7, #12
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr

0800775a <PID_init>:
 *      Author: minht
 */
#include "PID.h"
#include "stdint.h"
void PID_init(PID_TypeDef* pid, float Kp, float Ki, float Kd, float Sample_time)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b086      	sub	sp, #24
 800775e:	af00      	add	r7, sp, #0
 8007760:	6178      	str	r0, [r7, #20]
 8007762:	ed87 0a04 	vstr	s0, [r7, #16]
 8007766:	edc7 0a03 	vstr	s1, [r7, #12]
 800776a:	ed87 1a02 	vstr	s2, [r7, #8]
 800776e:	edc7 1a01 	vstr	s3, [r7, #4]
	PID_clear(pid);
 8007772:	6978      	ldr	r0, [r7, #20]
 8007774:	f000 f810 	bl	8007798 <PID_clear>
	pid->Kp = Kp;
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	605a      	str	r2, [r3, #4]
	pid->Kd = Kd;
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	609a      	str	r2, [r3, #8]
	pid->Sample_time = Sample_time;
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8007790:	bf00      	nop
 8007792:	3718      	adds	r7, #24
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <PID_clear>:
void PID_clear(PID_TypeDef* pid)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
	pid->PTerm = 0;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f04f 0200 	mov.w	r2, #0
 80077a6:	61da      	str	r2, [r3, #28]
	pid->ITerm = 0;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f04f 0200 	mov.w	r2, #0
 80077ae:	621a      	str	r2, [r3, #32]
	pid->DTerm = 0;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f04f 0200 	mov.w	r2, #0
 80077b6:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Output = 0;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f04f 0200 	mov.w	r2, #0
 80077be:	639a      	str	r2, [r3, #56]	; 0x38
	pid->FeedbackWindup = 0;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f04f 0200 	mov.w	r2, #0
 80077c6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <PID_setOutputRange>:
void PID_setKp(PID_TypeDef* pid, float value) { pid->Kp = value; }
void PID_setKi(PID_TypeDef* pid, float value) { pid->Ki = value; }
void PID_setKd(PID_TypeDef* pid, float value) { pid->Kd = value; }
void PID_setSampleTime(PID_TypeDef* pid, float value) { pid->Sample_time = value; }
void PID_setOutputRange(PID_TypeDef* pid, float valueMin, float valueMax)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	ed87 0a02 	vstr	s0, [r7, #8]
 80077e0:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->OutMax = valueMax;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	63da      	str	r2, [r3, #60]	; 0x3c
	pid->OutMin = valueMin;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	641a      	str	r2, [r3, #64]	; 0x40
}
 80077f0:	bf00      	nop
 80077f2:	3714      	adds	r7, #20
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <PID_setWindupRange>:
void PID_setWindupRange(PID_TypeDef* pid, float valueMin, float valueMax)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	ed87 0a02 	vstr	s0, [r7, #8]
 8007808:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->WindupMax = valueMax;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	629a      	str	r2, [r3, #40]	; 0x28
	pid->WindupMin = valueMin;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007818:	bf00      	nop
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <PID_setWindupGain>:
void PID_setWindupGain(PID_TypeDef* pid, float value)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	ed87 0a00 	vstr	s0, [r7]
	pid->Kb = value;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	683a      	ldr	r2, [r7, #0]
 8007834:	60da      	str	r2, [r3, #12]
}
 8007836:	bf00      	nop
 8007838:	370c      	adds	r7, #12
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
	...

08007844 <PID_compute>:
float PID_compute(PID_TypeDef* pid, float Error)
{
 8007844:	b5b0      	push	{r4, r5, r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	ed87 0a00 	vstr	s0, [r7]

	pid->PTerm = pid->Kp * Error;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	ed93 7a00 	vldr	s14, [r3]
 8007856:	edd7 7a00 	vldr	s15, [r7]
 800785a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	edc3 7a07 	vstr	s15, [r3, #28]

	pid->ITerm += ((Error + pid->Last_error)* pid->Ki * 0.5 + pid->FeedbackWindup * pid->Kb) * (pid->Sample_time / 1000.0);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	ed93 7a05 	vldr	s14, [r3, #20]
 800786a:	edd7 7a00 	vldr	s15, [r7]
 800786e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	edd3 7a01 	vldr	s15, [r3, #4]
 8007878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800787c:	ee17 0a90 	vmov	r0, s15
 8007880:	f7f8 fe62 	bl	8000548 <__aeabi_f2d>
 8007884:	f04f 0200 	mov.w	r2, #0
 8007888:	4b75      	ldr	r3, [pc, #468]	; (8007a60 <PID_compute+0x21c>)
 800788a:	f7f8 feb5 	bl	80005f8 <__aeabi_dmul>
 800788e:	4602      	mov	r2, r0
 8007890:	460b      	mov	r3, r1
 8007892:	4614      	mov	r4, r2
 8007894:	461d      	mov	r5, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	edd3 7a03 	vldr	s15, [r3, #12]
 80078a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078a6:	ee17 0a90 	vmov	r0, s15
 80078aa:	f7f8 fe4d 	bl	8000548 <__aeabi_f2d>
 80078ae:	4602      	mov	r2, r0
 80078b0:	460b      	mov	r3, r1
 80078b2:	4620      	mov	r0, r4
 80078b4:	4629      	mov	r1, r5
 80078b6:	f7f8 fce9 	bl	800028c <__adddf3>
 80078ba:	4602      	mov	r2, r0
 80078bc:	460b      	mov	r3, r1
 80078be:	4614      	mov	r4, r2
 80078c0:	461d      	mov	r5, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7f8 fe3e 	bl	8000548 <__aeabi_f2d>
 80078cc:	f04f 0200 	mov.w	r2, #0
 80078d0:	4b64      	ldr	r3, [pc, #400]	; (8007a64 <PID_compute+0x220>)
 80078d2:	f7f8 ffbb 	bl	800084c <__aeabi_ddiv>
 80078d6:	4602      	mov	r2, r0
 80078d8:	460b      	mov	r3, r1
 80078da:	4620      	mov	r0, r4
 80078dc:	4629      	mov	r1, r5
 80078de:	f7f8 fe8b 	bl	80005f8 <__aeabi_dmul>
 80078e2:	4602      	mov	r2, r0
 80078e4:	460b      	mov	r3, r1
 80078e6:	4614      	mov	r4, r2
 80078e8:	461d      	mov	r5, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7f8 fe2a 	bl	8000548 <__aeabi_f2d>
 80078f4:	4602      	mov	r2, r0
 80078f6:	460b      	mov	r3, r1
 80078f8:	4620      	mov	r0, r4
 80078fa:	4629      	mov	r1, r5
 80078fc:	f7f8 fcc6 	bl	800028c <__adddf3>
 8007900:	4602      	mov	r2, r0
 8007902:	460b      	mov	r3, r1
 8007904:	4610      	mov	r0, r2
 8007906:	4619      	mov	r1, r3
 8007908:	f7f9 f96e 	bl	8000be8 <__aeabi_d2f>
 800790c:	4602      	mov	r2, r0
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	621a      	str	r2, [r3, #32]
	if (pid->ITerm > pid->WindupMax) pid->ITerm = pid->WindupMax;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	ed93 7a08 	vldr	s14, [r3, #32]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800791e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007926:	dd04      	ble.n	8007932 <PID_compute+0xee>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	621a      	str	r2, [r3, #32]
 8007930:	e00e      	b.n	8007950 <PID_compute+0x10c>
	else if (pid->ITerm < pid->WindupMin) pid->ITerm = pid->WindupMin;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	ed93 7a08 	vldr	s14, [r3, #32]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800793e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007946:	d503      	bpl.n	8007950 <PID_compute+0x10c>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	621a      	str	r2, [r3, #32]

	pid->Delta_error = Error - pid->Last_error;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	edd3 7a05 	vldr	s15, [r3, #20]
 8007956:	ed97 7a00 	vldr	s14, [r7]
 800795a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->DTerm = pid->Kd * pid->Delta_error / (pid->Sample_time / 1000.0);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	ed93 7a02 	vldr	s14, [r3, #8]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007974:	ee17 0a90 	vmov	r0, s15
 8007978:	f7f8 fde6 	bl	8000548 <__aeabi_f2d>
 800797c:	4604      	mov	r4, r0
 800797e:	460d      	mov	r5, r1
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007984:	4618      	mov	r0, r3
 8007986:	f7f8 fddf 	bl	8000548 <__aeabi_f2d>
 800798a:	f04f 0200 	mov.w	r2, #0
 800798e:	4b35      	ldr	r3, [pc, #212]	; (8007a64 <PID_compute+0x220>)
 8007990:	f7f8 ff5c 	bl	800084c <__aeabi_ddiv>
 8007994:	4602      	mov	r2, r0
 8007996:	460b      	mov	r3, r1
 8007998:	4620      	mov	r0, r4
 800799a:	4629      	mov	r1, r5
 800799c:	f7f8 ff56 	bl	800084c <__aeabi_ddiv>
 80079a0:	4602      	mov	r2, r0
 80079a2:	460b      	mov	r3, r1
 80079a4:	4610      	mov	r0, r2
 80079a6:	4619      	mov	r1, r3
 80079a8:	f7f9 f91e 	bl	8000be8 <__aeabi_d2f>
 80079ac:	4602      	mov	r2, r0
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Last_error = Error;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	615a      	str	r2, [r3, #20]

	pid->Output = pid->PTerm + pid->ITerm + pid->DTerm;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	ed93 7a07 	vldr	s14, [r3, #28]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	edd3 7a08 	vldr	s15, [r3, #32]
 80079c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80079ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	if (pid->Output > pid->OutMax)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80079e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80079e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079ec:	dd0f      	ble.n	8007a0e <PID_compute+0x1ca>
	{
		pid->FeedbackWindup = pid->Output - pid->OutMax;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80079fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		pid->Output = pid->OutMax;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	639a      	str	r2, [r3, #56]	; 0x38
 8007a0c:	e01e      	b.n	8007a4c <PID_compute+0x208>
	}
	else if (pid->Output < pid->OutMin)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8007a1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a22:	d50f      	bpl.n	8007a44 <PID_compute+0x200>
	{
		pid->FeedbackWindup = pid->Output - pid->OutMin;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8007a30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		pid->Output = pid->OutMin;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	639a      	str	r2, [r3, #56]	; 0x38
 8007a42:	e003      	b.n	8007a4c <PID_compute+0x208>
	}
	else
	{
		pid->FeedbackWindup = 0;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f04f 0200 	mov.w	r2, #0
 8007a4a:	631a      	str	r2, [r3, #48]	; 0x30
	}
	return pid->Output;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a50:	ee07 3a90 	vmov	s15, r3
}
 8007a54:	eeb0 0a67 	vmov.f32	s0, s15
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	3fe00000 	.word	0x3fe00000
 8007a64:	408f4000 	.word	0x408f4000

08007a68 <__errno>:
 8007a68:	4b01      	ldr	r3, [pc, #4]	; (8007a70 <__errno+0x8>)
 8007a6a:	6818      	ldr	r0, [r3, #0]
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	200000f0 	.word	0x200000f0

08007a74 <__libc_init_array>:
 8007a74:	b570      	push	{r4, r5, r6, lr}
 8007a76:	4d0d      	ldr	r5, [pc, #52]	; (8007aac <__libc_init_array+0x38>)
 8007a78:	4c0d      	ldr	r4, [pc, #52]	; (8007ab0 <__libc_init_array+0x3c>)
 8007a7a:	1b64      	subs	r4, r4, r5
 8007a7c:	10a4      	asrs	r4, r4, #2
 8007a7e:	2600      	movs	r6, #0
 8007a80:	42a6      	cmp	r6, r4
 8007a82:	d109      	bne.n	8007a98 <__libc_init_array+0x24>
 8007a84:	4d0b      	ldr	r5, [pc, #44]	; (8007ab4 <__libc_init_array+0x40>)
 8007a86:	4c0c      	ldr	r4, [pc, #48]	; (8007ab8 <__libc_init_array+0x44>)
 8007a88:	f005 f8ec 	bl	800cc64 <_init>
 8007a8c:	1b64      	subs	r4, r4, r5
 8007a8e:	10a4      	asrs	r4, r4, #2
 8007a90:	2600      	movs	r6, #0
 8007a92:	42a6      	cmp	r6, r4
 8007a94:	d105      	bne.n	8007aa2 <__libc_init_array+0x2e>
 8007a96:	bd70      	pop	{r4, r5, r6, pc}
 8007a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a9c:	4798      	blx	r3
 8007a9e:	3601      	adds	r6, #1
 8007aa0:	e7ee      	b.n	8007a80 <__libc_init_array+0xc>
 8007aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aa6:	4798      	blx	r3
 8007aa8:	3601      	adds	r6, #1
 8007aaa:	e7f2      	b.n	8007a92 <__libc_init_array+0x1e>
 8007aac:	0800d1c4 	.word	0x0800d1c4
 8007ab0:	0800d1c4 	.word	0x0800d1c4
 8007ab4:	0800d1c4 	.word	0x0800d1c4
 8007ab8:	0800d1c8 	.word	0x0800d1c8

08007abc <memset>:
 8007abc:	4402      	add	r2, r0
 8007abe:	4603      	mov	r3, r0
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d100      	bne.n	8007ac6 <memset+0xa>
 8007ac4:	4770      	bx	lr
 8007ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8007aca:	e7f9      	b.n	8007ac0 <memset+0x4>

08007acc <__cvt>:
 8007acc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ad0:	ec55 4b10 	vmov	r4, r5, d0
 8007ad4:	2d00      	cmp	r5, #0
 8007ad6:	460e      	mov	r6, r1
 8007ad8:	4619      	mov	r1, r3
 8007ada:	462b      	mov	r3, r5
 8007adc:	bfbb      	ittet	lt
 8007ade:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007ae2:	461d      	movlt	r5, r3
 8007ae4:	2300      	movge	r3, #0
 8007ae6:	232d      	movlt	r3, #45	; 0x2d
 8007ae8:	700b      	strb	r3, [r1, #0]
 8007aea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007aec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007af0:	4691      	mov	r9, r2
 8007af2:	f023 0820 	bic.w	r8, r3, #32
 8007af6:	bfbc      	itt	lt
 8007af8:	4622      	movlt	r2, r4
 8007afa:	4614      	movlt	r4, r2
 8007afc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b00:	d005      	beq.n	8007b0e <__cvt+0x42>
 8007b02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007b06:	d100      	bne.n	8007b0a <__cvt+0x3e>
 8007b08:	3601      	adds	r6, #1
 8007b0a:	2102      	movs	r1, #2
 8007b0c:	e000      	b.n	8007b10 <__cvt+0x44>
 8007b0e:	2103      	movs	r1, #3
 8007b10:	ab03      	add	r3, sp, #12
 8007b12:	9301      	str	r3, [sp, #4]
 8007b14:	ab02      	add	r3, sp, #8
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	ec45 4b10 	vmov	d0, r4, r5
 8007b1c:	4653      	mov	r3, sl
 8007b1e:	4632      	mov	r2, r6
 8007b20:	f001 fe66 	bl	80097f0 <_dtoa_r>
 8007b24:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007b28:	4607      	mov	r7, r0
 8007b2a:	d102      	bne.n	8007b32 <__cvt+0x66>
 8007b2c:	f019 0f01 	tst.w	r9, #1
 8007b30:	d022      	beq.n	8007b78 <__cvt+0xac>
 8007b32:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b36:	eb07 0906 	add.w	r9, r7, r6
 8007b3a:	d110      	bne.n	8007b5e <__cvt+0x92>
 8007b3c:	783b      	ldrb	r3, [r7, #0]
 8007b3e:	2b30      	cmp	r3, #48	; 0x30
 8007b40:	d10a      	bne.n	8007b58 <__cvt+0x8c>
 8007b42:	2200      	movs	r2, #0
 8007b44:	2300      	movs	r3, #0
 8007b46:	4620      	mov	r0, r4
 8007b48:	4629      	mov	r1, r5
 8007b4a:	f7f8 ffbd 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b4e:	b918      	cbnz	r0, 8007b58 <__cvt+0x8c>
 8007b50:	f1c6 0601 	rsb	r6, r6, #1
 8007b54:	f8ca 6000 	str.w	r6, [sl]
 8007b58:	f8da 3000 	ldr.w	r3, [sl]
 8007b5c:	4499      	add	r9, r3
 8007b5e:	2200      	movs	r2, #0
 8007b60:	2300      	movs	r3, #0
 8007b62:	4620      	mov	r0, r4
 8007b64:	4629      	mov	r1, r5
 8007b66:	f7f8 ffaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b6a:	b108      	cbz	r0, 8007b70 <__cvt+0xa4>
 8007b6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007b70:	2230      	movs	r2, #48	; 0x30
 8007b72:	9b03      	ldr	r3, [sp, #12]
 8007b74:	454b      	cmp	r3, r9
 8007b76:	d307      	bcc.n	8007b88 <__cvt+0xbc>
 8007b78:	9b03      	ldr	r3, [sp, #12]
 8007b7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b7c:	1bdb      	subs	r3, r3, r7
 8007b7e:	4638      	mov	r0, r7
 8007b80:	6013      	str	r3, [r2, #0]
 8007b82:	b004      	add	sp, #16
 8007b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b88:	1c59      	adds	r1, r3, #1
 8007b8a:	9103      	str	r1, [sp, #12]
 8007b8c:	701a      	strb	r2, [r3, #0]
 8007b8e:	e7f0      	b.n	8007b72 <__cvt+0xa6>

08007b90 <__exponent>:
 8007b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b92:	4603      	mov	r3, r0
 8007b94:	2900      	cmp	r1, #0
 8007b96:	bfb8      	it	lt
 8007b98:	4249      	neglt	r1, r1
 8007b9a:	f803 2b02 	strb.w	r2, [r3], #2
 8007b9e:	bfb4      	ite	lt
 8007ba0:	222d      	movlt	r2, #45	; 0x2d
 8007ba2:	222b      	movge	r2, #43	; 0x2b
 8007ba4:	2909      	cmp	r1, #9
 8007ba6:	7042      	strb	r2, [r0, #1]
 8007ba8:	dd2a      	ble.n	8007c00 <__exponent+0x70>
 8007baa:	f10d 0407 	add.w	r4, sp, #7
 8007bae:	46a4      	mov	ip, r4
 8007bb0:	270a      	movs	r7, #10
 8007bb2:	46a6      	mov	lr, r4
 8007bb4:	460a      	mov	r2, r1
 8007bb6:	fb91 f6f7 	sdiv	r6, r1, r7
 8007bba:	fb07 1516 	mls	r5, r7, r6, r1
 8007bbe:	3530      	adds	r5, #48	; 0x30
 8007bc0:	2a63      	cmp	r2, #99	; 0x63
 8007bc2:	f104 34ff 	add.w	r4, r4, #4294967295
 8007bc6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007bca:	4631      	mov	r1, r6
 8007bcc:	dcf1      	bgt.n	8007bb2 <__exponent+0x22>
 8007bce:	3130      	adds	r1, #48	; 0x30
 8007bd0:	f1ae 0502 	sub.w	r5, lr, #2
 8007bd4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007bd8:	1c44      	adds	r4, r0, #1
 8007bda:	4629      	mov	r1, r5
 8007bdc:	4561      	cmp	r1, ip
 8007bde:	d30a      	bcc.n	8007bf6 <__exponent+0x66>
 8007be0:	f10d 0209 	add.w	r2, sp, #9
 8007be4:	eba2 020e 	sub.w	r2, r2, lr
 8007be8:	4565      	cmp	r5, ip
 8007bea:	bf88      	it	hi
 8007bec:	2200      	movhi	r2, #0
 8007bee:	4413      	add	r3, r2
 8007bf0:	1a18      	subs	r0, r3, r0
 8007bf2:	b003      	add	sp, #12
 8007bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bfa:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007bfe:	e7ed      	b.n	8007bdc <__exponent+0x4c>
 8007c00:	2330      	movs	r3, #48	; 0x30
 8007c02:	3130      	adds	r1, #48	; 0x30
 8007c04:	7083      	strb	r3, [r0, #2]
 8007c06:	70c1      	strb	r1, [r0, #3]
 8007c08:	1d03      	adds	r3, r0, #4
 8007c0a:	e7f1      	b.n	8007bf0 <__exponent+0x60>

08007c0c <_printf_float>:
 8007c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c10:	ed2d 8b02 	vpush	{d8}
 8007c14:	b08d      	sub	sp, #52	; 0x34
 8007c16:	460c      	mov	r4, r1
 8007c18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007c1c:	4616      	mov	r6, r2
 8007c1e:	461f      	mov	r7, r3
 8007c20:	4605      	mov	r5, r0
 8007c22:	f002 ff43 	bl	800aaac <_localeconv_r>
 8007c26:	f8d0 a000 	ldr.w	sl, [r0]
 8007c2a:	4650      	mov	r0, sl
 8007c2c:	f7f8 fad0 	bl	80001d0 <strlen>
 8007c30:	2300      	movs	r3, #0
 8007c32:	930a      	str	r3, [sp, #40]	; 0x28
 8007c34:	6823      	ldr	r3, [r4, #0]
 8007c36:	9305      	str	r3, [sp, #20]
 8007c38:	f8d8 3000 	ldr.w	r3, [r8]
 8007c3c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007c40:	3307      	adds	r3, #7
 8007c42:	f023 0307 	bic.w	r3, r3, #7
 8007c46:	f103 0208 	add.w	r2, r3, #8
 8007c4a:	f8c8 2000 	str.w	r2, [r8]
 8007c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c52:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007c56:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007c5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c5e:	9307      	str	r3, [sp, #28]
 8007c60:	f8cd 8018 	str.w	r8, [sp, #24]
 8007c64:	ee08 0a10 	vmov	s16, r0
 8007c68:	4b9f      	ldr	r3, [pc, #636]	; (8007ee8 <_printf_float+0x2dc>)
 8007c6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c72:	f7f8 ff5b 	bl	8000b2c <__aeabi_dcmpun>
 8007c76:	bb88      	cbnz	r0, 8007cdc <_printf_float+0xd0>
 8007c78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c7c:	4b9a      	ldr	r3, [pc, #616]	; (8007ee8 <_printf_float+0x2dc>)
 8007c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c82:	f7f8 ff35 	bl	8000af0 <__aeabi_dcmple>
 8007c86:	bb48      	cbnz	r0, 8007cdc <_printf_float+0xd0>
 8007c88:	2200      	movs	r2, #0
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	4640      	mov	r0, r8
 8007c8e:	4649      	mov	r1, r9
 8007c90:	f7f8 ff24 	bl	8000adc <__aeabi_dcmplt>
 8007c94:	b110      	cbz	r0, 8007c9c <_printf_float+0x90>
 8007c96:	232d      	movs	r3, #45	; 0x2d
 8007c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c9c:	4b93      	ldr	r3, [pc, #588]	; (8007eec <_printf_float+0x2e0>)
 8007c9e:	4894      	ldr	r0, [pc, #592]	; (8007ef0 <_printf_float+0x2e4>)
 8007ca0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007ca4:	bf94      	ite	ls
 8007ca6:	4698      	movls	r8, r3
 8007ca8:	4680      	movhi	r8, r0
 8007caa:	2303      	movs	r3, #3
 8007cac:	6123      	str	r3, [r4, #16]
 8007cae:	9b05      	ldr	r3, [sp, #20]
 8007cb0:	f023 0204 	bic.w	r2, r3, #4
 8007cb4:	6022      	str	r2, [r4, #0]
 8007cb6:	f04f 0900 	mov.w	r9, #0
 8007cba:	9700      	str	r7, [sp, #0]
 8007cbc:	4633      	mov	r3, r6
 8007cbe:	aa0b      	add	r2, sp, #44	; 0x2c
 8007cc0:	4621      	mov	r1, r4
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	f000 f9d8 	bl	8008078 <_printf_common>
 8007cc8:	3001      	adds	r0, #1
 8007cca:	f040 8090 	bne.w	8007dee <_printf_float+0x1e2>
 8007cce:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd2:	b00d      	add	sp, #52	; 0x34
 8007cd4:	ecbd 8b02 	vpop	{d8}
 8007cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cdc:	4642      	mov	r2, r8
 8007cde:	464b      	mov	r3, r9
 8007ce0:	4640      	mov	r0, r8
 8007ce2:	4649      	mov	r1, r9
 8007ce4:	f7f8 ff22 	bl	8000b2c <__aeabi_dcmpun>
 8007ce8:	b140      	cbz	r0, 8007cfc <_printf_float+0xf0>
 8007cea:	464b      	mov	r3, r9
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	bfbc      	itt	lt
 8007cf0:	232d      	movlt	r3, #45	; 0x2d
 8007cf2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007cf6:	487f      	ldr	r0, [pc, #508]	; (8007ef4 <_printf_float+0x2e8>)
 8007cf8:	4b7f      	ldr	r3, [pc, #508]	; (8007ef8 <_printf_float+0x2ec>)
 8007cfa:	e7d1      	b.n	8007ca0 <_printf_float+0x94>
 8007cfc:	6863      	ldr	r3, [r4, #4]
 8007cfe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007d02:	9206      	str	r2, [sp, #24]
 8007d04:	1c5a      	adds	r2, r3, #1
 8007d06:	d13f      	bne.n	8007d88 <_printf_float+0x17c>
 8007d08:	2306      	movs	r3, #6
 8007d0a:	6063      	str	r3, [r4, #4]
 8007d0c:	9b05      	ldr	r3, [sp, #20]
 8007d0e:	6861      	ldr	r1, [r4, #4]
 8007d10:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007d14:	2300      	movs	r3, #0
 8007d16:	9303      	str	r3, [sp, #12]
 8007d18:	ab0a      	add	r3, sp, #40	; 0x28
 8007d1a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007d1e:	ab09      	add	r3, sp, #36	; 0x24
 8007d20:	ec49 8b10 	vmov	d0, r8, r9
 8007d24:	9300      	str	r3, [sp, #0]
 8007d26:	6022      	str	r2, [r4, #0]
 8007d28:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	f7ff fecd 	bl	8007acc <__cvt>
 8007d32:	9b06      	ldr	r3, [sp, #24]
 8007d34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d36:	2b47      	cmp	r3, #71	; 0x47
 8007d38:	4680      	mov	r8, r0
 8007d3a:	d108      	bne.n	8007d4e <_printf_float+0x142>
 8007d3c:	1cc8      	adds	r0, r1, #3
 8007d3e:	db02      	blt.n	8007d46 <_printf_float+0x13a>
 8007d40:	6863      	ldr	r3, [r4, #4]
 8007d42:	4299      	cmp	r1, r3
 8007d44:	dd41      	ble.n	8007dca <_printf_float+0x1be>
 8007d46:	f1ab 0b02 	sub.w	fp, fp, #2
 8007d4a:	fa5f fb8b 	uxtb.w	fp, fp
 8007d4e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d52:	d820      	bhi.n	8007d96 <_printf_float+0x18a>
 8007d54:	3901      	subs	r1, #1
 8007d56:	465a      	mov	r2, fp
 8007d58:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007d5c:	9109      	str	r1, [sp, #36]	; 0x24
 8007d5e:	f7ff ff17 	bl	8007b90 <__exponent>
 8007d62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d64:	1813      	adds	r3, r2, r0
 8007d66:	2a01      	cmp	r2, #1
 8007d68:	4681      	mov	r9, r0
 8007d6a:	6123      	str	r3, [r4, #16]
 8007d6c:	dc02      	bgt.n	8007d74 <_printf_float+0x168>
 8007d6e:	6822      	ldr	r2, [r4, #0]
 8007d70:	07d2      	lsls	r2, r2, #31
 8007d72:	d501      	bpl.n	8007d78 <_printf_float+0x16c>
 8007d74:	3301      	adds	r3, #1
 8007d76:	6123      	str	r3, [r4, #16]
 8007d78:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d09c      	beq.n	8007cba <_printf_float+0xae>
 8007d80:	232d      	movs	r3, #45	; 0x2d
 8007d82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d86:	e798      	b.n	8007cba <_printf_float+0xae>
 8007d88:	9a06      	ldr	r2, [sp, #24]
 8007d8a:	2a47      	cmp	r2, #71	; 0x47
 8007d8c:	d1be      	bne.n	8007d0c <_printf_float+0x100>
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1bc      	bne.n	8007d0c <_printf_float+0x100>
 8007d92:	2301      	movs	r3, #1
 8007d94:	e7b9      	b.n	8007d0a <_printf_float+0xfe>
 8007d96:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007d9a:	d118      	bne.n	8007dce <_printf_float+0x1c2>
 8007d9c:	2900      	cmp	r1, #0
 8007d9e:	6863      	ldr	r3, [r4, #4]
 8007da0:	dd0b      	ble.n	8007dba <_printf_float+0x1ae>
 8007da2:	6121      	str	r1, [r4, #16]
 8007da4:	b913      	cbnz	r3, 8007dac <_printf_float+0x1a0>
 8007da6:	6822      	ldr	r2, [r4, #0]
 8007da8:	07d0      	lsls	r0, r2, #31
 8007daa:	d502      	bpl.n	8007db2 <_printf_float+0x1a6>
 8007dac:	3301      	adds	r3, #1
 8007dae:	440b      	add	r3, r1
 8007db0:	6123      	str	r3, [r4, #16]
 8007db2:	65a1      	str	r1, [r4, #88]	; 0x58
 8007db4:	f04f 0900 	mov.w	r9, #0
 8007db8:	e7de      	b.n	8007d78 <_printf_float+0x16c>
 8007dba:	b913      	cbnz	r3, 8007dc2 <_printf_float+0x1b6>
 8007dbc:	6822      	ldr	r2, [r4, #0]
 8007dbe:	07d2      	lsls	r2, r2, #31
 8007dc0:	d501      	bpl.n	8007dc6 <_printf_float+0x1ba>
 8007dc2:	3302      	adds	r3, #2
 8007dc4:	e7f4      	b.n	8007db0 <_printf_float+0x1a4>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e7f2      	b.n	8007db0 <_printf_float+0x1a4>
 8007dca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dd0:	4299      	cmp	r1, r3
 8007dd2:	db05      	blt.n	8007de0 <_printf_float+0x1d4>
 8007dd4:	6823      	ldr	r3, [r4, #0]
 8007dd6:	6121      	str	r1, [r4, #16]
 8007dd8:	07d8      	lsls	r0, r3, #31
 8007dda:	d5ea      	bpl.n	8007db2 <_printf_float+0x1a6>
 8007ddc:	1c4b      	adds	r3, r1, #1
 8007dde:	e7e7      	b.n	8007db0 <_printf_float+0x1a4>
 8007de0:	2900      	cmp	r1, #0
 8007de2:	bfd4      	ite	le
 8007de4:	f1c1 0202 	rsble	r2, r1, #2
 8007de8:	2201      	movgt	r2, #1
 8007dea:	4413      	add	r3, r2
 8007dec:	e7e0      	b.n	8007db0 <_printf_float+0x1a4>
 8007dee:	6823      	ldr	r3, [r4, #0]
 8007df0:	055a      	lsls	r2, r3, #21
 8007df2:	d407      	bmi.n	8007e04 <_printf_float+0x1f8>
 8007df4:	6923      	ldr	r3, [r4, #16]
 8007df6:	4642      	mov	r2, r8
 8007df8:	4631      	mov	r1, r6
 8007dfa:	4628      	mov	r0, r5
 8007dfc:	47b8      	blx	r7
 8007dfe:	3001      	adds	r0, #1
 8007e00:	d12c      	bne.n	8007e5c <_printf_float+0x250>
 8007e02:	e764      	b.n	8007cce <_printf_float+0xc2>
 8007e04:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e08:	f240 80e0 	bls.w	8007fcc <_printf_float+0x3c0>
 8007e0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e10:	2200      	movs	r2, #0
 8007e12:	2300      	movs	r3, #0
 8007e14:	f7f8 fe58 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	d034      	beq.n	8007e86 <_printf_float+0x27a>
 8007e1c:	4a37      	ldr	r2, [pc, #220]	; (8007efc <_printf_float+0x2f0>)
 8007e1e:	2301      	movs	r3, #1
 8007e20:	4631      	mov	r1, r6
 8007e22:	4628      	mov	r0, r5
 8007e24:	47b8      	blx	r7
 8007e26:	3001      	adds	r0, #1
 8007e28:	f43f af51 	beq.w	8007cce <_printf_float+0xc2>
 8007e2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e30:	429a      	cmp	r2, r3
 8007e32:	db02      	blt.n	8007e3a <_printf_float+0x22e>
 8007e34:	6823      	ldr	r3, [r4, #0]
 8007e36:	07d8      	lsls	r0, r3, #31
 8007e38:	d510      	bpl.n	8007e5c <_printf_float+0x250>
 8007e3a:	ee18 3a10 	vmov	r3, s16
 8007e3e:	4652      	mov	r2, sl
 8007e40:	4631      	mov	r1, r6
 8007e42:	4628      	mov	r0, r5
 8007e44:	47b8      	blx	r7
 8007e46:	3001      	adds	r0, #1
 8007e48:	f43f af41 	beq.w	8007cce <_printf_float+0xc2>
 8007e4c:	f04f 0800 	mov.w	r8, #0
 8007e50:	f104 091a 	add.w	r9, r4, #26
 8007e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e56:	3b01      	subs	r3, #1
 8007e58:	4543      	cmp	r3, r8
 8007e5a:	dc09      	bgt.n	8007e70 <_printf_float+0x264>
 8007e5c:	6823      	ldr	r3, [r4, #0]
 8007e5e:	079b      	lsls	r3, r3, #30
 8007e60:	f100 8105 	bmi.w	800806e <_printf_float+0x462>
 8007e64:	68e0      	ldr	r0, [r4, #12]
 8007e66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e68:	4298      	cmp	r0, r3
 8007e6a:	bfb8      	it	lt
 8007e6c:	4618      	movlt	r0, r3
 8007e6e:	e730      	b.n	8007cd2 <_printf_float+0xc6>
 8007e70:	2301      	movs	r3, #1
 8007e72:	464a      	mov	r2, r9
 8007e74:	4631      	mov	r1, r6
 8007e76:	4628      	mov	r0, r5
 8007e78:	47b8      	blx	r7
 8007e7a:	3001      	adds	r0, #1
 8007e7c:	f43f af27 	beq.w	8007cce <_printf_float+0xc2>
 8007e80:	f108 0801 	add.w	r8, r8, #1
 8007e84:	e7e6      	b.n	8007e54 <_printf_float+0x248>
 8007e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	dc39      	bgt.n	8007f00 <_printf_float+0x2f4>
 8007e8c:	4a1b      	ldr	r2, [pc, #108]	; (8007efc <_printf_float+0x2f0>)
 8007e8e:	2301      	movs	r3, #1
 8007e90:	4631      	mov	r1, r6
 8007e92:	4628      	mov	r0, r5
 8007e94:	47b8      	blx	r7
 8007e96:	3001      	adds	r0, #1
 8007e98:	f43f af19 	beq.w	8007cce <_printf_float+0xc2>
 8007e9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	d102      	bne.n	8007eaa <_printf_float+0x29e>
 8007ea4:	6823      	ldr	r3, [r4, #0]
 8007ea6:	07d9      	lsls	r1, r3, #31
 8007ea8:	d5d8      	bpl.n	8007e5c <_printf_float+0x250>
 8007eaa:	ee18 3a10 	vmov	r3, s16
 8007eae:	4652      	mov	r2, sl
 8007eb0:	4631      	mov	r1, r6
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	47b8      	blx	r7
 8007eb6:	3001      	adds	r0, #1
 8007eb8:	f43f af09 	beq.w	8007cce <_printf_float+0xc2>
 8007ebc:	f04f 0900 	mov.w	r9, #0
 8007ec0:	f104 0a1a 	add.w	sl, r4, #26
 8007ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ec6:	425b      	negs	r3, r3
 8007ec8:	454b      	cmp	r3, r9
 8007eca:	dc01      	bgt.n	8007ed0 <_printf_float+0x2c4>
 8007ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ece:	e792      	b.n	8007df6 <_printf_float+0x1ea>
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	4652      	mov	r2, sl
 8007ed4:	4631      	mov	r1, r6
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	47b8      	blx	r7
 8007eda:	3001      	adds	r0, #1
 8007edc:	f43f aef7 	beq.w	8007cce <_printf_float+0xc2>
 8007ee0:	f109 0901 	add.w	r9, r9, #1
 8007ee4:	e7ee      	b.n	8007ec4 <_printf_float+0x2b8>
 8007ee6:	bf00      	nop
 8007ee8:	7fefffff 	.word	0x7fefffff
 8007eec:	0800cd04 	.word	0x0800cd04
 8007ef0:	0800cd08 	.word	0x0800cd08
 8007ef4:	0800cd10 	.word	0x0800cd10
 8007ef8:	0800cd0c 	.word	0x0800cd0c
 8007efc:	0800d109 	.word	0x0800d109
 8007f00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f04:	429a      	cmp	r2, r3
 8007f06:	bfa8      	it	ge
 8007f08:	461a      	movge	r2, r3
 8007f0a:	2a00      	cmp	r2, #0
 8007f0c:	4691      	mov	r9, r2
 8007f0e:	dc37      	bgt.n	8007f80 <_printf_float+0x374>
 8007f10:	f04f 0b00 	mov.w	fp, #0
 8007f14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f18:	f104 021a 	add.w	r2, r4, #26
 8007f1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f1e:	9305      	str	r3, [sp, #20]
 8007f20:	eba3 0309 	sub.w	r3, r3, r9
 8007f24:	455b      	cmp	r3, fp
 8007f26:	dc33      	bgt.n	8007f90 <_printf_float+0x384>
 8007f28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	db3b      	blt.n	8007fa8 <_printf_float+0x39c>
 8007f30:	6823      	ldr	r3, [r4, #0]
 8007f32:	07da      	lsls	r2, r3, #31
 8007f34:	d438      	bmi.n	8007fa8 <_printf_float+0x39c>
 8007f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f38:	9a05      	ldr	r2, [sp, #20]
 8007f3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f3c:	1a9a      	subs	r2, r3, r2
 8007f3e:	eba3 0901 	sub.w	r9, r3, r1
 8007f42:	4591      	cmp	r9, r2
 8007f44:	bfa8      	it	ge
 8007f46:	4691      	movge	r9, r2
 8007f48:	f1b9 0f00 	cmp.w	r9, #0
 8007f4c:	dc35      	bgt.n	8007fba <_printf_float+0x3ae>
 8007f4e:	f04f 0800 	mov.w	r8, #0
 8007f52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f56:	f104 0a1a 	add.w	sl, r4, #26
 8007f5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f5e:	1a9b      	subs	r3, r3, r2
 8007f60:	eba3 0309 	sub.w	r3, r3, r9
 8007f64:	4543      	cmp	r3, r8
 8007f66:	f77f af79 	ble.w	8007e5c <_printf_float+0x250>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	4652      	mov	r2, sl
 8007f6e:	4631      	mov	r1, r6
 8007f70:	4628      	mov	r0, r5
 8007f72:	47b8      	blx	r7
 8007f74:	3001      	adds	r0, #1
 8007f76:	f43f aeaa 	beq.w	8007cce <_printf_float+0xc2>
 8007f7a:	f108 0801 	add.w	r8, r8, #1
 8007f7e:	e7ec      	b.n	8007f5a <_printf_float+0x34e>
 8007f80:	4613      	mov	r3, r2
 8007f82:	4631      	mov	r1, r6
 8007f84:	4642      	mov	r2, r8
 8007f86:	4628      	mov	r0, r5
 8007f88:	47b8      	blx	r7
 8007f8a:	3001      	adds	r0, #1
 8007f8c:	d1c0      	bne.n	8007f10 <_printf_float+0x304>
 8007f8e:	e69e      	b.n	8007cce <_printf_float+0xc2>
 8007f90:	2301      	movs	r3, #1
 8007f92:	4631      	mov	r1, r6
 8007f94:	4628      	mov	r0, r5
 8007f96:	9205      	str	r2, [sp, #20]
 8007f98:	47b8      	blx	r7
 8007f9a:	3001      	adds	r0, #1
 8007f9c:	f43f ae97 	beq.w	8007cce <_printf_float+0xc2>
 8007fa0:	9a05      	ldr	r2, [sp, #20]
 8007fa2:	f10b 0b01 	add.w	fp, fp, #1
 8007fa6:	e7b9      	b.n	8007f1c <_printf_float+0x310>
 8007fa8:	ee18 3a10 	vmov	r3, s16
 8007fac:	4652      	mov	r2, sl
 8007fae:	4631      	mov	r1, r6
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	47b8      	blx	r7
 8007fb4:	3001      	adds	r0, #1
 8007fb6:	d1be      	bne.n	8007f36 <_printf_float+0x32a>
 8007fb8:	e689      	b.n	8007cce <_printf_float+0xc2>
 8007fba:	9a05      	ldr	r2, [sp, #20]
 8007fbc:	464b      	mov	r3, r9
 8007fbe:	4442      	add	r2, r8
 8007fc0:	4631      	mov	r1, r6
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	47b8      	blx	r7
 8007fc6:	3001      	adds	r0, #1
 8007fc8:	d1c1      	bne.n	8007f4e <_printf_float+0x342>
 8007fca:	e680      	b.n	8007cce <_printf_float+0xc2>
 8007fcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fce:	2a01      	cmp	r2, #1
 8007fd0:	dc01      	bgt.n	8007fd6 <_printf_float+0x3ca>
 8007fd2:	07db      	lsls	r3, r3, #31
 8007fd4:	d538      	bpl.n	8008048 <_printf_float+0x43c>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	4642      	mov	r2, r8
 8007fda:	4631      	mov	r1, r6
 8007fdc:	4628      	mov	r0, r5
 8007fde:	47b8      	blx	r7
 8007fe0:	3001      	adds	r0, #1
 8007fe2:	f43f ae74 	beq.w	8007cce <_printf_float+0xc2>
 8007fe6:	ee18 3a10 	vmov	r3, s16
 8007fea:	4652      	mov	r2, sl
 8007fec:	4631      	mov	r1, r6
 8007fee:	4628      	mov	r0, r5
 8007ff0:	47b8      	blx	r7
 8007ff2:	3001      	adds	r0, #1
 8007ff4:	f43f ae6b 	beq.w	8007cce <_printf_float+0xc2>
 8007ff8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	2300      	movs	r3, #0
 8008000:	f7f8 fd62 	bl	8000ac8 <__aeabi_dcmpeq>
 8008004:	b9d8      	cbnz	r0, 800803e <_printf_float+0x432>
 8008006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008008:	f108 0201 	add.w	r2, r8, #1
 800800c:	3b01      	subs	r3, #1
 800800e:	4631      	mov	r1, r6
 8008010:	4628      	mov	r0, r5
 8008012:	47b8      	blx	r7
 8008014:	3001      	adds	r0, #1
 8008016:	d10e      	bne.n	8008036 <_printf_float+0x42a>
 8008018:	e659      	b.n	8007cce <_printf_float+0xc2>
 800801a:	2301      	movs	r3, #1
 800801c:	4652      	mov	r2, sl
 800801e:	4631      	mov	r1, r6
 8008020:	4628      	mov	r0, r5
 8008022:	47b8      	blx	r7
 8008024:	3001      	adds	r0, #1
 8008026:	f43f ae52 	beq.w	8007cce <_printf_float+0xc2>
 800802a:	f108 0801 	add.w	r8, r8, #1
 800802e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008030:	3b01      	subs	r3, #1
 8008032:	4543      	cmp	r3, r8
 8008034:	dcf1      	bgt.n	800801a <_printf_float+0x40e>
 8008036:	464b      	mov	r3, r9
 8008038:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800803c:	e6dc      	b.n	8007df8 <_printf_float+0x1ec>
 800803e:	f04f 0800 	mov.w	r8, #0
 8008042:	f104 0a1a 	add.w	sl, r4, #26
 8008046:	e7f2      	b.n	800802e <_printf_float+0x422>
 8008048:	2301      	movs	r3, #1
 800804a:	4642      	mov	r2, r8
 800804c:	e7df      	b.n	800800e <_printf_float+0x402>
 800804e:	2301      	movs	r3, #1
 8008050:	464a      	mov	r2, r9
 8008052:	4631      	mov	r1, r6
 8008054:	4628      	mov	r0, r5
 8008056:	47b8      	blx	r7
 8008058:	3001      	adds	r0, #1
 800805a:	f43f ae38 	beq.w	8007cce <_printf_float+0xc2>
 800805e:	f108 0801 	add.w	r8, r8, #1
 8008062:	68e3      	ldr	r3, [r4, #12]
 8008064:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008066:	1a5b      	subs	r3, r3, r1
 8008068:	4543      	cmp	r3, r8
 800806a:	dcf0      	bgt.n	800804e <_printf_float+0x442>
 800806c:	e6fa      	b.n	8007e64 <_printf_float+0x258>
 800806e:	f04f 0800 	mov.w	r8, #0
 8008072:	f104 0919 	add.w	r9, r4, #25
 8008076:	e7f4      	b.n	8008062 <_printf_float+0x456>

08008078 <_printf_common>:
 8008078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800807c:	4616      	mov	r6, r2
 800807e:	4699      	mov	r9, r3
 8008080:	688a      	ldr	r2, [r1, #8]
 8008082:	690b      	ldr	r3, [r1, #16]
 8008084:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008088:	4293      	cmp	r3, r2
 800808a:	bfb8      	it	lt
 800808c:	4613      	movlt	r3, r2
 800808e:	6033      	str	r3, [r6, #0]
 8008090:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008094:	4607      	mov	r7, r0
 8008096:	460c      	mov	r4, r1
 8008098:	b10a      	cbz	r2, 800809e <_printf_common+0x26>
 800809a:	3301      	adds	r3, #1
 800809c:	6033      	str	r3, [r6, #0]
 800809e:	6823      	ldr	r3, [r4, #0]
 80080a0:	0699      	lsls	r1, r3, #26
 80080a2:	bf42      	ittt	mi
 80080a4:	6833      	ldrmi	r3, [r6, #0]
 80080a6:	3302      	addmi	r3, #2
 80080a8:	6033      	strmi	r3, [r6, #0]
 80080aa:	6825      	ldr	r5, [r4, #0]
 80080ac:	f015 0506 	ands.w	r5, r5, #6
 80080b0:	d106      	bne.n	80080c0 <_printf_common+0x48>
 80080b2:	f104 0a19 	add.w	sl, r4, #25
 80080b6:	68e3      	ldr	r3, [r4, #12]
 80080b8:	6832      	ldr	r2, [r6, #0]
 80080ba:	1a9b      	subs	r3, r3, r2
 80080bc:	42ab      	cmp	r3, r5
 80080be:	dc26      	bgt.n	800810e <_printf_common+0x96>
 80080c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80080c4:	1e13      	subs	r3, r2, #0
 80080c6:	6822      	ldr	r2, [r4, #0]
 80080c8:	bf18      	it	ne
 80080ca:	2301      	movne	r3, #1
 80080cc:	0692      	lsls	r2, r2, #26
 80080ce:	d42b      	bmi.n	8008128 <_printf_common+0xb0>
 80080d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080d4:	4649      	mov	r1, r9
 80080d6:	4638      	mov	r0, r7
 80080d8:	47c0      	blx	r8
 80080da:	3001      	adds	r0, #1
 80080dc:	d01e      	beq.n	800811c <_printf_common+0xa4>
 80080de:	6823      	ldr	r3, [r4, #0]
 80080e0:	68e5      	ldr	r5, [r4, #12]
 80080e2:	6832      	ldr	r2, [r6, #0]
 80080e4:	f003 0306 	and.w	r3, r3, #6
 80080e8:	2b04      	cmp	r3, #4
 80080ea:	bf08      	it	eq
 80080ec:	1aad      	subeq	r5, r5, r2
 80080ee:	68a3      	ldr	r3, [r4, #8]
 80080f0:	6922      	ldr	r2, [r4, #16]
 80080f2:	bf0c      	ite	eq
 80080f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080f8:	2500      	movne	r5, #0
 80080fa:	4293      	cmp	r3, r2
 80080fc:	bfc4      	itt	gt
 80080fe:	1a9b      	subgt	r3, r3, r2
 8008100:	18ed      	addgt	r5, r5, r3
 8008102:	2600      	movs	r6, #0
 8008104:	341a      	adds	r4, #26
 8008106:	42b5      	cmp	r5, r6
 8008108:	d11a      	bne.n	8008140 <_printf_common+0xc8>
 800810a:	2000      	movs	r0, #0
 800810c:	e008      	b.n	8008120 <_printf_common+0xa8>
 800810e:	2301      	movs	r3, #1
 8008110:	4652      	mov	r2, sl
 8008112:	4649      	mov	r1, r9
 8008114:	4638      	mov	r0, r7
 8008116:	47c0      	blx	r8
 8008118:	3001      	adds	r0, #1
 800811a:	d103      	bne.n	8008124 <_printf_common+0xac>
 800811c:	f04f 30ff 	mov.w	r0, #4294967295
 8008120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008124:	3501      	adds	r5, #1
 8008126:	e7c6      	b.n	80080b6 <_printf_common+0x3e>
 8008128:	18e1      	adds	r1, r4, r3
 800812a:	1c5a      	adds	r2, r3, #1
 800812c:	2030      	movs	r0, #48	; 0x30
 800812e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008132:	4422      	add	r2, r4
 8008134:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008138:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800813c:	3302      	adds	r3, #2
 800813e:	e7c7      	b.n	80080d0 <_printf_common+0x58>
 8008140:	2301      	movs	r3, #1
 8008142:	4622      	mov	r2, r4
 8008144:	4649      	mov	r1, r9
 8008146:	4638      	mov	r0, r7
 8008148:	47c0      	blx	r8
 800814a:	3001      	adds	r0, #1
 800814c:	d0e6      	beq.n	800811c <_printf_common+0xa4>
 800814e:	3601      	adds	r6, #1
 8008150:	e7d9      	b.n	8008106 <_printf_common+0x8e>
	...

08008154 <_printf_i>:
 8008154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008158:	7e0f      	ldrb	r7, [r1, #24]
 800815a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800815c:	2f78      	cmp	r7, #120	; 0x78
 800815e:	4691      	mov	r9, r2
 8008160:	4680      	mov	r8, r0
 8008162:	460c      	mov	r4, r1
 8008164:	469a      	mov	sl, r3
 8008166:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800816a:	d807      	bhi.n	800817c <_printf_i+0x28>
 800816c:	2f62      	cmp	r7, #98	; 0x62
 800816e:	d80a      	bhi.n	8008186 <_printf_i+0x32>
 8008170:	2f00      	cmp	r7, #0
 8008172:	f000 80d8 	beq.w	8008326 <_printf_i+0x1d2>
 8008176:	2f58      	cmp	r7, #88	; 0x58
 8008178:	f000 80a3 	beq.w	80082c2 <_printf_i+0x16e>
 800817c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008180:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008184:	e03a      	b.n	80081fc <_printf_i+0xa8>
 8008186:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800818a:	2b15      	cmp	r3, #21
 800818c:	d8f6      	bhi.n	800817c <_printf_i+0x28>
 800818e:	a101      	add	r1, pc, #4	; (adr r1, 8008194 <_printf_i+0x40>)
 8008190:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008194:	080081ed 	.word	0x080081ed
 8008198:	08008201 	.word	0x08008201
 800819c:	0800817d 	.word	0x0800817d
 80081a0:	0800817d 	.word	0x0800817d
 80081a4:	0800817d 	.word	0x0800817d
 80081a8:	0800817d 	.word	0x0800817d
 80081ac:	08008201 	.word	0x08008201
 80081b0:	0800817d 	.word	0x0800817d
 80081b4:	0800817d 	.word	0x0800817d
 80081b8:	0800817d 	.word	0x0800817d
 80081bc:	0800817d 	.word	0x0800817d
 80081c0:	0800830d 	.word	0x0800830d
 80081c4:	08008231 	.word	0x08008231
 80081c8:	080082ef 	.word	0x080082ef
 80081cc:	0800817d 	.word	0x0800817d
 80081d0:	0800817d 	.word	0x0800817d
 80081d4:	0800832f 	.word	0x0800832f
 80081d8:	0800817d 	.word	0x0800817d
 80081dc:	08008231 	.word	0x08008231
 80081e0:	0800817d 	.word	0x0800817d
 80081e4:	0800817d 	.word	0x0800817d
 80081e8:	080082f7 	.word	0x080082f7
 80081ec:	682b      	ldr	r3, [r5, #0]
 80081ee:	1d1a      	adds	r2, r3, #4
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	602a      	str	r2, [r5, #0]
 80081f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081fc:	2301      	movs	r3, #1
 80081fe:	e0a3      	b.n	8008348 <_printf_i+0x1f4>
 8008200:	6820      	ldr	r0, [r4, #0]
 8008202:	6829      	ldr	r1, [r5, #0]
 8008204:	0606      	lsls	r6, r0, #24
 8008206:	f101 0304 	add.w	r3, r1, #4
 800820a:	d50a      	bpl.n	8008222 <_printf_i+0xce>
 800820c:	680e      	ldr	r6, [r1, #0]
 800820e:	602b      	str	r3, [r5, #0]
 8008210:	2e00      	cmp	r6, #0
 8008212:	da03      	bge.n	800821c <_printf_i+0xc8>
 8008214:	232d      	movs	r3, #45	; 0x2d
 8008216:	4276      	negs	r6, r6
 8008218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800821c:	485e      	ldr	r0, [pc, #376]	; (8008398 <_printf_i+0x244>)
 800821e:	230a      	movs	r3, #10
 8008220:	e019      	b.n	8008256 <_printf_i+0x102>
 8008222:	680e      	ldr	r6, [r1, #0]
 8008224:	602b      	str	r3, [r5, #0]
 8008226:	f010 0f40 	tst.w	r0, #64	; 0x40
 800822a:	bf18      	it	ne
 800822c:	b236      	sxthne	r6, r6
 800822e:	e7ef      	b.n	8008210 <_printf_i+0xbc>
 8008230:	682b      	ldr	r3, [r5, #0]
 8008232:	6820      	ldr	r0, [r4, #0]
 8008234:	1d19      	adds	r1, r3, #4
 8008236:	6029      	str	r1, [r5, #0]
 8008238:	0601      	lsls	r1, r0, #24
 800823a:	d501      	bpl.n	8008240 <_printf_i+0xec>
 800823c:	681e      	ldr	r6, [r3, #0]
 800823e:	e002      	b.n	8008246 <_printf_i+0xf2>
 8008240:	0646      	lsls	r6, r0, #25
 8008242:	d5fb      	bpl.n	800823c <_printf_i+0xe8>
 8008244:	881e      	ldrh	r6, [r3, #0]
 8008246:	4854      	ldr	r0, [pc, #336]	; (8008398 <_printf_i+0x244>)
 8008248:	2f6f      	cmp	r7, #111	; 0x6f
 800824a:	bf0c      	ite	eq
 800824c:	2308      	moveq	r3, #8
 800824e:	230a      	movne	r3, #10
 8008250:	2100      	movs	r1, #0
 8008252:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008256:	6865      	ldr	r5, [r4, #4]
 8008258:	60a5      	str	r5, [r4, #8]
 800825a:	2d00      	cmp	r5, #0
 800825c:	bfa2      	ittt	ge
 800825e:	6821      	ldrge	r1, [r4, #0]
 8008260:	f021 0104 	bicge.w	r1, r1, #4
 8008264:	6021      	strge	r1, [r4, #0]
 8008266:	b90e      	cbnz	r6, 800826c <_printf_i+0x118>
 8008268:	2d00      	cmp	r5, #0
 800826a:	d04d      	beq.n	8008308 <_printf_i+0x1b4>
 800826c:	4615      	mov	r5, r2
 800826e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008272:	fb03 6711 	mls	r7, r3, r1, r6
 8008276:	5dc7      	ldrb	r7, [r0, r7]
 8008278:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800827c:	4637      	mov	r7, r6
 800827e:	42bb      	cmp	r3, r7
 8008280:	460e      	mov	r6, r1
 8008282:	d9f4      	bls.n	800826e <_printf_i+0x11a>
 8008284:	2b08      	cmp	r3, #8
 8008286:	d10b      	bne.n	80082a0 <_printf_i+0x14c>
 8008288:	6823      	ldr	r3, [r4, #0]
 800828a:	07de      	lsls	r6, r3, #31
 800828c:	d508      	bpl.n	80082a0 <_printf_i+0x14c>
 800828e:	6923      	ldr	r3, [r4, #16]
 8008290:	6861      	ldr	r1, [r4, #4]
 8008292:	4299      	cmp	r1, r3
 8008294:	bfde      	ittt	le
 8008296:	2330      	movle	r3, #48	; 0x30
 8008298:	f805 3c01 	strble.w	r3, [r5, #-1]
 800829c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80082a0:	1b52      	subs	r2, r2, r5
 80082a2:	6122      	str	r2, [r4, #16]
 80082a4:	f8cd a000 	str.w	sl, [sp]
 80082a8:	464b      	mov	r3, r9
 80082aa:	aa03      	add	r2, sp, #12
 80082ac:	4621      	mov	r1, r4
 80082ae:	4640      	mov	r0, r8
 80082b0:	f7ff fee2 	bl	8008078 <_printf_common>
 80082b4:	3001      	adds	r0, #1
 80082b6:	d14c      	bne.n	8008352 <_printf_i+0x1fe>
 80082b8:	f04f 30ff 	mov.w	r0, #4294967295
 80082bc:	b004      	add	sp, #16
 80082be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c2:	4835      	ldr	r0, [pc, #212]	; (8008398 <_printf_i+0x244>)
 80082c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80082c8:	6829      	ldr	r1, [r5, #0]
 80082ca:	6823      	ldr	r3, [r4, #0]
 80082cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80082d0:	6029      	str	r1, [r5, #0]
 80082d2:	061d      	lsls	r5, r3, #24
 80082d4:	d514      	bpl.n	8008300 <_printf_i+0x1ac>
 80082d6:	07df      	lsls	r7, r3, #31
 80082d8:	bf44      	itt	mi
 80082da:	f043 0320 	orrmi.w	r3, r3, #32
 80082de:	6023      	strmi	r3, [r4, #0]
 80082e0:	b91e      	cbnz	r6, 80082ea <_printf_i+0x196>
 80082e2:	6823      	ldr	r3, [r4, #0]
 80082e4:	f023 0320 	bic.w	r3, r3, #32
 80082e8:	6023      	str	r3, [r4, #0]
 80082ea:	2310      	movs	r3, #16
 80082ec:	e7b0      	b.n	8008250 <_printf_i+0xfc>
 80082ee:	6823      	ldr	r3, [r4, #0]
 80082f0:	f043 0320 	orr.w	r3, r3, #32
 80082f4:	6023      	str	r3, [r4, #0]
 80082f6:	2378      	movs	r3, #120	; 0x78
 80082f8:	4828      	ldr	r0, [pc, #160]	; (800839c <_printf_i+0x248>)
 80082fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082fe:	e7e3      	b.n	80082c8 <_printf_i+0x174>
 8008300:	0659      	lsls	r1, r3, #25
 8008302:	bf48      	it	mi
 8008304:	b2b6      	uxthmi	r6, r6
 8008306:	e7e6      	b.n	80082d6 <_printf_i+0x182>
 8008308:	4615      	mov	r5, r2
 800830a:	e7bb      	b.n	8008284 <_printf_i+0x130>
 800830c:	682b      	ldr	r3, [r5, #0]
 800830e:	6826      	ldr	r6, [r4, #0]
 8008310:	6961      	ldr	r1, [r4, #20]
 8008312:	1d18      	adds	r0, r3, #4
 8008314:	6028      	str	r0, [r5, #0]
 8008316:	0635      	lsls	r5, r6, #24
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	d501      	bpl.n	8008320 <_printf_i+0x1cc>
 800831c:	6019      	str	r1, [r3, #0]
 800831e:	e002      	b.n	8008326 <_printf_i+0x1d2>
 8008320:	0670      	lsls	r0, r6, #25
 8008322:	d5fb      	bpl.n	800831c <_printf_i+0x1c8>
 8008324:	8019      	strh	r1, [r3, #0]
 8008326:	2300      	movs	r3, #0
 8008328:	6123      	str	r3, [r4, #16]
 800832a:	4615      	mov	r5, r2
 800832c:	e7ba      	b.n	80082a4 <_printf_i+0x150>
 800832e:	682b      	ldr	r3, [r5, #0]
 8008330:	1d1a      	adds	r2, r3, #4
 8008332:	602a      	str	r2, [r5, #0]
 8008334:	681d      	ldr	r5, [r3, #0]
 8008336:	6862      	ldr	r2, [r4, #4]
 8008338:	2100      	movs	r1, #0
 800833a:	4628      	mov	r0, r5
 800833c:	f7f7 ff50 	bl	80001e0 <memchr>
 8008340:	b108      	cbz	r0, 8008346 <_printf_i+0x1f2>
 8008342:	1b40      	subs	r0, r0, r5
 8008344:	6060      	str	r0, [r4, #4]
 8008346:	6863      	ldr	r3, [r4, #4]
 8008348:	6123      	str	r3, [r4, #16]
 800834a:	2300      	movs	r3, #0
 800834c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008350:	e7a8      	b.n	80082a4 <_printf_i+0x150>
 8008352:	6923      	ldr	r3, [r4, #16]
 8008354:	462a      	mov	r2, r5
 8008356:	4649      	mov	r1, r9
 8008358:	4640      	mov	r0, r8
 800835a:	47d0      	blx	sl
 800835c:	3001      	adds	r0, #1
 800835e:	d0ab      	beq.n	80082b8 <_printf_i+0x164>
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	079b      	lsls	r3, r3, #30
 8008364:	d413      	bmi.n	800838e <_printf_i+0x23a>
 8008366:	68e0      	ldr	r0, [r4, #12]
 8008368:	9b03      	ldr	r3, [sp, #12]
 800836a:	4298      	cmp	r0, r3
 800836c:	bfb8      	it	lt
 800836e:	4618      	movlt	r0, r3
 8008370:	e7a4      	b.n	80082bc <_printf_i+0x168>
 8008372:	2301      	movs	r3, #1
 8008374:	4632      	mov	r2, r6
 8008376:	4649      	mov	r1, r9
 8008378:	4640      	mov	r0, r8
 800837a:	47d0      	blx	sl
 800837c:	3001      	adds	r0, #1
 800837e:	d09b      	beq.n	80082b8 <_printf_i+0x164>
 8008380:	3501      	adds	r5, #1
 8008382:	68e3      	ldr	r3, [r4, #12]
 8008384:	9903      	ldr	r1, [sp, #12]
 8008386:	1a5b      	subs	r3, r3, r1
 8008388:	42ab      	cmp	r3, r5
 800838a:	dcf2      	bgt.n	8008372 <_printf_i+0x21e>
 800838c:	e7eb      	b.n	8008366 <_printf_i+0x212>
 800838e:	2500      	movs	r5, #0
 8008390:	f104 0619 	add.w	r6, r4, #25
 8008394:	e7f5      	b.n	8008382 <_printf_i+0x22e>
 8008396:	bf00      	nop
 8008398:	0800cd14 	.word	0x0800cd14
 800839c:	0800cd25 	.word	0x0800cd25

080083a0 <_scanf_float>:
 80083a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a4:	b087      	sub	sp, #28
 80083a6:	4617      	mov	r7, r2
 80083a8:	9303      	str	r3, [sp, #12]
 80083aa:	688b      	ldr	r3, [r1, #8]
 80083ac:	1e5a      	subs	r2, r3, #1
 80083ae:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80083b2:	bf83      	ittte	hi
 80083b4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80083b8:	195b      	addhi	r3, r3, r5
 80083ba:	9302      	strhi	r3, [sp, #8]
 80083bc:	2300      	movls	r3, #0
 80083be:	bf86      	itte	hi
 80083c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80083c4:	608b      	strhi	r3, [r1, #8]
 80083c6:	9302      	strls	r3, [sp, #8]
 80083c8:	680b      	ldr	r3, [r1, #0]
 80083ca:	468b      	mov	fp, r1
 80083cc:	2500      	movs	r5, #0
 80083ce:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80083d2:	f84b 3b1c 	str.w	r3, [fp], #28
 80083d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80083da:	4680      	mov	r8, r0
 80083dc:	460c      	mov	r4, r1
 80083de:	465e      	mov	r6, fp
 80083e0:	46aa      	mov	sl, r5
 80083e2:	46a9      	mov	r9, r5
 80083e4:	9501      	str	r5, [sp, #4]
 80083e6:	68a2      	ldr	r2, [r4, #8]
 80083e8:	b152      	cbz	r2, 8008400 <_scanf_float+0x60>
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	2b4e      	cmp	r3, #78	; 0x4e
 80083f0:	d864      	bhi.n	80084bc <_scanf_float+0x11c>
 80083f2:	2b40      	cmp	r3, #64	; 0x40
 80083f4:	d83c      	bhi.n	8008470 <_scanf_float+0xd0>
 80083f6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80083fa:	b2c8      	uxtb	r0, r1
 80083fc:	280e      	cmp	r0, #14
 80083fe:	d93a      	bls.n	8008476 <_scanf_float+0xd6>
 8008400:	f1b9 0f00 	cmp.w	r9, #0
 8008404:	d003      	beq.n	800840e <_scanf_float+0x6e>
 8008406:	6823      	ldr	r3, [r4, #0]
 8008408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800840c:	6023      	str	r3, [r4, #0]
 800840e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008412:	f1ba 0f01 	cmp.w	sl, #1
 8008416:	f200 8113 	bhi.w	8008640 <_scanf_float+0x2a0>
 800841a:	455e      	cmp	r6, fp
 800841c:	f200 8105 	bhi.w	800862a <_scanf_float+0x28a>
 8008420:	2501      	movs	r5, #1
 8008422:	4628      	mov	r0, r5
 8008424:	b007      	add	sp, #28
 8008426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800842a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800842e:	2a0d      	cmp	r2, #13
 8008430:	d8e6      	bhi.n	8008400 <_scanf_float+0x60>
 8008432:	a101      	add	r1, pc, #4	; (adr r1, 8008438 <_scanf_float+0x98>)
 8008434:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008438:	08008577 	.word	0x08008577
 800843c:	08008401 	.word	0x08008401
 8008440:	08008401 	.word	0x08008401
 8008444:	08008401 	.word	0x08008401
 8008448:	080085d7 	.word	0x080085d7
 800844c:	080085af 	.word	0x080085af
 8008450:	08008401 	.word	0x08008401
 8008454:	08008401 	.word	0x08008401
 8008458:	08008585 	.word	0x08008585
 800845c:	08008401 	.word	0x08008401
 8008460:	08008401 	.word	0x08008401
 8008464:	08008401 	.word	0x08008401
 8008468:	08008401 	.word	0x08008401
 800846c:	0800853d 	.word	0x0800853d
 8008470:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008474:	e7db      	b.n	800842e <_scanf_float+0x8e>
 8008476:	290e      	cmp	r1, #14
 8008478:	d8c2      	bhi.n	8008400 <_scanf_float+0x60>
 800847a:	a001      	add	r0, pc, #4	; (adr r0, 8008480 <_scanf_float+0xe0>)
 800847c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008480:	0800852f 	.word	0x0800852f
 8008484:	08008401 	.word	0x08008401
 8008488:	0800852f 	.word	0x0800852f
 800848c:	080085c3 	.word	0x080085c3
 8008490:	08008401 	.word	0x08008401
 8008494:	080084dd 	.word	0x080084dd
 8008498:	08008519 	.word	0x08008519
 800849c:	08008519 	.word	0x08008519
 80084a0:	08008519 	.word	0x08008519
 80084a4:	08008519 	.word	0x08008519
 80084a8:	08008519 	.word	0x08008519
 80084ac:	08008519 	.word	0x08008519
 80084b0:	08008519 	.word	0x08008519
 80084b4:	08008519 	.word	0x08008519
 80084b8:	08008519 	.word	0x08008519
 80084bc:	2b6e      	cmp	r3, #110	; 0x6e
 80084be:	d809      	bhi.n	80084d4 <_scanf_float+0x134>
 80084c0:	2b60      	cmp	r3, #96	; 0x60
 80084c2:	d8b2      	bhi.n	800842a <_scanf_float+0x8a>
 80084c4:	2b54      	cmp	r3, #84	; 0x54
 80084c6:	d077      	beq.n	80085b8 <_scanf_float+0x218>
 80084c8:	2b59      	cmp	r3, #89	; 0x59
 80084ca:	d199      	bne.n	8008400 <_scanf_float+0x60>
 80084cc:	2d07      	cmp	r5, #7
 80084ce:	d197      	bne.n	8008400 <_scanf_float+0x60>
 80084d0:	2508      	movs	r5, #8
 80084d2:	e029      	b.n	8008528 <_scanf_float+0x188>
 80084d4:	2b74      	cmp	r3, #116	; 0x74
 80084d6:	d06f      	beq.n	80085b8 <_scanf_float+0x218>
 80084d8:	2b79      	cmp	r3, #121	; 0x79
 80084da:	e7f6      	b.n	80084ca <_scanf_float+0x12a>
 80084dc:	6821      	ldr	r1, [r4, #0]
 80084de:	05c8      	lsls	r0, r1, #23
 80084e0:	d51a      	bpl.n	8008518 <_scanf_float+0x178>
 80084e2:	9b02      	ldr	r3, [sp, #8]
 80084e4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80084e8:	6021      	str	r1, [r4, #0]
 80084ea:	f109 0901 	add.w	r9, r9, #1
 80084ee:	b11b      	cbz	r3, 80084f8 <_scanf_float+0x158>
 80084f0:	3b01      	subs	r3, #1
 80084f2:	3201      	adds	r2, #1
 80084f4:	9302      	str	r3, [sp, #8]
 80084f6:	60a2      	str	r2, [r4, #8]
 80084f8:	68a3      	ldr	r3, [r4, #8]
 80084fa:	3b01      	subs	r3, #1
 80084fc:	60a3      	str	r3, [r4, #8]
 80084fe:	6923      	ldr	r3, [r4, #16]
 8008500:	3301      	adds	r3, #1
 8008502:	6123      	str	r3, [r4, #16]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	3b01      	subs	r3, #1
 8008508:	2b00      	cmp	r3, #0
 800850a:	607b      	str	r3, [r7, #4]
 800850c:	f340 8084 	ble.w	8008618 <_scanf_float+0x278>
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	3301      	adds	r3, #1
 8008514:	603b      	str	r3, [r7, #0]
 8008516:	e766      	b.n	80083e6 <_scanf_float+0x46>
 8008518:	eb1a 0f05 	cmn.w	sl, r5
 800851c:	f47f af70 	bne.w	8008400 <_scanf_float+0x60>
 8008520:	6822      	ldr	r2, [r4, #0]
 8008522:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008526:	6022      	str	r2, [r4, #0]
 8008528:	f806 3b01 	strb.w	r3, [r6], #1
 800852c:	e7e4      	b.n	80084f8 <_scanf_float+0x158>
 800852e:	6822      	ldr	r2, [r4, #0]
 8008530:	0610      	lsls	r0, r2, #24
 8008532:	f57f af65 	bpl.w	8008400 <_scanf_float+0x60>
 8008536:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800853a:	e7f4      	b.n	8008526 <_scanf_float+0x186>
 800853c:	f1ba 0f00 	cmp.w	sl, #0
 8008540:	d10e      	bne.n	8008560 <_scanf_float+0x1c0>
 8008542:	f1b9 0f00 	cmp.w	r9, #0
 8008546:	d10e      	bne.n	8008566 <_scanf_float+0x1c6>
 8008548:	6822      	ldr	r2, [r4, #0]
 800854a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800854e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008552:	d108      	bne.n	8008566 <_scanf_float+0x1c6>
 8008554:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008558:	6022      	str	r2, [r4, #0]
 800855a:	f04f 0a01 	mov.w	sl, #1
 800855e:	e7e3      	b.n	8008528 <_scanf_float+0x188>
 8008560:	f1ba 0f02 	cmp.w	sl, #2
 8008564:	d055      	beq.n	8008612 <_scanf_float+0x272>
 8008566:	2d01      	cmp	r5, #1
 8008568:	d002      	beq.n	8008570 <_scanf_float+0x1d0>
 800856a:	2d04      	cmp	r5, #4
 800856c:	f47f af48 	bne.w	8008400 <_scanf_float+0x60>
 8008570:	3501      	adds	r5, #1
 8008572:	b2ed      	uxtb	r5, r5
 8008574:	e7d8      	b.n	8008528 <_scanf_float+0x188>
 8008576:	f1ba 0f01 	cmp.w	sl, #1
 800857a:	f47f af41 	bne.w	8008400 <_scanf_float+0x60>
 800857e:	f04f 0a02 	mov.w	sl, #2
 8008582:	e7d1      	b.n	8008528 <_scanf_float+0x188>
 8008584:	b97d      	cbnz	r5, 80085a6 <_scanf_float+0x206>
 8008586:	f1b9 0f00 	cmp.w	r9, #0
 800858a:	f47f af3c 	bne.w	8008406 <_scanf_float+0x66>
 800858e:	6822      	ldr	r2, [r4, #0]
 8008590:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008594:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008598:	f47f af39 	bne.w	800840e <_scanf_float+0x6e>
 800859c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80085a0:	6022      	str	r2, [r4, #0]
 80085a2:	2501      	movs	r5, #1
 80085a4:	e7c0      	b.n	8008528 <_scanf_float+0x188>
 80085a6:	2d03      	cmp	r5, #3
 80085a8:	d0e2      	beq.n	8008570 <_scanf_float+0x1d0>
 80085aa:	2d05      	cmp	r5, #5
 80085ac:	e7de      	b.n	800856c <_scanf_float+0x1cc>
 80085ae:	2d02      	cmp	r5, #2
 80085b0:	f47f af26 	bne.w	8008400 <_scanf_float+0x60>
 80085b4:	2503      	movs	r5, #3
 80085b6:	e7b7      	b.n	8008528 <_scanf_float+0x188>
 80085b8:	2d06      	cmp	r5, #6
 80085ba:	f47f af21 	bne.w	8008400 <_scanf_float+0x60>
 80085be:	2507      	movs	r5, #7
 80085c0:	e7b2      	b.n	8008528 <_scanf_float+0x188>
 80085c2:	6822      	ldr	r2, [r4, #0]
 80085c4:	0591      	lsls	r1, r2, #22
 80085c6:	f57f af1b 	bpl.w	8008400 <_scanf_float+0x60>
 80085ca:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80085ce:	6022      	str	r2, [r4, #0]
 80085d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80085d4:	e7a8      	b.n	8008528 <_scanf_float+0x188>
 80085d6:	6822      	ldr	r2, [r4, #0]
 80085d8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80085dc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80085e0:	d006      	beq.n	80085f0 <_scanf_float+0x250>
 80085e2:	0550      	lsls	r0, r2, #21
 80085e4:	f57f af0c 	bpl.w	8008400 <_scanf_float+0x60>
 80085e8:	f1b9 0f00 	cmp.w	r9, #0
 80085ec:	f43f af0f 	beq.w	800840e <_scanf_float+0x6e>
 80085f0:	0591      	lsls	r1, r2, #22
 80085f2:	bf58      	it	pl
 80085f4:	9901      	ldrpl	r1, [sp, #4]
 80085f6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80085fa:	bf58      	it	pl
 80085fc:	eba9 0101 	subpl.w	r1, r9, r1
 8008600:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008604:	bf58      	it	pl
 8008606:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800860a:	6022      	str	r2, [r4, #0]
 800860c:	f04f 0900 	mov.w	r9, #0
 8008610:	e78a      	b.n	8008528 <_scanf_float+0x188>
 8008612:	f04f 0a03 	mov.w	sl, #3
 8008616:	e787      	b.n	8008528 <_scanf_float+0x188>
 8008618:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800861c:	4639      	mov	r1, r7
 800861e:	4640      	mov	r0, r8
 8008620:	4798      	blx	r3
 8008622:	2800      	cmp	r0, #0
 8008624:	f43f aedf 	beq.w	80083e6 <_scanf_float+0x46>
 8008628:	e6ea      	b.n	8008400 <_scanf_float+0x60>
 800862a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800862e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008632:	463a      	mov	r2, r7
 8008634:	4640      	mov	r0, r8
 8008636:	4798      	blx	r3
 8008638:	6923      	ldr	r3, [r4, #16]
 800863a:	3b01      	subs	r3, #1
 800863c:	6123      	str	r3, [r4, #16]
 800863e:	e6ec      	b.n	800841a <_scanf_float+0x7a>
 8008640:	1e6b      	subs	r3, r5, #1
 8008642:	2b06      	cmp	r3, #6
 8008644:	d825      	bhi.n	8008692 <_scanf_float+0x2f2>
 8008646:	2d02      	cmp	r5, #2
 8008648:	d836      	bhi.n	80086b8 <_scanf_float+0x318>
 800864a:	455e      	cmp	r6, fp
 800864c:	f67f aee8 	bls.w	8008420 <_scanf_float+0x80>
 8008650:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008654:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008658:	463a      	mov	r2, r7
 800865a:	4640      	mov	r0, r8
 800865c:	4798      	blx	r3
 800865e:	6923      	ldr	r3, [r4, #16]
 8008660:	3b01      	subs	r3, #1
 8008662:	6123      	str	r3, [r4, #16]
 8008664:	e7f1      	b.n	800864a <_scanf_float+0x2aa>
 8008666:	9802      	ldr	r0, [sp, #8]
 8008668:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800866c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008670:	9002      	str	r0, [sp, #8]
 8008672:	463a      	mov	r2, r7
 8008674:	4640      	mov	r0, r8
 8008676:	4798      	blx	r3
 8008678:	6923      	ldr	r3, [r4, #16]
 800867a:	3b01      	subs	r3, #1
 800867c:	6123      	str	r3, [r4, #16]
 800867e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008682:	fa5f fa8a 	uxtb.w	sl, sl
 8008686:	f1ba 0f02 	cmp.w	sl, #2
 800868a:	d1ec      	bne.n	8008666 <_scanf_float+0x2c6>
 800868c:	3d03      	subs	r5, #3
 800868e:	b2ed      	uxtb	r5, r5
 8008690:	1b76      	subs	r6, r6, r5
 8008692:	6823      	ldr	r3, [r4, #0]
 8008694:	05da      	lsls	r2, r3, #23
 8008696:	d52f      	bpl.n	80086f8 <_scanf_float+0x358>
 8008698:	055b      	lsls	r3, r3, #21
 800869a:	d510      	bpl.n	80086be <_scanf_float+0x31e>
 800869c:	455e      	cmp	r6, fp
 800869e:	f67f aebf 	bls.w	8008420 <_scanf_float+0x80>
 80086a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086aa:	463a      	mov	r2, r7
 80086ac:	4640      	mov	r0, r8
 80086ae:	4798      	blx	r3
 80086b0:	6923      	ldr	r3, [r4, #16]
 80086b2:	3b01      	subs	r3, #1
 80086b4:	6123      	str	r3, [r4, #16]
 80086b6:	e7f1      	b.n	800869c <_scanf_float+0x2fc>
 80086b8:	46aa      	mov	sl, r5
 80086ba:	9602      	str	r6, [sp, #8]
 80086bc:	e7df      	b.n	800867e <_scanf_float+0x2de>
 80086be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80086c2:	6923      	ldr	r3, [r4, #16]
 80086c4:	2965      	cmp	r1, #101	; 0x65
 80086c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80086ca:	f106 35ff 	add.w	r5, r6, #4294967295
 80086ce:	6123      	str	r3, [r4, #16]
 80086d0:	d00c      	beq.n	80086ec <_scanf_float+0x34c>
 80086d2:	2945      	cmp	r1, #69	; 0x45
 80086d4:	d00a      	beq.n	80086ec <_scanf_float+0x34c>
 80086d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086da:	463a      	mov	r2, r7
 80086dc:	4640      	mov	r0, r8
 80086de:	4798      	blx	r3
 80086e0:	6923      	ldr	r3, [r4, #16]
 80086e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80086e6:	3b01      	subs	r3, #1
 80086e8:	1eb5      	subs	r5, r6, #2
 80086ea:	6123      	str	r3, [r4, #16]
 80086ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086f0:	463a      	mov	r2, r7
 80086f2:	4640      	mov	r0, r8
 80086f4:	4798      	blx	r3
 80086f6:	462e      	mov	r6, r5
 80086f8:	6825      	ldr	r5, [r4, #0]
 80086fa:	f015 0510 	ands.w	r5, r5, #16
 80086fe:	d159      	bne.n	80087b4 <_scanf_float+0x414>
 8008700:	7035      	strb	r5, [r6, #0]
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800870c:	d11b      	bne.n	8008746 <_scanf_float+0x3a6>
 800870e:	9b01      	ldr	r3, [sp, #4]
 8008710:	454b      	cmp	r3, r9
 8008712:	eba3 0209 	sub.w	r2, r3, r9
 8008716:	d123      	bne.n	8008760 <_scanf_float+0x3c0>
 8008718:	2200      	movs	r2, #0
 800871a:	4659      	mov	r1, fp
 800871c:	4640      	mov	r0, r8
 800871e:	f000 ff2d 	bl	800957c <_strtod_r>
 8008722:	6822      	ldr	r2, [r4, #0]
 8008724:	9b03      	ldr	r3, [sp, #12]
 8008726:	f012 0f02 	tst.w	r2, #2
 800872a:	ec57 6b10 	vmov	r6, r7, d0
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	d021      	beq.n	8008776 <_scanf_float+0x3d6>
 8008732:	9903      	ldr	r1, [sp, #12]
 8008734:	1d1a      	adds	r2, r3, #4
 8008736:	600a      	str	r2, [r1, #0]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	e9c3 6700 	strd	r6, r7, [r3]
 800873e:	68e3      	ldr	r3, [r4, #12]
 8008740:	3301      	adds	r3, #1
 8008742:	60e3      	str	r3, [r4, #12]
 8008744:	e66d      	b.n	8008422 <_scanf_float+0x82>
 8008746:	9b04      	ldr	r3, [sp, #16]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d0e5      	beq.n	8008718 <_scanf_float+0x378>
 800874c:	9905      	ldr	r1, [sp, #20]
 800874e:	230a      	movs	r3, #10
 8008750:	462a      	mov	r2, r5
 8008752:	3101      	adds	r1, #1
 8008754:	4640      	mov	r0, r8
 8008756:	f000 ff99 	bl	800968c <_strtol_r>
 800875a:	9b04      	ldr	r3, [sp, #16]
 800875c:	9e05      	ldr	r6, [sp, #20]
 800875e:	1ac2      	subs	r2, r0, r3
 8008760:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008764:	429e      	cmp	r6, r3
 8008766:	bf28      	it	cs
 8008768:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800876c:	4912      	ldr	r1, [pc, #72]	; (80087b8 <_scanf_float+0x418>)
 800876e:	4630      	mov	r0, r6
 8008770:	f000 f82c 	bl	80087cc <siprintf>
 8008774:	e7d0      	b.n	8008718 <_scanf_float+0x378>
 8008776:	9903      	ldr	r1, [sp, #12]
 8008778:	f012 0f04 	tst.w	r2, #4
 800877c:	f103 0204 	add.w	r2, r3, #4
 8008780:	600a      	str	r2, [r1, #0]
 8008782:	d1d9      	bne.n	8008738 <_scanf_float+0x398>
 8008784:	f8d3 8000 	ldr.w	r8, [r3]
 8008788:	ee10 2a10 	vmov	r2, s0
 800878c:	ee10 0a10 	vmov	r0, s0
 8008790:	463b      	mov	r3, r7
 8008792:	4639      	mov	r1, r7
 8008794:	f7f8 f9ca 	bl	8000b2c <__aeabi_dcmpun>
 8008798:	b128      	cbz	r0, 80087a6 <_scanf_float+0x406>
 800879a:	4808      	ldr	r0, [pc, #32]	; (80087bc <_scanf_float+0x41c>)
 800879c:	f000 f810 	bl	80087c0 <nanf>
 80087a0:	ed88 0a00 	vstr	s0, [r8]
 80087a4:	e7cb      	b.n	800873e <_scanf_float+0x39e>
 80087a6:	4630      	mov	r0, r6
 80087a8:	4639      	mov	r1, r7
 80087aa:	f7f8 fa1d 	bl	8000be8 <__aeabi_d2f>
 80087ae:	f8c8 0000 	str.w	r0, [r8]
 80087b2:	e7c4      	b.n	800873e <_scanf_float+0x39e>
 80087b4:	2500      	movs	r5, #0
 80087b6:	e634      	b.n	8008422 <_scanf_float+0x82>
 80087b8:	0800cd36 	.word	0x0800cd36
 80087bc:	0800d15b 	.word	0x0800d15b

080087c0 <nanf>:
 80087c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80087c8 <nanf+0x8>
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	7fc00000 	.word	0x7fc00000

080087cc <siprintf>:
 80087cc:	b40e      	push	{r1, r2, r3}
 80087ce:	b500      	push	{lr}
 80087d0:	b09c      	sub	sp, #112	; 0x70
 80087d2:	ab1d      	add	r3, sp, #116	; 0x74
 80087d4:	9002      	str	r0, [sp, #8]
 80087d6:	9006      	str	r0, [sp, #24]
 80087d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80087dc:	4809      	ldr	r0, [pc, #36]	; (8008804 <siprintf+0x38>)
 80087de:	9107      	str	r1, [sp, #28]
 80087e0:	9104      	str	r1, [sp, #16]
 80087e2:	4909      	ldr	r1, [pc, #36]	; (8008808 <siprintf+0x3c>)
 80087e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80087e8:	9105      	str	r1, [sp, #20]
 80087ea:	6800      	ldr	r0, [r0, #0]
 80087ec:	9301      	str	r3, [sp, #4]
 80087ee:	a902      	add	r1, sp, #8
 80087f0:	f002 ffae 	bl	800b750 <_svfiprintf_r>
 80087f4:	9b02      	ldr	r3, [sp, #8]
 80087f6:	2200      	movs	r2, #0
 80087f8:	701a      	strb	r2, [r3, #0]
 80087fa:	b01c      	add	sp, #112	; 0x70
 80087fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008800:	b003      	add	sp, #12
 8008802:	4770      	bx	lr
 8008804:	200000f0 	.word	0x200000f0
 8008808:	ffff0208 	.word	0xffff0208

0800880c <siscanf>:
 800880c:	b40e      	push	{r1, r2, r3}
 800880e:	b510      	push	{r4, lr}
 8008810:	b09f      	sub	sp, #124	; 0x7c
 8008812:	ac21      	add	r4, sp, #132	; 0x84
 8008814:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008818:	f854 2b04 	ldr.w	r2, [r4], #4
 800881c:	9201      	str	r2, [sp, #4]
 800881e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008822:	9004      	str	r0, [sp, #16]
 8008824:	9008      	str	r0, [sp, #32]
 8008826:	f7f7 fcd3 	bl	80001d0 <strlen>
 800882a:	4b0c      	ldr	r3, [pc, #48]	; (800885c <siscanf+0x50>)
 800882c:	9005      	str	r0, [sp, #20]
 800882e:	9009      	str	r0, [sp, #36]	; 0x24
 8008830:	930d      	str	r3, [sp, #52]	; 0x34
 8008832:	480b      	ldr	r0, [pc, #44]	; (8008860 <siscanf+0x54>)
 8008834:	9a01      	ldr	r2, [sp, #4]
 8008836:	6800      	ldr	r0, [r0, #0]
 8008838:	9403      	str	r4, [sp, #12]
 800883a:	2300      	movs	r3, #0
 800883c:	9311      	str	r3, [sp, #68]	; 0x44
 800883e:	9316      	str	r3, [sp, #88]	; 0x58
 8008840:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008844:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008848:	a904      	add	r1, sp, #16
 800884a:	4623      	mov	r3, r4
 800884c:	f003 f8da 	bl	800ba04 <__ssvfiscanf_r>
 8008850:	b01f      	add	sp, #124	; 0x7c
 8008852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008856:	b003      	add	sp, #12
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	08008887 	.word	0x08008887
 8008860:	200000f0 	.word	0x200000f0

08008864 <__sread>:
 8008864:	b510      	push	{r4, lr}
 8008866:	460c      	mov	r4, r1
 8008868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800886c:	f003 fb94 	bl	800bf98 <_read_r>
 8008870:	2800      	cmp	r0, #0
 8008872:	bfab      	itete	ge
 8008874:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008876:	89a3      	ldrhlt	r3, [r4, #12]
 8008878:	181b      	addge	r3, r3, r0
 800887a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800887e:	bfac      	ite	ge
 8008880:	6563      	strge	r3, [r4, #84]	; 0x54
 8008882:	81a3      	strhlt	r3, [r4, #12]
 8008884:	bd10      	pop	{r4, pc}

08008886 <__seofread>:
 8008886:	2000      	movs	r0, #0
 8008888:	4770      	bx	lr

0800888a <__swrite>:
 800888a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800888e:	461f      	mov	r7, r3
 8008890:	898b      	ldrh	r3, [r1, #12]
 8008892:	05db      	lsls	r3, r3, #23
 8008894:	4605      	mov	r5, r0
 8008896:	460c      	mov	r4, r1
 8008898:	4616      	mov	r6, r2
 800889a:	d505      	bpl.n	80088a8 <__swrite+0x1e>
 800889c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088a0:	2302      	movs	r3, #2
 80088a2:	2200      	movs	r2, #0
 80088a4:	f002 f906 	bl	800aab4 <_lseek_r>
 80088a8:	89a3      	ldrh	r3, [r4, #12]
 80088aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088b2:	81a3      	strh	r3, [r4, #12]
 80088b4:	4632      	mov	r2, r6
 80088b6:	463b      	mov	r3, r7
 80088b8:	4628      	mov	r0, r5
 80088ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088be:	f000 bee7 	b.w	8009690 <_write_r>

080088c2 <__sseek>:
 80088c2:	b510      	push	{r4, lr}
 80088c4:	460c      	mov	r4, r1
 80088c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088ca:	f002 f8f3 	bl	800aab4 <_lseek_r>
 80088ce:	1c43      	adds	r3, r0, #1
 80088d0:	89a3      	ldrh	r3, [r4, #12]
 80088d2:	bf15      	itete	ne
 80088d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80088d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088de:	81a3      	strheq	r3, [r4, #12]
 80088e0:	bf18      	it	ne
 80088e2:	81a3      	strhne	r3, [r4, #12]
 80088e4:	bd10      	pop	{r4, pc}

080088e6 <__sclose>:
 80088e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088ea:	f000 bee3 	b.w	80096b4 <_close_r>

080088ee <strchr>:
 80088ee:	b2c9      	uxtb	r1, r1
 80088f0:	4603      	mov	r3, r0
 80088f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088f6:	b11a      	cbz	r2, 8008900 <strchr+0x12>
 80088f8:	428a      	cmp	r2, r1
 80088fa:	d1f9      	bne.n	80088f0 <strchr+0x2>
 80088fc:	4618      	mov	r0, r3
 80088fe:	4770      	bx	lr
 8008900:	2900      	cmp	r1, #0
 8008902:	bf18      	it	ne
 8008904:	2300      	movne	r3, #0
 8008906:	e7f9      	b.n	80088fc <strchr+0xe>

08008908 <strstr>:
 8008908:	780a      	ldrb	r2, [r1, #0]
 800890a:	b570      	push	{r4, r5, r6, lr}
 800890c:	b96a      	cbnz	r2, 800892a <strstr+0x22>
 800890e:	bd70      	pop	{r4, r5, r6, pc}
 8008910:	429a      	cmp	r2, r3
 8008912:	d109      	bne.n	8008928 <strstr+0x20>
 8008914:	460c      	mov	r4, r1
 8008916:	4605      	mov	r5, r0
 8008918:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800891c:	2b00      	cmp	r3, #0
 800891e:	d0f6      	beq.n	800890e <strstr+0x6>
 8008920:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008924:	429e      	cmp	r6, r3
 8008926:	d0f7      	beq.n	8008918 <strstr+0x10>
 8008928:	3001      	adds	r0, #1
 800892a:	7803      	ldrb	r3, [r0, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d1ef      	bne.n	8008910 <strstr+0x8>
 8008930:	4618      	mov	r0, r3
 8008932:	e7ec      	b.n	800890e <strstr+0x6>

08008934 <sulp>:
 8008934:	b570      	push	{r4, r5, r6, lr}
 8008936:	4604      	mov	r4, r0
 8008938:	460d      	mov	r5, r1
 800893a:	ec45 4b10 	vmov	d0, r4, r5
 800893e:	4616      	mov	r6, r2
 8008940:	f002 fc64 	bl	800b20c <__ulp>
 8008944:	ec51 0b10 	vmov	r0, r1, d0
 8008948:	b17e      	cbz	r6, 800896a <sulp+0x36>
 800894a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800894e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008952:	2b00      	cmp	r3, #0
 8008954:	dd09      	ble.n	800896a <sulp+0x36>
 8008956:	051b      	lsls	r3, r3, #20
 8008958:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800895c:	2400      	movs	r4, #0
 800895e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008962:	4622      	mov	r2, r4
 8008964:	462b      	mov	r3, r5
 8008966:	f7f7 fe47 	bl	80005f8 <__aeabi_dmul>
 800896a:	bd70      	pop	{r4, r5, r6, pc}
 800896c:	0000      	movs	r0, r0
	...

08008970 <_strtod_l>:
 8008970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008974:	ed2d 8b02 	vpush	{d8}
 8008978:	b09d      	sub	sp, #116	; 0x74
 800897a:	461f      	mov	r7, r3
 800897c:	2300      	movs	r3, #0
 800897e:	9318      	str	r3, [sp, #96]	; 0x60
 8008980:	4ba2      	ldr	r3, [pc, #648]	; (8008c0c <_strtod_l+0x29c>)
 8008982:	9213      	str	r2, [sp, #76]	; 0x4c
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	9305      	str	r3, [sp, #20]
 8008988:	4604      	mov	r4, r0
 800898a:	4618      	mov	r0, r3
 800898c:	4688      	mov	r8, r1
 800898e:	f7f7 fc1f 	bl	80001d0 <strlen>
 8008992:	f04f 0a00 	mov.w	sl, #0
 8008996:	4605      	mov	r5, r0
 8008998:	f04f 0b00 	mov.w	fp, #0
 800899c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80089a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089a2:	781a      	ldrb	r2, [r3, #0]
 80089a4:	2a2b      	cmp	r2, #43	; 0x2b
 80089a6:	d04e      	beq.n	8008a46 <_strtod_l+0xd6>
 80089a8:	d83b      	bhi.n	8008a22 <_strtod_l+0xb2>
 80089aa:	2a0d      	cmp	r2, #13
 80089ac:	d834      	bhi.n	8008a18 <_strtod_l+0xa8>
 80089ae:	2a08      	cmp	r2, #8
 80089b0:	d834      	bhi.n	8008a1c <_strtod_l+0xac>
 80089b2:	2a00      	cmp	r2, #0
 80089b4:	d03e      	beq.n	8008a34 <_strtod_l+0xc4>
 80089b6:	2300      	movs	r3, #0
 80089b8:	930a      	str	r3, [sp, #40]	; 0x28
 80089ba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80089bc:	7833      	ldrb	r3, [r6, #0]
 80089be:	2b30      	cmp	r3, #48	; 0x30
 80089c0:	f040 80b0 	bne.w	8008b24 <_strtod_l+0x1b4>
 80089c4:	7873      	ldrb	r3, [r6, #1]
 80089c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80089ca:	2b58      	cmp	r3, #88	; 0x58
 80089cc:	d168      	bne.n	8008aa0 <_strtod_l+0x130>
 80089ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089d0:	9301      	str	r3, [sp, #4]
 80089d2:	ab18      	add	r3, sp, #96	; 0x60
 80089d4:	9702      	str	r7, [sp, #8]
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	4a8d      	ldr	r2, [pc, #564]	; (8008c10 <_strtod_l+0x2a0>)
 80089da:	ab19      	add	r3, sp, #100	; 0x64
 80089dc:	a917      	add	r1, sp, #92	; 0x5c
 80089de:	4620      	mov	r0, r4
 80089e0:	f001 fd5c 	bl	800a49c <__gethex>
 80089e4:	f010 0707 	ands.w	r7, r0, #7
 80089e8:	4605      	mov	r5, r0
 80089ea:	d005      	beq.n	80089f8 <_strtod_l+0x88>
 80089ec:	2f06      	cmp	r7, #6
 80089ee:	d12c      	bne.n	8008a4a <_strtod_l+0xda>
 80089f0:	3601      	adds	r6, #1
 80089f2:	2300      	movs	r3, #0
 80089f4:	9617      	str	r6, [sp, #92]	; 0x5c
 80089f6:	930a      	str	r3, [sp, #40]	; 0x28
 80089f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f040 8590 	bne.w	8009520 <_strtod_l+0xbb0>
 8008a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a02:	b1eb      	cbz	r3, 8008a40 <_strtod_l+0xd0>
 8008a04:	4652      	mov	r2, sl
 8008a06:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008a0a:	ec43 2b10 	vmov	d0, r2, r3
 8008a0e:	b01d      	add	sp, #116	; 0x74
 8008a10:	ecbd 8b02 	vpop	{d8}
 8008a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a18:	2a20      	cmp	r2, #32
 8008a1a:	d1cc      	bne.n	80089b6 <_strtod_l+0x46>
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008a20:	e7be      	b.n	80089a0 <_strtod_l+0x30>
 8008a22:	2a2d      	cmp	r2, #45	; 0x2d
 8008a24:	d1c7      	bne.n	80089b6 <_strtod_l+0x46>
 8008a26:	2201      	movs	r2, #1
 8008a28:	920a      	str	r2, [sp, #40]	; 0x28
 8008a2a:	1c5a      	adds	r2, r3, #1
 8008a2c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008a2e:	785b      	ldrb	r3, [r3, #1]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d1c2      	bne.n	80089ba <_strtod_l+0x4a>
 8008a34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a36:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f040 856e 	bne.w	800951c <_strtod_l+0xbac>
 8008a40:	4652      	mov	r2, sl
 8008a42:	465b      	mov	r3, fp
 8008a44:	e7e1      	b.n	8008a0a <_strtod_l+0x9a>
 8008a46:	2200      	movs	r2, #0
 8008a48:	e7ee      	b.n	8008a28 <_strtod_l+0xb8>
 8008a4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008a4c:	b13a      	cbz	r2, 8008a5e <_strtod_l+0xee>
 8008a4e:	2135      	movs	r1, #53	; 0x35
 8008a50:	a81a      	add	r0, sp, #104	; 0x68
 8008a52:	f002 fce6 	bl	800b422 <__copybits>
 8008a56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f002 f8a5 	bl	800aba8 <_Bfree>
 8008a5e:	3f01      	subs	r7, #1
 8008a60:	2f04      	cmp	r7, #4
 8008a62:	d806      	bhi.n	8008a72 <_strtod_l+0x102>
 8008a64:	e8df f007 	tbb	[pc, r7]
 8008a68:	1714030a 	.word	0x1714030a
 8008a6c:	0a          	.byte	0x0a
 8008a6d:	00          	.byte	0x00
 8008a6e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008a72:	0728      	lsls	r0, r5, #28
 8008a74:	d5c0      	bpl.n	80089f8 <_strtod_l+0x88>
 8008a76:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008a7a:	e7bd      	b.n	80089f8 <_strtod_l+0x88>
 8008a7c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008a80:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008a82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008a86:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008a8a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008a8e:	e7f0      	b.n	8008a72 <_strtod_l+0x102>
 8008a90:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008c14 <_strtod_l+0x2a4>
 8008a94:	e7ed      	b.n	8008a72 <_strtod_l+0x102>
 8008a96:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008a9a:	f04f 3aff 	mov.w	sl, #4294967295
 8008a9e:	e7e8      	b.n	8008a72 <_strtod_l+0x102>
 8008aa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008aa2:	1c5a      	adds	r2, r3, #1
 8008aa4:	9217      	str	r2, [sp, #92]	; 0x5c
 8008aa6:	785b      	ldrb	r3, [r3, #1]
 8008aa8:	2b30      	cmp	r3, #48	; 0x30
 8008aaa:	d0f9      	beq.n	8008aa0 <_strtod_l+0x130>
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d0a3      	beq.n	80089f8 <_strtod_l+0x88>
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	f04f 0900 	mov.w	r9, #0
 8008ab6:	9304      	str	r3, [sp, #16]
 8008ab8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008aba:	9308      	str	r3, [sp, #32]
 8008abc:	f8cd 901c 	str.w	r9, [sp, #28]
 8008ac0:	464f      	mov	r7, r9
 8008ac2:	220a      	movs	r2, #10
 8008ac4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008ac6:	7806      	ldrb	r6, [r0, #0]
 8008ac8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008acc:	b2d9      	uxtb	r1, r3
 8008ace:	2909      	cmp	r1, #9
 8008ad0:	d92a      	bls.n	8008b28 <_strtod_l+0x1b8>
 8008ad2:	9905      	ldr	r1, [sp, #20]
 8008ad4:	462a      	mov	r2, r5
 8008ad6:	f003 fac3 	bl	800c060 <strncmp>
 8008ada:	b398      	cbz	r0, 8008b44 <_strtod_l+0x1d4>
 8008adc:	2000      	movs	r0, #0
 8008ade:	4632      	mov	r2, r6
 8008ae0:	463d      	mov	r5, r7
 8008ae2:	9005      	str	r0, [sp, #20]
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2a65      	cmp	r2, #101	; 0x65
 8008ae8:	d001      	beq.n	8008aee <_strtod_l+0x17e>
 8008aea:	2a45      	cmp	r2, #69	; 0x45
 8008aec:	d118      	bne.n	8008b20 <_strtod_l+0x1b0>
 8008aee:	b91d      	cbnz	r5, 8008af8 <_strtod_l+0x188>
 8008af0:	9a04      	ldr	r2, [sp, #16]
 8008af2:	4302      	orrs	r2, r0
 8008af4:	d09e      	beq.n	8008a34 <_strtod_l+0xc4>
 8008af6:	2500      	movs	r5, #0
 8008af8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008afc:	f108 0201 	add.w	r2, r8, #1
 8008b00:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b02:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008b06:	2a2b      	cmp	r2, #43	; 0x2b
 8008b08:	d075      	beq.n	8008bf6 <_strtod_l+0x286>
 8008b0a:	2a2d      	cmp	r2, #45	; 0x2d
 8008b0c:	d07b      	beq.n	8008c06 <_strtod_l+0x296>
 8008b0e:	f04f 0c00 	mov.w	ip, #0
 8008b12:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008b16:	2909      	cmp	r1, #9
 8008b18:	f240 8082 	bls.w	8008c20 <_strtod_l+0x2b0>
 8008b1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008b20:	2600      	movs	r6, #0
 8008b22:	e09d      	b.n	8008c60 <_strtod_l+0x2f0>
 8008b24:	2300      	movs	r3, #0
 8008b26:	e7c4      	b.n	8008ab2 <_strtod_l+0x142>
 8008b28:	2f08      	cmp	r7, #8
 8008b2a:	bfd8      	it	le
 8008b2c:	9907      	ldrle	r1, [sp, #28]
 8008b2e:	f100 0001 	add.w	r0, r0, #1
 8008b32:	bfda      	itte	le
 8008b34:	fb02 3301 	mlale	r3, r2, r1, r3
 8008b38:	9307      	strle	r3, [sp, #28]
 8008b3a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008b3e:	3701      	adds	r7, #1
 8008b40:	9017      	str	r0, [sp, #92]	; 0x5c
 8008b42:	e7bf      	b.n	8008ac4 <_strtod_l+0x154>
 8008b44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b46:	195a      	adds	r2, r3, r5
 8008b48:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b4a:	5d5a      	ldrb	r2, [r3, r5]
 8008b4c:	2f00      	cmp	r7, #0
 8008b4e:	d037      	beq.n	8008bc0 <_strtod_l+0x250>
 8008b50:	9005      	str	r0, [sp, #20]
 8008b52:	463d      	mov	r5, r7
 8008b54:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008b58:	2b09      	cmp	r3, #9
 8008b5a:	d912      	bls.n	8008b82 <_strtod_l+0x212>
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	e7c2      	b.n	8008ae6 <_strtod_l+0x176>
 8008b60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b62:	1c5a      	adds	r2, r3, #1
 8008b64:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b66:	785a      	ldrb	r2, [r3, #1]
 8008b68:	3001      	adds	r0, #1
 8008b6a:	2a30      	cmp	r2, #48	; 0x30
 8008b6c:	d0f8      	beq.n	8008b60 <_strtod_l+0x1f0>
 8008b6e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008b72:	2b08      	cmp	r3, #8
 8008b74:	f200 84d9 	bhi.w	800952a <_strtod_l+0xbba>
 8008b78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b7a:	9005      	str	r0, [sp, #20]
 8008b7c:	2000      	movs	r0, #0
 8008b7e:	9308      	str	r3, [sp, #32]
 8008b80:	4605      	mov	r5, r0
 8008b82:	3a30      	subs	r2, #48	; 0x30
 8008b84:	f100 0301 	add.w	r3, r0, #1
 8008b88:	d014      	beq.n	8008bb4 <_strtod_l+0x244>
 8008b8a:	9905      	ldr	r1, [sp, #20]
 8008b8c:	4419      	add	r1, r3
 8008b8e:	9105      	str	r1, [sp, #20]
 8008b90:	462b      	mov	r3, r5
 8008b92:	eb00 0e05 	add.w	lr, r0, r5
 8008b96:	210a      	movs	r1, #10
 8008b98:	4573      	cmp	r3, lr
 8008b9a:	d113      	bne.n	8008bc4 <_strtod_l+0x254>
 8008b9c:	182b      	adds	r3, r5, r0
 8008b9e:	2b08      	cmp	r3, #8
 8008ba0:	f105 0501 	add.w	r5, r5, #1
 8008ba4:	4405      	add	r5, r0
 8008ba6:	dc1c      	bgt.n	8008be2 <_strtod_l+0x272>
 8008ba8:	9907      	ldr	r1, [sp, #28]
 8008baa:	230a      	movs	r3, #10
 8008bac:	fb03 2301 	mla	r3, r3, r1, r2
 8008bb0:	9307      	str	r3, [sp, #28]
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008bb6:	1c51      	adds	r1, r2, #1
 8008bb8:	9117      	str	r1, [sp, #92]	; 0x5c
 8008bba:	7852      	ldrb	r2, [r2, #1]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	e7c9      	b.n	8008b54 <_strtod_l+0x1e4>
 8008bc0:	4638      	mov	r0, r7
 8008bc2:	e7d2      	b.n	8008b6a <_strtod_l+0x1fa>
 8008bc4:	2b08      	cmp	r3, #8
 8008bc6:	dc04      	bgt.n	8008bd2 <_strtod_l+0x262>
 8008bc8:	9e07      	ldr	r6, [sp, #28]
 8008bca:	434e      	muls	r6, r1
 8008bcc:	9607      	str	r6, [sp, #28]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	e7e2      	b.n	8008b98 <_strtod_l+0x228>
 8008bd2:	f103 0c01 	add.w	ip, r3, #1
 8008bd6:	f1bc 0f10 	cmp.w	ip, #16
 8008bda:	bfd8      	it	le
 8008bdc:	fb01 f909 	mulle.w	r9, r1, r9
 8008be0:	e7f5      	b.n	8008bce <_strtod_l+0x25e>
 8008be2:	2d10      	cmp	r5, #16
 8008be4:	bfdc      	itt	le
 8008be6:	230a      	movle	r3, #10
 8008be8:	fb03 2909 	mlale	r9, r3, r9, r2
 8008bec:	e7e1      	b.n	8008bb2 <_strtod_l+0x242>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	9305      	str	r3, [sp, #20]
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e77c      	b.n	8008af0 <_strtod_l+0x180>
 8008bf6:	f04f 0c00 	mov.w	ip, #0
 8008bfa:	f108 0202 	add.w	r2, r8, #2
 8008bfe:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c00:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008c04:	e785      	b.n	8008b12 <_strtod_l+0x1a2>
 8008c06:	f04f 0c01 	mov.w	ip, #1
 8008c0a:	e7f6      	b.n	8008bfa <_strtod_l+0x28a>
 8008c0c:	0800cf88 	.word	0x0800cf88
 8008c10:	0800cd3c 	.word	0x0800cd3c
 8008c14:	7ff00000 	.word	0x7ff00000
 8008c18:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c1a:	1c51      	adds	r1, r2, #1
 8008c1c:	9117      	str	r1, [sp, #92]	; 0x5c
 8008c1e:	7852      	ldrb	r2, [r2, #1]
 8008c20:	2a30      	cmp	r2, #48	; 0x30
 8008c22:	d0f9      	beq.n	8008c18 <_strtod_l+0x2a8>
 8008c24:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008c28:	2908      	cmp	r1, #8
 8008c2a:	f63f af79 	bhi.w	8008b20 <_strtod_l+0x1b0>
 8008c2e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008c32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c34:	9206      	str	r2, [sp, #24]
 8008c36:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c38:	1c51      	adds	r1, r2, #1
 8008c3a:	9117      	str	r1, [sp, #92]	; 0x5c
 8008c3c:	7852      	ldrb	r2, [r2, #1]
 8008c3e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008c42:	2e09      	cmp	r6, #9
 8008c44:	d937      	bls.n	8008cb6 <_strtod_l+0x346>
 8008c46:	9e06      	ldr	r6, [sp, #24]
 8008c48:	1b89      	subs	r1, r1, r6
 8008c4a:	2908      	cmp	r1, #8
 8008c4c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008c50:	dc02      	bgt.n	8008c58 <_strtod_l+0x2e8>
 8008c52:	4576      	cmp	r6, lr
 8008c54:	bfa8      	it	ge
 8008c56:	4676      	movge	r6, lr
 8008c58:	f1bc 0f00 	cmp.w	ip, #0
 8008c5c:	d000      	beq.n	8008c60 <_strtod_l+0x2f0>
 8008c5e:	4276      	negs	r6, r6
 8008c60:	2d00      	cmp	r5, #0
 8008c62:	d14d      	bne.n	8008d00 <_strtod_l+0x390>
 8008c64:	9904      	ldr	r1, [sp, #16]
 8008c66:	4301      	orrs	r1, r0
 8008c68:	f47f aec6 	bne.w	80089f8 <_strtod_l+0x88>
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f47f aee1 	bne.w	8008a34 <_strtod_l+0xc4>
 8008c72:	2a69      	cmp	r2, #105	; 0x69
 8008c74:	d027      	beq.n	8008cc6 <_strtod_l+0x356>
 8008c76:	dc24      	bgt.n	8008cc2 <_strtod_l+0x352>
 8008c78:	2a49      	cmp	r2, #73	; 0x49
 8008c7a:	d024      	beq.n	8008cc6 <_strtod_l+0x356>
 8008c7c:	2a4e      	cmp	r2, #78	; 0x4e
 8008c7e:	f47f aed9 	bne.w	8008a34 <_strtod_l+0xc4>
 8008c82:	499f      	ldr	r1, [pc, #636]	; (8008f00 <_strtod_l+0x590>)
 8008c84:	a817      	add	r0, sp, #92	; 0x5c
 8008c86:	f001 fe61 	bl	800a94c <__match>
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	f43f aed2 	beq.w	8008a34 <_strtod_l+0xc4>
 8008c90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	2b28      	cmp	r3, #40	; 0x28
 8008c96:	d12d      	bne.n	8008cf4 <_strtod_l+0x384>
 8008c98:	499a      	ldr	r1, [pc, #616]	; (8008f04 <_strtod_l+0x594>)
 8008c9a:	aa1a      	add	r2, sp, #104	; 0x68
 8008c9c:	a817      	add	r0, sp, #92	; 0x5c
 8008c9e:	f001 fe69 	bl	800a974 <__hexnan>
 8008ca2:	2805      	cmp	r0, #5
 8008ca4:	d126      	bne.n	8008cf4 <_strtod_l+0x384>
 8008ca6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008ca8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008cac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008cb0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008cb4:	e6a0      	b.n	80089f8 <_strtod_l+0x88>
 8008cb6:	210a      	movs	r1, #10
 8008cb8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008cbc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008cc0:	e7b9      	b.n	8008c36 <_strtod_l+0x2c6>
 8008cc2:	2a6e      	cmp	r2, #110	; 0x6e
 8008cc4:	e7db      	b.n	8008c7e <_strtod_l+0x30e>
 8008cc6:	4990      	ldr	r1, [pc, #576]	; (8008f08 <_strtod_l+0x598>)
 8008cc8:	a817      	add	r0, sp, #92	; 0x5c
 8008cca:	f001 fe3f 	bl	800a94c <__match>
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	f43f aeb0 	beq.w	8008a34 <_strtod_l+0xc4>
 8008cd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cd6:	498d      	ldr	r1, [pc, #564]	; (8008f0c <_strtod_l+0x59c>)
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	a817      	add	r0, sp, #92	; 0x5c
 8008cdc:	9317      	str	r3, [sp, #92]	; 0x5c
 8008cde:	f001 fe35 	bl	800a94c <__match>
 8008ce2:	b910      	cbnz	r0, 8008cea <_strtod_l+0x37a>
 8008ce4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	9317      	str	r3, [sp, #92]	; 0x5c
 8008cea:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008f1c <_strtod_l+0x5ac>
 8008cee:	f04f 0a00 	mov.w	sl, #0
 8008cf2:	e681      	b.n	80089f8 <_strtod_l+0x88>
 8008cf4:	4886      	ldr	r0, [pc, #536]	; (8008f10 <_strtod_l+0x5a0>)
 8008cf6:	f003 f963 	bl	800bfc0 <nan>
 8008cfa:	ec5b ab10 	vmov	sl, fp, d0
 8008cfe:	e67b      	b.n	80089f8 <_strtod_l+0x88>
 8008d00:	9b05      	ldr	r3, [sp, #20]
 8008d02:	9807      	ldr	r0, [sp, #28]
 8008d04:	1af3      	subs	r3, r6, r3
 8008d06:	2f00      	cmp	r7, #0
 8008d08:	bf08      	it	eq
 8008d0a:	462f      	moveq	r7, r5
 8008d0c:	2d10      	cmp	r5, #16
 8008d0e:	9306      	str	r3, [sp, #24]
 8008d10:	46a8      	mov	r8, r5
 8008d12:	bfa8      	it	ge
 8008d14:	f04f 0810 	movge.w	r8, #16
 8008d18:	f7f7 fbf4 	bl	8000504 <__aeabi_ui2d>
 8008d1c:	2d09      	cmp	r5, #9
 8008d1e:	4682      	mov	sl, r0
 8008d20:	468b      	mov	fp, r1
 8008d22:	dd13      	ble.n	8008d4c <_strtod_l+0x3dc>
 8008d24:	4b7b      	ldr	r3, [pc, #492]	; (8008f14 <_strtod_l+0x5a4>)
 8008d26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008d2a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008d2e:	f7f7 fc63 	bl	80005f8 <__aeabi_dmul>
 8008d32:	4682      	mov	sl, r0
 8008d34:	4648      	mov	r0, r9
 8008d36:	468b      	mov	fp, r1
 8008d38:	f7f7 fbe4 	bl	8000504 <__aeabi_ui2d>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	460b      	mov	r3, r1
 8008d40:	4650      	mov	r0, sl
 8008d42:	4659      	mov	r1, fp
 8008d44:	f7f7 faa2 	bl	800028c <__adddf3>
 8008d48:	4682      	mov	sl, r0
 8008d4a:	468b      	mov	fp, r1
 8008d4c:	2d0f      	cmp	r5, #15
 8008d4e:	dc38      	bgt.n	8008dc2 <_strtod_l+0x452>
 8008d50:	9b06      	ldr	r3, [sp, #24]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	f43f ae50 	beq.w	80089f8 <_strtod_l+0x88>
 8008d58:	dd24      	ble.n	8008da4 <_strtod_l+0x434>
 8008d5a:	2b16      	cmp	r3, #22
 8008d5c:	dc0b      	bgt.n	8008d76 <_strtod_l+0x406>
 8008d5e:	496d      	ldr	r1, [pc, #436]	; (8008f14 <_strtod_l+0x5a4>)
 8008d60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d68:	4652      	mov	r2, sl
 8008d6a:	465b      	mov	r3, fp
 8008d6c:	f7f7 fc44 	bl	80005f8 <__aeabi_dmul>
 8008d70:	4682      	mov	sl, r0
 8008d72:	468b      	mov	fp, r1
 8008d74:	e640      	b.n	80089f8 <_strtod_l+0x88>
 8008d76:	9a06      	ldr	r2, [sp, #24]
 8008d78:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	db20      	blt.n	8008dc2 <_strtod_l+0x452>
 8008d80:	4c64      	ldr	r4, [pc, #400]	; (8008f14 <_strtod_l+0x5a4>)
 8008d82:	f1c5 050f 	rsb	r5, r5, #15
 8008d86:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008d8a:	4652      	mov	r2, sl
 8008d8c:	465b      	mov	r3, fp
 8008d8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d92:	f7f7 fc31 	bl	80005f8 <__aeabi_dmul>
 8008d96:	9b06      	ldr	r3, [sp, #24]
 8008d98:	1b5d      	subs	r5, r3, r5
 8008d9a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008d9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008da2:	e7e3      	b.n	8008d6c <_strtod_l+0x3fc>
 8008da4:	9b06      	ldr	r3, [sp, #24]
 8008da6:	3316      	adds	r3, #22
 8008da8:	db0b      	blt.n	8008dc2 <_strtod_l+0x452>
 8008daa:	9b05      	ldr	r3, [sp, #20]
 8008dac:	1b9e      	subs	r6, r3, r6
 8008dae:	4b59      	ldr	r3, [pc, #356]	; (8008f14 <_strtod_l+0x5a4>)
 8008db0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008db4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008db8:	4650      	mov	r0, sl
 8008dba:	4659      	mov	r1, fp
 8008dbc:	f7f7 fd46 	bl	800084c <__aeabi_ddiv>
 8008dc0:	e7d6      	b.n	8008d70 <_strtod_l+0x400>
 8008dc2:	9b06      	ldr	r3, [sp, #24]
 8008dc4:	eba5 0808 	sub.w	r8, r5, r8
 8008dc8:	4498      	add	r8, r3
 8008dca:	f1b8 0f00 	cmp.w	r8, #0
 8008dce:	dd74      	ble.n	8008eba <_strtod_l+0x54a>
 8008dd0:	f018 030f 	ands.w	r3, r8, #15
 8008dd4:	d00a      	beq.n	8008dec <_strtod_l+0x47c>
 8008dd6:	494f      	ldr	r1, [pc, #316]	; (8008f14 <_strtod_l+0x5a4>)
 8008dd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ddc:	4652      	mov	r2, sl
 8008dde:	465b      	mov	r3, fp
 8008de0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008de4:	f7f7 fc08 	bl	80005f8 <__aeabi_dmul>
 8008de8:	4682      	mov	sl, r0
 8008dea:	468b      	mov	fp, r1
 8008dec:	f038 080f 	bics.w	r8, r8, #15
 8008df0:	d04f      	beq.n	8008e92 <_strtod_l+0x522>
 8008df2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008df6:	dd22      	ble.n	8008e3e <_strtod_l+0x4ce>
 8008df8:	2500      	movs	r5, #0
 8008dfa:	462e      	mov	r6, r5
 8008dfc:	9507      	str	r5, [sp, #28]
 8008dfe:	9505      	str	r5, [sp, #20]
 8008e00:	2322      	movs	r3, #34	; 0x22
 8008e02:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008f1c <_strtod_l+0x5ac>
 8008e06:	6023      	str	r3, [r4, #0]
 8008e08:	f04f 0a00 	mov.w	sl, #0
 8008e0c:	9b07      	ldr	r3, [sp, #28]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	f43f adf2 	beq.w	80089f8 <_strtod_l+0x88>
 8008e14:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008e16:	4620      	mov	r0, r4
 8008e18:	f001 fec6 	bl	800aba8 <_Bfree>
 8008e1c:	9905      	ldr	r1, [sp, #20]
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f001 fec2 	bl	800aba8 <_Bfree>
 8008e24:	4631      	mov	r1, r6
 8008e26:	4620      	mov	r0, r4
 8008e28:	f001 febe 	bl	800aba8 <_Bfree>
 8008e2c:	9907      	ldr	r1, [sp, #28]
 8008e2e:	4620      	mov	r0, r4
 8008e30:	f001 feba 	bl	800aba8 <_Bfree>
 8008e34:	4629      	mov	r1, r5
 8008e36:	4620      	mov	r0, r4
 8008e38:	f001 feb6 	bl	800aba8 <_Bfree>
 8008e3c:	e5dc      	b.n	80089f8 <_strtod_l+0x88>
 8008e3e:	4b36      	ldr	r3, [pc, #216]	; (8008f18 <_strtod_l+0x5a8>)
 8008e40:	9304      	str	r3, [sp, #16]
 8008e42:	2300      	movs	r3, #0
 8008e44:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008e48:	4650      	mov	r0, sl
 8008e4a:	4659      	mov	r1, fp
 8008e4c:	4699      	mov	r9, r3
 8008e4e:	f1b8 0f01 	cmp.w	r8, #1
 8008e52:	dc21      	bgt.n	8008e98 <_strtod_l+0x528>
 8008e54:	b10b      	cbz	r3, 8008e5a <_strtod_l+0x4ea>
 8008e56:	4682      	mov	sl, r0
 8008e58:	468b      	mov	fp, r1
 8008e5a:	4b2f      	ldr	r3, [pc, #188]	; (8008f18 <_strtod_l+0x5a8>)
 8008e5c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008e60:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008e64:	4652      	mov	r2, sl
 8008e66:	465b      	mov	r3, fp
 8008e68:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008e6c:	f7f7 fbc4 	bl	80005f8 <__aeabi_dmul>
 8008e70:	4b2a      	ldr	r3, [pc, #168]	; (8008f1c <_strtod_l+0x5ac>)
 8008e72:	460a      	mov	r2, r1
 8008e74:	400b      	ands	r3, r1
 8008e76:	492a      	ldr	r1, [pc, #168]	; (8008f20 <_strtod_l+0x5b0>)
 8008e78:	428b      	cmp	r3, r1
 8008e7a:	4682      	mov	sl, r0
 8008e7c:	d8bc      	bhi.n	8008df8 <_strtod_l+0x488>
 8008e7e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008e82:	428b      	cmp	r3, r1
 8008e84:	bf86      	itte	hi
 8008e86:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008f24 <_strtod_l+0x5b4>
 8008e8a:	f04f 3aff 	movhi.w	sl, #4294967295
 8008e8e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008e92:	2300      	movs	r3, #0
 8008e94:	9304      	str	r3, [sp, #16]
 8008e96:	e084      	b.n	8008fa2 <_strtod_l+0x632>
 8008e98:	f018 0f01 	tst.w	r8, #1
 8008e9c:	d005      	beq.n	8008eaa <_strtod_l+0x53a>
 8008e9e:	9b04      	ldr	r3, [sp, #16]
 8008ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea4:	f7f7 fba8 	bl	80005f8 <__aeabi_dmul>
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	9a04      	ldr	r2, [sp, #16]
 8008eac:	3208      	adds	r2, #8
 8008eae:	f109 0901 	add.w	r9, r9, #1
 8008eb2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008eb6:	9204      	str	r2, [sp, #16]
 8008eb8:	e7c9      	b.n	8008e4e <_strtod_l+0x4de>
 8008eba:	d0ea      	beq.n	8008e92 <_strtod_l+0x522>
 8008ebc:	f1c8 0800 	rsb	r8, r8, #0
 8008ec0:	f018 020f 	ands.w	r2, r8, #15
 8008ec4:	d00a      	beq.n	8008edc <_strtod_l+0x56c>
 8008ec6:	4b13      	ldr	r3, [pc, #76]	; (8008f14 <_strtod_l+0x5a4>)
 8008ec8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ecc:	4650      	mov	r0, sl
 8008ece:	4659      	mov	r1, fp
 8008ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed4:	f7f7 fcba 	bl	800084c <__aeabi_ddiv>
 8008ed8:	4682      	mov	sl, r0
 8008eda:	468b      	mov	fp, r1
 8008edc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008ee0:	d0d7      	beq.n	8008e92 <_strtod_l+0x522>
 8008ee2:	f1b8 0f1f 	cmp.w	r8, #31
 8008ee6:	dd1f      	ble.n	8008f28 <_strtod_l+0x5b8>
 8008ee8:	2500      	movs	r5, #0
 8008eea:	462e      	mov	r6, r5
 8008eec:	9507      	str	r5, [sp, #28]
 8008eee:	9505      	str	r5, [sp, #20]
 8008ef0:	2322      	movs	r3, #34	; 0x22
 8008ef2:	f04f 0a00 	mov.w	sl, #0
 8008ef6:	f04f 0b00 	mov.w	fp, #0
 8008efa:	6023      	str	r3, [r4, #0]
 8008efc:	e786      	b.n	8008e0c <_strtod_l+0x49c>
 8008efe:	bf00      	nop
 8008f00:	0800cd11 	.word	0x0800cd11
 8008f04:	0800cd50 	.word	0x0800cd50
 8008f08:	0800cd09 	.word	0x0800cd09
 8008f0c:	0800ce94 	.word	0x0800ce94
 8008f10:	0800d15b 	.word	0x0800d15b
 8008f14:	0800d020 	.word	0x0800d020
 8008f18:	0800cff8 	.word	0x0800cff8
 8008f1c:	7ff00000 	.word	0x7ff00000
 8008f20:	7ca00000 	.word	0x7ca00000
 8008f24:	7fefffff 	.word	0x7fefffff
 8008f28:	f018 0310 	ands.w	r3, r8, #16
 8008f2c:	bf18      	it	ne
 8008f2e:	236a      	movne	r3, #106	; 0x6a
 8008f30:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80092e0 <_strtod_l+0x970>
 8008f34:	9304      	str	r3, [sp, #16]
 8008f36:	4650      	mov	r0, sl
 8008f38:	4659      	mov	r1, fp
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	f018 0f01 	tst.w	r8, #1
 8008f40:	d004      	beq.n	8008f4c <_strtod_l+0x5dc>
 8008f42:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008f46:	f7f7 fb57 	bl	80005f8 <__aeabi_dmul>
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008f50:	f109 0908 	add.w	r9, r9, #8
 8008f54:	d1f2      	bne.n	8008f3c <_strtod_l+0x5cc>
 8008f56:	b10b      	cbz	r3, 8008f5c <_strtod_l+0x5ec>
 8008f58:	4682      	mov	sl, r0
 8008f5a:	468b      	mov	fp, r1
 8008f5c:	9b04      	ldr	r3, [sp, #16]
 8008f5e:	b1c3      	cbz	r3, 8008f92 <_strtod_l+0x622>
 8008f60:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008f64:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	4659      	mov	r1, fp
 8008f6c:	dd11      	ble.n	8008f92 <_strtod_l+0x622>
 8008f6e:	2b1f      	cmp	r3, #31
 8008f70:	f340 8124 	ble.w	80091bc <_strtod_l+0x84c>
 8008f74:	2b34      	cmp	r3, #52	; 0x34
 8008f76:	bfde      	ittt	le
 8008f78:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008f7c:	f04f 33ff 	movle.w	r3, #4294967295
 8008f80:	fa03 f202 	lslle.w	r2, r3, r2
 8008f84:	f04f 0a00 	mov.w	sl, #0
 8008f88:	bfcc      	ite	gt
 8008f8a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008f8e:	ea02 0b01 	andle.w	fp, r2, r1
 8008f92:	2200      	movs	r2, #0
 8008f94:	2300      	movs	r3, #0
 8008f96:	4650      	mov	r0, sl
 8008f98:	4659      	mov	r1, fp
 8008f9a:	f7f7 fd95 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	d1a2      	bne.n	8008ee8 <_strtod_l+0x578>
 8008fa2:	9b07      	ldr	r3, [sp, #28]
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	9908      	ldr	r1, [sp, #32]
 8008fa8:	462b      	mov	r3, r5
 8008faa:	463a      	mov	r2, r7
 8008fac:	4620      	mov	r0, r4
 8008fae:	f001 fe63 	bl	800ac78 <__s2b>
 8008fb2:	9007      	str	r0, [sp, #28]
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	f43f af1f 	beq.w	8008df8 <_strtod_l+0x488>
 8008fba:	9b05      	ldr	r3, [sp, #20]
 8008fbc:	1b9e      	subs	r6, r3, r6
 8008fbe:	9b06      	ldr	r3, [sp, #24]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	bfb4      	ite	lt
 8008fc4:	4633      	movlt	r3, r6
 8008fc6:	2300      	movge	r3, #0
 8008fc8:	930c      	str	r3, [sp, #48]	; 0x30
 8008fca:	9b06      	ldr	r3, [sp, #24]
 8008fcc:	2500      	movs	r5, #0
 8008fce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008fd2:	9312      	str	r3, [sp, #72]	; 0x48
 8008fd4:	462e      	mov	r6, r5
 8008fd6:	9b07      	ldr	r3, [sp, #28]
 8008fd8:	4620      	mov	r0, r4
 8008fda:	6859      	ldr	r1, [r3, #4]
 8008fdc:	f001 fda4 	bl	800ab28 <_Balloc>
 8008fe0:	9005      	str	r0, [sp, #20]
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	f43f af0c 	beq.w	8008e00 <_strtod_l+0x490>
 8008fe8:	9b07      	ldr	r3, [sp, #28]
 8008fea:	691a      	ldr	r2, [r3, #16]
 8008fec:	3202      	adds	r2, #2
 8008fee:	f103 010c 	add.w	r1, r3, #12
 8008ff2:	0092      	lsls	r2, r2, #2
 8008ff4:	300c      	adds	r0, #12
 8008ff6:	f001 fd89 	bl	800ab0c <memcpy>
 8008ffa:	ec4b ab10 	vmov	d0, sl, fp
 8008ffe:	aa1a      	add	r2, sp, #104	; 0x68
 8009000:	a919      	add	r1, sp, #100	; 0x64
 8009002:	4620      	mov	r0, r4
 8009004:	f002 f97e 	bl	800b304 <__d2b>
 8009008:	ec4b ab18 	vmov	d8, sl, fp
 800900c:	9018      	str	r0, [sp, #96]	; 0x60
 800900e:	2800      	cmp	r0, #0
 8009010:	f43f aef6 	beq.w	8008e00 <_strtod_l+0x490>
 8009014:	2101      	movs	r1, #1
 8009016:	4620      	mov	r0, r4
 8009018:	f001 fec8 	bl	800adac <__i2b>
 800901c:	4606      	mov	r6, r0
 800901e:	2800      	cmp	r0, #0
 8009020:	f43f aeee 	beq.w	8008e00 <_strtod_l+0x490>
 8009024:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009026:	9904      	ldr	r1, [sp, #16]
 8009028:	2b00      	cmp	r3, #0
 800902a:	bfab      	itete	ge
 800902c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800902e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009030:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009032:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009036:	bfac      	ite	ge
 8009038:	eb03 0902 	addge.w	r9, r3, r2
 800903c:	1ad7      	sublt	r7, r2, r3
 800903e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009040:	eba3 0801 	sub.w	r8, r3, r1
 8009044:	4490      	add	r8, r2
 8009046:	4ba1      	ldr	r3, [pc, #644]	; (80092cc <_strtod_l+0x95c>)
 8009048:	f108 38ff 	add.w	r8, r8, #4294967295
 800904c:	4598      	cmp	r8, r3
 800904e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009052:	f280 80c7 	bge.w	80091e4 <_strtod_l+0x874>
 8009056:	eba3 0308 	sub.w	r3, r3, r8
 800905a:	2b1f      	cmp	r3, #31
 800905c:	eba2 0203 	sub.w	r2, r2, r3
 8009060:	f04f 0101 	mov.w	r1, #1
 8009064:	f300 80b1 	bgt.w	80091ca <_strtod_l+0x85a>
 8009068:	fa01 f303 	lsl.w	r3, r1, r3
 800906c:	930d      	str	r3, [sp, #52]	; 0x34
 800906e:	2300      	movs	r3, #0
 8009070:	9308      	str	r3, [sp, #32]
 8009072:	eb09 0802 	add.w	r8, r9, r2
 8009076:	9b04      	ldr	r3, [sp, #16]
 8009078:	45c1      	cmp	r9, r8
 800907a:	4417      	add	r7, r2
 800907c:	441f      	add	r7, r3
 800907e:	464b      	mov	r3, r9
 8009080:	bfa8      	it	ge
 8009082:	4643      	movge	r3, r8
 8009084:	42bb      	cmp	r3, r7
 8009086:	bfa8      	it	ge
 8009088:	463b      	movge	r3, r7
 800908a:	2b00      	cmp	r3, #0
 800908c:	bfc2      	ittt	gt
 800908e:	eba8 0803 	subgt.w	r8, r8, r3
 8009092:	1aff      	subgt	r7, r7, r3
 8009094:	eba9 0903 	subgt.w	r9, r9, r3
 8009098:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800909a:	2b00      	cmp	r3, #0
 800909c:	dd17      	ble.n	80090ce <_strtod_l+0x75e>
 800909e:	4631      	mov	r1, r6
 80090a0:	461a      	mov	r2, r3
 80090a2:	4620      	mov	r0, r4
 80090a4:	f001 ff42 	bl	800af2c <__pow5mult>
 80090a8:	4606      	mov	r6, r0
 80090aa:	2800      	cmp	r0, #0
 80090ac:	f43f aea8 	beq.w	8008e00 <_strtod_l+0x490>
 80090b0:	4601      	mov	r1, r0
 80090b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80090b4:	4620      	mov	r0, r4
 80090b6:	f001 fe8f 	bl	800add8 <__multiply>
 80090ba:	900b      	str	r0, [sp, #44]	; 0x2c
 80090bc:	2800      	cmp	r0, #0
 80090be:	f43f ae9f 	beq.w	8008e00 <_strtod_l+0x490>
 80090c2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80090c4:	4620      	mov	r0, r4
 80090c6:	f001 fd6f 	bl	800aba8 <_Bfree>
 80090ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090cc:	9318      	str	r3, [sp, #96]	; 0x60
 80090ce:	f1b8 0f00 	cmp.w	r8, #0
 80090d2:	f300 808c 	bgt.w	80091ee <_strtod_l+0x87e>
 80090d6:	9b06      	ldr	r3, [sp, #24]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	dd08      	ble.n	80090ee <_strtod_l+0x77e>
 80090dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80090de:	9905      	ldr	r1, [sp, #20]
 80090e0:	4620      	mov	r0, r4
 80090e2:	f001 ff23 	bl	800af2c <__pow5mult>
 80090e6:	9005      	str	r0, [sp, #20]
 80090e8:	2800      	cmp	r0, #0
 80090ea:	f43f ae89 	beq.w	8008e00 <_strtod_l+0x490>
 80090ee:	2f00      	cmp	r7, #0
 80090f0:	dd08      	ble.n	8009104 <_strtod_l+0x794>
 80090f2:	9905      	ldr	r1, [sp, #20]
 80090f4:	463a      	mov	r2, r7
 80090f6:	4620      	mov	r0, r4
 80090f8:	f001 ff72 	bl	800afe0 <__lshift>
 80090fc:	9005      	str	r0, [sp, #20]
 80090fe:	2800      	cmp	r0, #0
 8009100:	f43f ae7e 	beq.w	8008e00 <_strtod_l+0x490>
 8009104:	f1b9 0f00 	cmp.w	r9, #0
 8009108:	dd08      	ble.n	800911c <_strtod_l+0x7ac>
 800910a:	4631      	mov	r1, r6
 800910c:	464a      	mov	r2, r9
 800910e:	4620      	mov	r0, r4
 8009110:	f001 ff66 	bl	800afe0 <__lshift>
 8009114:	4606      	mov	r6, r0
 8009116:	2800      	cmp	r0, #0
 8009118:	f43f ae72 	beq.w	8008e00 <_strtod_l+0x490>
 800911c:	9a05      	ldr	r2, [sp, #20]
 800911e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009120:	4620      	mov	r0, r4
 8009122:	f001 ffe9 	bl	800b0f8 <__mdiff>
 8009126:	4605      	mov	r5, r0
 8009128:	2800      	cmp	r0, #0
 800912a:	f43f ae69 	beq.w	8008e00 <_strtod_l+0x490>
 800912e:	68c3      	ldr	r3, [r0, #12]
 8009130:	930b      	str	r3, [sp, #44]	; 0x2c
 8009132:	2300      	movs	r3, #0
 8009134:	60c3      	str	r3, [r0, #12]
 8009136:	4631      	mov	r1, r6
 8009138:	f001 ffc2 	bl	800b0c0 <__mcmp>
 800913c:	2800      	cmp	r0, #0
 800913e:	da60      	bge.n	8009202 <_strtod_l+0x892>
 8009140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009142:	ea53 030a 	orrs.w	r3, r3, sl
 8009146:	f040 8082 	bne.w	800924e <_strtod_l+0x8de>
 800914a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800914e:	2b00      	cmp	r3, #0
 8009150:	d17d      	bne.n	800924e <_strtod_l+0x8de>
 8009152:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009156:	0d1b      	lsrs	r3, r3, #20
 8009158:	051b      	lsls	r3, r3, #20
 800915a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800915e:	d976      	bls.n	800924e <_strtod_l+0x8de>
 8009160:	696b      	ldr	r3, [r5, #20]
 8009162:	b913      	cbnz	r3, 800916a <_strtod_l+0x7fa>
 8009164:	692b      	ldr	r3, [r5, #16]
 8009166:	2b01      	cmp	r3, #1
 8009168:	dd71      	ble.n	800924e <_strtod_l+0x8de>
 800916a:	4629      	mov	r1, r5
 800916c:	2201      	movs	r2, #1
 800916e:	4620      	mov	r0, r4
 8009170:	f001 ff36 	bl	800afe0 <__lshift>
 8009174:	4631      	mov	r1, r6
 8009176:	4605      	mov	r5, r0
 8009178:	f001 ffa2 	bl	800b0c0 <__mcmp>
 800917c:	2800      	cmp	r0, #0
 800917e:	dd66      	ble.n	800924e <_strtod_l+0x8de>
 8009180:	9904      	ldr	r1, [sp, #16]
 8009182:	4a53      	ldr	r2, [pc, #332]	; (80092d0 <_strtod_l+0x960>)
 8009184:	465b      	mov	r3, fp
 8009186:	2900      	cmp	r1, #0
 8009188:	f000 8081 	beq.w	800928e <_strtod_l+0x91e>
 800918c:	ea02 010b 	and.w	r1, r2, fp
 8009190:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009194:	dc7b      	bgt.n	800928e <_strtod_l+0x91e>
 8009196:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800919a:	f77f aea9 	ble.w	8008ef0 <_strtod_l+0x580>
 800919e:	4b4d      	ldr	r3, [pc, #308]	; (80092d4 <_strtod_l+0x964>)
 80091a0:	4650      	mov	r0, sl
 80091a2:	4659      	mov	r1, fp
 80091a4:	2200      	movs	r2, #0
 80091a6:	f7f7 fa27 	bl	80005f8 <__aeabi_dmul>
 80091aa:	460b      	mov	r3, r1
 80091ac:	4303      	orrs	r3, r0
 80091ae:	bf08      	it	eq
 80091b0:	2322      	moveq	r3, #34	; 0x22
 80091b2:	4682      	mov	sl, r0
 80091b4:	468b      	mov	fp, r1
 80091b6:	bf08      	it	eq
 80091b8:	6023      	streq	r3, [r4, #0]
 80091ba:	e62b      	b.n	8008e14 <_strtod_l+0x4a4>
 80091bc:	f04f 32ff 	mov.w	r2, #4294967295
 80091c0:	fa02 f303 	lsl.w	r3, r2, r3
 80091c4:	ea03 0a0a 	and.w	sl, r3, sl
 80091c8:	e6e3      	b.n	8008f92 <_strtod_l+0x622>
 80091ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80091ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80091d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80091d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80091da:	fa01 f308 	lsl.w	r3, r1, r8
 80091de:	9308      	str	r3, [sp, #32]
 80091e0:	910d      	str	r1, [sp, #52]	; 0x34
 80091e2:	e746      	b.n	8009072 <_strtod_l+0x702>
 80091e4:	2300      	movs	r3, #0
 80091e6:	9308      	str	r3, [sp, #32]
 80091e8:	2301      	movs	r3, #1
 80091ea:	930d      	str	r3, [sp, #52]	; 0x34
 80091ec:	e741      	b.n	8009072 <_strtod_l+0x702>
 80091ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80091f0:	4642      	mov	r2, r8
 80091f2:	4620      	mov	r0, r4
 80091f4:	f001 fef4 	bl	800afe0 <__lshift>
 80091f8:	9018      	str	r0, [sp, #96]	; 0x60
 80091fa:	2800      	cmp	r0, #0
 80091fc:	f47f af6b 	bne.w	80090d6 <_strtod_l+0x766>
 8009200:	e5fe      	b.n	8008e00 <_strtod_l+0x490>
 8009202:	465f      	mov	r7, fp
 8009204:	d16e      	bne.n	80092e4 <_strtod_l+0x974>
 8009206:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009208:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800920c:	b342      	cbz	r2, 8009260 <_strtod_l+0x8f0>
 800920e:	4a32      	ldr	r2, [pc, #200]	; (80092d8 <_strtod_l+0x968>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d128      	bne.n	8009266 <_strtod_l+0x8f6>
 8009214:	9b04      	ldr	r3, [sp, #16]
 8009216:	4651      	mov	r1, sl
 8009218:	b1eb      	cbz	r3, 8009256 <_strtod_l+0x8e6>
 800921a:	4b2d      	ldr	r3, [pc, #180]	; (80092d0 <_strtod_l+0x960>)
 800921c:	403b      	ands	r3, r7
 800921e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009222:	f04f 32ff 	mov.w	r2, #4294967295
 8009226:	d819      	bhi.n	800925c <_strtod_l+0x8ec>
 8009228:	0d1b      	lsrs	r3, r3, #20
 800922a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800922e:	fa02 f303 	lsl.w	r3, r2, r3
 8009232:	4299      	cmp	r1, r3
 8009234:	d117      	bne.n	8009266 <_strtod_l+0x8f6>
 8009236:	4b29      	ldr	r3, [pc, #164]	; (80092dc <_strtod_l+0x96c>)
 8009238:	429f      	cmp	r7, r3
 800923a:	d102      	bne.n	8009242 <_strtod_l+0x8d2>
 800923c:	3101      	adds	r1, #1
 800923e:	f43f addf 	beq.w	8008e00 <_strtod_l+0x490>
 8009242:	4b23      	ldr	r3, [pc, #140]	; (80092d0 <_strtod_l+0x960>)
 8009244:	403b      	ands	r3, r7
 8009246:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800924a:	f04f 0a00 	mov.w	sl, #0
 800924e:	9b04      	ldr	r3, [sp, #16]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d1a4      	bne.n	800919e <_strtod_l+0x82e>
 8009254:	e5de      	b.n	8008e14 <_strtod_l+0x4a4>
 8009256:	f04f 33ff 	mov.w	r3, #4294967295
 800925a:	e7ea      	b.n	8009232 <_strtod_l+0x8c2>
 800925c:	4613      	mov	r3, r2
 800925e:	e7e8      	b.n	8009232 <_strtod_l+0x8c2>
 8009260:	ea53 030a 	orrs.w	r3, r3, sl
 8009264:	d08c      	beq.n	8009180 <_strtod_l+0x810>
 8009266:	9b08      	ldr	r3, [sp, #32]
 8009268:	b1db      	cbz	r3, 80092a2 <_strtod_l+0x932>
 800926a:	423b      	tst	r3, r7
 800926c:	d0ef      	beq.n	800924e <_strtod_l+0x8de>
 800926e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009270:	9a04      	ldr	r2, [sp, #16]
 8009272:	4650      	mov	r0, sl
 8009274:	4659      	mov	r1, fp
 8009276:	b1c3      	cbz	r3, 80092aa <_strtod_l+0x93a>
 8009278:	f7ff fb5c 	bl	8008934 <sulp>
 800927c:	4602      	mov	r2, r0
 800927e:	460b      	mov	r3, r1
 8009280:	ec51 0b18 	vmov	r0, r1, d8
 8009284:	f7f7 f802 	bl	800028c <__adddf3>
 8009288:	4682      	mov	sl, r0
 800928a:	468b      	mov	fp, r1
 800928c:	e7df      	b.n	800924e <_strtod_l+0x8de>
 800928e:	4013      	ands	r3, r2
 8009290:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009294:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009298:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800929c:	f04f 3aff 	mov.w	sl, #4294967295
 80092a0:	e7d5      	b.n	800924e <_strtod_l+0x8de>
 80092a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092a4:	ea13 0f0a 	tst.w	r3, sl
 80092a8:	e7e0      	b.n	800926c <_strtod_l+0x8fc>
 80092aa:	f7ff fb43 	bl	8008934 <sulp>
 80092ae:	4602      	mov	r2, r0
 80092b0:	460b      	mov	r3, r1
 80092b2:	ec51 0b18 	vmov	r0, r1, d8
 80092b6:	f7f6 ffe7 	bl	8000288 <__aeabi_dsub>
 80092ba:	2200      	movs	r2, #0
 80092bc:	2300      	movs	r3, #0
 80092be:	4682      	mov	sl, r0
 80092c0:	468b      	mov	fp, r1
 80092c2:	f7f7 fc01 	bl	8000ac8 <__aeabi_dcmpeq>
 80092c6:	2800      	cmp	r0, #0
 80092c8:	d0c1      	beq.n	800924e <_strtod_l+0x8de>
 80092ca:	e611      	b.n	8008ef0 <_strtod_l+0x580>
 80092cc:	fffffc02 	.word	0xfffffc02
 80092d0:	7ff00000 	.word	0x7ff00000
 80092d4:	39500000 	.word	0x39500000
 80092d8:	000fffff 	.word	0x000fffff
 80092dc:	7fefffff 	.word	0x7fefffff
 80092e0:	0800cd68 	.word	0x0800cd68
 80092e4:	4631      	mov	r1, r6
 80092e6:	4628      	mov	r0, r5
 80092e8:	f002 f868 	bl	800b3bc <__ratio>
 80092ec:	ec59 8b10 	vmov	r8, r9, d0
 80092f0:	ee10 0a10 	vmov	r0, s0
 80092f4:	2200      	movs	r2, #0
 80092f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80092fa:	4649      	mov	r1, r9
 80092fc:	f7f7 fbf8 	bl	8000af0 <__aeabi_dcmple>
 8009300:	2800      	cmp	r0, #0
 8009302:	d07a      	beq.n	80093fa <_strtod_l+0xa8a>
 8009304:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009306:	2b00      	cmp	r3, #0
 8009308:	d04a      	beq.n	80093a0 <_strtod_l+0xa30>
 800930a:	4b95      	ldr	r3, [pc, #596]	; (8009560 <_strtod_l+0xbf0>)
 800930c:	2200      	movs	r2, #0
 800930e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009312:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009560 <_strtod_l+0xbf0>
 8009316:	f04f 0800 	mov.w	r8, #0
 800931a:	4b92      	ldr	r3, [pc, #584]	; (8009564 <_strtod_l+0xbf4>)
 800931c:	403b      	ands	r3, r7
 800931e:	930d      	str	r3, [sp, #52]	; 0x34
 8009320:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009322:	4b91      	ldr	r3, [pc, #580]	; (8009568 <_strtod_l+0xbf8>)
 8009324:	429a      	cmp	r2, r3
 8009326:	f040 80b0 	bne.w	800948a <_strtod_l+0xb1a>
 800932a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800932e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009332:	ec4b ab10 	vmov	d0, sl, fp
 8009336:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800933a:	f001 ff67 	bl	800b20c <__ulp>
 800933e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009342:	ec53 2b10 	vmov	r2, r3, d0
 8009346:	f7f7 f957 	bl	80005f8 <__aeabi_dmul>
 800934a:	4652      	mov	r2, sl
 800934c:	465b      	mov	r3, fp
 800934e:	f7f6 ff9d 	bl	800028c <__adddf3>
 8009352:	460b      	mov	r3, r1
 8009354:	4983      	ldr	r1, [pc, #524]	; (8009564 <_strtod_l+0xbf4>)
 8009356:	4a85      	ldr	r2, [pc, #532]	; (800956c <_strtod_l+0xbfc>)
 8009358:	4019      	ands	r1, r3
 800935a:	4291      	cmp	r1, r2
 800935c:	4682      	mov	sl, r0
 800935e:	d960      	bls.n	8009422 <_strtod_l+0xab2>
 8009360:	ee18 3a90 	vmov	r3, s17
 8009364:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009368:	4293      	cmp	r3, r2
 800936a:	d104      	bne.n	8009376 <_strtod_l+0xa06>
 800936c:	ee18 3a10 	vmov	r3, s16
 8009370:	3301      	adds	r3, #1
 8009372:	f43f ad45 	beq.w	8008e00 <_strtod_l+0x490>
 8009376:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009578 <_strtod_l+0xc08>
 800937a:	f04f 3aff 	mov.w	sl, #4294967295
 800937e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009380:	4620      	mov	r0, r4
 8009382:	f001 fc11 	bl	800aba8 <_Bfree>
 8009386:	9905      	ldr	r1, [sp, #20]
 8009388:	4620      	mov	r0, r4
 800938a:	f001 fc0d 	bl	800aba8 <_Bfree>
 800938e:	4631      	mov	r1, r6
 8009390:	4620      	mov	r0, r4
 8009392:	f001 fc09 	bl	800aba8 <_Bfree>
 8009396:	4629      	mov	r1, r5
 8009398:	4620      	mov	r0, r4
 800939a:	f001 fc05 	bl	800aba8 <_Bfree>
 800939e:	e61a      	b.n	8008fd6 <_strtod_l+0x666>
 80093a0:	f1ba 0f00 	cmp.w	sl, #0
 80093a4:	d11b      	bne.n	80093de <_strtod_l+0xa6e>
 80093a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093aa:	b9f3      	cbnz	r3, 80093ea <_strtod_l+0xa7a>
 80093ac:	4b6c      	ldr	r3, [pc, #432]	; (8009560 <_strtod_l+0xbf0>)
 80093ae:	2200      	movs	r2, #0
 80093b0:	4640      	mov	r0, r8
 80093b2:	4649      	mov	r1, r9
 80093b4:	f7f7 fb92 	bl	8000adc <__aeabi_dcmplt>
 80093b8:	b9d0      	cbnz	r0, 80093f0 <_strtod_l+0xa80>
 80093ba:	4640      	mov	r0, r8
 80093bc:	4649      	mov	r1, r9
 80093be:	4b6c      	ldr	r3, [pc, #432]	; (8009570 <_strtod_l+0xc00>)
 80093c0:	2200      	movs	r2, #0
 80093c2:	f7f7 f919 	bl	80005f8 <__aeabi_dmul>
 80093c6:	4680      	mov	r8, r0
 80093c8:	4689      	mov	r9, r1
 80093ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80093ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80093d2:	9315      	str	r3, [sp, #84]	; 0x54
 80093d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80093d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80093dc:	e79d      	b.n	800931a <_strtod_l+0x9aa>
 80093de:	f1ba 0f01 	cmp.w	sl, #1
 80093e2:	d102      	bne.n	80093ea <_strtod_l+0xa7a>
 80093e4:	2f00      	cmp	r7, #0
 80093e6:	f43f ad83 	beq.w	8008ef0 <_strtod_l+0x580>
 80093ea:	4b62      	ldr	r3, [pc, #392]	; (8009574 <_strtod_l+0xc04>)
 80093ec:	2200      	movs	r2, #0
 80093ee:	e78e      	b.n	800930e <_strtod_l+0x99e>
 80093f0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009570 <_strtod_l+0xc00>
 80093f4:	f04f 0800 	mov.w	r8, #0
 80093f8:	e7e7      	b.n	80093ca <_strtod_l+0xa5a>
 80093fa:	4b5d      	ldr	r3, [pc, #372]	; (8009570 <_strtod_l+0xc00>)
 80093fc:	4640      	mov	r0, r8
 80093fe:	4649      	mov	r1, r9
 8009400:	2200      	movs	r2, #0
 8009402:	f7f7 f8f9 	bl	80005f8 <__aeabi_dmul>
 8009406:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009408:	4680      	mov	r8, r0
 800940a:	4689      	mov	r9, r1
 800940c:	b933      	cbnz	r3, 800941c <_strtod_l+0xaac>
 800940e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009412:	900e      	str	r0, [sp, #56]	; 0x38
 8009414:	930f      	str	r3, [sp, #60]	; 0x3c
 8009416:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800941a:	e7dd      	b.n	80093d8 <_strtod_l+0xa68>
 800941c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009420:	e7f9      	b.n	8009416 <_strtod_l+0xaa6>
 8009422:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009426:	9b04      	ldr	r3, [sp, #16]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1a8      	bne.n	800937e <_strtod_l+0xa0e>
 800942c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009430:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009432:	0d1b      	lsrs	r3, r3, #20
 8009434:	051b      	lsls	r3, r3, #20
 8009436:	429a      	cmp	r2, r3
 8009438:	d1a1      	bne.n	800937e <_strtod_l+0xa0e>
 800943a:	4640      	mov	r0, r8
 800943c:	4649      	mov	r1, r9
 800943e:	f7f7 fd49 	bl	8000ed4 <__aeabi_d2lz>
 8009442:	f7f7 f8ab 	bl	800059c <__aeabi_l2d>
 8009446:	4602      	mov	r2, r0
 8009448:	460b      	mov	r3, r1
 800944a:	4640      	mov	r0, r8
 800944c:	4649      	mov	r1, r9
 800944e:	f7f6 ff1b 	bl	8000288 <__aeabi_dsub>
 8009452:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009454:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009458:	ea43 030a 	orr.w	r3, r3, sl
 800945c:	4313      	orrs	r3, r2
 800945e:	4680      	mov	r8, r0
 8009460:	4689      	mov	r9, r1
 8009462:	d055      	beq.n	8009510 <_strtod_l+0xba0>
 8009464:	a336      	add	r3, pc, #216	; (adr r3, 8009540 <_strtod_l+0xbd0>)
 8009466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946a:	f7f7 fb37 	bl	8000adc <__aeabi_dcmplt>
 800946e:	2800      	cmp	r0, #0
 8009470:	f47f acd0 	bne.w	8008e14 <_strtod_l+0x4a4>
 8009474:	a334      	add	r3, pc, #208	; (adr r3, 8009548 <_strtod_l+0xbd8>)
 8009476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800947a:	4640      	mov	r0, r8
 800947c:	4649      	mov	r1, r9
 800947e:	f7f7 fb4b 	bl	8000b18 <__aeabi_dcmpgt>
 8009482:	2800      	cmp	r0, #0
 8009484:	f43f af7b 	beq.w	800937e <_strtod_l+0xa0e>
 8009488:	e4c4      	b.n	8008e14 <_strtod_l+0x4a4>
 800948a:	9b04      	ldr	r3, [sp, #16]
 800948c:	b333      	cbz	r3, 80094dc <_strtod_l+0xb6c>
 800948e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009490:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009494:	d822      	bhi.n	80094dc <_strtod_l+0xb6c>
 8009496:	a32e      	add	r3, pc, #184	; (adr r3, 8009550 <_strtod_l+0xbe0>)
 8009498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949c:	4640      	mov	r0, r8
 800949e:	4649      	mov	r1, r9
 80094a0:	f7f7 fb26 	bl	8000af0 <__aeabi_dcmple>
 80094a4:	b1a0      	cbz	r0, 80094d0 <_strtod_l+0xb60>
 80094a6:	4649      	mov	r1, r9
 80094a8:	4640      	mov	r0, r8
 80094aa:	f7f7 fb7d 	bl	8000ba8 <__aeabi_d2uiz>
 80094ae:	2801      	cmp	r0, #1
 80094b0:	bf38      	it	cc
 80094b2:	2001      	movcc	r0, #1
 80094b4:	f7f7 f826 	bl	8000504 <__aeabi_ui2d>
 80094b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094ba:	4680      	mov	r8, r0
 80094bc:	4689      	mov	r9, r1
 80094be:	bb23      	cbnz	r3, 800950a <_strtod_l+0xb9a>
 80094c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094c4:	9010      	str	r0, [sp, #64]	; 0x40
 80094c6:	9311      	str	r3, [sp, #68]	; 0x44
 80094c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80094cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80094d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80094d4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80094d8:	1a9b      	subs	r3, r3, r2
 80094da:	9309      	str	r3, [sp, #36]	; 0x24
 80094dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80094e0:	eeb0 0a48 	vmov.f32	s0, s16
 80094e4:	eef0 0a68 	vmov.f32	s1, s17
 80094e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80094ec:	f001 fe8e 	bl	800b20c <__ulp>
 80094f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80094f4:	ec53 2b10 	vmov	r2, r3, d0
 80094f8:	f7f7 f87e 	bl	80005f8 <__aeabi_dmul>
 80094fc:	ec53 2b18 	vmov	r2, r3, d8
 8009500:	f7f6 fec4 	bl	800028c <__adddf3>
 8009504:	4682      	mov	sl, r0
 8009506:	468b      	mov	fp, r1
 8009508:	e78d      	b.n	8009426 <_strtod_l+0xab6>
 800950a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800950e:	e7db      	b.n	80094c8 <_strtod_l+0xb58>
 8009510:	a311      	add	r3, pc, #68	; (adr r3, 8009558 <_strtod_l+0xbe8>)
 8009512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009516:	f7f7 fae1 	bl	8000adc <__aeabi_dcmplt>
 800951a:	e7b2      	b.n	8009482 <_strtod_l+0xb12>
 800951c:	2300      	movs	r3, #0
 800951e:	930a      	str	r3, [sp, #40]	; 0x28
 8009520:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009522:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009524:	6013      	str	r3, [r2, #0]
 8009526:	f7ff ba6b 	b.w	8008a00 <_strtod_l+0x90>
 800952a:	2a65      	cmp	r2, #101	; 0x65
 800952c:	f43f ab5f 	beq.w	8008bee <_strtod_l+0x27e>
 8009530:	2a45      	cmp	r2, #69	; 0x45
 8009532:	f43f ab5c 	beq.w	8008bee <_strtod_l+0x27e>
 8009536:	2301      	movs	r3, #1
 8009538:	f7ff bb94 	b.w	8008c64 <_strtod_l+0x2f4>
 800953c:	f3af 8000 	nop.w
 8009540:	94a03595 	.word	0x94a03595
 8009544:	3fdfffff 	.word	0x3fdfffff
 8009548:	35afe535 	.word	0x35afe535
 800954c:	3fe00000 	.word	0x3fe00000
 8009550:	ffc00000 	.word	0xffc00000
 8009554:	41dfffff 	.word	0x41dfffff
 8009558:	94a03595 	.word	0x94a03595
 800955c:	3fcfffff 	.word	0x3fcfffff
 8009560:	3ff00000 	.word	0x3ff00000
 8009564:	7ff00000 	.word	0x7ff00000
 8009568:	7fe00000 	.word	0x7fe00000
 800956c:	7c9fffff 	.word	0x7c9fffff
 8009570:	3fe00000 	.word	0x3fe00000
 8009574:	bff00000 	.word	0xbff00000
 8009578:	7fefffff 	.word	0x7fefffff

0800957c <_strtod_r>:
 800957c:	4b01      	ldr	r3, [pc, #4]	; (8009584 <_strtod_r+0x8>)
 800957e:	f7ff b9f7 	b.w	8008970 <_strtod_l>
 8009582:	bf00      	nop
 8009584:	20000158 	.word	0x20000158

08009588 <_strtol_l.constprop.0>:
 8009588:	2b01      	cmp	r3, #1
 800958a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800958e:	d001      	beq.n	8009594 <_strtol_l.constprop.0+0xc>
 8009590:	2b24      	cmp	r3, #36	; 0x24
 8009592:	d906      	bls.n	80095a2 <_strtol_l.constprop.0+0x1a>
 8009594:	f7fe fa68 	bl	8007a68 <__errno>
 8009598:	2316      	movs	r3, #22
 800959a:	6003      	str	r3, [r0, #0]
 800959c:	2000      	movs	r0, #0
 800959e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009688 <_strtol_l.constprop.0+0x100>
 80095a6:	460d      	mov	r5, r1
 80095a8:	462e      	mov	r6, r5
 80095aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095ae:	f814 700c 	ldrb.w	r7, [r4, ip]
 80095b2:	f017 0708 	ands.w	r7, r7, #8
 80095b6:	d1f7      	bne.n	80095a8 <_strtol_l.constprop.0+0x20>
 80095b8:	2c2d      	cmp	r4, #45	; 0x2d
 80095ba:	d132      	bne.n	8009622 <_strtol_l.constprop.0+0x9a>
 80095bc:	782c      	ldrb	r4, [r5, #0]
 80095be:	2701      	movs	r7, #1
 80095c0:	1cb5      	adds	r5, r6, #2
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d05b      	beq.n	800967e <_strtol_l.constprop.0+0xf6>
 80095c6:	2b10      	cmp	r3, #16
 80095c8:	d109      	bne.n	80095de <_strtol_l.constprop.0+0x56>
 80095ca:	2c30      	cmp	r4, #48	; 0x30
 80095cc:	d107      	bne.n	80095de <_strtol_l.constprop.0+0x56>
 80095ce:	782c      	ldrb	r4, [r5, #0]
 80095d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80095d4:	2c58      	cmp	r4, #88	; 0x58
 80095d6:	d14d      	bne.n	8009674 <_strtol_l.constprop.0+0xec>
 80095d8:	786c      	ldrb	r4, [r5, #1]
 80095da:	2310      	movs	r3, #16
 80095dc:	3502      	adds	r5, #2
 80095de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80095e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80095e6:	f04f 0c00 	mov.w	ip, #0
 80095ea:	fbb8 f9f3 	udiv	r9, r8, r3
 80095ee:	4666      	mov	r6, ip
 80095f0:	fb03 8a19 	mls	sl, r3, r9, r8
 80095f4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80095f8:	f1be 0f09 	cmp.w	lr, #9
 80095fc:	d816      	bhi.n	800962c <_strtol_l.constprop.0+0xa4>
 80095fe:	4674      	mov	r4, lr
 8009600:	42a3      	cmp	r3, r4
 8009602:	dd24      	ble.n	800964e <_strtol_l.constprop.0+0xc6>
 8009604:	f1bc 0f00 	cmp.w	ip, #0
 8009608:	db1e      	blt.n	8009648 <_strtol_l.constprop.0+0xc0>
 800960a:	45b1      	cmp	r9, r6
 800960c:	d31c      	bcc.n	8009648 <_strtol_l.constprop.0+0xc0>
 800960e:	d101      	bne.n	8009614 <_strtol_l.constprop.0+0x8c>
 8009610:	45a2      	cmp	sl, r4
 8009612:	db19      	blt.n	8009648 <_strtol_l.constprop.0+0xc0>
 8009614:	fb06 4603 	mla	r6, r6, r3, r4
 8009618:	f04f 0c01 	mov.w	ip, #1
 800961c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009620:	e7e8      	b.n	80095f4 <_strtol_l.constprop.0+0x6c>
 8009622:	2c2b      	cmp	r4, #43	; 0x2b
 8009624:	bf04      	itt	eq
 8009626:	782c      	ldrbeq	r4, [r5, #0]
 8009628:	1cb5      	addeq	r5, r6, #2
 800962a:	e7ca      	b.n	80095c2 <_strtol_l.constprop.0+0x3a>
 800962c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009630:	f1be 0f19 	cmp.w	lr, #25
 8009634:	d801      	bhi.n	800963a <_strtol_l.constprop.0+0xb2>
 8009636:	3c37      	subs	r4, #55	; 0x37
 8009638:	e7e2      	b.n	8009600 <_strtol_l.constprop.0+0x78>
 800963a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800963e:	f1be 0f19 	cmp.w	lr, #25
 8009642:	d804      	bhi.n	800964e <_strtol_l.constprop.0+0xc6>
 8009644:	3c57      	subs	r4, #87	; 0x57
 8009646:	e7db      	b.n	8009600 <_strtol_l.constprop.0+0x78>
 8009648:	f04f 3cff 	mov.w	ip, #4294967295
 800964c:	e7e6      	b.n	800961c <_strtol_l.constprop.0+0x94>
 800964e:	f1bc 0f00 	cmp.w	ip, #0
 8009652:	da05      	bge.n	8009660 <_strtol_l.constprop.0+0xd8>
 8009654:	2322      	movs	r3, #34	; 0x22
 8009656:	6003      	str	r3, [r0, #0]
 8009658:	4646      	mov	r6, r8
 800965a:	b942      	cbnz	r2, 800966e <_strtol_l.constprop.0+0xe6>
 800965c:	4630      	mov	r0, r6
 800965e:	e79e      	b.n	800959e <_strtol_l.constprop.0+0x16>
 8009660:	b107      	cbz	r7, 8009664 <_strtol_l.constprop.0+0xdc>
 8009662:	4276      	negs	r6, r6
 8009664:	2a00      	cmp	r2, #0
 8009666:	d0f9      	beq.n	800965c <_strtol_l.constprop.0+0xd4>
 8009668:	f1bc 0f00 	cmp.w	ip, #0
 800966c:	d000      	beq.n	8009670 <_strtol_l.constprop.0+0xe8>
 800966e:	1e69      	subs	r1, r5, #1
 8009670:	6011      	str	r1, [r2, #0]
 8009672:	e7f3      	b.n	800965c <_strtol_l.constprop.0+0xd4>
 8009674:	2430      	movs	r4, #48	; 0x30
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1b1      	bne.n	80095de <_strtol_l.constprop.0+0x56>
 800967a:	2308      	movs	r3, #8
 800967c:	e7af      	b.n	80095de <_strtol_l.constprop.0+0x56>
 800967e:	2c30      	cmp	r4, #48	; 0x30
 8009680:	d0a5      	beq.n	80095ce <_strtol_l.constprop.0+0x46>
 8009682:	230a      	movs	r3, #10
 8009684:	e7ab      	b.n	80095de <_strtol_l.constprop.0+0x56>
 8009686:	bf00      	nop
 8009688:	0800cd91 	.word	0x0800cd91

0800968c <_strtol_r>:
 800968c:	f7ff bf7c 	b.w	8009588 <_strtol_l.constprop.0>

08009690 <_write_r>:
 8009690:	b538      	push	{r3, r4, r5, lr}
 8009692:	4d07      	ldr	r5, [pc, #28]	; (80096b0 <_write_r+0x20>)
 8009694:	4604      	mov	r4, r0
 8009696:	4608      	mov	r0, r1
 8009698:	4611      	mov	r1, r2
 800969a:	2200      	movs	r2, #0
 800969c:	602a      	str	r2, [r5, #0]
 800969e:	461a      	mov	r2, r3
 80096a0:	f7f9 fbbf 	bl	8002e22 <_write>
 80096a4:	1c43      	adds	r3, r0, #1
 80096a6:	d102      	bne.n	80096ae <_write_r+0x1e>
 80096a8:	682b      	ldr	r3, [r5, #0]
 80096aa:	b103      	cbz	r3, 80096ae <_write_r+0x1e>
 80096ac:	6023      	str	r3, [r4, #0]
 80096ae:	bd38      	pop	{r3, r4, r5, pc}
 80096b0:	20000920 	.word	0x20000920

080096b4 <_close_r>:
 80096b4:	b538      	push	{r3, r4, r5, lr}
 80096b6:	4d06      	ldr	r5, [pc, #24]	; (80096d0 <_close_r+0x1c>)
 80096b8:	2300      	movs	r3, #0
 80096ba:	4604      	mov	r4, r0
 80096bc:	4608      	mov	r0, r1
 80096be:	602b      	str	r3, [r5, #0]
 80096c0:	f7f9 fbcb 	bl	8002e5a <_close>
 80096c4:	1c43      	adds	r3, r0, #1
 80096c6:	d102      	bne.n	80096ce <_close_r+0x1a>
 80096c8:	682b      	ldr	r3, [r5, #0]
 80096ca:	b103      	cbz	r3, 80096ce <_close_r+0x1a>
 80096cc:	6023      	str	r3, [r4, #0]
 80096ce:	bd38      	pop	{r3, r4, r5, pc}
 80096d0:	20000920 	.word	0x20000920

080096d4 <quorem>:
 80096d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d8:	6903      	ldr	r3, [r0, #16]
 80096da:	690c      	ldr	r4, [r1, #16]
 80096dc:	42a3      	cmp	r3, r4
 80096de:	4607      	mov	r7, r0
 80096e0:	f2c0 8081 	blt.w	80097e6 <quorem+0x112>
 80096e4:	3c01      	subs	r4, #1
 80096e6:	f101 0814 	add.w	r8, r1, #20
 80096ea:	f100 0514 	add.w	r5, r0, #20
 80096ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096f2:	9301      	str	r3, [sp, #4]
 80096f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80096f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096fc:	3301      	adds	r3, #1
 80096fe:	429a      	cmp	r2, r3
 8009700:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009704:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009708:	fbb2 f6f3 	udiv	r6, r2, r3
 800970c:	d331      	bcc.n	8009772 <quorem+0x9e>
 800970e:	f04f 0e00 	mov.w	lr, #0
 8009712:	4640      	mov	r0, r8
 8009714:	46ac      	mov	ip, r5
 8009716:	46f2      	mov	sl, lr
 8009718:	f850 2b04 	ldr.w	r2, [r0], #4
 800971c:	b293      	uxth	r3, r2
 800971e:	fb06 e303 	mla	r3, r6, r3, lr
 8009722:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009726:	b29b      	uxth	r3, r3
 8009728:	ebaa 0303 	sub.w	r3, sl, r3
 800972c:	f8dc a000 	ldr.w	sl, [ip]
 8009730:	0c12      	lsrs	r2, r2, #16
 8009732:	fa13 f38a 	uxtah	r3, r3, sl
 8009736:	fb06 e202 	mla	r2, r6, r2, lr
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	9b00      	ldr	r3, [sp, #0]
 800973e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009742:	b292      	uxth	r2, r2
 8009744:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009748:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800974c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009750:	4581      	cmp	r9, r0
 8009752:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009756:	f84c 3b04 	str.w	r3, [ip], #4
 800975a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800975e:	d2db      	bcs.n	8009718 <quorem+0x44>
 8009760:	f855 300b 	ldr.w	r3, [r5, fp]
 8009764:	b92b      	cbnz	r3, 8009772 <quorem+0x9e>
 8009766:	9b01      	ldr	r3, [sp, #4]
 8009768:	3b04      	subs	r3, #4
 800976a:	429d      	cmp	r5, r3
 800976c:	461a      	mov	r2, r3
 800976e:	d32e      	bcc.n	80097ce <quorem+0xfa>
 8009770:	613c      	str	r4, [r7, #16]
 8009772:	4638      	mov	r0, r7
 8009774:	f001 fca4 	bl	800b0c0 <__mcmp>
 8009778:	2800      	cmp	r0, #0
 800977a:	db24      	blt.n	80097c6 <quorem+0xf2>
 800977c:	3601      	adds	r6, #1
 800977e:	4628      	mov	r0, r5
 8009780:	f04f 0c00 	mov.w	ip, #0
 8009784:	f858 2b04 	ldr.w	r2, [r8], #4
 8009788:	f8d0 e000 	ldr.w	lr, [r0]
 800978c:	b293      	uxth	r3, r2
 800978e:	ebac 0303 	sub.w	r3, ip, r3
 8009792:	0c12      	lsrs	r2, r2, #16
 8009794:	fa13 f38e 	uxtah	r3, r3, lr
 8009798:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800979c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097a6:	45c1      	cmp	r9, r8
 80097a8:	f840 3b04 	str.w	r3, [r0], #4
 80097ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80097b0:	d2e8      	bcs.n	8009784 <quorem+0xb0>
 80097b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097ba:	b922      	cbnz	r2, 80097c6 <quorem+0xf2>
 80097bc:	3b04      	subs	r3, #4
 80097be:	429d      	cmp	r5, r3
 80097c0:	461a      	mov	r2, r3
 80097c2:	d30a      	bcc.n	80097da <quorem+0x106>
 80097c4:	613c      	str	r4, [r7, #16]
 80097c6:	4630      	mov	r0, r6
 80097c8:	b003      	add	sp, #12
 80097ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ce:	6812      	ldr	r2, [r2, #0]
 80097d0:	3b04      	subs	r3, #4
 80097d2:	2a00      	cmp	r2, #0
 80097d4:	d1cc      	bne.n	8009770 <quorem+0x9c>
 80097d6:	3c01      	subs	r4, #1
 80097d8:	e7c7      	b.n	800976a <quorem+0x96>
 80097da:	6812      	ldr	r2, [r2, #0]
 80097dc:	3b04      	subs	r3, #4
 80097de:	2a00      	cmp	r2, #0
 80097e0:	d1f0      	bne.n	80097c4 <quorem+0xf0>
 80097e2:	3c01      	subs	r4, #1
 80097e4:	e7eb      	b.n	80097be <quorem+0xea>
 80097e6:	2000      	movs	r0, #0
 80097e8:	e7ee      	b.n	80097c8 <quorem+0xf4>
 80097ea:	0000      	movs	r0, r0
 80097ec:	0000      	movs	r0, r0
	...

080097f0 <_dtoa_r>:
 80097f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f4:	ed2d 8b04 	vpush	{d8-d9}
 80097f8:	ec57 6b10 	vmov	r6, r7, d0
 80097fc:	b093      	sub	sp, #76	; 0x4c
 80097fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009800:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009804:	9106      	str	r1, [sp, #24]
 8009806:	ee10 aa10 	vmov	sl, s0
 800980a:	4604      	mov	r4, r0
 800980c:	9209      	str	r2, [sp, #36]	; 0x24
 800980e:	930c      	str	r3, [sp, #48]	; 0x30
 8009810:	46bb      	mov	fp, r7
 8009812:	b975      	cbnz	r5, 8009832 <_dtoa_r+0x42>
 8009814:	2010      	movs	r0, #16
 8009816:	f001 f95f 	bl	800aad8 <malloc>
 800981a:	4602      	mov	r2, r0
 800981c:	6260      	str	r0, [r4, #36]	; 0x24
 800981e:	b920      	cbnz	r0, 800982a <_dtoa_r+0x3a>
 8009820:	4ba7      	ldr	r3, [pc, #668]	; (8009ac0 <_dtoa_r+0x2d0>)
 8009822:	21ea      	movs	r1, #234	; 0xea
 8009824:	48a7      	ldr	r0, [pc, #668]	; (8009ac4 <_dtoa_r+0x2d4>)
 8009826:	f002 fceb 	bl	800c200 <__assert_func>
 800982a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800982e:	6005      	str	r5, [r0, #0]
 8009830:	60c5      	str	r5, [r0, #12]
 8009832:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009834:	6819      	ldr	r1, [r3, #0]
 8009836:	b151      	cbz	r1, 800984e <_dtoa_r+0x5e>
 8009838:	685a      	ldr	r2, [r3, #4]
 800983a:	604a      	str	r2, [r1, #4]
 800983c:	2301      	movs	r3, #1
 800983e:	4093      	lsls	r3, r2
 8009840:	608b      	str	r3, [r1, #8]
 8009842:	4620      	mov	r0, r4
 8009844:	f001 f9b0 	bl	800aba8 <_Bfree>
 8009848:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800984a:	2200      	movs	r2, #0
 800984c:	601a      	str	r2, [r3, #0]
 800984e:	1e3b      	subs	r3, r7, #0
 8009850:	bfaa      	itet	ge
 8009852:	2300      	movge	r3, #0
 8009854:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009858:	f8c8 3000 	strge.w	r3, [r8]
 800985c:	4b9a      	ldr	r3, [pc, #616]	; (8009ac8 <_dtoa_r+0x2d8>)
 800985e:	bfbc      	itt	lt
 8009860:	2201      	movlt	r2, #1
 8009862:	f8c8 2000 	strlt.w	r2, [r8]
 8009866:	ea33 030b 	bics.w	r3, r3, fp
 800986a:	d11b      	bne.n	80098a4 <_dtoa_r+0xb4>
 800986c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800986e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009872:	6013      	str	r3, [r2, #0]
 8009874:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009878:	4333      	orrs	r3, r6
 800987a:	f000 8592 	beq.w	800a3a2 <_dtoa_r+0xbb2>
 800987e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009880:	b963      	cbnz	r3, 800989c <_dtoa_r+0xac>
 8009882:	4b92      	ldr	r3, [pc, #584]	; (8009acc <_dtoa_r+0x2dc>)
 8009884:	e022      	b.n	80098cc <_dtoa_r+0xdc>
 8009886:	4b92      	ldr	r3, [pc, #584]	; (8009ad0 <_dtoa_r+0x2e0>)
 8009888:	9301      	str	r3, [sp, #4]
 800988a:	3308      	adds	r3, #8
 800988c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800988e:	6013      	str	r3, [r2, #0]
 8009890:	9801      	ldr	r0, [sp, #4]
 8009892:	b013      	add	sp, #76	; 0x4c
 8009894:	ecbd 8b04 	vpop	{d8-d9}
 8009898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800989c:	4b8b      	ldr	r3, [pc, #556]	; (8009acc <_dtoa_r+0x2dc>)
 800989e:	9301      	str	r3, [sp, #4]
 80098a0:	3303      	adds	r3, #3
 80098a2:	e7f3      	b.n	800988c <_dtoa_r+0x9c>
 80098a4:	2200      	movs	r2, #0
 80098a6:	2300      	movs	r3, #0
 80098a8:	4650      	mov	r0, sl
 80098aa:	4659      	mov	r1, fp
 80098ac:	f7f7 f90c 	bl	8000ac8 <__aeabi_dcmpeq>
 80098b0:	ec4b ab19 	vmov	d9, sl, fp
 80098b4:	4680      	mov	r8, r0
 80098b6:	b158      	cbz	r0, 80098d0 <_dtoa_r+0xe0>
 80098b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098ba:	2301      	movs	r3, #1
 80098bc:	6013      	str	r3, [r2, #0]
 80098be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f000 856b 	beq.w	800a39c <_dtoa_r+0xbac>
 80098c6:	4883      	ldr	r0, [pc, #524]	; (8009ad4 <_dtoa_r+0x2e4>)
 80098c8:	6018      	str	r0, [r3, #0]
 80098ca:	1e43      	subs	r3, r0, #1
 80098cc:	9301      	str	r3, [sp, #4]
 80098ce:	e7df      	b.n	8009890 <_dtoa_r+0xa0>
 80098d0:	ec4b ab10 	vmov	d0, sl, fp
 80098d4:	aa10      	add	r2, sp, #64	; 0x40
 80098d6:	a911      	add	r1, sp, #68	; 0x44
 80098d8:	4620      	mov	r0, r4
 80098da:	f001 fd13 	bl	800b304 <__d2b>
 80098de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80098e2:	ee08 0a10 	vmov	s16, r0
 80098e6:	2d00      	cmp	r5, #0
 80098e8:	f000 8084 	beq.w	80099f4 <_dtoa_r+0x204>
 80098ec:	ee19 3a90 	vmov	r3, s19
 80098f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80098f8:	4656      	mov	r6, sl
 80098fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80098fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009902:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009906:	4b74      	ldr	r3, [pc, #464]	; (8009ad8 <_dtoa_r+0x2e8>)
 8009908:	2200      	movs	r2, #0
 800990a:	4630      	mov	r0, r6
 800990c:	4639      	mov	r1, r7
 800990e:	f7f6 fcbb 	bl	8000288 <__aeabi_dsub>
 8009912:	a365      	add	r3, pc, #404	; (adr r3, 8009aa8 <_dtoa_r+0x2b8>)
 8009914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009918:	f7f6 fe6e 	bl	80005f8 <__aeabi_dmul>
 800991c:	a364      	add	r3, pc, #400	; (adr r3, 8009ab0 <_dtoa_r+0x2c0>)
 800991e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009922:	f7f6 fcb3 	bl	800028c <__adddf3>
 8009926:	4606      	mov	r6, r0
 8009928:	4628      	mov	r0, r5
 800992a:	460f      	mov	r7, r1
 800992c:	f7f6 fdfa 	bl	8000524 <__aeabi_i2d>
 8009930:	a361      	add	r3, pc, #388	; (adr r3, 8009ab8 <_dtoa_r+0x2c8>)
 8009932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009936:	f7f6 fe5f 	bl	80005f8 <__aeabi_dmul>
 800993a:	4602      	mov	r2, r0
 800993c:	460b      	mov	r3, r1
 800993e:	4630      	mov	r0, r6
 8009940:	4639      	mov	r1, r7
 8009942:	f7f6 fca3 	bl	800028c <__adddf3>
 8009946:	4606      	mov	r6, r0
 8009948:	460f      	mov	r7, r1
 800994a:	f7f7 f905 	bl	8000b58 <__aeabi_d2iz>
 800994e:	2200      	movs	r2, #0
 8009950:	9000      	str	r0, [sp, #0]
 8009952:	2300      	movs	r3, #0
 8009954:	4630      	mov	r0, r6
 8009956:	4639      	mov	r1, r7
 8009958:	f7f7 f8c0 	bl	8000adc <__aeabi_dcmplt>
 800995c:	b150      	cbz	r0, 8009974 <_dtoa_r+0x184>
 800995e:	9800      	ldr	r0, [sp, #0]
 8009960:	f7f6 fde0 	bl	8000524 <__aeabi_i2d>
 8009964:	4632      	mov	r2, r6
 8009966:	463b      	mov	r3, r7
 8009968:	f7f7 f8ae 	bl	8000ac8 <__aeabi_dcmpeq>
 800996c:	b910      	cbnz	r0, 8009974 <_dtoa_r+0x184>
 800996e:	9b00      	ldr	r3, [sp, #0]
 8009970:	3b01      	subs	r3, #1
 8009972:	9300      	str	r3, [sp, #0]
 8009974:	9b00      	ldr	r3, [sp, #0]
 8009976:	2b16      	cmp	r3, #22
 8009978:	d85a      	bhi.n	8009a30 <_dtoa_r+0x240>
 800997a:	9a00      	ldr	r2, [sp, #0]
 800997c:	4b57      	ldr	r3, [pc, #348]	; (8009adc <_dtoa_r+0x2ec>)
 800997e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009986:	ec51 0b19 	vmov	r0, r1, d9
 800998a:	f7f7 f8a7 	bl	8000adc <__aeabi_dcmplt>
 800998e:	2800      	cmp	r0, #0
 8009990:	d050      	beq.n	8009a34 <_dtoa_r+0x244>
 8009992:	9b00      	ldr	r3, [sp, #0]
 8009994:	3b01      	subs	r3, #1
 8009996:	9300      	str	r3, [sp, #0]
 8009998:	2300      	movs	r3, #0
 800999a:	930b      	str	r3, [sp, #44]	; 0x2c
 800999c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800999e:	1b5d      	subs	r5, r3, r5
 80099a0:	1e6b      	subs	r3, r5, #1
 80099a2:	9305      	str	r3, [sp, #20]
 80099a4:	bf45      	ittet	mi
 80099a6:	f1c5 0301 	rsbmi	r3, r5, #1
 80099aa:	9304      	strmi	r3, [sp, #16]
 80099ac:	2300      	movpl	r3, #0
 80099ae:	2300      	movmi	r3, #0
 80099b0:	bf4c      	ite	mi
 80099b2:	9305      	strmi	r3, [sp, #20]
 80099b4:	9304      	strpl	r3, [sp, #16]
 80099b6:	9b00      	ldr	r3, [sp, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	db3d      	blt.n	8009a38 <_dtoa_r+0x248>
 80099bc:	9b05      	ldr	r3, [sp, #20]
 80099be:	9a00      	ldr	r2, [sp, #0]
 80099c0:	920a      	str	r2, [sp, #40]	; 0x28
 80099c2:	4413      	add	r3, r2
 80099c4:	9305      	str	r3, [sp, #20]
 80099c6:	2300      	movs	r3, #0
 80099c8:	9307      	str	r3, [sp, #28]
 80099ca:	9b06      	ldr	r3, [sp, #24]
 80099cc:	2b09      	cmp	r3, #9
 80099ce:	f200 8089 	bhi.w	8009ae4 <_dtoa_r+0x2f4>
 80099d2:	2b05      	cmp	r3, #5
 80099d4:	bfc4      	itt	gt
 80099d6:	3b04      	subgt	r3, #4
 80099d8:	9306      	strgt	r3, [sp, #24]
 80099da:	9b06      	ldr	r3, [sp, #24]
 80099dc:	f1a3 0302 	sub.w	r3, r3, #2
 80099e0:	bfcc      	ite	gt
 80099e2:	2500      	movgt	r5, #0
 80099e4:	2501      	movle	r5, #1
 80099e6:	2b03      	cmp	r3, #3
 80099e8:	f200 8087 	bhi.w	8009afa <_dtoa_r+0x30a>
 80099ec:	e8df f003 	tbb	[pc, r3]
 80099f0:	59383a2d 	.word	0x59383a2d
 80099f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80099f8:	441d      	add	r5, r3
 80099fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80099fe:	2b20      	cmp	r3, #32
 8009a00:	bfc1      	itttt	gt
 8009a02:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a06:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009a0a:	fa0b f303 	lslgt.w	r3, fp, r3
 8009a0e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009a12:	bfda      	itte	le
 8009a14:	f1c3 0320 	rsble	r3, r3, #32
 8009a18:	fa06 f003 	lslle.w	r0, r6, r3
 8009a1c:	4318      	orrgt	r0, r3
 8009a1e:	f7f6 fd71 	bl	8000504 <__aeabi_ui2d>
 8009a22:	2301      	movs	r3, #1
 8009a24:	4606      	mov	r6, r0
 8009a26:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009a2a:	3d01      	subs	r5, #1
 8009a2c:	930e      	str	r3, [sp, #56]	; 0x38
 8009a2e:	e76a      	b.n	8009906 <_dtoa_r+0x116>
 8009a30:	2301      	movs	r3, #1
 8009a32:	e7b2      	b.n	800999a <_dtoa_r+0x1aa>
 8009a34:	900b      	str	r0, [sp, #44]	; 0x2c
 8009a36:	e7b1      	b.n	800999c <_dtoa_r+0x1ac>
 8009a38:	9b04      	ldr	r3, [sp, #16]
 8009a3a:	9a00      	ldr	r2, [sp, #0]
 8009a3c:	1a9b      	subs	r3, r3, r2
 8009a3e:	9304      	str	r3, [sp, #16]
 8009a40:	4253      	negs	r3, r2
 8009a42:	9307      	str	r3, [sp, #28]
 8009a44:	2300      	movs	r3, #0
 8009a46:	930a      	str	r3, [sp, #40]	; 0x28
 8009a48:	e7bf      	b.n	80099ca <_dtoa_r+0x1da>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	9308      	str	r3, [sp, #32]
 8009a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	dc55      	bgt.n	8009b00 <_dtoa_r+0x310>
 8009a54:	2301      	movs	r3, #1
 8009a56:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	9209      	str	r2, [sp, #36]	; 0x24
 8009a5e:	e00c      	b.n	8009a7a <_dtoa_r+0x28a>
 8009a60:	2301      	movs	r3, #1
 8009a62:	e7f3      	b.n	8009a4c <_dtoa_r+0x25c>
 8009a64:	2300      	movs	r3, #0
 8009a66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a68:	9308      	str	r3, [sp, #32]
 8009a6a:	9b00      	ldr	r3, [sp, #0]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	9302      	str	r3, [sp, #8]
 8009a70:	3301      	adds	r3, #1
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	9303      	str	r3, [sp, #12]
 8009a76:	bfb8      	it	lt
 8009a78:	2301      	movlt	r3, #1
 8009a7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	6042      	str	r2, [r0, #4]
 8009a80:	2204      	movs	r2, #4
 8009a82:	f102 0614 	add.w	r6, r2, #20
 8009a86:	429e      	cmp	r6, r3
 8009a88:	6841      	ldr	r1, [r0, #4]
 8009a8a:	d93d      	bls.n	8009b08 <_dtoa_r+0x318>
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	f001 f84b 	bl	800ab28 <_Balloc>
 8009a92:	9001      	str	r0, [sp, #4]
 8009a94:	2800      	cmp	r0, #0
 8009a96:	d13b      	bne.n	8009b10 <_dtoa_r+0x320>
 8009a98:	4b11      	ldr	r3, [pc, #68]	; (8009ae0 <_dtoa_r+0x2f0>)
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009aa0:	e6c0      	b.n	8009824 <_dtoa_r+0x34>
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e7df      	b.n	8009a66 <_dtoa_r+0x276>
 8009aa6:	bf00      	nop
 8009aa8:	636f4361 	.word	0x636f4361
 8009aac:	3fd287a7 	.word	0x3fd287a7
 8009ab0:	8b60c8b3 	.word	0x8b60c8b3
 8009ab4:	3fc68a28 	.word	0x3fc68a28
 8009ab8:	509f79fb 	.word	0x509f79fb
 8009abc:	3fd34413 	.word	0x3fd34413
 8009ac0:	0800ce9e 	.word	0x0800ce9e
 8009ac4:	0800ceb5 	.word	0x0800ceb5
 8009ac8:	7ff00000 	.word	0x7ff00000
 8009acc:	0800ce9a 	.word	0x0800ce9a
 8009ad0:	0800ce91 	.word	0x0800ce91
 8009ad4:	0800d10a 	.word	0x0800d10a
 8009ad8:	3ff80000 	.word	0x3ff80000
 8009adc:	0800d020 	.word	0x0800d020
 8009ae0:	0800cf10 	.word	0x0800cf10
 8009ae4:	2501      	movs	r5, #1
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	9306      	str	r3, [sp, #24]
 8009aea:	9508      	str	r5, [sp, #32]
 8009aec:	f04f 33ff 	mov.w	r3, #4294967295
 8009af0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009af4:	2200      	movs	r2, #0
 8009af6:	2312      	movs	r3, #18
 8009af8:	e7b0      	b.n	8009a5c <_dtoa_r+0x26c>
 8009afa:	2301      	movs	r3, #1
 8009afc:	9308      	str	r3, [sp, #32]
 8009afe:	e7f5      	b.n	8009aec <_dtoa_r+0x2fc>
 8009b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b02:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009b06:	e7b8      	b.n	8009a7a <_dtoa_r+0x28a>
 8009b08:	3101      	adds	r1, #1
 8009b0a:	6041      	str	r1, [r0, #4]
 8009b0c:	0052      	lsls	r2, r2, #1
 8009b0e:	e7b8      	b.n	8009a82 <_dtoa_r+0x292>
 8009b10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b12:	9a01      	ldr	r2, [sp, #4]
 8009b14:	601a      	str	r2, [r3, #0]
 8009b16:	9b03      	ldr	r3, [sp, #12]
 8009b18:	2b0e      	cmp	r3, #14
 8009b1a:	f200 809d 	bhi.w	8009c58 <_dtoa_r+0x468>
 8009b1e:	2d00      	cmp	r5, #0
 8009b20:	f000 809a 	beq.w	8009c58 <_dtoa_r+0x468>
 8009b24:	9b00      	ldr	r3, [sp, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	dd32      	ble.n	8009b90 <_dtoa_r+0x3a0>
 8009b2a:	4ab7      	ldr	r2, [pc, #732]	; (8009e08 <_dtoa_r+0x618>)
 8009b2c:	f003 030f 	and.w	r3, r3, #15
 8009b30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b38:	9b00      	ldr	r3, [sp, #0]
 8009b3a:	05d8      	lsls	r0, r3, #23
 8009b3c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009b40:	d516      	bpl.n	8009b70 <_dtoa_r+0x380>
 8009b42:	4bb2      	ldr	r3, [pc, #712]	; (8009e0c <_dtoa_r+0x61c>)
 8009b44:	ec51 0b19 	vmov	r0, r1, d9
 8009b48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b4c:	f7f6 fe7e 	bl	800084c <__aeabi_ddiv>
 8009b50:	f007 070f 	and.w	r7, r7, #15
 8009b54:	4682      	mov	sl, r0
 8009b56:	468b      	mov	fp, r1
 8009b58:	2503      	movs	r5, #3
 8009b5a:	4eac      	ldr	r6, [pc, #688]	; (8009e0c <_dtoa_r+0x61c>)
 8009b5c:	b957      	cbnz	r7, 8009b74 <_dtoa_r+0x384>
 8009b5e:	4642      	mov	r2, r8
 8009b60:	464b      	mov	r3, r9
 8009b62:	4650      	mov	r0, sl
 8009b64:	4659      	mov	r1, fp
 8009b66:	f7f6 fe71 	bl	800084c <__aeabi_ddiv>
 8009b6a:	4682      	mov	sl, r0
 8009b6c:	468b      	mov	fp, r1
 8009b6e:	e028      	b.n	8009bc2 <_dtoa_r+0x3d2>
 8009b70:	2502      	movs	r5, #2
 8009b72:	e7f2      	b.n	8009b5a <_dtoa_r+0x36a>
 8009b74:	07f9      	lsls	r1, r7, #31
 8009b76:	d508      	bpl.n	8009b8a <_dtoa_r+0x39a>
 8009b78:	4640      	mov	r0, r8
 8009b7a:	4649      	mov	r1, r9
 8009b7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b80:	f7f6 fd3a 	bl	80005f8 <__aeabi_dmul>
 8009b84:	3501      	adds	r5, #1
 8009b86:	4680      	mov	r8, r0
 8009b88:	4689      	mov	r9, r1
 8009b8a:	107f      	asrs	r7, r7, #1
 8009b8c:	3608      	adds	r6, #8
 8009b8e:	e7e5      	b.n	8009b5c <_dtoa_r+0x36c>
 8009b90:	f000 809b 	beq.w	8009cca <_dtoa_r+0x4da>
 8009b94:	9b00      	ldr	r3, [sp, #0]
 8009b96:	4f9d      	ldr	r7, [pc, #628]	; (8009e0c <_dtoa_r+0x61c>)
 8009b98:	425e      	negs	r6, r3
 8009b9a:	4b9b      	ldr	r3, [pc, #620]	; (8009e08 <_dtoa_r+0x618>)
 8009b9c:	f006 020f 	and.w	r2, r6, #15
 8009ba0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba8:	ec51 0b19 	vmov	r0, r1, d9
 8009bac:	f7f6 fd24 	bl	80005f8 <__aeabi_dmul>
 8009bb0:	1136      	asrs	r6, r6, #4
 8009bb2:	4682      	mov	sl, r0
 8009bb4:	468b      	mov	fp, r1
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	2502      	movs	r5, #2
 8009bba:	2e00      	cmp	r6, #0
 8009bbc:	d17a      	bne.n	8009cb4 <_dtoa_r+0x4c4>
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d1d3      	bne.n	8009b6a <_dtoa_r+0x37a>
 8009bc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f000 8082 	beq.w	8009cce <_dtoa_r+0x4de>
 8009bca:	4b91      	ldr	r3, [pc, #580]	; (8009e10 <_dtoa_r+0x620>)
 8009bcc:	2200      	movs	r2, #0
 8009bce:	4650      	mov	r0, sl
 8009bd0:	4659      	mov	r1, fp
 8009bd2:	f7f6 ff83 	bl	8000adc <__aeabi_dcmplt>
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	d079      	beq.n	8009cce <_dtoa_r+0x4de>
 8009bda:	9b03      	ldr	r3, [sp, #12]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d076      	beq.n	8009cce <_dtoa_r+0x4de>
 8009be0:	9b02      	ldr	r3, [sp, #8]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	dd36      	ble.n	8009c54 <_dtoa_r+0x464>
 8009be6:	9b00      	ldr	r3, [sp, #0]
 8009be8:	4650      	mov	r0, sl
 8009bea:	4659      	mov	r1, fp
 8009bec:	1e5f      	subs	r7, r3, #1
 8009bee:	2200      	movs	r2, #0
 8009bf0:	4b88      	ldr	r3, [pc, #544]	; (8009e14 <_dtoa_r+0x624>)
 8009bf2:	f7f6 fd01 	bl	80005f8 <__aeabi_dmul>
 8009bf6:	9e02      	ldr	r6, [sp, #8]
 8009bf8:	4682      	mov	sl, r0
 8009bfa:	468b      	mov	fp, r1
 8009bfc:	3501      	adds	r5, #1
 8009bfe:	4628      	mov	r0, r5
 8009c00:	f7f6 fc90 	bl	8000524 <__aeabi_i2d>
 8009c04:	4652      	mov	r2, sl
 8009c06:	465b      	mov	r3, fp
 8009c08:	f7f6 fcf6 	bl	80005f8 <__aeabi_dmul>
 8009c0c:	4b82      	ldr	r3, [pc, #520]	; (8009e18 <_dtoa_r+0x628>)
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f7f6 fb3c 	bl	800028c <__adddf3>
 8009c14:	46d0      	mov	r8, sl
 8009c16:	46d9      	mov	r9, fp
 8009c18:	4682      	mov	sl, r0
 8009c1a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009c1e:	2e00      	cmp	r6, #0
 8009c20:	d158      	bne.n	8009cd4 <_dtoa_r+0x4e4>
 8009c22:	4b7e      	ldr	r3, [pc, #504]	; (8009e1c <_dtoa_r+0x62c>)
 8009c24:	2200      	movs	r2, #0
 8009c26:	4640      	mov	r0, r8
 8009c28:	4649      	mov	r1, r9
 8009c2a:	f7f6 fb2d 	bl	8000288 <__aeabi_dsub>
 8009c2e:	4652      	mov	r2, sl
 8009c30:	465b      	mov	r3, fp
 8009c32:	4680      	mov	r8, r0
 8009c34:	4689      	mov	r9, r1
 8009c36:	f7f6 ff6f 	bl	8000b18 <__aeabi_dcmpgt>
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	f040 8295 	bne.w	800a16a <_dtoa_r+0x97a>
 8009c40:	4652      	mov	r2, sl
 8009c42:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009c46:	4640      	mov	r0, r8
 8009c48:	4649      	mov	r1, r9
 8009c4a:	f7f6 ff47 	bl	8000adc <__aeabi_dcmplt>
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	f040 8289 	bne.w	800a166 <_dtoa_r+0x976>
 8009c54:	ec5b ab19 	vmov	sl, fp, d9
 8009c58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	f2c0 8148 	blt.w	8009ef0 <_dtoa_r+0x700>
 8009c60:	9a00      	ldr	r2, [sp, #0]
 8009c62:	2a0e      	cmp	r2, #14
 8009c64:	f300 8144 	bgt.w	8009ef0 <_dtoa_r+0x700>
 8009c68:	4b67      	ldr	r3, [pc, #412]	; (8009e08 <_dtoa_r+0x618>)
 8009c6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c6e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	f280 80d5 	bge.w	8009e24 <_dtoa_r+0x634>
 8009c7a:	9b03      	ldr	r3, [sp, #12]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f300 80d1 	bgt.w	8009e24 <_dtoa_r+0x634>
 8009c82:	f040 826f 	bne.w	800a164 <_dtoa_r+0x974>
 8009c86:	4b65      	ldr	r3, [pc, #404]	; (8009e1c <_dtoa_r+0x62c>)
 8009c88:	2200      	movs	r2, #0
 8009c8a:	4640      	mov	r0, r8
 8009c8c:	4649      	mov	r1, r9
 8009c8e:	f7f6 fcb3 	bl	80005f8 <__aeabi_dmul>
 8009c92:	4652      	mov	r2, sl
 8009c94:	465b      	mov	r3, fp
 8009c96:	f7f6 ff35 	bl	8000b04 <__aeabi_dcmpge>
 8009c9a:	9e03      	ldr	r6, [sp, #12]
 8009c9c:	4637      	mov	r7, r6
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	f040 8245 	bne.w	800a12e <_dtoa_r+0x93e>
 8009ca4:	9d01      	ldr	r5, [sp, #4]
 8009ca6:	2331      	movs	r3, #49	; 0x31
 8009ca8:	f805 3b01 	strb.w	r3, [r5], #1
 8009cac:	9b00      	ldr	r3, [sp, #0]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	9300      	str	r3, [sp, #0]
 8009cb2:	e240      	b.n	800a136 <_dtoa_r+0x946>
 8009cb4:	07f2      	lsls	r2, r6, #31
 8009cb6:	d505      	bpl.n	8009cc4 <_dtoa_r+0x4d4>
 8009cb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cbc:	f7f6 fc9c 	bl	80005f8 <__aeabi_dmul>
 8009cc0:	3501      	adds	r5, #1
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	1076      	asrs	r6, r6, #1
 8009cc6:	3708      	adds	r7, #8
 8009cc8:	e777      	b.n	8009bba <_dtoa_r+0x3ca>
 8009cca:	2502      	movs	r5, #2
 8009ccc:	e779      	b.n	8009bc2 <_dtoa_r+0x3d2>
 8009cce:	9f00      	ldr	r7, [sp, #0]
 8009cd0:	9e03      	ldr	r6, [sp, #12]
 8009cd2:	e794      	b.n	8009bfe <_dtoa_r+0x40e>
 8009cd4:	9901      	ldr	r1, [sp, #4]
 8009cd6:	4b4c      	ldr	r3, [pc, #304]	; (8009e08 <_dtoa_r+0x618>)
 8009cd8:	4431      	add	r1, r6
 8009cda:	910d      	str	r1, [sp, #52]	; 0x34
 8009cdc:	9908      	ldr	r1, [sp, #32]
 8009cde:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009ce2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ce6:	2900      	cmp	r1, #0
 8009ce8:	d043      	beq.n	8009d72 <_dtoa_r+0x582>
 8009cea:	494d      	ldr	r1, [pc, #308]	; (8009e20 <_dtoa_r+0x630>)
 8009cec:	2000      	movs	r0, #0
 8009cee:	f7f6 fdad 	bl	800084c <__aeabi_ddiv>
 8009cf2:	4652      	mov	r2, sl
 8009cf4:	465b      	mov	r3, fp
 8009cf6:	f7f6 fac7 	bl	8000288 <__aeabi_dsub>
 8009cfa:	9d01      	ldr	r5, [sp, #4]
 8009cfc:	4682      	mov	sl, r0
 8009cfe:	468b      	mov	fp, r1
 8009d00:	4649      	mov	r1, r9
 8009d02:	4640      	mov	r0, r8
 8009d04:	f7f6 ff28 	bl	8000b58 <__aeabi_d2iz>
 8009d08:	4606      	mov	r6, r0
 8009d0a:	f7f6 fc0b 	bl	8000524 <__aeabi_i2d>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	460b      	mov	r3, r1
 8009d12:	4640      	mov	r0, r8
 8009d14:	4649      	mov	r1, r9
 8009d16:	f7f6 fab7 	bl	8000288 <__aeabi_dsub>
 8009d1a:	3630      	adds	r6, #48	; 0x30
 8009d1c:	f805 6b01 	strb.w	r6, [r5], #1
 8009d20:	4652      	mov	r2, sl
 8009d22:	465b      	mov	r3, fp
 8009d24:	4680      	mov	r8, r0
 8009d26:	4689      	mov	r9, r1
 8009d28:	f7f6 fed8 	bl	8000adc <__aeabi_dcmplt>
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	d163      	bne.n	8009df8 <_dtoa_r+0x608>
 8009d30:	4642      	mov	r2, r8
 8009d32:	464b      	mov	r3, r9
 8009d34:	4936      	ldr	r1, [pc, #216]	; (8009e10 <_dtoa_r+0x620>)
 8009d36:	2000      	movs	r0, #0
 8009d38:	f7f6 faa6 	bl	8000288 <__aeabi_dsub>
 8009d3c:	4652      	mov	r2, sl
 8009d3e:	465b      	mov	r3, fp
 8009d40:	f7f6 fecc 	bl	8000adc <__aeabi_dcmplt>
 8009d44:	2800      	cmp	r0, #0
 8009d46:	f040 80b5 	bne.w	8009eb4 <_dtoa_r+0x6c4>
 8009d4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d4c:	429d      	cmp	r5, r3
 8009d4e:	d081      	beq.n	8009c54 <_dtoa_r+0x464>
 8009d50:	4b30      	ldr	r3, [pc, #192]	; (8009e14 <_dtoa_r+0x624>)
 8009d52:	2200      	movs	r2, #0
 8009d54:	4650      	mov	r0, sl
 8009d56:	4659      	mov	r1, fp
 8009d58:	f7f6 fc4e 	bl	80005f8 <__aeabi_dmul>
 8009d5c:	4b2d      	ldr	r3, [pc, #180]	; (8009e14 <_dtoa_r+0x624>)
 8009d5e:	4682      	mov	sl, r0
 8009d60:	468b      	mov	fp, r1
 8009d62:	4640      	mov	r0, r8
 8009d64:	4649      	mov	r1, r9
 8009d66:	2200      	movs	r2, #0
 8009d68:	f7f6 fc46 	bl	80005f8 <__aeabi_dmul>
 8009d6c:	4680      	mov	r8, r0
 8009d6e:	4689      	mov	r9, r1
 8009d70:	e7c6      	b.n	8009d00 <_dtoa_r+0x510>
 8009d72:	4650      	mov	r0, sl
 8009d74:	4659      	mov	r1, fp
 8009d76:	f7f6 fc3f 	bl	80005f8 <__aeabi_dmul>
 8009d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d7c:	9d01      	ldr	r5, [sp, #4]
 8009d7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d80:	4682      	mov	sl, r0
 8009d82:	468b      	mov	fp, r1
 8009d84:	4649      	mov	r1, r9
 8009d86:	4640      	mov	r0, r8
 8009d88:	f7f6 fee6 	bl	8000b58 <__aeabi_d2iz>
 8009d8c:	4606      	mov	r6, r0
 8009d8e:	f7f6 fbc9 	bl	8000524 <__aeabi_i2d>
 8009d92:	3630      	adds	r6, #48	; 0x30
 8009d94:	4602      	mov	r2, r0
 8009d96:	460b      	mov	r3, r1
 8009d98:	4640      	mov	r0, r8
 8009d9a:	4649      	mov	r1, r9
 8009d9c:	f7f6 fa74 	bl	8000288 <__aeabi_dsub>
 8009da0:	f805 6b01 	strb.w	r6, [r5], #1
 8009da4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009da6:	429d      	cmp	r5, r3
 8009da8:	4680      	mov	r8, r0
 8009daa:	4689      	mov	r9, r1
 8009dac:	f04f 0200 	mov.w	r2, #0
 8009db0:	d124      	bne.n	8009dfc <_dtoa_r+0x60c>
 8009db2:	4b1b      	ldr	r3, [pc, #108]	; (8009e20 <_dtoa_r+0x630>)
 8009db4:	4650      	mov	r0, sl
 8009db6:	4659      	mov	r1, fp
 8009db8:	f7f6 fa68 	bl	800028c <__adddf3>
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	4640      	mov	r0, r8
 8009dc2:	4649      	mov	r1, r9
 8009dc4:	f7f6 fea8 	bl	8000b18 <__aeabi_dcmpgt>
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	d173      	bne.n	8009eb4 <_dtoa_r+0x6c4>
 8009dcc:	4652      	mov	r2, sl
 8009dce:	465b      	mov	r3, fp
 8009dd0:	4913      	ldr	r1, [pc, #76]	; (8009e20 <_dtoa_r+0x630>)
 8009dd2:	2000      	movs	r0, #0
 8009dd4:	f7f6 fa58 	bl	8000288 <__aeabi_dsub>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	460b      	mov	r3, r1
 8009ddc:	4640      	mov	r0, r8
 8009dde:	4649      	mov	r1, r9
 8009de0:	f7f6 fe7c 	bl	8000adc <__aeabi_dcmplt>
 8009de4:	2800      	cmp	r0, #0
 8009de6:	f43f af35 	beq.w	8009c54 <_dtoa_r+0x464>
 8009dea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009dec:	1e6b      	subs	r3, r5, #1
 8009dee:	930f      	str	r3, [sp, #60]	; 0x3c
 8009df0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009df4:	2b30      	cmp	r3, #48	; 0x30
 8009df6:	d0f8      	beq.n	8009dea <_dtoa_r+0x5fa>
 8009df8:	9700      	str	r7, [sp, #0]
 8009dfa:	e049      	b.n	8009e90 <_dtoa_r+0x6a0>
 8009dfc:	4b05      	ldr	r3, [pc, #20]	; (8009e14 <_dtoa_r+0x624>)
 8009dfe:	f7f6 fbfb 	bl	80005f8 <__aeabi_dmul>
 8009e02:	4680      	mov	r8, r0
 8009e04:	4689      	mov	r9, r1
 8009e06:	e7bd      	b.n	8009d84 <_dtoa_r+0x594>
 8009e08:	0800d020 	.word	0x0800d020
 8009e0c:	0800cff8 	.word	0x0800cff8
 8009e10:	3ff00000 	.word	0x3ff00000
 8009e14:	40240000 	.word	0x40240000
 8009e18:	401c0000 	.word	0x401c0000
 8009e1c:	40140000 	.word	0x40140000
 8009e20:	3fe00000 	.word	0x3fe00000
 8009e24:	9d01      	ldr	r5, [sp, #4]
 8009e26:	4656      	mov	r6, sl
 8009e28:	465f      	mov	r7, fp
 8009e2a:	4642      	mov	r2, r8
 8009e2c:	464b      	mov	r3, r9
 8009e2e:	4630      	mov	r0, r6
 8009e30:	4639      	mov	r1, r7
 8009e32:	f7f6 fd0b 	bl	800084c <__aeabi_ddiv>
 8009e36:	f7f6 fe8f 	bl	8000b58 <__aeabi_d2iz>
 8009e3a:	4682      	mov	sl, r0
 8009e3c:	f7f6 fb72 	bl	8000524 <__aeabi_i2d>
 8009e40:	4642      	mov	r2, r8
 8009e42:	464b      	mov	r3, r9
 8009e44:	f7f6 fbd8 	bl	80005f8 <__aeabi_dmul>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	4630      	mov	r0, r6
 8009e4e:	4639      	mov	r1, r7
 8009e50:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009e54:	f7f6 fa18 	bl	8000288 <__aeabi_dsub>
 8009e58:	f805 6b01 	strb.w	r6, [r5], #1
 8009e5c:	9e01      	ldr	r6, [sp, #4]
 8009e5e:	9f03      	ldr	r7, [sp, #12]
 8009e60:	1bae      	subs	r6, r5, r6
 8009e62:	42b7      	cmp	r7, r6
 8009e64:	4602      	mov	r2, r0
 8009e66:	460b      	mov	r3, r1
 8009e68:	d135      	bne.n	8009ed6 <_dtoa_r+0x6e6>
 8009e6a:	f7f6 fa0f 	bl	800028c <__adddf3>
 8009e6e:	4642      	mov	r2, r8
 8009e70:	464b      	mov	r3, r9
 8009e72:	4606      	mov	r6, r0
 8009e74:	460f      	mov	r7, r1
 8009e76:	f7f6 fe4f 	bl	8000b18 <__aeabi_dcmpgt>
 8009e7a:	b9d0      	cbnz	r0, 8009eb2 <_dtoa_r+0x6c2>
 8009e7c:	4642      	mov	r2, r8
 8009e7e:	464b      	mov	r3, r9
 8009e80:	4630      	mov	r0, r6
 8009e82:	4639      	mov	r1, r7
 8009e84:	f7f6 fe20 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e88:	b110      	cbz	r0, 8009e90 <_dtoa_r+0x6a0>
 8009e8a:	f01a 0f01 	tst.w	sl, #1
 8009e8e:	d110      	bne.n	8009eb2 <_dtoa_r+0x6c2>
 8009e90:	4620      	mov	r0, r4
 8009e92:	ee18 1a10 	vmov	r1, s16
 8009e96:	f000 fe87 	bl	800aba8 <_Bfree>
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	9800      	ldr	r0, [sp, #0]
 8009e9e:	702b      	strb	r3, [r5, #0]
 8009ea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ea2:	3001      	adds	r0, #1
 8009ea4:	6018      	str	r0, [r3, #0]
 8009ea6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f43f acf1 	beq.w	8009890 <_dtoa_r+0xa0>
 8009eae:	601d      	str	r5, [r3, #0]
 8009eb0:	e4ee      	b.n	8009890 <_dtoa_r+0xa0>
 8009eb2:	9f00      	ldr	r7, [sp, #0]
 8009eb4:	462b      	mov	r3, r5
 8009eb6:	461d      	mov	r5, r3
 8009eb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ebc:	2a39      	cmp	r2, #57	; 0x39
 8009ebe:	d106      	bne.n	8009ece <_dtoa_r+0x6de>
 8009ec0:	9a01      	ldr	r2, [sp, #4]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d1f7      	bne.n	8009eb6 <_dtoa_r+0x6c6>
 8009ec6:	9901      	ldr	r1, [sp, #4]
 8009ec8:	2230      	movs	r2, #48	; 0x30
 8009eca:	3701      	adds	r7, #1
 8009ecc:	700a      	strb	r2, [r1, #0]
 8009ece:	781a      	ldrb	r2, [r3, #0]
 8009ed0:	3201      	adds	r2, #1
 8009ed2:	701a      	strb	r2, [r3, #0]
 8009ed4:	e790      	b.n	8009df8 <_dtoa_r+0x608>
 8009ed6:	4ba6      	ldr	r3, [pc, #664]	; (800a170 <_dtoa_r+0x980>)
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f7f6 fb8d 	bl	80005f8 <__aeabi_dmul>
 8009ede:	2200      	movs	r2, #0
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	4606      	mov	r6, r0
 8009ee4:	460f      	mov	r7, r1
 8009ee6:	f7f6 fdef 	bl	8000ac8 <__aeabi_dcmpeq>
 8009eea:	2800      	cmp	r0, #0
 8009eec:	d09d      	beq.n	8009e2a <_dtoa_r+0x63a>
 8009eee:	e7cf      	b.n	8009e90 <_dtoa_r+0x6a0>
 8009ef0:	9a08      	ldr	r2, [sp, #32]
 8009ef2:	2a00      	cmp	r2, #0
 8009ef4:	f000 80d7 	beq.w	800a0a6 <_dtoa_r+0x8b6>
 8009ef8:	9a06      	ldr	r2, [sp, #24]
 8009efa:	2a01      	cmp	r2, #1
 8009efc:	f300 80ba 	bgt.w	800a074 <_dtoa_r+0x884>
 8009f00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f02:	2a00      	cmp	r2, #0
 8009f04:	f000 80b2 	beq.w	800a06c <_dtoa_r+0x87c>
 8009f08:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f0c:	9e07      	ldr	r6, [sp, #28]
 8009f0e:	9d04      	ldr	r5, [sp, #16]
 8009f10:	9a04      	ldr	r2, [sp, #16]
 8009f12:	441a      	add	r2, r3
 8009f14:	9204      	str	r2, [sp, #16]
 8009f16:	9a05      	ldr	r2, [sp, #20]
 8009f18:	2101      	movs	r1, #1
 8009f1a:	441a      	add	r2, r3
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	9205      	str	r2, [sp, #20]
 8009f20:	f000 ff44 	bl	800adac <__i2b>
 8009f24:	4607      	mov	r7, r0
 8009f26:	2d00      	cmp	r5, #0
 8009f28:	dd0c      	ble.n	8009f44 <_dtoa_r+0x754>
 8009f2a:	9b05      	ldr	r3, [sp, #20]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	dd09      	ble.n	8009f44 <_dtoa_r+0x754>
 8009f30:	42ab      	cmp	r3, r5
 8009f32:	9a04      	ldr	r2, [sp, #16]
 8009f34:	bfa8      	it	ge
 8009f36:	462b      	movge	r3, r5
 8009f38:	1ad2      	subs	r2, r2, r3
 8009f3a:	9204      	str	r2, [sp, #16]
 8009f3c:	9a05      	ldr	r2, [sp, #20]
 8009f3e:	1aed      	subs	r5, r5, r3
 8009f40:	1ad3      	subs	r3, r2, r3
 8009f42:	9305      	str	r3, [sp, #20]
 8009f44:	9b07      	ldr	r3, [sp, #28]
 8009f46:	b31b      	cbz	r3, 8009f90 <_dtoa_r+0x7a0>
 8009f48:	9b08      	ldr	r3, [sp, #32]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	f000 80af 	beq.w	800a0ae <_dtoa_r+0x8be>
 8009f50:	2e00      	cmp	r6, #0
 8009f52:	dd13      	ble.n	8009f7c <_dtoa_r+0x78c>
 8009f54:	4639      	mov	r1, r7
 8009f56:	4632      	mov	r2, r6
 8009f58:	4620      	mov	r0, r4
 8009f5a:	f000 ffe7 	bl	800af2c <__pow5mult>
 8009f5e:	ee18 2a10 	vmov	r2, s16
 8009f62:	4601      	mov	r1, r0
 8009f64:	4607      	mov	r7, r0
 8009f66:	4620      	mov	r0, r4
 8009f68:	f000 ff36 	bl	800add8 <__multiply>
 8009f6c:	ee18 1a10 	vmov	r1, s16
 8009f70:	4680      	mov	r8, r0
 8009f72:	4620      	mov	r0, r4
 8009f74:	f000 fe18 	bl	800aba8 <_Bfree>
 8009f78:	ee08 8a10 	vmov	s16, r8
 8009f7c:	9b07      	ldr	r3, [sp, #28]
 8009f7e:	1b9a      	subs	r2, r3, r6
 8009f80:	d006      	beq.n	8009f90 <_dtoa_r+0x7a0>
 8009f82:	ee18 1a10 	vmov	r1, s16
 8009f86:	4620      	mov	r0, r4
 8009f88:	f000 ffd0 	bl	800af2c <__pow5mult>
 8009f8c:	ee08 0a10 	vmov	s16, r0
 8009f90:	2101      	movs	r1, #1
 8009f92:	4620      	mov	r0, r4
 8009f94:	f000 ff0a 	bl	800adac <__i2b>
 8009f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	4606      	mov	r6, r0
 8009f9e:	f340 8088 	ble.w	800a0b2 <_dtoa_r+0x8c2>
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	4601      	mov	r1, r0
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	f000 ffc0 	bl	800af2c <__pow5mult>
 8009fac:	9b06      	ldr	r3, [sp, #24]
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	4606      	mov	r6, r0
 8009fb2:	f340 8081 	ble.w	800a0b8 <_dtoa_r+0x8c8>
 8009fb6:	f04f 0800 	mov.w	r8, #0
 8009fba:	6933      	ldr	r3, [r6, #16]
 8009fbc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009fc0:	6918      	ldr	r0, [r3, #16]
 8009fc2:	f000 fea3 	bl	800ad0c <__hi0bits>
 8009fc6:	f1c0 0020 	rsb	r0, r0, #32
 8009fca:	9b05      	ldr	r3, [sp, #20]
 8009fcc:	4418      	add	r0, r3
 8009fce:	f010 001f 	ands.w	r0, r0, #31
 8009fd2:	f000 8092 	beq.w	800a0fa <_dtoa_r+0x90a>
 8009fd6:	f1c0 0320 	rsb	r3, r0, #32
 8009fda:	2b04      	cmp	r3, #4
 8009fdc:	f340 808a 	ble.w	800a0f4 <_dtoa_r+0x904>
 8009fe0:	f1c0 001c 	rsb	r0, r0, #28
 8009fe4:	9b04      	ldr	r3, [sp, #16]
 8009fe6:	4403      	add	r3, r0
 8009fe8:	9304      	str	r3, [sp, #16]
 8009fea:	9b05      	ldr	r3, [sp, #20]
 8009fec:	4403      	add	r3, r0
 8009fee:	4405      	add	r5, r0
 8009ff0:	9305      	str	r3, [sp, #20]
 8009ff2:	9b04      	ldr	r3, [sp, #16]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	dd07      	ble.n	800a008 <_dtoa_r+0x818>
 8009ff8:	ee18 1a10 	vmov	r1, s16
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	4620      	mov	r0, r4
 800a000:	f000 ffee 	bl	800afe0 <__lshift>
 800a004:	ee08 0a10 	vmov	s16, r0
 800a008:	9b05      	ldr	r3, [sp, #20]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	dd05      	ble.n	800a01a <_dtoa_r+0x82a>
 800a00e:	4631      	mov	r1, r6
 800a010:	461a      	mov	r2, r3
 800a012:	4620      	mov	r0, r4
 800a014:	f000 ffe4 	bl	800afe0 <__lshift>
 800a018:	4606      	mov	r6, r0
 800a01a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d06e      	beq.n	800a0fe <_dtoa_r+0x90e>
 800a020:	ee18 0a10 	vmov	r0, s16
 800a024:	4631      	mov	r1, r6
 800a026:	f001 f84b 	bl	800b0c0 <__mcmp>
 800a02a:	2800      	cmp	r0, #0
 800a02c:	da67      	bge.n	800a0fe <_dtoa_r+0x90e>
 800a02e:	9b00      	ldr	r3, [sp, #0]
 800a030:	3b01      	subs	r3, #1
 800a032:	ee18 1a10 	vmov	r1, s16
 800a036:	9300      	str	r3, [sp, #0]
 800a038:	220a      	movs	r2, #10
 800a03a:	2300      	movs	r3, #0
 800a03c:	4620      	mov	r0, r4
 800a03e:	f000 fdd5 	bl	800abec <__multadd>
 800a042:	9b08      	ldr	r3, [sp, #32]
 800a044:	ee08 0a10 	vmov	s16, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	f000 81b1 	beq.w	800a3b0 <_dtoa_r+0xbc0>
 800a04e:	2300      	movs	r3, #0
 800a050:	4639      	mov	r1, r7
 800a052:	220a      	movs	r2, #10
 800a054:	4620      	mov	r0, r4
 800a056:	f000 fdc9 	bl	800abec <__multadd>
 800a05a:	9b02      	ldr	r3, [sp, #8]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	4607      	mov	r7, r0
 800a060:	f300 808e 	bgt.w	800a180 <_dtoa_r+0x990>
 800a064:	9b06      	ldr	r3, [sp, #24]
 800a066:	2b02      	cmp	r3, #2
 800a068:	dc51      	bgt.n	800a10e <_dtoa_r+0x91e>
 800a06a:	e089      	b.n	800a180 <_dtoa_r+0x990>
 800a06c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a06e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a072:	e74b      	b.n	8009f0c <_dtoa_r+0x71c>
 800a074:	9b03      	ldr	r3, [sp, #12]
 800a076:	1e5e      	subs	r6, r3, #1
 800a078:	9b07      	ldr	r3, [sp, #28]
 800a07a:	42b3      	cmp	r3, r6
 800a07c:	bfbf      	itttt	lt
 800a07e:	9b07      	ldrlt	r3, [sp, #28]
 800a080:	9607      	strlt	r6, [sp, #28]
 800a082:	1af2      	sublt	r2, r6, r3
 800a084:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a086:	bfb6      	itet	lt
 800a088:	189b      	addlt	r3, r3, r2
 800a08a:	1b9e      	subge	r6, r3, r6
 800a08c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a08e:	9b03      	ldr	r3, [sp, #12]
 800a090:	bfb8      	it	lt
 800a092:	2600      	movlt	r6, #0
 800a094:	2b00      	cmp	r3, #0
 800a096:	bfb7      	itett	lt
 800a098:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a09c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a0a0:	1a9d      	sublt	r5, r3, r2
 800a0a2:	2300      	movlt	r3, #0
 800a0a4:	e734      	b.n	8009f10 <_dtoa_r+0x720>
 800a0a6:	9e07      	ldr	r6, [sp, #28]
 800a0a8:	9d04      	ldr	r5, [sp, #16]
 800a0aa:	9f08      	ldr	r7, [sp, #32]
 800a0ac:	e73b      	b.n	8009f26 <_dtoa_r+0x736>
 800a0ae:	9a07      	ldr	r2, [sp, #28]
 800a0b0:	e767      	b.n	8009f82 <_dtoa_r+0x792>
 800a0b2:	9b06      	ldr	r3, [sp, #24]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	dc18      	bgt.n	800a0ea <_dtoa_r+0x8fa>
 800a0b8:	f1ba 0f00 	cmp.w	sl, #0
 800a0bc:	d115      	bne.n	800a0ea <_dtoa_r+0x8fa>
 800a0be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0c2:	b993      	cbnz	r3, 800a0ea <_dtoa_r+0x8fa>
 800a0c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a0c8:	0d1b      	lsrs	r3, r3, #20
 800a0ca:	051b      	lsls	r3, r3, #20
 800a0cc:	b183      	cbz	r3, 800a0f0 <_dtoa_r+0x900>
 800a0ce:	9b04      	ldr	r3, [sp, #16]
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	9304      	str	r3, [sp, #16]
 800a0d4:	9b05      	ldr	r3, [sp, #20]
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	9305      	str	r3, [sp, #20]
 800a0da:	f04f 0801 	mov.w	r8, #1
 800a0de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	f47f af6a 	bne.w	8009fba <_dtoa_r+0x7ca>
 800a0e6:	2001      	movs	r0, #1
 800a0e8:	e76f      	b.n	8009fca <_dtoa_r+0x7da>
 800a0ea:	f04f 0800 	mov.w	r8, #0
 800a0ee:	e7f6      	b.n	800a0de <_dtoa_r+0x8ee>
 800a0f0:	4698      	mov	r8, r3
 800a0f2:	e7f4      	b.n	800a0de <_dtoa_r+0x8ee>
 800a0f4:	f43f af7d 	beq.w	8009ff2 <_dtoa_r+0x802>
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	301c      	adds	r0, #28
 800a0fc:	e772      	b.n	8009fe4 <_dtoa_r+0x7f4>
 800a0fe:	9b03      	ldr	r3, [sp, #12]
 800a100:	2b00      	cmp	r3, #0
 800a102:	dc37      	bgt.n	800a174 <_dtoa_r+0x984>
 800a104:	9b06      	ldr	r3, [sp, #24]
 800a106:	2b02      	cmp	r3, #2
 800a108:	dd34      	ble.n	800a174 <_dtoa_r+0x984>
 800a10a:	9b03      	ldr	r3, [sp, #12]
 800a10c:	9302      	str	r3, [sp, #8]
 800a10e:	9b02      	ldr	r3, [sp, #8]
 800a110:	b96b      	cbnz	r3, 800a12e <_dtoa_r+0x93e>
 800a112:	4631      	mov	r1, r6
 800a114:	2205      	movs	r2, #5
 800a116:	4620      	mov	r0, r4
 800a118:	f000 fd68 	bl	800abec <__multadd>
 800a11c:	4601      	mov	r1, r0
 800a11e:	4606      	mov	r6, r0
 800a120:	ee18 0a10 	vmov	r0, s16
 800a124:	f000 ffcc 	bl	800b0c0 <__mcmp>
 800a128:	2800      	cmp	r0, #0
 800a12a:	f73f adbb 	bgt.w	8009ca4 <_dtoa_r+0x4b4>
 800a12e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a130:	9d01      	ldr	r5, [sp, #4]
 800a132:	43db      	mvns	r3, r3
 800a134:	9300      	str	r3, [sp, #0]
 800a136:	f04f 0800 	mov.w	r8, #0
 800a13a:	4631      	mov	r1, r6
 800a13c:	4620      	mov	r0, r4
 800a13e:	f000 fd33 	bl	800aba8 <_Bfree>
 800a142:	2f00      	cmp	r7, #0
 800a144:	f43f aea4 	beq.w	8009e90 <_dtoa_r+0x6a0>
 800a148:	f1b8 0f00 	cmp.w	r8, #0
 800a14c:	d005      	beq.n	800a15a <_dtoa_r+0x96a>
 800a14e:	45b8      	cmp	r8, r7
 800a150:	d003      	beq.n	800a15a <_dtoa_r+0x96a>
 800a152:	4641      	mov	r1, r8
 800a154:	4620      	mov	r0, r4
 800a156:	f000 fd27 	bl	800aba8 <_Bfree>
 800a15a:	4639      	mov	r1, r7
 800a15c:	4620      	mov	r0, r4
 800a15e:	f000 fd23 	bl	800aba8 <_Bfree>
 800a162:	e695      	b.n	8009e90 <_dtoa_r+0x6a0>
 800a164:	2600      	movs	r6, #0
 800a166:	4637      	mov	r7, r6
 800a168:	e7e1      	b.n	800a12e <_dtoa_r+0x93e>
 800a16a:	9700      	str	r7, [sp, #0]
 800a16c:	4637      	mov	r7, r6
 800a16e:	e599      	b.n	8009ca4 <_dtoa_r+0x4b4>
 800a170:	40240000 	.word	0x40240000
 800a174:	9b08      	ldr	r3, [sp, #32]
 800a176:	2b00      	cmp	r3, #0
 800a178:	f000 80ca 	beq.w	800a310 <_dtoa_r+0xb20>
 800a17c:	9b03      	ldr	r3, [sp, #12]
 800a17e:	9302      	str	r3, [sp, #8]
 800a180:	2d00      	cmp	r5, #0
 800a182:	dd05      	ble.n	800a190 <_dtoa_r+0x9a0>
 800a184:	4639      	mov	r1, r7
 800a186:	462a      	mov	r2, r5
 800a188:	4620      	mov	r0, r4
 800a18a:	f000 ff29 	bl	800afe0 <__lshift>
 800a18e:	4607      	mov	r7, r0
 800a190:	f1b8 0f00 	cmp.w	r8, #0
 800a194:	d05b      	beq.n	800a24e <_dtoa_r+0xa5e>
 800a196:	6879      	ldr	r1, [r7, #4]
 800a198:	4620      	mov	r0, r4
 800a19a:	f000 fcc5 	bl	800ab28 <_Balloc>
 800a19e:	4605      	mov	r5, r0
 800a1a0:	b928      	cbnz	r0, 800a1ae <_dtoa_r+0x9be>
 800a1a2:	4b87      	ldr	r3, [pc, #540]	; (800a3c0 <_dtoa_r+0xbd0>)
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a1aa:	f7ff bb3b 	b.w	8009824 <_dtoa_r+0x34>
 800a1ae:	693a      	ldr	r2, [r7, #16]
 800a1b0:	3202      	adds	r2, #2
 800a1b2:	0092      	lsls	r2, r2, #2
 800a1b4:	f107 010c 	add.w	r1, r7, #12
 800a1b8:	300c      	adds	r0, #12
 800a1ba:	f000 fca7 	bl	800ab0c <memcpy>
 800a1be:	2201      	movs	r2, #1
 800a1c0:	4629      	mov	r1, r5
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f000 ff0c 	bl	800afe0 <__lshift>
 800a1c8:	9b01      	ldr	r3, [sp, #4]
 800a1ca:	f103 0901 	add.w	r9, r3, #1
 800a1ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a1d2:	4413      	add	r3, r2
 800a1d4:	9305      	str	r3, [sp, #20]
 800a1d6:	f00a 0301 	and.w	r3, sl, #1
 800a1da:	46b8      	mov	r8, r7
 800a1dc:	9304      	str	r3, [sp, #16]
 800a1de:	4607      	mov	r7, r0
 800a1e0:	4631      	mov	r1, r6
 800a1e2:	ee18 0a10 	vmov	r0, s16
 800a1e6:	f7ff fa75 	bl	80096d4 <quorem>
 800a1ea:	4641      	mov	r1, r8
 800a1ec:	9002      	str	r0, [sp, #8]
 800a1ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a1f2:	ee18 0a10 	vmov	r0, s16
 800a1f6:	f000 ff63 	bl	800b0c0 <__mcmp>
 800a1fa:	463a      	mov	r2, r7
 800a1fc:	9003      	str	r0, [sp, #12]
 800a1fe:	4631      	mov	r1, r6
 800a200:	4620      	mov	r0, r4
 800a202:	f000 ff79 	bl	800b0f8 <__mdiff>
 800a206:	68c2      	ldr	r2, [r0, #12]
 800a208:	f109 3bff 	add.w	fp, r9, #4294967295
 800a20c:	4605      	mov	r5, r0
 800a20e:	bb02      	cbnz	r2, 800a252 <_dtoa_r+0xa62>
 800a210:	4601      	mov	r1, r0
 800a212:	ee18 0a10 	vmov	r0, s16
 800a216:	f000 ff53 	bl	800b0c0 <__mcmp>
 800a21a:	4602      	mov	r2, r0
 800a21c:	4629      	mov	r1, r5
 800a21e:	4620      	mov	r0, r4
 800a220:	9207      	str	r2, [sp, #28]
 800a222:	f000 fcc1 	bl	800aba8 <_Bfree>
 800a226:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a22a:	ea43 0102 	orr.w	r1, r3, r2
 800a22e:	9b04      	ldr	r3, [sp, #16]
 800a230:	430b      	orrs	r3, r1
 800a232:	464d      	mov	r5, r9
 800a234:	d10f      	bne.n	800a256 <_dtoa_r+0xa66>
 800a236:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a23a:	d02a      	beq.n	800a292 <_dtoa_r+0xaa2>
 800a23c:	9b03      	ldr	r3, [sp, #12]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	dd02      	ble.n	800a248 <_dtoa_r+0xa58>
 800a242:	9b02      	ldr	r3, [sp, #8]
 800a244:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a248:	f88b a000 	strb.w	sl, [fp]
 800a24c:	e775      	b.n	800a13a <_dtoa_r+0x94a>
 800a24e:	4638      	mov	r0, r7
 800a250:	e7ba      	b.n	800a1c8 <_dtoa_r+0x9d8>
 800a252:	2201      	movs	r2, #1
 800a254:	e7e2      	b.n	800a21c <_dtoa_r+0xa2c>
 800a256:	9b03      	ldr	r3, [sp, #12]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	db04      	blt.n	800a266 <_dtoa_r+0xa76>
 800a25c:	9906      	ldr	r1, [sp, #24]
 800a25e:	430b      	orrs	r3, r1
 800a260:	9904      	ldr	r1, [sp, #16]
 800a262:	430b      	orrs	r3, r1
 800a264:	d122      	bne.n	800a2ac <_dtoa_r+0xabc>
 800a266:	2a00      	cmp	r2, #0
 800a268:	ddee      	ble.n	800a248 <_dtoa_r+0xa58>
 800a26a:	ee18 1a10 	vmov	r1, s16
 800a26e:	2201      	movs	r2, #1
 800a270:	4620      	mov	r0, r4
 800a272:	f000 feb5 	bl	800afe0 <__lshift>
 800a276:	4631      	mov	r1, r6
 800a278:	ee08 0a10 	vmov	s16, r0
 800a27c:	f000 ff20 	bl	800b0c0 <__mcmp>
 800a280:	2800      	cmp	r0, #0
 800a282:	dc03      	bgt.n	800a28c <_dtoa_r+0xa9c>
 800a284:	d1e0      	bne.n	800a248 <_dtoa_r+0xa58>
 800a286:	f01a 0f01 	tst.w	sl, #1
 800a28a:	d0dd      	beq.n	800a248 <_dtoa_r+0xa58>
 800a28c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a290:	d1d7      	bne.n	800a242 <_dtoa_r+0xa52>
 800a292:	2339      	movs	r3, #57	; 0x39
 800a294:	f88b 3000 	strb.w	r3, [fp]
 800a298:	462b      	mov	r3, r5
 800a29a:	461d      	mov	r5, r3
 800a29c:	3b01      	subs	r3, #1
 800a29e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a2a2:	2a39      	cmp	r2, #57	; 0x39
 800a2a4:	d071      	beq.n	800a38a <_dtoa_r+0xb9a>
 800a2a6:	3201      	adds	r2, #1
 800a2a8:	701a      	strb	r2, [r3, #0]
 800a2aa:	e746      	b.n	800a13a <_dtoa_r+0x94a>
 800a2ac:	2a00      	cmp	r2, #0
 800a2ae:	dd07      	ble.n	800a2c0 <_dtoa_r+0xad0>
 800a2b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a2b4:	d0ed      	beq.n	800a292 <_dtoa_r+0xaa2>
 800a2b6:	f10a 0301 	add.w	r3, sl, #1
 800a2ba:	f88b 3000 	strb.w	r3, [fp]
 800a2be:	e73c      	b.n	800a13a <_dtoa_r+0x94a>
 800a2c0:	9b05      	ldr	r3, [sp, #20]
 800a2c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a2c6:	4599      	cmp	r9, r3
 800a2c8:	d047      	beq.n	800a35a <_dtoa_r+0xb6a>
 800a2ca:	ee18 1a10 	vmov	r1, s16
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	220a      	movs	r2, #10
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	f000 fc8a 	bl	800abec <__multadd>
 800a2d8:	45b8      	cmp	r8, r7
 800a2da:	ee08 0a10 	vmov	s16, r0
 800a2de:	f04f 0300 	mov.w	r3, #0
 800a2e2:	f04f 020a 	mov.w	r2, #10
 800a2e6:	4641      	mov	r1, r8
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	d106      	bne.n	800a2fa <_dtoa_r+0xb0a>
 800a2ec:	f000 fc7e 	bl	800abec <__multadd>
 800a2f0:	4680      	mov	r8, r0
 800a2f2:	4607      	mov	r7, r0
 800a2f4:	f109 0901 	add.w	r9, r9, #1
 800a2f8:	e772      	b.n	800a1e0 <_dtoa_r+0x9f0>
 800a2fa:	f000 fc77 	bl	800abec <__multadd>
 800a2fe:	4639      	mov	r1, r7
 800a300:	4680      	mov	r8, r0
 800a302:	2300      	movs	r3, #0
 800a304:	220a      	movs	r2, #10
 800a306:	4620      	mov	r0, r4
 800a308:	f000 fc70 	bl	800abec <__multadd>
 800a30c:	4607      	mov	r7, r0
 800a30e:	e7f1      	b.n	800a2f4 <_dtoa_r+0xb04>
 800a310:	9b03      	ldr	r3, [sp, #12]
 800a312:	9302      	str	r3, [sp, #8]
 800a314:	9d01      	ldr	r5, [sp, #4]
 800a316:	ee18 0a10 	vmov	r0, s16
 800a31a:	4631      	mov	r1, r6
 800a31c:	f7ff f9da 	bl	80096d4 <quorem>
 800a320:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a324:	9b01      	ldr	r3, [sp, #4]
 800a326:	f805 ab01 	strb.w	sl, [r5], #1
 800a32a:	1aea      	subs	r2, r5, r3
 800a32c:	9b02      	ldr	r3, [sp, #8]
 800a32e:	4293      	cmp	r3, r2
 800a330:	dd09      	ble.n	800a346 <_dtoa_r+0xb56>
 800a332:	ee18 1a10 	vmov	r1, s16
 800a336:	2300      	movs	r3, #0
 800a338:	220a      	movs	r2, #10
 800a33a:	4620      	mov	r0, r4
 800a33c:	f000 fc56 	bl	800abec <__multadd>
 800a340:	ee08 0a10 	vmov	s16, r0
 800a344:	e7e7      	b.n	800a316 <_dtoa_r+0xb26>
 800a346:	9b02      	ldr	r3, [sp, #8]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	bfc8      	it	gt
 800a34c:	461d      	movgt	r5, r3
 800a34e:	9b01      	ldr	r3, [sp, #4]
 800a350:	bfd8      	it	le
 800a352:	2501      	movle	r5, #1
 800a354:	441d      	add	r5, r3
 800a356:	f04f 0800 	mov.w	r8, #0
 800a35a:	ee18 1a10 	vmov	r1, s16
 800a35e:	2201      	movs	r2, #1
 800a360:	4620      	mov	r0, r4
 800a362:	f000 fe3d 	bl	800afe0 <__lshift>
 800a366:	4631      	mov	r1, r6
 800a368:	ee08 0a10 	vmov	s16, r0
 800a36c:	f000 fea8 	bl	800b0c0 <__mcmp>
 800a370:	2800      	cmp	r0, #0
 800a372:	dc91      	bgt.n	800a298 <_dtoa_r+0xaa8>
 800a374:	d102      	bne.n	800a37c <_dtoa_r+0xb8c>
 800a376:	f01a 0f01 	tst.w	sl, #1
 800a37a:	d18d      	bne.n	800a298 <_dtoa_r+0xaa8>
 800a37c:	462b      	mov	r3, r5
 800a37e:	461d      	mov	r5, r3
 800a380:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a384:	2a30      	cmp	r2, #48	; 0x30
 800a386:	d0fa      	beq.n	800a37e <_dtoa_r+0xb8e>
 800a388:	e6d7      	b.n	800a13a <_dtoa_r+0x94a>
 800a38a:	9a01      	ldr	r2, [sp, #4]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d184      	bne.n	800a29a <_dtoa_r+0xaaa>
 800a390:	9b00      	ldr	r3, [sp, #0]
 800a392:	3301      	adds	r3, #1
 800a394:	9300      	str	r3, [sp, #0]
 800a396:	2331      	movs	r3, #49	; 0x31
 800a398:	7013      	strb	r3, [r2, #0]
 800a39a:	e6ce      	b.n	800a13a <_dtoa_r+0x94a>
 800a39c:	4b09      	ldr	r3, [pc, #36]	; (800a3c4 <_dtoa_r+0xbd4>)
 800a39e:	f7ff ba95 	b.w	80098cc <_dtoa_r+0xdc>
 800a3a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f47f aa6e 	bne.w	8009886 <_dtoa_r+0x96>
 800a3aa:	4b07      	ldr	r3, [pc, #28]	; (800a3c8 <_dtoa_r+0xbd8>)
 800a3ac:	f7ff ba8e 	b.w	80098cc <_dtoa_r+0xdc>
 800a3b0:	9b02      	ldr	r3, [sp, #8]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	dcae      	bgt.n	800a314 <_dtoa_r+0xb24>
 800a3b6:	9b06      	ldr	r3, [sp, #24]
 800a3b8:	2b02      	cmp	r3, #2
 800a3ba:	f73f aea8 	bgt.w	800a10e <_dtoa_r+0x91e>
 800a3be:	e7a9      	b.n	800a314 <_dtoa_r+0xb24>
 800a3c0:	0800cf10 	.word	0x0800cf10
 800a3c4:	0800d109 	.word	0x0800d109
 800a3c8:	0800ce91 	.word	0x0800ce91

0800a3cc <rshift>:
 800a3cc:	6903      	ldr	r3, [r0, #16]
 800a3ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a3d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a3da:	f100 0414 	add.w	r4, r0, #20
 800a3de:	dd45      	ble.n	800a46c <rshift+0xa0>
 800a3e0:	f011 011f 	ands.w	r1, r1, #31
 800a3e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a3e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a3ec:	d10c      	bne.n	800a408 <rshift+0x3c>
 800a3ee:	f100 0710 	add.w	r7, r0, #16
 800a3f2:	4629      	mov	r1, r5
 800a3f4:	42b1      	cmp	r1, r6
 800a3f6:	d334      	bcc.n	800a462 <rshift+0x96>
 800a3f8:	1a9b      	subs	r3, r3, r2
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	1eea      	subs	r2, r5, #3
 800a3fe:	4296      	cmp	r6, r2
 800a400:	bf38      	it	cc
 800a402:	2300      	movcc	r3, #0
 800a404:	4423      	add	r3, r4
 800a406:	e015      	b.n	800a434 <rshift+0x68>
 800a408:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a40c:	f1c1 0820 	rsb	r8, r1, #32
 800a410:	40cf      	lsrs	r7, r1
 800a412:	f105 0e04 	add.w	lr, r5, #4
 800a416:	46a1      	mov	r9, r4
 800a418:	4576      	cmp	r6, lr
 800a41a:	46f4      	mov	ip, lr
 800a41c:	d815      	bhi.n	800a44a <rshift+0x7e>
 800a41e:	1a9a      	subs	r2, r3, r2
 800a420:	0092      	lsls	r2, r2, #2
 800a422:	3a04      	subs	r2, #4
 800a424:	3501      	adds	r5, #1
 800a426:	42ae      	cmp	r6, r5
 800a428:	bf38      	it	cc
 800a42a:	2200      	movcc	r2, #0
 800a42c:	18a3      	adds	r3, r4, r2
 800a42e:	50a7      	str	r7, [r4, r2]
 800a430:	b107      	cbz	r7, 800a434 <rshift+0x68>
 800a432:	3304      	adds	r3, #4
 800a434:	1b1a      	subs	r2, r3, r4
 800a436:	42a3      	cmp	r3, r4
 800a438:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a43c:	bf08      	it	eq
 800a43e:	2300      	moveq	r3, #0
 800a440:	6102      	str	r2, [r0, #16]
 800a442:	bf08      	it	eq
 800a444:	6143      	streq	r3, [r0, #20]
 800a446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a44a:	f8dc c000 	ldr.w	ip, [ip]
 800a44e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a452:	ea4c 0707 	orr.w	r7, ip, r7
 800a456:	f849 7b04 	str.w	r7, [r9], #4
 800a45a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a45e:	40cf      	lsrs	r7, r1
 800a460:	e7da      	b.n	800a418 <rshift+0x4c>
 800a462:	f851 cb04 	ldr.w	ip, [r1], #4
 800a466:	f847 cf04 	str.w	ip, [r7, #4]!
 800a46a:	e7c3      	b.n	800a3f4 <rshift+0x28>
 800a46c:	4623      	mov	r3, r4
 800a46e:	e7e1      	b.n	800a434 <rshift+0x68>

0800a470 <__hexdig_fun>:
 800a470:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a474:	2b09      	cmp	r3, #9
 800a476:	d802      	bhi.n	800a47e <__hexdig_fun+0xe>
 800a478:	3820      	subs	r0, #32
 800a47a:	b2c0      	uxtb	r0, r0
 800a47c:	4770      	bx	lr
 800a47e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a482:	2b05      	cmp	r3, #5
 800a484:	d801      	bhi.n	800a48a <__hexdig_fun+0x1a>
 800a486:	3847      	subs	r0, #71	; 0x47
 800a488:	e7f7      	b.n	800a47a <__hexdig_fun+0xa>
 800a48a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a48e:	2b05      	cmp	r3, #5
 800a490:	d801      	bhi.n	800a496 <__hexdig_fun+0x26>
 800a492:	3827      	subs	r0, #39	; 0x27
 800a494:	e7f1      	b.n	800a47a <__hexdig_fun+0xa>
 800a496:	2000      	movs	r0, #0
 800a498:	4770      	bx	lr
	...

0800a49c <__gethex>:
 800a49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a0:	ed2d 8b02 	vpush	{d8}
 800a4a4:	b089      	sub	sp, #36	; 0x24
 800a4a6:	ee08 0a10 	vmov	s16, r0
 800a4aa:	9304      	str	r3, [sp, #16]
 800a4ac:	4bb4      	ldr	r3, [pc, #720]	; (800a780 <__gethex+0x2e4>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	9301      	str	r3, [sp, #4]
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	468b      	mov	fp, r1
 800a4b6:	4690      	mov	r8, r2
 800a4b8:	f7f5 fe8a 	bl	80001d0 <strlen>
 800a4bc:	9b01      	ldr	r3, [sp, #4]
 800a4be:	f8db 2000 	ldr.w	r2, [fp]
 800a4c2:	4403      	add	r3, r0
 800a4c4:	4682      	mov	sl, r0
 800a4c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a4ca:	9305      	str	r3, [sp, #20]
 800a4cc:	1c93      	adds	r3, r2, #2
 800a4ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a4d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a4d6:	32fe      	adds	r2, #254	; 0xfe
 800a4d8:	18d1      	adds	r1, r2, r3
 800a4da:	461f      	mov	r7, r3
 800a4dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a4e0:	9100      	str	r1, [sp, #0]
 800a4e2:	2830      	cmp	r0, #48	; 0x30
 800a4e4:	d0f8      	beq.n	800a4d8 <__gethex+0x3c>
 800a4e6:	f7ff ffc3 	bl	800a470 <__hexdig_fun>
 800a4ea:	4604      	mov	r4, r0
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	d13a      	bne.n	800a566 <__gethex+0xca>
 800a4f0:	9901      	ldr	r1, [sp, #4]
 800a4f2:	4652      	mov	r2, sl
 800a4f4:	4638      	mov	r0, r7
 800a4f6:	f001 fdb3 	bl	800c060 <strncmp>
 800a4fa:	4605      	mov	r5, r0
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	d168      	bne.n	800a5d2 <__gethex+0x136>
 800a500:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a504:	eb07 060a 	add.w	r6, r7, sl
 800a508:	f7ff ffb2 	bl	800a470 <__hexdig_fun>
 800a50c:	2800      	cmp	r0, #0
 800a50e:	d062      	beq.n	800a5d6 <__gethex+0x13a>
 800a510:	4633      	mov	r3, r6
 800a512:	7818      	ldrb	r0, [r3, #0]
 800a514:	2830      	cmp	r0, #48	; 0x30
 800a516:	461f      	mov	r7, r3
 800a518:	f103 0301 	add.w	r3, r3, #1
 800a51c:	d0f9      	beq.n	800a512 <__gethex+0x76>
 800a51e:	f7ff ffa7 	bl	800a470 <__hexdig_fun>
 800a522:	2301      	movs	r3, #1
 800a524:	fab0 f480 	clz	r4, r0
 800a528:	0964      	lsrs	r4, r4, #5
 800a52a:	4635      	mov	r5, r6
 800a52c:	9300      	str	r3, [sp, #0]
 800a52e:	463a      	mov	r2, r7
 800a530:	4616      	mov	r6, r2
 800a532:	3201      	adds	r2, #1
 800a534:	7830      	ldrb	r0, [r6, #0]
 800a536:	f7ff ff9b 	bl	800a470 <__hexdig_fun>
 800a53a:	2800      	cmp	r0, #0
 800a53c:	d1f8      	bne.n	800a530 <__gethex+0x94>
 800a53e:	9901      	ldr	r1, [sp, #4]
 800a540:	4652      	mov	r2, sl
 800a542:	4630      	mov	r0, r6
 800a544:	f001 fd8c 	bl	800c060 <strncmp>
 800a548:	b980      	cbnz	r0, 800a56c <__gethex+0xd0>
 800a54a:	b94d      	cbnz	r5, 800a560 <__gethex+0xc4>
 800a54c:	eb06 050a 	add.w	r5, r6, sl
 800a550:	462a      	mov	r2, r5
 800a552:	4616      	mov	r6, r2
 800a554:	3201      	adds	r2, #1
 800a556:	7830      	ldrb	r0, [r6, #0]
 800a558:	f7ff ff8a 	bl	800a470 <__hexdig_fun>
 800a55c:	2800      	cmp	r0, #0
 800a55e:	d1f8      	bne.n	800a552 <__gethex+0xb6>
 800a560:	1bad      	subs	r5, r5, r6
 800a562:	00ad      	lsls	r5, r5, #2
 800a564:	e004      	b.n	800a570 <__gethex+0xd4>
 800a566:	2400      	movs	r4, #0
 800a568:	4625      	mov	r5, r4
 800a56a:	e7e0      	b.n	800a52e <__gethex+0x92>
 800a56c:	2d00      	cmp	r5, #0
 800a56e:	d1f7      	bne.n	800a560 <__gethex+0xc4>
 800a570:	7833      	ldrb	r3, [r6, #0]
 800a572:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a576:	2b50      	cmp	r3, #80	; 0x50
 800a578:	d13b      	bne.n	800a5f2 <__gethex+0x156>
 800a57a:	7873      	ldrb	r3, [r6, #1]
 800a57c:	2b2b      	cmp	r3, #43	; 0x2b
 800a57e:	d02c      	beq.n	800a5da <__gethex+0x13e>
 800a580:	2b2d      	cmp	r3, #45	; 0x2d
 800a582:	d02e      	beq.n	800a5e2 <__gethex+0x146>
 800a584:	1c71      	adds	r1, r6, #1
 800a586:	f04f 0900 	mov.w	r9, #0
 800a58a:	7808      	ldrb	r0, [r1, #0]
 800a58c:	f7ff ff70 	bl	800a470 <__hexdig_fun>
 800a590:	1e43      	subs	r3, r0, #1
 800a592:	b2db      	uxtb	r3, r3
 800a594:	2b18      	cmp	r3, #24
 800a596:	d82c      	bhi.n	800a5f2 <__gethex+0x156>
 800a598:	f1a0 0210 	sub.w	r2, r0, #16
 800a59c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a5a0:	f7ff ff66 	bl	800a470 <__hexdig_fun>
 800a5a4:	1e43      	subs	r3, r0, #1
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	2b18      	cmp	r3, #24
 800a5aa:	d91d      	bls.n	800a5e8 <__gethex+0x14c>
 800a5ac:	f1b9 0f00 	cmp.w	r9, #0
 800a5b0:	d000      	beq.n	800a5b4 <__gethex+0x118>
 800a5b2:	4252      	negs	r2, r2
 800a5b4:	4415      	add	r5, r2
 800a5b6:	f8cb 1000 	str.w	r1, [fp]
 800a5ba:	b1e4      	cbz	r4, 800a5f6 <__gethex+0x15a>
 800a5bc:	9b00      	ldr	r3, [sp, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	bf14      	ite	ne
 800a5c2:	2700      	movne	r7, #0
 800a5c4:	2706      	moveq	r7, #6
 800a5c6:	4638      	mov	r0, r7
 800a5c8:	b009      	add	sp, #36	; 0x24
 800a5ca:	ecbd 8b02 	vpop	{d8}
 800a5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5d2:	463e      	mov	r6, r7
 800a5d4:	4625      	mov	r5, r4
 800a5d6:	2401      	movs	r4, #1
 800a5d8:	e7ca      	b.n	800a570 <__gethex+0xd4>
 800a5da:	f04f 0900 	mov.w	r9, #0
 800a5de:	1cb1      	adds	r1, r6, #2
 800a5e0:	e7d3      	b.n	800a58a <__gethex+0xee>
 800a5e2:	f04f 0901 	mov.w	r9, #1
 800a5e6:	e7fa      	b.n	800a5de <__gethex+0x142>
 800a5e8:	230a      	movs	r3, #10
 800a5ea:	fb03 0202 	mla	r2, r3, r2, r0
 800a5ee:	3a10      	subs	r2, #16
 800a5f0:	e7d4      	b.n	800a59c <__gethex+0x100>
 800a5f2:	4631      	mov	r1, r6
 800a5f4:	e7df      	b.n	800a5b6 <__gethex+0x11a>
 800a5f6:	1bf3      	subs	r3, r6, r7
 800a5f8:	3b01      	subs	r3, #1
 800a5fa:	4621      	mov	r1, r4
 800a5fc:	2b07      	cmp	r3, #7
 800a5fe:	dc0b      	bgt.n	800a618 <__gethex+0x17c>
 800a600:	ee18 0a10 	vmov	r0, s16
 800a604:	f000 fa90 	bl	800ab28 <_Balloc>
 800a608:	4604      	mov	r4, r0
 800a60a:	b940      	cbnz	r0, 800a61e <__gethex+0x182>
 800a60c:	4b5d      	ldr	r3, [pc, #372]	; (800a784 <__gethex+0x2e8>)
 800a60e:	4602      	mov	r2, r0
 800a610:	21de      	movs	r1, #222	; 0xde
 800a612:	485d      	ldr	r0, [pc, #372]	; (800a788 <__gethex+0x2ec>)
 800a614:	f001 fdf4 	bl	800c200 <__assert_func>
 800a618:	3101      	adds	r1, #1
 800a61a:	105b      	asrs	r3, r3, #1
 800a61c:	e7ee      	b.n	800a5fc <__gethex+0x160>
 800a61e:	f100 0914 	add.w	r9, r0, #20
 800a622:	f04f 0b00 	mov.w	fp, #0
 800a626:	f1ca 0301 	rsb	r3, sl, #1
 800a62a:	f8cd 9008 	str.w	r9, [sp, #8]
 800a62e:	f8cd b000 	str.w	fp, [sp]
 800a632:	9306      	str	r3, [sp, #24]
 800a634:	42b7      	cmp	r7, r6
 800a636:	d340      	bcc.n	800a6ba <__gethex+0x21e>
 800a638:	9802      	ldr	r0, [sp, #8]
 800a63a:	9b00      	ldr	r3, [sp, #0]
 800a63c:	f840 3b04 	str.w	r3, [r0], #4
 800a640:	eba0 0009 	sub.w	r0, r0, r9
 800a644:	1080      	asrs	r0, r0, #2
 800a646:	0146      	lsls	r6, r0, #5
 800a648:	6120      	str	r0, [r4, #16]
 800a64a:	4618      	mov	r0, r3
 800a64c:	f000 fb5e 	bl	800ad0c <__hi0bits>
 800a650:	1a30      	subs	r0, r6, r0
 800a652:	f8d8 6000 	ldr.w	r6, [r8]
 800a656:	42b0      	cmp	r0, r6
 800a658:	dd63      	ble.n	800a722 <__gethex+0x286>
 800a65a:	1b87      	subs	r7, r0, r6
 800a65c:	4639      	mov	r1, r7
 800a65e:	4620      	mov	r0, r4
 800a660:	f000 ff02 	bl	800b468 <__any_on>
 800a664:	4682      	mov	sl, r0
 800a666:	b1a8      	cbz	r0, 800a694 <__gethex+0x1f8>
 800a668:	1e7b      	subs	r3, r7, #1
 800a66a:	1159      	asrs	r1, r3, #5
 800a66c:	f003 021f 	and.w	r2, r3, #31
 800a670:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a674:	f04f 0a01 	mov.w	sl, #1
 800a678:	fa0a f202 	lsl.w	r2, sl, r2
 800a67c:	420a      	tst	r2, r1
 800a67e:	d009      	beq.n	800a694 <__gethex+0x1f8>
 800a680:	4553      	cmp	r3, sl
 800a682:	dd05      	ble.n	800a690 <__gethex+0x1f4>
 800a684:	1eb9      	subs	r1, r7, #2
 800a686:	4620      	mov	r0, r4
 800a688:	f000 feee 	bl	800b468 <__any_on>
 800a68c:	2800      	cmp	r0, #0
 800a68e:	d145      	bne.n	800a71c <__gethex+0x280>
 800a690:	f04f 0a02 	mov.w	sl, #2
 800a694:	4639      	mov	r1, r7
 800a696:	4620      	mov	r0, r4
 800a698:	f7ff fe98 	bl	800a3cc <rshift>
 800a69c:	443d      	add	r5, r7
 800a69e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a6a2:	42ab      	cmp	r3, r5
 800a6a4:	da4c      	bge.n	800a740 <__gethex+0x2a4>
 800a6a6:	ee18 0a10 	vmov	r0, s16
 800a6aa:	4621      	mov	r1, r4
 800a6ac:	f000 fa7c 	bl	800aba8 <_Bfree>
 800a6b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	6013      	str	r3, [r2, #0]
 800a6b6:	27a3      	movs	r7, #163	; 0xa3
 800a6b8:	e785      	b.n	800a5c6 <__gethex+0x12a>
 800a6ba:	1e73      	subs	r3, r6, #1
 800a6bc:	9a05      	ldr	r2, [sp, #20]
 800a6be:	9303      	str	r3, [sp, #12]
 800a6c0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d019      	beq.n	800a6fc <__gethex+0x260>
 800a6c8:	f1bb 0f20 	cmp.w	fp, #32
 800a6cc:	d107      	bne.n	800a6de <__gethex+0x242>
 800a6ce:	9b02      	ldr	r3, [sp, #8]
 800a6d0:	9a00      	ldr	r2, [sp, #0]
 800a6d2:	f843 2b04 	str.w	r2, [r3], #4
 800a6d6:	9302      	str	r3, [sp, #8]
 800a6d8:	2300      	movs	r3, #0
 800a6da:	9300      	str	r3, [sp, #0]
 800a6dc:	469b      	mov	fp, r3
 800a6de:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a6e2:	f7ff fec5 	bl	800a470 <__hexdig_fun>
 800a6e6:	9b00      	ldr	r3, [sp, #0]
 800a6e8:	f000 000f 	and.w	r0, r0, #15
 800a6ec:	fa00 f00b 	lsl.w	r0, r0, fp
 800a6f0:	4303      	orrs	r3, r0
 800a6f2:	9300      	str	r3, [sp, #0]
 800a6f4:	f10b 0b04 	add.w	fp, fp, #4
 800a6f8:	9b03      	ldr	r3, [sp, #12]
 800a6fa:	e00d      	b.n	800a718 <__gethex+0x27c>
 800a6fc:	9b03      	ldr	r3, [sp, #12]
 800a6fe:	9a06      	ldr	r2, [sp, #24]
 800a700:	4413      	add	r3, r2
 800a702:	42bb      	cmp	r3, r7
 800a704:	d3e0      	bcc.n	800a6c8 <__gethex+0x22c>
 800a706:	4618      	mov	r0, r3
 800a708:	9901      	ldr	r1, [sp, #4]
 800a70a:	9307      	str	r3, [sp, #28]
 800a70c:	4652      	mov	r2, sl
 800a70e:	f001 fca7 	bl	800c060 <strncmp>
 800a712:	9b07      	ldr	r3, [sp, #28]
 800a714:	2800      	cmp	r0, #0
 800a716:	d1d7      	bne.n	800a6c8 <__gethex+0x22c>
 800a718:	461e      	mov	r6, r3
 800a71a:	e78b      	b.n	800a634 <__gethex+0x198>
 800a71c:	f04f 0a03 	mov.w	sl, #3
 800a720:	e7b8      	b.n	800a694 <__gethex+0x1f8>
 800a722:	da0a      	bge.n	800a73a <__gethex+0x29e>
 800a724:	1a37      	subs	r7, r6, r0
 800a726:	4621      	mov	r1, r4
 800a728:	ee18 0a10 	vmov	r0, s16
 800a72c:	463a      	mov	r2, r7
 800a72e:	f000 fc57 	bl	800afe0 <__lshift>
 800a732:	1bed      	subs	r5, r5, r7
 800a734:	4604      	mov	r4, r0
 800a736:	f100 0914 	add.w	r9, r0, #20
 800a73a:	f04f 0a00 	mov.w	sl, #0
 800a73e:	e7ae      	b.n	800a69e <__gethex+0x202>
 800a740:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a744:	42a8      	cmp	r0, r5
 800a746:	dd72      	ble.n	800a82e <__gethex+0x392>
 800a748:	1b45      	subs	r5, r0, r5
 800a74a:	42ae      	cmp	r6, r5
 800a74c:	dc36      	bgt.n	800a7bc <__gethex+0x320>
 800a74e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a752:	2b02      	cmp	r3, #2
 800a754:	d02a      	beq.n	800a7ac <__gethex+0x310>
 800a756:	2b03      	cmp	r3, #3
 800a758:	d02c      	beq.n	800a7b4 <__gethex+0x318>
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d11c      	bne.n	800a798 <__gethex+0x2fc>
 800a75e:	42ae      	cmp	r6, r5
 800a760:	d11a      	bne.n	800a798 <__gethex+0x2fc>
 800a762:	2e01      	cmp	r6, #1
 800a764:	d112      	bne.n	800a78c <__gethex+0x2f0>
 800a766:	9a04      	ldr	r2, [sp, #16]
 800a768:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a76c:	6013      	str	r3, [r2, #0]
 800a76e:	2301      	movs	r3, #1
 800a770:	6123      	str	r3, [r4, #16]
 800a772:	f8c9 3000 	str.w	r3, [r9]
 800a776:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a778:	2762      	movs	r7, #98	; 0x62
 800a77a:	601c      	str	r4, [r3, #0]
 800a77c:	e723      	b.n	800a5c6 <__gethex+0x12a>
 800a77e:	bf00      	nop
 800a780:	0800cf88 	.word	0x0800cf88
 800a784:	0800cf10 	.word	0x0800cf10
 800a788:	0800cf21 	.word	0x0800cf21
 800a78c:	1e71      	subs	r1, r6, #1
 800a78e:	4620      	mov	r0, r4
 800a790:	f000 fe6a 	bl	800b468 <__any_on>
 800a794:	2800      	cmp	r0, #0
 800a796:	d1e6      	bne.n	800a766 <__gethex+0x2ca>
 800a798:	ee18 0a10 	vmov	r0, s16
 800a79c:	4621      	mov	r1, r4
 800a79e:	f000 fa03 	bl	800aba8 <_Bfree>
 800a7a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	6013      	str	r3, [r2, #0]
 800a7a8:	2750      	movs	r7, #80	; 0x50
 800a7aa:	e70c      	b.n	800a5c6 <__gethex+0x12a>
 800a7ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d1f2      	bne.n	800a798 <__gethex+0x2fc>
 800a7b2:	e7d8      	b.n	800a766 <__gethex+0x2ca>
 800a7b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d1d5      	bne.n	800a766 <__gethex+0x2ca>
 800a7ba:	e7ed      	b.n	800a798 <__gethex+0x2fc>
 800a7bc:	1e6f      	subs	r7, r5, #1
 800a7be:	f1ba 0f00 	cmp.w	sl, #0
 800a7c2:	d131      	bne.n	800a828 <__gethex+0x38c>
 800a7c4:	b127      	cbz	r7, 800a7d0 <__gethex+0x334>
 800a7c6:	4639      	mov	r1, r7
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f000 fe4d 	bl	800b468 <__any_on>
 800a7ce:	4682      	mov	sl, r0
 800a7d0:	117b      	asrs	r3, r7, #5
 800a7d2:	2101      	movs	r1, #1
 800a7d4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a7d8:	f007 071f 	and.w	r7, r7, #31
 800a7dc:	fa01 f707 	lsl.w	r7, r1, r7
 800a7e0:	421f      	tst	r7, r3
 800a7e2:	4629      	mov	r1, r5
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	bf18      	it	ne
 800a7e8:	f04a 0a02 	orrne.w	sl, sl, #2
 800a7ec:	1b76      	subs	r6, r6, r5
 800a7ee:	f7ff fded 	bl	800a3cc <rshift>
 800a7f2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a7f6:	2702      	movs	r7, #2
 800a7f8:	f1ba 0f00 	cmp.w	sl, #0
 800a7fc:	d048      	beq.n	800a890 <__gethex+0x3f4>
 800a7fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a802:	2b02      	cmp	r3, #2
 800a804:	d015      	beq.n	800a832 <__gethex+0x396>
 800a806:	2b03      	cmp	r3, #3
 800a808:	d017      	beq.n	800a83a <__gethex+0x39e>
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d109      	bne.n	800a822 <__gethex+0x386>
 800a80e:	f01a 0f02 	tst.w	sl, #2
 800a812:	d006      	beq.n	800a822 <__gethex+0x386>
 800a814:	f8d9 0000 	ldr.w	r0, [r9]
 800a818:	ea4a 0a00 	orr.w	sl, sl, r0
 800a81c:	f01a 0f01 	tst.w	sl, #1
 800a820:	d10e      	bne.n	800a840 <__gethex+0x3a4>
 800a822:	f047 0710 	orr.w	r7, r7, #16
 800a826:	e033      	b.n	800a890 <__gethex+0x3f4>
 800a828:	f04f 0a01 	mov.w	sl, #1
 800a82c:	e7d0      	b.n	800a7d0 <__gethex+0x334>
 800a82e:	2701      	movs	r7, #1
 800a830:	e7e2      	b.n	800a7f8 <__gethex+0x35c>
 800a832:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a834:	f1c3 0301 	rsb	r3, r3, #1
 800a838:	9315      	str	r3, [sp, #84]	; 0x54
 800a83a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d0f0      	beq.n	800a822 <__gethex+0x386>
 800a840:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a844:	f104 0314 	add.w	r3, r4, #20
 800a848:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a84c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a850:	f04f 0c00 	mov.w	ip, #0
 800a854:	4618      	mov	r0, r3
 800a856:	f853 2b04 	ldr.w	r2, [r3], #4
 800a85a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a85e:	d01c      	beq.n	800a89a <__gethex+0x3fe>
 800a860:	3201      	adds	r2, #1
 800a862:	6002      	str	r2, [r0, #0]
 800a864:	2f02      	cmp	r7, #2
 800a866:	f104 0314 	add.w	r3, r4, #20
 800a86a:	d13f      	bne.n	800a8ec <__gethex+0x450>
 800a86c:	f8d8 2000 	ldr.w	r2, [r8]
 800a870:	3a01      	subs	r2, #1
 800a872:	42b2      	cmp	r2, r6
 800a874:	d10a      	bne.n	800a88c <__gethex+0x3f0>
 800a876:	1171      	asrs	r1, r6, #5
 800a878:	2201      	movs	r2, #1
 800a87a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a87e:	f006 061f 	and.w	r6, r6, #31
 800a882:	fa02 f606 	lsl.w	r6, r2, r6
 800a886:	421e      	tst	r6, r3
 800a888:	bf18      	it	ne
 800a88a:	4617      	movne	r7, r2
 800a88c:	f047 0720 	orr.w	r7, r7, #32
 800a890:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a892:	601c      	str	r4, [r3, #0]
 800a894:	9b04      	ldr	r3, [sp, #16]
 800a896:	601d      	str	r5, [r3, #0]
 800a898:	e695      	b.n	800a5c6 <__gethex+0x12a>
 800a89a:	4299      	cmp	r1, r3
 800a89c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a8a0:	d8d8      	bhi.n	800a854 <__gethex+0x3b8>
 800a8a2:	68a3      	ldr	r3, [r4, #8]
 800a8a4:	459b      	cmp	fp, r3
 800a8a6:	db19      	blt.n	800a8dc <__gethex+0x440>
 800a8a8:	6861      	ldr	r1, [r4, #4]
 800a8aa:	ee18 0a10 	vmov	r0, s16
 800a8ae:	3101      	adds	r1, #1
 800a8b0:	f000 f93a 	bl	800ab28 <_Balloc>
 800a8b4:	4681      	mov	r9, r0
 800a8b6:	b918      	cbnz	r0, 800a8c0 <__gethex+0x424>
 800a8b8:	4b1a      	ldr	r3, [pc, #104]	; (800a924 <__gethex+0x488>)
 800a8ba:	4602      	mov	r2, r0
 800a8bc:	2184      	movs	r1, #132	; 0x84
 800a8be:	e6a8      	b.n	800a612 <__gethex+0x176>
 800a8c0:	6922      	ldr	r2, [r4, #16]
 800a8c2:	3202      	adds	r2, #2
 800a8c4:	f104 010c 	add.w	r1, r4, #12
 800a8c8:	0092      	lsls	r2, r2, #2
 800a8ca:	300c      	adds	r0, #12
 800a8cc:	f000 f91e 	bl	800ab0c <memcpy>
 800a8d0:	4621      	mov	r1, r4
 800a8d2:	ee18 0a10 	vmov	r0, s16
 800a8d6:	f000 f967 	bl	800aba8 <_Bfree>
 800a8da:	464c      	mov	r4, r9
 800a8dc:	6923      	ldr	r3, [r4, #16]
 800a8de:	1c5a      	adds	r2, r3, #1
 800a8e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a8e4:	6122      	str	r2, [r4, #16]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	615a      	str	r2, [r3, #20]
 800a8ea:	e7bb      	b.n	800a864 <__gethex+0x3c8>
 800a8ec:	6922      	ldr	r2, [r4, #16]
 800a8ee:	455a      	cmp	r2, fp
 800a8f0:	dd0b      	ble.n	800a90a <__gethex+0x46e>
 800a8f2:	2101      	movs	r1, #1
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	f7ff fd69 	bl	800a3cc <rshift>
 800a8fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a8fe:	3501      	adds	r5, #1
 800a900:	42ab      	cmp	r3, r5
 800a902:	f6ff aed0 	blt.w	800a6a6 <__gethex+0x20a>
 800a906:	2701      	movs	r7, #1
 800a908:	e7c0      	b.n	800a88c <__gethex+0x3f0>
 800a90a:	f016 061f 	ands.w	r6, r6, #31
 800a90e:	d0fa      	beq.n	800a906 <__gethex+0x46a>
 800a910:	4453      	add	r3, sl
 800a912:	f1c6 0620 	rsb	r6, r6, #32
 800a916:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a91a:	f000 f9f7 	bl	800ad0c <__hi0bits>
 800a91e:	42b0      	cmp	r0, r6
 800a920:	dbe7      	blt.n	800a8f2 <__gethex+0x456>
 800a922:	e7f0      	b.n	800a906 <__gethex+0x46a>
 800a924:	0800cf10 	.word	0x0800cf10

0800a928 <L_shift>:
 800a928:	f1c2 0208 	rsb	r2, r2, #8
 800a92c:	0092      	lsls	r2, r2, #2
 800a92e:	b570      	push	{r4, r5, r6, lr}
 800a930:	f1c2 0620 	rsb	r6, r2, #32
 800a934:	6843      	ldr	r3, [r0, #4]
 800a936:	6804      	ldr	r4, [r0, #0]
 800a938:	fa03 f506 	lsl.w	r5, r3, r6
 800a93c:	432c      	orrs	r4, r5
 800a93e:	40d3      	lsrs	r3, r2
 800a940:	6004      	str	r4, [r0, #0]
 800a942:	f840 3f04 	str.w	r3, [r0, #4]!
 800a946:	4288      	cmp	r0, r1
 800a948:	d3f4      	bcc.n	800a934 <L_shift+0xc>
 800a94a:	bd70      	pop	{r4, r5, r6, pc}

0800a94c <__match>:
 800a94c:	b530      	push	{r4, r5, lr}
 800a94e:	6803      	ldr	r3, [r0, #0]
 800a950:	3301      	adds	r3, #1
 800a952:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a956:	b914      	cbnz	r4, 800a95e <__match+0x12>
 800a958:	6003      	str	r3, [r0, #0]
 800a95a:	2001      	movs	r0, #1
 800a95c:	bd30      	pop	{r4, r5, pc}
 800a95e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a962:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a966:	2d19      	cmp	r5, #25
 800a968:	bf98      	it	ls
 800a96a:	3220      	addls	r2, #32
 800a96c:	42a2      	cmp	r2, r4
 800a96e:	d0f0      	beq.n	800a952 <__match+0x6>
 800a970:	2000      	movs	r0, #0
 800a972:	e7f3      	b.n	800a95c <__match+0x10>

0800a974 <__hexnan>:
 800a974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a978:	680b      	ldr	r3, [r1, #0]
 800a97a:	115e      	asrs	r6, r3, #5
 800a97c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a980:	f013 031f 	ands.w	r3, r3, #31
 800a984:	b087      	sub	sp, #28
 800a986:	bf18      	it	ne
 800a988:	3604      	addne	r6, #4
 800a98a:	2500      	movs	r5, #0
 800a98c:	1f37      	subs	r7, r6, #4
 800a98e:	4690      	mov	r8, r2
 800a990:	6802      	ldr	r2, [r0, #0]
 800a992:	9301      	str	r3, [sp, #4]
 800a994:	4682      	mov	sl, r0
 800a996:	f846 5c04 	str.w	r5, [r6, #-4]
 800a99a:	46b9      	mov	r9, r7
 800a99c:	463c      	mov	r4, r7
 800a99e:	9502      	str	r5, [sp, #8]
 800a9a0:	46ab      	mov	fp, r5
 800a9a2:	7851      	ldrb	r1, [r2, #1]
 800a9a4:	1c53      	adds	r3, r2, #1
 800a9a6:	9303      	str	r3, [sp, #12]
 800a9a8:	b341      	cbz	r1, 800a9fc <__hexnan+0x88>
 800a9aa:	4608      	mov	r0, r1
 800a9ac:	9205      	str	r2, [sp, #20]
 800a9ae:	9104      	str	r1, [sp, #16]
 800a9b0:	f7ff fd5e 	bl	800a470 <__hexdig_fun>
 800a9b4:	2800      	cmp	r0, #0
 800a9b6:	d14f      	bne.n	800aa58 <__hexnan+0xe4>
 800a9b8:	9904      	ldr	r1, [sp, #16]
 800a9ba:	9a05      	ldr	r2, [sp, #20]
 800a9bc:	2920      	cmp	r1, #32
 800a9be:	d818      	bhi.n	800a9f2 <__hexnan+0x7e>
 800a9c0:	9b02      	ldr	r3, [sp, #8]
 800a9c2:	459b      	cmp	fp, r3
 800a9c4:	dd13      	ble.n	800a9ee <__hexnan+0x7a>
 800a9c6:	454c      	cmp	r4, r9
 800a9c8:	d206      	bcs.n	800a9d8 <__hexnan+0x64>
 800a9ca:	2d07      	cmp	r5, #7
 800a9cc:	dc04      	bgt.n	800a9d8 <__hexnan+0x64>
 800a9ce:	462a      	mov	r2, r5
 800a9d0:	4649      	mov	r1, r9
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	f7ff ffa8 	bl	800a928 <L_shift>
 800a9d8:	4544      	cmp	r4, r8
 800a9da:	d950      	bls.n	800aa7e <__hexnan+0x10a>
 800a9dc:	2300      	movs	r3, #0
 800a9de:	f1a4 0904 	sub.w	r9, r4, #4
 800a9e2:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9e6:	f8cd b008 	str.w	fp, [sp, #8]
 800a9ea:	464c      	mov	r4, r9
 800a9ec:	461d      	mov	r5, r3
 800a9ee:	9a03      	ldr	r2, [sp, #12]
 800a9f0:	e7d7      	b.n	800a9a2 <__hexnan+0x2e>
 800a9f2:	2929      	cmp	r1, #41	; 0x29
 800a9f4:	d156      	bne.n	800aaa4 <__hexnan+0x130>
 800a9f6:	3202      	adds	r2, #2
 800a9f8:	f8ca 2000 	str.w	r2, [sl]
 800a9fc:	f1bb 0f00 	cmp.w	fp, #0
 800aa00:	d050      	beq.n	800aaa4 <__hexnan+0x130>
 800aa02:	454c      	cmp	r4, r9
 800aa04:	d206      	bcs.n	800aa14 <__hexnan+0xa0>
 800aa06:	2d07      	cmp	r5, #7
 800aa08:	dc04      	bgt.n	800aa14 <__hexnan+0xa0>
 800aa0a:	462a      	mov	r2, r5
 800aa0c:	4649      	mov	r1, r9
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f7ff ff8a 	bl	800a928 <L_shift>
 800aa14:	4544      	cmp	r4, r8
 800aa16:	d934      	bls.n	800aa82 <__hexnan+0x10e>
 800aa18:	f1a8 0204 	sub.w	r2, r8, #4
 800aa1c:	4623      	mov	r3, r4
 800aa1e:	f853 1b04 	ldr.w	r1, [r3], #4
 800aa22:	f842 1f04 	str.w	r1, [r2, #4]!
 800aa26:	429f      	cmp	r7, r3
 800aa28:	d2f9      	bcs.n	800aa1e <__hexnan+0xaa>
 800aa2a:	1b3b      	subs	r3, r7, r4
 800aa2c:	f023 0303 	bic.w	r3, r3, #3
 800aa30:	3304      	adds	r3, #4
 800aa32:	3401      	adds	r4, #1
 800aa34:	3e03      	subs	r6, #3
 800aa36:	42b4      	cmp	r4, r6
 800aa38:	bf88      	it	hi
 800aa3a:	2304      	movhi	r3, #4
 800aa3c:	4443      	add	r3, r8
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f843 2b04 	str.w	r2, [r3], #4
 800aa44:	429f      	cmp	r7, r3
 800aa46:	d2fb      	bcs.n	800aa40 <__hexnan+0xcc>
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	b91b      	cbnz	r3, 800aa54 <__hexnan+0xe0>
 800aa4c:	4547      	cmp	r7, r8
 800aa4e:	d127      	bne.n	800aaa0 <__hexnan+0x12c>
 800aa50:	2301      	movs	r3, #1
 800aa52:	603b      	str	r3, [r7, #0]
 800aa54:	2005      	movs	r0, #5
 800aa56:	e026      	b.n	800aaa6 <__hexnan+0x132>
 800aa58:	3501      	adds	r5, #1
 800aa5a:	2d08      	cmp	r5, #8
 800aa5c:	f10b 0b01 	add.w	fp, fp, #1
 800aa60:	dd06      	ble.n	800aa70 <__hexnan+0xfc>
 800aa62:	4544      	cmp	r4, r8
 800aa64:	d9c3      	bls.n	800a9ee <__hexnan+0x7a>
 800aa66:	2300      	movs	r3, #0
 800aa68:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa6c:	2501      	movs	r5, #1
 800aa6e:	3c04      	subs	r4, #4
 800aa70:	6822      	ldr	r2, [r4, #0]
 800aa72:	f000 000f 	and.w	r0, r0, #15
 800aa76:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800aa7a:	6022      	str	r2, [r4, #0]
 800aa7c:	e7b7      	b.n	800a9ee <__hexnan+0x7a>
 800aa7e:	2508      	movs	r5, #8
 800aa80:	e7b5      	b.n	800a9ee <__hexnan+0x7a>
 800aa82:	9b01      	ldr	r3, [sp, #4]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d0df      	beq.n	800aa48 <__hexnan+0xd4>
 800aa88:	f04f 32ff 	mov.w	r2, #4294967295
 800aa8c:	f1c3 0320 	rsb	r3, r3, #32
 800aa90:	fa22 f303 	lsr.w	r3, r2, r3
 800aa94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aa98:	401a      	ands	r2, r3
 800aa9a:	f846 2c04 	str.w	r2, [r6, #-4]
 800aa9e:	e7d3      	b.n	800aa48 <__hexnan+0xd4>
 800aaa0:	3f04      	subs	r7, #4
 800aaa2:	e7d1      	b.n	800aa48 <__hexnan+0xd4>
 800aaa4:	2004      	movs	r0, #4
 800aaa6:	b007      	add	sp, #28
 800aaa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aaac <_localeconv_r>:
 800aaac:	4800      	ldr	r0, [pc, #0]	; (800aab0 <_localeconv_r+0x4>)
 800aaae:	4770      	bx	lr
 800aab0:	20000248 	.word	0x20000248

0800aab4 <_lseek_r>:
 800aab4:	b538      	push	{r3, r4, r5, lr}
 800aab6:	4d07      	ldr	r5, [pc, #28]	; (800aad4 <_lseek_r+0x20>)
 800aab8:	4604      	mov	r4, r0
 800aaba:	4608      	mov	r0, r1
 800aabc:	4611      	mov	r1, r2
 800aabe:	2200      	movs	r2, #0
 800aac0:	602a      	str	r2, [r5, #0]
 800aac2:	461a      	mov	r2, r3
 800aac4:	f7f8 f9f0 	bl	8002ea8 <_lseek>
 800aac8:	1c43      	adds	r3, r0, #1
 800aaca:	d102      	bne.n	800aad2 <_lseek_r+0x1e>
 800aacc:	682b      	ldr	r3, [r5, #0]
 800aace:	b103      	cbz	r3, 800aad2 <_lseek_r+0x1e>
 800aad0:	6023      	str	r3, [r4, #0]
 800aad2:	bd38      	pop	{r3, r4, r5, pc}
 800aad4:	20000920 	.word	0x20000920

0800aad8 <malloc>:
 800aad8:	4b02      	ldr	r3, [pc, #8]	; (800aae4 <malloc+0xc>)
 800aada:	4601      	mov	r1, r0
 800aadc:	6818      	ldr	r0, [r3, #0]
 800aade:	f000 bd67 	b.w	800b5b0 <_malloc_r>
 800aae2:	bf00      	nop
 800aae4:	200000f0 	.word	0x200000f0

0800aae8 <__ascii_mbtowc>:
 800aae8:	b082      	sub	sp, #8
 800aaea:	b901      	cbnz	r1, 800aaee <__ascii_mbtowc+0x6>
 800aaec:	a901      	add	r1, sp, #4
 800aaee:	b142      	cbz	r2, 800ab02 <__ascii_mbtowc+0x1a>
 800aaf0:	b14b      	cbz	r3, 800ab06 <__ascii_mbtowc+0x1e>
 800aaf2:	7813      	ldrb	r3, [r2, #0]
 800aaf4:	600b      	str	r3, [r1, #0]
 800aaf6:	7812      	ldrb	r2, [r2, #0]
 800aaf8:	1e10      	subs	r0, r2, #0
 800aafa:	bf18      	it	ne
 800aafc:	2001      	movne	r0, #1
 800aafe:	b002      	add	sp, #8
 800ab00:	4770      	bx	lr
 800ab02:	4610      	mov	r0, r2
 800ab04:	e7fb      	b.n	800aafe <__ascii_mbtowc+0x16>
 800ab06:	f06f 0001 	mvn.w	r0, #1
 800ab0a:	e7f8      	b.n	800aafe <__ascii_mbtowc+0x16>

0800ab0c <memcpy>:
 800ab0c:	440a      	add	r2, r1
 800ab0e:	4291      	cmp	r1, r2
 800ab10:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab14:	d100      	bne.n	800ab18 <memcpy+0xc>
 800ab16:	4770      	bx	lr
 800ab18:	b510      	push	{r4, lr}
 800ab1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab22:	4291      	cmp	r1, r2
 800ab24:	d1f9      	bne.n	800ab1a <memcpy+0xe>
 800ab26:	bd10      	pop	{r4, pc}

0800ab28 <_Balloc>:
 800ab28:	b570      	push	{r4, r5, r6, lr}
 800ab2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab2c:	4604      	mov	r4, r0
 800ab2e:	460d      	mov	r5, r1
 800ab30:	b976      	cbnz	r6, 800ab50 <_Balloc+0x28>
 800ab32:	2010      	movs	r0, #16
 800ab34:	f7ff ffd0 	bl	800aad8 <malloc>
 800ab38:	4602      	mov	r2, r0
 800ab3a:	6260      	str	r0, [r4, #36]	; 0x24
 800ab3c:	b920      	cbnz	r0, 800ab48 <_Balloc+0x20>
 800ab3e:	4b18      	ldr	r3, [pc, #96]	; (800aba0 <_Balloc+0x78>)
 800ab40:	4818      	ldr	r0, [pc, #96]	; (800aba4 <_Balloc+0x7c>)
 800ab42:	2166      	movs	r1, #102	; 0x66
 800ab44:	f001 fb5c 	bl	800c200 <__assert_func>
 800ab48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab4c:	6006      	str	r6, [r0, #0]
 800ab4e:	60c6      	str	r6, [r0, #12]
 800ab50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ab52:	68f3      	ldr	r3, [r6, #12]
 800ab54:	b183      	cbz	r3, 800ab78 <_Balloc+0x50>
 800ab56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab5e:	b9b8      	cbnz	r0, 800ab90 <_Balloc+0x68>
 800ab60:	2101      	movs	r1, #1
 800ab62:	fa01 f605 	lsl.w	r6, r1, r5
 800ab66:	1d72      	adds	r2, r6, #5
 800ab68:	0092      	lsls	r2, r2, #2
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	f000 fc9d 	bl	800b4aa <_calloc_r>
 800ab70:	b160      	cbz	r0, 800ab8c <_Balloc+0x64>
 800ab72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab76:	e00e      	b.n	800ab96 <_Balloc+0x6e>
 800ab78:	2221      	movs	r2, #33	; 0x21
 800ab7a:	2104      	movs	r1, #4
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f000 fc94 	bl	800b4aa <_calloc_r>
 800ab82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab84:	60f0      	str	r0, [r6, #12]
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d1e4      	bne.n	800ab56 <_Balloc+0x2e>
 800ab8c:	2000      	movs	r0, #0
 800ab8e:	bd70      	pop	{r4, r5, r6, pc}
 800ab90:	6802      	ldr	r2, [r0, #0]
 800ab92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab96:	2300      	movs	r3, #0
 800ab98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab9c:	e7f7      	b.n	800ab8e <_Balloc+0x66>
 800ab9e:	bf00      	nop
 800aba0:	0800ce9e 	.word	0x0800ce9e
 800aba4:	0800cf9c 	.word	0x0800cf9c

0800aba8 <_Bfree>:
 800aba8:	b570      	push	{r4, r5, r6, lr}
 800abaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800abac:	4605      	mov	r5, r0
 800abae:	460c      	mov	r4, r1
 800abb0:	b976      	cbnz	r6, 800abd0 <_Bfree+0x28>
 800abb2:	2010      	movs	r0, #16
 800abb4:	f7ff ff90 	bl	800aad8 <malloc>
 800abb8:	4602      	mov	r2, r0
 800abba:	6268      	str	r0, [r5, #36]	; 0x24
 800abbc:	b920      	cbnz	r0, 800abc8 <_Bfree+0x20>
 800abbe:	4b09      	ldr	r3, [pc, #36]	; (800abe4 <_Bfree+0x3c>)
 800abc0:	4809      	ldr	r0, [pc, #36]	; (800abe8 <_Bfree+0x40>)
 800abc2:	218a      	movs	r1, #138	; 0x8a
 800abc4:	f001 fb1c 	bl	800c200 <__assert_func>
 800abc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abcc:	6006      	str	r6, [r0, #0]
 800abce:	60c6      	str	r6, [r0, #12]
 800abd0:	b13c      	cbz	r4, 800abe2 <_Bfree+0x3a>
 800abd2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800abd4:	6862      	ldr	r2, [r4, #4]
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800abdc:	6021      	str	r1, [r4, #0]
 800abde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800abe2:	bd70      	pop	{r4, r5, r6, pc}
 800abe4:	0800ce9e 	.word	0x0800ce9e
 800abe8:	0800cf9c 	.word	0x0800cf9c

0800abec <__multadd>:
 800abec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abf0:	690d      	ldr	r5, [r1, #16]
 800abf2:	4607      	mov	r7, r0
 800abf4:	460c      	mov	r4, r1
 800abf6:	461e      	mov	r6, r3
 800abf8:	f101 0c14 	add.w	ip, r1, #20
 800abfc:	2000      	movs	r0, #0
 800abfe:	f8dc 3000 	ldr.w	r3, [ip]
 800ac02:	b299      	uxth	r1, r3
 800ac04:	fb02 6101 	mla	r1, r2, r1, r6
 800ac08:	0c1e      	lsrs	r6, r3, #16
 800ac0a:	0c0b      	lsrs	r3, r1, #16
 800ac0c:	fb02 3306 	mla	r3, r2, r6, r3
 800ac10:	b289      	uxth	r1, r1
 800ac12:	3001      	adds	r0, #1
 800ac14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac18:	4285      	cmp	r5, r0
 800ac1a:	f84c 1b04 	str.w	r1, [ip], #4
 800ac1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac22:	dcec      	bgt.n	800abfe <__multadd+0x12>
 800ac24:	b30e      	cbz	r6, 800ac6a <__multadd+0x7e>
 800ac26:	68a3      	ldr	r3, [r4, #8]
 800ac28:	42ab      	cmp	r3, r5
 800ac2a:	dc19      	bgt.n	800ac60 <__multadd+0x74>
 800ac2c:	6861      	ldr	r1, [r4, #4]
 800ac2e:	4638      	mov	r0, r7
 800ac30:	3101      	adds	r1, #1
 800ac32:	f7ff ff79 	bl	800ab28 <_Balloc>
 800ac36:	4680      	mov	r8, r0
 800ac38:	b928      	cbnz	r0, 800ac46 <__multadd+0x5a>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	4b0c      	ldr	r3, [pc, #48]	; (800ac70 <__multadd+0x84>)
 800ac3e:	480d      	ldr	r0, [pc, #52]	; (800ac74 <__multadd+0x88>)
 800ac40:	21b5      	movs	r1, #181	; 0xb5
 800ac42:	f001 fadd 	bl	800c200 <__assert_func>
 800ac46:	6922      	ldr	r2, [r4, #16]
 800ac48:	3202      	adds	r2, #2
 800ac4a:	f104 010c 	add.w	r1, r4, #12
 800ac4e:	0092      	lsls	r2, r2, #2
 800ac50:	300c      	adds	r0, #12
 800ac52:	f7ff ff5b 	bl	800ab0c <memcpy>
 800ac56:	4621      	mov	r1, r4
 800ac58:	4638      	mov	r0, r7
 800ac5a:	f7ff ffa5 	bl	800aba8 <_Bfree>
 800ac5e:	4644      	mov	r4, r8
 800ac60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac64:	3501      	adds	r5, #1
 800ac66:	615e      	str	r6, [r3, #20]
 800ac68:	6125      	str	r5, [r4, #16]
 800ac6a:	4620      	mov	r0, r4
 800ac6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac70:	0800cf10 	.word	0x0800cf10
 800ac74:	0800cf9c 	.word	0x0800cf9c

0800ac78 <__s2b>:
 800ac78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac7c:	460c      	mov	r4, r1
 800ac7e:	4615      	mov	r5, r2
 800ac80:	461f      	mov	r7, r3
 800ac82:	2209      	movs	r2, #9
 800ac84:	3308      	adds	r3, #8
 800ac86:	4606      	mov	r6, r0
 800ac88:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac8c:	2100      	movs	r1, #0
 800ac8e:	2201      	movs	r2, #1
 800ac90:	429a      	cmp	r2, r3
 800ac92:	db09      	blt.n	800aca8 <__s2b+0x30>
 800ac94:	4630      	mov	r0, r6
 800ac96:	f7ff ff47 	bl	800ab28 <_Balloc>
 800ac9a:	b940      	cbnz	r0, 800acae <__s2b+0x36>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	4b19      	ldr	r3, [pc, #100]	; (800ad04 <__s2b+0x8c>)
 800aca0:	4819      	ldr	r0, [pc, #100]	; (800ad08 <__s2b+0x90>)
 800aca2:	21ce      	movs	r1, #206	; 0xce
 800aca4:	f001 faac 	bl	800c200 <__assert_func>
 800aca8:	0052      	lsls	r2, r2, #1
 800acaa:	3101      	adds	r1, #1
 800acac:	e7f0      	b.n	800ac90 <__s2b+0x18>
 800acae:	9b08      	ldr	r3, [sp, #32]
 800acb0:	6143      	str	r3, [r0, #20]
 800acb2:	2d09      	cmp	r5, #9
 800acb4:	f04f 0301 	mov.w	r3, #1
 800acb8:	6103      	str	r3, [r0, #16]
 800acba:	dd16      	ble.n	800acea <__s2b+0x72>
 800acbc:	f104 0909 	add.w	r9, r4, #9
 800acc0:	46c8      	mov	r8, r9
 800acc2:	442c      	add	r4, r5
 800acc4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800acc8:	4601      	mov	r1, r0
 800acca:	3b30      	subs	r3, #48	; 0x30
 800accc:	220a      	movs	r2, #10
 800acce:	4630      	mov	r0, r6
 800acd0:	f7ff ff8c 	bl	800abec <__multadd>
 800acd4:	45a0      	cmp	r8, r4
 800acd6:	d1f5      	bne.n	800acc4 <__s2b+0x4c>
 800acd8:	f1a5 0408 	sub.w	r4, r5, #8
 800acdc:	444c      	add	r4, r9
 800acde:	1b2d      	subs	r5, r5, r4
 800ace0:	1963      	adds	r3, r4, r5
 800ace2:	42bb      	cmp	r3, r7
 800ace4:	db04      	blt.n	800acf0 <__s2b+0x78>
 800ace6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acea:	340a      	adds	r4, #10
 800acec:	2509      	movs	r5, #9
 800acee:	e7f6      	b.n	800acde <__s2b+0x66>
 800acf0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800acf4:	4601      	mov	r1, r0
 800acf6:	3b30      	subs	r3, #48	; 0x30
 800acf8:	220a      	movs	r2, #10
 800acfa:	4630      	mov	r0, r6
 800acfc:	f7ff ff76 	bl	800abec <__multadd>
 800ad00:	e7ee      	b.n	800ace0 <__s2b+0x68>
 800ad02:	bf00      	nop
 800ad04:	0800cf10 	.word	0x0800cf10
 800ad08:	0800cf9c 	.word	0x0800cf9c

0800ad0c <__hi0bits>:
 800ad0c:	0c03      	lsrs	r3, r0, #16
 800ad0e:	041b      	lsls	r3, r3, #16
 800ad10:	b9d3      	cbnz	r3, 800ad48 <__hi0bits+0x3c>
 800ad12:	0400      	lsls	r0, r0, #16
 800ad14:	2310      	movs	r3, #16
 800ad16:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ad1a:	bf04      	itt	eq
 800ad1c:	0200      	lsleq	r0, r0, #8
 800ad1e:	3308      	addeq	r3, #8
 800ad20:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ad24:	bf04      	itt	eq
 800ad26:	0100      	lsleq	r0, r0, #4
 800ad28:	3304      	addeq	r3, #4
 800ad2a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ad2e:	bf04      	itt	eq
 800ad30:	0080      	lsleq	r0, r0, #2
 800ad32:	3302      	addeq	r3, #2
 800ad34:	2800      	cmp	r0, #0
 800ad36:	db05      	blt.n	800ad44 <__hi0bits+0x38>
 800ad38:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ad3c:	f103 0301 	add.w	r3, r3, #1
 800ad40:	bf08      	it	eq
 800ad42:	2320      	moveq	r3, #32
 800ad44:	4618      	mov	r0, r3
 800ad46:	4770      	bx	lr
 800ad48:	2300      	movs	r3, #0
 800ad4a:	e7e4      	b.n	800ad16 <__hi0bits+0xa>

0800ad4c <__lo0bits>:
 800ad4c:	6803      	ldr	r3, [r0, #0]
 800ad4e:	f013 0207 	ands.w	r2, r3, #7
 800ad52:	4601      	mov	r1, r0
 800ad54:	d00b      	beq.n	800ad6e <__lo0bits+0x22>
 800ad56:	07da      	lsls	r2, r3, #31
 800ad58:	d423      	bmi.n	800ada2 <__lo0bits+0x56>
 800ad5a:	0798      	lsls	r0, r3, #30
 800ad5c:	bf49      	itett	mi
 800ad5e:	085b      	lsrmi	r3, r3, #1
 800ad60:	089b      	lsrpl	r3, r3, #2
 800ad62:	2001      	movmi	r0, #1
 800ad64:	600b      	strmi	r3, [r1, #0]
 800ad66:	bf5c      	itt	pl
 800ad68:	600b      	strpl	r3, [r1, #0]
 800ad6a:	2002      	movpl	r0, #2
 800ad6c:	4770      	bx	lr
 800ad6e:	b298      	uxth	r0, r3
 800ad70:	b9a8      	cbnz	r0, 800ad9e <__lo0bits+0x52>
 800ad72:	0c1b      	lsrs	r3, r3, #16
 800ad74:	2010      	movs	r0, #16
 800ad76:	b2da      	uxtb	r2, r3
 800ad78:	b90a      	cbnz	r2, 800ad7e <__lo0bits+0x32>
 800ad7a:	3008      	adds	r0, #8
 800ad7c:	0a1b      	lsrs	r3, r3, #8
 800ad7e:	071a      	lsls	r2, r3, #28
 800ad80:	bf04      	itt	eq
 800ad82:	091b      	lsreq	r3, r3, #4
 800ad84:	3004      	addeq	r0, #4
 800ad86:	079a      	lsls	r2, r3, #30
 800ad88:	bf04      	itt	eq
 800ad8a:	089b      	lsreq	r3, r3, #2
 800ad8c:	3002      	addeq	r0, #2
 800ad8e:	07da      	lsls	r2, r3, #31
 800ad90:	d403      	bmi.n	800ad9a <__lo0bits+0x4e>
 800ad92:	085b      	lsrs	r3, r3, #1
 800ad94:	f100 0001 	add.w	r0, r0, #1
 800ad98:	d005      	beq.n	800ada6 <__lo0bits+0x5a>
 800ad9a:	600b      	str	r3, [r1, #0]
 800ad9c:	4770      	bx	lr
 800ad9e:	4610      	mov	r0, r2
 800ada0:	e7e9      	b.n	800ad76 <__lo0bits+0x2a>
 800ada2:	2000      	movs	r0, #0
 800ada4:	4770      	bx	lr
 800ada6:	2020      	movs	r0, #32
 800ada8:	4770      	bx	lr
	...

0800adac <__i2b>:
 800adac:	b510      	push	{r4, lr}
 800adae:	460c      	mov	r4, r1
 800adb0:	2101      	movs	r1, #1
 800adb2:	f7ff feb9 	bl	800ab28 <_Balloc>
 800adb6:	4602      	mov	r2, r0
 800adb8:	b928      	cbnz	r0, 800adc6 <__i2b+0x1a>
 800adba:	4b05      	ldr	r3, [pc, #20]	; (800add0 <__i2b+0x24>)
 800adbc:	4805      	ldr	r0, [pc, #20]	; (800add4 <__i2b+0x28>)
 800adbe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800adc2:	f001 fa1d 	bl	800c200 <__assert_func>
 800adc6:	2301      	movs	r3, #1
 800adc8:	6144      	str	r4, [r0, #20]
 800adca:	6103      	str	r3, [r0, #16]
 800adcc:	bd10      	pop	{r4, pc}
 800adce:	bf00      	nop
 800add0:	0800cf10 	.word	0x0800cf10
 800add4:	0800cf9c 	.word	0x0800cf9c

0800add8 <__multiply>:
 800add8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800addc:	4691      	mov	r9, r2
 800adde:	690a      	ldr	r2, [r1, #16]
 800ade0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	bfb8      	it	lt
 800ade8:	460b      	movlt	r3, r1
 800adea:	460c      	mov	r4, r1
 800adec:	bfbc      	itt	lt
 800adee:	464c      	movlt	r4, r9
 800adf0:	4699      	movlt	r9, r3
 800adf2:	6927      	ldr	r7, [r4, #16]
 800adf4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800adf8:	68a3      	ldr	r3, [r4, #8]
 800adfa:	6861      	ldr	r1, [r4, #4]
 800adfc:	eb07 060a 	add.w	r6, r7, sl
 800ae00:	42b3      	cmp	r3, r6
 800ae02:	b085      	sub	sp, #20
 800ae04:	bfb8      	it	lt
 800ae06:	3101      	addlt	r1, #1
 800ae08:	f7ff fe8e 	bl	800ab28 <_Balloc>
 800ae0c:	b930      	cbnz	r0, 800ae1c <__multiply+0x44>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	4b44      	ldr	r3, [pc, #272]	; (800af24 <__multiply+0x14c>)
 800ae12:	4845      	ldr	r0, [pc, #276]	; (800af28 <__multiply+0x150>)
 800ae14:	f240 115d 	movw	r1, #349	; 0x15d
 800ae18:	f001 f9f2 	bl	800c200 <__assert_func>
 800ae1c:	f100 0514 	add.w	r5, r0, #20
 800ae20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae24:	462b      	mov	r3, r5
 800ae26:	2200      	movs	r2, #0
 800ae28:	4543      	cmp	r3, r8
 800ae2a:	d321      	bcc.n	800ae70 <__multiply+0x98>
 800ae2c:	f104 0314 	add.w	r3, r4, #20
 800ae30:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ae34:	f109 0314 	add.w	r3, r9, #20
 800ae38:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ae3c:	9202      	str	r2, [sp, #8]
 800ae3e:	1b3a      	subs	r2, r7, r4
 800ae40:	3a15      	subs	r2, #21
 800ae42:	f022 0203 	bic.w	r2, r2, #3
 800ae46:	3204      	adds	r2, #4
 800ae48:	f104 0115 	add.w	r1, r4, #21
 800ae4c:	428f      	cmp	r7, r1
 800ae4e:	bf38      	it	cc
 800ae50:	2204      	movcc	r2, #4
 800ae52:	9201      	str	r2, [sp, #4]
 800ae54:	9a02      	ldr	r2, [sp, #8]
 800ae56:	9303      	str	r3, [sp, #12]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d80c      	bhi.n	800ae76 <__multiply+0x9e>
 800ae5c:	2e00      	cmp	r6, #0
 800ae5e:	dd03      	ble.n	800ae68 <__multiply+0x90>
 800ae60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d05a      	beq.n	800af1e <__multiply+0x146>
 800ae68:	6106      	str	r6, [r0, #16]
 800ae6a:	b005      	add	sp, #20
 800ae6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae70:	f843 2b04 	str.w	r2, [r3], #4
 800ae74:	e7d8      	b.n	800ae28 <__multiply+0x50>
 800ae76:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae7a:	f1ba 0f00 	cmp.w	sl, #0
 800ae7e:	d024      	beq.n	800aeca <__multiply+0xf2>
 800ae80:	f104 0e14 	add.w	lr, r4, #20
 800ae84:	46a9      	mov	r9, r5
 800ae86:	f04f 0c00 	mov.w	ip, #0
 800ae8a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ae8e:	f8d9 1000 	ldr.w	r1, [r9]
 800ae92:	fa1f fb82 	uxth.w	fp, r2
 800ae96:	b289      	uxth	r1, r1
 800ae98:	fb0a 110b 	mla	r1, sl, fp, r1
 800ae9c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aea0:	f8d9 2000 	ldr.w	r2, [r9]
 800aea4:	4461      	add	r1, ip
 800aea6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aeaa:	fb0a c20b 	mla	r2, sl, fp, ip
 800aeae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aeb2:	b289      	uxth	r1, r1
 800aeb4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aeb8:	4577      	cmp	r7, lr
 800aeba:	f849 1b04 	str.w	r1, [r9], #4
 800aebe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aec2:	d8e2      	bhi.n	800ae8a <__multiply+0xb2>
 800aec4:	9a01      	ldr	r2, [sp, #4]
 800aec6:	f845 c002 	str.w	ip, [r5, r2]
 800aeca:	9a03      	ldr	r2, [sp, #12]
 800aecc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aed0:	3304      	adds	r3, #4
 800aed2:	f1b9 0f00 	cmp.w	r9, #0
 800aed6:	d020      	beq.n	800af1a <__multiply+0x142>
 800aed8:	6829      	ldr	r1, [r5, #0]
 800aeda:	f104 0c14 	add.w	ip, r4, #20
 800aede:	46ae      	mov	lr, r5
 800aee0:	f04f 0a00 	mov.w	sl, #0
 800aee4:	f8bc b000 	ldrh.w	fp, [ip]
 800aee8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aeec:	fb09 220b 	mla	r2, r9, fp, r2
 800aef0:	4492      	add	sl, r2
 800aef2:	b289      	uxth	r1, r1
 800aef4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aef8:	f84e 1b04 	str.w	r1, [lr], #4
 800aefc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800af00:	f8be 1000 	ldrh.w	r1, [lr]
 800af04:	0c12      	lsrs	r2, r2, #16
 800af06:	fb09 1102 	mla	r1, r9, r2, r1
 800af0a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800af0e:	4567      	cmp	r7, ip
 800af10:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800af14:	d8e6      	bhi.n	800aee4 <__multiply+0x10c>
 800af16:	9a01      	ldr	r2, [sp, #4]
 800af18:	50a9      	str	r1, [r5, r2]
 800af1a:	3504      	adds	r5, #4
 800af1c:	e79a      	b.n	800ae54 <__multiply+0x7c>
 800af1e:	3e01      	subs	r6, #1
 800af20:	e79c      	b.n	800ae5c <__multiply+0x84>
 800af22:	bf00      	nop
 800af24:	0800cf10 	.word	0x0800cf10
 800af28:	0800cf9c 	.word	0x0800cf9c

0800af2c <__pow5mult>:
 800af2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af30:	4615      	mov	r5, r2
 800af32:	f012 0203 	ands.w	r2, r2, #3
 800af36:	4606      	mov	r6, r0
 800af38:	460f      	mov	r7, r1
 800af3a:	d007      	beq.n	800af4c <__pow5mult+0x20>
 800af3c:	4c25      	ldr	r4, [pc, #148]	; (800afd4 <__pow5mult+0xa8>)
 800af3e:	3a01      	subs	r2, #1
 800af40:	2300      	movs	r3, #0
 800af42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af46:	f7ff fe51 	bl	800abec <__multadd>
 800af4a:	4607      	mov	r7, r0
 800af4c:	10ad      	asrs	r5, r5, #2
 800af4e:	d03d      	beq.n	800afcc <__pow5mult+0xa0>
 800af50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af52:	b97c      	cbnz	r4, 800af74 <__pow5mult+0x48>
 800af54:	2010      	movs	r0, #16
 800af56:	f7ff fdbf 	bl	800aad8 <malloc>
 800af5a:	4602      	mov	r2, r0
 800af5c:	6270      	str	r0, [r6, #36]	; 0x24
 800af5e:	b928      	cbnz	r0, 800af6c <__pow5mult+0x40>
 800af60:	4b1d      	ldr	r3, [pc, #116]	; (800afd8 <__pow5mult+0xac>)
 800af62:	481e      	ldr	r0, [pc, #120]	; (800afdc <__pow5mult+0xb0>)
 800af64:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800af68:	f001 f94a 	bl	800c200 <__assert_func>
 800af6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af70:	6004      	str	r4, [r0, #0]
 800af72:	60c4      	str	r4, [r0, #12]
 800af74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af7c:	b94c      	cbnz	r4, 800af92 <__pow5mult+0x66>
 800af7e:	f240 2171 	movw	r1, #625	; 0x271
 800af82:	4630      	mov	r0, r6
 800af84:	f7ff ff12 	bl	800adac <__i2b>
 800af88:	2300      	movs	r3, #0
 800af8a:	f8c8 0008 	str.w	r0, [r8, #8]
 800af8e:	4604      	mov	r4, r0
 800af90:	6003      	str	r3, [r0, #0]
 800af92:	f04f 0900 	mov.w	r9, #0
 800af96:	07eb      	lsls	r3, r5, #31
 800af98:	d50a      	bpl.n	800afb0 <__pow5mult+0x84>
 800af9a:	4639      	mov	r1, r7
 800af9c:	4622      	mov	r2, r4
 800af9e:	4630      	mov	r0, r6
 800afa0:	f7ff ff1a 	bl	800add8 <__multiply>
 800afa4:	4639      	mov	r1, r7
 800afa6:	4680      	mov	r8, r0
 800afa8:	4630      	mov	r0, r6
 800afaa:	f7ff fdfd 	bl	800aba8 <_Bfree>
 800afae:	4647      	mov	r7, r8
 800afb0:	106d      	asrs	r5, r5, #1
 800afb2:	d00b      	beq.n	800afcc <__pow5mult+0xa0>
 800afb4:	6820      	ldr	r0, [r4, #0]
 800afb6:	b938      	cbnz	r0, 800afc8 <__pow5mult+0x9c>
 800afb8:	4622      	mov	r2, r4
 800afba:	4621      	mov	r1, r4
 800afbc:	4630      	mov	r0, r6
 800afbe:	f7ff ff0b 	bl	800add8 <__multiply>
 800afc2:	6020      	str	r0, [r4, #0]
 800afc4:	f8c0 9000 	str.w	r9, [r0]
 800afc8:	4604      	mov	r4, r0
 800afca:	e7e4      	b.n	800af96 <__pow5mult+0x6a>
 800afcc:	4638      	mov	r0, r7
 800afce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afd2:	bf00      	nop
 800afd4:	0800d0e8 	.word	0x0800d0e8
 800afd8:	0800ce9e 	.word	0x0800ce9e
 800afdc:	0800cf9c 	.word	0x0800cf9c

0800afe0 <__lshift>:
 800afe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afe4:	460c      	mov	r4, r1
 800afe6:	6849      	ldr	r1, [r1, #4]
 800afe8:	6923      	ldr	r3, [r4, #16]
 800afea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800afee:	68a3      	ldr	r3, [r4, #8]
 800aff0:	4607      	mov	r7, r0
 800aff2:	4691      	mov	r9, r2
 800aff4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aff8:	f108 0601 	add.w	r6, r8, #1
 800affc:	42b3      	cmp	r3, r6
 800affe:	db0b      	blt.n	800b018 <__lshift+0x38>
 800b000:	4638      	mov	r0, r7
 800b002:	f7ff fd91 	bl	800ab28 <_Balloc>
 800b006:	4605      	mov	r5, r0
 800b008:	b948      	cbnz	r0, 800b01e <__lshift+0x3e>
 800b00a:	4602      	mov	r2, r0
 800b00c:	4b2a      	ldr	r3, [pc, #168]	; (800b0b8 <__lshift+0xd8>)
 800b00e:	482b      	ldr	r0, [pc, #172]	; (800b0bc <__lshift+0xdc>)
 800b010:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b014:	f001 f8f4 	bl	800c200 <__assert_func>
 800b018:	3101      	adds	r1, #1
 800b01a:	005b      	lsls	r3, r3, #1
 800b01c:	e7ee      	b.n	800affc <__lshift+0x1c>
 800b01e:	2300      	movs	r3, #0
 800b020:	f100 0114 	add.w	r1, r0, #20
 800b024:	f100 0210 	add.w	r2, r0, #16
 800b028:	4618      	mov	r0, r3
 800b02a:	4553      	cmp	r3, sl
 800b02c:	db37      	blt.n	800b09e <__lshift+0xbe>
 800b02e:	6920      	ldr	r0, [r4, #16]
 800b030:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b034:	f104 0314 	add.w	r3, r4, #20
 800b038:	f019 091f 	ands.w	r9, r9, #31
 800b03c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b040:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b044:	d02f      	beq.n	800b0a6 <__lshift+0xc6>
 800b046:	f1c9 0e20 	rsb	lr, r9, #32
 800b04a:	468a      	mov	sl, r1
 800b04c:	f04f 0c00 	mov.w	ip, #0
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	fa02 f209 	lsl.w	r2, r2, r9
 800b056:	ea42 020c 	orr.w	r2, r2, ip
 800b05a:	f84a 2b04 	str.w	r2, [sl], #4
 800b05e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b062:	4298      	cmp	r0, r3
 800b064:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b068:	d8f2      	bhi.n	800b050 <__lshift+0x70>
 800b06a:	1b03      	subs	r3, r0, r4
 800b06c:	3b15      	subs	r3, #21
 800b06e:	f023 0303 	bic.w	r3, r3, #3
 800b072:	3304      	adds	r3, #4
 800b074:	f104 0215 	add.w	r2, r4, #21
 800b078:	4290      	cmp	r0, r2
 800b07a:	bf38      	it	cc
 800b07c:	2304      	movcc	r3, #4
 800b07e:	f841 c003 	str.w	ip, [r1, r3]
 800b082:	f1bc 0f00 	cmp.w	ip, #0
 800b086:	d001      	beq.n	800b08c <__lshift+0xac>
 800b088:	f108 0602 	add.w	r6, r8, #2
 800b08c:	3e01      	subs	r6, #1
 800b08e:	4638      	mov	r0, r7
 800b090:	612e      	str	r6, [r5, #16]
 800b092:	4621      	mov	r1, r4
 800b094:	f7ff fd88 	bl	800aba8 <_Bfree>
 800b098:	4628      	mov	r0, r5
 800b09a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b09e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	e7c1      	b.n	800b02a <__lshift+0x4a>
 800b0a6:	3904      	subs	r1, #4
 800b0a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800b0b0:	4298      	cmp	r0, r3
 800b0b2:	d8f9      	bhi.n	800b0a8 <__lshift+0xc8>
 800b0b4:	e7ea      	b.n	800b08c <__lshift+0xac>
 800b0b6:	bf00      	nop
 800b0b8:	0800cf10 	.word	0x0800cf10
 800b0bc:	0800cf9c 	.word	0x0800cf9c

0800b0c0 <__mcmp>:
 800b0c0:	b530      	push	{r4, r5, lr}
 800b0c2:	6902      	ldr	r2, [r0, #16]
 800b0c4:	690c      	ldr	r4, [r1, #16]
 800b0c6:	1b12      	subs	r2, r2, r4
 800b0c8:	d10e      	bne.n	800b0e8 <__mcmp+0x28>
 800b0ca:	f100 0314 	add.w	r3, r0, #20
 800b0ce:	3114      	adds	r1, #20
 800b0d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b0d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b0d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b0dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b0e0:	42a5      	cmp	r5, r4
 800b0e2:	d003      	beq.n	800b0ec <__mcmp+0x2c>
 800b0e4:	d305      	bcc.n	800b0f2 <__mcmp+0x32>
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	4610      	mov	r0, r2
 800b0ea:	bd30      	pop	{r4, r5, pc}
 800b0ec:	4283      	cmp	r3, r0
 800b0ee:	d3f3      	bcc.n	800b0d8 <__mcmp+0x18>
 800b0f0:	e7fa      	b.n	800b0e8 <__mcmp+0x28>
 800b0f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b0f6:	e7f7      	b.n	800b0e8 <__mcmp+0x28>

0800b0f8 <__mdiff>:
 800b0f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0fc:	460c      	mov	r4, r1
 800b0fe:	4606      	mov	r6, r0
 800b100:	4611      	mov	r1, r2
 800b102:	4620      	mov	r0, r4
 800b104:	4690      	mov	r8, r2
 800b106:	f7ff ffdb 	bl	800b0c0 <__mcmp>
 800b10a:	1e05      	subs	r5, r0, #0
 800b10c:	d110      	bne.n	800b130 <__mdiff+0x38>
 800b10e:	4629      	mov	r1, r5
 800b110:	4630      	mov	r0, r6
 800b112:	f7ff fd09 	bl	800ab28 <_Balloc>
 800b116:	b930      	cbnz	r0, 800b126 <__mdiff+0x2e>
 800b118:	4b3a      	ldr	r3, [pc, #232]	; (800b204 <__mdiff+0x10c>)
 800b11a:	4602      	mov	r2, r0
 800b11c:	f240 2132 	movw	r1, #562	; 0x232
 800b120:	4839      	ldr	r0, [pc, #228]	; (800b208 <__mdiff+0x110>)
 800b122:	f001 f86d 	bl	800c200 <__assert_func>
 800b126:	2301      	movs	r3, #1
 800b128:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b12c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b130:	bfa4      	itt	ge
 800b132:	4643      	movge	r3, r8
 800b134:	46a0      	movge	r8, r4
 800b136:	4630      	mov	r0, r6
 800b138:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b13c:	bfa6      	itte	ge
 800b13e:	461c      	movge	r4, r3
 800b140:	2500      	movge	r5, #0
 800b142:	2501      	movlt	r5, #1
 800b144:	f7ff fcf0 	bl	800ab28 <_Balloc>
 800b148:	b920      	cbnz	r0, 800b154 <__mdiff+0x5c>
 800b14a:	4b2e      	ldr	r3, [pc, #184]	; (800b204 <__mdiff+0x10c>)
 800b14c:	4602      	mov	r2, r0
 800b14e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b152:	e7e5      	b.n	800b120 <__mdiff+0x28>
 800b154:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b158:	6926      	ldr	r6, [r4, #16]
 800b15a:	60c5      	str	r5, [r0, #12]
 800b15c:	f104 0914 	add.w	r9, r4, #20
 800b160:	f108 0514 	add.w	r5, r8, #20
 800b164:	f100 0e14 	add.w	lr, r0, #20
 800b168:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b16c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b170:	f108 0210 	add.w	r2, r8, #16
 800b174:	46f2      	mov	sl, lr
 800b176:	2100      	movs	r1, #0
 800b178:	f859 3b04 	ldr.w	r3, [r9], #4
 800b17c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b180:	fa1f f883 	uxth.w	r8, r3
 800b184:	fa11 f18b 	uxtah	r1, r1, fp
 800b188:	0c1b      	lsrs	r3, r3, #16
 800b18a:	eba1 0808 	sub.w	r8, r1, r8
 800b18e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b192:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b196:	fa1f f888 	uxth.w	r8, r8
 800b19a:	1419      	asrs	r1, r3, #16
 800b19c:	454e      	cmp	r6, r9
 800b19e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b1a2:	f84a 3b04 	str.w	r3, [sl], #4
 800b1a6:	d8e7      	bhi.n	800b178 <__mdiff+0x80>
 800b1a8:	1b33      	subs	r3, r6, r4
 800b1aa:	3b15      	subs	r3, #21
 800b1ac:	f023 0303 	bic.w	r3, r3, #3
 800b1b0:	3304      	adds	r3, #4
 800b1b2:	3415      	adds	r4, #21
 800b1b4:	42a6      	cmp	r6, r4
 800b1b6:	bf38      	it	cc
 800b1b8:	2304      	movcc	r3, #4
 800b1ba:	441d      	add	r5, r3
 800b1bc:	4473      	add	r3, lr
 800b1be:	469e      	mov	lr, r3
 800b1c0:	462e      	mov	r6, r5
 800b1c2:	4566      	cmp	r6, ip
 800b1c4:	d30e      	bcc.n	800b1e4 <__mdiff+0xec>
 800b1c6:	f10c 0203 	add.w	r2, ip, #3
 800b1ca:	1b52      	subs	r2, r2, r5
 800b1cc:	f022 0203 	bic.w	r2, r2, #3
 800b1d0:	3d03      	subs	r5, #3
 800b1d2:	45ac      	cmp	ip, r5
 800b1d4:	bf38      	it	cc
 800b1d6:	2200      	movcc	r2, #0
 800b1d8:	441a      	add	r2, r3
 800b1da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b1de:	b17b      	cbz	r3, 800b200 <__mdiff+0x108>
 800b1e0:	6107      	str	r7, [r0, #16]
 800b1e2:	e7a3      	b.n	800b12c <__mdiff+0x34>
 800b1e4:	f856 8b04 	ldr.w	r8, [r6], #4
 800b1e8:	fa11 f288 	uxtah	r2, r1, r8
 800b1ec:	1414      	asrs	r4, r2, #16
 800b1ee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b1f2:	b292      	uxth	r2, r2
 800b1f4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b1f8:	f84e 2b04 	str.w	r2, [lr], #4
 800b1fc:	1421      	asrs	r1, r4, #16
 800b1fe:	e7e0      	b.n	800b1c2 <__mdiff+0xca>
 800b200:	3f01      	subs	r7, #1
 800b202:	e7ea      	b.n	800b1da <__mdiff+0xe2>
 800b204:	0800cf10 	.word	0x0800cf10
 800b208:	0800cf9c 	.word	0x0800cf9c

0800b20c <__ulp>:
 800b20c:	b082      	sub	sp, #8
 800b20e:	ed8d 0b00 	vstr	d0, [sp]
 800b212:	9b01      	ldr	r3, [sp, #4]
 800b214:	4912      	ldr	r1, [pc, #72]	; (800b260 <__ulp+0x54>)
 800b216:	4019      	ands	r1, r3
 800b218:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b21c:	2900      	cmp	r1, #0
 800b21e:	dd05      	ble.n	800b22c <__ulp+0x20>
 800b220:	2200      	movs	r2, #0
 800b222:	460b      	mov	r3, r1
 800b224:	ec43 2b10 	vmov	d0, r2, r3
 800b228:	b002      	add	sp, #8
 800b22a:	4770      	bx	lr
 800b22c:	4249      	negs	r1, r1
 800b22e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b232:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b236:	f04f 0200 	mov.w	r2, #0
 800b23a:	f04f 0300 	mov.w	r3, #0
 800b23e:	da04      	bge.n	800b24a <__ulp+0x3e>
 800b240:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b244:	fa41 f300 	asr.w	r3, r1, r0
 800b248:	e7ec      	b.n	800b224 <__ulp+0x18>
 800b24a:	f1a0 0114 	sub.w	r1, r0, #20
 800b24e:	291e      	cmp	r1, #30
 800b250:	bfda      	itte	le
 800b252:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b256:	fa20 f101 	lsrle.w	r1, r0, r1
 800b25a:	2101      	movgt	r1, #1
 800b25c:	460a      	mov	r2, r1
 800b25e:	e7e1      	b.n	800b224 <__ulp+0x18>
 800b260:	7ff00000 	.word	0x7ff00000

0800b264 <__b2d>:
 800b264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b266:	6905      	ldr	r5, [r0, #16]
 800b268:	f100 0714 	add.w	r7, r0, #20
 800b26c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b270:	1f2e      	subs	r6, r5, #4
 800b272:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b276:	4620      	mov	r0, r4
 800b278:	f7ff fd48 	bl	800ad0c <__hi0bits>
 800b27c:	f1c0 0320 	rsb	r3, r0, #32
 800b280:	280a      	cmp	r0, #10
 800b282:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b300 <__b2d+0x9c>
 800b286:	600b      	str	r3, [r1, #0]
 800b288:	dc14      	bgt.n	800b2b4 <__b2d+0x50>
 800b28a:	f1c0 0e0b 	rsb	lr, r0, #11
 800b28e:	fa24 f10e 	lsr.w	r1, r4, lr
 800b292:	42b7      	cmp	r7, r6
 800b294:	ea41 030c 	orr.w	r3, r1, ip
 800b298:	bf34      	ite	cc
 800b29a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b29e:	2100      	movcs	r1, #0
 800b2a0:	3015      	adds	r0, #21
 800b2a2:	fa04 f000 	lsl.w	r0, r4, r0
 800b2a6:	fa21 f10e 	lsr.w	r1, r1, lr
 800b2aa:	ea40 0201 	orr.w	r2, r0, r1
 800b2ae:	ec43 2b10 	vmov	d0, r2, r3
 800b2b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2b4:	42b7      	cmp	r7, r6
 800b2b6:	bf3a      	itte	cc
 800b2b8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b2bc:	f1a5 0608 	subcc.w	r6, r5, #8
 800b2c0:	2100      	movcs	r1, #0
 800b2c2:	380b      	subs	r0, #11
 800b2c4:	d017      	beq.n	800b2f6 <__b2d+0x92>
 800b2c6:	f1c0 0c20 	rsb	ip, r0, #32
 800b2ca:	fa04 f500 	lsl.w	r5, r4, r0
 800b2ce:	42be      	cmp	r6, r7
 800b2d0:	fa21 f40c 	lsr.w	r4, r1, ip
 800b2d4:	ea45 0504 	orr.w	r5, r5, r4
 800b2d8:	bf8c      	ite	hi
 800b2da:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b2de:	2400      	movls	r4, #0
 800b2e0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b2e4:	fa01 f000 	lsl.w	r0, r1, r0
 800b2e8:	fa24 f40c 	lsr.w	r4, r4, ip
 800b2ec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b2f0:	ea40 0204 	orr.w	r2, r0, r4
 800b2f4:	e7db      	b.n	800b2ae <__b2d+0x4a>
 800b2f6:	ea44 030c 	orr.w	r3, r4, ip
 800b2fa:	460a      	mov	r2, r1
 800b2fc:	e7d7      	b.n	800b2ae <__b2d+0x4a>
 800b2fe:	bf00      	nop
 800b300:	3ff00000 	.word	0x3ff00000

0800b304 <__d2b>:
 800b304:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b308:	4689      	mov	r9, r1
 800b30a:	2101      	movs	r1, #1
 800b30c:	ec57 6b10 	vmov	r6, r7, d0
 800b310:	4690      	mov	r8, r2
 800b312:	f7ff fc09 	bl	800ab28 <_Balloc>
 800b316:	4604      	mov	r4, r0
 800b318:	b930      	cbnz	r0, 800b328 <__d2b+0x24>
 800b31a:	4602      	mov	r2, r0
 800b31c:	4b25      	ldr	r3, [pc, #148]	; (800b3b4 <__d2b+0xb0>)
 800b31e:	4826      	ldr	r0, [pc, #152]	; (800b3b8 <__d2b+0xb4>)
 800b320:	f240 310a 	movw	r1, #778	; 0x30a
 800b324:	f000 ff6c 	bl	800c200 <__assert_func>
 800b328:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b32c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b330:	bb35      	cbnz	r5, 800b380 <__d2b+0x7c>
 800b332:	2e00      	cmp	r6, #0
 800b334:	9301      	str	r3, [sp, #4]
 800b336:	d028      	beq.n	800b38a <__d2b+0x86>
 800b338:	4668      	mov	r0, sp
 800b33a:	9600      	str	r6, [sp, #0]
 800b33c:	f7ff fd06 	bl	800ad4c <__lo0bits>
 800b340:	9900      	ldr	r1, [sp, #0]
 800b342:	b300      	cbz	r0, 800b386 <__d2b+0x82>
 800b344:	9a01      	ldr	r2, [sp, #4]
 800b346:	f1c0 0320 	rsb	r3, r0, #32
 800b34a:	fa02 f303 	lsl.w	r3, r2, r3
 800b34e:	430b      	orrs	r3, r1
 800b350:	40c2      	lsrs	r2, r0
 800b352:	6163      	str	r3, [r4, #20]
 800b354:	9201      	str	r2, [sp, #4]
 800b356:	9b01      	ldr	r3, [sp, #4]
 800b358:	61a3      	str	r3, [r4, #24]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	bf14      	ite	ne
 800b35e:	2202      	movne	r2, #2
 800b360:	2201      	moveq	r2, #1
 800b362:	6122      	str	r2, [r4, #16]
 800b364:	b1d5      	cbz	r5, 800b39c <__d2b+0x98>
 800b366:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b36a:	4405      	add	r5, r0
 800b36c:	f8c9 5000 	str.w	r5, [r9]
 800b370:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b374:	f8c8 0000 	str.w	r0, [r8]
 800b378:	4620      	mov	r0, r4
 800b37a:	b003      	add	sp, #12
 800b37c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b380:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b384:	e7d5      	b.n	800b332 <__d2b+0x2e>
 800b386:	6161      	str	r1, [r4, #20]
 800b388:	e7e5      	b.n	800b356 <__d2b+0x52>
 800b38a:	a801      	add	r0, sp, #4
 800b38c:	f7ff fcde 	bl	800ad4c <__lo0bits>
 800b390:	9b01      	ldr	r3, [sp, #4]
 800b392:	6163      	str	r3, [r4, #20]
 800b394:	2201      	movs	r2, #1
 800b396:	6122      	str	r2, [r4, #16]
 800b398:	3020      	adds	r0, #32
 800b39a:	e7e3      	b.n	800b364 <__d2b+0x60>
 800b39c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b3a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b3a4:	f8c9 0000 	str.w	r0, [r9]
 800b3a8:	6918      	ldr	r0, [r3, #16]
 800b3aa:	f7ff fcaf 	bl	800ad0c <__hi0bits>
 800b3ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b3b2:	e7df      	b.n	800b374 <__d2b+0x70>
 800b3b4:	0800cf10 	.word	0x0800cf10
 800b3b8:	0800cf9c 	.word	0x0800cf9c

0800b3bc <__ratio>:
 800b3bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c0:	4688      	mov	r8, r1
 800b3c2:	4669      	mov	r1, sp
 800b3c4:	4681      	mov	r9, r0
 800b3c6:	f7ff ff4d 	bl	800b264 <__b2d>
 800b3ca:	a901      	add	r1, sp, #4
 800b3cc:	4640      	mov	r0, r8
 800b3ce:	ec55 4b10 	vmov	r4, r5, d0
 800b3d2:	f7ff ff47 	bl	800b264 <__b2d>
 800b3d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3da:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b3de:	eba3 0c02 	sub.w	ip, r3, r2
 800b3e2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b3e6:	1a9b      	subs	r3, r3, r2
 800b3e8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b3ec:	ec51 0b10 	vmov	r0, r1, d0
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	bfd6      	itet	le
 800b3f4:	460a      	movle	r2, r1
 800b3f6:	462a      	movgt	r2, r5
 800b3f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b3fc:	468b      	mov	fp, r1
 800b3fe:	462f      	mov	r7, r5
 800b400:	bfd4      	ite	le
 800b402:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b406:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b40a:	4620      	mov	r0, r4
 800b40c:	ee10 2a10 	vmov	r2, s0
 800b410:	465b      	mov	r3, fp
 800b412:	4639      	mov	r1, r7
 800b414:	f7f5 fa1a 	bl	800084c <__aeabi_ddiv>
 800b418:	ec41 0b10 	vmov	d0, r0, r1
 800b41c:	b003      	add	sp, #12
 800b41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b422 <__copybits>:
 800b422:	3901      	subs	r1, #1
 800b424:	b570      	push	{r4, r5, r6, lr}
 800b426:	1149      	asrs	r1, r1, #5
 800b428:	6914      	ldr	r4, [r2, #16]
 800b42a:	3101      	adds	r1, #1
 800b42c:	f102 0314 	add.w	r3, r2, #20
 800b430:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b434:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b438:	1f05      	subs	r5, r0, #4
 800b43a:	42a3      	cmp	r3, r4
 800b43c:	d30c      	bcc.n	800b458 <__copybits+0x36>
 800b43e:	1aa3      	subs	r3, r4, r2
 800b440:	3b11      	subs	r3, #17
 800b442:	f023 0303 	bic.w	r3, r3, #3
 800b446:	3211      	adds	r2, #17
 800b448:	42a2      	cmp	r2, r4
 800b44a:	bf88      	it	hi
 800b44c:	2300      	movhi	r3, #0
 800b44e:	4418      	add	r0, r3
 800b450:	2300      	movs	r3, #0
 800b452:	4288      	cmp	r0, r1
 800b454:	d305      	bcc.n	800b462 <__copybits+0x40>
 800b456:	bd70      	pop	{r4, r5, r6, pc}
 800b458:	f853 6b04 	ldr.w	r6, [r3], #4
 800b45c:	f845 6f04 	str.w	r6, [r5, #4]!
 800b460:	e7eb      	b.n	800b43a <__copybits+0x18>
 800b462:	f840 3b04 	str.w	r3, [r0], #4
 800b466:	e7f4      	b.n	800b452 <__copybits+0x30>

0800b468 <__any_on>:
 800b468:	f100 0214 	add.w	r2, r0, #20
 800b46c:	6900      	ldr	r0, [r0, #16]
 800b46e:	114b      	asrs	r3, r1, #5
 800b470:	4298      	cmp	r0, r3
 800b472:	b510      	push	{r4, lr}
 800b474:	db11      	blt.n	800b49a <__any_on+0x32>
 800b476:	dd0a      	ble.n	800b48e <__any_on+0x26>
 800b478:	f011 011f 	ands.w	r1, r1, #31
 800b47c:	d007      	beq.n	800b48e <__any_on+0x26>
 800b47e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b482:	fa24 f001 	lsr.w	r0, r4, r1
 800b486:	fa00 f101 	lsl.w	r1, r0, r1
 800b48a:	428c      	cmp	r4, r1
 800b48c:	d10b      	bne.n	800b4a6 <__any_on+0x3e>
 800b48e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b492:	4293      	cmp	r3, r2
 800b494:	d803      	bhi.n	800b49e <__any_on+0x36>
 800b496:	2000      	movs	r0, #0
 800b498:	bd10      	pop	{r4, pc}
 800b49a:	4603      	mov	r3, r0
 800b49c:	e7f7      	b.n	800b48e <__any_on+0x26>
 800b49e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b4a2:	2900      	cmp	r1, #0
 800b4a4:	d0f5      	beq.n	800b492 <__any_on+0x2a>
 800b4a6:	2001      	movs	r0, #1
 800b4a8:	e7f6      	b.n	800b498 <__any_on+0x30>

0800b4aa <_calloc_r>:
 800b4aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4ac:	fba1 2402 	umull	r2, r4, r1, r2
 800b4b0:	b94c      	cbnz	r4, 800b4c6 <_calloc_r+0x1c>
 800b4b2:	4611      	mov	r1, r2
 800b4b4:	9201      	str	r2, [sp, #4]
 800b4b6:	f000 f87b 	bl	800b5b0 <_malloc_r>
 800b4ba:	9a01      	ldr	r2, [sp, #4]
 800b4bc:	4605      	mov	r5, r0
 800b4be:	b930      	cbnz	r0, 800b4ce <_calloc_r+0x24>
 800b4c0:	4628      	mov	r0, r5
 800b4c2:	b003      	add	sp, #12
 800b4c4:	bd30      	pop	{r4, r5, pc}
 800b4c6:	220c      	movs	r2, #12
 800b4c8:	6002      	str	r2, [r0, #0]
 800b4ca:	2500      	movs	r5, #0
 800b4cc:	e7f8      	b.n	800b4c0 <_calloc_r+0x16>
 800b4ce:	4621      	mov	r1, r4
 800b4d0:	f7fc faf4 	bl	8007abc <memset>
 800b4d4:	e7f4      	b.n	800b4c0 <_calloc_r+0x16>
	...

0800b4d8 <_free_r>:
 800b4d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4da:	2900      	cmp	r1, #0
 800b4dc:	d044      	beq.n	800b568 <_free_r+0x90>
 800b4de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4e2:	9001      	str	r0, [sp, #4]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	f1a1 0404 	sub.w	r4, r1, #4
 800b4ea:	bfb8      	it	lt
 800b4ec:	18e4      	addlt	r4, r4, r3
 800b4ee:	f001 f88b 	bl	800c608 <__malloc_lock>
 800b4f2:	4a1e      	ldr	r2, [pc, #120]	; (800b56c <_free_r+0x94>)
 800b4f4:	9801      	ldr	r0, [sp, #4]
 800b4f6:	6813      	ldr	r3, [r2, #0]
 800b4f8:	b933      	cbnz	r3, 800b508 <_free_r+0x30>
 800b4fa:	6063      	str	r3, [r4, #4]
 800b4fc:	6014      	str	r4, [r2, #0]
 800b4fe:	b003      	add	sp, #12
 800b500:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b504:	f001 b886 	b.w	800c614 <__malloc_unlock>
 800b508:	42a3      	cmp	r3, r4
 800b50a:	d908      	bls.n	800b51e <_free_r+0x46>
 800b50c:	6825      	ldr	r5, [r4, #0]
 800b50e:	1961      	adds	r1, r4, r5
 800b510:	428b      	cmp	r3, r1
 800b512:	bf01      	itttt	eq
 800b514:	6819      	ldreq	r1, [r3, #0]
 800b516:	685b      	ldreq	r3, [r3, #4]
 800b518:	1949      	addeq	r1, r1, r5
 800b51a:	6021      	streq	r1, [r4, #0]
 800b51c:	e7ed      	b.n	800b4fa <_free_r+0x22>
 800b51e:	461a      	mov	r2, r3
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	b10b      	cbz	r3, 800b528 <_free_r+0x50>
 800b524:	42a3      	cmp	r3, r4
 800b526:	d9fa      	bls.n	800b51e <_free_r+0x46>
 800b528:	6811      	ldr	r1, [r2, #0]
 800b52a:	1855      	adds	r5, r2, r1
 800b52c:	42a5      	cmp	r5, r4
 800b52e:	d10b      	bne.n	800b548 <_free_r+0x70>
 800b530:	6824      	ldr	r4, [r4, #0]
 800b532:	4421      	add	r1, r4
 800b534:	1854      	adds	r4, r2, r1
 800b536:	42a3      	cmp	r3, r4
 800b538:	6011      	str	r1, [r2, #0]
 800b53a:	d1e0      	bne.n	800b4fe <_free_r+0x26>
 800b53c:	681c      	ldr	r4, [r3, #0]
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	6053      	str	r3, [r2, #4]
 800b542:	4421      	add	r1, r4
 800b544:	6011      	str	r1, [r2, #0]
 800b546:	e7da      	b.n	800b4fe <_free_r+0x26>
 800b548:	d902      	bls.n	800b550 <_free_r+0x78>
 800b54a:	230c      	movs	r3, #12
 800b54c:	6003      	str	r3, [r0, #0]
 800b54e:	e7d6      	b.n	800b4fe <_free_r+0x26>
 800b550:	6825      	ldr	r5, [r4, #0]
 800b552:	1961      	adds	r1, r4, r5
 800b554:	428b      	cmp	r3, r1
 800b556:	bf04      	itt	eq
 800b558:	6819      	ldreq	r1, [r3, #0]
 800b55a:	685b      	ldreq	r3, [r3, #4]
 800b55c:	6063      	str	r3, [r4, #4]
 800b55e:	bf04      	itt	eq
 800b560:	1949      	addeq	r1, r1, r5
 800b562:	6021      	streq	r1, [r4, #0]
 800b564:	6054      	str	r4, [r2, #4]
 800b566:	e7ca      	b.n	800b4fe <_free_r+0x26>
 800b568:	b003      	add	sp, #12
 800b56a:	bd30      	pop	{r4, r5, pc}
 800b56c:	20000918 	.word	0x20000918

0800b570 <sbrk_aligned>:
 800b570:	b570      	push	{r4, r5, r6, lr}
 800b572:	4e0e      	ldr	r6, [pc, #56]	; (800b5ac <sbrk_aligned+0x3c>)
 800b574:	460c      	mov	r4, r1
 800b576:	6831      	ldr	r1, [r6, #0]
 800b578:	4605      	mov	r5, r0
 800b57a:	b911      	cbnz	r1, 800b582 <sbrk_aligned+0x12>
 800b57c:	f000 fd28 	bl	800bfd0 <_sbrk_r>
 800b580:	6030      	str	r0, [r6, #0]
 800b582:	4621      	mov	r1, r4
 800b584:	4628      	mov	r0, r5
 800b586:	f000 fd23 	bl	800bfd0 <_sbrk_r>
 800b58a:	1c43      	adds	r3, r0, #1
 800b58c:	d00a      	beq.n	800b5a4 <sbrk_aligned+0x34>
 800b58e:	1cc4      	adds	r4, r0, #3
 800b590:	f024 0403 	bic.w	r4, r4, #3
 800b594:	42a0      	cmp	r0, r4
 800b596:	d007      	beq.n	800b5a8 <sbrk_aligned+0x38>
 800b598:	1a21      	subs	r1, r4, r0
 800b59a:	4628      	mov	r0, r5
 800b59c:	f000 fd18 	bl	800bfd0 <_sbrk_r>
 800b5a0:	3001      	adds	r0, #1
 800b5a2:	d101      	bne.n	800b5a8 <sbrk_aligned+0x38>
 800b5a4:	f04f 34ff 	mov.w	r4, #4294967295
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	bd70      	pop	{r4, r5, r6, pc}
 800b5ac:	2000091c 	.word	0x2000091c

0800b5b0 <_malloc_r>:
 800b5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5b4:	1ccd      	adds	r5, r1, #3
 800b5b6:	f025 0503 	bic.w	r5, r5, #3
 800b5ba:	3508      	adds	r5, #8
 800b5bc:	2d0c      	cmp	r5, #12
 800b5be:	bf38      	it	cc
 800b5c0:	250c      	movcc	r5, #12
 800b5c2:	2d00      	cmp	r5, #0
 800b5c4:	4607      	mov	r7, r0
 800b5c6:	db01      	blt.n	800b5cc <_malloc_r+0x1c>
 800b5c8:	42a9      	cmp	r1, r5
 800b5ca:	d905      	bls.n	800b5d8 <_malloc_r+0x28>
 800b5cc:	230c      	movs	r3, #12
 800b5ce:	603b      	str	r3, [r7, #0]
 800b5d0:	2600      	movs	r6, #0
 800b5d2:	4630      	mov	r0, r6
 800b5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5d8:	4e2e      	ldr	r6, [pc, #184]	; (800b694 <_malloc_r+0xe4>)
 800b5da:	f001 f815 	bl	800c608 <__malloc_lock>
 800b5de:	6833      	ldr	r3, [r6, #0]
 800b5e0:	461c      	mov	r4, r3
 800b5e2:	bb34      	cbnz	r4, 800b632 <_malloc_r+0x82>
 800b5e4:	4629      	mov	r1, r5
 800b5e6:	4638      	mov	r0, r7
 800b5e8:	f7ff ffc2 	bl	800b570 <sbrk_aligned>
 800b5ec:	1c43      	adds	r3, r0, #1
 800b5ee:	4604      	mov	r4, r0
 800b5f0:	d14d      	bne.n	800b68e <_malloc_r+0xde>
 800b5f2:	6834      	ldr	r4, [r6, #0]
 800b5f4:	4626      	mov	r6, r4
 800b5f6:	2e00      	cmp	r6, #0
 800b5f8:	d140      	bne.n	800b67c <_malloc_r+0xcc>
 800b5fa:	6823      	ldr	r3, [r4, #0]
 800b5fc:	4631      	mov	r1, r6
 800b5fe:	4638      	mov	r0, r7
 800b600:	eb04 0803 	add.w	r8, r4, r3
 800b604:	f000 fce4 	bl	800bfd0 <_sbrk_r>
 800b608:	4580      	cmp	r8, r0
 800b60a:	d13a      	bne.n	800b682 <_malloc_r+0xd2>
 800b60c:	6821      	ldr	r1, [r4, #0]
 800b60e:	3503      	adds	r5, #3
 800b610:	1a6d      	subs	r5, r5, r1
 800b612:	f025 0503 	bic.w	r5, r5, #3
 800b616:	3508      	adds	r5, #8
 800b618:	2d0c      	cmp	r5, #12
 800b61a:	bf38      	it	cc
 800b61c:	250c      	movcc	r5, #12
 800b61e:	4629      	mov	r1, r5
 800b620:	4638      	mov	r0, r7
 800b622:	f7ff ffa5 	bl	800b570 <sbrk_aligned>
 800b626:	3001      	adds	r0, #1
 800b628:	d02b      	beq.n	800b682 <_malloc_r+0xd2>
 800b62a:	6823      	ldr	r3, [r4, #0]
 800b62c:	442b      	add	r3, r5
 800b62e:	6023      	str	r3, [r4, #0]
 800b630:	e00e      	b.n	800b650 <_malloc_r+0xa0>
 800b632:	6822      	ldr	r2, [r4, #0]
 800b634:	1b52      	subs	r2, r2, r5
 800b636:	d41e      	bmi.n	800b676 <_malloc_r+0xc6>
 800b638:	2a0b      	cmp	r2, #11
 800b63a:	d916      	bls.n	800b66a <_malloc_r+0xba>
 800b63c:	1961      	adds	r1, r4, r5
 800b63e:	42a3      	cmp	r3, r4
 800b640:	6025      	str	r5, [r4, #0]
 800b642:	bf18      	it	ne
 800b644:	6059      	strne	r1, [r3, #4]
 800b646:	6863      	ldr	r3, [r4, #4]
 800b648:	bf08      	it	eq
 800b64a:	6031      	streq	r1, [r6, #0]
 800b64c:	5162      	str	r2, [r4, r5]
 800b64e:	604b      	str	r3, [r1, #4]
 800b650:	4638      	mov	r0, r7
 800b652:	f104 060b 	add.w	r6, r4, #11
 800b656:	f000 ffdd 	bl	800c614 <__malloc_unlock>
 800b65a:	f026 0607 	bic.w	r6, r6, #7
 800b65e:	1d23      	adds	r3, r4, #4
 800b660:	1af2      	subs	r2, r6, r3
 800b662:	d0b6      	beq.n	800b5d2 <_malloc_r+0x22>
 800b664:	1b9b      	subs	r3, r3, r6
 800b666:	50a3      	str	r3, [r4, r2]
 800b668:	e7b3      	b.n	800b5d2 <_malloc_r+0x22>
 800b66a:	6862      	ldr	r2, [r4, #4]
 800b66c:	42a3      	cmp	r3, r4
 800b66e:	bf0c      	ite	eq
 800b670:	6032      	streq	r2, [r6, #0]
 800b672:	605a      	strne	r2, [r3, #4]
 800b674:	e7ec      	b.n	800b650 <_malloc_r+0xa0>
 800b676:	4623      	mov	r3, r4
 800b678:	6864      	ldr	r4, [r4, #4]
 800b67a:	e7b2      	b.n	800b5e2 <_malloc_r+0x32>
 800b67c:	4634      	mov	r4, r6
 800b67e:	6876      	ldr	r6, [r6, #4]
 800b680:	e7b9      	b.n	800b5f6 <_malloc_r+0x46>
 800b682:	230c      	movs	r3, #12
 800b684:	603b      	str	r3, [r7, #0]
 800b686:	4638      	mov	r0, r7
 800b688:	f000 ffc4 	bl	800c614 <__malloc_unlock>
 800b68c:	e7a1      	b.n	800b5d2 <_malloc_r+0x22>
 800b68e:	6025      	str	r5, [r4, #0]
 800b690:	e7de      	b.n	800b650 <_malloc_r+0xa0>
 800b692:	bf00      	nop
 800b694:	20000918 	.word	0x20000918

0800b698 <__ssputs_r>:
 800b698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b69c:	688e      	ldr	r6, [r1, #8]
 800b69e:	429e      	cmp	r6, r3
 800b6a0:	4682      	mov	sl, r0
 800b6a2:	460c      	mov	r4, r1
 800b6a4:	4690      	mov	r8, r2
 800b6a6:	461f      	mov	r7, r3
 800b6a8:	d838      	bhi.n	800b71c <__ssputs_r+0x84>
 800b6aa:	898a      	ldrh	r2, [r1, #12]
 800b6ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b6b0:	d032      	beq.n	800b718 <__ssputs_r+0x80>
 800b6b2:	6825      	ldr	r5, [r4, #0]
 800b6b4:	6909      	ldr	r1, [r1, #16]
 800b6b6:	eba5 0901 	sub.w	r9, r5, r1
 800b6ba:	6965      	ldr	r5, [r4, #20]
 800b6bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	444b      	add	r3, r9
 800b6c8:	106d      	asrs	r5, r5, #1
 800b6ca:	429d      	cmp	r5, r3
 800b6cc:	bf38      	it	cc
 800b6ce:	461d      	movcc	r5, r3
 800b6d0:	0553      	lsls	r3, r2, #21
 800b6d2:	d531      	bpl.n	800b738 <__ssputs_r+0xa0>
 800b6d4:	4629      	mov	r1, r5
 800b6d6:	f7ff ff6b 	bl	800b5b0 <_malloc_r>
 800b6da:	4606      	mov	r6, r0
 800b6dc:	b950      	cbnz	r0, 800b6f4 <__ssputs_r+0x5c>
 800b6de:	230c      	movs	r3, #12
 800b6e0:	f8ca 3000 	str.w	r3, [sl]
 800b6e4:	89a3      	ldrh	r3, [r4, #12]
 800b6e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6ea:	81a3      	strh	r3, [r4, #12]
 800b6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6f4:	6921      	ldr	r1, [r4, #16]
 800b6f6:	464a      	mov	r2, r9
 800b6f8:	f7ff fa08 	bl	800ab0c <memcpy>
 800b6fc:	89a3      	ldrh	r3, [r4, #12]
 800b6fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b706:	81a3      	strh	r3, [r4, #12]
 800b708:	6126      	str	r6, [r4, #16]
 800b70a:	6165      	str	r5, [r4, #20]
 800b70c:	444e      	add	r6, r9
 800b70e:	eba5 0509 	sub.w	r5, r5, r9
 800b712:	6026      	str	r6, [r4, #0]
 800b714:	60a5      	str	r5, [r4, #8]
 800b716:	463e      	mov	r6, r7
 800b718:	42be      	cmp	r6, r7
 800b71a:	d900      	bls.n	800b71e <__ssputs_r+0x86>
 800b71c:	463e      	mov	r6, r7
 800b71e:	6820      	ldr	r0, [r4, #0]
 800b720:	4632      	mov	r2, r6
 800b722:	4641      	mov	r1, r8
 800b724:	f000 ff56 	bl	800c5d4 <memmove>
 800b728:	68a3      	ldr	r3, [r4, #8]
 800b72a:	1b9b      	subs	r3, r3, r6
 800b72c:	60a3      	str	r3, [r4, #8]
 800b72e:	6823      	ldr	r3, [r4, #0]
 800b730:	4433      	add	r3, r6
 800b732:	6023      	str	r3, [r4, #0]
 800b734:	2000      	movs	r0, #0
 800b736:	e7db      	b.n	800b6f0 <__ssputs_r+0x58>
 800b738:	462a      	mov	r2, r5
 800b73a:	f000 ff71 	bl	800c620 <_realloc_r>
 800b73e:	4606      	mov	r6, r0
 800b740:	2800      	cmp	r0, #0
 800b742:	d1e1      	bne.n	800b708 <__ssputs_r+0x70>
 800b744:	6921      	ldr	r1, [r4, #16]
 800b746:	4650      	mov	r0, sl
 800b748:	f7ff fec6 	bl	800b4d8 <_free_r>
 800b74c:	e7c7      	b.n	800b6de <__ssputs_r+0x46>
	...

0800b750 <_svfiprintf_r>:
 800b750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b754:	4698      	mov	r8, r3
 800b756:	898b      	ldrh	r3, [r1, #12]
 800b758:	061b      	lsls	r3, r3, #24
 800b75a:	b09d      	sub	sp, #116	; 0x74
 800b75c:	4607      	mov	r7, r0
 800b75e:	460d      	mov	r5, r1
 800b760:	4614      	mov	r4, r2
 800b762:	d50e      	bpl.n	800b782 <_svfiprintf_r+0x32>
 800b764:	690b      	ldr	r3, [r1, #16]
 800b766:	b963      	cbnz	r3, 800b782 <_svfiprintf_r+0x32>
 800b768:	2140      	movs	r1, #64	; 0x40
 800b76a:	f7ff ff21 	bl	800b5b0 <_malloc_r>
 800b76e:	6028      	str	r0, [r5, #0]
 800b770:	6128      	str	r0, [r5, #16]
 800b772:	b920      	cbnz	r0, 800b77e <_svfiprintf_r+0x2e>
 800b774:	230c      	movs	r3, #12
 800b776:	603b      	str	r3, [r7, #0]
 800b778:	f04f 30ff 	mov.w	r0, #4294967295
 800b77c:	e0d1      	b.n	800b922 <_svfiprintf_r+0x1d2>
 800b77e:	2340      	movs	r3, #64	; 0x40
 800b780:	616b      	str	r3, [r5, #20]
 800b782:	2300      	movs	r3, #0
 800b784:	9309      	str	r3, [sp, #36]	; 0x24
 800b786:	2320      	movs	r3, #32
 800b788:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b78c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b790:	2330      	movs	r3, #48	; 0x30
 800b792:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b93c <_svfiprintf_r+0x1ec>
 800b796:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b79a:	f04f 0901 	mov.w	r9, #1
 800b79e:	4623      	mov	r3, r4
 800b7a0:	469a      	mov	sl, r3
 800b7a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7a6:	b10a      	cbz	r2, 800b7ac <_svfiprintf_r+0x5c>
 800b7a8:	2a25      	cmp	r2, #37	; 0x25
 800b7aa:	d1f9      	bne.n	800b7a0 <_svfiprintf_r+0x50>
 800b7ac:	ebba 0b04 	subs.w	fp, sl, r4
 800b7b0:	d00b      	beq.n	800b7ca <_svfiprintf_r+0x7a>
 800b7b2:	465b      	mov	r3, fp
 800b7b4:	4622      	mov	r2, r4
 800b7b6:	4629      	mov	r1, r5
 800b7b8:	4638      	mov	r0, r7
 800b7ba:	f7ff ff6d 	bl	800b698 <__ssputs_r>
 800b7be:	3001      	adds	r0, #1
 800b7c0:	f000 80aa 	beq.w	800b918 <_svfiprintf_r+0x1c8>
 800b7c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7c6:	445a      	add	r2, fp
 800b7c8:	9209      	str	r2, [sp, #36]	; 0x24
 800b7ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	f000 80a2 	beq.w	800b918 <_svfiprintf_r+0x1c8>
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b7da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7de:	f10a 0a01 	add.w	sl, sl, #1
 800b7e2:	9304      	str	r3, [sp, #16]
 800b7e4:	9307      	str	r3, [sp, #28]
 800b7e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7ea:	931a      	str	r3, [sp, #104]	; 0x68
 800b7ec:	4654      	mov	r4, sl
 800b7ee:	2205      	movs	r2, #5
 800b7f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7f4:	4851      	ldr	r0, [pc, #324]	; (800b93c <_svfiprintf_r+0x1ec>)
 800b7f6:	f7f4 fcf3 	bl	80001e0 <memchr>
 800b7fa:	9a04      	ldr	r2, [sp, #16]
 800b7fc:	b9d8      	cbnz	r0, 800b836 <_svfiprintf_r+0xe6>
 800b7fe:	06d0      	lsls	r0, r2, #27
 800b800:	bf44      	itt	mi
 800b802:	2320      	movmi	r3, #32
 800b804:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b808:	0711      	lsls	r1, r2, #28
 800b80a:	bf44      	itt	mi
 800b80c:	232b      	movmi	r3, #43	; 0x2b
 800b80e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b812:	f89a 3000 	ldrb.w	r3, [sl]
 800b816:	2b2a      	cmp	r3, #42	; 0x2a
 800b818:	d015      	beq.n	800b846 <_svfiprintf_r+0xf6>
 800b81a:	9a07      	ldr	r2, [sp, #28]
 800b81c:	4654      	mov	r4, sl
 800b81e:	2000      	movs	r0, #0
 800b820:	f04f 0c0a 	mov.w	ip, #10
 800b824:	4621      	mov	r1, r4
 800b826:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b82a:	3b30      	subs	r3, #48	; 0x30
 800b82c:	2b09      	cmp	r3, #9
 800b82e:	d94e      	bls.n	800b8ce <_svfiprintf_r+0x17e>
 800b830:	b1b0      	cbz	r0, 800b860 <_svfiprintf_r+0x110>
 800b832:	9207      	str	r2, [sp, #28]
 800b834:	e014      	b.n	800b860 <_svfiprintf_r+0x110>
 800b836:	eba0 0308 	sub.w	r3, r0, r8
 800b83a:	fa09 f303 	lsl.w	r3, r9, r3
 800b83e:	4313      	orrs	r3, r2
 800b840:	9304      	str	r3, [sp, #16]
 800b842:	46a2      	mov	sl, r4
 800b844:	e7d2      	b.n	800b7ec <_svfiprintf_r+0x9c>
 800b846:	9b03      	ldr	r3, [sp, #12]
 800b848:	1d19      	adds	r1, r3, #4
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	9103      	str	r1, [sp, #12]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	bfbb      	ittet	lt
 800b852:	425b      	neglt	r3, r3
 800b854:	f042 0202 	orrlt.w	r2, r2, #2
 800b858:	9307      	strge	r3, [sp, #28]
 800b85a:	9307      	strlt	r3, [sp, #28]
 800b85c:	bfb8      	it	lt
 800b85e:	9204      	strlt	r2, [sp, #16]
 800b860:	7823      	ldrb	r3, [r4, #0]
 800b862:	2b2e      	cmp	r3, #46	; 0x2e
 800b864:	d10c      	bne.n	800b880 <_svfiprintf_r+0x130>
 800b866:	7863      	ldrb	r3, [r4, #1]
 800b868:	2b2a      	cmp	r3, #42	; 0x2a
 800b86a:	d135      	bne.n	800b8d8 <_svfiprintf_r+0x188>
 800b86c:	9b03      	ldr	r3, [sp, #12]
 800b86e:	1d1a      	adds	r2, r3, #4
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	9203      	str	r2, [sp, #12]
 800b874:	2b00      	cmp	r3, #0
 800b876:	bfb8      	it	lt
 800b878:	f04f 33ff 	movlt.w	r3, #4294967295
 800b87c:	3402      	adds	r4, #2
 800b87e:	9305      	str	r3, [sp, #20]
 800b880:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b94c <_svfiprintf_r+0x1fc>
 800b884:	7821      	ldrb	r1, [r4, #0]
 800b886:	2203      	movs	r2, #3
 800b888:	4650      	mov	r0, sl
 800b88a:	f7f4 fca9 	bl	80001e0 <memchr>
 800b88e:	b140      	cbz	r0, 800b8a2 <_svfiprintf_r+0x152>
 800b890:	2340      	movs	r3, #64	; 0x40
 800b892:	eba0 000a 	sub.w	r0, r0, sl
 800b896:	fa03 f000 	lsl.w	r0, r3, r0
 800b89a:	9b04      	ldr	r3, [sp, #16]
 800b89c:	4303      	orrs	r3, r0
 800b89e:	3401      	adds	r4, #1
 800b8a0:	9304      	str	r3, [sp, #16]
 800b8a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8a6:	4826      	ldr	r0, [pc, #152]	; (800b940 <_svfiprintf_r+0x1f0>)
 800b8a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8ac:	2206      	movs	r2, #6
 800b8ae:	f7f4 fc97 	bl	80001e0 <memchr>
 800b8b2:	2800      	cmp	r0, #0
 800b8b4:	d038      	beq.n	800b928 <_svfiprintf_r+0x1d8>
 800b8b6:	4b23      	ldr	r3, [pc, #140]	; (800b944 <_svfiprintf_r+0x1f4>)
 800b8b8:	bb1b      	cbnz	r3, 800b902 <_svfiprintf_r+0x1b2>
 800b8ba:	9b03      	ldr	r3, [sp, #12]
 800b8bc:	3307      	adds	r3, #7
 800b8be:	f023 0307 	bic.w	r3, r3, #7
 800b8c2:	3308      	adds	r3, #8
 800b8c4:	9303      	str	r3, [sp, #12]
 800b8c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8c8:	4433      	add	r3, r6
 800b8ca:	9309      	str	r3, [sp, #36]	; 0x24
 800b8cc:	e767      	b.n	800b79e <_svfiprintf_r+0x4e>
 800b8ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8d2:	460c      	mov	r4, r1
 800b8d4:	2001      	movs	r0, #1
 800b8d6:	e7a5      	b.n	800b824 <_svfiprintf_r+0xd4>
 800b8d8:	2300      	movs	r3, #0
 800b8da:	3401      	adds	r4, #1
 800b8dc:	9305      	str	r3, [sp, #20]
 800b8de:	4619      	mov	r1, r3
 800b8e0:	f04f 0c0a 	mov.w	ip, #10
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8ea:	3a30      	subs	r2, #48	; 0x30
 800b8ec:	2a09      	cmp	r2, #9
 800b8ee:	d903      	bls.n	800b8f8 <_svfiprintf_r+0x1a8>
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d0c5      	beq.n	800b880 <_svfiprintf_r+0x130>
 800b8f4:	9105      	str	r1, [sp, #20]
 800b8f6:	e7c3      	b.n	800b880 <_svfiprintf_r+0x130>
 800b8f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8fc:	4604      	mov	r4, r0
 800b8fe:	2301      	movs	r3, #1
 800b900:	e7f0      	b.n	800b8e4 <_svfiprintf_r+0x194>
 800b902:	ab03      	add	r3, sp, #12
 800b904:	9300      	str	r3, [sp, #0]
 800b906:	462a      	mov	r2, r5
 800b908:	4b0f      	ldr	r3, [pc, #60]	; (800b948 <_svfiprintf_r+0x1f8>)
 800b90a:	a904      	add	r1, sp, #16
 800b90c:	4638      	mov	r0, r7
 800b90e:	f7fc f97d 	bl	8007c0c <_printf_float>
 800b912:	1c42      	adds	r2, r0, #1
 800b914:	4606      	mov	r6, r0
 800b916:	d1d6      	bne.n	800b8c6 <_svfiprintf_r+0x176>
 800b918:	89ab      	ldrh	r3, [r5, #12]
 800b91a:	065b      	lsls	r3, r3, #25
 800b91c:	f53f af2c 	bmi.w	800b778 <_svfiprintf_r+0x28>
 800b920:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b922:	b01d      	add	sp, #116	; 0x74
 800b924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b928:	ab03      	add	r3, sp, #12
 800b92a:	9300      	str	r3, [sp, #0]
 800b92c:	462a      	mov	r2, r5
 800b92e:	4b06      	ldr	r3, [pc, #24]	; (800b948 <_svfiprintf_r+0x1f8>)
 800b930:	a904      	add	r1, sp, #16
 800b932:	4638      	mov	r0, r7
 800b934:	f7fc fc0e 	bl	8008154 <_printf_i>
 800b938:	e7eb      	b.n	800b912 <_svfiprintf_r+0x1c2>
 800b93a:	bf00      	nop
 800b93c:	0800d0f4 	.word	0x0800d0f4
 800b940:	0800d0fe 	.word	0x0800d0fe
 800b944:	08007c0d 	.word	0x08007c0d
 800b948:	0800b699 	.word	0x0800b699
 800b94c:	0800d0fa 	.word	0x0800d0fa

0800b950 <_sungetc_r>:
 800b950:	b538      	push	{r3, r4, r5, lr}
 800b952:	1c4b      	adds	r3, r1, #1
 800b954:	4614      	mov	r4, r2
 800b956:	d103      	bne.n	800b960 <_sungetc_r+0x10>
 800b958:	f04f 35ff 	mov.w	r5, #4294967295
 800b95c:	4628      	mov	r0, r5
 800b95e:	bd38      	pop	{r3, r4, r5, pc}
 800b960:	8993      	ldrh	r3, [r2, #12]
 800b962:	f023 0320 	bic.w	r3, r3, #32
 800b966:	8193      	strh	r3, [r2, #12]
 800b968:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b96a:	6852      	ldr	r2, [r2, #4]
 800b96c:	b2cd      	uxtb	r5, r1
 800b96e:	b18b      	cbz	r3, 800b994 <_sungetc_r+0x44>
 800b970:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b972:	4293      	cmp	r3, r2
 800b974:	dd08      	ble.n	800b988 <_sungetc_r+0x38>
 800b976:	6823      	ldr	r3, [r4, #0]
 800b978:	1e5a      	subs	r2, r3, #1
 800b97a:	6022      	str	r2, [r4, #0]
 800b97c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b980:	6863      	ldr	r3, [r4, #4]
 800b982:	3301      	adds	r3, #1
 800b984:	6063      	str	r3, [r4, #4]
 800b986:	e7e9      	b.n	800b95c <_sungetc_r+0xc>
 800b988:	4621      	mov	r1, r4
 800b98a:	f000 fbf1 	bl	800c170 <__submore>
 800b98e:	2800      	cmp	r0, #0
 800b990:	d0f1      	beq.n	800b976 <_sungetc_r+0x26>
 800b992:	e7e1      	b.n	800b958 <_sungetc_r+0x8>
 800b994:	6921      	ldr	r1, [r4, #16]
 800b996:	6823      	ldr	r3, [r4, #0]
 800b998:	b151      	cbz	r1, 800b9b0 <_sungetc_r+0x60>
 800b99a:	4299      	cmp	r1, r3
 800b99c:	d208      	bcs.n	800b9b0 <_sungetc_r+0x60>
 800b99e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b9a2:	42a9      	cmp	r1, r5
 800b9a4:	d104      	bne.n	800b9b0 <_sungetc_r+0x60>
 800b9a6:	3b01      	subs	r3, #1
 800b9a8:	3201      	adds	r2, #1
 800b9aa:	6023      	str	r3, [r4, #0]
 800b9ac:	6062      	str	r2, [r4, #4]
 800b9ae:	e7d5      	b.n	800b95c <_sungetc_r+0xc>
 800b9b0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b9b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9b8:	6363      	str	r3, [r4, #52]	; 0x34
 800b9ba:	2303      	movs	r3, #3
 800b9bc:	63a3      	str	r3, [r4, #56]	; 0x38
 800b9be:	4623      	mov	r3, r4
 800b9c0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b9c4:	6023      	str	r3, [r4, #0]
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	e7dc      	b.n	800b984 <_sungetc_r+0x34>

0800b9ca <__ssrefill_r>:
 800b9ca:	b510      	push	{r4, lr}
 800b9cc:	460c      	mov	r4, r1
 800b9ce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b9d0:	b169      	cbz	r1, 800b9ee <__ssrefill_r+0x24>
 800b9d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9d6:	4299      	cmp	r1, r3
 800b9d8:	d001      	beq.n	800b9de <__ssrefill_r+0x14>
 800b9da:	f7ff fd7d 	bl	800b4d8 <_free_r>
 800b9de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b9e0:	6063      	str	r3, [r4, #4]
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	6360      	str	r0, [r4, #52]	; 0x34
 800b9e6:	b113      	cbz	r3, 800b9ee <__ssrefill_r+0x24>
 800b9e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b9ea:	6023      	str	r3, [r4, #0]
 800b9ec:	bd10      	pop	{r4, pc}
 800b9ee:	6923      	ldr	r3, [r4, #16]
 800b9f0:	6023      	str	r3, [r4, #0]
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	6063      	str	r3, [r4, #4]
 800b9f6:	89a3      	ldrh	r3, [r4, #12]
 800b9f8:	f043 0320 	orr.w	r3, r3, #32
 800b9fc:	81a3      	strh	r3, [r4, #12]
 800b9fe:	f04f 30ff 	mov.w	r0, #4294967295
 800ba02:	e7f3      	b.n	800b9ec <__ssrefill_r+0x22>

0800ba04 <__ssvfiscanf_r>:
 800ba04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba08:	460c      	mov	r4, r1
 800ba0a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800ba0e:	2100      	movs	r1, #0
 800ba10:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800ba14:	49a6      	ldr	r1, [pc, #664]	; (800bcb0 <__ssvfiscanf_r+0x2ac>)
 800ba16:	91a0      	str	r1, [sp, #640]	; 0x280
 800ba18:	f10d 0804 	add.w	r8, sp, #4
 800ba1c:	49a5      	ldr	r1, [pc, #660]	; (800bcb4 <__ssvfiscanf_r+0x2b0>)
 800ba1e:	4fa6      	ldr	r7, [pc, #664]	; (800bcb8 <__ssvfiscanf_r+0x2b4>)
 800ba20:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800bcbc <__ssvfiscanf_r+0x2b8>
 800ba24:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800ba28:	4606      	mov	r6, r0
 800ba2a:	91a1      	str	r1, [sp, #644]	; 0x284
 800ba2c:	9300      	str	r3, [sp, #0]
 800ba2e:	7813      	ldrb	r3, [r2, #0]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	f000 815a 	beq.w	800bcea <__ssvfiscanf_r+0x2e6>
 800ba36:	5dd9      	ldrb	r1, [r3, r7]
 800ba38:	f011 0108 	ands.w	r1, r1, #8
 800ba3c:	f102 0501 	add.w	r5, r2, #1
 800ba40:	d019      	beq.n	800ba76 <__ssvfiscanf_r+0x72>
 800ba42:	6863      	ldr	r3, [r4, #4]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	dd0f      	ble.n	800ba68 <__ssvfiscanf_r+0x64>
 800ba48:	6823      	ldr	r3, [r4, #0]
 800ba4a:	781a      	ldrb	r2, [r3, #0]
 800ba4c:	5cba      	ldrb	r2, [r7, r2]
 800ba4e:	0712      	lsls	r2, r2, #28
 800ba50:	d401      	bmi.n	800ba56 <__ssvfiscanf_r+0x52>
 800ba52:	462a      	mov	r2, r5
 800ba54:	e7eb      	b.n	800ba2e <__ssvfiscanf_r+0x2a>
 800ba56:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ba58:	3201      	adds	r2, #1
 800ba5a:	9245      	str	r2, [sp, #276]	; 0x114
 800ba5c:	6862      	ldr	r2, [r4, #4]
 800ba5e:	3301      	adds	r3, #1
 800ba60:	3a01      	subs	r2, #1
 800ba62:	6062      	str	r2, [r4, #4]
 800ba64:	6023      	str	r3, [r4, #0]
 800ba66:	e7ec      	b.n	800ba42 <__ssvfiscanf_r+0x3e>
 800ba68:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ba6a:	4621      	mov	r1, r4
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	4798      	blx	r3
 800ba70:	2800      	cmp	r0, #0
 800ba72:	d0e9      	beq.n	800ba48 <__ssvfiscanf_r+0x44>
 800ba74:	e7ed      	b.n	800ba52 <__ssvfiscanf_r+0x4e>
 800ba76:	2b25      	cmp	r3, #37	; 0x25
 800ba78:	d012      	beq.n	800baa0 <__ssvfiscanf_r+0x9c>
 800ba7a:	469a      	mov	sl, r3
 800ba7c:	6863      	ldr	r3, [r4, #4]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	f340 8091 	ble.w	800bba6 <__ssvfiscanf_r+0x1a2>
 800ba84:	6822      	ldr	r2, [r4, #0]
 800ba86:	7813      	ldrb	r3, [r2, #0]
 800ba88:	4553      	cmp	r3, sl
 800ba8a:	f040 812e 	bne.w	800bcea <__ssvfiscanf_r+0x2e6>
 800ba8e:	6863      	ldr	r3, [r4, #4]
 800ba90:	3b01      	subs	r3, #1
 800ba92:	6063      	str	r3, [r4, #4]
 800ba94:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ba96:	3201      	adds	r2, #1
 800ba98:	3301      	adds	r3, #1
 800ba9a:	6022      	str	r2, [r4, #0]
 800ba9c:	9345      	str	r3, [sp, #276]	; 0x114
 800ba9e:	e7d8      	b.n	800ba52 <__ssvfiscanf_r+0x4e>
 800baa0:	9141      	str	r1, [sp, #260]	; 0x104
 800baa2:	9143      	str	r1, [sp, #268]	; 0x10c
 800baa4:	7853      	ldrb	r3, [r2, #1]
 800baa6:	2b2a      	cmp	r3, #42	; 0x2a
 800baa8:	bf02      	ittt	eq
 800baaa:	2310      	moveq	r3, #16
 800baac:	1c95      	addeq	r5, r2, #2
 800baae:	9341      	streq	r3, [sp, #260]	; 0x104
 800bab0:	220a      	movs	r2, #10
 800bab2:	46aa      	mov	sl, r5
 800bab4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800bab8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800babc:	2b09      	cmp	r3, #9
 800babe:	d91d      	bls.n	800bafc <__ssvfiscanf_r+0xf8>
 800bac0:	487e      	ldr	r0, [pc, #504]	; (800bcbc <__ssvfiscanf_r+0x2b8>)
 800bac2:	2203      	movs	r2, #3
 800bac4:	f7f4 fb8c 	bl	80001e0 <memchr>
 800bac8:	b140      	cbz	r0, 800badc <__ssvfiscanf_r+0xd8>
 800baca:	2301      	movs	r3, #1
 800bacc:	eba0 0009 	sub.w	r0, r0, r9
 800bad0:	fa03 f000 	lsl.w	r0, r3, r0
 800bad4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bad6:	4318      	orrs	r0, r3
 800bad8:	9041      	str	r0, [sp, #260]	; 0x104
 800bada:	4655      	mov	r5, sl
 800badc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bae0:	2b78      	cmp	r3, #120	; 0x78
 800bae2:	d806      	bhi.n	800baf2 <__ssvfiscanf_r+0xee>
 800bae4:	2b57      	cmp	r3, #87	; 0x57
 800bae6:	d810      	bhi.n	800bb0a <__ssvfiscanf_r+0x106>
 800bae8:	2b25      	cmp	r3, #37	; 0x25
 800baea:	d0c6      	beq.n	800ba7a <__ssvfiscanf_r+0x76>
 800baec:	d856      	bhi.n	800bb9c <__ssvfiscanf_r+0x198>
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d064      	beq.n	800bbbc <__ssvfiscanf_r+0x1b8>
 800baf2:	2303      	movs	r3, #3
 800baf4:	9347      	str	r3, [sp, #284]	; 0x11c
 800baf6:	230a      	movs	r3, #10
 800baf8:	9342      	str	r3, [sp, #264]	; 0x108
 800bafa:	e071      	b.n	800bbe0 <__ssvfiscanf_r+0x1dc>
 800bafc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bafe:	fb02 1103 	mla	r1, r2, r3, r1
 800bb02:	3930      	subs	r1, #48	; 0x30
 800bb04:	9143      	str	r1, [sp, #268]	; 0x10c
 800bb06:	4655      	mov	r5, sl
 800bb08:	e7d3      	b.n	800bab2 <__ssvfiscanf_r+0xae>
 800bb0a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800bb0e:	2a20      	cmp	r2, #32
 800bb10:	d8ef      	bhi.n	800baf2 <__ssvfiscanf_r+0xee>
 800bb12:	a101      	add	r1, pc, #4	; (adr r1, 800bb18 <__ssvfiscanf_r+0x114>)
 800bb14:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bb18:	0800bbcb 	.word	0x0800bbcb
 800bb1c:	0800baf3 	.word	0x0800baf3
 800bb20:	0800baf3 	.word	0x0800baf3
 800bb24:	0800bc29 	.word	0x0800bc29
 800bb28:	0800baf3 	.word	0x0800baf3
 800bb2c:	0800baf3 	.word	0x0800baf3
 800bb30:	0800baf3 	.word	0x0800baf3
 800bb34:	0800baf3 	.word	0x0800baf3
 800bb38:	0800baf3 	.word	0x0800baf3
 800bb3c:	0800baf3 	.word	0x0800baf3
 800bb40:	0800baf3 	.word	0x0800baf3
 800bb44:	0800bc3f 	.word	0x0800bc3f
 800bb48:	0800bc15 	.word	0x0800bc15
 800bb4c:	0800bba3 	.word	0x0800bba3
 800bb50:	0800bba3 	.word	0x0800bba3
 800bb54:	0800bba3 	.word	0x0800bba3
 800bb58:	0800baf3 	.word	0x0800baf3
 800bb5c:	0800bc19 	.word	0x0800bc19
 800bb60:	0800baf3 	.word	0x0800baf3
 800bb64:	0800baf3 	.word	0x0800baf3
 800bb68:	0800baf3 	.word	0x0800baf3
 800bb6c:	0800baf3 	.word	0x0800baf3
 800bb70:	0800bc4f 	.word	0x0800bc4f
 800bb74:	0800bc21 	.word	0x0800bc21
 800bb78:	0800bbc3 	.word	0x0800bbc3
 800bb7c:	0800baf3 	.word	0x0800baf3
 800bb80:	0800baf3 	.word	0x0800baf3
 800bb84:	0800bc4b 	.word	0x0800bc4b
 800bb88:	0800baf3 	.word	0x0800baf3
 800bb8c:	0800bc15 	.word	0x0800bc15
 800bb90:	0800baf3 	.word	0x0800baf3
 800bb94:	0800baf3 	.word	0x0800baf3
 800bb98:	0800bbcb 	.word	0x0800bbcb
 800bb9c:	3b45      	subs	r3, #69	; 0x45
 800bb9e:	2b02      	cmp	r3, #2
 800bba0:	d8a7      	bhi.n	800baf2 <__ssvfiscanf_r+0xee>
 800bba2:	2305      	movs	r3, #5
 800bba4:	e01b      	b.n	800bbde <__ssvfiscanf_r+0x1da>
 800bba6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bba8:	4621      	mov	r1, r4
 800bbaa:	4630      	mov	r0, r6
 800bbac:	4798      	blx	r3
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	f43f af68 	beq.w	800ba84 <__ssvfiscanf_r+0x80>
 800bbb4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bbb6:	2800      	cmp	r0, #0
 800bbb8:	f040 808d 	bne.w	800bcd6 <__ssvfiscanf_r+0x2d2>
 800bbbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc0:	e08f      	b.n	800bce2 <__ssvfiscanf_r+0x2de>
 800bbc2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bbc4:	f042 0220 	orr.w	r2, r2, #32
 800bbc8:	9241      	str	r2, [sp, #260]	; 0x104
 800bbca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bbcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bbd0:	9241      	str	r2, [sp, #260]	; 0x104
 800bbd2:	2210      	movs	r2, #16
 800bbd4:	2b6f      	cmp	r3, #111	; 0x6f
 800bbd6:	9242      	str	r2, [sp, #264]	; 0x108
 800bbd8:	bf34      	ite	cc
 800bbda:	2303      	movcc	r3, #3
 800bbdc:	2304      	movcs	r3, #4
 800bbde:	9347      	str	r3, [sp, #284]	; 0x11c
 800bbe0:	6863      	ldr	r3, [r4, #4]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	dd42      	ble.n	800bc6c <__ssvfiscanf_r+0x268>
 800bbe6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bbe8:	0659      	lsls	r1, r3, #25
 800bbea:	d404      	bmi.n	800bbf6 <__ssvfiscanf_r+0x1f2>
 800bbec:	6823      	ldr	r3, [r4, #0]
 800bbee:	781a      	ldrb	r2, [r3, #0]
 800bbf0:	5cba      	ldrb	r2, [r7, r2]
 800bbf2:	0712      	lsls	r2, r2, #28
 800bbf4:	d441      	bmi.n	800bc7a <__ssvfiscanf_r+0x276>
 800bbf6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bbf8:	2b02      	cmp	r3, #2
 800bbfa:	dc50      	bgt.n	800bc9e <__ssvfiscanf_r+0x29a>
 800bbfc:	466b      	mov	r3, sp
 800bbfe:	4622      	mov	r2, r4
 800bc00:	a941      	add	r1, sp, #260	; 0x104
 800bc02:	4630      	mov	r0, r6
 800bc04:	f000 f876 	bl	800bcf4 <_scanf_chars>
 800bc08:	2801      	cmp	r0, #1
 800bc0a:	d06e      	beq.n	800bcea <__ssvfiscanf_r+0x2e6>
 800bc0c:	2802      	cmp	r0, #2
 800bc0e:	f47f af20 	bne.w	800ba52 <__ssvfiscanf_r+0x4e>
 800bc12:	e7cf      	b.n	800bbb4 <__ssvfiscanf_r+0x1b0>
 800bc14:	220a      	movs	r2, #10
 800bc16:	e7dd      	b.n	800bbd4 <__ssvfiscanf_r+0x1d0>
 800bc18:	2300      	movs	r3, #0
 800bc1a:	9342      	str	r3, [sp, #264]	; 0x108
 800bc1c:	2303      	movs	r3, #3
 800bc1e:	e7de      	b.n	800bbde <__ssvfiscanf_r+0x1da>
 800bc20:	2308      	movs	r3, #8
 800bc22:	9342      	str	r3, [sp, #264]	; 0x108
 800bc24:	2304      	movs	r3, #4
 800bc26:	e7da      	b.n	800bbde <__ssvfiscanf_r+0x1da>
 800bc28:	4629      	mov	r1, r5
 800bc2a:	4640      	mov	r0, r8
 800bc2c:	f000 f9e0 	bl	800bff0 <__sccl>
 800bc30:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bc32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc36:	9341      	str	r3, [sp, #260]	; 0x104
 800bc38:	4605      	mov	r5, r0
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	e7cf      	b.n	800bbde <__ssvfiscanf_r+0x1da>
 800bc3e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bc40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc44:	9341      	str	r3, [sp, #260]	; 0x104
 800bc46:	2300      	movs	r3, #0
 800bc48:	e7c9      	b.n	800bbde <__ssvfiscanf_r+0x1da>
 800bc4a:	2302      	movs	r3, #2
 800bc4c:	e7c7      	b.n	800bbde <__ssvfiscanf_r+0x1da>
 800bc4e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800bc50:	06c3      	lsls	r3, r0, #27
 800bc52:	f53f aefe 	bmi.w	800ba52 <__ssvfiscanf_r+0x4e>
 800bc56:	9b00      	ldr	r3, [sp, #0]
 800bc58:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bc5a:	1d19      	adds	r1, r3, #4
 800bc5c:	9100      	str	r1, [sp, #0]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f010 0f01 	tst.w	r0, #1
 800bc64:	bf14      	ite	ne
 800bc66:	801a      	strhne	r2, [r3, #0]
 800bc68:	601a      	streq	r2, [r3, #0]
 800bc6a:	e6f2      	b.n	800ba52 <__ssvfiscanf_r+0x4e>
 800bc6c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bc6e:	4621      	mov	r1, r4
 800bc70:	4630      	mov	r0, r6
 800bc72:	4798      	blx	r3
 800bc74:	2800      	cmp	r0, #0
 800bc76:	d0b6      	beq.n	800bbe6 <__ssvfiscanf_r+0x1e2>
 800bc78:	e79c      	b.n	800bbb4 <__ssvfiscanf_r+0x1b0>
 800bc7a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bc7c:	3201      	adds	r2, #1
 800bc7e:	9245      	str	r2, [sp, #276]	; 0x114
 800bc80:	6862      	ldr	r2, [r4, #4]
 800bc82:	3a01      	subs	r2, #1
 800bc84:	2a00      	cmp	r2, #0
 800bc86:	6062      	str	r2, [r4, #4]
 800bc88:	dd02      	ble.n	800bc90 <__ssvfiscanf_r+0x28c>
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	6023      	str	r3, [r4, #0]
 800bc8e:	e7ad      	b.n	800bbec <__ssvfiscanf_r+0x1e8>
 800bc90:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bc92:	4621      	mov	r1, r4
 800bc94:	4630      	mov	r0, r6
 800bc96:	4798      	blx	r3
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	d0a7      	beq.n	800bbec <__ssvfiscanf_r+0x1e8>
 800bc9c:	e78a      	b.n	800bbb4 <__ssvfiscanf_r+0x1b0>
 800bc9e:	2b04      	cmp	r3, #4
 800bca0:	dc0e      	bgt.n	800bcc0 <__ssvfiscanf_r+0x2bc>
 800bca2:	466b      	mov	r3, sp
 800bca4:	4622      	mov	r2, r4
 800bca6:	a941      	add	r1, sp, #260	; 0x104
 800bca8:	4630      	mov	r0, r6
 800bcaa:	f000 f87d 	bl	800bda8 <_scanf_i>
 800bcae:	e7ab      	b.n	800bc08 <__ssvfiscanf_r+0x204>
 800bcb0:	0800b951 	.word	0x0800b951
 800bcb4:	0800b9cb 	.word	0x0800b9cb
 800bcb8:	0800cd91 	.word	0x0800cd91
 800bcbc:	0800d0fa 	.word	0x0800d0fa
 800bcc0:	4b0b      	ldr	r3, [pc, #44]	; (800bcf0 <__ssvfiscanf_r+0x2ec>)
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	f43f aec5 	beq.w	800ba52 <__ssvfiscanf_r+0x4e>
 800bcc8:	466b      	mov	r3, sp
 800bcca:	4622      	mov	r2, r4
 800bccc:	a941      	add	r1, sp, #260	; 0x104
 800bcce:	4630      	mov	r0, r6
 800bcd0:	f7fc fb66 	bl	80083a0 <_scanf_float>
 800bcd4:	e798      	b.n	800bc08 <__ssvfiscanf_r+0x204>
 800bcd6:	89a3      	ldrh	r3, [r4, #12]
 800bcd8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bcdc:	bf18      	it	ne
 800bcde:	f04f 30ff 	movne.w	r0, #4294967295
 800bce2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800bce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcea:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bcec:	e7f9      	b.n	800bce2 <__ssvfiscanf_r+0x2de>
 800bcee:	bf00      	nop
 800bcf0:	080083a1 	.word	0x080083a1

0800bcf4 <_scanf_chars>:
 800bcf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcf8:	4615      	mov	r5, r2
 800bcfa:	688a      	ldr	r2, [r1, #8]
 800bcfc:	4680      	mov	r8, r0
 800bcfe:	460c      	mov	r4, r1
 800bd00:	b932      	cbnz	r2, 800bd10 <_scanf_chars+0x1c>
 800bd02:	698a      	ldr	r2, [r1, #24]
 800bd04:	2a00      	cmp	r2, #0
 800bd06:	bf0c      	ite	eq
 800bd08:	2201      	moveq	r2, #1
 800bd0a:	f04f 32ff 	movne.w	r2, #4294967295
 800bd0e:	608a      	str	r2, [r1, #8]
 800bd10:	6822      	ldr	r2, [r4, #0]
 800bd12:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800bda4 <_scanf_chars+0xb0>
 800bd16:	06d1      	lsls	r1, r2, #27
 800bd18:	bf5f      	itttt	pl
 800bd1a:	681a      	ldrpl	r2, [r3, #0]
 800bd1c:	1d11      	addpl	r1, r2, #4
 800bd1e:	6019      	strpl	r1, [r3, #0]
 800bd20:	6816      	ldrpl	r6, [r2, #0]
 800bd22:	2700      	movs	r7, #0
 800bd24:	69a0      	ldr	r0, [r4, #24]
 800bd26:	b188      	cbz	r0, 800bd4c <_scanf_chars+0x58>
 800bd28:	2801      	cmp	r0, #1
 800bd2a:	d107      	bne.n	800bd3c <_scanf_chars+0x48>
 800bd2c:	682a      	ldr	r2, [r5, #0]
 800bd2e:	7811      	ldrb	r1, [r2, #0]
 800bd30:	6962      	ldr	r2, [r4, #20]
 800bd32:	5c52      	ldrb	r2, [r2, r1]
 800bd34:	b952      	cbnz	r2, 800bd4c <_scanf_chars+0x58>
 800bd36:	2f00      	cmp	r7, #0
 800bd38:	d031      	beq.n	800bd9e <_scanf_chars+0xaa>
 800bd3a:	e022      	b.n	800bd82 <_scanf_chars+0x8e>
 800bd3c:	2802      	cmp	r0, #2
 800bd3e:	d120      	bne.n	800bd82 <_scanf_chars+0x8e>
 800bd40:	682b      	ldr	r3, [r5, #0]
 800bd42:	781b      	ldrb	r3, [r3, #0]
 800bd44:	f813 3009 	ldrb.w	r3, [r3, r9]
 800bd48:	071b      	lsls	r3, r3, #28
 800bd4a:	d41a      	bmi.n	800bd82 <_scanf_chars+0x8e>
 800bd4c:	6823      	ldr	r3, [r4, #0]
 800bd4e:	06da      	lsls	r2, r3, #27
 800bd50:	bf5e      	ittt	pl
 800bd52:	682b      	ldrpl	r3, [r5, #0]
 800bd54:	781b      	ldrbpl	r3, [r3, #0]
 800bd56:	f806 3b01 	strbpl.w	r3, [r6], #1
 800bd5a:	682a      	ldr	r2, [r5, #0]
 800bd5c:	686b      	ldr	r3, [r5, #4]
 800bd5e:	3201      	adds	r2, #1
 800bd60:	602a      	str	r2, [r5, #0]
 800bd62:	68a2      	ldr	r2, [r4, #8]
 800bd64:	3b01      	subs	r3, #1
 800bd66:	3a01      	subs	r2, #1
 800bd68:	606b      	str	r3, [r5, #4]
 800bd6a:	3701      	adds	r7, #1
 800bd6c:	60a2      	str	r2, [r4, #8]
 800bd6e:	b142      	cbz	r2, 800bd82 <_scanf_chars+0x8e>
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	dcd7      	bgt.n	800bd24 <_scanf_chars+0x30>
 800bd74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bd78:	4629      	mov	r1, r5
 800bd7a:	4640      	mov	r0, r8
 800bd7c:	4798      	blx	r3
 800bd7e:	2800      	cmp	r0, #0
 800bd80:	d0d0      	beq.n	800bd24 <_scanf_chars+0x30>
 800bd82:	6823      	ldr	r3, [r4, #0]
 800bd84:	f013 0310 	ands.w	r3, r3, #16
 800bd88:	d105      	bne.n	800bd96 <_scanf_chars+0xa2>
 800bd8a:	68e2      	ldr	r2, [r4, #12]
 800bd8c:	3201      	adds	r2, #1
 800bd8e:	60e2      	str	r2, [r4, #12]
 800bd90:	69a2      	ldr	r2, [r4, #24]
 800bd92:	b102      	cbz	r2, 800bd96 <_scanf_chars+0xa2>
 800bd94:	7033      	strb	r3, [r6, #0]
 800bd96:	6923      	ldr	r3, [r4, #16]
 800bd98:	443b      	add	r3, r7
 800bd9a:	6123      	str	r3, [r4, #16]
 800bd9c:	2000      	movs	r0, #0
 800bd9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bda2:	bf00      	nop
 800bda4:	0800cd91 	.word	0x0800cd91

0800bda8 <_scanf_i>:
 800bda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdac:	4698      	mov	r8, r3
 800bdae:	4b76      	ldr	r3, [pc, #472]	; (800bf88 <_scanf_i+0x1e0>)
 800bdb0:	460c      	mov	r4, r1
 800bdb2:	4682      	mov	sl, r0
 800bdb4:	4616      	mov	r6, r2
 800bdb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bdba:	b087      	sub	sp, #28
 800bdbc:	ab03      	add	r3, sp, #12
 800bdbe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bdc2:	4b72      	ldr	r3, [pc, #456]	; (800bf8c <_scanf_i+0x1e4>)
 800bdc4:	69a1      	ldr	r1, [r4, #24]
 800bdc6:	4a72      	ldr	r2, [pc, #456]	; (800bf90 <_scanf_i+0x1e8>)
 800bdc8:	2903      	cmp	r1, #3
 800bdca:	bf18      	it	ne
 800bdcc:	461a      	movne	r2, r3
 800bdce:	68a3      	ldr	r3, [r4, #8]
 800bdd0:	9201      	str	r2, [sp, #4]
 800bdd2:	1e5a      	subs	r2, r3, #1
 800bdd4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bdd8:	bf88      	it	hi
 800bdda:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bdde:	4627      	mov	r7, r4
 800bde0:	bf82      	ittt	hi
 800bde2:	eb03 0905 	addhi.w	r9, r3, r5
 800bde6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bdea:	60a3      	strhi	r3, [r4, #8]
 800bdec:	f857 3b1c 	ldr.w	r3, [r7], #28
 800bdf0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800bdf4:	bf98      	it	ls
 800bdf6:	f04f 0900 	movls.w	r9, #0
 800bdfa:	6023      	str	r3, [r4, #0]
 800bdfc:	463d      	mov	r5, r7
 800bdfe:	f04f 0b00 	mov.w	fp, #0
 800be02:	6831      	ldr	r1, [r6, #0]
 800be04:	ab03      	add	r3, sp, #12
 800be06:	7809      	ldrb	r1, [r1, #0]
 800be08:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800be0c:	2202      	movs	r2, #2
 800be0e:	f7f4 f9e7 	bl	80001e0 <memchr>
 800be12:	b328      	cbz	r0, 800be60 <_scanf_i+0xb8>
 800be14:	f1bb 0f01 	cmp.w	fp, #1
 800be18:	d159      	bne.n	800bece <_scanf_i+0x126>
 800be1a:	6862      	ldr	r2, [r4, #4]
 800be1c:	b92a      	cbnz	r2, 800be2a <_scanf_i+0x82>
 800be1e:	6822      	ldr	r2, [r4, #0]
 800be20:	2308      	movs	r3, #8
 800be22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be26:	6063      	str	r3, [r4, #4]
 800be28:	6022      	str	r2, [r4, #0]
 800be2a:	6822      	ldr	r2, [r4, #0]
 800be2c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800be30:	6022      	str	r2, [r4, #0]
 800be32:	68a2      	ldr	r2, [r4, #8]
 800be34:	1e51      	subs	r1, r2, #1
 800be36:	60a1      	str	r1, [r4, #8]
 800be38:	b192      	cbz	r2, 800be60 <_scanf_i+0xb8>
 800be3a:	6832      	ldr	r2, [r6, #0]
 800be3c:	1c51      	adds	r1, r2, #1
 800be3e:	6031      	str	r1, [r6, #0]
 800be40:	7812      	ldrb	r2, [r2, #0]
 800be42:	f805 2b01 	strb.w	r2, [r5], #1
 800be46:	6872      	ldr	r2, [r6, #4]
 800be48:	3a01      	subs	r2, #1
 800be4a:	2a00      	cmp	r2, #0
 800be4c:	6072      	str	r2, [r6, #4]
 800be4e:	dc07      	bgt.n	800be60 <_scanf_i+0xb8>
 800be50:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800be54:	4631      	mov	r1, r6
 800be56:	4650      	mov	r0, sl
 800be58:	4790      	blx	r2
 800be5a:	2800      	cmp	r0, #0
 800be5c:	f040 8085 	bne.w	800bf6a <_scanf_i+0x1c2>
 800be60:	f10b 0b01 	add.w	fp, fp, #1
 800be64:	f1bb 0f03 	cmp.w	fp, #3
 800be68:	d1cb      	bne.n	800be02 <_scanf_i+0x5a>
 800be6a:	6863      	ldr	r3, [r4, #4]
 800be6c:	b90b      	cbnz	r3, 800be72 <_scanf_i+0xca>
 800be6e:	230a      	movs	r3, #10
 800be70:	6063      	str	r3, [r4, #4]
 800be72:	6863      	ldr	r3, [r4, #4]
 800be74:	4947      	ldr	r1, [pc, #284]	; (800bf94 <_scanf_i+0x1ec>)
 800be76:	6960      	ldr	r0, [r4, #20]
 800be78:	1ac9      	subs	r1, r1, r3
 800be7a:	f000 f8b9 	bl	800bff0 <__sccl>
 800be7e:	f04f 0b00 	mov.w	fp, #0
 800be82:	68a3      	ldr	r3, [r4, #8]
 800be84:	6822      	ldr	r2, [r4, #0]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d03d      	beq.n	800bf06 <_scanf_i+0x15e>
 800be8a:	6831      	ldr	r1, [r6, #0]
 800be8c:	6960      	ldr	r0, [r4, #20]
 800be8e:	f891 c000 	ldrb.w	ip, [r1]
 800be92:	f810 000c 	ldrb.w	r0, [r0, ip]
 800be96:	2800      	cmp	r0, #0
 800be98:	d035      	beq.n	800bf06 <_scanf_i+0x15e>
 800be9a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800be9e:	d124      	bne.n	800beea <_scanf_i+0x142>
 800bea0:	0510      	lsls	r0, r2, #20
 800bea2:	d522      	bpl.n	800beea <_scanf_i+0x142>
 800bea4:	f10b 0b01 	add.w	fp, fp, #1
 800bea8:	f1b9 0f00 	cmp.w	r9, #0
 800beac:	d003      	beq.n	800beb6 <_scanf_i+0x10e>
 800beae:	3301      	adds	r3, #1
 800beb0:	f109 39ff 	add.w	r9, r9, #4294967295
 800beb4:	60a3      	str	r3, [r4, #8]
 800beb6:	6873      	ldr	r3, [r6, #4]
 800beb8:	3b01      	subs	r3, #1
 800beba:	2b00      	cmp	r3, #0
 800bebc:	6073      	str	r3, [r6, #4]
 800bebe:	dd1b      	ble.n	800bef8 <_scanf_i+0x150>
 800bec0:	6833      	ldr	r3, [r6, #0]
 800bec2:	3301      	adds	r3, #1
 800bec4:	6033      	str	r3, [r6, #0]
 800bec6:	68a3      	ldr	r3, [r4, #8]
 800bec8:	3b01      	subs	r3, #1
 800beca:	60a3      	str	r3, [r4, #8]
 800becc:	e7d9      	b.n	800be82 <_scanf_i+0xda>
 800bece:	f1bb 0f02 	cmp.w	fp, #2
 800bed2:	d1ae      	bne.n	800be32 <_scanf_i+0x8a>
 800bed4:	6822      	ldr	r2, [r4, #0]
 800bed6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800beda:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bede:	d1bf      	bne.n	800be60 <_scanf_i+0xb8>
 800bee0:	2310      	movs	r3, #16
 800bee2:	6063      	str	r3, [r4, #4]
 800bee4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bee8:	e7a2      	b.n	800be30 <_scanf_i+0x88>
 800beea:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800beee:	6022      	str	r2, [r4, #0]
 800bef0:	780b      	ldrb	r3, [r1, #0]
 800bef2:	f805 3b01 	strb.w	r3, [r5], #1
 800bef6:	e7de      	b.n	800beb6 <_scanf_i+0x10e>
 800bef8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800befc:	4631      	mov	r1, r6
 800befe:	4650      	mov	r0, sl
 800bf00:	4798      	blx	r3
 800bf02:	2800      	cmp	r0, #0
 800bf04:	d0df      	beq.n	800bec6 <_scanf_i+0x11e>
 800bf06:	6823      	ldr	r3, [r4, #0]
 800bf08:	05db      	lsls	r3, r3, #23
 800bf0a:	d50d      	bpl.n	800bf28 <_scanf_i+0x180>
 800bf0c:	42bd      	cmp	r5, r7
 800bf0e:	d909      	bls.n	800bf24 <_scanf_i+0x17c>
 800bf10:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bf14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bf18:	4632      	mov	r2, r6
 800bf1a:	4650      	mov	r0, sl
 800bf1c:	4798      	blx	r3
 800bf1e:	f105 39ff 	add.w	r9, r5, #4294967295
 800bf22:	464d      	mov	r5, r9
 800bf24:	42bd      	cmp	r5, r7
 800bf26:	d02d      	beq.n	800bf84 <_scanf_i+0x1dc>
 800bf28:	6822      	ldr	r2, [r4, #0]
 800bf2a:	f012 0210 	ands.w	r2, r2, #16
 800bf2e:	d113      	bne.n	800bf58 <_scanf_i+0x1b0>
 800bf30:	702a      	strb	r2, [r5, #0]
 800bf32:	6863      	ldr	r3, [r4, #4]
 800bf34:	9e01      	ldr	r6, [sp, #4]
 800bf36:	4639      	mov	r1, r7
 800bf38:	4650      	mov	r0, sl
 800bf3a:	47b0      	blx	r6
 800bf3c:	6821      	ldr	r1, [r4, #0]
 800bf3e:	f8d8 3000 	ldr.w	r3, [r8]
 800bf42:	f011 0f20 	tst.w	r1, #32
 800bf46:	d013      	beq.n	800bf70 <_scanf_i+0x1c8>
 800bf48:	1d1a      	adds	r2, r3, #4
 800bf4a:	f8c8 2000 	str.w	r2, [r8]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	6018      	str	r0, [r3, #0]
 800bf52:	68e3      	ldr	r3, [r4, #12]
 800bf54:	3301      	adds	r3, #1
 800bf56:	60e3      	str	r3, [r4, #12]
 800bf58:	1bed      	subs	r5, r5, r7
 800bf5a:	44ab      	add	fp, r5
 800bf5c:	6925      	ldr	r5, [r4, #16]
 800bf5e:	445d      	add	r5, fp
 800bf60:	6125      	str	r5, [r4, #16]
 800bf62:	2000      	movs	r0, #0
 800bf64:	b007      	add	sp, #28
 800bf66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf6a:	f04f 0b00 	mov.w	fp, #0
 800bf6e:	e7ca      	b.n	800bf06 <_scanf_i+0x15e>
 800bf70:	1d1a      	adds	r2, r3, #4
 800bf72:	f8c8 2000 	str.w	r2, [r8]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f011 0f01 	tst.w	r1, #1
 800bf7c:	bf14      	ite	ne
 800bf7e:	8018      	strhne	r0, [r3, #0]
 800bf80:	6018      	streq	r0, [r3, #0]
 800bf82:	e7e6      	b.n	800bf52 <_scanf_i+0x1aa>
 800bf84:	2001      	movs	r0, #1
 800bf86:	e7ed      	b.n	800bf64 <_scanf_i+0x1bc>
 800bf88:	0800ccd4 	.word	0x0800ccd4
 800bf8c:	0800c16d 	.word	0x0800c16d
 800bf90:	0800968d 	.word	0x0800968d
 800bf94:	0800d11e 	.word	0x0800d11e

0800bf98 <_read_r>:
 800bf98:	b538      	push	{r3, r4, r5, lr}
 800bf9a:	4d07      	ldr	r5, [pc, #28]	; (800bfb8 <_read_r+0x20>)
 800bf9c:	4604      	mov	r4, r0
 800bf9e:	4608      	mov	r0, r1
 800bfa0:	4611      	mov	r1, r2
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	602a      	str	r2, [r5, #0]
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	f7f6 ff1e 	bl	8002de8 <_read>
 800bfac:	1c43      	adds	r3, r0, #1
 800bfae:	d102      	bne.n	800bfb6 <_read_r+0x1e>
 800bfb0:	682b      	ldr	r3, [r5, #0]
 800bfb2:	b103      	cbz	r3, 800bfb6 <_read_r+0x1e>
 800bfb4:	6023      	str	r3, [r4, #0]
 800bfb6:	bd38      	pop	{r3, r4, r5, pc}
 800bfb8:	20000920 	.word	0x20000920
 800bfbc:	00000000 	.word	0x00000000

0800bfc0 <nan>:
 800bfc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bfc8 <nan+0x8>
 800bfc4:	4770      	bx	lr
 800bfc6:	bf00      	nop
 800bfc8:	00000000 	.word	0x00000000
 800bfcc:	7ff80000 	.word	0x7ff80000

0800bfd0 <_sbrk_r>:
 800bfd0:	b538      	push	{r3, r4, r5, lr}
 800bfd2:	4d06      	ldr	r5, [pc, #24]	; (800bfec <_sbrk_r+0x1c>)
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	4604      	mov	r4, r0
 800bfd8:	4608      	mov	r0, r1
 800bfda:	602b      	str	r3, [r5, #0]
 800bfdc:	f7f6 ff72 	bl	8002ec4 <_sbrk>
 800bfe0:	1c43      	adds	r3, r0, #1
 800bfe2:	d102      	bne.n	800bfea <_sbrk_r+0x1a>
 800bfe4:	682b      	ldr	r3, [r5, #0]
 800bfe6:	b103      	cbz	r3, 800bfea <_sbrk_r+0x1a>
 800bfe8:	6023      	str	r3, [r4, #0]
 800bfea:	bd38      	pop	{r3, r4, r5, pc}
 800bfec:	20000920 	.word	0x20000920

0800bff0 <__sccl>:
 800bff0:	b570      	push	{r4, r5, r6, lr}
 800bff2:	780b      	ldrb	r3, [r1, #0]
 800bff4:	4604      	mov	r4, r0
 800bff6:	2b5e      	cmp	r3, #94	; 0x5e
 800bff8:	bf0b      	itete	eq
 800bffa:	784b      	ldrbeq	r3, [r1, #1]
 800bffc:	1c48      	addne	r0, r1, #1
 800bffe:	1c88      	addeq	r0, r1, #2
 800c000:	2200      	movne	r2, #0
 800c002:	bf08      	it	eq
 800c004:	2201      	moveq	r2, #1
 800c006:	1e61      	subs	r1, r4, #1
 800c008:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c00c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c010:	42a9      	cmp	r1, r5
 800c012:	d1fb      	bne.n	800c00c <__sccl+0x1c>
 800c014:	b90b      	cbnz	r3, 800c01a <__sccl+0x2a>
 800c016:	3801      	subs	r0, #1
 800c018:	bd70      	pop	{r4, r5, r6, pc}
 800c01a:	f082 0201 	eor.w	r2, r2, #1
 800c01e:	54e2      	strb	r2, [r4, r3]
 800c020:	4605      	mov	r5, r0
 800c022:	4628      	mov	r0, r5
 800c024:	f810 1b01 	ldrb.w	r1, [r0], #1
 800c028:	292d      	cmp	r1, #45	; 0x2d
 800c02a:	d006      	beq.n	800c03a <__sccl+0x4a>
 800c02c:	295d      	cmp	r1, #93	; 0x5d
 800c02e:	d0f3      	beq.n	800c018 <__sccl+0x28>
 800c030:	b909      	cbnz	r1, 800c036 <__sccl+0x46>
 800c032:	4628      	mov	r0, r5
 800c034:	e7f0      	b.n	800c018 <__sccl+0x28>
 800c036:	460b      	mov	r3, r1
 800c038:	e7f1      	b.n	800c01e <__sccl+0x2e>
 800c03a:	786e      	ldrb	r6, [r5, #1]
 800c03c:	2e5d      	cmp	r6, #93	; 0x5d
 800c03e:	d0fa      	beq.n	800c036 <__sccl+0x46>
 800c040:	42b3      	cmp	r3, r6
 800c042:	dcf8      	bgt.n	800c036 <__sccl+0x46>
 800c044:	3502      	adds	r5, #2
 800c046:	4619      	mov	r1, r3
 800c048:	3101      	adds	r1, #1
 800c04a:	428e      	cmp	r6, r1
 800c04c:	5462      	strb	r2, [r4, r1]
 800c04e:	dcfb      	bgt.n	800c048 <__sccl+0x58>
 800c050:	1af1      	subs	r1, r6, r3
 800c052:	3901      	subs	r1, #1
 800c054:	1c58      	adds	r0, r3, #1
 800c056:	42b3      	cmp	r3, r6
 800c058:	bfa8      	it	ge
 800c05a:	2100      	movge	r1, #0
 800c05c:	1843      	adds	r3, r0, r1
 800c05e:	e7e0      	b.n	800c022 <__sccl+0x32>

0800c060 <strncmp>:
 800c060:	b510      	push	{r4, lr}
 800c062:	b17a      	cbz	r2, 800c084 <strncmp+0x24>
 800c064:	4603      	mov	r3, r0
 800c066:	3901      	subs	r1, #1
 800c068:	1884      	adds	r4, r0, r2
 800c06a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c06e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c072:	4290      	cmp	r0, r2
 800c074:	d101      	bne.n	800c07a <strncmp+0x1a>
 800c076:	42a3      	cmp	r3, r4
 800c078:	d101      	bne.n	800c07e <strncmp+0x1e>
 800c07a:	1a80      	subs	r0, r0, r2
 800c07c:	bd10      	pop	{r4, pc}
 800c07e:	2800      	cmp	r0, #0
 800c080:	d1f3      	bne.n	800c06a <strncmp+0xa>
 800c082:	e7fa      	b.n	800c07a <strncmp+0x1a>
 800c084:	4610      	mov	r0, r2
 800c086:	e7f9      	b.n	800c07c <strncmp+0x1c>

0800c088 <_strtoul_l.constprop.0>:
 800c088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c08c:	4f36      	ldr	r7, [pc, #216]	; (800c168 <_strtoul_l.constprop.0+0xe0>)
 800c08e:	4686      	mov	lr, r0
 800c090:	460d      	mov	r5, r1
 800c092:	4628      	mov	r0, r5
 800c094:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c098:	5de6      	ldrb	r6, [r4, r7]
 800c09a:	f016 0608 	ands.w	r6, r6, #8
 800c09e:	d1f8      	bne.n	800c092 <_strtoul_l.constprop.0+0xa>
 800c0a0:	2c2d      	cmp	r4, #45	; 0x2d
 800c0a2:	d12f      	bne.n	800c104 <_strtoul_l.constprop.0+0x7c>
 800c0a4:	782c      	ldrb	r4, [r5, #0]
 800c0a6:	2601      	movs	r6, #1
 800c0a8:	1c85      	adds	r5, r0, #2
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d057      	beq.n	800c15e <_strtoul_l.constprop.0+0xd6>
 800c0ae:	2b10      	cmp	r3, #16
 800c0b0:	d109      	bne.n	800c0c6 <_strtoul_l.constprop.0+0x3e>
 800c0b2:	2c30      	cmp	r4, #48	; 0x30
 800c0b4:	d107      	bne.n	800c0c6 <_strtoul_l.constprop.0+0x3e>
 800c0b6:	7828      	ldrb	r0, [r5, #0]
 800c0b8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c0bc:	2858      	cmp	r0, #88	; 0x58
 800c0be:	d149      	bne.n	800c154 <_strtoul_l.constprop.0+0xcc>
 800c0c0:	786c      	ldrb	r4, [r5, #1]
 800c0c2:	2310      	movs	r3, #16
 800c0c4:	3502      	adds	r5, #2
 800c0c6:	f04f 38ff 	mov.w	r8, #4294967295
 800c0ca:	2700      	movs	r7, #0
 800c0cc:	fbb8 f8f3 	udiv	r8, r8, r3
 800c0d0:	fb03 f908 	mul.w	r9, r3, r8
 800c0d4:	ea6f 0909 	mvn.w	r9, r9
 800c0d8:	4638      	mov	r0, r7
 800c0da:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c0de:	f1bc 0f09 	cmp.w	ip, #9
 800c0e2:	d814      	bhi.n	800c10e <_strtoul_l.constprop.0+0x86>
 800c0e4:	4664      	mov	r4, ip
 800c0e6:	42a3      	cmp	r3, r4
 800c0e8:	dd22      	ble.n	800c130 <_strtoul_l.constprop.0+0xa8>
 800c0ea:	2f00      	cmp	r7, #0
 800c0ec:	db1d      	blt.n	800c12a <_strtoul_l.constprop.0+0xa2>
 800c0ee:	4580      	cmp	r8, r0
 800c0f0:	d31b      	bcc.n	800c12a <_strtoul_l.constprop.0+0xa2>
 800c0f2:	d101      	bne.n	800c0f8 <_strtoul_l.constprop.0+0x70>
 800c0f4:	45a1      	cmp	r9, r4
 800c0f6:	db18      	blt.n	800c12a <_strtoul_l.constprop.0+0xa2>
 800c0f8:	fb00 4003 	mla	r0, r0, r3, r4
 800c0fc:	2701      	movs	r7, #1
 800c0fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c102:	e7ea      	b.n	800c0da <_strtoul_l.constprop.0+0x52>
 800c104:	2c2b      	cmp	r4, #43	; 0x2b
 800c106:	bf04      	itt	eq
 800c108:	782c      	ldrbeq	r4, [r5, #0]
 800c10a:	1c85      	addeq	r5, r0, #2
 800c10c:	e7cd      	b.n	800c0aa <_strtoul_l.constprop.0+0x22>
 800c10e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c112:	f1bc 0f19 	cmp.w	ip, #25
 800c116:	d801      	bhi.n	800c11c <_strtoul_l.constprop.0+0x94>
 800c118:	3c37      	subs	r4, #55	; 0x37
 800c11a:	e7e4      	b.n	800c0e6 <_strtoul_l.constprop.0+0x5e>
 800c11c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c120:	f1bc 0f19 	cmp.w	ip, #25
 800c124:	d804      	bhi.n	800c130 <_strtoul_l.constprop.0+0xa8>
 800c126:	3c57      	subs	r4, #87	; 0x57
 800c128:	e7dd      	b.n	800c0e6 <_strtoul_l.constprop.0+0x5e>
 800c12a:	f04f 37ff 	mov.w	r7, #4294967295
 800c12e:	e7e6      	b.n	800c0fe <_strtoul_l.constprop.0+0x76>
 800c130:	2f00      	cmp	r7, #0
 800c132:	da07      	bge.n	800c144 <_strtoul_l.constprop.0+0xbc>
 800c134:	2322      	movs	r3, #34	; 0x22
 800c136:	f8ce 3000 	str.w	r3, [lr]
 800c13a:	f04f 30ff 	mov.w	r0, #4294967295
 800c13e:	b932      	cbnz	r2, 800c14e <_strtoul_l.constprop.0+0xc6>
 800c140:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c144:	b106      	cbz	r6, 800c148 <_strtoul_l.constprop.0+0xc0>
 800c146:	4240      	negs	r0, r0
 800c148:	2a00      	cmp	r2, #0
 800c14a:	d0f9      	beq.n	800c140 <_strtoul_l.constprop.0+0xb8>
 800c14c:	b107      	cbz	r7, 800c150 <_strtoul_l.constprop.0+0xc8>
 800c14e:	1e69      	subs	r1, r5, #1
 800c150:	6011      	str	r1, [r2, #0]
 800c152:	e7f5      	b.n	800c140 <_strtoul_l.constprop.0+0xb8>
 800c154:	2430      	movs	r4, #48	; 0x30
 800c156:	2b00      	cmp	r3, #0
 800c158:	d1b5      	bne.n	800c0c6 <_strtoul_l.constprop.0+0x3e>
 800c15a:	2308      	movs	r3, #8
 800c15c:	e7b3      	b.n	800c0c6 <_strtoul_l.constprop.0+0x3e>
 800c15e:	2c30      	cmp	r4, #48	; 0x30
 800c160:	d0a9      	beq.n	800c0b6 <_strtoul_l.constprop.0+0x2e>
 800c162:	230a      	movs	r3, #10
 800c164:	e7af      	b.n	800c0c6 <_strtoul_l.constprop.0+0x3e>
 800c166:	bf00      	nop
 800c168:	0800cd91 	.word	0x0800cd91

0800c16c <_strtoul_r>:
 800c16c:	f7ff bf8c 	b.w	800c088 <_strtoul_l.constprop.0>

0800c170 <__submore>:
 800c170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c174:	460c      	mov	r4, r1
 800c176:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c178:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c17c:	4299      	cmp	r1, r3
 800c17e:	d11d      	bne.n	800c1bc <__submore+0x4c>
 800c180:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c184:	f7ff fa14 	bl	800b5b0 <_malloc_r>
 800c188:	b918      	cbnz	r0, 800c192 <__submore+0x22>
 800c18a:	f04f 30ff 	mov.w	r0, #4294967295
 800c18e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c192:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c196:	63a3      	str	r3, [r4, #56]	; 0x38
 800c198:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c19c:	6360      	str	r0, [r4, #52]	; 0x34
 800c19e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c1a2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c1a6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c1aa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c1ae:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c1b2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c1b6:	6020      	str	r0, [r4, #0]
 800c1b8:	2000      	movs	r0, #0
 800c1ba:	e7e8      	b.n	800c18e <__submore+0x1e>
 800c1bc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c1be:	0077      	lsls	r7, r6, #1
 800c1c0:	463a      	mov	r2, r7
 800c1c2:	f000 fa2d 	bl	800c620 <_realloc_r>
 800c1c6:	4605      	mov	r5, r0
 800c1c8:	2800      	cmp	r0, #0
 800c1ca:	d0de      	beq.n	800c18a <__submore+0x1a>
 800c1cc:	eb00 0806 	add.w	r8, r0, r6
 800c1d0:	4601      	mov	r1, r0
 800c1d2:	4632      	mov	r2, r6
 800c1d4:	4640      	mov	r0, r8
 800c1d6:	f7fe fc99 	bl	800ab0c <memcpy>
 800c1da:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c1de:	f8c4 8000 	str.w	r8, [r4]
 800c1e2:	e7e9      	b.n	800c1b8 <__submore+0x48>

0800c1e4 <__ascii_wctomb>:
 800c1e4:	b149      	cbz	r1, 800c1fa <__ascii_wctomb+0x16>
 800c1e6:	2aff      	cmp	r2, #255	; 0xff
 800c1e8:	bf85      	ittet	hi
 800c1ea:	238a      	movhi	r3, #138	; 0x8a
 800c1ec:	6003      	strhi	r3, [r0, #0]
 800c1ee:	700a      	strbls	r2, [r1, #0]
 800c1f0:	f04f 30ff 	movhi.w	r0, #4294967295
 800c1f4:	bf98      	it	ls
 800c1f6:	2001      	movls	r0, #1
 800c1f8:	4770      	bx	lr
 800c1fa:	4608      	mov	r0, r1
 800c1fc:	4770      	bx	lr
	...

0800c200 <__assert_func>:
 800c200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c202:	4614      	mov	r4, r2
 800c204:	461a      	mov	r2, r3
 800c206:	4b09      	ldr	r3, [pc, #36]	; (800c22c <__assert_func+0x2c>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4605      	mov	r5, r0
 800c20c:	68d8      	ldr	r0, [r3, #12]
 800c20e:	b14c      	cbz	r4, 800c224 <__assert_func+0x24>
 800c210:	4b07      	ldr	r3, [pc, #28]	; (800c230 <__assert_func+0x30>)
 800c212:	9100      	str	r1, [sp, #0]
 800c214:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c218:	4906      	ldr	r1, [pc, #24]	; (800c234 <__assert_func+0x34>)
 800c21a:	462b      	mov	r3, r5
 800c21c:	f000 f9a6 	bl	800c56c <fiprintf>
 800c220:	f000 fc46 	bl	800cab0 <abort>
 800c224:	4b04      	ldr	r3, [pc, #16]	; (800c238 <__assert_func+0x38>)
 800c226:	461c      	mov	r4, r3
 800c228:	e7f3      	b.n	800c212 <__assert_func+0x12>
 800c22a:	bf00      	nop
 800c22c:	200000f0 	.word	0x200000f0
 800c230:	0800d120 	.word	0x0800d120
 800c234:	0800d12d 	.word	0x0800d12d
 800c238:	0800d15b 	.word	0x0800d15b

0800c23c <__sflush_r>:
 800c23c:	898a      	ldrh	r2, [r1, #12]
 800c23e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c242:	4605      	mov	r5, r0
 800c244:	0710      	lsls	r0, r2, #28
 800c246:	460c      	mov	r4, r1
 800c248:	d458      	bmi.n	800c2fc <__sflush_r+0xc0>
 800c24a:	684b      	ldr	r3, [r1, #4]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	dc05      	bgt.n	800c25c <__sflush_r+0x20>
 800c250:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c252:	2b00      	cmp	r3, #0
 800c254:	dc02      	bgt.n	800c25c <__sflush_r+0x20>
 800c256:	2000      	movs	r0, #0
 800c258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c25c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c25e:	2e00      	cmp	r6, #0
 800c260:	d0f9      	beq.n	800c256 <__sflush_r+0x1a>
 800c262:	2300      	movs	r3, #0
 800c264:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c268:	682f      	ldr	r7, [r5, #0]
 800c26a:	602b      	str	r3, [r5, #0]
 800c26c:	d032      	beq.n	800c2d4 <__sflush_r+0x98>
 800c26e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c270:	89a3      	ldrh	r3, [r4, #12]
 800c272:	075a      	lsls	r2, r3, #29
 800c274:	d505      	bpl.n	800c282 <__sflush_r+0x46>
 800c276:	6863      	ldr	r3, [r4, #4]
 800c278:	1ac0      	subs	r0, r0, r3
 800c27a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c27c:	b10b      	cbz	r3, 800c282 <__sflush_r+0x46>
 800c27e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c280:	1ac0      	subs	r0, r0, r3
 800c282:	2300      	movs	r3, #0
 800c284:	4602      	mov	r2, r0
 800c286:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c288:	6a21      	ldr	r1, [r4, #32]
 800c28a:	4628      	mov	r0, r5
 800c28c:	47b0      	blx	r6
 800c28e:	1c43      	adds	r3, r0, #1
 800c290:	89a3      	ldrh	r3, [r4, #12]
 800c292:	d106      	bne.n	800c2a2 <__sflush_r+0x66>
 800c294:	6829      	ldr	r1, [r5, #0]
 800c296:	291d      	cmp	r1, #29
 800c298:	d82c      	bhi.n	800c2f4 <__sflush_r+0xb8>
 800c29a:	4a2a      	ldr	r2, [pc, #168]	; (800c344 <__sflush_r+0x108>)
 800c29c:	40ca      	lsrs	r2, r1
 800c29e:	07d6      	lsls	r6, r2, #31
 800c2a0:	d528      	bpl.n	800c2f4 <__sflush_r+0xb8>
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	6062      	str	r2, [r4, #4]
 800c2a6:	04d9      	lsls	r1, r3, #19
 800c2a8:	6922      	ldr	r2, [r4, #16]
 800c2aa:	6022      	str	r2, [r4, #0]
 800c2ac:	d504      	bpl.n	800c2b8 <__sflush_r+0x7c>
 800c2ae:	1c42      	adds	r2, r0, #1
 800c2b0:	d101      	bne.n	800c2b6 <__sflush_r+0x7a>
 800c2b2:	682b      	ldr	r3, [r5, #0]
 800c2b4:	b903      	cbnz	r3, 800c2b8 <__sflush_r+0x7c>
 800c2b6:	6560      	str	r0, [r4, #84]	; 0x54
 800c2b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2ba:	602f      	str	r7, [r5, #0]
 800c2bc:	2900      	cmp	r1, #0
 800c2be:	d0ca      	beq.n	800c256 <__sflush_r+0x1a>
 800c2c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2c4:	4299      	cmp	r1, r3
 800c2c6:	d002      	beq.n	800c2ce <__sflush_r+0x92>
 800c2c8:	4628      	mov	r0, r5
 800c2ca:	f7ff f905 	bl	800b4d8 <_free_r>
 800c2ce:	2000      	movs	r0, #0
 800c2d0:	6360      	str	r0, [r4, #52]	; 0x34
 800c2d2:	e7c1      	b.n	800c258 <__sflush_r+0x1c>
 800c2d4:	6a21      	ldr	r1, [r4, #32]
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	4628      	mov	r0, r5
 800c2da:	47b0      	blx	r6
 800c2dc:	1c41      	adds	r1, r0, #1
 800c2de:	d1c7      	bne.n	800c270 <__sflush_r+0x34>
 800c2e0:	682b      	ldr	r3, [r5, #0]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d0c4      	beq.n	800c270 <__sflush_r+0x34>
 800c2e6:	2b1d      	cmp	r3, #29
 800c2e8:	d001      	beq.n	800c2ee <__sflush_r+0xb2>
 800c2ea:	2b16      	cmp	r3, #22
 800c2ec:	d101      	bne.n	800c2f2 <__sflush_r+0xb6>
 800c2ee:	602f      	str	r7, [r5, #0]
 800c2f0:	e7b1      	b.n	800c256 <__sflush_r+0x1a>
 800c2f2:	89a3      	ldrh	r3, [r4, #12]
 800c2f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2f8:	81a3      	strh	r3, [r4, #12]
 800c2fa:	e7ad      	b.n	800c258 <__sflush_r+0x1c>
 800c2fc:	690f      	ldr	r7, [r1, #16]
 800c2fe:	2f00      	cmp	r7, #0
 800c300:	d0a9      	beq.n	800c256 <__sflush_r+0x1a>
 800c302:	0793      	lsls	r3, r2, #30
 800c304:	680e      	ldr	r6, [r1, #0]
 800c306:	bf08      	it	eq
 800c308:	694b      	ldreq	r3, [r1, #20]
 800c30a:	600f      	str	r7, [r1, #0]
 800c30c:	bf18      	it	ne
 800c30e:	2300      	movne	r3, #0
 800c310:	eba6 0807 	sub.w	r8, r6, r7
 800c314:	608b      	str	r3, [r1, #8]
 800c316:	f1b8 0f00 	cmp.w	r8, #0
 800c31a:	dd9c      	ble.n	800c256 <__sflush_r+0x1a>
 800c31c:	6a21      	ldr	r1, [r4, #32]
 800c31e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c320:	4643      	mov	r3, r8
 800c322:	463a      	mov	r2, r7
 800c324:	4628      	mov	r0, r5
 800c326:	47b0      	blx	r6
 800c328:	2800      	cmp	r0, #0
 800c32a:	dc06      	bgt.n	800c33a <__sflush_r+0xfe>
 800c32c:	89a3      	ldrh	r3, [r4, #12]
 800c32e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c332:	81a3      	strh	r3, [r4, #12]
 800c334:	f04f 30ff 	mov.w	r0, #4294967295
 800c338:	e78e      	b.n	800c258 <__sflush_r+0x1c>
 800c33a:	4407      	add	r7, r0
 800c33c:	eba8 0800 	sub.w	r8, r8, r0
 800c340:	e7e9      	b.n	800c316 <__sflush_r+0xda>
 800c342:	bf00      	nop
 800c344:	20400001 	.word	0x20400001

0800c348 <_fflush_r>:
 800c348:	b538      	push	{r3, r4, r5, lr}
 800c34a:	690b      	ldr	r3, [r1, #16]
 800c34c:	4605      	mov	r5, r0
 800c34e:	460c      	mov	r4, r1
 800c350:	b913      	cbnz	r3, 800c358 <_fflush_r+0x10>
 800c352:	2500      	movs	r5, #0
 800c354:	4628      	mov	r0, r5
 800c356:	bd38      	pop	{r3, r4, r5, pc}
 800c358:	b118      	cbz	r0, 800c362 <_fflush_r+0x1a>
 800c35a:	6983      	ldr	r3, [r0, #24]
 800c35c:	b90b      	cbnz	r3, 800c362 <_fflush_r+0x1a>
 800c35e:	f000 f887 	bl	800c470 <__sinit>
 800c362:	4b14      	ldr	r3, [pc, #80]	; (800c3b4 <_fflush_r+0x6c>)
 800c364:	429c      	cmp	r4, r3
 800c366:	d11b      	bne.n	800c3a0 <_fflush_r+0x58>
 800c368:	686c      	ldr	r4, [r5, #4]
 800c36a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d0ef      	beq.n	800c352 <_fflush_r+0xa>
 800c372:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c374:	07d0      	lsls	r0, r2, #31
 800c376:	d404      	bmi.n	800c382 <_fflush_r+0x3a>
 800c378:	0599      	lsls	r1, r3, #22
 800c37a:	d402      	bmi.n	800c382 <_fflush_r+0x3a>
 800c37c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c37e:	f000 f927 	bl	800c5d0 <__retarget_lock_acquire_recursive>
 800c382:	4628      	mov	r0, r5
 800c384:	4621      	mov	r1, r4
 800c386:	f7ff ff59 	bl	800c23c <__sflush_r>
 800c38a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c38c:	07da      	lsls	r2, r3, #31
 800c38e:	4605      	mov	r5, r0
 800c390:	d4e0      	bmi.n	800c354 <_fflush_r+0xc>
 800c392:	89a3      	ldrh	r3, [r4, #12]
 800c394:	059b      	lsls	r3, r3, #22
 800c396:	d4dd      	bmi.n	800c354 <_fflush_r+0xc>
 800c398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c39a:	f000 f91a 	bl	800c5d2 <__retarget_lock_release_recursive>
 800c39e:	e7d9      	b.n	800c354 <_fflush_r+0xc>
 800c3a0:	4b05      	ldr	r3, [pc, #20]	; (800c3b8 <_fflush_r+0x70>)
 800c3a2:	429c      	cmp	r4, r3
 800c3a4:	d101      	bne.n	800c3aa <_fflush_r+0x62>
 800c3a6:	68ac      	ldr	r4, [r5, #8]
 800c3a8:	e7df      	b.n	800c36a <_fflush_r+0x22>
 800c3aa:	4b04      	ldr	r3, [pc, #16]	; (800c3bc <_fflush_r+0x74>)
 800c3ac:	429c      	cmp	r4, r3
 800c3ae:	bf08      	it	eq
 800c3b0:	68ec      	ldreq	r4, [r5, #12]
 800c3b2:	e7da      	b.n	800c36a <_fflush_r+0x22>
 800c3b4:	0800d17c 	.word	0x0800d17c
 800c3b8:	0800d19c 	.word	0x0800d19c
 800c3bc:	0800d15c 	.word	0x0800d15c

0800c3c0 <std>:
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	b510      	push	{r4, lr}
 800c3c4:	4604      	mov	r4, r0
 800c3c6:	e9c0 3300 	strd	r3, r3, [r0]
 800c3ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c3ce:	6083      	str	r3, [r0, #8]
 800c3d0:	8181      	strh	r1, [r0, #12]
 800c3d2:	6643      	str	r3, [r0, #100]	; 0x64
 800c3d4:	81c2      	strh	r2, [r0, #14]
 800c3d6:	6183      	str	r3, [r0, #24]
 800c3d8:	4619      	mov	r1, r3
 800c3da:	2208      	movs	r2, #8
 800c3dc:	305c      	adds	r0, #92	; 0x5c
 800c3de:	f7fb fb6d 	bl	8007abc <memset>
 800c3e2:	4b05      	ldr	r3, [pc, #20]	; (800c3f8 <std+0x38>)
 800c3e4:	6263      	str	r3, [r4, #36]	; 0x24
 800c3e6:	4b05      	ldr	r3, [pc, #20]	; (800c3fc <std+0x3c>)
 800c3e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800c3ea:	4b05      	ldr	r3, [pc, #20]	; (800c400 <std+0x40>)
 800c3ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c3ee:	4b05      	ldr	r3, [pc, #20]	; (800c404 <std+0x44>)
 800c3f0:	6224      	str	r4, [r4, #32]
 800c3f2:	6323      	str	r3, [r4, #48]	; 0x30
 800c3f4:	bd10      	pop	{r4, pc}
 800c3f6:	bf00      	nop
 800c3f8:	08008865 	.word	0x08008865
 800c3fc:	0800888b 	.word	0x0800888b
 800c400:	080088c3 	.word	0x080088c3
 800c404:	080088e7 	.word	0x080088e7

0800c408 <_cleanup_r>:
 800c408:	4901      	ldr	r1, [pc, #4]	; (800c410 <_cleanup_r+0x8>)
 800c40a:	f000 b8c1 	b.w	800c590 <_fwalk_reent>
 800c40e:	bf00      	nop
 800c410:	0800c349 	.word	0x0800c349

0800c414 <__sfmoreglue>:
 800c414:	b570      	push	{r4, r5, r6, lr}
 800c416:	2268      	movs	r2, #104	; 0x68
 800c418:	1e4d      	subs	r5, r1, #1
 800c41a:	4355      	muls	r5, r2
 800c41c:	460e      	mov	r6, r1
 800c41e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c422:	f7ff f8c5 	bl	800b5b0 <_malloc_r>
 800c426:	4604      	mov	r4, r0
 800c428:	b140      	cbz	r0, 800c43c <__sfmoreglue+0x28>
 800c42a:	2100      	movs	r1, #0
 800c42c:	e9c0 1600 	strd	r1, r6, [r0]
 800c430:	300c      	adds	r0, #12
 800c432:	60a0      	str	r0, [r4, #8]
 800c434:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c438:	f7fb fb40 	bl	8007abc <memset>
 800c43c:	4620      	mov	r0, r4
 800c43e:	bd70      	pop	{r4, r5, r6, pc}

0800c440 <__sfp_lock_acquire>:
 800c440:	4801      	ldr	r0, [pc, #4]	; (800c448 <__sfp_lock_acquire+0x8>)
 800c442:	f000 b8c5 	b.w	800c5d0 <__retarget_lock_acquire_recursive>
 800c446:	bf00      	nop
 800c448:	20000925 	.word	0x20000925

0800c44c <__sfp_lock_release>:
 800c44c:	4801      	ldr	r0, [pc, #4]	; (800c454 <__sfp_lock_release+0x8>)
 800c44e:	f000 b8c0 	b.w	800c5d2 <__retarget_lock_release_recursive>
 800c452:	bf00      	nop
 800c454:	20000925 	.word	0x20000925

0800c458 <__sinit_lock_acquire>:
 800c458:	4801      	ldr	r0, [pc, #4]	; (800c460 <__sinit_lock_acquire+0x8>)
 800c45a:	f000 b8b9 	b.w	800c5d0 <__retarget_lock_acquire_recursive>
 800c45e:	bf00      	nop
 800c460:	20000926 	.word	0x20000926

0800c464 <__sinit_lock_release>:
 800c464:	4801      	ldr	r0, [pc, #4]	; (800c46c <__sinit_lock_release+0x8>)
 800c466:	f000 b8b4 	b.w	800c5d2 <__retarget_lock_release_recursive>
 800c46a:	bf00      	nop
 800c46c:	20000926 	.word	0x20000926

0800c470 <__sinit>:
 800c470:	b510      	push	{r4, lr}
 800c472:	4604      	mov	r4, r0
 800c474:	f7ff fff0 	bl	800c458 <__sinit_lock_acquire>
 800c478:	69a3      	ldr	r3, [r4, #24]
 800c47a:	b11b      	cbz	r3, 800c484 <__sinit+0x14>
 800c47c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c480:	f7ff bff0 	b.w	800c464 <__sinit_lock_release>
 800c484:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c488:	6523      	str	r3, [r4, #80]	; 0x50
 800c48a:	4b13      	ldr	r3, [pc, #76]	; (800c4d8 <__sinit+0x68>)
 800c48c:	4a13      	ldr	r2, [pc, #76]	; (800c4dc <__sinit+0x6c>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	62a2      	str	r2, [r4, #40]	; 0x28
 800c492:	42a3      	cmp	r3, r4
 800c494:	bf04      	itt	eq
 800c496:	2301      	moveq	r3, #1
 800c498:	61a3      	streq	r3, [r4, #24]
 800c49a:	4620      	mov	r0, r4
 800c49c:	f000 f820 	bl	800c4e0 <__sfp>
 800c4a0:	6060      	str	r0, [r4, #4]
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	f000 f81c 	bl	800c4e0 <__sfp>
 800c4a8:	60a0      	str	r0, [r4, #8]
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	f000 f818 	bl	800c4e0 <__sfp>
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	60e0      	str	r0, [r4, #12]
 800c4b4:	2104      	movs	r1, #4
 800c4b6:	6860      	ldr	r0, [r4, #4]
 800c4b8:	f7ff ff82 	bl	800c3c0 <std>
 800c4bc:	68a0      	ldr	r0, [r4, #8]
 800c4be:	2201      	movs	r2, #1
 800c4c0:	2109      	movs	r1, #9
 800c4c2:	f7ff ff7d 	bl	800c3c0 <std>
 800c4c6:	68e0      	ldr	r0, [r4, #12]
 800c4c8:	2202      	movs	r2, #2
 800c4ca:	2112      	movs	r1, #18
 800c4cc:	f7ff ff78 	bl	800c3c0 <std>
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	61a3      	str	r3, [r4, #24]
 800c4d4:	e7d2      	b.n	800c47c <__sinit+0xc>
 800c4d6:	bf00      	nop
 800c4d8:	0800cd00 	.word	0x0800cd00
 800c4dc:	0800c409 	.word	0x0800c409

0800c4e0 <__sfp>:
 800c4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4e2:	4607      	mov	r7, r0
 800c4e4:	f7ff ffac 	bl	800c440 <__sfp_lock_acquire>
 800c4e8:	4b1e      	ldr	r3, [pc, #120]	; (800c564 <__sfp+0x84>)
 800c4ea:	681e      	ldr	r6, [r3, #0]
 800c4ec:	69b3      	ldr	r3, [r6, #24]
 800c4ee:	b913      	cbnz	r3, 800c4f6 <__sfp+0x16>
 800c4f0:	4630      	mov	r0, r6
 800c4f2:	f7ff ffbd 	bl	800c470 <__sinit>
 800c4f6:	3648      	adds	r6, #72	; 0x48
 800c4f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c4fc:	3b01      	subs	r3, #1
 800c4fe:	d503      	bpl.n	800c508 <__sfp+0x28>
 800c500:	6833      	ldr	r3, [r6, #0]
 800c502:	b30b      	cbz	r3, 800c548 <__sfp+0x68>
 800c504:	6836      	ldr	r6, [r6, #0]
 800c506:	e7f7      	b.n	800c4f8 <__sfp+0x18>
 800c508:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c50c:	b9d5      	cbnz	r5, 800c544 <__sfp+0x64>
 800c50e:	4b16      	ldr	r3, [pc, #88]	; (800c568 <__sfp+0x88>)
 800c510:	60e3      	str	r3, [r4, #12]
 800c512:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c516:	6665      	str	r5, [r4, #100]	; 0x64
 800c518:	f000 f859 	bl	800c5ce <__retarget_lock_init_recursive>
 800c51c:	f7ff ff96 	bl	800c44c <__sfp_lock_release>
 800c520:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c524:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c528:	6025      	str	r5, [r4, #0]
 800c52a:	61a5      	str	r5, [r4, #24]
 800c52c:	2208      	movs	r2, #8
 800c52e:	4629      	mov	r1, r5
 800c530:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c534:	f7fb fac2 	bl	8007abc <memset>
 800c538:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c53c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c540:	4620      	mov	r0, r4
 800c542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c544:	3468      	adds	r4, #104	; 0x68
 800c546:	e7d9      	b.n	800c4fc <__sfp+0x1c>
 800c548:	2104      	movs	r1, #4
 800c54a:	4638      	mov	r0, r7
 800c54c:	f7ff ff62 	bl	800c414 <__sfmoreglue>
 800c550:	4604      	mov	r4, r0
 800c552:	6030      	str	r0, [r6, #0]
 800c554:	2800      	cmp	r0, #0
 800c556:	d1d5      	bne.n	800c504 <__sfp+0x24>
 800c558:	f7ff ff78 	bl	800c44c <__sfp_lock_release>
 800c55c:	230c      	movs	r3, #12
 800c55e:	603b      	str	r3, [r7, #0]
 800c560:	e7ee      	b.n	800c540 <__sfp+0x60>
 800c562:	bf00      	nop
 800c564:	0800cd00 	.word	0x0800cd00
 800c568:	ffff0001 	.word	0xffff0001

0800c56c <fiprintf>:
 800c56c:	b40e      	push	{r1, r2, r3}
 800c56e:	b503      	push	{r0, r1, lr}
 800c570:	4601      	mov	r1, r0
 800c572:	ab03      	add	r3, sp, #12
 800c574:	4805      	ldr	r0, [pc, #20]	; (800c58c <fiprintf+0x20>)
 800c576:	f853 2b04 	ldr.w	r2, [r3], #4
 800c57a:	6800      	ldr	r0, [r0, #0]
 800c57c:	9301      	str	r3, [sp, #4]
 800c57e:	f000 f8a7 	bl	800c6d0 <_vfiprintf_r>
 800c582:	b002      	add	sp, #8
 800c584:	f85d eb04 	ldr.w	lr, [sp], #4
 800c588:	b003      	add	sp, #12
 800c58a:	4770      	bx	lr
 800c58c:	200000f0 	.word	0x200000f0

0800c590 <_fwalk_reent>:
 800c590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c594:	4606      	mov	r6, r0
 800c596:	4688      	mov	r8, r1
 800c598:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c59c:	2700      	movs	r7, #0
 800c59e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c5a2:	f1b9 0901 	subs.w	r9, r9, #1
 800c5a6:	d505      	bpl.n	800c5b4 <_fwalk_reent+0x24>
 800c5a8:	6824      	ldr	r4, [r4, #0]
 800c5aa:	2c00      	cmp	r4, #0
 800c5ac:	d1f7      	bne.n	800c59e <_fwalk_reent+0xe>
 800c5ae:	4638      	mov	r0, r7
 800c5b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5b4:	89ab      	ldrh	r3, [r5, #12]
 800c5b6:	2b01      	cmp	r3, #1
 800c5b8:	d907      	bls.n	800c5ca <_fwalk_reent+0x3a>
 800c5ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c5be:	3301      	adds	r3, #1
 800c5c0:	d003      	beq.n	800c5ca <_fwalk_reent+0x3a>
 800c5c2:	4629      	mov	r1, r5
 800c5c4:	4630      	mov	r0, r6
 800c5c6:	47c0      	blx	r8
 800c5c8:	4307      	orrs	r7, r0
 800c5ca:	3568      	adds	r5, #104	; 0x68
 800c5cc:	e7e9      	b.n	800c5a2 <_fwalk_reent+0x12>

0800c5ce <__retarget_lock_init_recursive>:
 800c5ce:	4770      	bx	lr

0800c5d0 <__retarget_lock_acquire_recursive>:
 800c5d0:	4770      	bx	lr

0800c5d2 <__retarget_lock_release_recursive>:
 800c5d2:	4770      	bx	lr

0800c5d4 <memmove>:
 800c5d4:	4288      	cmp	r0, r1
 800c5d6:	b510      	push	{r4, lr}
 800c5d8:	eb01 0402 	add.w	r4, r1, r2
 800c5dc:	d902      	bls.n	800c5e4 <memmove+0x10>
 800c5de:	4284      	cmp	r4, r0
 800c5e0:	4623      	mov	r3, r4
 800c5e2:	d807      	bhi.n	800c5f4 <memmove+0x20>
 800c5e4:	1e43      	subs	r3, r0, #1
 800c5e6:	42a1      	cmp	r1, r4
 800c5e8:	d008      	beq.n	800c5fc <memmove+0x28>
 800c5ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5f2:	e7f8      	b.n	800c5e6 <memmove+0x12>
 800c5f4:	4402      	add	r2, r0
 800c5f6:	4601      	mov	r1, r0
 800c5f8:	428a      	cmp	r2, r1
 800c5fa:	d100      	bne.n	800c5fe <memmove+0x2a>
 800c5fc:	bd10      	pop	{r4, pc}
 800c5fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c602:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c606:	e7f7      	b.n	800c5f8 <memmove+0x24>

0800c608 <__malloc_lock>:
 800c608:	4801      	ldr	r0, [pc, #4]	; (800c610 <__malloc_lock+0x8>)
 800c60a:	f7ff bfe1 	b.w	800c5d0 <__retarget_lock_acquire_recursive>
 800c60e:	bf00      	nop
 800c610:	20000924 	.word	0x20000924

0800c614 <__malloc_unlock>:
 800c614:	4801      	ldr	r0, [pc, #4]	; (800c61c <__malloc_unlock+0x8>)
 800c616:	f7ff bfdc 	b.w	800c5d2 <__retarget_lock_release_recursive>
 800c61a:	bf00      	nop
 800c61c:	20000924 	.word	0x20000924

0800c620 <_realloc_r>:
 800c620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c624:	4680      	mov	r8, r0
 800c626:	4614      	mov	r4, r2
 800c628:	460e      	mov	r6, r1
 800c62a:	b921      	cbnz	r1, 800c636 <_realloc_r+0x16>
 800c62c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c630:	4611      	mov	r1, r2
 800c632:	f7fe bfbd 	b.w	800b5b0 <_malloc_r>
 800c636:	b92a      	cbnz	r2, 800c644 <_realloc_r+0x24>
 800c638:	f7fe ff4e 	bl	800b4d8 <_free_r>
 800c63c:	4625      	mov	r5, r4
 800c63e:	4628      	mov	r0, r5
 800c640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c644:	f000 faa0 	bl	800cb88 <_malloc_usable_size_r>
 800c648:	4284      	cmp	r4, r0
 800c64a:	4607      	mov	r7, r0
 800c64c:	d802      	bhi.n	800c654 <_realloc_r+0x34>
 800c64e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c652:	d812      	bhi.n	800c67a <_realloc_r+0x5a>
 800c654:	4621      	mov	r1, r4
 800c656:	4640      	mov	r0, r8
 800c658:	f7fe ffaa 	bl	800b5b0 <_malloc_r>
 800c65c:	4605      	mov	r5, r0
 800c65e:	2800      	cmp	r0, #0
 800c660:	d0ed      	beq.n	800c63e <_realloc_r+0x1e>
 800c662:	42bc      	cmp	r4, r7
 800c664:	4622      	mov	r2, r4
 800c666:	4631      	mov	r1, r6
 800c668:	bf28      	it	cs
 800c66a:	463a      	movcs	r2, r7
 800c66c:	f7fe fa4e 	bl	800ab0c <memcpy>
 800c670:	4631      	mov	r1, r6
 800c672:	4640      	mov	r0, r8
 800c674:	f7fe ff30 	bl	800b4d8 <_free_r>
 800c678:	e7e1      	b.n	800c63e <_realloc_r+0x1e>
 800c67a:	4635      	mov	r5, r6
 800c67c:	e7df      	b.n	800c63e <_realloc_r+0x1e>

0800c67e <__sfputc_r>:
 800c67e:	6893      	ldr	r3, [r2, #8]
 800c680:	3b01      	subs	r3, #1
 800c682:	2b00      	cmp	r3, #0
 800c684:	b410      	push	{r4}
 800c686:	6093      	str	r3, [r2, #8]
 800c688:	da08      	bge.n	800c69c <__sfputc_r+0x1e>
 800c68a:	6994      	ldr	r4, [r2, #24]
 800c68c:	42a3      	cmp	r3, r4
 800c68e:	db01      	blt.n	800c694 <__sfputc_r+0x16>
 800c690:	290a      	cmp	r1, #10
 800c692:	d103      	bne.n	800c69c <__sfputc_r+0x1e>
 800c694:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c698:	f000 b94a 	b.w	800c930 <__swbuf_r>
 800c69c:	6813      	ldr	r3, [r2, #0]
 800c69e:	1c58      	adds	r0, r3, #1
 800c6a0:	6010      	str	r0, [r2, #0]
 800c6a2:	7019      	strb	r1, [r3, #0]
 800c6a4:	4608      	mov	r0, r1
 800c6a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6aa:	4770      	bx	lr

0800c6ac <__sfputs_r>:
 800c6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ae:	4606      	mov	r6, r0
 800c6b0:	460f      	mov	r7, r1
 800c6b2:	4614      	mov	r4, r2
 800c6b4:	18d5      	adds	r5, r2, r3
 800c6b6:	42ac      	cmp	r4, r5
 800c6b8:	d101      	bne.n	800c6be <__sfputs_r+0x12>
 800c6ba:	2000      	movs	r0, #0
 800c6bc:	e007      	b.n	800c6ce <__sfputs_r+0x22>
 800c6be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6c2:	463a      	mov	r2, r7
 800c6c4:	4630      	mov	r0, r6
 800c6c6:	f7ff ffda 	bl	800c67e <__sfputc_r>
 800c6ca:	1c43      	adds	r3, r0, #1
 800c6cc:	d1f3      	bne.n	800c6b6 <__sfputs_r+0xa>
 800c6ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c6d0 <_vfiprintf_r>:
 800c6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d4:	460d      	mov	r5, r1
 800c6d6:	b09d      	sub	sp, #116	; 0x74
 800c6d8:	4614      	mov	r4, r2
 800c6da:	4698      	mov	r8, r3
 800c6dc:	4606      	mov	r6, r0
 800c6de:	b118      	cbz	r0, 800c6e8 <_vfiprintf_r+0x18>
 800c6e0:	6983      	ldr	r3, [r0, #24]
 800c6e2:	b90b      	cbnz	r3, 800c6e8 <_vfiprintf_r+0x18>
 800c6e4:	f7ff fec4 	bl	800c470 <__sinit>
 800c6e8:	4b89      	ldr	r3, [pc, #548]	; (800c910 <_vfiprintf_r+0x240>)
 800c6ea:	429d      	cmp	r5, r3
 800c6ec:	d11b      	bne.n	800c726 <_vfiprintf_r+0x56>
 800c6ee:	6875      	ldr	r5, [r6, #4]
 800c6f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6f2:	07d9      	lsls	r1, r3, #31
 800c6f4:	d405      	bmi.n	800c702 <_vfiprintf_r+0x32>
 800c6f6:	89ab      	ldrh	r3, [r5, #12]
 800c6f8:	059a      	lsls	r2, r3, #22
 800c6fa:	d402      	bmi.n	800c702 <_vfiprintf_r+0x32>
 800c6fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6fe:	f7ff ff67 	bl	800c5d0 <__retarget_lock_acquire_recursive>
 800c702:	89ab      	ldrh	r3, [r5, #12]
 800c704:	071b      	lsls	r3, r3, #28
 800c706:	d501      	bpl.n	800c70c <_vfiprintf_r+0x3c>
 800c708:	692b      	ldr	r3, [r5, #16]
 800c70a:	b9eb      	cbnz	r3, 800c748 <_vfiprintf_r+0x78>
 800c70c:	4629      	mov	r1, r5
 800c70e:	4630      	mov	r0, r6
 800c710:	f000 f960 	bl	800c9d4 <__swsetup_r>
 800c714:	b1c0      	cbz	r0, 800c748 <_vfiprintf_r+0x78>
 800c716:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c718:	07dc      	lsls	r4, r3, #31
 800c71a:	d50e      	bpl.n	800c73a <_vfiprintf_r+0x6a>
 800c71c:	f04f 30ff 	mov.w	r0, #4294967295
 800c720:	b01d      	add	sp, #116	; 0x74
 800c722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c726:	4b7b      	ldr	r3, [pc, #492]	; (800c914 <_vfiprintf_r+0x244>)
 800c728:	429d      	cmp	r5, r3
 800c72a:	d101      	bne.n	800c730 <_vfiprintf_r+0x60>
 800c72c:	68b5      	ldr	r5, [r6, #8]
 800c72e:	e7df      	b.n	800c6f0 <_vfiprintf_r+0x20>
 800c730:	4b79      	ldr	r3, [pc, #484]	; (800c918 <_vfiprintf_r+0x248>)
 800c732:	429d      	cmp	r5, r3
 800c734:	bf08      	it	eq
 800c736:	68f5      	ldreq	r5, [r6, #12]
 800c738:	e7da      	b.n	800c6f0 <_vfiprintf_r+0x20>
 800c73a:	89ab      	ldrh	r3, [r5, #12]
 800c73c:	0598      	lsls	r0, r3, #22
 800c73e:	d4ed      	bmi.n	800c71c <_vfiprintf_r+0x4c>
 800c740:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c742:	f7ff ff46 	bl	800c5d2 <__retarget_lock_release_recursive>
 800c746:	e7e9      	b.n	800c71c <_vfiprintf_r+0x4c>
 800c748:	2300      	movs	r3, #0
 800c74a:	9309      	str	r3, [sp, #36]	; 0x24
 800c74c:	2320      	movs	r3, #32
 800c74e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c752:	f8cd 800c 	str.w	r8, [sp, #12]
 800c756:	2330      	movs	r3, #48	; 0x30
 800c758:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c91c <_vfiprintf_r+0x24c>
 800c75c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c760:	f04f 0901 	mov.w	r9, #1
 800c764:	4623      	mov	r3, r4
 800c766:	469a      	mov	sl, r3
 800c768:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c76c:	b10a      	cbz	r2, 800c772 <_vfiprintf_r+0xa2>
 800c76e:	2a25      	cmp	r2, #37	; 0x25
 800c770:	d1f9      	bne.n	800c766 <_vfiprintf_r+0x96>
 800c772:	ebba 0b04 	subs.w	fp, sl, r4
 800c776:	d00b      	beq.n	800c790 <_vfiprintf_r+0xc0>
 800c778:	465b      	mov	r3, fp
 800c77a:	4622      	mov	r2, r4
 800c77c:	4629      	mov	r1, r5
 800c77e:	4630      	mov	r0, r6
 800c780:	f7ff ff94 	bl	800c6ac <__sfputs_r>
 800c784:	3001      	adds	r0, #1
 800c786:	f000 80aa 	beq.w	800c8de <_vfiprintf_r+0x20e>
 800c78a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c78c:	445a      	add	r2, fp
 800c78e:	9209      	str	r2, [sp, #36]	; 0x24
 800c790:	f89a 3000 	ldrb.w	r3, [sl]
 800c794:	2b00      	cmp	r3, #0
 800c796:	f000 80a2 	beq.w	800c8de <_vfiprintf_r+0x20e>
 800c79a:	2300      	movs	r3, #0
 800c79c:	f04f 32ff 	mov.w	r2, #4294967295
 800c7a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7a4:	f10a 0a01 	add.w	sl, sl, #1
 800c7a8:	9304      	str	r3, [sp, #16]
 800c7aa:	9307      	str	r3, [sp, #28]
 800c7ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7b0:	931a      	str	r3, [sp, #104]	; 0x68
 800c7b2:	4654      	mov	r4, sl
 800c7b4:	2205      	movs	r2, #5
 800c7b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7ba:	4858      	ldr	r0, [pc, #352]	; (800c91c <_vfiprintf_r+0x24c>)
 800c7bc:	f7f3 fd10 	bl	80001e0 <memchr>
 800c7c0:	9a04      	ldr	r2, [sp, #16]
 800c7c2:	b9d8      	cbnz	r0, 800c7fc <_vfiprintf_r+0x12c>
 800c7c4:	06d1      	lsls	r1, r2, #27
 800c7c6:	bf44      	itt	mi
 800c7c8:	2320      	movmi	r3, #32
 800c7ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7ce:	0713      	lsls	r3, r2, #28
 800c7d0:	bf44      	itt	mi
 800c7d2:	232b      	movmi	r3, #43	; 0x2b
 800c7d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7d8:	f89a 3000 	ldrb.w	r3, [sl]
 800c7dc:	2b2a      	cmp	r3, #42	; 0x2a
 800c7de:	d015      	beq.n	800c80c <_vfiprintf_r+0x13c>
 800c7e0:	9a07      	ldr	r2, [sp, #28]
 800c7e2:	4654      	mov	r4, sl
 800c7e4:	2000      	movs	r0, #0
 800c7e6:	f04f 0c0a 	mov.w	ip, #10
 800c7ea:	4621      	mov	r1, r4
 800c7ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7f0:	3b30      	subs	r3, #48	; 0x30
 800c7f2:	2b09      	cmp	r3, #9
 800c7f4:	d94e      	bls.n	800c894 <_vfiprintf_r+0x1c4>
 800c7f6:	b1b0      	cbz	r0, 800c826 <_vfiprintf_r+0x156>
 800c7f8:	9207      	str	r2, [sp, #28]
 800c7fa:	e014      	b.n	800c826 <_vfiprintf_r+0x156>
 800c7fc:	eba0 0308 	sub.w	r3, r0, r8
 800c800:	fa09 f303 	lsl.w	r3, r9, r3
 800c804:	4313      	orrs	r3, r2
 800c806:	9304      	str	r3, [sp, #16]
 800c808:	46a2      	mov	sl, r4
 800c80a:	e7d2      	b.n	800c7b2 <_vfiprintf_r+0xe2>
 800c80c:	9b03      	ldr	r3, [sp, #12]
 800c80e:	1d19      	adds	r1, r3, #4
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	9103      	str	r1, [sp, #12]
 800c814:	2b00      	cmp	r3, #0
 800c816:	bfbb      	ittet	lt
 800c818:	425b      	neglt	r3, r3
 800c81a:	f042 0202 	orrlt.w	r2, r2, #2
 800c81e:	9307      	strge	r3, [sp, #28]
 800c820:	9307      	strlt	r3, [sp, #28]
 800c822:	bfb8      	it	lt
 800c824:	9204      	strlt	r2, [sp, #16]
 800c826:	7823      	ldrb	r3, [r4, #0]
 800c828:	2b2e      	cmp	r3, #46	; 0x2e
 800c82a:	d10c      	bne.n	800c846 <_vfiprintf_r+0x176>
 800c82c:	7863      	ldrb	r3, [r4, #1]
 800c82e:	2b2a      	cmp	r3, #42	; 0x2a
 800c830:	d135      	bne.n	800c89e <_vfiprintf_r+0x1ce>
 800c832:	9b03      	ldr	r3, [sp, #12]
 800c834:	1d1a      	adds	r2, r3, #4
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	9203      	str	r2, [sp, #12]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	bfb8      	it	lt
 800c83e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c842:	3402      	adds	r4, #2
 800c844:	9305      	str	r3, [sp, #20]
 800c846:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c92c <_vfiprintf_r+0x25c>
 800c84a:	7821      	ldrb	r1, [r4, #0]
 800c84c:	2203      	movs	r2, #3
 800c84e:	4650      	mov	r0, sl
 800c850:	f7f3 fcc6 	bl	80001e0 <memchr>
 800c854:	b140      	cbz	r0, 800c868 <_vfiprintf_r+0x198>
 800c856:	2340      	movs	r3, #64	; 0x40
 800c858:	eba0 000a 	sub.w	r0, r0, sl
 800c85c:	fa03 f000 	lsl.w	r0, r3, r0
 800c860:	9b04      	ldr	r3, [sp, #16]
 800c862:	4303      	orrs	r3, r0
 800c864:	3401      	adds	r4, #1
 800c866:	9304      	str	r3, [sp, #16]
 800c868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c86c:	482c      	ldr	r0, [pc, #176]	; (800c920 <_vfiprintf_r+0x250>)
 800c86e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c872:	2206      	movs	r2, #6
 800c874:	f7f3 fcb4 	bl	80001e0 <memchr>
 800c878:	2800      	cmp	r0, #0
 800c87a:	d03f      	beq.n	800c8fc <_vfiprintf_r+0x22c>
 800c87c:	4b29      	ldr	r3, [pc, #164]	; (800c924 <_vfiprintf_r+0x254>)
 800c87e:	bb1b      	cbnz	r3, 800c8c8 <_vfiprintf_r+0x1f8>
 800c880:	9b03      	ldr	r3, [sp, #12]
 800c882:	3307      	adds	r3, #7
 800c884:	f023 0307 	bic.w	r3, r3, #7
 800c888:	3308      	adds	r3, #8
 800c88a:	9303      	str	r3, [sp, #12]
 800c88c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c88e:	443b      	add	r3, r7
 800c890:	9309      	str	r3, [sp, #36]	; 0x24
 800c892:	e767      	b.n	800c764 <_vfiprintf_r+0x94>
 800c894:	fb0c 3202 	mla	r2, ip, r2, r3
 800c898:	460c      	mov	r4, r1
 800c89a:	2001      	movs	r0, #1
 800c89c:	e7a5      	b.n	800c7ea <_vfiprintf_r+0x11a>
 800c89e:	2300      	movs	r3, #0
 800c8a0:	3401      	adds	r4, #1
 800c8a2:	9305      	str	r3, [sp, #20]
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	f04f 0c0a 	mov.w	ip, #10
 800c8aa:	4620      	mov	r0, r4
 800c8ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8b0:	3a30      	subs	r2, #48	; 0x30
 800c8b2:	2a09      	cmp	r2, #9
 800c8b4:	d903      	bls.n	800c8be <_vfiprintf_r+0x1ee>
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d0c5      	beq.n	800c846 <_vfiprintf_r+0x176>
 800c8ba:	9105      	str	r1, [sp, #20]
 800c8bc:	e7c3      	b.n	800c846 <_vfiprintf_r+0x176>
 800c8be:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8c2:	4604      	mov	r4, r0
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	e7f0      	b.n	800c8aa <_vfiprintf_r+0x1da>
 800c8c8:	ab03      	add	r3, sp, #12
 800c8ca:	9300      	str	r3, [sp, #0]
 800c8cc:	462a      	mov	r2, r5
 800c8ce:	4b16      	ldr	r3, [pc, #88]	; (800c928 <_vfiprintf_r+0x258>)
 800c8d0:	a904      	add	r1, sp, #16
 800c8d2:	4630      	mov	r0, r6
 800c8d4:	f7fb f99a 	bl	8007c0c <_printf_float>
 800c8d8:	4607      	mov	r7, r0
 800c8da:	1c78      	adds	r0, r7, #1
 800c8dc:	d1d6      	bne.n	800c88c <_vfiprintf_r+0x1bc>
 800c8de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8e0:	07d9      	lsls	r1, r3, #31
 800c8e2:	d405      	bmi.n	800c8f0 <_vfiprintf_r+0x220>
 800c8e4:	89ab      	ldrh	r3, [r5, #12]
 800c8e6:	059a      	lsls	r2, r3, #22
 800c8e8:	d402      	bmi.n	800c8f0 <_vfiprintf_r+0x220>
 800c8ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8ec:	f7ff fe71 	bl	800c5d2 <__retarget_lock_release_recursive>
 800c8f0:	89ab      	ldrh	r3, [r5, #12]
 800c8f2:	065b      	lsls	r3, r3, #25
 800c8f4:	f53f af12 	bmi.w	800c71c <_vfiprintf_r+0x4c>
 800c8f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8fa:	e711      	b.n	800c720 <_vfiprintf_r+0x50>
 800c8fc:	ab03      	add	r3, sp, #12
 800c8fe:	9300      	str	r3, [sp, #0]
 800c900:	462a      	mov	r2, r5
 800c902:	4b09      	ldr	r3, [pc, #36]	; (800c928 <_vfiprintf_r+0x258>)
 800c904:	a904      	add	r1, sp, #16
 800c906:	4630      	mov	r0, r6
 800c908:	f7fb fc24 	bl	8008154 <_printf_i>
 800c90c:	e7e4      	b.n	800c8d8 <_vfiprintf_r+0x208>
 800c90e:	bf00      	nop
 800c910:	0800d17c 	.word	0x0800d17c
 800c914:	0800d19c 	.word	0x0800d19c
 800c918:	0800d15c 	.word	0x0800d15c
 800c91c:	0800d0f4 	.word	0x0800d0f4
 800c920:	0800d0fe 	.word	0x0800d0fe
 800c924:	08007c0d 	.word	0x08007c0d
 800c928:	0800c6ad 	.word	0x0800c6ad
 800c92c:	0800d0fa 	.word	0x0800d0fa

0800c930 <__swbuf_r>:
 800c930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c932:	460e      	mov	r6, r1
 800c934:	4614      	mov	r4, r2
 800c936:	4605      	mov	r5, r0
 800c938:	b118      	cbz	r0, 800c942 <__swbuf_r+0x12>
 800c93a:	6983      	ldr	r3, [r0, #24]
 800c93c:	b90b      	cbnz	r3, 800c942 <__swbuf_r+0x12>
 800c93e:	f7ff fd97 	bl	800c470 <__sinit>
 800c942:	4b21      	ldr	r3, [pc, #132]	; (800c9c8 <__swbuf_r+0x98>)
 800c944:	429c      	cmp	r4, r3
 800c946:	d12b      	bne.n	800c9a0 <__swbuf_r+0x70>
 800c948:	686c      	ldr	r4, [r5, #4]
 800c94a:	69a3      	ldr	r3, [r4, #24]
 800c94c:	60a3      	str	r3, [r4, #8]
 800c94e:	89a3      	ldrh	r3, [r4, #12]
 800c950:	071a      	lsls	r2, r3, #28
 800c952:	d52f      	bpl.n	800c9b4 <__swbuf_r+0x84>
 800c954:	6923      	ldr	r3, [r4, #16]
 800c956:	b36b      	cbz	r3, 800c9b4 <__swbuf_r+0x84>
 800c958:	6923      	ldr	r3, [r4, #16]
 800c95a:	6820      	ldr	r0, [r4, #0]
 800c95c:	1ac0      	subs	r0, r0, r3
 800c95e:	6963      	ldr	r3, [r4, #20]
 800c960:	b2f6      	uxtb	r6, r6
 800c962:	4283      	cmp	r3, r0
 800c964:	4637      	mov	r7, r6
 800c966:	dc04      	bgt.n	800c972 <__swbuf_r+0x42>
 800c968:	4621      	mov	r1, r4
 800c96a:	4628      	mov	r0, r5
 800c96c:	f7ff fcec 	bl	800c348 <_fflush_r>
 800c970:	bb30      	cbnz	r0, 800c9c0 <__swbuf_r+0x90>
 800c972:	68a3      	ldr	r3, [r4, #8]
 800c974:	3b01      	subs	r3, #1
 800c976:	60a3      	str	r3, [r4, #8]
 800c978:	6823      	ldr	r3, [r4, #0]
 800c97a:	1c5a      	adds	r2, r3, #1
 800c97c:	6022      	str	r2, [r4, #0]
 800c97e:	701e      	strb	r6, [r3, #0]
 800c980:	6963      	ldr	r3, [r4, #20]
 800c982:	3001      	adds	r0, #1
 800c984:	4283      	cmp	r3, r0
 800c986:	d004      	beq.n	800c992 <__swbuf_r+0x62>
 800c988:	89a3      	ldrh	r3, [r4, #12]
 800c98a:	07db      	lsls	r3, r3, #31
 800c98c:	d506      	bpl.n	800c99c <__swbuf_r+0x6c>
 800c98e:	2e0a      	cmp	r6, #10
 800c990:	d104      	bne.n	800c99c <__swbuf_r+0x6c>
 800c992:	4621      	mov	r1, r4
 800c994:	4628      	mov	r0, r5
 800c996:	f7ff fcd7 	bl	800c348 <_fflush_r>
 800c99a:	b988      	cbnz	r0, 800c9c0 <__swbuf_r+0x90>
 800c99c:	4638      	mov	r0, r7
 800c99e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9a0:	4b0a      	ldr	r3, [pc, #40]	; (800c9cc <__swbuf_r+0x9c>)
 800c9a2:	429c      	cmp	r4, r3
 800c9a4:	d101      	bne.n	800c9aa <__swbuf_r+0x7a>
 800c9a6:	68ac      	ldr	r4, [r5, #8]
 800c9a8:	e7cf      	b.n	800c94a <__swbuf_r+0x1a>
 800c9aa:	4b09      	ldr	r3, [pc, #36]	; (800c9d0 <__swbuf_r+0xa0>)
 800c9ac:	429c      	cmp	r4, r3
 800c9ae:	bf08      	it	eq
 800c9b0:	68ec      	ldreq	r4, [r5, #12]
 800c9b2:	e7ca      	b.n	800c94a <__swbuf_r+0x1a>
 800c9b4:	4621      	mov	r1, r4
 800c9b6:	4628      	mov	r0, r5
 800c9b8:	f000 f80c 	bl	800c9d4 <__swsetup_r>
 800c9bc:	2800      	cmp	r0, #0
 800c9be:	d0cb      	beq.n	800c958 <__swbuf_r+0x28>
 800c9c0:	f04f 37ff 	mov.w	r7, #4294967295
 800c9c4:	e7ea      	b.n	800c99c <__swbuf_r+0x6c>
 800c9c6:	bf00      	nop
 800c9c8:	0800d17c 	.word	0x0800d17c
 800c9cc:	0800d19c 	.word	0x0800d19c
 800c9d0:	0800d15c 	.word	0x0800d15c

0800c9d4 <__swsetup_r>:
 800c9d4:	4b32      	ldr	r3, [pc, #200]	; (800caa0 <__swsetup_r+0xcc>)
 800c9d6:	b570      	push	{r4, r5, r6, lr}
 800c9d8:	681d      	ldr	r5, [r3, #0]
 800c9da:	4606      	mov	r6, r0
 800c9dc:	460c      	mov	r4, r1
 800c9de:	b125      	cbz	r5, 800c9ea <__swsetup_r+0x16>
 800c9e0:	69ab      	ldr	r3, [r5, #24]
 800c9e2:	b913      	cbnz	r3, 800c9ea <__swsetup_r+0x16>
 800c9e4:	4628      	mov	r0, r5
 800c9e6:	f7ff fd43 	bl	800c470 <__sinit>
 800c9ea:	4b2e      	ldr	r3, [pc, #184]	; (800caa4 <__swsetup_r+0xd0>)
 800c9ec:	429c      	cmp	r4, r3
 800c9ee:	d10f      	bne.n	800ca10 <__swsetup_r+0x3c>
 800c9f0:	686c      	ldr	r4, [r5, #4]
 800c9f2:	89a3      	ldrh	r3, [r4, #12]
 800c9f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9f8:	0719      	lsls	r1, r3, #28
 800c9fa:	d42c      	bmi.n	800ca56 <__swsetup_r+0x82>
 800c9fc:	06dd      	lsls	r5, r3, #27
 800c9fe:	d411      	bmi.n	800ca24 <__swsetup_r+0x50>
 800ca00:	2309      	movs	r3, #9
 800ca02:	6033      	str	r3, [r6, #0]
 800ca04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ca08:	81a3      	strh	r3, [r4, #12]
 800ca0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ca0e:	e03e      	b.n	800ca8e <__swsetup_r+0xba>
 800ca10:	4b25      	ldr	r3, [pc, #148]	; (800caa8 <__swsetup_r+0xd4>)
 800ca12:	429c      	cmp	r4, r3
 800ca14:	d101      	bne.n	800ca1a <__swsetup_r+0x46>
 800ca16:	68ac      	ldr	r4, [r5, #8]
 800ca18:	e7eb      	b.n	800c9f2 <__swsetup_r+0x1e>
 800ca1a:	4b24      	ldr	r3, [pc, #144]	; (800caac <__swsetup_r+0xd8>)
 800ca1c:	429c      	cmp	r4, r3
 800ca1e:	bf08      	it	eq
 800ca20:	68ec      	ldreq	r4, [r5, #12]
 800ca22:	e7e6      	b.n	800c9f2 <__swsetup_r+0x1e>
 800ca24:	0758      	lsls	r0, r3, #29
 800ca26:	d512      	bpl.n	800ca4e <__swsetup_r+0x7a>
 800ca28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca2a:	b141      	cbz	r1, 800ca3e <__swsetup_r+0x6a>
 800ca2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca30:	4299      	cmp	r1, r3
 800ca32:	d002      	beq.n	800ca3a <__swsetup_r+0x66>
 800ca34:	4630      	mov	r0, r6
 800ca36:	f7fe fd4f 	bl	800b4d8 <_free_r>
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	6363      	str	r3, [r4, #52]	; 0x34
 800ca3e:	89a3      	ldrh	r3, [r4, #12]
 800ca40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca44:	81a3      	strh	r3, [r4, #12]
 800ca46:	2300      	movs	r3, #0
 800ca48:	6063      	str	r3, [r4, #4]
 800ca4a:	6923      	ldr	r3, [r4, #16]
 800ca4c:	6023      	str	r3, [r4, #0]
 800ca4e:	89a3      	ldrh	r3, [r4, #12]
 800ca50:	f043 0308 	orr.w	r3, r3, #8
 800ca54:	81a3      	strh	r3, [r4, #12]
 800ca56:	6923      	ldr	r3, [r4, #16]
 800ca58:	b94b      	cbnz	r3, 800ca6e <__swsetup_r+0x9a>
 800ca5a:	89a3      	ldrh	r3, [r4, #12]
 800ca5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca64:	d003      	beq.n	800ca6e <__swsetup_r+0x9a>
 800ca66:	4621      	mov	r1, r4
 800ca68:	4630      	mov	r0, r6
 800ca6a:	f000 f84d 	bl	800cb08 <__smakebuf_r>
 800ca6e:	89a0      	ldrh	r0, [r4, #12]
 800ca70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca74:	f010 0301 	ands.w	r3, r0, #1
 800ca78:	d00a      	beq.n	800ca90 <__swsetup_r+0xbc>
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	60a3      	str	r3, [r4, #8]
 800ca7e:	6963      	ldr	r3, [r4, #20]
 800ca80:	425b      	negs	r3, r3
 800ca82:	61a3      	str	r3, [r4, #24]
 800ca84:	6923      	ldr	r3, [r4, #16]
 800ca86:	b943      	cbnz	r3, 800ca9a <__swsetup_r+0xc6>
 800ca88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca8c:	d1ba      	bne.n	800ca04 <__swsetup_r+0x30>
 800ca8e:	bd70      	pop	{r4, r5, r6, pc}
 800ca90:	0781      	lsls	r1, r0, #30
 800ca92:	bf58      	it	pl
 800ca94:	6963      	ldrpl	r3, [r4, #20]
 800ca96:	60a3      	str	r3, [r4, #8]
 800ca98:	e7f4      	b.n	800ca84 <__swsetup_r+0xb0>
 800ca9a:	2000      	movs	r0, #0
 800ca9c:	e7f7      	b.n	800ca8e <__swsetup_r+0xba>
 800ca9e:	bf00      	nop
 800caa0:	200000f0 	.word	0x200000f0
 800caa4:	0800d17c 	.word	0x0800d17c
 800caa8:	0800d19c 	.word	0x0800d19c
 800caac:	0800d15c 	.word	0x0800d15c

0800cab0 <abort>:
 800cab0:	b508      	push	{r3, lr}
 800cab2:	2006      	movs	r0, #6
 800cab4:	f000 f898 	bl	800cbe8 <raise>
 800cab8:	2001      	movs	r0, #1
 800caba:	f7f6 f98b 	bl	8002dd4 <_exit>

0800cabe <__swhatbuf_r>:
 800cabe:	b570      	push	{r4, r5, r6, lr}
 800cac0:	460e      	mov	r6, r1
 800cac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cac6:	2900      	cmp	r1, #0
 800cac8:	b096      	sub	sp, #88	; 0x58
 800caca:	4614      	mov	r4, r2
 800cacc:	461d      	mov	r5, r3
 800cace:	da08      	bge.n	800cae2 <__swhatbuf_r+0x24>
 800cad0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cad4:	2200      	movs	r2, #0
 800cad6:	602a      	str	r2, [r5, #0]
 800cad8:	061a      	lsls	r2, r3, #24
 800cada:	d410      	bmi.n	800cafe <__swhatbuf_r+0x40>
 800cadc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cae0:	e00e      	b.n	800cb00 <__swhatbuf_r+0x42>
 800cae2:	466a      	mov	r2, sp
 800cae4:	f000 f89c 	bl	800cc20 <_fstat_r>
 800cae8:	2800      	cmp	r0, #0
 800caea:	dbf1      	blt.n	800cad0 <__swhatbuf_r+0x12>
 800caec:	9a01      	ldr	r2, [sp, #4]
 800caee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800caf2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800caf6:	425a      	negs	r2, r3
 800caf8:	415a      	adcs	r2, r3
 800cafa:	602a      	str	r2, [r5, #0]
 800cafc:	e7ee      	b.n	800cadc <__swhatbuf_r+0x1e>
 800cafe:	2340      	movs	r3, #64	; 0x40
 800cb00:	2000      	movs	r0, #0
 800cb02:	6023      	str	r3, [r4, #0]
 800cb04:	b016      	add	sp, #88	; 0x58
 800cb06:	bd70      	pop	{r4, r5, r6, pc}

0800cb08 <__smakebuf_r>:
 800cb08:	898b      	ldrh	r3, [r1, #12]
 800cb0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb0c:	079d      	lsls	r5, r3, #30
 800cb0e:	4606      	mov	r6, r0
 800cb10:	460c      	mov	r4, r1
 800cb12:	d507      	bpl.n	800cb24 <__smakebuf_r+0x1c>
 800cb14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cb18:	6023      	str	r3, [r4, #0]
 800cb1a:	6123      	str	r3, [r4, #16]
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	6163      	str	r3, [r4, #20]
 800cb20:	b002      	add	sp, #8
 800cb22:	bd70      	pop	{r4, r5, r6, pc}
 800cb24:	ab01      	add	r3, sp, #4
 800cb26:	466a      	mov	r2, sp
 800cb28:	f7ff ffc9 	bl	800cabe <__swhatbuf_r>
 800cb2c:	9900      	ldr	r1, [sp, #0]
 800cb2e:	4605      	mov	r5, r0
 800cb30:	4630      	mov	r0, r6
 800cb32:	f7fe fd3d 	bl	800b5b0 <_malloc_r>
 800cb36:	b948      	cbnz	r0, 800cb4c <__smakebuf_r+0x44>
 800cb38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb3c:	059a      	lsls	r2, r3, #22
 800cb3e:	d4ef      	bmi.n	800cb20 <__smakebuf_r+0x18>
 800cb40:	f023 0303 	bic.w	r3, r3, #3
 800cb44:	f043 0302 	orr.w	r3, r3, #2
 800cb48:	81a3      	strh	r3, [r4, #12]
 800cb4a:	e7e3      	b.n	800cb14 <__smakebuf_r+0xc>
 800cb4c:	4b0d      	ldr	r3, [pc, #52]	; (800cb84 <__smakebuf_r+0x7c>)
 800cb4e:	62b3      	str	r3, [r6, #40]	; 0x28
 800cb50:	89a3      	ldrh	r3, [r4, #12]
 800cb52:	6020      	str	r0, [r4, #0]
 800cb54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb58:	81a3      	strh	r3, [r4, #12]
 800cb5a:	9b00      	ldr	r3, [sp, #0]
 800cb5c:	6163      	str	r3, [r4, #20]
 800cb5e:	9b01      	ldr	r3, [sp, #4]
 800cb60:	6120      	str	r0, [r4, #16]
 800cb62:	b15b      	cbz	r3, 800cb7c <__smakebuf_r+0x74>
 800cb64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb68:	4630      	mov	r0, r6
 800cb6a:	f000 f86b 	bl	800cc44 <_isatty_r>
 800cb6e:	b128      	cbz	r0, 800cb7c <__smakebuf_r+0x74>
 800cb70:	89a3      	ldrh	r3, [r4, #12]
 800cb72:	f023 0303 	bic.w	r3, r3, #3
 800cb76:	f043 0301 	orr.w	r3, r3, #1
 800cb7a:	81a3      	strh	r3, [r4, #12]
 800cb7c:	89a0      	ldrh	r0, [r4, #12]
 800cb7e:	4305      	orrs	r5, r0
 800cb80:	81a5      	strh	r5, [r4, #12]
 800cb82:	e7cd      	b.n	800cb20 <__smakebuf_r+0x18>
 800cb84:	0800c409 	.word	0x0800c409

0800cb88 <_malloc_usable_size_r>:
 800cb88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb8c:	1f18      	subs	r0, r3, #4
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	bfbc      	itt	lt
 800cb92:	580b      	ldrlt	r3, [r1, r0]
 800cb94:	18c0      	addlt	r0, r0, r3
 800cb96:	4770      	bx	lr

0800cb98 <_raise_r>:
 800cb98:	291f      	cmp	r1, #31
 800cb9a:	b538      	push	{r3, r4, r5, lr}
 800cb9c:	4604      	mov	r4, r0
 800cb9e:	460d      	mov	r5, r1
 800cba0:	d904      	bls.n	800cbac <_raise_r+0x14>
 800cba2:	2316      	movs	r3, #22
 800cba4:	6003      	str	r3, [r0, #0]
 800cba6:	f04f 30ff 	mov.w	r0, #4294967295
 800cbaa:	bd38      	pop	{r3, r4, r5, pc}
 800cbac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cbae:	b112      	cbz	r2, 800cbb6 <_raise_r+0x1e>
 800cbb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cbb4:	b94b      	cbnz	r3, 800cbca <_raise_r+0x32>
 800cbb6:	4620      	mov	r0, r4
 800cbb8:	f000 f830 	bl	800cc1c <_getpid_r>
 800cbbc:	462a      	mov	r2, r5
 800cbbe:	4601      	mov	r1, r0
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbc6:	f000 b817 	b.w	800cbf8 <_kill_r>
 800cbca:	2b01      	cmp	r3, #1
 800cbcc:	d00a      	beq.n	800cbe4 <_raise_r+0x4c>
 800cbce:	1c59      	adds	r1, r3, #1
 800cbd0:	d103      	bne.n	800cbda <_raise_r+0x42>
 800cbd2:	2316      	movs	r3, #22
 800cbd4:	6003      	str	r3, [r0, #0]
 800cbd6:	2001      	movs	r0, #1
 800cbd8:	e7e7      	b.n	800cbaa <_raise_r+0x12>
 800cbda:	2400      	movs	r4, #0
 800cbdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cbe0:	4628      	mov	r0, r5
 800cbe2:	4798      	blx	r3
 800cbe4:	2000      	movs	r0, #0
 800cbe6:	e7e0      	b.n	800cbaa <_raise_r+0x12>

0800cbe8 <raise>:
 800cbe8:	4b02      	ldr	r3, [pc, #8]	; (800cbf4 <raise+0xc>)
 800cbea:	4601      	mov	r1, r0
 800cbec:	6818      	ldr	r0, [r3, #0]
 800cbee:	f7ff bfd3 	b.w	800cb98 <_raise_r>
 800cbf2:	bf00      	nop
 800cbf4:	200000f0 	.word	0x200000f0

0800cbf8 <_kill_r>:
 800cbf8:	b538      	push	{r3, r4, r5, lr}
 800cbfa:	4d07      	ldr	r5, [pc, #28]	; (800cc18 <_kill_r+0x20>)
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	4604      	mov	r4, r0
 800cc00:	4608      	mov	r0, r1
 800cc02:	4611      	mov	r1, r2
 800cc04:	602b      	str	r3, [r5, #0]
 800cc06:	f7f6 f8d5 	bl	8002db4 <_kill>
 800cc0a:	1c43      	adds	r3, r0, #1
 800cc0c:	d102      	bne.n	800cc14 <_kill_r+0x1c>
 800cc0e:	682b      	ldr	r3, [r5, #0]
 800cc10:	b103      	cbz	r3, 800cc14 <_kill_r+0x1c>
 800cc12:	6023      	str	r3, [r4, #0]
 800cc14:	bd38      	pop	{r3, r4, r5, pc}
 800cc16:	bf00      	nop
 800cc18:	20000920 	.word	0x20000920

0800cc1c <_getpid_r>:
 800cc1c:	f7f6 b8c2 	b.w	8002da4 <_getpid>

0800cc20 <_fstat_r>:
 800cc20:	b538      	push	{r3, r4, r5, lr}
 800cc22:	4d07      	ldr	r5, [pc, #28]	; (800cc40 <_fstat_r+0x20>)
 800cc24:	2300      	movs	r3, #0
 800cc26:	4604      	mov	r4, r0
 800cc28:	4608      	mov	r0, r1
 800cc2a:	4611      	mov	r1, r2
 800cc2c:	602b      	str	r3, [r5, #0]
 800cc2e:	f7f6 f920 	bl	8002e72 <_fstat>
 800cc32:	1c43      	adds	r3, r0, #1
 800cc34:	d102      	bne.n	800cc3c <_fstat_r+0x1c>
 800cc36:	682b      	ldr	r3, [r5, #0]
 800cc38:	b103      	cbz	r3, 800cc3c <_fstat_r+0x1c>
 800cc3a:	6023      	str	r3, [r4, #0]
 800cc3c:	bd38      	pop	{r3, r4, r5, pc}
 800cc3e:	bf00      	nop
 800cc40:	20000920 	.word	0x20000920

0800cc44 <_isatty_r>:
 800cc44:	b538      	push	{r3, r4, r5, lr}
 800cc46:	4d06      	ldr	r5, [pc, #24]	; (800cc60 <_isatty_r+0x1c>)
 800cc48:	2300      	movs	r3, #0
 800cc4a:	4604      	mov	r4, r0
 800cc4c:	4608      	mov	r0, r1
 800cc4e:	602b      	str	r3, [r5, #0]
 800cc50:	f7f6 f91f 	bl	8002e92 <_isatty>
 800cc54:	1c43      	adds	r3, r0, #1
 800cc56:	d102      	bne.n	800cc5e <_isatty_r+0x1a>
 800cc58:	682b      	ldr	r3, [r5, #0]
 800cc5a:	b103      	cbz	r3, 800cc5e <_isatty_r+0x1a>
 800cc5c:	6023      	str	r3, [r4, #0]
 800cc5e:	bd38      	pop	{r3, r4, r5, pc}
 800cc60:	20000920 	.word	0x20000920

0800cc64 <_init>:
 800cc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc66:	bf00      	nop
 800cc68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc6a:	bc08      	pop	{r3}
 800cc6c:	469e      	mov	lr, r3
 800cc6e:	4770      	bx	lr

0800cc70 <_fini>:
 800cc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc72:	bf00      	nop
 800cc74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc76:	bc08      	pop	{r3}
 800cc78:	469e      	mov	lr, r3
 800cc7a:	4770      	bx	lr
