
Robot_4D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c78c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  0800c920  0800c920  0001c920  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce5c  0800ce5c  000202c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce5c  0800ce5c  0001ce5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce64  0800ce64  000202c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce64  0800ce64  0001ce64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce68  0800ce68  0001ce68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c0  20000000  0800ce6c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202c0  2**0
                  CONTENTS
 10 .bss          00000634  200002c0  200002c0  000202c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008f4  200008f4  000202c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010932  00000000  00000000  000202f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002340  00000000  00000000  00030c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e70  00000000  00000000  00032f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d88  00000000  00000000  00033dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000222a2  00000000  00000000  00034b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010700  00000000  00000000  00056e02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd511  00000000  00000000  00067502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00134a13  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054d0  00000000  00000000  00134a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c0 	.word	0x200002c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c904 	.word	0x0800c904

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c4 	.word	0x200002c4
 80001cc:	0800c904 	.word	0x0800c904

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_frsub>:
 8000c88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c8c:	e002      	b.n	8000c94 <__addsf3>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_fsub>:
 8000c90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c94 <__addsf3>:
 8000c94:	0042      	lsls	r2, r0, #1
 8000c96:	bf1f      	itttt	ne
 8000c98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c9c:	ea92 0f03 	teqne	r2, r3
 8000ca0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ca4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca8:	d06a      	beq.n	8000d80 <__addsf3+0xec>
 8000caa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cb2:	bfc1      	itttt	gt
 8000cb4:	18d2      	addgt	r2, r2, r3
 8000cb6:	4041      	eorgt	r1, r0
 8000cb8:	4048      	eorgt	r0, r1
 8000cba:	4041      	eorgt	r1, r0
 8000cbc:	bfb8      	it	lt
 8000cbe:	425b      	neglt	r3, r3
 8000cc0:	2b19      	cmp	r3, #25
 8000cc2:	bf88      	it	hi
 8000cc4:	4770      	bxhi	lr
 8000cc6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cd2:	bf18      	it	ne
 8000cd4:	4240      	negne	r0, r0
 8000cd6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cda:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cde:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4249      	negne	r1, r1
 8000ce6:	ea92 0f03 	teq	r2, r3
 8000cea:	d03f      	beq.n	8000d6c <__addsf3+0xd8>
 8000cec:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cf4:	eb10 000c 	adds.w	r0, r0, ip
 8000cf8:	f1c3 0320 	rsb	r3, r3, #32
 8000cfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000d00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__addsf3+0x78>
 8000d06:	4249      	negs	r1, r1
 8000d08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d10:	d313      	bcc.n	8000d3a <__addsf3+0xa6>
 8000d12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d16:	d306      	bcc.n	8000d26 <__addsf3+0x92>
 8000d18:	0840      	lsrs	r0, r0, #1
 8000d1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d1e:	f102 0201 	add.w	r2, r2, #1
 8000d22:	2afe      	cmp	r2, #254	; 0xfe
 8000d24:	d251      	bcs.n	8000dca <__addsf3+0x136>
 8000d26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2e:	bf08      	it	eq
 8000d30:	f020 0001 	biceq.w	r0, r0, #1
 8000d34:	ea40 0003 	orr.w	r0, r0, r3
 8000d38:	4770      	bx	lr
 8000d3a:	0049      	lsls	r1, r1, #1
 8000d3c:	eb40 0000 	adc.w	r0, r0, r0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	bf28      	it	cs
 8000d44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d48:	d2ed      	bcs.n	8000d26 <__addsf3+0x92>
 8000d4a:	fab0 fc80 	clz	ip, r0
 8000d4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d52:	ebb2 020c 	subs.w	r2, r2, ip
 8000d56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d5a:	bfaa      	itet	ge
 8000d5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d60:	4252      	neglt	r2, r2
 8000d62:	4318      	orrge	r0, r3
 8000d64:	bfbc      	itt	lt
 8000d66:	40d0      	lsrlt	r0, r2
 8000d68:	4318      	orrlt	r0, r3
 8000d6a:	4770      	bx	lr
 8000d6c:	f092 0f00 	teq	r2, #0
 8000d70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d74:	bf06      	itte	eq
 8000d76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d7a:	3201      	addeq	r2, #1
 8000d7c:	3b01      	subne	r3, #1
 8000d7e:	e7b5      	b.n	8000cec <__addsf3+0x58>
 8000d80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d88:	bf18      	it	ne
 8000d8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d8e:	d021      	beq.n	8000dd4 <__addsf3+0x140>
 8000d90:	ea92 0f03 	teq	r2, r3
 8000d94:	d004      	beq.n	8000da0 <__addsf3+0x10c>
 8000d96:	f092 0f00 	teq	r2, #0
 8000d9a:	bf08      	it	eq
 8000d9c:	4608      	moveq	r0, r1
 8000d9e:	4770      	bx	lr
 8000da0:	ea90 0f01 	teq	r0, r1
 8000da4:	bf1c      	itt	ne
 8000da6:	2000      	movne	r0, #0
 8000da8:	4770      	bxne	lr
 8000daa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dae:	d104      	bne.n	8000dba <__addsf3+0x126>
 8000db0:	0040      	lsls	r0, r0, #1
 8000db2:	bf28      	it	cs
 8000db4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dbe:	bf3c      	itt	cc
 8000dc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dc4:	4770      	bxcc	lr
 8000dc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dd8:	bf16      	itet	ne
 8000dda:	4608      	movne	r0, r1
 8000ddc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de0:	4601      	movne	r1, r0
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	bf06      	itte	eq
 8000de6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dea:	ea90 0f01 	teqeq	r0, r1
 8000dee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_ui2f>:
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e004      	b.n	8000e04 <__aeabi_i2f+0x8>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_i2f>:
 8000dfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e00:	bf48      	it	mi
 8000e02:	4240      	negmi	r0, r0
 8000e04:	ea5f 0c00 	movs.w	ip, r0
 8000e08:	bf08      	it	eq
 8000e0a:	4770      	bxeq	lr
 8000e0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e10:	4601      	mov	r1, r0
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	e01c      	b.n	8000e52 <__aeabi_l2f+0x2a>

08000e18 <__aeabi_ul2f>:
 8000e18:	ea50 0201 	orrs.w	r2, r0, r1
 8000e1c:	bf08      	it	eq
 8000e1e:	4770      	bxeq	lr
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e00a      	b.n	8000e3c <__aeabi_l2f+0x14>
 8000e26:	bf00      	nop

08000e28 <__aeabi_l2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e34:	d502      	bpl.n	8000e3c <__aeabi_l2f+0x14>
 8000e36:	4240      	negs	r0, r0
 8000e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3c:	ea5f 0c01 	movs.w	ip, r1
 8000e40:	bf02      	ittt	eq
 8000e42:	4684      	moveq	ip, r0
 8000e44:	4601      	moveq	r1, r0
 8000e46:	2000      	moveq	r0, #0
 8000e48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e4c:	bf08      	it	eq
 8000e4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e56:	fabc f28c 	clz	r2, ip
 8000e5a:	3a08      	subs	r2, #8
 8000e5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e60:	db10      	blt.n	8000e84 <__aeabi_l2f+0x5c>
 8000e62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e66:	4463      	add	r3, ip
 8000e68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6c:	f1c2 0220 	rsb	r2, r2, #32
 8000e70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e74:	fa20 f202 	lsr.w	r2, r0, r2
 8000e78:	eb43 0002 	adc.w	r0, r3, r2
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f102 0220 	add.w	r2, r2, #32
 8000e88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e94:	fa21 f202 	lsr.w	r2, r1, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_uldivmod>:
 8000ea4:	b953      	cbnz	r3, 8000ebc <__aeabi_uldivmod+0x18>
 8000ea6:	b94a      	cbnz	r2, 8000ebc <__aeabi_uldivmod+0x18>
 8000ea8:	2900      	cmp	r1, #0
 8000eaa:	bf08      	it	eq
 8000eac:	2800      	cmpeq	r0, #0
 8000eae:	bf1c      	itt	ne
 8000eb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000eb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000eb8:	f000 b9aa 	b.w	8001210 <__aeabi_idiv0>
 8000ebc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ec0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ec4:	f000 f83c 	bl	8000f40 <__udivmoddi4>
 8000ec8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ecc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ed0:	b004      	add	sp, #16
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_d2lz>:
 8000ed4:	b538      	push	{r3, r4, r5, lr}
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2300      	movs	r3, #0
 8000eda:	4604      	mov	r4, r0
 8000edc:	460d      	mov	r5, r1
 8000ede:	f7ff fdfd 	bl	8000adc <__aeabi_dcmplt>
 8000ee2:	b928      	cbnz	r0, 8000ef0 <__aeabi_d2lz+0x1c>
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	4629      	mov	r1, r5
 8000ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000eec:	f000 b80a 	b.w	8000f04 <__aeabi_d2ulz>
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000ef6:	f000 f805 	bl	8000f04 <__aeabi_d2ulz>
 8000efa:	4240      	negs	r0, r0
 8000efc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f00:	bd38      	pop	{r3, r4, r5, pc}
 8000f02:	bf00      	nop

08000f04 <__aeabi_d2ulz>:
 8000f04:	b5d0      	push	{r4, r6, r7, lr}
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <__aeabi_d2ulz+0x34>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	4606      	mov	r6, r0
 8000f0c:	460f      	mov	r7, r1
 8000f0e:	f7ff fb73 	bl	80005f8 <__aeabi_dmul>
 8000f12:	f7ff fe49 	bl	8000ba8 <__aeabi_d2uiz>
 8000f16:	4604      	mov	r4, r0
 8000f18:	f7ff faf4 	bl	8000504 <__aeabi_ui2d>
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <__aeabi_d2ulz+0x38>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f7ff fb6a 	bl	80005f8 <__aeabi_dmul>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4630      	mov	r0, r6
 8000f2a:	4639      	mov	r1, r7
 8000f2c:	f7ff f9ac 	bl	8000288 <__aeabi_dsub>
 8000f30:	f7ff fe3a 	bl	8000ba8 <__aeabi_d2uiz>
 8000f34:	4621      	mov	r1, r4
 8000f36:	bdd0      	pop	{r4, r6, r7, pc}
 8000f38:	3df00000 	.word	0x3df00000
 8000f3c:	41f00000 	.word	0x41f00000

08000f40 <__udivmoddi4>:
 8000f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f44:	9d08      	ldr	r5, [sp, #32]
 8000f46:	4604      	mov	r4, r0
 8000f48:	468e      	mov	lr, r1
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d14d      	bne.n	8000fea <__udivmoddi4+0xaa>
 8000f4e:	428a      	cmp	r2, r1
 8000f50:	4694      	mov	ip, r2
 8000f52:	d969      	bls.n	8001028 <__udivmoddi4+0xe8>
 8000f54:	fab2 f282 	clz	r2, r2
 8000f58:	b152      	cbz	r2, 8000f70 <__udivmoddi4+0x30>
 8000f5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000f5e:	f1c2 0120 	rsb	r1, r2, #32
 8000f62:	fa20 f101 	lsr.w	r1, r0, r1
 8000f66:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f6a:	ea41 0e03 	orr.w	lr, r1, r3
 8000f6e:	4094      	lsls	r4, r2
 8000f70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f74:	0c21      	lsrs	r1, r4, #16
 8000f76:	fbbe f6f8 	udiv	r6, lr, r8
 8000f7a:	fa1f f78c 	uxth.w	r7, ip
 8000f7e:	fb08 e316 	mls	r3, r8, r6, lr
 8000f82:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000f86:	fb06 f107 	mul.w	r1, r6, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d90a      	bls.n	8000fa4 <__udivmoddi4+0x64>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f96:	f080 811f 	bcs.w	80011d8 <__udivmoddi4+0x298>
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	f240 811c 	bls.w	80011d8 <__udivmoddi4+0x298>
 8000fa0:	3e02      	subs	r6, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1a5b      	subs	r3, r3, r1
 8000fa6:	b2a4      	uxth	r4, r4
 8000fa8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fac:	fb08 3310 	mls	r3, r8, r0, r3
 8000fb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb4:	fb00 f707 	mul.w	r7, r0, r7
 8000fb8:	42a7      	cmp	r7, r4
 8000fba:	d90a      	bls.n	8000fd2 <__udivmoddi4+0x92>
 8000fbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fc4:	f080 810a 	bcs.w	80011dc <__udivmoddi4+0x29c>
 8000fc8:	42a7      	cmp	r7, r4
 8000fca:	f240 8107 	bls.w	80011dc <__udivmoddi4+0x29c>
 8000fce:	4464      	add	r4, ip
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000fd6:	1be4      	subs	r4, r4, r7
 8000fd8:	2600      	movs	r6, #0
 8000fda:	b11d      	cbz	r5, 8000fe4 <__udivmoddi4+0xa4>
 8000fdc:	40d4      	lsrs	r4, r2
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e9c5 4300 	strd	r4, r3, [r5]
 8000fe4:	4631      	mov	r1, r6
 8000fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fea:	428b      	cmp	r3, r1
 8000fec:	d909      	bls.n	8001002 <__udivmoddi4+0xc2>
 8000fee:	2d00      	cmp	r5, #0
 8000ff0:	f000 80ef 	beq.w	80011d2 <__udivmoddi4+0x292>
 8000ff4:	2600      	movs	r6, #0
 8000ff6:	e9c5 0100 	strd	r0, r1, [r5]
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	4631      	mov	r1, r6
 8000ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001002:	fab3 f683 	clz	r6, r3
 8001006:	2e00      	cmp	r6, #0
 8001008:	d14a      	bne.n	80010a0 <__udivmoddi4+0x160>
 800100a:	428b      	cmp	r3, r1
 800100c:	d302      	bcc.n	8001014 <__udivmoddi4+0xd4>
 800100e:	4282      	cmp	r2, r0
 8001010:	f200 80f9 	bhi.w	8001206 <__udivmoddi4+0x2c6>
 8001014:	1a84      	subs	r4, r0, r2
 8001016:	eb61 0303 	sbc.w	r3, r1, r3
 800101a:	2001      	movs	r0, #1
 800101c:	469e      	mov	lr, r3
 800101e:	2d00      	cmp	r5, #0
 8001020:	d0e0      	beq.n	8000fe4 <__udivmoddi4+0xa4>
 8001022:	e9c5 4e00 	strd	r4, lr, [r5]
 8001026:	e7dd      	b.n	8000fe4 <__udivmoddi4+0xa4>
 8001028:	b902      	cbnz	r2, 800102c <__udivmoddi4+0xec>
 800102a:	deff      	udf	#255	; 0xff
 800102c:	fab2 f282 	clz	r2, r2
 8001030:	2a00      	cmp	r2, #0
 8001032:	f040 8092 	bne.w	800115a <__udivmoddi4+0x21a>
 8001036:	eba1 010c 	sub.w	r1, r1, ip
 800103a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800103e:	fa1f fe8c 	uxth.w	lr, ip
 8001042:	2601      	movs	r6, #1
 8001044:	0c20      	lsrs	r0, r4, #16
 8001046:	fbb1 f3f7 	udiv	r3, r1, r7
 800104a:	fb07 1113 	mls	r1, r7, r3, r1
 800104e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001052:	fb0e f003 	mul.w	r0, lr, r3
 8001056:	4288      	cmp	r0, r1
 8001058:	d908      	bls.n	800106c <__udivmoddi4+0x12c>
 800105a:	eb1c 0101 	adds.w	r1, ip, r1
 800105e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001062:	d202      	bcs.n	800106a <__udivmoddi4+0x12a>
 8001064:	4288      	cmp	r0, r1
 8001066:	f200 80cb 	bhi.w	8001200 <__udivmoddi4+0x2c0>
 800106a:	4643      	mov	r3, r8
 800106c:	1a09      	subs	r1, r1, r0
 800106e:	b2a4      	uxth	r4, r4
 8001070:	fbb1 f0f7 	udiv	r0, r1, r7
 8001074:	fb07 1110 	mls	r1, r7, r0, r1
 8001078:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800107c:	fb0e fe00 	mul.w	lr, lr, r0
 8001080:	45a6      	cmp	lr, r4
 8001082:	d908      	bls.n	8001096 <__udivmoddi4+0x156>
 8001084:	eb1c 0404 	adds.w	r4, ip, r4
 8001088:	f100 31ff 	add.w	r1, r0, #4294967295
 800108c:	d202      	bcs.n	8001094 <__udivmoddi4+0x154>
 800108e:	45a6      	cmp	lr, r4
 8001090:	f200 80bb 	bhi.w	800120a <__udivmoddi4+0x2ca>
 8001094:	4608      	mov	r0, r1
 8001096:	eba4 040e 	sub.w	r4, r4, lr
 800109a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800109e:	e79c      	b.n	8000fda <__udivmoddi4+0x9a>
 80010a0:	f1c6 0720 	rsb	r7, r6, #32
 80010a4:	40b3      	lsls	r3, r6
 80010a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80010aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80010ae:	fa20 f407 	lsr.w	r4, r0, r7
 80010b2:	fa01 f306 	lsl.w	r3, r1, r6
 80010b6:	431c      	orrs	r4, r3
 80010b8:	40f9      	lsrs	r1, r7
 80010ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80010be:	fa00 f306 	lsl.w	r3, r0, r6
 80010c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80010c6:	0c20      	lsrs	r0, r4, #16
 80010c8:	fa1f fe8c 	uxth.w	lr, ip
 80010cc:	fb09 1118 	mls	r1, r9, r8, r1
 80010d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010d4:	fb08 f00e 	mul.w	r0, r8, lr
 80010d8:	4288      	cmp	r0, r1
 80010da:	fa02 f206 	lsl.w	r2, r2, r6
 80010de:	d90b      	bls.n	80010f8 <__udivmoddi4+0x1b8>
 80010e0:	eb1c 0101 	adds.w	r1, ip, r1
 80010e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80010e8:	f080 8088 	bcs.w	80011fc <__udivmoddi4+0x2bc>
 80010ec:	4288      	cmp	r0, r1
 80010ee:	f240 8085 	bls.w	80011fc <__udivmoddi4+0x2bc>
 80010f2:	f1a8 0802 	sub.w	r8, r8, #2
 80010f6:	4461      	add	r1, ip
 80010f8:	1a09      	subs	r1, r1, r0
 80010fa:	b2a4      	uxth	r4, r4
 80010fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8001100:	fb09 1110 	mls	r1, r9, r0, r1
 8001104:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001108:	fb00 fe0e 	mul.w	lr, r0, lr
 800110c:	458e      	cmp	lr, r1
 800110e:	d908      	bls.n	8001122 <__udivmoddi4+0x1e2>
 8001110:	eb1c 0101 	adds.w	r1, ip, r1
 8001114:	f100 34ff 	add.w	r4, r0, #4294967295
 8001118:	d26c      	bcs.n	80011f4 <__udivmoddi4+0x2b4>
 800111a:	458e      	cmp	lr, r1
 800111c:	d96a      	bls.n	80011f4 <__udivmoddi4+0x2b4>
 800111e:	3802      	subs	r0, #2
 8001120:	4461      	add	r1, ip
 8001122:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001126:	fba0 9402 	umull	r9, r4, r0, r2
 800112a:	eba1 010e 	sub.w	r1, r1, lr
 800112e:	42a1      	cmp	r1, r4
 8001130:	46c8      	mov	r8, r9
 8001132:	46a6      	mov	lr, r4
 8001134:	d356      	bcc.n	80011e4 <__udivmoddi4+0x2a4>
 8001136:	d053      	beq.n	80011e0 <__udivmoddi4+0x2a0>
 8001138:	b15d      	cbz	r5, 8001152 <__udivmoddi4+0x212>
 800113a:	ebb3 0208 	subs.w	r2, r3, r8
 800113e:	eb61 010e 	sbc.w	r1, r1, lr
 8001142:	fa01 f707 	lsl.w	r7, r1, r7
 8001146:	fa22 f306 	lsr.w	r3, r2, r6
 800114a:	40f1      	lsrs	r1, r6
 800114c:	431f      	orrs	r7, r3
 800114e:	e9c5 7100 	strd	r7, r1, [r5]
 8001152:	2600      	movs	r6, #0
 8001154:	4631      	mov	r1, r6
 8001156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800115a:	f1c2 0320 	rsb	r3, r2, #32
 800115e:	40d8      	lsrs	r0, r3
 8001160:	fa0c fc02 	lsl.w	ip, ip, r2
 8001164:	fa21 f303 	lsr.w	r3, r1, r3
 8001168:	4091      	lsls	r1, r2
 800116a:	4301      	orrs	r1, r0
 800116c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001170:	fa1f fe8c 	uxth.w	lr, ip
 8001174:	fbb3 f0f7 	udiv	r0, r3, r7
 8001178:	fb07 3610 	mls	r6, r7, r0, r3
 800117c:	0c0b      	lsrs	r3, r1, #16
 800117e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001182:	fb00 f60e 	mul.w	r6, r0, lr
 8001186:	429e      	cmp	r6, r3
 8001188:	fa04 f402 	lsl.w	r4, r4, r2
 800118c:	d908      	bls.n	80011a0 <__udivmoddi4+0x260>
 800118e:	eb1c 0303 	adds.w	r3, ip, r3
 8001192:	f100 38ff 	add.w	r8, r0, #4294967295
 8001196:	d22f      	bcs.n	80011f8 <__udivmoddi4+0x2b8>
 8001198:	429e      	cmp	r6, r3
 800119a:	d92d      	bls.n	80011f8 <__udivmoddi4+0x2b8>
 800119c:	3802      	subs	r0, #2
 800119e:	4463      	add	r3, ip
 80011a0:	1b9b      	subs	r3, r3, r6
 80011a2:	b289      	uxth	r1, r1
 80011a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80011a8:	fb07 3316 	mls	r3, r7, r6, r3
 80011ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80011b0:	fb06 f30e 	mul.w	r3, r6, lr
 80011b4:	428b      	cmp	r3, r1
 80011b6:	d908      	bls.n	80011ca <__udivmoddi4+0x28a>
 80011b8:	eb1c 0101 	adds.w	r1, ip, r1
 80011bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80011c0:	d216      	bcs.n	80011f0 <__udivmoddi4+0x2b0>
 80011c2:	428b      	cmp	r3, r1
 80011c4:	d914      	bls.n	80011f0 <__udivmoddi4+0x2b0>
 80011c6:	3e02      	subs	r6, #2
 80011c8:	4461      	add	r1, ip
 80011ca:	1ac9      	subs	r1, r1, r3
 80011cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80011d0:	e738      	b.n	8001044 <__udivmoddi4+0x104>
 80011d2:	462e      	mov	r6, r5
 80011d4:	4628      	mov	r0, r5
 80011d6:	e705      	b.n	8000fe4 <__udivmoddi4+0xa4>
 80011d8:	4606      	mov	r6, r0
 80011da:	e6e3      	b.n	8000fa4 <__udivmoddi4+0x64>
 80011dc:	4618      	mov	r0, r3
 80011de:	e6f8      	b.n	8000fd2 <__udivmoddi4+0x92>
 80011e0:	454b      	cmp	r3, r9
 80011e2:	d2a9      	bcs.n	8001138 <__udivmoddi4+0x1f8>
 80011e4:	ebb9 0802 	subs.w	r8, r9, r2
 80011e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80011ec:	3801      	subs	r0, #1
 80011ee:	e7a3      	b.n	8001138 <__udivmoddi4+0x1f8>
 80011f0:	4646      	mov	r6, r8
 80011f2:	e7ea      	b.n	80011ca <__udivmoddi4+0x28a>
 80011f4:	4620      	mov	r0, r4
 80011f6:	e794      	b.n	8001122 <__udivmoddi4+0x1e2>
 80011f8:	4640      	mov	r0, r8
 80011fa:	e7d1      	b.n	80011a0 <__udivmoddi4+0x260>
 80011fc:	46d0      	mov	r8, sl
 80011fe:	e77b      	b.n	80010f8 <__udivmoddi4+0x1b8>
 8001200:	3b02      	subs	r3, #2
 8001202:	4461      	add	r1, ip
 8001204:	e732      	b.n	800106c <__udivmoddi4+0x12c>
 8001206:	4630      	mov	r0, r6
 8001208:	e709      	b.n	800101e <__udivmoddi4+0xde>
 800120a:	4464      	add	r4, ip
 800120c:	3802      	subs	r0, #2
 800120e:	e742      	b.n	8001096 <__udivmoddi4+0x156>

08001210 <__aeabi_idiv0>:
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop

08001214 <UART_Handle>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void UART_Handle(char* data)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af02      	add	r7, sp, #8
 800121a:	6078      	str	r0, [r7, #4]
  if (flag_uart_rx == 1 && strstr(data, "\n"))
 800121c:	4b3b      	ldr	r3, [pc, #236]	; (800130c <UART_Handle+0xf8>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d16f      	bne.n	8001304 <UART_Handle+0xf0>
 8001224:	210a      	movs	r1, #10
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f007 f9b1 	bl	800858e <strchr>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d068      	beq.n	8001304 <UART_Handle+0xf0>
  {
    if (strstr(data, "t1"))
 8001232:	4937      	ldr	r1, [pc, #220]	; (8001310 <UART_Handle+0xfc>)
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f007 f9b7 	bl	80085a8 <strstr>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d02a      	beq.n	8001296 <UART_Handle+0x82>
    {
      sscanf(data, "t1:%f,t2:%f,t3:%f,t4:%f\n", &t1, &t2, &t3, &t4);
 8001240:	4b34      	ldr	r3, [pc, #208]	; (8001314 <UART_Handle+0x100>)
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	4b34      	ldr	r3, [pc, #208]	; (8001318 <UART_Handle+0x104>)
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	4b34      	ldr	r3, [pc, #208]	; (800131c <UART_Handle+0x108>)
 800124a:	4a35      	ldr	r2, [pc, #212]	; (8001320 <UART_Handle+0x10c>)
 800124c:	4935      	ldr	r1, [pc, #212]	; (8001324 <UART_Handle+0x110>)
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f007 f92c 	bl	80084ac <siscanf>
      MOTOR_setAngle(&motor1, t1);
 8001254:	4b32      	ldr	r3, [pc, #200]	; (8001320 <UART_Handle+0x10c>)
 8001256:	edd3 7a00 	vldr	s15, [r3]
 800125a:	eeb0 0a67 	vmov.f32	s0, s15
 800125e:	4832      	ldr	r0, [pc, #200]	; (8001328 <UART_Handle+0x114>)
 8001260:	f005 ff88 	bl	8007174 <MOTOR_setAngle>
      MOTOR_setAngle(&motor2, t2);
 8001264:	4b2d      	ldr	r3, [pc, #180]	; (800131c <UART_Handle+0x108>)
 8001266:	edd3 7a00 	vldr	s15, [r3]
 800126a:	eeb0 0a67 	vmov.f32	s0, s15
 800126e:	482f      	ldr	r0, [pc, #188]	; (800132c <UART_Handle+0x118>)
 8001270:	f005 ff80 	bl	8007174 <MOTOR_setAngle>
      MOTOR_setAngle(&motor3, t3);
 8001274:	4b28      	ldr	r3, [pc, #160]	; (8001318 <UART_Handle+0x104>)
 8001276:	edd3 7a00 	vldr	s15, [r3]
 800127a:	eeb0 0a67 	vmov.f32	s0, s15
 800127e:	482c      	ldr	r0, [pc, #176]	; (8001330 <UART_Handle+0x11c>)
 8001280:	f005 ff78 	bl	8007174 <MOTOR_setAngle>
      MOTOR_setAngle(&motor4, t4);
 8001284:	4b23      	ldr	r3, [pc, #140]	; (8001314 <UART_Handle+0x100>)
 8001286:	edd3 7a00 	vldr	s15, [r3]
 800128a:	eeb0 0a67 	vmov.f32	s0, s15
 800128e:	4829      	ldr	r0, [pc, #164]	; (8001334 <UART_Handle+0x120>)
 8001290:	f005 ff70 	bl	8007174 <MOTOR_setAngle>
 8001294:	e02a      	b.n	80012ec <UART_Handle+0xd8>
    }
    else if (strstr(data, "home"))
 8001296:	4928      	ldr	r1, [pc, #160]	; (8001338 <UART_Handle+0x124>)
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f007 f985 	bl	80085a8 <strstr>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d01a      	beq.n	80012da <UART_Handle+0xc6>
	{
    	setHome234Flag = 1;
 80012a4:	4b25      	ldr	r3, [pc, #148]	; (800133c <UART_Handle+0x128>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	701a      	strb	r2, [r3, #0]
    	setHome1234Flag = 1;
 80012aa:	4b25      	ldr	r3, [pc, #148]	; (8001340 <UART_Handle+0x12c>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	701a      	strb	r2, [r3, #0]
    	setHomeJ1 = setHomeJ2 = setHomeJ3 = setHomeJ4 = 0;
 80012b0:	4b24      	ldr	r3, [pc, #144]	; (8001344 <UART_Handle+0x130>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
 80012b6:	4b23      	ldr	r3, [pc, #140]	; (8001344 <UART_Handle+0x130>)
 80012b8:	781a      	ldrb	r2, [r3, #0]
 80012ba:	4b23      	ldr	r3, [pc, #140]	; (8001348 <UART_Handle+0x134>)
 80012bc:	701a      	strb	r2, [r3, #0]
 80012be:	4b22      	ldr	r3, [pc, #136]	; (8001348 <UART_Handle+0x134>)
 80012c0:	781a      	ldrb	r2, [r3, #0]
 80012c2:	4b22      	ldr	r3, [pc, #136]	; (800134c <UART_Handle+0x138>)
 80012c4:	701a      	strb	r2, [r3, #0]
 80012c6:	4b21      	ldr	r3, [pc, #132]	; (800134c <UART_Handle+0x138>)
 80012c8:	781a      	ldrb	r2, [r3, #0]
 80012ca:	4b21      	ldr	r3, [pc, #132]	; (8001350 <UART_Handle+0x13c>)
 80012cc:	701a      	strb	r2, [r3, #0]
    	MOTOR_setAngle(&motor2, 300);
 80012ce:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8001354 <UART_Handle+0x140>
 80012d2:	4816      	ldr	r0, [pc, #88]	; (800132c <UART_Handle+0x118>)
 80012d4:	f005 ff4e 	bl	8007174 <MOTOR_setAngle>
 80012d8:	e008      	b.n	80012ec <UART_Handle+0xd8>
	}
    else if(strstr(data,"Reset"))
 80012da:	491f      	ldr	r1, [pc, #124]	; (8001358 <UART_Handle+0x144>)
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f007 f963 	bl	80085a8 <strstr>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <UART_Handle+0xd8>
	{
    	HAL_NVIC_SystemReset();
 80012e8:	f001 fe21 	bl	8002f2e <HAL_NVIC_SystemReset>
	}
    flag_uart_rx = 0;
 80012ec:	4b07      	ldr	r3, [pc, #28]	; (800130c <UART_Handle+0xf8>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
	memset(data, 0, strlen(data));
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7fe ff6c 	bl	80001d0 <strlen>
 80012f8:	4603      	mov	r3, r0
 80012fa:	461a      	mov	r2, r3
 80012fc:	2100      	movs	r1, #0
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f006 fa2c 	bl	800775c <memset>
  }
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	200005dc 	.word	0x200005dc
 8001310:	0800c920 	.word	0x0800c920
 8001314:	200005ec 	.word	0x200005ec
 8001318:	200005e8 	.word	0x200005e8
 800131c:	200005e4 	.word	0x200005e4
 8001320:	200005e0 	.word	0x200005e0
 8001324:	0800c924 	.word	0x0800c924
 8001328:	200005f8 	.word	0x200005f8
 800132c:	200006b0 	.word	0x200006b0
 8001330:	20000768 	.word	0x20000768
 8001334:	20000820 	.word	0x20000820
 8001338:	0800c940 	.word	0x0800c940
 800133c:	200005f5 	.word	0x200005f5
 8001340:	200005f6 	.word	0x200005f6
 8001344:	200005f4 	.word	0x200005f4
 8001348:	200005f3 	.word	0x200005f3
 800134c:	200005f2 	.word	0x200005f2
 8001350:	200005f1 	.word	0x200005f1
 8001354:	43960000 	.word	0x43960000
 8001358:	0800c948 	.word	0x0800c948

0800135c <UartIdle_Init>:
void UartIdle_Init()
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*)uartLogBuffer, MAX_MESG);
 8001360:	2264      	movs	r2, #100	; 0x64
 8001362:	4907      	ldr	r1, [pc, #28]	; (8001380 <UartIdle_Init+0x24>)
 8001364:	4807      	ldr	r0, [pc, #28]	; (8001384 <UartIdle_Init+0x28>)
 8001366:	f004 fb96 	bl	8005a96 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 800136a:	4b07      	ldr	r3, [pc, #28]	; (8001388 <UartIdle_Init+0x2c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <UartIdle_Init+0x2c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 0208 	bic.w	r2, r2, #8
 8001378:	601a      	str	r2, [r3, #0]
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000578 	.word	0x20000578
 8001384:	200004d4 	.word	0x200004d4
 8001388:	20000518 	.word	0x20000518

0800138c <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef* huart, uint16_t Size)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART3)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <HAL_UARTEx_RxEventCallback+0x34>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d10a      	bne.n	80013b8 <HAL_UARTEx_RxEventCallback+0x2c>
  {
    uartLogRxSize = Size;
 80013a2:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <HAL_UARTEx_RxEventCallback+0x38>)
 80013a4:	887b      	ldrh	r3, [r7, #2]
 80013a6:	8013      	strh	r3, [r2, #0]
    flag_uart_rx = 1;
 80013a8:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <HAL_UARTEx_RxEventCallback+0x3c>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	701a      	strb	r2, [r3, #0]
    HAL_UARTEx_ReceiveToIdle_DMA(huart, (uint8_t*)uartLogBuffer, MAX_MESG);
 80013ae:	2264      	movs	r2, #100	; 0x64
 80013b0:	4906      	ldr	r1, [pc, #24]	; (80013cc <HAL_UARTEx_RxEventCallback+0x40>)
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f004 fb6f 	bl	8005a96 <HAL_UARTEx_ReceiveToIdle_DMA>
  }
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40004800 	.word	0x40004800
 80013c4:	200005de 	.word	0x200005de
 80013c8:	200005dc 	.word	0x200005dc
 80013cc:	20000578 	.word	0x20000578

080013d0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	if(htim == &htim9)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a20      	ldr	r2, [pc, #128]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d135      	bne.n	800144c <HAL_TIM_PeriodElapsedCallback+0x7c>
	{
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80013e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013e4:	481e      	ldr	r0, [pc, #120]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80013e6:	f002 fb82 	bl	8003aee <HAL_GPIO_TogglePin>
	  static uint8_t mode = 0;
	  switch (mode)
 80013ea:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	d82e      	bhi.n	8001450 <HAL_TIM_PeriodElapsedCallback+0x80>
 80013f2:	a201      	add	r2, pc, #4	; (adr r2, 80013f8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80013f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f8:	0800140d 	.word	0x0800140d
 80013fc:	0800141b 	.word	0x0800141b
 8001400:	08001429 	.word	0x08001429
 8001404:	08001437 	.word	0x08001437
 8001408:	08001445 	.word	0x08001445
	  {
	  case 0:
		MOTOR_runAngle(&motor1);
 800140c:	4816      	ldr	r0, [pc, #88]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800140e:	f005 fec7 	bl	80071a0 <MOTOR_runAngle>
		mode = 1;
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001414:	2201      	movs	r2, #1
 8001416:	701a      	strb	r2, [r3, #0]
		break;
 8001418:	e01b      	b.n	8001452 <HAL_TIM_PeriodElapsedCallback+0x82>
	  case 1:
		MOTOR_runAngle(&motor2);
 800141a:	4814      	ldr	r0, [pc, #80]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800141c:	f005 fec0 	bl	80071a0 <MOTOR_runAngle>
		mode = 2;
 8001420:	4b10      	ldr	r3, [pc, #64]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001422:	2202      	movs	r2, #2
 8001424:	701a      	strb	r2, [r3, #0]
		break;
 8001426:	e014      	b.n	8001452 <HAL_TIM_PeriodElapsedCallback+0x82>
	  case 2:
		MOTOR_runAngle(&motor3);
 8001428:	4811      	ldr	r0, [pc, #68]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800142a:	f005 feb9 	bl	80071a0 <MOTOR_runAngle>
		mode = 3;
 800142e:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001430:	2203      	movs	r2, #3
 8001432:	701a      	strb	r2, [r3, #0]
		break;
 8001434:	e00d      	b.n	8001452 <HAL_TIM_PeriodElapsedCallback+0x82>
	  case 3:
		MOTOR_runAngle(&motor4);
 8001436:	480f      	ldr	r0, [pc, #60]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001438:	f005 feb2 	bl	80071a0 <MOTOR_runAngle>
		mode = 4;
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800143e:	2204      	movs	r2, #4
 8001440:	701a      	strb	r2, [r3, #0]
		break;
 8001442:	e006      	b.n	8001452 <HAL_TIM_PeriodElapsedCallback+0x82>
	  case 4:
		mode = 0;
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
		break;
 800144a:	e002      	b.n	8001452 <HAL_TIM_PeriodElapsedCallback+0x82>
	  default:
		break;
	  }
	}
 800144c:	bf00      	nop
 800144e:	e000      	b.n	8001452 <HAL_TIM_PeriodElapsedCallback+0x82>
		break;
 8001450:	bf00      	nop
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2000048c 	.word	0x2000048c
 8001460:	40020800 	.word	0x40020800
 8001464:	200008d8 	.word	0x200008d8
 8001468:	200005f8 	.word	0x200005f8
 800146c:	200006b0 	.word	0x200006b0
 8001470:	20000768 	.word	0x20000768
 8001474:	20000820 	.word	0x20000820

08001478 <SetHome>:

void SetHome(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	if(setHome1234Flag == 1 && setHomeOk == 0)
 800147c:	4bb2      	ldr	r3, [pc, #712]	; (8001748 <SetHome+0x2d0>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b01      	cmp	r3, #1
 8001482:	f040 813d 	bne.w	8001700 <SetHome+0x288>
 8001486:	4bb1      	ldr	r3, [pc, #708]	; (800174c <SetHome+0x2d4>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	f040 8138 	bne.w	8001700 <SetHome+0x288>
	{
		if (setHomeJ1 == 1 && setHomeJ2 == 1 && setHomeJ3 == 1 && setHomeJ4 == 1)
 8001490:	4baf      	ldr	r3, [pc, #700]	; (8001750 <SetHome+0x2d8>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d16b      	bne.n	8001570 <SetHome+0xf8>
 8001498:	4bae      	ldr	r3, [pc, #696]	; (8001754 <SetHome+0x2dc>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d167      	bne.n	8001570 <SetHome+0xf8>
 80014a0:	4bad      	ldr	r3, [pc, #692]	; (8001758 <SetHome+0x2e0>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d163      	bne.n	8001570 <SetHome+0xf8>
 80014a8:	4bac      	ldr	r3, [pc, #688]	; (800175c <SetHome+0x2e4>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d15f      	bne.n	8001570 <SetHome+0xf8>
		{
			MOTOR_setAngle(&motor1, 0);
 80014b0:	ed9f 0aab 	vldr	s0, [pc, #684]	; 8001760 <SetHome+0x2e8>
 80014b4:	48ab      	ldr	r0, [pc, #684]	; (8001764 <SetHome+0x2ec>)
 80014b6:	f005 fe5d 	bl	8007174 <MOTOR_setAngle>
			MOTOR_setAngle(&motor2, -180);
 80014ba:	ed9f 0aab 	vldr	s0, [pc, #684]	; 8001768 <SetHome+0x2f0>
 80014be:	48ab      	ldr	r0, [pc, #684]	; (800176c <SetHome+0x2f4>)
 80014c0:	f005 fe58 	bl	8007174 <MOTOR_setAngle>
			MOTOR_setAngle(&motor3, 130);
 80014c4:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 8001770 <SetHome+0x2f8>
 80014c8:	48aa      	ldr	r0, [pc, #680]	; (8001774 <SetHome+0x2fc>)
 80014ca:	f005 fe53 	bl	8007174 <MOTOR_setAngle>
			MOTOR_setAngle(&motor4, -75);
 80014ce:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 8001778 <SetHome+0x300>
 80014d2:	48aa      	ldr	r0, [pc, #680]	; (800177c <SetHome+0x304>)
 80014d4:	f005 fe4e 	bl	8007174 <MOTOR_setAngle>
			if(fabs(MOTOR_getPos(&motor2) + 180) < 1 && fabs(MOTOR_getPos(&motor3) - 130) < 1 && fabs(MOTOR_getPos(&motor4) + 75) < 1)
 80014d8:	48a4      	ldr	r0, [pc, #656]	; (800176c <SetHome+0x2f4>)
 80014da:	f005 ff79 	bl	80073d0 <MOTOR_getPos>
 80014de:	eef0 7a40 	vmov.f32	s15, s0
 80014e2:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8001780 <SetHome+0x308>
 80014e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014ea:	eef0 7ae7 	vabs.f32	s15, s15
 80014ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fa:	f140 80bb 	bpl.w	8001674 <SetHome+0x1fc>
 80014fe:	489d      	ldr	r0, [pc, #628]	; (8001774 <SetHome+0x2fc>)
 8001500:	f005 ff66 	bl	80073d0 <MOTOR_getPos>
 8001504:	eef0 7a40 	vmov.f32	s15, s0
 8001508:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8001770 <SetHome+0x2f8>
 800150c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001510:	eef0 7ae7 	vabs.f32	s15, s15
 8001514:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800151c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001520:	d400      	bmi.n	8001524 <SetHome+0xac>
 8001522:	e0a7      	b.n	8001674 <SetHome+0x1fc>
 8001524:	4895      	ldr	r0, [pc, #596]	; (800177c <SetHome+0x304>)
 8001526:	f005 ff53 	bl	80073d0 <MOTOR_getPos>
 800152a:	eef0 7a40 	vmov.f32	s15, s0
 800152e:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8001784 <SetHome+0x30c>
 8001532:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001536:	eef0 7ae7 	vabs.f32	s15, s15
 800153a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800153e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001546:	d400      	bmi.n	800154a <SetHome+0xd2>
 8001548:	e094      	b.n	8001674 <SetHome+0x1fc>
			{
				setHome234Flag = 0;
 800154a:	4b8f      	ldr	r3, [pc, #572]	; (8001788 <SetHome+0x310>)
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
				setHome1234Flag = 0;
 8001550:	4b7d      	ldr	r3, [pc, #500]	; (8001748 <SetHome+0x2d0>)
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
				setHomeOk = 1;
 8001556:	4b7d      	ldr	r3, [pc, #500]	; (800174c <SetHome+0x2d4>)
 8001558:	2201      	movs	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
				MOTOR_reset(&motor2);
 800155c:	4883      	ldr	r0, [pc, #524]	; (800176c <SetHome+0x2f4>)
 800155e:	f005 fefe 	bl	800735e <MOTOR_reset>
				MOTOR_reset(&motor3);
 8001562:	4884      	ldr	r0, [pc, #528]	; (8001774 <SetHome+0x2fc>)
 8001564:	f005 fefb 	bl	800735e <MOTOR_reset>
				MOTOR_reset(&motor4);
 8001568:	4884      	ldr	r0, [pc, #528]	; (800177c <SetHome+0x304>)
 800156a:	f005 fef8 	bl	800735e <MOTOR_reset>
			if(fabs(MOTOR_getPos(&motor2) + 180) < 1 && fabs(MOTOR_getPos(&motor3) - 130) < 1 && fabs(MOTOR_getPos(&motor4) + 75) < 1)
 800156e:	e081      	b.n	8001674 <SetHome+0x1fc>
			}
		}
		else if(setHomeJ2 == 1 && setHomeJ3 == 1 && setHomeJ4 == 1)
 8001570:	4b78      	ldr	r3, [pc, #480]	; (8001754 <SetHome+0x2dc>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d17d      	bne.n	8001674 <SetHome+0x1fc>
 8001578:	4b77      	ldr	r3, [pc, #476]	; (8001758 <SetHome+0x2e0>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d179      	bne.n	8001674 <SetHome+0x1fc>
 8001580:	4b76      	ldr	r3, [pc, #472]	; (800175c <SetHome+0x2e4>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d175      	bne.n	8001674 <SetHome+0x1fc>
		{
			if(fabs(motor1.setPoint) <= 2)
 8001588:	4b76      	ldr	r3, [pc, #472]	; (8001764 <SetHome+0x2ec>)
 800158a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800158e:	eef0 7ae7 	vabs.f32	s15, s15
 8001592:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001596:	eef4 7ac7 	vcmpe.f32	s15, s14
 800159a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159e:	d805      	bhi.n	80015ac <SetHome+0x134>
			{
				MOTOR_setAngle(&motor1, -45.0f);
 80015a0:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 800178c <SetHome+0x314>
 80015a4:	486f      	ldr	r0, [pc, #444]	; (8001764 <SetHome+0x2ec>)
 80015a6:	f005 fde5 	bl	8007174 <MOTOR_setAngle>
 80015aa:	e063      	b.n	8001674 <SetHome+0x1fc>
			}
			else if(fabs(MOTOR_getPos(&motor1) + 45.0f) < 2 && (int)(motor1.setPoint / motor1.ratioJoint) == -45)
 80015ac:	486d      	ldr	r0, [pc, #436]	; (8001764 <SetHome+0x2ec>)
 80015ae:	f005 ff0f 	bl	80073d0 <MOTOR_getPos>
 80015b2:	eef0 7a40 	vmov.f32	s15, s0
 80015b6:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001790 <SetHome+0x318>
 80015ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015be:	eef0 7ae7 	vabs.f32	s15, s15
 80015c2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80015c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ce:	d514      	bpl.n	80015fa <SetHome+0x182>
 80015d0:	4b64      	ldr	r3, [pc, #400]	; (8001764 <SetHome+0x2ec>)
 80015d2:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 80015d6:	4b63      	ldr	r3, [pc, #396]	; (8001764 <SetHome+0x2ec>)
 80015d8:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 80015dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015e4:	ee17 3a90 	vmov	r3, s15
 80015e8:	f113 0f2d 	cmn.w	r3, #45	; 0x2d
 80015ec:	d105      	bne.n	80015fa <SetHome+0x182>
			{
				MOTOR_setAngle(&motor1, 45.0f);
 80015ee:	ed9f 0a68 	vldr	s0, [pc, #416]	; 8001790 <SetHome+0x318>
 80015f2:	485c      	ldr	r0, [pc, #368]	; (8001764 <SetHome+0x2ec>)
 80015f4:	f005 fdbe 	bl	8007174 <MOTOR_setAngle>
 80015f8:	e03c      	b.n	8001674 <SetHome+0x1fc>
			}
			else if(fabs(MOTOR_getPos(&motor1) - 45.0f) < 2 && (int)(motor1.setPoint / motor1.ratioJoint) == 45)
 80015fa:	485a      	ldr	r0, [pc, #360]	; (8001764 <SetHome+0x2ec>)
 80015fc:	f005 fee8 	bl	80073d0 <MOTOR_getPos>
 8001600:	eef0 7a40 	vmov.f32	s15, s0
 8001604:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001790 <SetHome+0x318>
 8001608:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800160c:	eef0 7ae7 	vabs.f32	s15, s15
 8001610:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001614:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161c:	d513      	bpl.n	8001646 <SetHome+0x1ce>
 800161e:	4b51      	ldr	r3, [pc, #324]	; (8001764 <SetHome+0x2ec>)
 8001620:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8001624:	4b4f      	ldr	r3, [pc, #316]	; (8001764 <SetHome+0x2ec>)
 8001626:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 800162a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800162e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001632:	ee17 3a90 	vmov	r3, s15
 8001636:	2b2d      	cmp	r3, #45	; 0x2d
 8001638:	d105      	bne.n	8001646 <SetHome+0x1ce>
			{
				MOTOR_setAngle(&motor1, -100.0f);
 800163a:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8001794 <SetHome+0x31c>
 800163e:	4849      	ldr	r0, [pc, #292]	; (8001764 <SetHome+0x2ec>)
 8001640:	f005 fd98 	bl	8007174 <MOTOR_setAngle>
 8001644:	e016      	b.n	8001674 <SetHome+0x1fc>
			}
			else if(fabs(MOTOR_getPos(&motor1) + 100.0f) < 2)
 8001646:	4847      	ldr	r0, [pc, #284]	; (8001764 <SetHome+0x2ec>)
 8001648:	f005 fec2 	bl	80073d0 <MOTOR_getPos>
 800164c:	eef0 7a40 	vmov.f32	s15, s0
 8001650:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8001798 <SetHome+0x320>
 8001654:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001658:	eef0 7ae7 	vabs.f32	s15, s15
 800165c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001660:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001668:	d504      	bpl.n	8001674 <SetHome+0x1fc>
			{
				MOTOR_setAngle(&motor1, 100.0f);
 800166a:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8001798 <SetHome+0x320>
 800166e:	483d      	ldr	r0, [pc, #244]	; (8001764 <SetHome+0x2ec>)
 8001670:	f005 fd80 	bl	8007174 <MOTOR_setAngle>
			}
		}
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 1 && setHomeJ1 == 0)
 8001674:	2180      	movs	r1, #128	; 0x80
 8001676:	4849      	ldr	r0, [pc, #292]	; (800179c <SetHome+0x324>)
 8001678:	f002 fa08 	bl	8003a8c <HAL_GPIO_ReadPin>
 800167c:	4603      	mov	r3, r0
 800167e:	2b01      	cmp	r3, #1
 8001680:	d109      	bne.n	8001696 <SetHome+0x21e>
 8001682:	4b33      	ldr	r3, [pc, #204]	; (8001750 <SetHome+0x2d8>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d105      	bne.n	8001696 <SetHome+0x21e>
		{
			setHomeJ1 = 1;
 800168a:	4b31      	ldr	r3, [pc, #196]	; (8001750 <SetHome+0x2d8>)
 800168c:	2201      	movs	r2, #1
 800168e:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor1);
 8001690:	4834      	ldr	r0, [pc, #208]	; (8001764 <SetHome+0x2ec>)
 8001692:	f005 fe64 	bl	800735e <MOTOR_reset>
		}
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == 1 && setHomeJ2 == 0)
 8001696:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800169a:	4840      	ldr	r0, [pc, #256]	; (800179c <SetHome+0x324>)
 800169c:	f002 f9f6 	bl	8003a8c <HAL_GPIO_ReadPin>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d109      	bne.n	80016ba <SetHome+0x242>
 80016a6:	4b2b      	ldr	r3, [pc, #172]	; (8001754 <SetHome+0x2dc>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d105      	bne.n	80016ba <SetHome+0x242>
		{
			setHomeJ2 = 1;
 80016ae:	4b29      	ldr	r3, [pc, #164]	; (8001754 <SetHome+0x2dc>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor2);
 80016b4:	482d      	ldr	r0, [pc, #180]	; (800176c <SetHome+0x2f4>)
 80016b6:	f005 fe52 	bl	800735e <MOTOR_reset>
		}
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 0 && setHomeJ3 == 0)
 80016ba:	2104      	movs	r1, #4
 80016bc:	4838      	ldr	r0, [pc, #224]	; (80017a0 <SetHome+0x328>)
 80016be:	f002 f9e5 	bl	8003a8c <HAL_GPIO_ReadPin>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d109      	bne.n	80016dc <SetHome+0x264>
 80016c8:	4b23      	ldr	r3, [pc, #140]	; (8001758 <SetHome+0x2e0>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d105      	bne.n	80016dc <SetHome+0x264>
		{
			setHomeJ3 = 1;
 80016d0:	4b21      	ldr	r3, [pc, #132]	; (8001758 <SetHome+0x2e0>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor3);
 80016d6:	4827      	ldr	r0, [pc, #156]	; (8001774 <SetHome+0x2fc>)
 80016d8:	f005 fe41 	bl	800735e <MOTOR_reset>
		}
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6) == 0 && setHomeJ4 == 0)
 80016dc:	2140      	movs	r1, #64	; 0x40
 80016de:	4830      	ldr	r0, [pc, #192]	; (80017a0 <SetHome+0x328>)
 80016e0:	f002 f9d4 	bl	8003a8c <HAL_GPIO_ReadPin>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d12a      	bne.n	8001740 <SetHome+0x2c8>
 80016ea:	4b1c      	ldr	r3, [pc, #112]	; (800175c <SetHome+0x2e4>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d126      	bne.n	8001740 <SetHome+0x2c8>
		{
			setHomeJ4 = 1;
 80016f2:	4b1a      	ldr	r3, [pc, #104]	; (800175c <SetHome+0x2e4>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor4);
 80016f8:	4820      	ldr	r0, [pc, #128]	; (800177c <SetHome+0x304>)
 80016fa:	f005 fe30 	bl	800735e <MOTOR_reset>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6) == 0 && setHomeJ4 == 0)
 80016fe:	e01f      	b.n	8001740 <SetHome+0x2c8>
		}
	}
	else if(setHome1234Flag == 1 && setHomeOk == 1)
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <SetHome+0x2d0>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d11c      	bne.n	8001742 <SetHome+0x2ca>
 8001708:	4b10      	ldr	r3, [pc, #64]	; (800174c <SetHome+0x2d4>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d118      	bne.n	8001742 <SetHome+0x2ca>
	{
		MOTOR_setAngle(&motor1, 0);
 8001710:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8001760 <SetHome+0x2e8>
 8001714:	4813      	ldr	r0, [pc, #76]	; (8001764 <SetHome+0x2ec>)
 8001716:	f005 fd2d 	bl	8007174 <MOTOR_setAngle>
		MOTOR_setAngle(&motor2, 0);
 800171a:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8001760 <SetHome+0x2e8>
 800171e:	4813      	ldr	r0, [pc, #76]	; (800176c <SetHome+0x2f4>)
 8001720:	f005 fd28 	bl	8007174 <MOTOR_setAngle>
		MOTOR_setAngle(&motor3, 0);
 8001724:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001760 <SetHome+0x2e8>
 8001728:	4812      	ldr	r0, [pc, #72]	; (8001774 <SetHome+0x2fc>)
 800172a:	f005 fd23 	bl	8007174 <MOTOR_setAngle>
		MOTOR_setAngle(&motor4, 0);
 800172e:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001760 <SetHome+0x2e8>
 8001732:	4812      	ldr	r0, [pc, #72]	; (800177c <SetHome+0x304>)
 8001734:	f005 fd1e 	bl	8007174 <MOTOR_setAngle>
		setHome1234Flag = 0;
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <SetHome+0x2d0>)
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
	}
}
 800173e:	e000      	b.n	8001742 <SetHome+0x2ca>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6) == 0 && setHomeJ4 == 0)
 8001740:	bf00      	nop
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200005f6 	.word	0x200005f6
 800174c:	200005f0 	.word	0x200005f0
 8001750:	200005f1 	.word	0x200005f1
 8001754:	200005f2 	.word	0x200005f2
 8001758:	200005f3 	.word	0x200005f3
 800175c:	200005f4 	.word	0x200005f4
 8001760:	00000000 	.word	0x00000000
 8001764:	200005f8 	.word	0x200005f8
 8001768:	c3340000 	.word	0xc3340000
 800176c:	200006b0 	.word	0x200006b0
 8001770:	43020000 	.word	0x43020000
 8001774:	20000768 	.word	0x20000768
 8001778:	c2960000 	.word	0xc2960000
 800177c:	20000820 	.word	0x20000820
 8001780:	43340000 	.word	0x43340000
 8001784:	42960000 	.word	0x42960000
 8001788:	200005f5 	.word	0x200005f5
 800178c:	c2340000 	.word	0xc2340000
 8001790:	42340000 	.word	0x42340000
 8001794:	c2c80000 	.word	0xc2c80000
 8001798:	42c80000 	.word	0x42c80000
 800179c:	40020800 	.word	0x40020800
 80017a0:	40020c00 	.word	0x40020c00

080017a4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	80fb      	strh	r3, [r7, #6]
	if(setHome1234Flag == 1 && setHomeOk == 0)
 80017ae:	4b2c      	ldr	r3, [pc, #176]	; (8001860 <HAL_GPIO_EXTI_Callback+0xbc>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d14f      	bne.n	8001856 <HAL_GPIO_EXTI_Callback+0xb2>
 80017b6:	4b2b      	ldr	r3, [pc, #172]	; (8001864 <HAL_GPIO_EXTI_Callback+0xc0>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d14b      	bne.n	8001856 <HAL_GPIO_EXTI_Callback+0xb2>
	{
		if(GPIO_Pin == GPIO_PIN_11 && setHomeJ2 == 0)
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017c4:	d11c      	bne.n	8001800 <HAL_GPIO_EXTI_Callback+0x5c>
 80017c6:	4b28      	ldr	r3, [pc, #160]	; (8001868 <HAL_GPIO_EXTI_Callback+0xc4>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d118      	bne.n	8001800 <HAL_GPIO_EXTI_Callback+0x5c>
		{
			setHomeJ2 = 1;
 80017ce:	4b26      	ldr	r3, [pc, #152]	; (8001868 <HAL_GPIO_EXTI_Callback+0xc4>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor2);
 80017d4:	4825      	ldr	r0, [pc, #148]	; (800186c <HAL_GPIO_EXTI_Callback+0xc8>)
 80017d6:	f005 fdc2 	bl	800735e <MOTOR_reset>
			if(setHomeJ3 == 0)
 80017da:	4b25      	ldr	r3, [pc, #148]	; (8001870 <HAL_GPIO_EXTI_Callback+0xcc>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d104      	bne.n	80017ec <HAL_GPIO_EXTI_Callback+0x48>
			{
				MOTOR_setAngle(&motor3, -200);
 80017e2:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8001874 <HAL_GPIO_EXTI_Callback+0xd0>
 80017e6:	4824      	ldr	r0, [pc, #144]	; (8001878 <HAL_GPIO_EXTI_Callback+0xd4>)
 80017e8:	f005 fcc4 	bl	8007174 <MOTOR_setAngle>
			}
			if(setHomeJ4 == 0)
 80017ec:	4b23      	ldr	r3, [pc, #140]	; (800187c <HAL_GPIO_EXTI_Callback+0xd8>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d12f      	bne.n	8001854 <HAL_GPIO_EXTI_Callback+0xb0>
			{
				MOTOR_setAngle(&motor4, 200);
 80017f4:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001880 <HAL_GPIO_EXTI_Callback+0xdc>
 80017f8:	4822      	ldr	r0, [pc, #136]	; (8001884 <HAL_GPIO_EXTI_Callback+0xe0>)
 80017fa:	f005 fcbb 	bl	8007174 <MOTOR_setAngle>
		{
 80017fe:	e029      	b.n	8001854 <HAL_GPIO_EXTI_Callback+0xb0>
			}
		}
		else if(GPIO_Pin == GPIO_PIN_2 && setHomeJ3 == 0)
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	2b04      	cmp	r3, #4
 8001804:	d10a      	bne.n	800181c <HAL_GPIO_EXTI_Callback+0x78>
 8001806:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d106      	bne.n	800181c <HAL_GPIO_EXTI_Callback+0x78>
		{
			setHomeJ3 = 1;
 800180e:	4b18      	ldr	r3, [pc, #96]	; (8001870 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001810:	2201      	movs	r2, #1
 8001812:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor3);
 8001814:	4818      	ldr	r0, [pc, #96]	; (8001878 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001816:	f005 fda2 	bl	800735e <MOTOR_reset>
		{
 800181a:	e01c      	b.n	8001856 <HAL_GPIO_EXTI_Callback+0xb2>

		}
		else if(GPIO_Pin == GPIO_PIN_6 && setHomeJ4 == 0)
 800181c:	88fb      	ldrh	r3, [r7, #6]
 800181e:	2b40      	cmp	r3, #64	; 0x40
 8001820:	d10a      	bne.n	8001838 <HAL_GPIO_EXTI_Callback+0x94>
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <HAL_GPIO_EXTI_Callback+0xd8>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d106      	bne.n	8001838 <HAL_GPIO_EXTI_Callback+0x94>
		{
			setHomeJ4 = 1;
 800182a:	4b14      	ldr	r3, [pc, #80]	; (800187c <HAL_GPIO_EXTI_Callback+0xd8>)
 800182c:	2201      	movs	r2, #1
 800182e:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor4);
 8001830:	4814      	ldr	r0, [pc, #80]	; (8001884 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001832:	f005 fd94 	bl	800735e <MOTOR_reset>
		{
 8001836:	e00e      	b.n	8001856 <HAL_GPIO_EXTI_Callback+0xb2>
		}
		else if(GPIO_Pin == GPIO_PIN_7 && setHomeJ1 == 0)
 8001838:	88fb      	ldrh	r3, [r7, #6]
 800183a:	2b80      	cmp	r3, #128	; 0x80
 800183c:	d10b      	bne.n	8001856 <HAL_GPIO_EXTI_Callback+0xb2>
 800183e:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d107      	bne.n	8001856 <HAL_GPIO_EXTI_Callback+0xb2>
		{
			setHomeJ1 = 1;
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001848:	2201      	movs	r2, #1
 800184a:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor1);
 800184c:	480f      	ldr	r0, [pc, #60]	; (800188c <HAL_GPIO_EXTI_Callback+0xe8>)
 800184e:	f005 fd86 	bl	800735e <MOTOR_reset>
		}
	}
}
 8001852:	e000      	b.n	8001856 <HAL_GPIO_EXTI_Callback+0xb2>
		{
 8001854:	bf00      	nop
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200005f6 	.word	0x200005f6
 8001864:	200005f0 	.word	0x200005f0
 8001868:	200005f2 	.word	0x200005f2
 800186c:	200006b0 	.word	0x200006b0
 8001870:	200005f3 	.word	0x200005f3
 8001874:	c3480000 	.word	0xc3480000
 8001878:	20000768 	.word	0x20000768
 800187c:	200005f4 	.word	0x200005f4
 8001880:	43480000 	.word	0x43480000
 8001884:	20000820 	.word	0x20000820
 8001888:	200005f1 	.word	0x200005f1
 800188c:	200005f8 	.word	0x200005f8

08001890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001894:	b090      	sub	sp, #64	; 0x40
 8001896:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001898:	f001 f9bc 	bl	8002c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800189c:	f000 f94c 	bl	8001b38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018a0:	f000 fd04 	bl	80022ac <MX_GPIO_Init>
  MX_DMA_Init();
 80018a4:	f000 fce2 	bl	800226c <MX_DMA_Init>
  MX_TIM1_Init();
 80018a8:	f000 f9b0 	bl	8001c0c <MX_TIM1_Init>
  MX_TIM2_Init();
 80018ac:	f000 fa06 	bl	8001cbc <MX_TIM2_Init>
  MX_TIM3_Init();
 80018b0:	f000 fa58 	bl	8001d64 <MX_TIM3_Init>
  MX_TIM4_Init();
 80018b4:	f000 faaa 	bl	8001e0c <MX_TIM4_Init>
  MX_TIM5_Init();
 80018b8:	f000 fb40 	bl	8001f3c <MX_TIM5_Init>
  MX_TIM8_Init();
 80018bc:	f000 fb92 	bl	8001fe4 <MX_TIM8_Init>
  MX_TIM9_Init();
 80018c0:	f000 fc3c 	bl	800213c <MX_TIM9_Init>
  MX_USART3_UART_Init();
 80018c4:	f000 fca8 	bl	8002218 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  MOTOR_setPIDPosition(&motor1, 5, 0, 0, 5);
 80018c8:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 80018cc:	ed9f 1a88 	vldr	s2, [pc, #544]	; 8001af0 <main+0x260>
 80018d0:	eddf 0a87 	vldr	s1, [pc, #540]	; 8001af0 <main+0x260>
 80018d4:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80018d8:	4886      	ldr	r0, [pc, #536]	; (8001af4 <main+0x264>)
 80018da:	f005 fbef 	bl	80070bc <MOTOR_setPIDPosition>
  MOTOR_setPIDVelocity(&motor1, 5, 50, 0, 5);
 80018de:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 80018e2:	ed9f 1a83 	vldr	s2, [pc, #524]	; 8001af0 <main+0x260>
 80018e6:	eddf 0a84 	vldr	s1, [pc, #528]	; 8001af8 <main+0x268>
 80018ea:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80018ee:	4881      	ldr	r0, [pc, #516]	; (8001af4 <main+0x264>)
 80018f0:	f005 fbc8 	bl	8007084 <MOTOR_setPIDVelocity>
  MOTOR_setOutputRange(&motor1, -999, 999);
 80018f4:	eddf 0a81 	vldr	s1, [pc, #516]	; 8001afc <main+0x26c>
 80018f8:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8001b00 <main+0x270>
 80018fc:	487d      	ldr	r0, [pc, #500]	; (8001af4 <main+0x264>)
 80018fe:	f005 fbfb 	bl	80070f8 <MOTOR_setOutputRange>
  MOTOR_setWindupRange(&motor1, -500, 500);
 8001902:	eddf 0a80 	vldr	s1, [pc, #512]	; 8001b04 <main+0x274>
 8001906:	ed9f 0a80 	vldr	s0, [pc, #512]	; 8001b08 <main+0x278>
 800190a:	487a      	ldr	r0, [pc, #488]	; (8001af4 <main+0x264>)
 800190c:	f005 fc16 	bl	800713c <MOTOR_setWindupRange>
  MOTOR_init(&motor1, &driver1, 3.75, GPIO_PIN_7, 500);
 8001910:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8001b04 <main+0x274>
 8001914:	2280      	movs	r2, #128	; 0x80
 8001916:	eeb0 0a0e 	vmov.f32	s0, #14	; 0x40700000  3.750
 800191a:	497c      	ldr	r1, [pc, #496]	; (8001b0c <main+0x27c>)
 800191c:	4875      	ldr	r0, [pc, #468]	; (8001af4 <main+0x264>)
 800191e:	f005 fcb9 	bl	8007294 <MOTOR_init>

  MOTOR_setPIDPosition(&motor2, 5, 0, 0, 5);
 8001922:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8001926:	ed9f 1a72 	vldr	s2, [pc, #456]	; 8001af0 <main+0x260>
 800192a:	eddf 0a71 	vldr	s1, [pc, #452]	; 8001af0 <main+0x260>
 800192e:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001932:	4877      	ldr	r0, [pc, #476]	; (8001b10 <main+0x280>)
 8001934:	f005 fbc2 	bl	80070bc <MOTOR_setPIDPosition>
  MOTOR_setPIDVelocity(&motor2, 5, 50, 0, 5);
 8001938:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 800193c:	ed9f 1a6c 	vldr	s2, [pc, #432]	; 8001af0 <main+0x260>
 8001940:	eddf 0a6d 	vldr	s1, [pc, #436]	; 8001af8 <main+0x268>
 8001944:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001948:	4871      	ldr	r0, [pc, #452]	; (8001b10 <main+0x280>)
 800194a:	f005 fb9b 	bl	8007084 <MOTOR_setPIDVelocity>
  MOTOR_setOutputRange(&motor2, -999, 999);
 800194e:	eddf 0a6b 	vldr	s1, [pc, #428]	; 8001afc <main+0x26c>
 8001952:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8001b00 <main+0x270>
 8001956:	486e      	ldr	r0, [pc, #440]	; (8001b10 <main+0x280>)
 8001958:	f005 fbce 	bl	80070f8 <MOTOR_setOutputRange>
  MOTOR_setWindupRange(&motor2, -500, 500);
 800195c:	eddf 0a69 	vldr	s1, [pc, #420]	; 8001b04 <main+0x274>
 8001960:	ed9f 0a69 	vldr	s0, [pc, #420]	; 8001b08 <main+0x278>
 8001964:	486a      	ldr	r0, [pc, #424]	; (8001b10 <main+0x280>)
 8001966:	f005 fbe9 	bl	800713c <MOTOR_setWindupRange>
  MOTOR_init(&motor2, &driver2, 3.75, GPIO_PIN_11, 500);
 800196a:	eddf 0a66 	vldr	s1, [pc, #408]	; 8001b04 <main+0x274>
 800196e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001972:	eeb0 0a0e 	vmov.f32	s0, #14	; 0x40700000  3.750
 8001976:	4967      	ldr	r1, [pc, #412]	; (8001b14 <main+0x284>)
 8001978:	4865      	ldr	r0, [pc, #404]	; (8001b10 <main+0x280>)
 800197a:	f005 fc8b 	bl	8007294 <MOTOR_init>

  MOTOR_setPIDPosition(&motor3, 5, 0, 0, 5);
 800197e:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8001982:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 8001af0 <main+0x260>
 8001986:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8001af0 <main+0x260>
 800198a:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800198e:	4862      	ldr	r0, [pc, #392]	; (8001b18 <main+0x288>)
 8001990:	f005 fb94 	bl	80070bc <MOTOR_setPIDPosition>
  MOTOR_setPIDVelocity(&motor3, 5, 50, 0, 5);
 8001994:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8001998:	ed9f 1a55 	vldr	s2, [pc, #340]	; 8001af0 <main+0x260>
 800199c:	eddf 0a56 	vldr	s1, [pc, #344]	; 8001af8 <main+0x268>
 80019a0:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80019a4:	485c      	ldr	r0, [pc, #368]	; (8001b18 <main+0x288>)
 80019a6:	f005 fb6d 	bl	8007084 <MOTOR_setPIDVelocity>
  MOTOR_setOutputRange(&motor3, -999, 999);
 80019aa:	eddf 0a54 	vldr	s1, [pc, #336]	; 8001afc <main+0x26c>
 80019ae:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8001b00 <main+0x270>
 80019b2:	4859      	ldr	r0, [pc, #356]	; (8001b18 <main+0x288>)
 80019b4:	f005 fba0 	bl	80070f8 <MOTOR_setOutputRange>
  MOTOR_setWindupRange(&motor3, -500, 500);
 80019b8:	eddf 0a52 	vldr	s1, [pc, #328]	; 8001b04 <main+0x274>
 80019bc:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8001b08 <main+0x278>
 80019c0:	4855      	ldr	r0, [pc, #340]	; (8001b18 <main+0x288>)
 80019c2:	f005 fbbb 	bl	800713c <MOTOR_setWindupRange>
  MOTOR_init(&motor3, &driver3, 3.75, GPIO_PIN_2, 500);
 80019c6:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8001b04 <main+0x274>
 80019ca:	2204      	movs	r2, #4
 80019cc:	eeb0 0a0e 	vmov.f32	s0, #14	; 0x40700000  3.750
 80019d0:	4952      	ldr	r1, [pc, #328]	; (8001b1c <main+0x28c>)
 80019d2:	4851      	ldr	r0, [pc, #324]	; (8001b18 <main+0x288>)
 80019d4:	f005 fc5e 	bl	8007294 <MOTOR_init>

  MOTOR_setPIDPosition(&motor4, 5, 0, 0, 5);
 80019d8:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 80019dc:	ed9f 1a44 	vldr	s2, [pc, #272]	; 8001af0 <main+0x260>
 80019e0:	eddf 0a43 	vldr	s1, [pc, #268]	; 8001af0 <main+0x260>
 80019e4:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80019e8:	484d      	ldr	r0, [pc, #308]	; (8001b20 <main+0x290>)
 80019ea:	f005 fb67 	bl	80070bc <MOTOR_setPIDPosition>
  MOTOR_setPIDVelocity(&motor4, 5, 50, 0, 5);
 80019ee:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 80019f2:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 8001af0 <main+0x260>
 80019f6:	eddf 0a40 	vldr	s1, [pc, #256]	; 8001af8 <main+0x268>
 80019fa:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80019fe:	4848      	ldr	r0, [pc, #288]	; (8001b20 <main+0x290>)
 8001a00:	f005 fb40 	bl	8007084 <MOTOR_setPIDVelocity>
  MOTOR_setOutputRange(&motor4, -999, 999);
 8001a04:	eddf 0a3d 	vldr	s1, [pc, #244]	; 8001afc <main+0x26c>
 8001a08:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8001b00 <main+0x270>
 8001a0c:	4844      	ldr	r0, [pc, #272]	; (8001b20 <main+0x290>)
 8001a0e:	f005 fb73 	bl	80070f8 <MOTOR_setOutputRange>
  MOTOR_setWindupRange(&motor4, -500, 500);
 8001a12:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8001b04 <main+0x274>
 8001a16:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8001b08 <main+0x278>
 8001a1a:	4841      	ldr	r0, [pc, #260]	; (8001b20 <main+0x290>)
 8001a1c:	f005 fb8e 	bl	800713c <MOTOR_setWindupRange>
  MOTOR_init(&motor4, &driver4, 1.875, GPIO_PIN_6, 500);
 8001a20:	eddf 0a38 	vldr	s1, [pc, #224]	; 8001b04 <main+0x274>
 8001a24:	2240      	movs	r2, #64	; 0x40
 8001a26:	eeb7 0a0e 	vmov.f32	s0, #126	; 0x3ff00000  1.875
 8001a2a:	493e      	ldr	r1, [pc, #248]	; (8001b24 <main+0x294>)
 8001a2c:	483c      	ldr	r0, [pc, #240]	; (8001b20 <main+0x290>)
 8001a2e:	f005 fc31 	bl	8007294 <MOTOR_init>


  HAL_TIM_Base_Start_IT(&htim9);
 8001a32:	483d      	ldr	r0, [pc, #244]	; (8001b28 <main+0x298>)
 8001a34:	f002 fdde 	bl	80045f4 <HAL_TIM_Base_Start_IT>
  htim9.Instance->ARR = 999;
 8001a38:	4b3b      	ldr	r3, [pc, #236]	; (8001b28 <main+0x298>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a40:	62da      	str	r2, [r3, #44]	; 0x2c
  UartIdle_Init();
 8001a42:	f7ff fc8b 	bl	800135c <UartIdle_Init>

  uint32_t pre_time = HAL_GetTick();
 8001a46:	f001 f94b 	bl	8002ce0 <HAL_GetTick>
 8001a4a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    UART_Handle(uartLogBuffer);
 8001a4c:	4837      	ldr	r0, [pc, #220]	; (8001b2c <main+0x29c>)
 8001a4e:	f7ff fbe1 	bl	8001214 <UART_Handle>
    SetHome();
 8001a52:	f7ff fd11 	bl	8001478 <SetHome>
    if (HAL_GetTick() - pre_time >= 500)
 8001a56:	f001 f943 	bl	8002ce0 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a64:	d3f2      	bcc.n	8001a4c <main+0x1bc>
    {
      sprintf(data_angle, "t1:%.0f,t2:%.0f,t3:%.0f,t4:%.0f\n", (float)MOTOR_getPos(&motor1), (float)MOTOR_getPos(&motor2), (float)MOTOR_getPos(&motor3), (float)MOTOR_getPos(&motor4));
 8001a66:	4823      	ldr	r0, [pc, #140]	; (8001af4 <main+0x264>)
 8001a68:	f005 fcb2 	bl	80073d0 <MOTOR_getPos>
 8001a6c:	ee10 3a10 	vmov	r3, s0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fd69 	bl	8000548 <__aeabi_f2d>
 8001a76:	4682      	mov	sl, r0
 8001a78:	468b      	mov	fp, r1
 8001a7a:	4825      	ldr	r0, [pc, #148]	; (8001b10 <main+0x280>)
 8001a7c:	f005 fca8 	bl	80073d0 <MOTOR_getPos>
 8001a80:	ee10 3a10 	vmov	r3, s0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fd5f 	bl	8000548 <__aeabi_f2d>
 8001a8a:	4604      	mov	r4, r0
 8001a8c:	460d      	mov	r5, r1
 8001a8e:	4822      	ldr	r0, [pc, #136]	; (8001b18 <main+0x288>)
 8001a90:	f005 fc9e 	bl	80073d0 <MOTOR_getPos>
 8001a94:	ee10 3a10 	vmov	r3, s0
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fd55 	bl	8000548 <__aeabi_f2d>
 8001a9e:	4680      	mov	r8, r0
 8001aa0:	4689      	mov	r9, r1
 8001aa2:	481f      	ldr	r0, [pc, #124]	; (8001b20 <main+0x290>)
 8001aa4:	f005 fc94 	bl	80073d0 <MOTOR_getPos>
 8001aa8:	ee10 3a10 	vmov	r3, s0
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe fd4b 	bl	8000548 <__aeabi_f2d>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	1d38      	adds	r0, r7, #4
 8001ab8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001abc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001ac0:	e9cd 4500 	strd	r4, r5, [sp]
 8001ac4:	4652      	mov	r2, sl
 8001ac6:	465b      	mov	r3, fp
 8001ac8:	4919      	ldr	r1, [pc, #100]	; (8001b30 <main+0x2a0>)
 8001aca:	f006 fccf 	bl	800846c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)data_angle, strlen(data_angle), HAL_MAX_DELAY);
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fb7d 	bl	80001d0 <strlen>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	1d39      	adds	r1, r7, #4
 8001adc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae0:	4814      	ldr	r0, [pc, #80]	; (8001b34 <main+0x2a4>)
 8001ae2:	f003 ff46 	bl	8005972 <HAL_UART_Transmit>

      pre_time = HAL_GetTick();
 8001ae6:	f001 f8fb 	bl	8002ce0 <HAL_GetTick>
 8001aea:	6278      	str	r0, [r7, #36]	; 0x24
    UART_Handle(uartLogBuffer);
 8001aec:	e7ae      	b.n	8001a4c <main+0x1bc>
 8001aee:	bf00      	nop
 8001af0:	00000000 	.word	0x00000000
 8001af4:	200005f8 	.word	0x200005f8
 8001af8:	42480000 	.word	0x42480000
 8001afc:	4479c000 	.word	0x4479c000
 8001b00:	c479c000 	.word	0xc479c000
 8001b04:	43fa0000 	.word	0x43fa0000
 8001b08:	c3fa0000 	.word	0xc3fa0000
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	200006b0 	.word	0x200006b0
 8001b14:	20000038 	.word	0x20000038
 8001b18:	20000768 	.word	0x20000768
 8001b1c:	20000070 	.word	0x20000070
 8001b20:	20000820 	.word	0x20000820
 8001b24:	200000a8 	.word	0x200000a8
 8001b28:	2000048c 	.word	0x2000048c
 8001b2c:	20000578 	.word	0x20000578
 8001b30:	0800c950 	.word	0x0800c950
 8001b34:	200004d4 	.word	0x200004d4

08001b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b094      	sub	sp, #80	; 0x50
 8001b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b3e:	f107 0320 	add.w	r3, r7, #32
 8001b42:	2230      	movs	r2, #48	; 0x30
 8001b44:	2100      	movs	r1, #0
 8001b46:	4618      	mov	r0, r3
 8001b48:	f005 fe08 	bl	800775c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b4c:	f107 030c 	add.w	r3, r7, #12
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	4b28      	ldr	r3, [pc, #160]	; (8001c04 <SystemClock_Config+0xcc>)
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	4a27      	ldr	r2, [pc, #156]	; (8001c04 <SystemClock_Config+0xcc>)
 8001b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6c:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <SystemClock_Config+0xcc>)
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b78:	2300      	movs	r3, #0
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	4b22      	ldr	r3, [pc, #136]	; (8001c08 <SystemClock_Config+0xd0>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a21      	ldr	r2, [pc, #132]	; (8001c08 <SystemClock_Config+0xd0>)
 8001b82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	4b1f      	ldr	r3, [pc, #124]	; (8001c08 <SystemClock_Config+0xd0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b94:	2302      	movs	r3, #2
 8001b96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b9c:	2310      	movs	r3, #16
 8001b9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ba8:	2308      	movs	r3, #8
 8001baa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001bac:	23a8      	movs	r3, #168	; 0xa8
 8001bae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001bb4:	2304      	movs	r3, #4
 8001bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb8:	f107 0320 	add.w	r3, r7, #32
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f001 ffc9 	bl	8003b54 <HAL_RCC_OscConfig>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001bc8:	f000 fc1a 	bl	8002400 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bcc:	230f      	movs	r3, #15
 8001bce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bd8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bdc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001be4:	f107 030c 	add.w	r3, r7, #12
 8001be8:	2105      	movs	r1, #5
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 fa2a 	bl	8004044 <HAL_RCC_ClockConfig>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001bf6:	f000 fc03 	bl	8002400 <Error_Handler>
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	3750      	adds	r7, #80	; 0x50
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40007000 	.word	0x40007000

08001c0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08c      	sub	sp, #48	; 0x30
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	2224      	movs	r2, #36	; 0x24
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f005 fd9e 	bl	800775c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c28:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <MX_TIM1_Init+0xa8>)
 8001c2a:	4a23      	ldr	r2, [pc, #140]	; (8001cb8 <MX_TIM1_Init+0xac>)
 8001c2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c2e:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <MX_TIM1_Init+0xa8>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c34:	4b1f      	ldr	r3, [pc, #124]	; (8001cb4 <MX_TIM1_Init+0xa8>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c3a:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <MX_TIM1_Init+0xa8>)
 8001c3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c42:	4b1c      	ldr	r3, [pc, #112]	; (8001cb4 <MX_TIM1_Init+0xa8>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c48:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <MX_TIM1_Init+0xa8>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c4e:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <MX_TIM1_Init+0xa8>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c54:	2303      	movs	r3, #3
 8001c56:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c70:	2300      	movs	r3, #0
 8001c72:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001c78:	f107 030c 	add.w	r3, r7, #12
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	480d      	ldr	r0, [pc, #52]	; (8001cb4 <MX_TIM1_Init+0xa8>)
 8001c80:	f002 fe4a 	bl	8004918 <HAL_TIM_Encoder_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001c8a:	f000 fbb9 	bl	8002400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4806      	ldr	r0, [pc, #24]	; (8001cb4 <MX_TIM1_Init+0xa8>)
 8001c9c:	f003 fd3a 	bl	8005714 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001ca6:	f000 fbab 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001caa:	bf00      	nop
 8001cac:	3730      	adds	r7, #48	; 0x30
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200002dc 	.word	0x200002dc
 8001cb8:	40010000 	.word	0x40010000

08001cbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08c      	sub	sp, #48	; 0x30
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cc2:	f107 030c 	add.w	r3, r7, #12
 8001cc6:	2224      	movs	r2, #36	; 0x24
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f005 fd46 	bl	800775c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cd8:	4b21      	ldr	r3, [pc, #132]	; (8001d60 <MX_TIM2_Init+0xa4>)
 8001cda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cde:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ce0:	4b1f      	ldr	r3, [pc, #124]	; (8001d60 <MX_TIM2_Init+0xa4>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <MX_TIM2_Init+0xa4>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001cec:	4b1c      	ldr	r3, [pc, #112]	; (8001d60 <MX_TIM2_Init+0xa4>)
 8001cee:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <MX_TIM2_Init+0xa4>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cfa:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <MX_TIM2_Init+0xa4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d00:	2303      	movs	r3, #3
 8001d02:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d04:	2300      	movs	r3, #0
 8001d06:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d14:	2300      	movs	r3, #0
 8001d16:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001d24:	f107 030c 	add.w	r3, r7, #12
 8001d28:	4619      	mov	r1, r3
 8001d2a:	480d      	ldr	r0, [pc, #52]	; (8001d60 <MX_TIM2_Init+0xa4>)
 8001d2c:	f002 fdf4 	bl	8004918 <HAL_TIM_Encoder_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001d36:	f000 fb63 	bl	8002400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	4619      	mov	r1, r3
 8001d46:	4806      	ldr	r0, [pc, #24]	; (8001d60 <MX_TIM2_Init+0xa4>)
 8001d48:	f003 fce4 	bl	8005714 <HAL_TIMEx_MasterConfigSynchronization>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001d52:	f000 fb55 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d56:	bf00      	nop
 8001d58:	3730      	adds	r7, #48	; 0x30
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000324 	.word	0x20000324

08001d64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08c      	sub	sp, #48	; 0x30
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d6a:	f107 030c 	add.w	r3, r7, #12
 8001d6e:	2224      	movs	r2, #36	; 0x24
 8001d70:	2100      	movs	r1, #0
 8001d72:	4618      	mov	r0, r3
 8001d74:	f005 fcf2 	bl	800775c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d80:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <MX_TIM3_Init+0xa0>)
 8001d82:	4a21      	ldr	r2, [pc, #132]	; (8001e08 <MX_TIM3_Init+0xa4>)
 8001d84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d86:	4b1f      	ldr	r3, [pc, #124]	; (8001e04 <MX_TIM3_Init+0xa0>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d8c:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <MX_TIM3_Init+0xa0>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d92:	4b1c      	ldr	r3, [pc, #112]	; (8001e04 <MX_TIM3_Init+0xa0>)
 8001d94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d98:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d9a:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <MX_TIM3_Init+0xa0>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da0:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <MX_TIM3_Init+0xa0>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001da6:	2303      	movs	r3, #3
 8001da8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001dae:	2301      	movs	r3, #1
 8001db0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001dca:	f107 030c 	add.w	r3, r7, #12
 8001dce:	4619      	mov	r1, r3
 8001dd0:	480c      	ldr	r0, [pc, #48]	; (8001e04 <MX_TIM3_Init+0xa0>)
 8001dd2:	f002 fda1 	bl	8004918 <HAL_TIM_Encoder_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001ddc:	f000 fb10 	bl	8002400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de0:	2300      	movs	r3, #0
 8001de2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	4619      	mov	r1, r3
 8001dec:	4805      	ldr	r0, [pc, #20]	; (8001e04 <MX_TIM3_Init+0xa0>)
 8001dee:	f003 fc91 	bl	8005714 <HAL_TIMEx_MasterConfigSynchronization>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001df8:	f000 fb02 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001dfc:	bf00      	nop
 8001dfe:	3730      	adds	r7, #48	; 0x30
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	2000036c 	.word	0x2000036c
 8001e08:	40000400 	.word	0x40000400

08001e0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08e      	sub	sp, #56	; 0x38
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	609a      	str	r2, [r3, #8]
 8001e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e20:	f107 0320 	add.w	r3, r7, #32
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
 8001e38:	615a      	str	r2, [r3, #20]
 8001e3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e3c:	4b3d      	ldr	r3, [pc, #244]	; (8001f34 <MX_TIM4_Init+0x128>)
 8001e3e:	4a3e      	ldr	r2, [pc, #248]	; (8001f38 <MX_TIM4_Init+0x12c>)
 8001e40:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8001e42:	4b3c      	ldr	r3, [pc, #240]	; (8001f34 <MX_TIM4_Init+0x128>)
 8001e44:	2253      	movs	r2, #83	; 0x53
 8001e46:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e48:	4b3a      	ldr	r3, [pc, #232]	; (8001f34 <MX_TIM4_Init+0x128>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001e4e:	4b39      	ldr	r3, [pc, #228]	; (8001f34 <MX_TIM4_Init+0x128>)
 8001e50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e54:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e56:	4b37      	ldr	r3, [pc, #220]	; (8001f34 <MX_TIM4_Init+0x128>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e5c:	4b35      	ldr	r3, [pc, #212]	; (8001f34 <MX_TIM4_Init+0x128>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e62:	4834      	ldr	r0, [pc, #208]	; (8001f34 <MX_TIM4_Init+0x128>)
 8001e64:	f002 fb0e 	bl	8004484 <HAL_TIM_Base_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001e6e:	f000 fac7 	bl	8002400 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e76:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	482d      	ldr	r0, [pc, #180]	; (8001f34 <MX_TIM4_Init+0x128>)
 8001e80:	f003 f848 	bl	8004f14 <HAL_TIM_ConfigClockSource>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001e8a:	f000 fab9 	bl	8002400 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e8e:	4829      	ldr	r0, [pc, #164]	; (8001f34 <MX_TIM4_Init+0x128>)
 8001e90:	f002 fc20 	bl	80046d4 <HAL_TIM_PWM_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001e9a:	f000 fab1 	bl	8002400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ea6:	f107 0320 	add.w	r3, r7, #32
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4821      	ldr	r0, [pc, #132]	; (8001f34 <MX_TIM4_Init+0x128>)
 8001eae:	f003 fc31 	bl	8005714 <HAL_TIMEx_MasterConfigSynchronization>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001eb8:	f000 faa2 	bl	8002400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ebc:	2360      	movs	r3, #96	; 0x60
 8001ebe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	2200      	movs	r2, #0
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4818      	ldr	r0, [pc, #96]	; (8001f34 <MX_TIM4_Init+0x128>)
 8001ed4:	f002 ff5c 	bl	8004d90 <HAL_TIM_PWM_ConfigChannel>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001ede:	f000 fa8f 	bl	8002400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ee2:	1d3b      	adds	r3, r7, #4
 8001ee4:	2204      	movs	r2, #4
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4812      	ldr	r0, [pc, #72]	; (8001f34 <MX_TIM4_Init+0x128>)
 8001eea:	f002 ff51 	bl	8004d90 <HAL_TIM_PWM_ConfigChannel>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001ef4:	f000 fa84 	bl	8002400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	2208      	movs	r2, #8
 8001efc:	4619      	mov	r1, r3
 8001efe:	480d      	ldr	r0, [pc, #52]	; (8001f34 <MX_TIM4_Init+0x128>)
 8001f00:	f002 ff46 	bl	8004d90 <HAL_TIM_PWM_ConfigChannel>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001f0a:	f000 fa79 	bl	8002400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f0e:	1d3b      	adds	r3, r7, #4
 8001f10:	220c      	movs	r2, #12
 8001f12:	4619      	mov	r1, r3
 8001f14:	4807      	ldr	r0, [pc, #28]	; (8001f34 <MX_TIM4_Init+0x128>)
 8001f16:	f002 ff3b 	bl	8004d90 <HAL_TIM_PWM_ConfigChannel>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001f20:	f000 fa6e 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001f24:	4803      	ldr	r0, [pc, #12]	; (8001f34 <MX_TIM4_Init+0x128>)
 8001f26:	f000 fbf9 	bl	800271c <HAL_TIM_MspPostInit>

}
 8001f2a:	bf00      	nop
 8001f2c:	3738      	adds	r7, #56	; 0x38
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	200003b4 	.word	0x200003b4
 8001f38:	40000800 	.word	0x40000800

08001f3c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08c      	sub	sp, #48	; 0x30
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f42:	f107 030c 	add.w	r3, r7, #12
 8001f46:	2224      	movs	r2, #36	; 0x24
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f005 fc06 	bl	800775c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f58:	4b20      	ldr	r3, [pc, #128]	; (8001fdc <MX_TIM5_Init+0xa0>)
 8001f5a:	4a21      	ldr	r2, [pc, #132]	; (8001fe0 <MX_TIM5_Init+0xa4>)
 8001f5c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001f5e:	4b1f      	ldr	r3, [pc, #124]	; (8001fdc <MX_TIM5_Init+0xa0>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f64:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <MX_TIM5_Init+0xa0>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001f6a:	4b1c      	ldr	r3, [pc, #112]	; (8001fdc <MX_TIM5_Init+0xa0>)
 8001f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f70:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f72:	4b1a      	ldr	r3, [pc, #104]	; (8001fdc <MX_TIM5_Init+0xa0>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f78:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <MX_TIM5_Init+0xa0>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f86:	2301      	movs	r3, #1
 8001f88:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f92:	2300      	movs	r3, #0
 8001f94:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f96:	2301      	movs	r3, #1
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001fa2:	f107 030c 	add.w	r3, r7, #12
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	480c      	ldr	r0, [pc, #48]	; (8001fdc <MX_TIM5_Init+0xa0>)
 8001faa:	f002 fcb5 	bl	8004918 <HAL_TIM_Encoder_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001fb4:	f000 fa24 	bl	8002400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001fc0:	1d3b      	adds	r3, r7, #4
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4805      	ldr	r0, [pc, #20]	; (8001fdc <MX_TIM5_Init+0xa0>)
 8001fc6:	f003 fba5 	bl	8005714 <HAL_TIMEx_MasterConfigSynchronization>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001fd0:	f000 fa16 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001fd4:	bf00      	nop
 8001fd6:	3730      	adds	r7, #48	; 0x30
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	200003fc 	.word	0x200003fc
 8001fe0:	40000c00 	.word	0x40000c00

08001fe4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b096      	sub	sp, #88	; 0x58
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
 8001ff6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]
 800200c:	609a      	str	r2, [r3, #8]
 800200e:	60da      	str	r2, [r3, #12]
 8002010:	611a      	str	r2, [r3, #16]
 8002012:	615a      	str	r2, [r3, #20]
 8002014:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002016:	1d3b      	adds	r3, r7, #4
 8002018:	2220      	movs	r2, #32
 800201a:	2100      	movs	r1, #0
 800201c:	4618      	mov	r0, r3
 800201e:	f005 fb9d 	bl	800775c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002022:	4b44      	ldr	r3, [pc, #272]	; (8002134 <MX_TIM8_Init+0x150>)
 8002024:	4a44      	ldr	r2, [pc, #272]	; (8002138 <MX_TIM8_Init+0x154>)
 8002026:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 8002028:	4b42      	ldr	r3, [pc, #264]	; (8002134 <MX_TIM8_Init+0x150>)
 800202a:	22a7      	movs	r2, #167	; 0xa7
 800202c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800202e:	4b41      	ldr	r3, [pc, #260]	; (8002134 <MX_TIM8_Init+0x150>)
 8002030:	2200      	movs	r2, #0
 8002032:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8002034:	4b3f      	ldr	r3, [pc, #252]	; (8002134 <MX_TIM8_Init+0x150>)
 8002036:	f240 32e7 	movw	r2, #999	; 0x3e7
 800203a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800203c:	4b3d      	ldr	r3, [pc, #244]	; (8002134 <MX_TIM8_Init+0x150>)
 800203e:	2200      	movs	r2, #0
 8002040:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002042:	4b3c      	ldr	r3, [pc, #240]	; (8002134 <MX_TIM8_Init+0x150>)
 8002044:	2200      	movs	r2, #0
 8002046:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002048:	4b3a      	ldr	r3, [pc, #232]	; (8002134 <MX_TIM8_Init+0x150>)
 800204a:	2200      	movs	r2, #0
 800204c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800204e:	4839      	ldr	r0, [pc, #228]	; (8002134 <MX_TIM8_Init+0x150>)
 8002050:	f002 fa18 	bl	8004484 <HAL_TIM_Base_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800205a:	f000 f9d1 	bl	8002400 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800205e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002062:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002064:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002068:	4619      	mov	r1, r3
 800206a:	4832      	ldr	r0, [pc, #200]	; (8002134 <MX_TIM8_Init+0x150>)
 800206c:	f002 ff52 	bl	8004f14 <HAL_TIM_ConfigClockSource>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002076:	f000 f9c3 	bl	8002400 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800207a:	482e      	ldr	r0, [pc, #184]	; (8002134 <MX_TIM8_Init+0x150>)
 800207c:	f002 fb2a 	bl	80046d4 <HAL_TIM_PWM_Init>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002086:	f000 f9bb 	bl	8002400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800208e:	2300      	movs	r3, #0
 8002090:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002092:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002096:	4619      	mov	r1, r3
 8002098:	4826      	ldr	r0, [pc, #152]	; (8002134 <MX_TIM8_Init+0x150>)
 800209a:	f003 fb3b 	bl	8005714 <HAL_TIMEx_MasterConfigSynchronization>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80020a4:	f000 f9ac 	bl	8002400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020a8:	2360      	movs	r3, #96	; 0x60
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020b0:	2300      	movs	r3, #0
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020b4:	2300      	movs	r3, #0
 80020b6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020b8:	2300      	movs	r3, #0
 80020ba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020bc:	2300      	movs	r3, #0
 80020be:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020c0:	2300      	movs	r3, #0
 80020c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c8:	2208      	movs	r2, #8
 80020ca:	4619      	mov	r1, r3
 80020cc:	4819      	ldr	r0, [pc, #100]	; (8002134 <MX_TIM8_Init+0x150>)
 80020ce:	f002 fe5f 	bl	8004d90 <HAL_TIM_PWM_ConfigChannel>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80020d8:	f000 f992 	bl	8002400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e0:	220c      	movs	r2, #12
 80020e2:	4619      	mov	r1, r3
 80020e4:	4813      	ldr	r0, [pc, #76]	; (8002134 <MX_TIM8_Init+0x150>)
 80020e6:	f002 fe53 	bl	8004d90 <HAL_TIM_PWM_ConfigChannel>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80020f0:	f000 f986 	bl	8002400 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002108:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800210c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002112:	1d3b      	adds	r3, r7, #4
 8002114:	4619      	mov	r1, r3
 8002116:	4807      	ldr	r0, [pc, #28]	; (8002134 <MX_TIM8_Init+0x150>)
 8002118:	f003 fb78 	bl	800580c <HAL_TIMEx_ConfigBreakDeadTime>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8002122:	f000 f96d 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002126:	4803      	ldr	r0, [pc, #12]	; (8002134 <MX_TIM8_Init+0x150>)
 8002128:	f000 faf8 	bl	800271c <HAL_TIM_MspPostInit>

}
 800212c:	bf00      	nop
 800212e:	3758      	adds	r7, #88	; 0x58
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20000444 	.word	0x20000444
 8002138:	40010400 	.word	0x40010400

0800213c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08c      	sub	sp, #48	; 0x30
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002142:	f107 0320 	add.w	r3, r7, #32
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002150:	1d3b      	adds	r3, r7, #4
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	60da      	str	r2, [r3, #12]
 800215c:	611a      	str	r2, [r3, #16]
 800215e:	615a      	str	r2, [r3, #20]
 8002160:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002162:	4b2b      	ldr	r3, [pc, #172]	; (8002210 <MX_TIM9_Init+0xd4>)
 8002164:	4a2b      	ldr	r2, [pc, #172]	; (8002214 <MX_TIM9_Init+0xd8>)
 8002166:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 168-1;
 8002168:	4b29      	ldr	r3, [pc, #164]	; (8002210 <MX_TIM9_Init+0xd4>)
 800216a:	22a7      	movs	r2, #167	; 0xa7
 800216c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800216e:	4b28      	ldr	r3, [pc, #160]	; (8002210 <MX_TIM9_Init+0xd4>)
 8002170:	2200      	movs	r2, #0
 8002172:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8002174:	4b26      	ldr	r3, [pc, #152]	; (8002210 <MX_TIM9_Init+0xd4>)
 8002176:	f240 32e7 	movw	r2, #999	; 0x3e7
 800217a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800217c:	4b24      	ldr	r3, [pc, #144]	; (8002210 <MX_TIM9_Init+0xd4>)
 800217e:	2200      	movs	r2, #0
 8002180:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002182:	4b23      	ldr	r3, [pc, #140]	; (8002210 <MX_TIM9_Init+0xd4>)
 8002184:	2200      	movs	r2, #0
 8002186:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002188:	4821      	ldr	r0, [pc, #132]	; (8002210 <MX_TIM9_Init+0xd4>)
 800218a:	f002 f97b 	bl	8004484 <HAL_TIM_Base_Init>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8002194:	f000 f934 	bl	8002400 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800219c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800219e:	f107 0320 	add.w	r3, r7, #32
 80021a2:	4619      	mov	r1, r3
 80021a4:	481a      	ldr	r0, [pc, #104]	; (8002210 <MX_TIM9_Init+0xd4>)
 80021a6:	f002 feb5 	bl	8004f14 <HAL_TIM_ConfigClockSource>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 80021b0:	f000 f926 	bl	8002400 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80021b4:	4816      	ldr	r0, [pc, #88]	; (8002210 <MX_TIM9_Init+0xd4>)
 80021b6:	f002 fa8d 	bl	80046d4 <HAL_TIM_PWM_Init>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 80021c0:	f000 f91e 	bl	8002400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021c4:	2360      	movs	r3, #96	; 0x60
 80021c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	2200      	movs	r2, #0
 80021d8:	4619      	mov	r1, r3
 80021da:	480d      	ldr	r0, [pc, #52]	; (8002210 <MX_TIM9_Init+0xd4>)
 80021dc:	f002 fdd8 	bl	8004d90 <HAL_TIM_PWM_ConfigChannel>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 80021e6:	f000 f90b 	bl	8002400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021ea:	1d3b      	adds	r3, r7, #4
 80021ec:	2204      	movs	r2, #4
 80021ee:	4619      	mov	r1, r3
 80021f0:	4807      	ldr	r0, [pc, #28]	; (8002210 <MX_TIM9_Init+0xd4>)
 80021f2:	f002 fdcd 	bl	8004d90 <HAL_TIM_PWM_ConfigChannel>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 80021fc:	f000 f900 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002200:	4803      	ldr	r0, [pc, #12]	; (8002210 <MX_TIM9_Init+0xd4>)
 8002202:	f000 fa8b 	bl	800271c <HAL_TIM_MspPostInit>

}
 8002206:	bf00      	nop
 8002208:	3730      	adds	r7, #48	; 0x30
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	2000048c 	.word	0x2000048c
 8002214:	40014000 	.word	0x40014000

08002218 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800221c:	4b10      	ldr	r3, [pc, #64]	; (8002260 <MX_USART3_UART_Init+0x48>)
 800221e:	4a11      	ldr	r2, [pc, #68]	; (8002264 <MX_USART3_UART_Init+0x4c>)
 8002220:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 250000;
 8002222:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <MX_USART3_UART_Init+0x48>)
 8002224:	4a10      	ldr	r2, [pc, #64]	; (8002268 <MX_USART3_UART_Init+0x50>)
 8002226:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002228:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <MX_USART3_UART_Init+0x48>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800222e:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <MX_USART3_UART_Init+0x48>)
 8002230:	2200      	movs	r2, #0
 8002232:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002234:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <MX_USART3_UART_Init+0x48>)
 8002236:	2200      	movs	r2, #0
 8002238:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800223a:	4b09      	ldr	r3, [pc, #36]	; (8002260 <MX_USART3_UART_Init+0x48>)
 800223c:	220c      	movs	r2, #12
 800223e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002240:	4b07      	ldr	r3, [pc, #28]	; (8002260 <MX_USART3_UART_Init+0x48>)
 8002242:	2200      	movs	r2, #0
 8002244:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002246:	4b06      	ldr	r3, [pc, #24]	; (8002260 <MX_USART3_UART_Init+0x48>)
 8002248:	2200      	movs	r2, #0
 800224a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800224c:	4804      	ldr	r0, [pc, #16]	; (8002260 <MX_USART3_UART_Init+0x48>)
 800224e:	f003 fb43 	bl	80058d8 <HAL_UART_Init>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8002258:	f000 f8d2 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800225c:	bf00      	nop
 800225e:	bd80      	pop	{r7, pc}
 8002260:	200004d4 	.word	0x200004d4
 8002264:	40004800 	.word	0x40004800
 8002268:	0003d090 	.word	0x0003d090

0800226c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	607b      	str	r3, [r7, #4]
 8002276:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <MX_DMA_Init+0x3c>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a0b      	ldr	r2, [pc, #44]	; (80022a8 <MX_DMA_Init+0x3c>)
 800227c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <MX_DMA_Init+0x3c>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800228a:	607b      	str	r3, [r7, #4]
 800228c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 3, 0);
 800228e:	2200      	movs	r2, #0
 8002290:	2103      	movs	r1, #3
 8002292:	200c      	movs	r0, #12
 8002294:	f000 fe21 	bl	8002eda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002298:	200c      	movs	r0, #12
 800229a:	f000 fe3a 	bl	8002f12 <HAL_NVIC_EnableIRQ>

}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800

080022ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08a      	sub	sp, #40	; 0x28
 80022b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b2:	f107 0314 	add.w	r3, r7, #20
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	605a      	str	r2, [r3, #4]
 80022bc:	609a      	str	r2, [r3, #8]
 80022be:	60da      	str	r2, [r3, #12]
 80022c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	4b4a      	ldr	r3, [pc, #296]	; (80023f0 <MX_GPIO_Init+0x144>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	4a49      	ldr	r2, [pc, #292]	; (80023f0 <MX_GPIO_Init+0x144>)
 80022cc:	f043 0304 	orr.w	r3, r3, #4
 80022d0:	6313      	str	r3, [r2, #48]	; 0x30
 80022d2:	4b47      	ldr	r3, [pc, #284]	; (80023f0 <MX_GPIO_Init+0x144>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	4b43      	ldr	r3, [pc, #268]	; (80023f0 <MX_GPIO_Init+0x144>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4a42      	ldr	r2, [pc, #264]	; (80023f0 <MX_GPIO_Init+0x144>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4b40      	ldr	r3, [pc, #256]	; (80023f0 <MX_GPIO_Init+0x144>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	4b3c      	ldr	r3, [pc, #240]	; (80023f0 <MX_GPIO_Init+0x144>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	4a3b      	ldr	r2, [pc, #236]	; (80023f0 <MX_GPIO_Init+0x144>)
 8002304:	f043 0302 	orr.w	r3, r3, #2
 8002308:	6313      	str	r3, [r2, #48]	; 0x30
 800230a:	4b39      	ldr	r3, [pc, #228]	; (80023f0 <MX_GPIO_Init+0x144>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	607b      	str	r3, [r7, #4]
 800231a:	4b35      	ldr	r3, [pc, #212]	; (80023f0 <MX_GPIO_Init+0x144>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a34      	ldr	r2, [pc, #208]	; (80023f0 <MX_GPIO_Init+0x144>)
 8002320:	f043 0308 	orr.w	r3, r3, #8
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b32      	ldr	r3, [pc, #200]	; (80023f0 <MX_GPIO_Init+0x144>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	607b      	str	r3, [r7, #4]
 8002330:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002332:	2200      	movs	r2, #0
 8002334:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002338:	482e      	ldr	r0, [pc, #184]	; (80023f4 <MX_GPIO_Init+0x148>)
 800233a:	f001 fbbf 	bl	8003abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800233e:	2200      	movs	r2, #0
 8002340:	2140      	movs	r1, #64	; 0x40
 8002342:	482d      	ldr	r0, [pc, #180]	; (80023f8 <MX_GPIO_Init+0x14c>)
 8002344:	f001 fbba 	bl	8003abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002348:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800234c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234e:	2301      	movs	r3, #1
 8002350:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002356:	2300      	movs	r3, #0
 8002358:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800235a:	f107 0314 	add.w	r3, r7, #20
 800235e:	4619      	mov	r1, r3
 8002360:	4824      	ldr	r0, [pc, #144]	; (80023f4 <MX_GPIO_Init+0x148>)
 8002362:	f001 f9f7 	bl	8003754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11;
 8002366:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 800236a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800236c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002372:	2301      	movs	r3, #1
 8002374:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002376:	f107 0314 	add.w	r3, r7, #20
 800237a:	4619      	mov	r1, r3
 800237c:	481d      	ldr	r0, [pc, #116]	; (80023f4 <MX_GPIO_Init+0x148>)
 800237e:	f001 f9e9 	bl	8003754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD2 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8002382:	2344      	movs	r3, #68	; 0x44
 8002384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002386:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800238a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800238c:	2301      	movs	r3, #1
 800238e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	4619      	mov	r1, r3
 8002396:	4819      	ldr	r0, [pc, #100]	; (80023fc <MX_GPIO_Init+0x150>)
 8002398:	f001 f9dc 	bl	8003754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800239c:	2340      	movs	r3, #64	; 0x40
 800239e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a0:	2301      	movs	r3, #1
 80023a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a8:	2300      	movs	r3, #0
 80023aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	4619      	mov	r1, r3
 80023b2:	4811      	ldr	r0, [pc, #68]	; (80023f8 <MX_GPIO_Init+0x14c>)
 80023b4:	f001 f9ce 	bl	8003754 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 80023b8:	2200      	movs	r2, #0
 80023ba:	2101      	movs	r1, #1
 80023bc:	2008      	movs	r0, #8
 80023be:	f000 fd8c 	bl	8002eda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80023c2:	2008      	movs	r0, #8
 80023c4:	f000 fda5 	bl	8002f12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80023c8:	2200      	movs	r2, #0
 80023ca:	2101      	movs	r1, #1
 80023cc:	2017      	movs	r0, #23
 80023ce:	f000 fd84 	bl	8002eda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80023d2:	2017      	movs	r0, #23
 80023d4:	f000 fd9d 	bl	8002f12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80023d8:	2200      	movs	r2, #0
 80023da:	2101      	movs	r1, #1
 80023dc:	2028      	movs	r0, #40	; 0x28
 80023de:	f000 fd7c 	bl	8002eda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80023e2:	2028      	movs	r0, #40	; 0x28
 80023e4:	f000 fd95 	bl	8002f12 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023e8:	bf00      	nop
 80023ea:	3728      	adds	r7, #40	; 0x28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40020800 	.word	0x40020800
 80023f8:	40020400 	.word	0x40020400
 80023fc:	40020c00 	.word	0x40020c00

08002400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002404:	b672      	cpsid	i
}
 8002406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002408:	e7fe      	b.n	8002408 <Error_Handler+0x8>
	...

0800240c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	607b      	str	r3, [r7, #4]
 8002416:	4b10      	ldr	r3, [pc, #64]	; (8002458 <HAL_MspInit+0x4c>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	4a0f      	ldr	r2, [pc, #60]	; (8002458 <HAL_MspInit+0x4c>)
 800241c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002420:	6453      	str	r3, [r2, #68]	; 0x44
 8002422:	4b0d      	ldr	r3, [pc, #52]	; (8002458 <HAL_MspInit+0x4c>)
 8002424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800242a:	607b      	str	r3, [r7, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	603b      	str	r3, [r7, #0]
 8002432:	4b09      	ldr	r3, [pc, #36]	; (8002458 <HAL_MspInit+0x4c>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	4a08      	ldr	r2, [pc, #32]	; (8002458 <HAL_MspInit+0x4c>)
 8002438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800243c:	6413      	str	r3, [r2, #64]	; 0x40
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_MspInit+0x4c>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40023800 	.word	0x40023800

0800245c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b090      	sub	sp, #64	; 0x40
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a78      	ldr	r2, [pc, #480]	; (800265c <HAL_TIM_Encoder_MspInit+0x200>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d135      	bne.n	80024ea <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28
 8002482:	4b77      	ldr	r3, [pc, #476]	; (8002660 <HAL_TIM_Encoder_MspInit+0x204>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	4a76      	ldr	r2, [pc, #472]	; (8002660 <HAL_TIM_Encoder_MspInit+0x204>)
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	6453      	str	r3, [r2, #68]	; 0x44
 800248e:	4b74      	ldr	r3, [pc, #464]	; (8002660 <HAL_TIM_Encoder_MspInit+0x204>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	62bb      	str	r3, [r7, #40]	; 0x28
 8002498:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
 800249e:	4b70      	ldr	r3, [pc, #448]	; (8002660 <HAL_TIM_Encoder_MspInit+0x204>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	4a6f      	ldr	r2, [pc, #444]	; (8002660 <HAL_TIM_Encoder_MspInit+0x204>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	6313      	str	r3, [r2, #48]	; 0x30
 80024aa:	4b6d      	ldr	r3, [pc, #436]	; (8002660 <HAL_TIM_Encoder_MspInit+0x204>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_J1_Pin|ENC_B_J1_Pin;
 80024b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024bc:	2302      	movs	r3, #2
 80024be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c4:	2300      	movs	r3, #0
 80024c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024c8:	2301      	movs	r3, #1
 80024ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024d0:	4619      	mov	r1, r3
 80024d2:	4864      	ldr	r0, [pc, #400]	; (8002664 <HAL_TIM_Encoder_MspInit+0x208>)
 80024d4:	f001 f93e 	bl	8003754 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 0);
 80024d8:	2200      	movs	r2, #0
 80024da:	2102      	movs	r1, #2
 80024dc:	2018      	movs	r0, #24
 80024de:	f000 fcfc 	bl	8002eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80024e2:	2018      	movs	r0, #24
 80024e4:	f000 fd15 	bl	8002f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80024e8:	e0b3      	b.n	8002652 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM2)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f2:	d14b      	bne.n	800258c <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024f4:	2300      	movs	r3, #0
 80024f6:	623b      	str	r3, [r7, #32]
 80024f8:	4b59      	ldr	r3, [pc, #356]	; (8002660 <HAL_TIM_Encoder_MspInit+0x204>)
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	4a58      	ldr	r2, [pc, #352]	; (8002660 <HAL_TIM_Encoder_MspInit+0x204>)
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	6413      	str	r3, [r2, #64]	; 0x40
 8002504:	4b56      	ldr	r3, [pc, #344]	; (8002660 <HAL_TIM_Encoder_MspInit+0x204>)
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	623b      	str	r3, [r7, #32]
 800250e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002510:	2300      	movs	r3, #0
 8002512:	61fb      	str	r3, [r7, #28]
 8002514:	4b52      	ldr	r3, [pc, #328]	; (8002660 <HAL_TIM_Encoder_MspInit+0x204>)
 8002516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002518:	4a51      	ldr	r2, [pc, #324]	; (8002660 <HAL_TIM_Encoder_MspInit+0x204>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6313      	str	r3, [r2, #48]	; 0x30
 8002520:	4b4f      	ldr	r3, [pc, #316]	; (8002660 <HAL_TIM_Encoder_MspInit+0x204>)
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800252c:	2300      	movs	r3, #0
 800252e:	61bb      	str	r3, [r7, #24]
 8002530:	4b4b      	ldr	r3, [pc, #300]	; (8002660 <HAL_TIM_Encoder_MspInit+0x204>)
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002534:	4a4a      	ldr	r2, [pc, #296]	; (8002660 <HAL_TIM_Encoder_MspInit+0x204>)
 8002536:	f043 0302 	orr.w	r3, r3, #2
 800253a:	6313      	str	r3, [r2, #48]	; 0x30
 800253c:	4b48      	ldr	r3, [pc, #288]	; (8002660 <HAL_TIM_Encoder_MspInit+0x204>)
 800253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	61bb      	str	r3, [r7, #24]
 8002546:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENC_A_J2_Pin;
 8002548:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254e:	2302      	movs	r3, #2
 8002550:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	2300      	movs	r3, #0
 8002554:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002556:	2300      	movs	r3, #0
 8002558:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800255a:	2301      	movs	r3, #1
 800255c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC_A_J2_GPIO_Port, &GPIO_InitStruct);
 800255e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002562:	4619      	mov	r1, r3
 8002564:	483f      	ldr	r0, [pc, #252]	; (8002664 <HAL_TIM_Encoder_MspInit+0x208>)
 8002566:	f001 f8f5 	bl	8003754 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC_B_J2_Pin;
 800256a:	2308      	movs	r3, #8
 800256c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256e:	2302      	movs	r3, #2
 8002570:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002576:	2300      	movs	r3, #0
 8002578:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800257a:	2301      	movs	r3, #1
 800257c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC_B_J2_GPIO_Port, &GPIO_InitStruct);
 800257e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002582:	4619      	mov	r1, r3
 8002584:	4838      	ldr	r0, [pc, #224]	; (8002668 <HAL_TIM_Encoder_MspInit+0x20c>)
 8002586:	f001 f8e5 	bl	8003754 <HAL_GPIO_Init>
}
 800258a:	e062      	b.n	8002652 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM3)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a36      	ldr	r2, [pc, #216]	; (800266c <HAL_TIM_Encoder_MspInit+0x210>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d12c      	bne.n	80025f0 <HAL_TIM_Encoder_MspInit+0x194>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	4b31      	ldr	r3, [pc, #196]	; (8002660 <HAL_TIM_Encoder_MspInit+0x204>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	4a30      	ldr	r2, [pc, #192]	; (8002660 <HAL_TIM_Encoder_MspInit+0x204>)
 80025a0:	f043 0302 	orr.w	r3, r3, #2
 80025a4:	6413      	str	r3, [r2, #64]	; 0x40
 80025a6:	4b2e      	ldr	r3, [pc, #184]	; (8002660 <HAL_TIM_Encoder_MspInit+0x204>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	4b2a      	ldr	r3, [pc, #168]	; (8002660 <HAL_TIM_Encoder_MspInit+0x204>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	4a29      	ldr	r2, [pc, #164]	; (8002660 <HAL_TIM_Encoder_MspInit+0x204>)
 80025bc:	f043 0302 	orr.w	r3, r3, #2
 80025c0:	6313      	str	r3, [r2, #48]	; 0x30
 80025c2:	4b27      	ldr	r3, [pc, #156]	; (8002660 <HAL_TIM_Encoder_MspInit+0x204>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	613b      	str	r3, [r7, #16]
 80025cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC_A_J3_Pin|ENC_B_J3_Pin;
 80025ce:	2330      	movs	r3, #48	; 0x30
 80025d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d2:	2302      	movs	r3, #2
 80025d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025da:	2300      	movs	r3, #0
 80025dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025de:	2302      	movs	r3, #2
 80025e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025e6:	4619      	mov	r1, r3
 80025e8:	481f      	ldr	r0, [pc, #124]	; (8002668 <HAL_TIM_Encoder_MspInit+0x20c>)
 80025ea:	f001 f8b3 	bl	8003754 <HAL_GPIO_Init>
}
 80025ee:	e030      	b.n	8002652 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM5)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a1e      	ldr	r2, [pc, #120]	; (8002670 <HAL_TIM_Encoder_MspInit+0x214>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d12b      	bne.n	8002652 <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	4b18      	ldr	r3, [pc, #96]	; (8002660 <HAL_TIM_Encoder_MspInit+0x204>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	4a17      	ldr	r2, [pc, #92]	; (8002660 <HAL_TIM_Encoder_MspInit+0x204>)
 8002604:	f043 0308 	orr.w	r3, r3, #8
 8002608:	6413      	str	r3, [r2, #64]	; 0x40
 800260a:	4b15      	ldr	r3, [pc, #84]	; (8002660 <HAL_TIM_Encoder_MspInit+0x204>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	4b11      	ldr	r3, [pc, #68]	; (8002660 <HAL_TIM_Encoder_MspInit+0x204>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	4a10      	ldr	r2, [pc, #64]	; (8002660 <HAL_TIM_Encoder_MspInit+0x204>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6313      	str	r3, [r2, #48]	; 0x30
 8002626:	4b0e      	ldr	r3, [pc, #56]	; (8002660 <HAL_TIM_Encoder_MspInit+0x204>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	60bb      	str	r3, [r7, #8]
 8002630:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_A_J4_Pin|ENC_B_J4_Pin;
 8002632:	2303      	movs	r3, #3
 8002634:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002636:	2302      	movs	r3, #2
 8002638:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	2300      	movs	r3, #0
 800263c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263e:	2300      	movs	r3, #0
 8002640:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002642:	2302      	movs	r3, #2
 8002644:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002646:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800264a:	4619      	mov	r1, r3
 800264c:	4805      	ldr	r0, [pc, #20]	; (8002664 <HAL_TIM_Encoder_MspInit+0x208>)
 800264e:	f001 f881 	bl	8003754 <HAL_GPIO_Init>
}
 8002652:	bf00      	nop
 8002654:	3740      	adds	r7, #64	; 0x40
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40010000 	.word	0x40010000
 8002660:	40023800 	.word	0x40023800
 8002664:	40020000 	.word	0x40020000
 8002668:	40020400 	.word	0x40020400
 800266c:	40000400 	.word	0x40000400
 8002670:	40000c00 	.word	0x40000c00

08002674 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a22      	ldr	r2, [pc, #136]	; (800270c <HAL_TIM_Base_MspInit+0x98>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d10e      	bne.n	80026a4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	4b21      	ldr	r3, [pc, #132]	; (8002710 <HAL_TIM_Base_MspInit+0x9c>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	4a20      	ldr	r2, [pc, #128]	; (8002710 <HAL_TIM_Base_MspInit+0x9c>)
 8002690:	f043 0304 	orr.w	r3, r3, #4
 8002694:	6413      	str	r3, [r2, #64]	; 0x40
 8002696:	4b1e      	ldr	r3, [pc, #120]	; (8002710 <HAL_TIM_Base_MspInit+0x9c>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80026a2:	e02e      	b.n	8002702 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM8)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a1a      	ldr	r2, [pc, #104]	; (8002714 <HAL_TIM_Base_MspInit+0xa0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d10e      	bne.n	80026cc <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	4b17      	ldr	r3, [pc, #92]	; (8002710 <HAL_TIM_Base_MspInit+0x9c>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	4a16      	ldr	r2, [pc, #88]	; (8002710 <HAL_TIM_Base_MspInit+0x9c>)
 80026b8:	f043 0302 	orr.w	r3, r3, #2
 80026bc:	6453      	str	r3, [r2, #68]	; 0x44
 80026be:	4b14      	ldr	r3, [pc, #80]	; (8002710 <HAL_TIM_Base_MspInit+0x9c>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	613b      	str	r3, [r7, #16]
 80026c8:	693b      	ldr	r3, [r7, #16]
}
 80026ca:	e01a      	b.n	8002702 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM9)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a11      	ldr	r2, [pc, #68]	; (8002718 <HAL_TIM_Base_MspInit+0xa4>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d115      	bne.n	8002702 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <HAL_TIM_Base_MspInit+0x9c>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	4a0c      	ldr	r2, [pc, #48]	; (8002710 <HAL_TIM_Base_MspInit+0x9c>)
 80026e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e4:	6453      	str	r3, [r2, #68]	; 0x44
 80026e6:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <HAL_TIM_Base_MspInit+0x9c>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 0);
 80026f2:	2200      	movs	r2, #0
 80026f4:	2102      	movs	r1, #2
 80026f6:	2018      	movs	r0, #24
 80026f8:	f000 fbef 	bl	8002eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80026fc:	2018      	movs	r0, #24
 80026fe:	f000 fc08 	bl	8002f12 <HAL_NVIC_EnableIRQ>
}
 8002702:	bf00      	nop
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40000800 	.word	0x40000800
 8002710:	40023800 	.word	0x40023800
 8002714:	40010400 	.word	0x40010400
 8002718:	40014000 	.word	0x40014000

0800271c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08a      	sub	sp, #40	; 0x28
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002724:	f107 0314 	add.w	r3, r7, #20
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a37      	ldr	r2, [pc, #220]	; (8002818 <HAL_TIM_MspPostInit+0xfc>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d11f      	bne.n	800277e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	4b36      	ldr	r3, [pc, #216]	; (800281c <HAL_TIM_MspPostInit+0x100>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	4a35      	ldr	r2, [pc, #212]	; (800281c <HAL_TIM_MspPostInit+0x100>)
 8002748:	f043 0308 	orr.w	r3, r3, #8
 800274c:	6313      	str	r3, [r2, #48]	; 0x30
 800274e:	4b33      	ldr	r3, [pc, #204]	; (800281c <HAL_TIM_MspPostInit+0x100>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	693b      	ldr	r3, [r7, #16]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM3_A_Pin|PWM3_B_Pin|PWM2_A_Pin|PWM2_B_Pin;
 800275a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800275e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002760:	2302      	movs	r3, #2
 8002762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002768:	2300      	movs	r3, #0
 800276a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800276c:	2302      	movs	r3, #2
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	4619      	mov	r1, r3
 8002776:	482a      	ldr	r0, [pc, #168]	; (8002820 <HAL_TIM_MspPostInit+0x104>)
 8002778:	f000 ffec 	bl	8003754 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800277c:	e047      	b.n	800280e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a28      	ldr	r2, [pc, #160]	; (8002824 <HAL_TIM_MspPostInit+0x108>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d11f      	bne.n	80027c8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002788:	2300      	movs	r3, #0
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	4b23      	ldr	r3, [pc, #140]	; (800281c <HAL_TIM_MspPostInit+0x100>)
 800278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002790:	4a22      	ldr	r2, [pc, #136]	; (800281c <HAL_TIM_MspPostInit+0x100>)
 8002792:	f043 0304 	orr.w	r3, r3, #4
 8002796:	6313      	str	r3, [r2, #48]	; 0x30
 8002798:	4b20      	ldr	r3, [pc, #128]	; (800281c <HAL_TIM_MspPostInit+0x100>)
 800279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_A_Pin|PWM1_B_Pin;
 80027a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027aa:	2302      	movs	r3, #2
 80027ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b2:	2300      	movs	r3, #0
 80027b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80027b6:	2303      	movs	r3, #3
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ba:	f107 0314 	add.w	r3, r7, #20
 80027be:	4619      	mov	r1, r3
 80027c0:	4819      	ldr	r0, [pc, #100]	; (8002828 <HAL_TIM_MspPostInit+0x10c>)
 80027c2:	f000 ffc7 	bl	8003754 <HAL_GPIO_Init>
}
 80027c6:	e022      	b.n	800280e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM9)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a17      	ldr	r2, [pc, #92]	; (800282c <HAL_TIM_MspPostInit+0x110>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d11d      	bne.n	800280e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	4b11      	ldr	r3, [pc, #68]	; (800281c <HAL_TIM_MspPostInit+0x100>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	4a10      	ldr	r2, [pc, #64]	; (800281c <HAL_TIM_MspPostInit+0x100>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6313      	str	r3, [r2, #48]	; 0x30
 80027e2:	4b0e      	ldr	r3, [pc, #56]	; (800281c <HAL_TIM_MspPostInit+0x100>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM4_A_Pin|PWM4_B_Pin;
 80027ee:	230c      	movs	r3, #12
 80027f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f2:	2302      	movs	r3, #2
 80027f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fa:	2300      	movs	r3, #0
 80027fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80027fe:	2303      	movs	r3, #3
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002802:	f107 0314 	add.w	r3, r7, #20
 8002806:	4619      	mov	r1, r3
 8002808:	4809      	ldr	r0, [pc, #36]	; (8002830 <HAL_TIM_MspPostInit+0x114>)
 800280a:	f000 ffa3 	bl	8003754 <HAL_GPIO_Init>
}
 800280e:	bf00      	nop
 8002810:	3728      	adds	r7, #40	; 0x28
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40000800 	.word	0x40000800
 800281c:	40023800 	.word	0x40023800
 8002820:	40020c00 	.word	0x40020c00
 8002824:	40010400 	.word	0x40010400
 8002828:	40020800 	.word	0x40020800
 800282c:	40014000 	.word	0x40014000
 8002830:	40020000 	.word	0x40020000

08002834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08a      	sub	sp, #40	; 0x28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	f107 0314 	add.w	r3, r7, #20
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a35      	ldr	r2, [pc, #212]	; (8002928 <HAL_UART_MspInit+0xf4>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d163      	bne.n	800291e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	4b34      	ldr	r3, [pc, #208]	; (800292c <HAL_UART_MspInit+0xf8>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	4a33      	ldr	r2, [pc, #204]	; (800292c <HAL_UART_MspInit+0xf8>)
 8002860:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002864:	6413      	str	r3, [r2, #64]	; 0x40
 8002866:	4b31      	ldr	r3, [pc, #196]	; (800292c <HAL_UART_MspInit+0xf8>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	4b2d      	ldr	r3, [pc, #180]	; (800292c <HAL_UART_MspInit+0xf8>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	4a2c      	ldr	r2, [pc, #176]	; (800292c <HAL_UART_MspInit+0xf8>)
 800287c:	f043 0302 	orr.w	r3, r3, #2
 8002880:	6313      	str	r3, [r2, #48]	; 0x30
 8002882:	4b2a      	ldr	r3, [pc, #168]	; (800292c <HAL_UART_MspInit+0xf8>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800288e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002894:	2302      	movs	r3, #2
 8002896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002898:	2300      	movs	r3, #0
 800289a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289c:	2303      	movs	r3, #3
 800289e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028a0:	2307      	movs	r3, #7
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a4:	f107 0314 	add.w	r3, r7, #20
 80028a8:	4619      	mov	r1, r3
 80028aa:	4821      	ldr	r0, [pc, #132]	; (8002930 <HAL_UART_MspInit+0xfc>)
 80028ac:	f000 ff52 	bl	8003754 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80028b0:	4b20      	ldr	r3, [pc, #128]	; (8002934 <HAL_UART_MspInit+0x100>)
 80028b2:	4a21      	ldr	r2, [pc, #132]	; (8002938 <HAL_UART_MspInit+0x104>)
 80028b4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80028b6:	4b1f      	ldr	r3, [pc, #124]	; (8002934 <HAL_UART_MspInit+0x100>)
 80028b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028bc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028be:	4b1d      	ldr	r3, [pc, #116]	; (8002934 <HAL_UART_MspInit+0x100>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028c4:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <HAL_UART_MspInit+0x100>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028ca:	4b1a      	ldr	r3, [pc, #104]	; (8002934 <HAL_UART_MspInit+0x100>)
 80028cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028d0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028d2:	4b18      	ldr	r3, [pc, #96]	; (8002934 <HAL_UART_MspInit+0x100>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028d8:	4b16      	ldr	r3, [pc, #88]	; (8002934 <HAL_UART_MspInit+0x100>)
 80028da:	2200      	movs	r2, #0
 80028dc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80028de:	4b15      	ldr	r3, [pc, #84]	; (8002934 <HAL_UART_MspInit+0x100>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80028e4:	4b13      	ldr	r3, [pc, #76]	; (8002934 <HAL_UART_MspInit+0x100>)
 80028e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028ea:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028ec:	4b11      	ldr	r3, [pc, #68]	; (8002934 <HAL_UART_MspInit+0x100>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80028f2:	4810      	ldr	r0, [pc, #64]	; (8002934 <HAL_UART_MspInit+0x100>)
 80028f4:	f000 fb2c 	bl	8002f50 <HAL_DMA_Init>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80028fe:	f7ff fd7f 	bl	8002400 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a0b      	ldr	r2, [pc, #44]	; (8002934 <HAL_UART_MspInit+0x100>)
 8002906:	639a      	str	r2, [r3, #56]	; 0x38
 8002908:	4a0a      	ldr	r2, [pc, #40]	; (8002934 <HAL_UART_MspInit+0x100>)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800290e:	2200      	movs	r2, #0
 8002910:	2100      	movs	r1, #0
 8002912:	2027      	movs	r0, #39	; 0x27
 8002914:	f000 fae1 	bl	8002eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002918:	2027      	movs	r0, #39	; 0x27
 800291a:	f000 fafa 	bl	8002f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800291e:	bf00      	nop
 8002920:	3728      	adds	r7, #40	; 0x28
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40004800 	.word	0x40004800
 800292c:	40023800 	.word	0x40023800
 8002930:	40020400 	.word	0x40020400
 8002934:	20000518 	.word	0x20000518
 8002938:	40026028 	.word	0x40026028

0800293c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002940:	e7fe      	b.n	8002940 <NMI_Handler+0x4>

08002942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002942:	b480      	push	{r7}
 8002944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002946:	e7fe      	b.n	8002946 <HardFault_Handler+0x4>

08002948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800294c:	e7fe      	b.n	800294c <MemManage_Handler+0x4>

0800294e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800294e:	b480      	push	{r7}
 8002950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002952:	e7fe      	b.n	8002952 <BusFault_Handler+0x4>

08002954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002958:	e7fe      	b.n	8002958 <UsageFault_Handler+0x4>

0800295a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800295a:	b480      	push	{r7}
 800295c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002976:	b480      	push	{r7}
 8002978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800297a:	bf00      	nop
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002988:	f000 f996 	bl	8002cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800298c:	bf00      	nop
 800298e:	bd80      	pop	{r7, pc}

08002990 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002994:	2004      	movs	r0, #4
 8002996:	f001 f8c5 	bl	8003b24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80029a4:	4802      	ldr	r0, [pc, #8]	; (80029b0 <DMA1_Stream1_IRQHandler+0x10>)
 80029a6:	f000 fc6b 	bl	8003280 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000518 	.word	0x20000518

080029b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80029b8:	2040      	movs	r0, #64	; 0x40
 80029ba:	f001 f8b3 	bl	8003b24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80029be:	2080      	movs	r0, #128	; 0x80
 80029c0:	f001 f8b0 	bl	8003b24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80029c4:	bf00      	nop
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029cc:	4803      	ldr	r0, [pc, #12]	; (80029dc <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80029ce:	f002 f8d7 	bl	8004b80 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80029d2:	4803      	ldr	r0, [pc, #12]	; (80029e0 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80029d4:	f002 f8d4 	bl	8004b80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80029d8:	bf00      	nop
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	200002dc 	.word	0x200002dc
 80029e0:	2000048c 	.word	0x2000048c

080029e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80029e8:	4802      	ldr	r0, [pc, #8]	; (80029f4 <USART3_IRQHandler+0x10>)
 80029ea:	f003 f8b9 	bl	8005b60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	200004d4 	.word	0x200004d4

080029f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80029fc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002a00:	f001 f890 	bl	8003b24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002a04:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002a08:	f001 f88c 	bl	8003b24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a0c:	bf00      	nop
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  return 1;
 8002a14:	2301      	movs	r3, #1
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <_kill>:

int _kill(int pid, int sig)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a2a:	f004 fe6d 	bl	8007708 <__errno>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2216      	movs	r2, #22
 8002a32:	601a      	str	r2, [r3, #0]
  return -1;
 8002a34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <_exit>:

void _exit (int status)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a48:	f04f 31ff 	mov.w	r1, #4294967295
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff ffe7 	bl	8002a20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a52:	e7fe      	b.n	8002a52 <_exit+0x12>

08002a54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	e00a      	b.n	8002a7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a66:	f3af 8000 	nop.w
 8002a6a:	4601      	mov	r1, r0
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	60ba      	str	r2, [r7, #8]
 8002a72:	b2ca      	uxtb	r2, r1
 8002a74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	dbf0      	blt.n	8002a66 <_read+0x12>
  }

  return len;
 8002a84:	687b      	ldr	r3, [r7, #4]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b086      	sub	sp, #24
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
 8002a9e:	e009      	b.n	8002ab4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	1c5a      	adds	r2, r3, #1
 8002aa4:	60ba      	str	r2, [r7, #8]
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	dbf1      	blt.n	8002aa0 <_write+0x12>
  }
  return len;
 8002abc:	687b      	ldr	r3, [r7, #4]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <_close>:

int _close(int file)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ace:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002aee:	605a      	str	r2, [r3, #4]
  return 0;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <_isatty>:

int _isatty(int file)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b06:	2301      	movs	r3, #1
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
	...

08002b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b38:	4a14      	ldr	r2, [pc, #80]	; (8002b8c <_sbrk+0x5c>)
 8002b3a:	4b15      	ldr	r3, [pc, #84]	; (8002b90 <_sbrk+0x60>)
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b44:	4b13      	ldr	r3, [pc, #76]	; (8002b94 <_sbrk+0x64>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d102      	bne.n	8002b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b4c:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <_sbrk+0x64>)
 8002b4e:	4a12      	ldr	r2, [pc, #72]	; (8002b98 <_sbrk+0x68>)
 8002b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b52:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <_sbrk+0x64>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4413      	add	r3, r2
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d207      	bcs.n	8002b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b60:	f004 fdd2 	bl	8007708 <__errno>
 8002b64:	4603      	mov	r3, r0
 8002b66:	220c      	movs	r2, #12
 8002b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6e:	e009      	b.n	8002b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b70:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <_sbrk+0x64>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b76:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <_sbrk+0x64>)
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	4a05      	ldr	r2, [pc, #20]	; (8002b94 <_sbrk+0x64>)
 8002b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b82:	68fb      	ldr	r3, [r7, #12]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	20020000 	.word	0x20020000
 8002b90:	00000400 	.word	0x00000400
 8002b94:	200008dc 	.word	0x200008dc
 8002b98:	200008f8 	.word	0x200008f8

08002b9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ba0:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <SystemInit+0x20>)
 8002ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba6:	4a05      	ldr	r2, [pc, #20]	; (8002bbc <SystemInit+0x20>)
 8002ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	e000ed00 	.word	0xe000ed00

08002bc0 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8002bc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bf8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bc4:	480d      	ldr	r0, [pc, #52]	; (8002bfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bc6:	490e      	ldr	r1, [pc, #56]	; (8002c00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bc8:	4a0e      	ldr	r2, [pc, #56]	; (8002c04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bcc:	e002      	b.n	8002bd4 <LoopCopyDataInit>

08002bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bd2:	3304      	adds	r3, #4

08002bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bd8:	d3f9      	bcc.n	8002bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bda:	4a0b      	ldr	r2, [pc, #44]	; (8002c08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bdc:	4c0b      	ldr	r4, [pc, #44]	; (8002c0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002be0:	e001      	b.n	8002be6 <LoopFillZerobss>

08002be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002be4:	3204      	adds	r2, #4

08002be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002be8:	d3fb      	bcc.n	8002be2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bea:	f7ff ffd7 	bl	8002b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bee:	f004 fd91 	bl	8007714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bf2:	f7fe fe4d 	bl	8001890 <main>
  bx  lr    
 8002bf6:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8002bf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c00:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 8002c04:	0800ce6c 	.word	0x0800ce6c
  ldr r2, =_sbss
 8002c08:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 8002c0c:	200008f4 	.word	0x200008f4

08002c10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c10:	e7fe      	b.n	8002c10 <ADC_IRQHandler>
	...

08002c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c18:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <HAL_Init+0x40>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a0d      	ldr	r2, [pc, #52]	; (8002c54 <HAL_Init+0x40>)
 8002c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c24:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <HAL_Init+0x40>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <HAL_Init+0x40>)
 8002c2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c30:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <HAL_Init+0x40>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a07      	ldr	r2, [pc, #28]	; (8002c54 <HAL_Init+0x40>)
 8002c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c3c:	2003      	movs	r0, #3
 8002c3e:	f000 f941 	bl	8002ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c42:	200f      	movs	r0, #15
 8002c44:	f000 f808 	bl	8002c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c48:	f7ff fbe0 	bl	800240c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40023c00 	.word	0x40023c00

08002c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c60:	4b12      	ldr	r3, [pc, #72]	; (8002cac <HAL_InitTick+0x54>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <HAL_InitTick+0x58>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 f95d 	bl	8002f36 <HAL_SYSTICK_Config>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e00e      	b.n	8002ca4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b0f      	cmp	r3, #15
 8002c8a:	d80a      	bhi.n	8002ca2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	f04f 30ff 	mov.w	r0, #4294967295
 8002c94:	f000 f921 	bl	8002eda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c98:	4a06      	ldr	r2, [pc, #24]	; (8002cb4 <HAL_InitTick+0x5c>)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	e000      	b.n	8002ca4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	200000e0 	.word	0x200000e0
 8002cb0:	200000e8 	.word	0x200000e8
 8002cb4:	200000e4 	.word	0x200000e4

08002cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_IncTick+0x20>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <HAL_IncTick+0x24>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	4a04      	ldr	r2, [pc, #16]	; (8002cdc <HAL_IncTick+0x24>)
 8002cca:	6013      	str	r3, [r2, #0]
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	200000e8 	.word	0x200000e8
 8002cdc:	200008e0 	.word	0x200008e0

08002ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ce4:	4b03      	ldr	r3, [pc, #12]	; (8002cf4 <HAL_GetTick+0x14>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	200008e0 	.word	0x200008e0

08002cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d08:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <__NVIC_SetPriorityGrouping+0x44>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d14:	4013      	ands	r3, r2
 8002d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d2a:	4a04      	ldr	r2, [pc, #16]	; (8002d3c <__NVIC_SetPriorityGrouping+0x44>)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	60d3      	str	r3, [r2, #12]
}
 8002d30:	bf00      	nop
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d44:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <__NVIC_GetPriorityGrouping+0x18>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	0a1b      	lsrs	r3, r3, #8
 8002d4a:	f003 0307 	and.w	r3, r3, #7
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	db0b      	blt.n	8002d86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	f003 021f 	and.w	r2, r3, #31
 8002d74:	4907      	ldr	r1, [pc, #28]	; (8002d94 <__NVIC_EnableIRQ+0x38>)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	095b      	lsrs	r3, r3, #5
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	e000e100 	.word	0xe000e100

08002d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	6039      	str	r1, [r7, #0]
 8002da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	db0a      	blt.n	8002dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	490c      	ldr	r1, [pc, #48]	; (8002de4 <__NVIC_SetPriority+0x4c>)
 8002db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db6:	0112      	lsls	r2, r2, #4
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	440b      	add	r3, r1
 8002dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dc0:	e00a      	b.n	8002dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	4908      	ldr	r1, [pc, #32]	; (8002de8 <__NVIC_SetPriority+0x50>)
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	3b04      	subs	r3, #4
 8002dd0:	0112      	lsls	r2, r2, #4
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	761a      	strb	r2, [r3, #24]
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	e000e100 	.word	0xe000e100
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b089      	sub	sp, #36	; 0x24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f1c3 0307 	rsb	r3, r3, #7
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	bf28      	it	cs
 8002e0a:	2304      	movcs	r3, #4
 8002e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	3304      	adds	r3, #4
 8002e12:	2b06      	cmp	r3, #6
 8002e14:	d902      	bls.n	8002e1c <NVIC_EncodePriority+0x30>
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	3b03      	subs	r3, #3
 8002e1a:	e000      	b.n	8002e1e <NVIC_EncodePriority+0x32>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e20:	f04f 32ff 	mov.w	r2, #4294967295
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43da      	mvns	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	401a      	ands	r2, r3
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e34:	f04f 31ff 	mov.w	r1, #4294967295
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3e:	43d9      	mvns	r1, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e44:	4313      	orrs	r3, r2
         );
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3724      	adds	r7, #36	; 0x24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
	...

08002e54 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e58:	f3bf 8f4f 	dsb	sy
}
 8002e5c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002e5e:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <__NVIC_SystemReset+0x24>)
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002e66:	4904      	ldr	r1, [pc, #16]	; (8002e78 <__NVIC_SystemReset+0x24>)
 8002e68:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <__NVIC_SystemReset+0x28>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e6e:	f3bf 8f4f 	dsb	sy
}
 8002e72:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002e74:	bf00      	nop
 8002e76:	e7fd      	b.n	8002e74 <__NVIC_SystemReset+0x20>
 8002e78:	e000ed00 	.word	0xe000ed00
 8002e7c:	05fa0004 	.word	0x05fa0004

08002e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e90:	d301      	bcc.n	8002e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e92:	2301      	movs	r3, #1
 8002e94:	e00f      	b.n	8002eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e96:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <SysTick_Config+0x40>)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e9e:	210f      	movs	r1, #15
 8002ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea4:	f7ff ff78 	bl	8002d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ea8:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <SysTick_Config+0x40>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eae:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <SysTick_Config+0x40>)
 8002eb0:	2207      	movs	r2, #7
 8002eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	e000e010 	.word	0xe000e010

08002ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7ff ff13 	bl	8002cf8 <__NVIC_SetPriorityGrouping>
}
 8002ed2:	bf00      	nop
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b086      	sub	sp, #24
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	607a      	str	r2, [r7, #4]
 8002ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002eec:	f7ff ff28 	bl	8002d40 <__NVIC_GetPriorityGrouping>
 8002ef0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	68b9      	ldr	r1, [r7, #8]
 8002ef6:	6978      	ldr	r0, [r7, #20]
 8002ef8:	f7ff ff78 	bl	8002dec <NVIC_EncodePriority>
 8002efc:	4602      	mov	r2, r0
 8002efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f02:	4611      	mov	r1, r2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff ff47 	bl	8002d98 <__NVIC_SetPriority>
}
 8002f0a:	bf00      	nop
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	4603      	mov	r3, r0
 8002f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff ff1b 	bl	8002d5c <__NVIC_EnableIRQ>
}
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002f32:	f7ff ff8f 	bl	8002e54 <__NVIC_SystemReset>

08002f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff ff9e 	bl	8002e80 <SysTick_Config>
 8002f44:	4603      	mov	r3, r0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f5c:	f7ff fec0 	bl	8002ce0 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e099      	b.n	80030a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0201 	bic.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f8c:	e00f      	b.n	8002fae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f8e:	f7ff fea7 	bl	8002ce0 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b05      	cmp	r3, #5
 8002f9a:	d908      	bls.n	8002fae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e078      	b.n	80030a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1e8      	bne.n	8002f8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	4b38      	ldr	r3, [pc, #224]	; (80030a8 <HAL_DMA_Init+0x158>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ff2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	2b04      	cmp	r3, #4
 8003006:	d107      	bne.n	8003018 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003010:	4313      	orrs	r3, r2
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	4313      	orrs	r3, r2
 8003016:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f023 0307 	bic.w	r3, r3, #7
 800302e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	2b04      	cmp	r3, #4
 8003040:	d117      	bne.n	8003072 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	4313      	orrs	r3, r2
 800304a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00e      	beq.n	8003072 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 fb01 	bl	800365c <DMA_CheckFifoParam>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2240      	movs	r2, #64	; 0x40
 8003064:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800306e:	2301      	movs	r3, #1
 8003070:	e016      	b.n	80030a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 fab8 	bl	80035f0 <DMA_CalcBaseAndBitshift>
 8003080:	4603      	mov	r3, r0
 8003082:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003088:	223f      	movs	r2, #63	; 0x3f
 800308a:	409a      	lsls	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	f010803f 	.word	0xf010803f

080030ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
 80030b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d101      	bne.n	80030d2 <HAL_DMA_Start_IT+0x26>
 80030ce:	2302      	movs	r3, #2
 80030d0:	e040      	b.n	8003154 <HAL_DMA_Start_IT+0xa8>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d12f      	bne.n	8003146 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2202      	movs	r2, #2
 80030ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 fa4a 	bl	8003594 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003104:	223f      	movs	r2, #63	; 0x3f
 8003106:	409a      	lsls	r2, r3
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0216 	orr.w	r2, r2, #22
 800311a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	2b00      	cmp	r3, #0
 8003122:	d007      	beq.n	8003134 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0208 	orr.w	r2, r2, #8
 8003132:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	e005      	b.n	8003152 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800314e:	2302      	movs	r3, #2
 8003150:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003152:	7dfb      	ldrb	r3, [r7, #23]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003168:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800316a:	f7ff fdb9 	bl	8002ce0 <HAL_GetTick>
 800316e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d008      	beq.n	800318e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2280      	movs	r2, #128	; 0x80
 8003180:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e052      	b.n	8003234 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0216 	bic.w	r2, r2, #22
 800319c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695a      	ldr	r2, [r3, #20]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d103      	bne.n	80031be <HAL_DMA_Abort+0x62>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d007      	beq.n	80031ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0208 	bic.w	r2, r2, #8
 80031cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0201 	bic.w	r2, r2, #1
 80031dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031de:	e013      	b.n	8003208 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031e0:	f7ff fd7e 	bl	8002ce0 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b05      	cmp	r3, #5
 80031ec:	d90c      	bls.n	8003208 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2220      	movs	r2, #32
 80031f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2203      	movs	r2, #3
 80031f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e015      	b.n	8003234 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1e4      	bne.n	80031e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321a:	223f      	movs	r2, #63	; 0x3f
 800321c:	409a      	lsls	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d004      	beq.n	800325a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2280      	movs	r2, #128	; 0x80
 8003254:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e00c      	b.n	8003274 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2205      	movs	r2, #5
 800325e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0201 	bic.w	r2, r2, #1
 8003270:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800328c:	4b8e      	ldr	r3, [pc, #568]	; (80034c8 <HAL_DMA_IRQHandler+0x248>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a8e      	ldr	r2, [pc, #568]	; (80034cc <HAL_DMA_IRQHandler+0x24c>)
 8003292:	fba2 2303 	umull	r2, r3, r2, r3
 8003296:	0a9b      	lsrs	r3, r3, #10
 8003298:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032aa:	2208      	movs	r2, #8
 80032ac:	409a      	lsls	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4013      	ands	r3, r2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d01a      	beq.n	80032ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d013      	beq.n	80032ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0204 	bic.w	r2, r2, #4
 80032d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d8:	2208      	movs	r2, #8
 80032da:	409a      	lsls	r2, r3
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e4:	f043 0201 	orr.w	r2, r3, #1
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f0:	2201      	movs	r2, #1
 80032f2:	409a      	lsls	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d012      	beq.n	8003322 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00b      	beq.n	8003322 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330e:	2201      	movs	r2, #1
 8003310:	409a      	lsls	r2, r3
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331a:	f043 0202 	orr.w	r2, r3, #2
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003326:	2204      	movs	r2, #4
 8003328:	409a      	lsls	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4013      	ands	r3, r2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d012      	beq.n	8003358 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00b      	beq.n	8003358 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003344:	2204      	movs	r2, #4
 8003346:	409a      	lsls	r2, r3
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003350:	f043 0204 	orr.w	r2, r3, #4
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335c:	2210      	movs	r2, #16
 800335e:	409a      	lsls	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4013      	ands	r3, r2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d043      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d03c      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337a:	2210      	movs	r2, #16
 800337c:	409a      	lsls	r2, r3
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d018      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d108      	bne.n	80033b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d024      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	4798      	blx	r3
 80033ae:	e01f      	b.n	80033f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01b      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	4798      	blx	r3
 80033c0:	e016      	b.n	80033f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d107      	bne.n	80033e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0208 	bic.w	r2, r2, #8
 80033de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f4:	2220      	movs	r2, #32
 80033f6:	409a      	lsls	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 808f 	beq.w	8003520 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0310 	and.w	r3, r3, #16
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 8087 	beq.w	8003520 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003416:	2220      	movs	r2, #32
 8003418:	409a      	lsls	r2, r3
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b05      	cmp	r3, #5
 8003428:	d136      	bne.n	8003498 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0216 	bic.w	r2, r2, #22
 8003438:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695a      	ldr	r2, [r3, #20]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003448:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	2b00      	cmp	r3, #0
 8003450:	d103      	bne.n	800345a <HAL_DMA_IRQHandler+0x1da>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003456:	2b00      	cmp	r3, #0
 8003458:	d007      	beq.n	800346a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0208 	bic.w	r2, r2, #8
 8003468:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346e:	223f      	movs	r2, #63	; 0x3f
 8003470:	409a      	lsls	r2, r3
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800348a:	2b00      	cmp	r3, #0
 800348c:	d07e      	beq.n	800358c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	4798      	blx	r3
        }
        return;
 8003496:	e079      	b.n	800358c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d01d      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10d      	bne.n	80034d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d031      	beq.n	8003520 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	4798      	blx	r3
 80034c4:	e02c      	b.n	8003520 <HAL_DMA_IRQHandler+0x2a0>
 80034c6:	bf00      	nop
 80034c8:	200000e0 	.word	0x200000e0
 80034cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d023      	beq.n	8003520 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	4798      	blx	r3
 80034e0:	e01e      	b.n	8003520 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10f      	bne.n	8003510 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0210 	bic.w	r2, r2, #16
 80034fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003524:	2b00      	cmp	r3, #0
 8003526:	d032      	beq.n	800358e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d022      	beq.n	800357a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2205      	movs	r2, #5
 8003538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0201 	bic.w	r2, r2, #1
 800354a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	3301      	adds	r3, #1
 8003550:	60bb      	str	r3, [r7, #8]
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	429a      	cmp	r2, r3
 8003556:	d307      	bcc.n	8003568 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f2      	bne.n	800354c <HAL_DMA_IRQHandler+0x2cc>
 8003566:	e000      	b.n	800356a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003568:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357e:	2b00      	cmp	r3, #0
 8003580:	d005      	beq.n	800358e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	4798      	blx	r3
 800358a:	e000      	b.n	800358e <HAL_DMA_IRQHandler+0x30e>
        return;
 800358c:	bf00      	nop
    }
  }
}
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
 80035a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	2b40      	cmp	r3, #64	; 0x40
 80035c0:	d108      	bne.n	80035d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80035d2:	e007      	b.n	80035e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	60da      	str	r2, [r3, #12]
}
 80035e4:	bf00      	nop
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	3b10      	subs	r3, #16
 8003600:	4a14      	ldr	r2, [pc, #80]	; (8003654 <DMA_CalcBaseAndBitshift+0x64>)
 8003602:	fba2 2303 	umull	r2, r3, r2, r3
 8003606:	091b      	lsrs	r3, r3, #4
 8003608:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800360a:	4a13      	ldr	r2, [pc, #76]	; (8003658 <DMA_CalcBaseAndBitshift+0x68>)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4413      	add	r3, r2
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b03      	cmp	r3, #3
 800361c:	d909      	bls.n	8003632 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003626:	f023 0303 	bic.w	r3, r3, #3
 800362a:	1d1a      	adds	r2, r3, #4
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	659a      	str	r2, [r3, #88]	; 0x58
 8003630:	e007      	b.n	8003642 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800363a:	f023 0303 	bic.w	r3, r3, #3
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003646:	4618      	mov	r0, r3
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	aaaaaaab 	.word	0xaaaaaaab
 8003658:	0800c998 	.word	0x0800c998

0800365c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003664:	2300      	movs	r3, #0
 8003666:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d11f      	bne.n	80036b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b03      	cmp	r3, #3
 800367a:	d856      	bhi.n	800372a <DMA_CheckFifoParam+0xce>
 800367c:	a201      	add	r2, pc, #4	; (adr r2, 8003684 <DMA_CheckFifoParam+0x28>)
 800367e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003682:	bf00      	nop
 8003684:	08003695 	.word	0x08003695
 8003688:	080036a7 	.word	0x080036a7
 800368c:	08003695 	.word	0x08003695
 8003690:	0800372b 	.word	0x0800372b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d046      	beq.n	800372e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a4:	e043      	b.n	800372e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036ae:	d140      	bne.n	8003732 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036b4:	e03d      	b.n	8003732 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036be:	d121      	bne.n	8003704 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d837      	bhi.n	8003736 <DMA_CheckFifoParam+0xda>
 80036c6:	a201      	add	r2, pc, #4	; (adr r2, 80036cc <DMA_CheckFifoParam+0x70>)
 80036c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036cc:	080036dd 	.word	0x080036dd
 80036d0:	080036e3 	.word	0x080036e3
 80036d4:	080036dd 	.word	0x080036dd
 80036d8:	080036f5 	.word	0x080036f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
      break;
 80036e0:	e030      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d025      	beq.n	800373a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f2:	e022      	b.n	800373a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036fc:	d11f      	bne.n	800373e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003702:	e01c      	b.n	800373e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2b02      	cmp	r3, #2
 8003708:	d903      	bls.n	8003712 <DMA_CheckFifoParam+0xb6>
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b03      	cmp	r3, #3
 800370e:	d003      	beq.n	8003718 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003710:	e018      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	73fb      	strb	r3, [r7, #15]
      break;
 8003716:	e015      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00e      	beq.n	8003742 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	73fb      	strb	r3, [r7, #15]
      break;
 8003728:	e00b      	b.n	8003742 <DMA_CheckFifoParam+0xe6>
      break;
 800372a:	bf00      	nop
 800372c:	e00a      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      break;
 800372e:	bf00      	nop
 8003730:	e008      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      break;
 8003732:	bf00      	nop
 8003734:	e006      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      break;
 8003736:	bf00      	nop
 8003738:	e004      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      break;
 800373a:	bf00      	nop
 800373c:	e002      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      break;   
 800373e:	bf00      	nop
 8003740:	e000      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      break;
 8003742:	bf00      	nop
    }
  } 
  
  return status; 
 8003744:	7bfb      	ldrb	r3, [r7, #15]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop

08003754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003754:	b480      	push	{r7}
 8003756:	b089      	sub	sp, #36	; 0x24
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003762:	2300      	movs	r3, #0
 8003764:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003766:	2300      	movs	r3, #0
 8003768:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800376a:	2300      	movs	r3, #0
 800376c:	61fb      	str	r3, [r7, #28]
 800376e:	e16b      	b.n	8003a48 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003770:	2201      	movs	r2, #1
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	4013      	ands	r3, r2
 8003782:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	429a      	cmp	r2, r3
 800378a:	f040 815a 	bne.w	8003a42 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	2b01      	cmp	r3, #1
 8003798:	d005      	beq.n	80037a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d130      	bne.n	8003808 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	2203      	movs	r2, #3
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	43db      	mvns	r3, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4013      	ands	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037dc:	2201      	movs	r2, #1
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	43db      	mvns	r3, r3
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4013      	ands	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	091b      	lsrs	r3, r3, #4
 80037f2:	f003 0201 	and.w	r2, r3, #1
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4313      	orrs	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	2b03      	cmp	r3, #3
 8003812:	d017      	beq.n	8003844 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	2203      	movs	r2, #3
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	43db      	mvns	r3, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4013      	ands	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4313      	orrs	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d123      	bne.n	8003898 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	08da      	lsrs	r2, r3, #3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3208      	adds	r2, #8
 8003858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800385c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	220f      	movs	r2, #15
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	43db      	mvns	r3, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4013      	ands	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4313      	orrs	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	08da      	lsrs	r2, r3, #3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3208      	adds	r2, #8
 8003892:	69b9      	ldr	r1, [r7, #24]
 8003894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	2203      	movs	r2, #3
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	43db      	mvns	r3, r3
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4013      	ands	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 0203 	and.w	r2, r3, #3
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 80b4 	beq.w	8003a42 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	4b60      	ldr	r3, [pc, #384]	; (8003a60 <HAL_GPIO_Init+0x30c>)
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	4a5f      	ldr	r2, [pc, #380]	; (8003a60 <HAL_GPIO_Init+0x30c>)
 80038e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038e8:	6453      	str	r3, [r2, #68]	; 0x44
 80038ea:	4b5d      	ldr	r3, [pc, #372]	; (8003a60 <HAL_GPIO_Init+0x30c>)
 80038ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038f6:	4a5b      	ldr	r2, [pc, #364]	; (8003a64 <HAL_GPIO_Init+0x310>)
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	089b      	lsrs	r3, r3, #2
 80038fc:	3302      	adds	r3, #2
 80038fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003902:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	220f      	movs	r2, #15
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	43db      	mvns	r3, r3
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4013      	ands	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a52      	ldr	r2, [pc, #328]	; (8003a68 <HAL_GPIO_Init+0x314>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d02b      	beq.n	800397a <HAL_GPIO_Init+0x226>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a51      	ldr	r2, [pc, #324]	; (8003a6c <HAL_GPIO_Init+0x318>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d025      	beq.n	8003976 <HAL_GPIO_Init+0x222>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a50      	ldr	r2, [pc, #320]	; (8003a70 <HAL_GPIO_Init+0x31c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d01f      	beq.n	8003972 <HAL_GPIO_Init+0x21e>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a4f      	ldr	r2, [pc, #316]	; (8003a74 <HAL_GPIO_Init+0x320>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d019      	beq.n	800396e <HAL_GPIO_Init+0x21a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a4e      	ldr	r2, [pc, #312]	; (8003a78 <HAL_GPIO_Init+0x324>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d013      	beq.n	800396a <HAL_GPIO_Init+0x216>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a4d      	ldr	r2, [pc, #308]	; (8003a7c <HAL_GPIO_Init+0x328>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d00d      	beq.n	8003966 <HAL_GPIO_Init+0x212>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a4c      	ldr	r2, [pc, #304]	; (8003a80 <HAL_GPIO_Init+0x32c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d007      	beq.n	8003962 <HAL_GPIO_Init+0x20e>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a4b      	ldr	r2, [pc, #300]	; (8003a84 <HAL_GPIO_Init+0x330>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d101      	bne.n	800395e <HAL_GPIO_Init+0x20a>
 800395a:	2307      	movs	r3, #7
 800395c:	e00e      	b.n	800397c <HAL_GPIO_Init+0x228>
 800395e:	2308      	movs	r3, #8
 8003960:	e00c      	b.n	800397c <HAL_GPIO_Init+0x228>
 8003962:	2306      	movs	r3, #6
 8003964:	e00a      	b.n	800397c <HAL_GPIO_Init+0x228>
 8003966:	2305      	movs	r3, #5
 8003968:	e008      	b.n	800397c <HAL_GPIO_Init+0x228>
 800396a:	2304      	movs	r3, #4
 800396c:	e006      	b.n	800397c <HAL_GPIO_Init+0x228>
 800396e:	2303      	movs	r3, #3
 8003970:	e004      	b.n	800397c <HAL_GPIO_Init+0x228>
 8003972:	2302      	movs	r3, #2
 8003974:	e002      	b.n	800397c <HAL_GPIO_Init+0x228>
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <HAL_GPIO_Init+0x228>
 800397a:	2300      	movs	r3, #0
 800397c:	69fa      	ldr	r2, [r7, #28]
 800397e:	f002 0203 	and.w	r2, r2, #3
 8003982:	0092      	lsls	r2, r2, #2
 8003984:	4093      	lsls	r3, r2
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	4313      	orrs	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800398c:	4935      	ldr	r1, [pc, #212]	; (8003a64 <HAL_GPIO_Init+0x310>)
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	089b      	lsrs	r3, r3, #2
 8003992:	3302      	adds	r3, #2
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800399a:	4b3b      	ldr	r3, [pc, #236]	; (8003a88 <HAL_GPIO_Init+0x334>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	43db      	mvns	r3, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4013      	ands	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039be:	4a32      	ldr	r2, [pc, #200]	; (8003a88 <HAL_GPIO_Init+0x334>)
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039c4:	4b30      	ldr	r3, [pc, #192]	; (8003a88 <HAL_GPIO_Init+0x334>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	43db      	mvns	r3, r3
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	4013      	ands	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039e8:	4a27      	ldr	r2, [pc, #156]	; (8003a88 <HAL_GPIO_Init+0x334>)
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039ee:	4b26      	ldr	r3, [pc, #152]	; (8003a88 <HAL_GPIO_Init+0x334>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	43db      	mvns	r3, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4013      	ands	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a12:	4a1d      	ldr	r2, [pc, #116]	; (8003a88 <HAL_GPIO_Init+0x334>)
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a18:	4b1b      	ldr	r3, [pc, #108]	; (8003a88 <HAL_GPIO_Init+0x334>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	43db      	mvns	r3, r3
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4013      	ands	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a3c:	4a12      	ldr	r2, [pc, #72]	; (8003a88 <HAL_GPIO_Init+0x334>)
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	3301      	adds	r3, #1
 8003a46:	61fb      	str	r3, [r7, #28]
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	2b0f      	cmp	r3, #15
 8003a4c:	f67f ae90 	bls.w	8003770 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a50:	bf00      	nop
 8003a52:	bf00      	nop
 8003a54:	3724      	adds	r7, #36	; 0x24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	40023800 	.word	0x40023800
 8003a64:	40013800 	.word	0x40013800
 8003a68:	40020000 	.word	0x40020000
 8003a6c:	40020400 	.word	0x40020400
 8003a70:	40020800 	.word	0x40020800
 8003a74:	40020c00 	.word	0x40020c00
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	40021400 	.word	0x40021400
 8003a80:	40021800 	.word	0x40021800
 8003a84:	40021c00 	.word	0x40021c00
 8003a88:	40013c00 	.word	0x40013c00

08003a8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	460b      	mov	r3, r1
 8003a96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	887b      	ldrh	r3, [r7, #2]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	73fb      	strb	r3, [r7, #15]
 8003aa8:	e001      	b.n	8003aae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	807b      	strh	r3, [r7, #2]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003acc:	787b      	ldrb	r3, [r7, #1]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ad2:	887a      	ldrh	r2, [r7, #2]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ad8:	e003      	b.n	8003ae2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ada:	887b      	ldrh	r3, [r7, #2]
 8003adc:	041a      	lsls	r2, r3, #16
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	619a      	str	r2, [r3, #24]
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b085      	sub	sp, #20
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	460b      	mov	r3, r1
 8003af8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b00:	887a      	ldrh	r2, [r7, #2]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4013      	ands	r3, r2
 8003b06:	041a      	lsls	r2, r3, #16
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	43d9      	mvns	r1, r3
 8003b0c:	887b      	ldrh	r3, [r7, #2]
 8003b0e:	400b      	ands	r3, r1
 8003b10:	431a      	orrs	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	619a      	str	r2, [r3, #24]
}
 8003b16:	bf00      	nop
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
	...

08003b24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b2e:	4b08      	ldr	r3, [pc, #32]	; (8003b50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b30:	695a      	ldr	r2, [r3, #20]
 8003b32:	88fb      	ldrh	r3, [r7, #6]
 8003b34:	4013      	ands	r3, r2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d006      	beq.n	8003b48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b3a:	4a05      	ldr	r2, [pc, #20]	; (8003b50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b3c:	88fb      	ldrh	r3, [r7, #6]
 8003b3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b40:	88fb      	ldrh	r3, [r7, #6]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fd fe2e 	bl	80017a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b48:	bf00      	nop
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40013c00 	.word	0x40013c00

08003b54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e267      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d075      	beq.n	8003c5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b72:	4b88      	ldr	r3, [pc, #544]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 030c 	and.w	r3, r3, #12
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d00c      	beq.n	8003b98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b7e:	4b85      	ldr	r3, [pc, #532]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b86:	2b08      	cmp	r3, #8
 8003b88:	d112      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b8a:	4b82      	ldr	r3, [pc, #520]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b96:	d10b      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b98:	4b7e      	ldr	r3, [pc, #504]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d05b      	beq.n	8003c5c <HAL_RCC_OscConfig+0x108>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d157      	bne.n	8003c5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e242      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb8:	d106      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x74>
 8003bba:	4b76      	ldr	r3, [pc, #472]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a75      	ldr	r2, [pc, #468]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	e01d      	b.n	8003c04 <HAL_RCC_OscConfig+0xb0>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bd0:	d10c      	bne.n	8003bec <HAL_RCC_OscConfig+0x98>
 8003bd2:	4b70      	ldr	r3, [pc, #448]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a6f      	ldr	r2, [pc, #444]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	4b6d      	ldr	r3, [pc, #436]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a6c      	ldr	r2, [pc, #432]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	e00b      	b.n	8003c04 <HAL_RCC_OscConfig+0xb0>
 8003bec:	4b69      	ldr	r3, [pc, #420]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a68      	ldr	r2, [pc, #416]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	4b66      	ldr	r3, [pc, #408]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a65      	ldr	r2, [pc, #404]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d013      	beq.n	8003c34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0c:	f7ff f868 	bl	8002ce0 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c14:	f7ff f864 	bl	8002ce0 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b64      	cmp	r3, #100	; 0x64
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e207      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c26:	4b5b      	ldr	r3, [pc, #364]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0f0      	beq.n	8003c14 <HAL_RCC_OscConfig+0xc0>
 8003c32:	e014      	b.n	8003c5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c34:	f7ff f854 	bl	8002ce0 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c3c:	f7ff f850 	bl	8002ce0 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b64      	cmp	r3, #100	; 0x64
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e1f3      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c4e:	4b51      	ldr	r3, [pc, #324]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f0      	bne.n	8003c3c <HAL_RCC_OscConfig+0xe8>
 8003c5a:	e000      	b.n	8003c5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d063      	beq.n	8003d32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c6a:	4b4a      	ldr	r3, [pc, #296]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 030c 	and.w	r3, r3, #12
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00b      	beq.n	8003c8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c76:	4b47      	ldr	r3, [pc, #284]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c7e:	2b08      	cmp	r3, #8
 8003c80:	d11c      	bne.n	8003cbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c82:	4b44      	ldr	r3, [pc, #272]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d116      	bne.n	8003cbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c8e:	4b41      	ldr	r3, [pc, #260]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d005      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x152>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d001      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e1c7      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca6:	4b3b      	ldr	r3, [pc, #236]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4937      	ldr	r1, [pc, #220]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cba:	e03a      	b.n	8003d32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d020      	beq.n	8003d06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cc4:	4b34      	ldr	r3, [pc, #208]	; (8003d98 <HAL_RCC_OscConfig+0x244>)
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cca:	f7ff f809 	bl	8002ce0 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cd2:	f7ff f805 	bl	8002ce0 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e1a8      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce4:	4b2b      	ldr	r3, [pc, #172]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf0:	4b28      	ldr	r3, [pc, #160]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	4925      	ldr	r1, [pc, #148]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	600b      	str	r3, [r1, #0]
 8003d04:	e015      	b.n	8003d32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d06:	4b24      	ldr	r3, [pc, #144]	; (8003d98 <HAL_RCC_OscConfig+0x244>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0c:	f7fe ffe8 	bl	8002ce0 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d14:	f7fe ffe4 	bl	8002ce0 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e187      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d26:	4b1b      	ldr	r3, [pc, #108]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0308 	and.w	r3, r3, #8
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d036      	beq.n	8003dac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d016      	beq.n	8003d74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d46:	4b15      	ldr	r3, [pc, #84]	; (8003d9c <HAL_RCC_OscConfig+0x248>)
 8003d48:	2201      	movs	r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4c:	f7fe ffc8 	bl	8002ce0 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d54:	f7fe ffc4 	bl	8002ce0 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e167      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d66:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f0      	beq.n	8003d54 <HAL_RCC_OscConfig+0x200>
 8003d72:	e01b      	b.n	8003dac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d74:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <HAL_RCC_OscConfig+0x248>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d7a:	f7fe ffb1 	bl	8002ce0 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d80:	e00e      	b.n	8003da0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d82:	f7fe ffad 	bl	8002ce0 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d907      	bls.n	8003da0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e150      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
 8003d94:	40023800 	.word	0x40023800
 8003d98:	42470000 	.word	0x42470000
 8003d9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da0:	4b88      	ldr	r3, [pc, #544]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1ea      	bne.n	8003d82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 8097 	beq.w	8003ee8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dbe:	4b81      	ldr	r3, [pc, #516]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10f      	bne.n	8003dea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60bb      	str	r3, [r7, #8]
 8003dce:	4b7d      	ldr	r3, [pc, #500]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	4a7c      	ldr	r2, [pc, #496]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dda:	4b7a      	ldr	r3, [pc, #488]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de2:	60bb      	str	r3, [r7, #8]
 8003de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003de6:	2301      	movs	r3, #1
 8003de8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dea:	4b77      	ldr	r3, [pc, #476]	; (8003fc8 <HAL_RCC_OscConfig+0x474>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d118      	bne.n	8003e28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003df6:	4b74      	ldr	r3, [pc, #464]	; (8003fc8 <HAL_RCC_OscConfig+0x474>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a73      	ldr	r2, [pc, #460]	; (8003fc8 <HAL_RCC_OscConfig+0x474>)
 8003dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e02:	f7fe ff6d 	bl	8002ce0 <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e08:	e008      	b.n	8003e1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e0a:	f7fe ff69 	bl	8002ce0 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e10c      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1c:	4b6a      	ldr	r3, [pc, #424]	; (8003fc8 <HAL_RCC_OscConfig+0x474>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0f0      	beq.n	8003e0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d106      	bne.n	8003e3e <HAL_RCC_OscConfig+0x2ea>
 8003e30:	4b64      	ldr	r3, [pc, #400]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e34:	4a63      	ldr	r2, [pc, #396]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e36:	f043 0301 	orr.w	r3, r3, #1
 8003e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e3c:	e01c      	b.n	8003e78 <HAL_RCC_OscConfig+0x324>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	2b05      	cmp	r3, #5
 8003e44:	d10c      	bne.n	8003e60 <HAL_RCC_OscConfig+0x30c>
 8003e46:	4b5f      	ldr	r3, [pc, #380]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4a:	4a5e      	ldr	r2, [pc, #376]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e4c:	f043 0304 	orr.w	r3, r3, #4
 8003e50:	6713      	str	r3, [r2, #112]	; 0x70
 8003e52:	4b5c      	ldr	r3, [pc, #368]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e56:	4a5b      	ldr	r2, [pc, #364]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e58:	f043 0301 	orr.w	r3, r3, #1
 8003e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e5e:	e00b      	b.n	8003e78 <HAL_RCC_OscConfig+0x324>
 8003e60:	4b58      	ldr	r3, [pc, #352]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e64:	4a57      	ldr	r2, [pc, #348]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e66:	f023 0301 	bic.w	r3, r3, #1
 8003e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e6c:	4b55      	ldr	r3, [pc, #340]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e70:	4a54      	ldr	r2, [pc, #336]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e72:	f023 0304 	bic.w	r3, r3, #4
 8003e76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d015      	beq.n	8003eac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e80:	f7fe ff2e 	bl	8002ce0 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e86:	e00a      	b.n	8003e9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e88:	f7fe ff2a 	bl	8002ce0 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e0cb      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e9e:	4b49      	ldr	r3, [pc, #292]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0ee      	beq.n	8003e88 <HAL_RCC_OscConfig+0x334>
 8003eaa:	e014      	b.n	8003ed6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eac:	f7fe ff18 	bl	8002ce0 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb2:	e00a      	b.n	8003eca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eb4:	f7fe ff14 	bl	8002ce0 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e0b5      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eca:	4b3e      	ldr	r3, [pc, #248]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1ee      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ed6:	7dfb      	ldrb	r3, [r7, #23]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d105      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003edc:	4b39      	ldr	r3, [pc, #228]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee0:	4a38      	ldr	r2, [pc, #224]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003ee2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 80a1 	beq.w	8004034 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ef2:	4b34      	ldr	r3, [pc, #208]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d05c      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d141      	bne.n	8003f8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f06:	4b31      	ldr	r3, [pc, #196]	; (8003fcc <HAL_RCC_OscConfig+0x478>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0c:	f7fe fee8 	bl	8002ce0 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f14:	f7fe fee4 	bl	8002ce0 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e087      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f26:	4b27      	ldr	r3, [pc, #156]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69da      	ldr	r2, [r3, #28]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	019b      	lsls	r3, r3, #6
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	085b      	lsrs	r3, r3, #1
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	041b      	lsls	r3, r3, #16
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	061b      	lsls	r3, r3, #24
 8003f56:	491b      	ldr	r1, [pc, #108]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f5c:	4b1b      	ldr	r3, [pc, #108]	; (8003fcc <HAL_RCC_OscConfig+0x478>)
 8003f5e:	2201      	movs	r2, #1
 8003f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f62:	f7fe febd 	bl	8002ce0 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f6a:	f7fe feb9 	bl	8002ce0 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e05c      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f7c:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0f0      	beq.n	8003f6a <HAL_RCC_OscConfig+0x416>
 8003f88:	e054      	b.n	8004034 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8a:	4b10      	ldr	r3, [pc, #64]	; (8003fcc <HAL_RCC_OscConfig+0x478>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f90:	f7fe fea6 	bl	8002ce0 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f98:	f7fe fea2 	bl	8002ce0 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e045      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003faa:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f0      	bne.n	8003f98 <HAL_RCC_OscConfig+0x444>
 8003fb6:	e03d      	b.n	8004034 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d107      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e038      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	40007000 	.word	0x40007000
 8003fcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fd0:	4b1b      	ldr	r3, [pc, #108]	; (8004040 <HAL_RCC_OscConfig+0x4ec>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d028      	beq.n	8004030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d121      	bne.n	8004030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d11a      	bne.n	8004030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004000:	4013      	ands	r3, r2
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004006:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004008:	4293      	cmp	r3, r2
 800400a:	d111      	bne.n	8004030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004016:	085b      	lsrs	r3, r3, #1
 8004018:	3b01      	subs	r3, #1
 800401a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800401c:	429a      	cmp	r2, r3
 800401e:	d107      	bne.n	8004030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800402c:	429a      	cmp	r2, r3
 800402e:	d001      	beq.n	8004034 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e000      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	40023800 	.word	0x40023800

08004044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e0cc      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004058:	4b68      	ldr	r3, [pc, #416]	; (80041fc <HAL_RCC_ClockConfig+0x1b8>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	429a      	cmp	r2, r3
 8004064:	d90c      	bls.n	8004080 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004066:	4b65      	ldr	r3, [pc, #404]	; (80041fc <HAL_RCC_ClockConfig+0x1b8>)
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800406e:	4b63      	ldr	r3, [pc, #396]	; (80041fc <HAL_RCC_ClockConfig+0x1b8>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d001      	beq.n	8004080 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e0b8      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d020      	beq.n	80040ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d005      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004098:	4b59      	ldr	r3, [pc, #356]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	4a58      	ldr	r2, [pc, #352]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 800409e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040b0:	4b53      	ldr	r3, [pc, #332]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	4a52      	ldr	r2, [pc, #328]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80040b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040bc:	4b50      	ldr	r3, [pc, #320]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	494d      	ldr	r1, [pc, #308]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d044      	beq.n	8004164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d107      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040e2:	4b47      	ldr	r3, [pc, #284]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d119      	bne.n	8004122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e07f      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d003      	beq.n	8004102 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040fe:	2b03      	cmp	r3, #3
 8004100:	d107      	bne.n	8004112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004102:	4b3f      	ldr	r3, [pc, #252]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d109      	bne.n	8004122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e06f      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004112:	4b3b      	ldr	r3, [pc, #236]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e067      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004122:	4b37      	ldr	r3, [pc, #220]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f023 0203 	bic.w	r2, r3, #3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	4934      	ldr	r1, [pc, #208]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 8004130:	4313      	orrs	r3, r2
 8004132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004134:	f7fe fdd4 	bl	8002ce0 <HAL_GetTick>
 8004138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800413a:	e00a      	b.n	8004152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800413c:	f7fe fdd0 	bl	8002ce0 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f241 3288 	movw	r2, #5000	; 0x1388
 800414a:	4293      	cmp	r3, r2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e04f      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004152:	4b2b      	ldr	r3, [pc, #172]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 020c 	and.w	r2, r3, #12
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	429a      	cmp	r2, r3
 8004162:	d1eb      	bne.n	800413c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004164:	4b25      	ldr	r3, [pc, #148]	; (80041fc <HAL_RCC_ClockConfig+0x1b8>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d20c      	bcs.n	800418c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004172:	4b22      	ldr	r3, [pc, #136]	; (80041fc <HAL_RCC_ClockConfig+0x1b8>)
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800417a:	4b20      	ldr	r3, [pc, #128]	; (80041fc <HAL_RCC_ClockConfig+0x1b8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	429a      	cmp	r2, r3
 8004186:	d001      	beq.n	800418c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e032      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004198:	4b19      	ldr	r3, [pc, #100]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	4916      	ldr	r1, [pc, #88]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d009      	beq.n	80041ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041b6:	4b12      	ldr	r3, [pc, #72]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	490e      	ldr	r1, [pc, #56]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041ca:	f000 f821 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 80041ce:	4602      	mov	r2, r0
 80041d0:	4b0b      	ldr	r3, [pc, #44]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	091b      	lsrs	r3, r3, #4
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	490a      	ldr	r1, [pc, #40]	; (8004204 <HAL_RCC_ClockConfig+0x1c0>)
 80041dc:	5ccb      	ldrb	r3, [r1, r3]
 80041de:	fa22 f303 	lsr.w	r3, r2, r3
 80041e2:	4a09      	ldr	r2, [pc, #36]	; (8004208 <HAL_RCC_ClockConfig+0x1c4>)
 80041e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041e6:	4b09      	ldr	r3, [pc, #36]	; (800420c <HAL_RCC_ClockConfig+0x1c8>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fe fd34 	bl	8002c58 <HAL_InitTick>

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40023c00 	.word	0x40023c00
 8004200:	40023800 	.word	0x40023800
 8004204:	0800c980 	.word	0x0800c980
 8004208:	200000e0 	.word	0x200000e0
 800420c:	200000e4 	.word	0x200000e4

08004210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004214:	b094      	sub	sp, #80	; 0x50
 8004216:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	647b      	str	r3, [r7, #68]	; 0x44
 800421c:	2300      	movs	r3, #0
 800421e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004220:	2300      	movs	r3, #0
 8004222:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004228:	4b79      	ldr	r3, [pc, #484]	; (8004410 <HAL_RCC_GetSysClockFreq+0x200>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 030c 	and.w	r3, r3, #12
 8004230:	2b08      	cmp	r3, #8
 8004232:	d00d      	beq.n	8004250 <HAL_RCC_GetSysClockFreq+0x40>
 8004234:	2b08      	cmp	r3, #8
 8004236:	f200 80e1 	bhi.w	80043fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <HAL_RCC_GetSysClockFreq+0x34>
 800423e:	2b04      	cmp	r3, #4
 8004240:	d003      	beq.n	800424a <HAL_RCC_GetSysClockFreq+0x3a>
 8004242:	e0db      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004244:	4b73      	ldr	r3, [pc, #460]	; (8004414 <HAL_RCC_GetSysClockFreq+0x204>)
 8004246:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004248:	e0db      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800424a:	4b73      	ldr	r3, [pc, #460]	; (8004418 <HAL_RCC_GetSysClockFreq+0x208>)
 800424c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800424e:	e0d8      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004250:	4b6f      	ldr	r3, [pc, #444]	; (8004410 <HAL_RCC_GetSysClockFreq+0x200>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004258:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800425a:	4b6d      	ldr	r3, [pc, #436]	; (8004410 <HAL_RCC_GetSysClockFreq+0x200>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d063      	beq.n	800432e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004266:	4b6a      	ldr	r3, [pc, #424]	; (8004410 <HAL_RCC_GetSysClockFreq+0x200>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	099b      	lsrs	r3, r3, #6
 800426c:	2200      	movs	r2, #0
 800426e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004270:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004278:	633b      	str	r3, [r7, #48]	; 0x30
 800427a:	2300      	movs	r3, #0
 800427c:	637b      	str	r3, [r7, #52]	; 0x34
 800427e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004282:	4622      	mov	r2, r4
 8004284:	462b      	mov	r3, r5
 8004286:	f04f 0000 	mov.w	r0, #0
 800428a:	f04f 0100 	mov.w	r1, #0
 800428e:	0159      	lsls	r1, r3, #5
 8004290:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004294:	0150      	lsls	r0, r2, #5
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	4621      	mov	r1, r4
 800429c:	1a51      	subs	r1, r2, r1
 800429e:	6139      	str	r1, [r7, #16]
 80042a0:	4629      	mov	r1, r5
 80042a2:	eb63 0301 	sbc.w	r3, r3, r1
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042b4:	4659      	mov	r1, fp
 80042b6:	018b      	lsls	r3, r1, #6
 80042b8:	4651      	mov	r1, sl
 80042ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042be:	4651      	mov	r1, sl
 80042c0:	018a      	lsls	r2, r1, #6
 80042c2:	4651      	mov	r1, sl
 80042c4:	ebb2 0801 	subs.w	r8, r2, r1
 80042c8:	4659      	mov	r1, fp
 80042ca:	eb63 0901 	sbc.w	r9, r3, r1
 80042ce:	f04f 0200 	mov.w	r2, #0
 80042d2:	f04f 0300 	mov.w	r3, #0
 80042d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042e2:	4690      	mov	r8, r2
 80042e4:	4699      	mov	r9, r3
 80042e6:	4623      	mov	r3, r4
 80042e8:	eb18 0303 	adds.w	r3, r8, r3
 80042ec:	60bb      	str	r3, [r7, #8]
 80042ee:	462b      	mov	r3, r5
 80042f0:	eb49 0303 	adc.w	r3, r9, r3
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	f04f 0300 	mov.w	r3, #0
 80042fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004302:	4629      	mov	r1, r5
 8004304:	024b      	lsls	r3, r1, #9
 8004306:	4621      	mov	r1, r4
 8004308:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800430c:	4621      	mov	r1, r4
 800430e:	024a      	lsls	r2, r1, #9
 8004310:	4610      	mov	r0, r2
 8004312:	4619      	mov	r1, r3
 8004314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004316:	2200      	movs	r2, #0
 8004318:	62bb      	str	r3, [r7, #40]	; 0x28
 800431a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800431c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004320:	f7fc fdc0 	bl	8000ea4 <__aeabi_uldivmod>
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	4613      	mov	r3, r2
 800432a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800432c:	e058      	b.n	80043e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800432e:	4b38      	ldr	r3, [pc, #224]	; (8004410 <HAL_RCC_GetSysClockFreq+0x200>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	099b      	lsrs	r3, r3, #6
 8004334:	2200      	movs	r2, #0
 8004336:	4618      	mov	r0, r3
 8004338:	4611      	mov	r1, r2
 800433a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800433e:	623b      	str	r3, [r7, #32]
 8004340:	2300      	movs	r3, #0
 8004342:	627b      	str	r3, [r7, #36]	; 0x24
 8004344:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004348:	4642      	mov	r2, r8
 800434a:	464b      	mov	r3, r9
 800434c:	f04f 0000 	mov.w	r0, #0
 8004350:	f04f 0100 	mov.w	r1, #0
 8004354:	0159      	lsls	r1, r3, #5
 8004356:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800435a:	0150      	lsls	r0, r2, #5
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	4641      	mov	r1, r8
 8004362:	ebb2 0a01 	subs.w	sl, r2, r1
 8004366:	4649      	mov	r1, r9
 8004368:	eb63 0b01 	sbc.w	fp, r3, r1
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004378:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800437c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004380:	ebb2 040a 	subs.w	r4, r2, sl
 8004384:	eb63 050b 	sbc.w	r5, r3, fp
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	00eb      	lsls	r3, r5, #3
 8004392:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004396:	00e2      	lsls	r2, r4, #3
 8004398:	4614      	mov	r4, r2
 800439a:	461d      	mov	r5, r3
 800439c:	4643      	mov	r3, r8
 800439e:	18e3      	adds	r3, r4, r3
 80043a0:	603b      	str	r3, [r7, #0]
 80043a2:	464b      	mov	r3, r9
 80043a4:	eb45 0303 	adc.w	r3, r5, r3
 80043a8:	607b      	str	r3, [r7, #4]
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043b6:	4629      	mov	r1, r5
 80043b8:	028b      	lsls	r3, r1, #10
 80043ba:	4621      	mov	r1, r4
 80043bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043c0:	4621      	mov	r1, r4
 80043c2:	028a      	lsls	r2, r1, #10
 80043c4:	4610      	mov	r0, r2
 80043c6:	4619      	mov	r1, r3
 80043c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043ca:	2200      	movs	r2, #0
 80043cc:	61bb      	str	r3, [r7, #24]
 80043ce:	61fa      	str	r2, [r7, #28]
 80043d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043d4:	f7fc fd66 	bl	8000ea4 <__aeabi_uldivmod>
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	4613      	mov	r3, r2
 80043de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043e0:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <HAL_RCC_GetSysClockFreq+0x200>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	0c1b      	lsrs	r3, r3, #16
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	3301      	adds	r3, #1
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80043f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043fa:	e002      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043fc:	4b05      	ldr	r3, [pc, #20]	; (8004414 <HAL_RCC_GetSysClockFreq+0x204>)
 80043fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004400:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004404:	4618      	mov	r0, r3
 8004406:	3750      	adds	r7, #80	; 0x50
 8004408:	46bd      	mov	sp, r7
 800440a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800440e:	bf00      	nop
 8004410:	40023800 	.word	0x40023800
 8004414:	00f42400 	.word	0x00f42400
 8004418:	007a1200 	.word	0x007a1200

0800441c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004420:	4b03      	ldr	r3, [pc, #12]	; (8004430 <HAL_RCC_GetHCLKFreq+0x14>)
 8004422:	681b      	ldr	r3, [r3, #0]
}
 8004424:	4618      	mov	r0, r3
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	200000e0 	.word	0x200000e0

08004434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004438:	f7ff fff0 	bl	800441c <HAL_RCC_GetHCLKFreq>
 800443c:	4602      	mov	r2, r0
 800443e:	4b05      	ldr	r3, [pc, #20]	; (8004454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	0a9b      	lsrs	r3, r3, #10
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	4903      	ldr	r1, [pc, #12]	; (8004458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800444a:	5ccb      	ldrb	r3, [r1, r3]
 800444c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004450:	4618      	mov	r0, r3
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40023800 	.word	0x40023800
 8004458:	0800c990 	.word	0x0800c990

0800445c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004460:	f7ff ffdc 	bl	800441c <HAL_RCC_GetHCLKFreq>
 8004464:	4602      	mov	r2, r0
 8004466:	4b05      	ldr	r3, [pc, #20]	; (800447c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	0b5b      	lsrs	r3, r3, #13
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	4903      	ldr	r1, [pc, #12]	; (8004480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004472:	5ccb      	ldrb	r3, [r1, r3]
 8004474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004478:	4618      	mov	r0, r3
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40023800 	.word	0x40023800
 8004480:	0800c990 	.word	0x0800c990

08004484 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e041      	b.n	800451a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d106      	bne.n	80044b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7fe f8e2 	bl	8002674 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3304      	adds	r3, #4
 80044c0:	4619      	mov	r1, r3
 80044c2:	4610      	mov	r0, r2
 80044c4:	f000 fe16 	bl	80050f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
	...

08004524 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b01      	cmp	r3, #1
 8004536:	d001      	beq.n	800453c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e046      	b.n	80045ca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a23      	ldr	r2, [pc, #140]	; (80045d8 <HAL_TIM_Base_Start+0xb4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d022      	beq.n	8004594 <HAL_TIM_Base_Start+0x70>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004556:	d01d      	beq.n	8004594 <HAL_TIM_Base_Start+0x70>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a1f      	ldr	r2, [pc, #124]	; (80045dc <HAL_TIM_Base_Start+0xb8>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d018      	beq.n	8004594 <HAL_TIM_Base_Start+0x70>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a1e      	ldr	r2, [pc, #120]	; (80045e0 <HAL_TIM_Base_Start+0xbc>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d013      	beq.n	8004594 <HAL_TIM_Base_Start+0x70>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a1c      	ldr	r2, [pc, #112]	; (80045e4 <HAL_TIM_Base_Start+0xc0>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d00e      	beq.n	8004594 <HAL_TIM_Base_Start+0x70>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a1b      	ldr	r2, [pc, #108]	; (80045e8 <HAL_TIM_Base_Start+0xc4>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d009      	beq.n	8004594 <HAL_TIM_Base_Start+0x70>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a19      	ldr	r2, [pc, #100]	; (80045ec <HAL_TIM_Base_Start+0xc8>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d004      	beq.n	8004594 <HAL_TIM_Base_Start+0x70>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a18      	ldr	r2, [pc, #96]	; (80045f0 <HAL_TIM_Base_Start+0xcc>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d111      	bne.n	80045b8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2b06      	cmp	r3, #6
 80045a4:	d010      	beq.n	80045c8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f042 0201 	orr.w	r2, r2, #1
 80045b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b6:	e007      	b.n	80045c8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0201 	orr.w	r2, r2, #1
 80045c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40010000 	.word	0x40010000
 80045dc:	40000400 	.word	0x40000400
 80045e0:	40000800 	.word	0x40000800
 80045e4:	40000c00 	.word	0x40000c00
 80045e8:	40010400 	.word	0x40010400
 80045ec:	40014000 	.word	0x40014000
 80045f0:	40001800 	.word	0x40001800

080045f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b01      	cmp	r3, #1
 8004606:	d001      	beq.n	800460c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e04e      	b.n	80046aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f042 0201 	orr.w	r2, r2, #1
 8004622:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a23      	ldr	r2, [pc, #140]	; (80046b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d022      	beq.n	8004674 <HAL_TIM_Base_Start_IT+0x80>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004636:	d01d      	beq.n	8004674 <HAL_TIM_Base_Start_IT+0x80>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a1f      	ldr	r2, [pc, #124]	; (80046bc <HAL_TIM_Base_Start_IT+0xc8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d018      	beq.n	8004674 <HAL_TIM_Base_Start_IT+0x80>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a1e      	ldr	r2, [pc, #120]	; (80046c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d013      	beq.n	8004674 <HAL_TIM_Base_Start_IT+0x80>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a1c      	ldr	r2, [pc, #112]	; (80046c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d00e      	beq.n	8004674 <HAL_TIM_Base_Start_IT+0x80>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a1b      	ldr	r2, [pc, #108]	; (80046c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d009      	beq.n	8004674 <HAL_TIM_Base_Start_IT+0x80>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a19      	ldr	r2, [pc, #100]	; (80046cc <HAL_TIM_Base_Start_IT+0xd8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d004      	beq.n	8004674 <HAL_TIM_Base_Start_IT+0x80>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a18      	ldr	r2, [pc, #96]	; (80046d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d111      	bne.n	8004698 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b06      	cmp	r3, #6
 8004684:	d010      	beq.n	80046a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 0201 	orr.w	r2, r2, #1
 8004694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004696:	e007      	b.n	80046a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0201 	orr.w	r2, r2, #1
 80046a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	40010000 	.word	0x40010000
 80046bc:	40000400 	.word	0x40000400
 80046c0:	40000800 	.word	0x40000800
 80046c4:	40000c00 	.word	0x40000c00
 80046c8:	40010400 	.word	0x40010400
 80046cc:	40014000 	.word	0x40014000
 80046d0:	40001800 	.word	0x40001800

080046d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e041      	b.n	800476a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d106      	bne.n	8004700 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f839 	bl	8004772 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3304      	adds	r3, #4
 8004710:	4619      	mov	r1, r3
 8004712:	4610      	mov	r0, r2
 8004714:	f000 fcee 	bl	80050f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
	...

08004788 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d109      	bne.n	80047ac <HAL_TIM_PWM_Start+0x24>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	bf14      	ite	ne
 80047a4:	2301      	movne	r3, #1
 80047a6:	2300      	moveq	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	e022      	b.n	80047f2 <HAL_TIM_PWM_Start+0x6a>
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d109      	bne.n	80047c6 <HAL_TIM_PWM_Start+0x3e>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	bf14      	ite	ne
 80047be:	2301      	movne	r3, #1
 80047c0:	2300      	moveq	r3, #0
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	e015      	b.n	80047f2 <HAL_TIM_PWM_Start+0x6a>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d109      	bne.n	80047e0 <HAL_TIM_PWM_Start+0x58>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	bf14      	ite	ne
 80047d8:	2301      	movne	r3, #1
 80047da:	2300      	moveq	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	e008      	b.n	80047f2 <HAL_TIM_PWM_Start+0x6a>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	bf14      	ite	ne
 80047ec:	2301      	movne	r3, #1
 80047ee:	2300      	moveq	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e07c      	b.n	80048f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d104      	bne.n	800480a <HAL_TIM_PWM_Start+0x82>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004808:	e013      	b.n	8004832 <HAL_TIM_PWM_Start+0xaa>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b04      	cmp	r3, #4
 800480e:	d104      	bne.n	800481a <HAL_TIM_PWM_Start+0x92>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004818:	e00b      	b.n	8004832 <HAL_TIM_PWM_Start+0xaa>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b08      	cmp	r3, #8
 800481e:	d104      	bne.n	800482a <HAL_TIM_PWM_Start+0xa2>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004828:	e003      	b.n	8004832 <HAL_TIM_PWM_Start+0xaa>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2202      	movs	r2, #2
 800482e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2201      	movs	r2, #1
 8004838:	6839      	ldr	r1, [r7, #0]
 800483a:	4618      	mov	r0, r3
 800483c:	f000 ff44 	bl	80056c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a2d      	ldr	r2, [pc, #180]	; (80048fc <HAL_TIM_PWM_Start+0x174>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d004      	beq.n	8004854 <HAL_TIM_PWM_Start+0xcc>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a2c      	ldr	r2, [pc, #176]	; (8004900 <HAL_TIM_PWM_Start+0x178>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d101      	bne.n	8004858 <HAL_TIM_PWM_Start+0xd0>
 8004854:	2301      	movs	r3, #1
 8004856:	e000      	b.n	800485a <HAL_TIM_PWM_Start+0xd2>
 8004858:	2300      	movs	r3, #0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d007      	beq.n	800486e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800486c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a22      	ldr	r2, [pc, #136]	; (80048fc <HAL_TIM_PWM_Start+0x174>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d022      	beq.n	80048be <HAL_TIM_PWM_Start+0x136>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004880:	d01d      	beq.n	80048be <HAL_TIM_PWM_Start+0x136>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a1f      	ldr	r2, [pc, #124]	; (8004904 <HAL_TIM_PWM_Start+0x17c>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d018      	beq.n	80048be <HAL_TIM_PWM_Start+0x136>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a1d      	ldr	r2, [pc, #116]	; (8004908 <HAL_TIM_PWM_Start+0x180>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d013      	beq.n	80048be <HAL_TIM_PWM_Start+0x136>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a1c      	ldr	r2, [pc, #112]	; (800490c <HAL_TIM_PWM_Start+0x184>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d00e      	beq.n	80048be <HAL_TIM_PWM_Start+0x136>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a16      	ldr	r2, [pc, #88]	; (8004900 <HAL_TIM_PWM_Start+0x178>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d009      	beq.n	80048be <HAL_TIM_PWM_Start+0x136>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a18      	ldr	r2, [pc, #96]	; (8004910 <HAL_TIM_PWM_Start+0x188>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d004      	beq.n	80048be <HAL_TIM_PWM_Start+0x136>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a16      	ldr	r2, [pc, #88]	; (8004914 <HAL_TIM_PWM_Start+0x18c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d111      	bne.n	80048e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2b06      	cmp	r3, #6
 80048ce:	d010      	beq.n	80048f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0201 	orr.w	r2, r2, #1
 80048de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e0:	e007      	b.n	80048f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f042 0201 	orr.w	r2, r2, #1
 80048f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	40010000 	.word	0x40010000
 8004900:	40010400 	.word	0x40010400
 8004904:	40000400 	.word	0x40000400
 8004908:	40000800 	.word	0x40000800
 800490c:	40000c00 	.word	0x40000c00
 8004910:	40014000 	.word	0x40014000
 8004914:	40001800 	.word	0x40001800

08004918 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e097      	b.n	8004a5c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	d106      	bne.n	8004946 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f7fd fd8b 	bl	800245c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2202      	movs	r2, #2
 800494a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6812      	ldr	r2, [r2, #0]
 8004958:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800495c:	f023 0307 	bic.w	r3, r3, #7
 8004960:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	3304      	adds	r3, #4
 800496a:	4619      	mov	r1, r3
 800496c:	4610      	mov	r0, r2
 800496e:	f000 fbc1 	bl	80050f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	4313      	orrs	r3, r2
 8004992:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800499a:	f023 0303 	bic.w	r3, r3, #3
 800499e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	021b      	lsls	r3, r3, #8
 80049aa:	4313      	orrs	r3, r2
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80049b8:	f023 030c 	bic.w	r3, r3, #12
 80049bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	021b      	lsls	r3, r3, #8
 80049d4:	4313      	orrs	r3, r2
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	4313      	orrs	r3, r2
 80049da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	011a      	lsls	r2, r3, #4
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	031b      	lsls	r3, r3, #12
 80049e8:	4313      	orrs	r3, r2
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80049f6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80049fe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	011b      	lsls	r3, r3, #4
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3718      	adds	r7, #24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a74:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a7c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a84:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a8c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d110      	bne.n	8004ab6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a94:	7bfb      	ldrb	r3, [r7, #15]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d102      	bne.n	8004aa0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a9a:	7b7b      	ldrb	r3, [r7, #13]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d001      	beq.n	8004aa4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e069      	b.n	8004b78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ab4:	e031      	b.n	8004b1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	d110      	bne.n	8004ade <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004abc:	7bbb      	ldrb	r3, [r7, #14]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d102      	bne.n	8004ac8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ac2:	7b3b      	ldrb	r3, [r7, #12]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d001      	beq.n	8004acc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e055      	b.n	8004b78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004adc:	e01d      	b.n	8004b1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d108      	bne.n	8004af6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ae4:	7bbb      	ldrb	r3, [r7, #14]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d105      	bne.n	8004af6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004aea:	7b7b      	ldrb	r3, [r7, #13]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d102      	bne.n	8004af6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004af0:	7b3b      	ldrb	r3, [r7, #12]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d001      	beq.n	8004afa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e03e      	b.n	8004b78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2202      	movs	r2, #2
 8004afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2202      	movs	r2, #2
 8004b06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2202      	movs	r2, #2
 8004b16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d003      	beq.n	8004b28 <HAL_TIM_Encoder_Start+0xc4>
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d008      	beq.n	8004b38 <HAL_TIM_Encoder_Start+0xd4>
 8004b26:	e00f      	b.n	8004b48 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	2100      	movs	r1, #0
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 fdc9 	bl	80056c8 <TIM_CCxChannelCmd>
      break;
 8004b36:	e016      	b.n	8004b66 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	2104      	movs	r1, #4
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 fdc1 	bl	80056c8 <TIM_CCxChannelCmd>
      break;
 8004b46:	e00e      	b.n	8004b66 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	2100      	movs	r1, #0
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 fdb9 	bl	80056c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	2104      	movs	r1, #4
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fdb2 	bl	80056c8 <TIM_CCxChannelCmd>
      break;
 8004b64:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f042 0201 	orr.w	r2, r2, #1
 8004b74:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d122      	bne.n	8004bdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d11b      	bne.n	8004bdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f06f 0202 	mvn.w	r2, #2
 8004bac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	f003 0303 	and.w	r3, r3, #3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fa77 	bl	80050b6 <HAL_TIM_IC_CaptureCallback>
 8004bc8:	e005      	b.n	8004bd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fa69 	bl	80050a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 fa7a 	bl	80050ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	f003 0304 	and.w	r3, r3, #4
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	d122      	bne.n	8004c30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b04      	cmp	r3, #4
 8004bf6:	d11b      	bne.n	8004c30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f06f 0204 	mvn.w	r2, #4
 8004c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2202      	movs	r2, #2
 8004c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fa4d 	bl	80050b6 <HAL_TIM_IC_CaptureCallback>
 8004c1c:	e005      	b.n	8004c2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fa3f 	bl	80050a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 fa50 	bl	80050ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	f003 0308 	and.w	r3, r3, #8
 8004c3a:	2b08      	cmp	r3, #8
 8004c3c:	d122      	bne.n	8004c84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f003 0308 	and.w	r3, r3, #8
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d11b      	bne.n	8004c84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f06f 0208 	mvn.w	r2, #8
 8004c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2204      	movs	r2, #4
 8004c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fa23 	bl	80050b6 <HAL_TIM_IC_CaptureCallback>
 8004c70:	e005      	b.n	8004c7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fa15 	bl	80050a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 fa26 	bl	80050ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	f003 0310 	and.w	r3, r3, #16
 8004c8e:	2b10      	cmp	r3, #16
 8004c90:	d122      	bne.n	8004cd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f003 0310 	and.w	r3, r3, #16
 8004c9c:	2b10      	cmp	r3, #16
 8004c9e:	d11b      	bne.n	8004cd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f06f 0210 	mvn.w	r2, #16
 8004ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2208      	movs	r2, #8
 8004cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f9f9 	bl	80050b6 <HAL_TIM_IC_CaptureCallback>
 8004cc4:	e005      	b.n	8004cd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f9eb 	bl	80050a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f9fc 	bl	80050ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d10e      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d107      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f06f 0201 	mvn.w	r2, #1
 8004cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fc fb66 	bl	80013d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0e:	2b80      	cmp	r3, #128	; 0x80
 8004d10:	d10e      	bne.n	8004d30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1c:	2b80      	cmp	r3, #128	; 0x80
 8004d1e:	d107      	bne.n	8004d30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 fdca 	bl	80058c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3a:	2b40      	cmp	r3, #64	; 0x40
 8004d3c:	d10e      	bne.n	8004d5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d48:	2b40      	cmp	r3, #64	; 0x40
 8004d4a:	d107      	bne.n	8004d5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f9c1 	bl	80050de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	f003 0320 	and.w	r3, r3, #32
 8004d66:	2b20      	cmp	r3, #32
 8004d68:	d10e      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f003 0320 	and.w	r3, r3, #32
 8004d74:	2b20      	cmp	r3, #32
 8004d76:	d107      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f06f 0220 	mvn.w	r2, #32
 8004d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 fd94 	bl	80058b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d88:	bf00      	nop
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d101      	bne.n	8004dae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004daa:	2302      	movs	r3, #2
 8004dac:	e0ae      	b.n	8004f0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b0c      	cmp	r3, #12
 8004dba:	f200 809f 	bhi.w	8004efc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004dbe:	a201      	add	r2, pc, #4	; (adr r2, 8004dc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc4:	08004df9 	.word	0x08004df9
 8004dc8:	08004efd 	.word	0x08004efd
 8004dcc:	08004efd 	.word	0x08004efd
 8004dd0:	08004efd 	.word	0x08004efd
 8004dd4:	08004e39 	.word	0x08004e39
 8004dd8:	08004efd 	.word	0x08004efd
 8004ddc:	08004efd 	.word	0x08004efd
 8004de0:	08004efd 	.word	0x08004efd
 8004de4:	08004e7b 	.word	0x08004e7b
 8004de8:	08004efd 	.word	0x08004efd
 8004dec:	08004efd 	.word	0x08004efd
 8004df0:	08004efd 	.word	0x08004efd
 8004df4:	08004ebb 	.word	0x08004ebb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68b9      	ldr	r1, [r7, #8]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 fa18 	bl	8005234 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0208 	orr.w	r2, r2, #8
 8004e12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699a      	ldr	r2, [r3, #24]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0204 	bic.w	r2, r2, #4
 8004e22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6999      	ldr	r1, [r3, #24]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	691a      	ldr	r2, [r3, #16]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	619a      	str	r2, [r3, #24]
      break;
 8004e36:	e064      	b.n	8004f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68b9      	ldr	r1, [r7, #8]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 fa68 	bl	8005314 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	699a      	ldr	r2, [r3, #24]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699a      	ldr	r2, [r3, #24]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6999      	ldr	r1, [r3, #24]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	021a      	lsls	r2, r3, #8
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	619a      	str	r2, [r3, #24]
      break;
 8004e78:	e043      	b.n	8004f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68b9      	ldr	r1, [r7, #8]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 fabd 	bl	8005400 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69da      	ldr	r2, [r3, #28]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f042 0208 	orr.w	r2, r2, #8
 8004e94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	69da      	ldr	r2, [r3, #28]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0204 	bic.w	r2, r2, #4
 8004ea4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	69d9      	ldr	r1, [r3, #28]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	691a      	ldr	r2, [r3, #16]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	61da      	str	r2, [r3, #28]
      break;
 8004eb8:	e023      	b.n	8004f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68b9      	ldr	r1, [r7, #8]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 fb11 	bl	80054e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69da      	ldr	r2, [r3, #28]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ed4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	69da      	ldr	r2, [r3, #28]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	69d9      	ldr	r1, [r3, #28]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	021a      	lsls	r2, r3, #8
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	61da      	str	r2, [r3, #28]
      break;
 8004efa:	e002      	b.n	8004f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	75fb      	strb	r3, [r7, #23]
      break;
 8004f00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d101      	bne.n	8004f30 <HAL_TIM_ConfigClockSource+0x1c>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	e0b4      	b.n	800509a <HAL_TIM_ConfigClockSource+0x186>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f68:	d03e      	beq.n	8004fe8 <HAL_TIM_ConfigClockSource+0xd4>
 8004f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f6e:	f200 8087 	bhi.w	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f76:	f000 8086 	beq.w	8005086 <HAL_TIM_ConfigClockSource+0x172>
 8004f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f7e:	d87f      	bhi.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004f80:	2b70      	cmp	r3, #112	; 0x70
 8004f82:	d01a      	beq.n	8004fba <HAL_TIM_ConfigClockSource+0xa6>
 8004f84:	2b70      	cmp	r3, #112	; 0x70
 8004f86:	d87b      	bhi.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004f88:	2b60      	cmp	r3, #96	; 0x60
 8004f8a:	d050      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x11a>
 8004f8c:	2b60      	cmp	r3, #96	; 0x60
 8004f8e:	d877      	bhi.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004f90:	2b50      	cmp	r3, #80	; 0x50
 8004f92:	d03c      	beq.n	800500e <HAL_TIM_ConfigClockSource+0xfa>
 8004f94:	2b50      	cmp	r3, #80	; 0x50
 8004f96:	d873      	bhi.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004f98:	2b40      	cmp	r3, #64	; 0x40
 8004f9a:	d058      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x13a>
 8004f9c:	2b40      	cmp	r3, #64	; 0x40
 8004f9e:	d86f      	bhi.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa0:	2b30      	cmp	r3, #48	; 0x30
 8004fa2:	d064      	beq.n	800506e <HAL_TIM_ConfigClockSource+0x15a>
 8004fa4:	2b30      	cmp	r3, #48	; 0x30
 8004fa6:	d86b      	bhi.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa8:	2b20      	cmp	r3, #32
 8004faa:	d060      	beq.n	800506e <HAL_TIM_ConfigClockSource+0x15a>
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d867      	bhi.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d05c      	beq.n	800506e <HAL_TIM_ConfigClockSource+0x15a>
 8004fb4:	2b10      	cmp	r3, #16
 8004fb6:	d05a      	beq.n	800506e <HAL_TIM_ConfigClockSource+0x15a>
 8004fb8:	e062      	b.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6818      	ldr	r0, [r3, #0]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	6899      	ldr	r1, [r3, #8]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f000 fb5d 	bl	8005688 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	609a      	str	r2, [r3, #8]
      break;
 8004fe6:	e04f      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6818      	ldr	r0, [r3, #0]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	6899      	ldr	r1, [r3, #8]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f000 fb46 	bl	8005688 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689a      	ldr	r2, [r3, #8]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800500a:	609a      	str	r2, [r3, #8]
      break;
 800500c:	e03c      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6818      	ldr	r0, [r3, #0]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	6859      	ldr	r1, [r3, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	461a      	mov	r2, r3
 800501c:	f000 faba 	bl	8005594 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2150      	movs	r1, #80	; 0x50
 8005026:	4618      	mov	r0, r3
 8005028:	f000 fb13 	bl	8005652 <TIM_ITRx_SetConfig>
      break;
 800502c:	e02c      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6818      	ldr	r0, [r3, #0]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	6859      	ldr	r1, [r3, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	461a      	mov	r2, r3
 800503c:	f000 fad9 	bl	80055f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2160      	movs	r1, #96	; 0x60
 8005046:	4618      	mov	r0, r3
 8005048:	f000 fb03 	bl	8005652 <TIM_ITRx_SetConfig>
      break;
 800504c:	e01c      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6818      	ldr	r0, [r3, #0]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	6859      	ldr	r1, [r3, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	461a      	mov	r2, r3
 800505c:	f000 fa9a 	bl	8005594 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2140      	movs	r1, #64	; 0x40
 8005066:	4618      	mov	r0, r3
 8005068:	f000 faf3 	bl	8005652 <TIM_ITRx_SetConfig>
      break;
 800506c:	e00c      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4619      	mov	r1, r3
 8005078:	4610      	mov	r0, r2
 800507a:	f000 faea 	bl	8005652 <TIM_ITRx_SetConfig>
      break;
 800507e:	e003      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	73fb      	strb	r3, [r7, #15]
      break;
 8005084:	e000      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005086:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005098:	7bfb      	ldrb	r3, [r7, #15]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b083      	sub	sp, #12
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050aa:	bf00      	nop
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b083      	sub	sp, #12
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b083      	sub	sp, #12
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050d2:	bf00      	nop
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
	...

080050f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a40      	ldr	r2, [pc, #256]	; (8005208 <TIM_Base_SetConfig+0x114>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d013      	beq.n	8005134 <TIM_Base_SetConfig+0x40>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005112:	d00f      	beq.n	8005134 <TIM_Base_SetConfig+0x40>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a3d      	ldr	r2, [pc, #244]	; (800520c <TIM_Base_SetConfig+0x118>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d00b      	beq.n	8005134 <TIM_Base_SetConfig+0x40>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a3c      	ldr	r2, [pc, #240]	; (8005210 <TIM_Base_SetConfig+0x11c>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d007      	beq.n	8005134 <TIM_Base_SetConfig+0x40>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a3b      	ldr	r2, [pc, #236]	; (8005214 <TIM_Base_SetConfig+0x120>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d003      	beq.n	8005134 <TIM_Base_SetConfig+0x40>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a3a      	ldr	r2, [pc, #232]	; (8005218 <TIM_Base_SetConfig+0x124>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d108      	bne.n	8005146 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	4313      	orrs	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a2f      	ldr	r2, [pc, #188]	; (8005208 <TIM_Base_SetConfig+0x114>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d02b      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005154:	d027      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a2c      	ldr	r2, [pc, #176]	; (800520c <TIM_Base_SetConfig+0x118>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d023      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a2b      	ldr	r2, [pc, #172]	; (8005210 <TIM_Base_SetConfig+0x11c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d01f      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a2a      	ldr	r2, [pc, #168]	; (8005214 <TIM_Base_SetConfig+0x120>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d01b      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a29      	ldr	r2, [pc, #164]	; (8005218 <TIM_Base_SetConfig+0x124>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d017      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a28      	ldr	r2, [pc, #160]	; (800521c <TIM_Base_SetConfig+0x128>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d013      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a27      	ldr	r2, [pc, #156]	; (8005220 <TIM_Base_SetConfig+0x12c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d00f      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a26      	ldr	r2, [pc, #152]	; (8005224 <TIM_Base_SetConfig+0x130>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00b      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a25      	ldr	r2, [pc, #148]	; (8005228 <TIM_Base_SetConfig+0x134>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d007      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a24      	ldr	r2, [pc, #144]	; (800522c <TIM_Base_SetConfig+0x138>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d003      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a23      	ldr	r2, [pc, #140]	; (8005230 <TIM_Base_SetConfig+0x13c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d108      	bne.n	80051b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a0a      	ldr	r2, [pc, #40]	; (8005208 <TIM_Base_SetConfig+0x114>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d003      	beq.n	80051ec <TIM_Base_SetConfig+0xf8>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a0c      	ldr	r2, [pc, #48]	; (8005218 <TIM_Base_SetConfig+0x124>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d103      	bne.n	80051f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	615a      	str	r2, [r3, #20]
}
 80051fa:	bf00      	nop
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	40010000 	.word	0x40010000
 800520c:	40000400 	.word	0x40000400
 8005210:	40000800 	.word	0x40000800
 8005214:	40000c00 	.word	0x40000c00
 8005218:	40010400 	.word	0x40010400
 800521c:	40014000 	.word	0x40014000
 8005220:	40014400 	.word	0x40014400
 8005224:	40014800 	.word	0x40014800
 8005228:	40001800 	.word	0x40001800
 800522c:	40001c00 	.word	0x40001c00
 8005230:	40002000 	.word	0x40002000

08005234 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	f023 0201 	bic.w	r2, r3, #1
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f023 0303 	bic.w	r3, r3, #3
 800526a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	4313      	orrs	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f023 0302 	bic.w	r3, r3, #2
 800527c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	4313      	orrs	r3, r2
 8005286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a20      	ldr	r2, [pc, #128]	; (800530c <TIM_OC1_SetConfig+0xd8>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d003      	beq.n	8005298 <TIM_OC1_SetConfig+0x64>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a1f      	ldr	r2, [pc, #124]	; (8005310 <TIM_OC1_SetConfig+0xdc>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d10c      	bne.n	80052b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f023 0308 	bic.w	r3, r3, #8
 800529e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f023 0304 	bic.w	r3, r3, #4
 80052b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a15      	ldr	r2, [pc, #84]	; (800530c <TIM_OC1_SetConfig+0xd8>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d003      	beq.n	80052c2 <TIM_OC1_SetConfig+0x8e>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a14      	ldr	r2, [pc, #80]	; (8005310 <TIM_OC1_SetConfig+0xdc>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d111      	bne.n	80052e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	621a      	str	r2, [r3, #32]
}
 8005300:	bf00      	nop
 8005302:	371c      	adds	r7, #28
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	40010000 	.word	0x40010000
 8005310:	40010400 	.word	0x40010400

08005314 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005314:	b480      	push	{r7}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	f023 0210 	bic.w	r2, r3, #16
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800534a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	021b      	lsls	r3, r3, #8
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	4313      	orrs	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f023 0320 	bic.w	r3, r3, #32
 800535e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	011b      	lsls	r3, r3, #4
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	4313      	orrs	r3, r2
 800536a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a22      	ldr	r2, [pc, #136]	; (80053f8 <TIM_OC2_SetConfig+0xe4>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d003      	beq.n	800537c <TIM_OC2_SetConfig+0x68>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a21      	ldr	r2, [pc, #132]	; (80053fc <TIM_OC2_SetConfig+0xe8>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d10d      	bne.n	8005398 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005382:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	4313      	orrs	r3, r2
 800538e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005396:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a17      	ldr	r2, [pc, #92]	; (80053f8 <TIM_OC2_SetConfig+0xe4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d003      	beq.n	80053a8 <TIM_OC2_SetConfig+0x94>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a16      	ldr	r2, [pc, #88]	; (80053fc <TIM_OC2_SetConfig+0xe8>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d113      	bne.n	80053d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	621a      	str	r2, [r3, #32]
}
 80053ea:	bf00      	nop
 80053ec:	371c      	adds	r7, #28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	40010000 	.word	0x40010000
 80053fc:	40010400 	.word	0x40010400

08005400 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800542e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0303 	bic.w	r3, r3, #3
 8005436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005448:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	021b      	lsls	r3, r3, #8
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	4313      	orrs	r3, r2
 8005454:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a21      	ldr	r2, [pc, #132]	; (80054e0 <TIM_OC3_SetConfig+0xe0>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d003      	beq.n	8005466 <TIM_OC3_SetConfig+0x66>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a20      	ldr	r2, [pc, #128]	; (80054e4 <TIM_OC3_SetConfig+0xe4>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d10d      	bne.n	8005482 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800546c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	021b      	lsls	r3, r3, #8
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	4313      	orrs	r3, r2
 8005478:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005480:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a16      	ldr	r2, [pc, #88]	; (80054e0 <TIM_OC3_SetConfig+0xe0>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d003      	beq.n	8005492 <TIM_OC3_SetConfig+0x92>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a15      	ldr	r2, [pc, #84]	; (80054e4 <TIM_OC3_SetConfig+0xe4>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d113      	bne.n	80054ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	621a      	str	r2, [r3, #32]
}
 80054d4:	bf00      	nop
 80054d6:	371c      	adds	r7, #28
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	40010000 	.word	0x40010000
 80054e4:	40010400 	.word	0x40010400

080054e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800551e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	021b      	lsls	r3, r3, #8
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	4313      	orrs	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005532:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	031b      	lsls	r3, r3, #12
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	4313      	orrs	r3, r2
 800553e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a12      	ldr	r2, [pc, #72]	; (800558c <TIM_OC4_SetConfig+0xa4>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d003      	beq.n	8005550 <TIM_OC4_SetConfig+0x68>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a11      	ldr	r2, [pc, #68]	; (8005590 <TIM_OC4_SetConfig+0xa8>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d109      	bne.n	8005564 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005556:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	019b      	lsls	r3, r3, #6
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	4313      	orrs	r3, r2
 8005562:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	621a      	str	r2, [r3, #32]
}
 800557e:	bf00      	nop
 8005580:	371c      	adds	r7, #28
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	40010000 	.word	0x40010000
 8005590:	40010400 	.word	0x40010400

08005594 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005594:	b480      	push	{r7}
 8005596:	b087      	sub	sp, #28
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	f023 0201 	bic.w	r2, r3, #1
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	011b      	lsls	r3, r3, #4
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f023 030a 	bic.w	r3, r3, #10
 80055d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	621a      	str	r2, [r3, #32]
}
 80055e6:	bf00      	nop
 80055e8:	371c      	adds	r7, #28
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b087      	sub	sp, #28
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	60f8      	str	r0, [r7, #12]
 80055fa:	60b9      	str	r1, [r7, #8]
 80055fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	f023 0210 	bic.w	r2, r3, #16
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800561c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	031b      	lsls	r3, r3, #12
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	4313      	orrs	r3, r2
 8005626:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800562e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	4313      	orrs	r3, r2
 8005638:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	621a      	str	r2, [r3, #32]
}
 8005646:	bf00      	nop
 8005648:	371c      	adds	r7, #28
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005652:	b480      	push	{r7}
 8005654:	b085      	sub	sp, #20
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005668:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4313      	orrs	r3, r2
 8005670:	f043 0307 	orr.w	r3, r3, #7
 8005674:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	609a      	str	r2, [r3, #8]
}
 800567c:	bf00      	nop
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005688:	b480      	push	{r7}
 800568a:	b087      	sub	sp, #28
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	021a      	lsls	r2, r3, #8
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	431a      	orrs	r2, r3
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	609a      	str	r2, [r3, #8]
}
 80056bc:	bf00      	nop
 80056be:	371c      	adds	r7, #28
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b087      	sub	sp, #28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f003 031f 	and.w	r3, r3, #31
 80056da:	2201      	movs	r2, #1
 80056dc:	fa02 f303 	lsl.w	r3, r2, r3
 80056e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6a1a      	ldr	r2, [r3, #32]
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	43db      	mvns	r3, r3
 80056ea:	401a      	ands	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6a1a      	ldr	r2, [r3, #32]
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f003 031f 	and.w	r3, r3, #31
 80056fa:	6879      	ldr	r1, [r7, #4]
 80056fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005700:	431a      	orrs	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	621a      	str	r2, [r3, #32]
}
 8005706:	bf00      	nop
 8005708:	371c      	adds	r7, #28
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
	...

08005714 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005724:	2b01      	cmp	r3, #1
 8005726:	d101      	bne.n	800572c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005728:	2302      	movs	r3, #2
 800572a:	e05a      	b.n	80057e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2202      	movs	r2, #2
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005752:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a21      	ldr	r2, [pc, #132]	; (80057f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d022      	beq.n	80057b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005778:	d01d      	beq.n	80057b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a1d      	ldr	r2, [pc, #116]	; (80057f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d018      	beq.n	80057b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a1b      	ldr	r2, [pc, #108]	; (80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d013      	beq.n	80057b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a1a      	ldr	r2, [pc, #104]	; (80057fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d00e      	beq.n	80057b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a18      	ldr	r2, [pc, #96]	; (8005800 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d009      	beq.n	80057b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a17      	ldr	r2, [pc, #92]	; (8005804 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d004      	beq.n	80057b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a15      	ldr	r2, [pc, #84]	; (8005808 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d10c      	bne.n	80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	40010000 	.word	0x40010000
 80057f4:	40000400 	.word	0x40000400
 80057f8:	40000800 	.word	0x40000800
 80057fc:	40000c00 	.word	0x40000c00
 8005800:	40010400 	.word	0x40010400
 8005804:	40014000 	.word	0x40014000
 8005808:	40001800 	.word	0x40001800

0800580c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005820:	2b01      	cmp	r3, #1
 8005822:	d101      	bne.n	8005828 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005824:	2302      	movs	r3, #2
 8005826:	e03d      	b.n	80058a4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	4313      	orrs	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	4313      	orrs	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4313      	orrs	r3, r2
 8005866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	4313      	orrs	r3, r2
 8005882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	4313      	orrs	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e03f      	b.n	800596a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d106      	bne.n	8005904 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7fc ff98 	bl	8002834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2224      	movs	r2, #36	; 0x24
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800591a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 ff9b 	bl	8006858 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	691a      	ldr	r2, [r3, #16]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005930:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	695a      	ldr	r2, [r3, #20]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005940:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68da      	ldr	r2, [r3, #12]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005950:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2220      	movs	r2, #32
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2220      	movs	r2, #32
 8005964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3708      	adds	r7, #8
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b08a      	sub	sp, #40	; 0x28
 8005976:	af02      	add	r7, sp, #8
 8005978:	60f8      	str	r0, [r7, #12]
 800597a:	60b9      	str	r1, [r7, #8]
 800597c:	603b      	str	r3, [r7, #0]
 800597e:	4613      	mov	r3, r2
 8005980:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b20      	cmp	r3, #32
 8005990:	d17c      	bne.n	8005a8c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <HAL_UART_Transmit+0x2c>
 8005998:	88fb      	ldrh	r3, [r7, #6]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e075      	b.n	8005a8e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d101      	bne.n	80059b0 <HAL_UART_Transmit+0x3e>
 80059ac:	2302      	movs	r3, #2
 80059ae:	e06e      	b.n	8005a8e <HAL_UART_Transmit+0x11c>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2221      	movs	r2, #33	; 0x21
 80059c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059c6:	f7fd f98b 	bl	8002ce0 <HAL_GetTick>
 80059ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	88fa      	ldrh	r2, [r7, #6]
 80059d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	88fa      	ldrh	r2, [r7, #6]
 80059d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059e0:	d108      	bne.n	80059f4 <HAL_UART_Transmit+0x82>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d104      	bne.n	80059f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	61bb      	str	r3, [r7, #24]
 80059f2:	e003      	b.n	80059fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059f8:	2300      	movs	r3, #0
 80059fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005a04:	e02a      	b.n	8005a5c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	2180      	movs	r1, #128	; 0x80
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 fc53 	bl	80062bc <UART_WaitOnFlagUntilTimeout>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e036      	b.n	8005a8e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10b      	bne.n	8005a3e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	3302      	adds	r3, #2
 8005a3a:	61bb      	str	r3, [r7, #24]
 8005a3c:	e007      	b.n	8005a4e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	781a      	ldrb	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	3b01      	subs	r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1cf      	bne.n	8005a06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	2140      	movs	r1, #64	; 0x40
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 fc23 	bl	80062bc <UART_WaitOnFlagUntilTimeout>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d001      	beq.n	8005a80 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e006      	b.n	8005a8e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2220      	movs	r2, #32
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	e000      	b.n	8005a8e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a8c:	2302      	movs	r3, #2
  }
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3720      	adds	r7, #32
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b08c      	sub	sp, #48	; 0x30
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	60f8      	str	r0, [r7, #12]
 8005a9e:	60b9      	str	r1, [r7, #8]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b20      	cmp	r3, #32
 8005aae:	d152      	bne.n	8005b56 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005ab6:	88fb      	ldrh	r3, [r7, #6]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d101      	bne.n	8005ac0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e04b      	b.n	8005b58 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d101      	bne.n	8005ace <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8005aca:	2302      	movs	r3, #2
 8005acc:	e044      	b.n	8005b58 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005adc:	88fb      	ldrh	r3, [r7, #6]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	68b9      	ldr	r1, [r7, #8]
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f000 fc58 	bl	8006398 <UART_Start_Receive_DMA>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005aee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d12c      	bne.n	8005b50 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d125      	bne.n	8005b4a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005afe:	2300      	movs	r3, #0
 8005b00:	613b      	str	r3, [r7, #16]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	613b      	str	r3, [r7, #16]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	613b      	str	r3, [r7, #16]
 8005b12:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	330c      	adds	r3, #12
 8005b1a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	e853 3f00 	ldrex	r3, [r3]
 8005b22:	617b      	str	r3, [r7, #20]
   return(result);
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f043 0310 	orr.w	r3, r3, #16
 8005b2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	330c      	adds	r3, #12
 8005b32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b34:	627a      	str	r2, [r7, #36]	; 0x24
 8005b36:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b38:	6a39      	ldr	r1, [r7, #32]
 8005b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b3c:	e841 2300 	strex	r3, r2, [r1]
 8005b40:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1e5      	bne.n	8005b14 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8005b48:	e002      	b.n	8005b50 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005b50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b54:	e000      	b.n	8005b58 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8005b56:	2302      	movs	r3, #2
  }
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3730      	adds	r7, #48	; 0x30
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b0ba      	sub	sp, #232	; 0xe8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005b86:	2300      	movs	r3, #0
 8005b88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b96:	f003 030f 	and.w	r3, r3, #15
 8005b9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005b9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10f      	bne.n	8005bc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005baa:	f003 0320 	and.w	r3, r3, #32
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d009      	beq.n	8005bc6 <HAL_UART_IRQHandler+0x66>
 8005bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bb6:	f003 0320 	and.w	r3, r3, #32
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fd8f 	bl	80066e2 <UART_Receive_IT>
      return;
 8005bc4:	e256      	b.n	8006074 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005bc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 80de 	beq.w	8005d8c <HAL_UART_IRQHandler+0x22c>
 8005bd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d106      	bne.n	8005bea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005be0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 80d1 	beq.w	8005d8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00b      	beq.n	8005c0e <HAL_UART_IRQHandler+0xae>
 8005bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d005      	beq.n	8005c0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	f043 0201 	orr.w	r2, r3, #1
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00b      	beq.n	8005c32 <HAL_UART_IRQHandler+0xd2>
 8005c1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d005      	beq.n	8005c32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2a:	f043 0202 	orr.w	r2, r3, #2
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00b      	beq.n	8005c56 <HAL_UART_IRQHandler+0xf6>
 8005c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d005      	beq.n	8005c56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4e:	f043 0204 	orr.w	r2, r3, #4
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c5a:	f003 0308 	and.w	r3, r3, #8
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d011      	beq.n	8005c86 <HAL_UART_IRQHandler+0x126>
 8005c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c66:	f003 0320 	and.w	r3, r3, #32
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d105      	bne.n	8005c7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d005      	beq.n	8005c86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	f043 0208 	orr.w	r2, r3, #8
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 81ed 	beq.w	800606a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c94:	f003 0320 	and.w	r3, r3, #32
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d008      	beq.n	8005cae <HAL_UART_IRQHandler+0x14e>
 8005c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ca0:	f003 0320 	and.w	r3, r3, #32
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d002      	beq.n	8005cae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fd1a 	bl	80066e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb8:	2b40      	cmp	r3, #64	; 0x40
 8005cba:	bf0c      	ite	eq
 8005cbc:	2301      	moveq	r3, #1
 8005cbe:	2300      	movne	r3, #0
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cca:	f003 0308 	and.w	r3, r3, #8
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d103      	bne.n	8005cda <HAL_UART_IRQHandler+0x17a>
 8005cd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d04f      	beq.n	8005d7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fc22 	bl	8006524 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cea:	2b40      	cmp	r3, #64	; 0x40
 8005cec:	d141      	bne.n	8005d72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	3314      	adds	r3, #20
 8005cf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cfc:	e853 3f00 	ldrex	r3, [r3]
 8005d00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3314      	adds	r3, #20
 8005d16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d2a:	e841 2300 	strex	r3, r2, [r1]
 8005d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1d9      	bne.n	8005cee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d013      	beq.n	8005d6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d46:	4a7d      	ldr	r2, [pc, #500]	; (8005f3c <HAL_UART_IRQHandler+0x3dc>)
 8005d48:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fd fa74 	bl	800323c <HAL_DMA_Abort_IT>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d016      	beq.n	8005d88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d64:	4610      	mov	r0, r2
 8005d66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d68:	e00e      	b.n	8005d88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f9a4 	bl	80060b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d70:	e00a      	b.n	8005d88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f9a0 	bl	80060b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d78:	e006      	b.n	8005d88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f99c 	bl	80060b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005d86:	e170      	b.n	800606a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d88:	bf00      	nop
    return;
 8005d8a:	e16e      	b.n	800606a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	f040 814a 	bne.w	800602a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d9a:	f003 0310 	and.w	r3, r3, #16
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 8143 	beq.w	800602a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005da8:	f003 0310 	and.w	r3, r3, #16
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 813c 	beq.w	800602a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005db2:	2300      	movs	r3, #0
 8005db4:	60bb      	str	r3, [r7, #8]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	60bb      	str	r3, [r7, #8]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	60bb      	str	r3, [r7, #8]
 8005dc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd2:	2b40      	cmp	r3, #64	; 0x40
 8005dd4:	f040 80b4 	bne.w	8005f40 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005de4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 8140 	beq.w	800606e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005df2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005df6:	429a      	cmp	r2, r3
 8005df8:	f080 8139 	bcs.w	800606e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e02:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e0e:	f000 8088 	beq.w	8005f22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	330c      	adds	r3, #12
 8005e18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e20:	e853 3f00 	ldrex	r3, [r3]
 8005e24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	330c      	adds	r3, #12
 8005e3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e4e:	e841 2300 	strex	r3, r2, [r1]
 8005e52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1d9      	bne.n	8005e12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	3314      	adds	r3, #20
 8005e64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e68:	e853 3f00 	ldrex	r3, [r3]
 8005e6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e70:	f023 0301 	bic.w	r3, r3, #1
 8005e74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3314      	adds	r3, #20
 8005e7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e8e:	e841 2300 	strex	r3, r2, [r1]
 8005e92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1e1      	bne.n	8005e5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	3314      	adds	r3, #20
 8005ea0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ea4:	e853 3f00 	ldrex	r3, [r3]
 8005ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005eaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3314      	adds	r3, #20
 8005eba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ebe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ec0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ec4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ec6:	e841 2300 	strex	r3, r2, [r1]
 8005eca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ecc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1e3      	bne.n	8005e9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	330c      	adds	r3, #12
 8005ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eea:	e853 3f00 	ldrex	r3, [r3]
 8005eee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ef2:	f023 0310 	bic.w	r3, r3, #16
 8005ef6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	330c      	adds	r3, #12
 8005f00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005f04:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f06:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f0c:	e841 2300 	strex	r3, r2, [r1]
 8005f10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1e3      	bne.n	8005ee0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7fd f91d 	bl	800315c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	4619      	mov	r1, r3
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7fb fa2a 	bl	800138c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f38:	e099      	b.n	800606e <HAL_UART_IRQHandler+0x50e>
 8005f3a:	bf00      	nop
 8005f3c:	080065eb 	.word	0x080065eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f000 808b 	beq.w	8006072 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005f5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 8086 	beq.w	8006072 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	330c      	adds	r3, #12
 8005f6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f70:	e853 3f00 	ldrex	r3, [r3]
 8005f74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	330c      	adds	r3, #12
 8005f86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005f8a:	647a      	str	r2, [r7, #68]	; 0x44
 8005f8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f92:	e841 2300 	strex	r3, r2, [r1]
 8005f96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1e3      	bne.n	8005f66 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3314      	adds	r3, #20
 8005fa4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	e853 3f00 	ldrex	r3, [r3]
 8005fac:	623b      	str	r3, [r7, #32]
   return(result);
 8005fae:	6a3b      	ldr	r3, [r7, #32]
 8005fb0:	f023 0301 	bic.w	r3, r3, #1
 8005fb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3314      	adds	r3, #20
 8005fbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005fc2:	633a      	str	r2, [r7, #48]	; 0x30
 8005fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fca:	e841 2300 	strex	r3, r2, [r1]
 8005fce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1e3      	bne.n	8005f9e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	330c      	adds	r3, #12
 8005fea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	e853 3f00 	ldrex	r3, [r3]
 8005ff2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0310 	bic.w	r3, r3, #16
 8005ffa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	330c      	adds	r3, #12
 8006004:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006008:	61fa      	str	r2, [r7, #28]
 800600a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600c:	69b9      	ldr	r1, [r7, #24]
 800600e:	69fa      	ldr	r2, [r7, #28]
 8006010:	e841 2300 	strex	r3, r2, [r1]
 8006014:	617b      	str	r3, [r7, #20]
   return(result);
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e3      	bne.n	8005fe4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800601c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006020:	4619      	mov	r1, r3
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7fb f9b2 	bl	800138c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006028:	e023      	b.n	8006072 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800602a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800602e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006032:	2b00      	cmp	r3, #0
 8006034:	d009      	beq.n	800604a <HAL_UART_IRQHandler+0x4ea>
 8006036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800603a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fae5 	bl	8006612 <UART_Transmit_IT>
    return;
 8006048:	e014      	b.n	8006074 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800604a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800604e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00e      	beq.n	8006074 <HAL_UART_IRQHandler+0x514>
 8006056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800605a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800605e:	2b00      	cmp	r3, #0
 8006060:	d008      	beq.n	8006074 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fb25 	bl	80066b2 <UART_EndTransmit_IT>
    return;
 8006068:	e004      	b.n	8006074 <HAL_UART_IRQHandler+0x514>
    return;
 800606a:	bf00      	nop
 800606c:	e002      	b.n	8006074 <HAL_UART_IRQHandler+0x514>
      return;
 800606e:	bf00      	nop
 8006070:	e000      	b.n	8006074 <HAL_UART_IRQHandler+0x514>
      return;
 8006072:	bf00      	nop
  }
}
 8006074:	37e8      	adds	r7, #232	; 0xe8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop

0800607c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b09c      	sub	sp, #112	; 0x70
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d172      	bne.n	80061ce <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80060e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ea:	2200      	movs	r2, #0
 80060ec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	330c      	adds	r3, #12
 80060f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060f8:	e853 3f00 	ldrex	r3, [r3]
 80060fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006104:	66bb      	str	r3, [r7, #104]	; 0x68
 8006106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	330c      	adds	r3, #12
 800610c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800610e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006110:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006112:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006114:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006116:	e841 2300 	strex	r3, r2, [r1]
 800611a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800611c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1e5      	bne.n	80060ee <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	3314      	adds	r3, #20
 8006128:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612c:	e853 3f00 	ldrex	r3, [r3]
 8006130:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006134:	f023 0301 	bic.w	r3, r3, #1
 8006138:	667b      	str	r3, [r7, #100]	; 0x64
 800613a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	3314      	adds	r3, #20
 8006140:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006142:	647a      	str	r2, [r7, #68]	; 0x44
 8006144:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006146:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006148:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800614a:	e841 2300 	strex	r3, r2, [r1]
 800614e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1e5      	bne.n	8006122 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3314      	adds	r3, #20
 800615c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	e853 3f00 	ldrex	r3, [r3]
 8006164:	623b      	str	r3, [r7, #32]
   return(result);
 8006166:	6a3b      	ldr	r3, [r7, #32]
 8006168:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800616c:	663b      	str	r3, [r7, #96]	; 0x60
 800616e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	3314      	adds	r3, #20
 8006174:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006176:	633a      	str	r2, [r7, #48]	; 0x30
 8006178:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800617c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800617e:	e841 2300 	strex	r3, r2, [r1]
 8006182:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1e5      	bne.n	8006156 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800618a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800618c:	2220      	movs	r2, #32
 800618e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006196:	2b01      	cmp	r3, #1
 8006198:	d119      	bne.n	80061ce <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800619a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	330c      	adds	r3, #12
 80061a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	e853 3f00 	ldrex	r3, [r3]
 80061a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f023 0310 	bic.w	r3, r3, #16
 80061b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	330c      	adds	r3, #12
 80061b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061ba:	61fa      	str	r2, [r7, #28]
 80061bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061be:	69b9      	ldr	r1, [r7, #24]
 80061c0:	69fa      	ldr	r2, [r7, #28]
 80061c2:	e841 2300 	strex	r3, r2, [r1]
 80061c6:	617b      	str	r3, [r7, #20]
   return(result);
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1e5      	bne.n	800619a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d106      	bne.n	80061e4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061da:	4619      	mov	r1, r3
 80061dc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80061de:	f7fb f8d5 	bl	800138c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80061e2:	e002      	b.n	80061ea <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80061e4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80061e6:	f7ff ff53 	bl	8006090 <HAL_UART_RxCpltCallback>
}
 80061ea:	bf00      	nop
 80061ec:	3770      	adds	r7, #112	; 0x70
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b084      	sub	sp, #16
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006204:	2b01      	cmp	r3, #1
 8006206:	d108      	bne.n	800621a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800620c:	085b      	lsrs	r3, r3, #1
 800620e:	b29b      	uxth	r3, r3
 8006210:	4619      	mov	r1, r3
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f7fb f8ba 	bl	800138c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006218:	e002      	b.n	8006220 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f7ff ff42 	bl	80060a4 <HAL_UART_RxHalfCpltCallback>
}
 8006220:	bf00      	nop
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006230:	2300      	movs	r3, #0
 8006232:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006238:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	695b      	ldr	r3, [r3, #20]
 8006240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006244:	2b80      	cmp	r3, #128	; 0x80
 8006246:	bf0c      	ite	eq
 8006248:	2301      	moveq	r3, #1
 800624a:	2300      	movne	r3, #0
 800624c:	b2db      	uxtb	r3, r3
 800624e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b21      	cmp	r3, #33	; 0x21
 800625a:	d108      	bne.n	800626e <UART_DMAError+0x46>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d005      	beq.n	800626e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	2200      	movs	r2, #0
 8006266:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006268:	68b8      	ldr	r0, [r7, #8]
 800626a:	f000 f933 	bl	80064d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	695b      	ldr	r3, [r3, #20]
 8006274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006278:	2b40      	cmp	r3, #64	; 0x40
 800627a:	bf0c      	ite	eq
 800627c:	2301      	moveq	r3, #1
 800627e:	2300      	movne	r3, #0
 8006280:	b2db      	uxtb	r3, r3
 8006282:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b22      	cmp	r3, #34	; 0x22
 800628e:	d108      	bne.n	80062a2 <UART_DMAError+0x7a>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d005      	beq.n	80062a2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	2200      	movs	r2, #0
 800629a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800629c:	68b8      	ldr	r0, [r7, #8]
 800629e:	f000 f941 	bl	8006524 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a6:	f043 0210 	orr.w	r2, r3, #16
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062ae:	68b8      	ldr	r0, [r7, #8]
 80062b0:	f7ff ff02 	bl	80060b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062b4:	bf00      	nop
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b090      	sub	sp, #64	; 0x40
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	603b      	str	r3, [r7, #0]
 80062c8:	4613      	mov	r3, r2
 80062ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062cc:	e050      	b.n	8006370 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d4:	d04c      	beq.n	8006370 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80062d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d007      	beq.n	80062ec <UART_WaitOnFlagUntilTimeout+0x30>
 80062dc:	f7fc fd00 	bl	8002ce0 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d241      	bcs.n	8006370 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	330c      	adds	r3, #12
 80062f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f6:	e853 3f00 	ldrex	r3, [r3]
 80062fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	330c      	adds	r3, #12
 800630a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800630c:	637a      	str	r2, [r7, #52]	; 0x34
 800630e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006310:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006312:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006314:	e841 2300 	strex	r3, r2, [r1]
 8006318:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800631a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1e5      	bne.n	80062ec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3314      	adds	r3, #20
 8006326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	e853 3f00 	ldrex	r3, [r3]
 800632e:	613b      	str	r3, [r7, #16]
   return(result);
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	f023 0301 	bic.w	r3, r3, #1
 8006336:	63bb      	str	r3, [r7, #56]	; 0x38
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3314      	adds	r3, #20
 800633e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006340:	623a      	str	r2, [r7, #32]
 8006342:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006344:	69f9      	ldr	r1, [r7, #28]
 8006346:	6a3a      	ldr	r2, [r7, #32]
 8006348:	e841 2300 	strex	r3, r2, [r1]
 800634c:	61bb      	str	r3, [r7, #24]
   return(result);
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1e5      	bne.n	8006320 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2220      	movs	r2, #32
 8006358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2220      	movs	r2, #32
 8006360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e00f      	b.n	8006390 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	4013      	ands	r3, r2
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	429a      	cmp	r2, r3
 800637e:	bf0c      	ite	eq
 8006380:	2301      	moveq	r3, #1
 8006382:	2300      	movne	r3, #0
 8006384:	b2db      	uxtb	r3, r3
 8006386:	461a      	mov	r2, r3
 8006388:	79fb      	ldrb	r3, [r7, #7]
 800638a:	429a      	cmp	r2, r3
 800638c:	d09f      	beq.n	80062ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3740      	adds	r7, #64	; 0x40
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b098      	sub	sp, #96	; 0x60
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	4613      	mov	r3, r2
 80063a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	88fa      	ldrh	r2, [r7, #6]
 80063b0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2222      	movs	r2, #34	; 0x22
 80063bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c4:	4a40      	ldr	r2, [pc, #256]	; (80064c8 <UART_Start_Receive_DMA+0x130>)
 80063c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063cc:	4a3f      	ldr	r2, [pc, #252]	; (80064cc <UART_Start_Receive_DMA+0x134>)
 80063ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d4:	4a3e      	ldr	r2, [pc, #248]	; (80064d0 <UART_Start_Receive_DMA+0x138>)
 80063d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063dc:	2200      	movs	r2, #0
 80063de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80063e0:	f107 0308 	add.w	r3, r7, #8
 80063e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	3304      	adds	r3, #4
 80063f0:	4619      	mov	r1, r3
 80063f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	88fb      	ldrh	r3, [r7, #6]
 80063f8:	f7fc fe58 	bl	80030ac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80063fc:	2300      	movs	r3, #0
 80063fe:	613b      	str	r3, [r7, #16]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	613b      	str	r3, [r7, #16]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	613b      	str	r3, [r7, #16]
 8006410:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d019      	beq.n	8006456 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	330c      	adds	r3, #12
 8006428:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800642c:	e853 3f00 	ldrex	r3, [r3]
 8006430:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006438:	65bb      	str	r3, [r7, #88]	; 0x58
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	330c      	adds	r3, #12
 8006440:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006442:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006444:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006446:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006448:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800644a:	e841 2300 	strex	r3, r2, [r1]
 800644e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1e5      	bne.n	8006422 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	3314      	adds	r3, #20
 800645c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006460:	e853 3f00 	ldrex	r3, [r3]
 8006464:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006468:	f043 0301 	orr.w	r3, r3, #1
 800646c:	657b      	str	r3, [r7, #84]	; 0x54
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	3314      	adds	r3, #20
 8006474:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006476:	63ba      	str	r2, [r7, #56]	; 0x38
 8006478:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800647c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800647e:	e841 2300 	strex	r3, r2, [r1]
 8006482:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1e5      	bne.n	8006456 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	3314      	adds	r3, #20
 8006490:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	e853 3f00 	ldrex	r3, [r3]
 8006498:	617b      	str	r3, [r7, #20]
   return(result);
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064a0:	653b      	str	r3, [r7, #80]	; 0x50
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3314      	adds	r3, #20
 80064a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064aa:	627a      	str	r2, [r7, #36]	; 0x24
 80064ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ae:	6a39      	ldr	r1, [r7, #32]
 80064b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b2:	e841 2300 	strex	r3, r2, [r1]
 80064b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1e5      	bne.n	800648a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3760      	adds	r7, #96	; 0x60
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	080060cd 	.word	0x080060cd
 80064cc:	080061f3 	.word	0x080061f3
 80064d0:	08006229 	.word	0x08006229

080064d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b089      	sub	sp, #36	; 0x24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	330c      	adds	r3, #12
 80064e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	e853 3f00 	ldrex	r3, [r3]
 80064ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80064f2:	61fb      	str	r3, [r7, #28]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	330c      	adds	r3, #12
 80064fa:	69fa      	ldr	r2, [r7, #28]
 80064fc:	61ba      	str	r2, [r7, #24]
 80064fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006500:	6979      	ldr	r1, [r7, #20]
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	e841 2300 	strex	r3, r2, [r1]
 8006508:	613b      	str	r3, [r7, #16]
   return(result);
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1e5      	bne.n	80064dc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2220      	movs	r2, #32
 8006514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006518:	bf00      	nop
 800651a:	3724      	adds	r7, #36	; 0x24
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006524:	b480      	push	{r7}
 8006526:	b095      	sub	sp, #84	; 0x54
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	330c      	adds	r3, #12
 8006532:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006536:	e853 3f00 	ldrex	r3, [r3]
 800653a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800653c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006542:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	330c      	adds	r3, #12
 800654a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800654c:	643a      	str	r2, [r7, #64]	; 0x40
 800654e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006550:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006552:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006554:	e841 2300 	strex	r3, r2, [r1]
 8006558:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800655a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1e5      	bne.n	800652c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	3314      	adds	r3, #20
 8006566:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	e853 3f00 	ldrex	r3, [r3]
 800656e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	f023 0301 	bic.w	r3, r3, #1
 8006576:	64bb      	str	r3, [r7, #72]	; 0x48
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	3314      	adds	r3, #20
 800657e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006580:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006582:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006584:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006586:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006588:	e841 2300 	strex	r3, r2, [r1]
 800658c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1e5      	bne.n	8006560 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006598:	2b01      	cmp	r3, #1
 800659a:	d119      	bne.n	80065d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	330c      	adds	r3, #12
 80065a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	e853 3f00 	ldrex	r3, [r3]
 80065aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f023 0310 	bic.w	r3, r3, #16
 80065b2:	647b      	str	r3, [r7, #68]	; 0x44
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	330c      	adds	r3, #12
 80065ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065bc:	61ba      	str	r2, [r7, #24]
 80065be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c0:	6979      	ldr	r1, [r7, #20]
 80065c2:	69ba      	ldr	r2, [r7, #24]
 80065c4:	e841 2300 	strex	r3, r2, [r1]
 80065c8:	613b      	str	r3, [r7, #16]
   return(result);
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1e5      	bne.n	800659c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2220      	movs	r2, #32
 80065d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80065de:	bf00      	nop
 80065e0:	3754      	adds	r7, #84	; 0x54
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f7ff fd57 	bl	80060b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800660a:	bf00      	nop
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006612:	b480      	push	{r7}
 8006614:	b085      	sub	sp, #20
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b21      	cmp	r3, #33	; 0x21
 8006624:	d13e      	bne.n	80066a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800662e:	d114      	bne.n	800665a <UART_Transmit_IT+0x48>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d110      	bne.n	800665a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a1b      	ldr	r3, [r3, #32]
 800663c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	881b      	ldrh	r3, [r3, #0]
 8006642:	461a      	mov	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800664c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	1c9a      	adds	r2, r3, #2
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	621a      	str	r2, [r3, #32]
 8006658:	e008      	b.n	800666c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	1c59      	adds	r1, r3, #1
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	6211      	str	r1, [r2, #32]
 8006664:	781a      	ldrb	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006670:	b29b      	uxth	r3, r3
 8006672:	3b01      	subs	r3, #1
 8006674:	b29b      	uxth	r3, r3
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	4619      	mov	r1, r3
 800667a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10f      	bne.n	80066a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68da      	ldr	r2, [r3, #12]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800668e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68da      	ldr	r2, [r3, #12]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800669e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	e000      	b.n	80066a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80066a4:	2302      	movs	r3, #2
  }
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b082      	sub	sp, #8
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68da      	ldr	r2, [r3, #12]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2220      	movs	r2, #32
 80066ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7ff fcd2 	bl	800607c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3708      	adds	r7, #8
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b08c      	sub	sp, #48	; 0x30
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b22      	cmp	r3, #34	; 0x22
 80066f4:	f040 80ab 	bne.w	800684e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006700:	d117      	bne.n	8006732 <UART_Receive_IT+0x50>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d113      	bne.n	8006732 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800670a:	2300      	movs	r3, #0
 800670c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006712:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	b29b      	uxth	r3, r3
 800671c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006720:	b29a      	uxth	r2, r3
 8006722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006724:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672a:	1c9a      	adds	r2, r3, #2
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	629a      	str	r2, [r3, #40]	; 0x28
 8006730:	e026      	b.n	8006780 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006736:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006738:	2300      	movs	r3, #0
 800673a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006744:	d007      	beq.n	8006756 <UART_Receive_IT+0x74>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10a      	bne.n	8006764 <UART_Receive_IT+0x82>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d106      	bne.n	8006764 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	b2da      	uxtb	r2, r3
 800675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006760:	701a      	strb	r2, [r3, #0]
 8006762:	e008      	b.n	8006776 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	b2db      	uxtb	r3, r3
 800676c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006770:	b2da      	uxtb	r2, r3
 8006772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006774:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006784:	b29b      	uxth	r3, r3
 8006786:	3b01      	subs	r3, #1
 8006788:	b29b      	uxth	r3, r3
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	4619      	mov	r1, r3
 800678e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006790:	2b00      	cmp	r3, #0
 8006792:	d15a      	bne.n	800684a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68da      	ldr	r2, [r3, #12]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f022 0220 	bic.w	r2, r2, #32
 80067a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68da      	ldr	r2, [r3, #12]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	695a      	ldr	r2, [r3, #20]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f022 0201 	bic.w	r2, r2, #1
 80067c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2220      	movs	r2, #32
 80067c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d135      	bne.n	8006840 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	330c      	adds	r3, #12
 80067e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	e853 3f00 	ldrex	r3, [r3]
 80067e8:	613b      	str	r3, [r7, #16]
   return(result);
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	f023 0310 	bic.w	r3, r3, #16
 80067f0:	627b      	str	r3, [r7, #36]	; 0x24
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	330c      	adds	r3, #12
 80067f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067fa:	623a      	str	r2, [r7, #32]
 80067fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fe:	69f9      	ldr	r1, [r7, #28]
 8006800:	6a3a      	ldr	r2, [r7, #32]
 8006802:	e841 2300 	strex	r3, r2, [r1]
 8006806:	61bb      	str	r3, [r7, #24]
   return(result);
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1e5      	bne.n	80067da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0310 	and.w	r3, r3, #16
 8006818:	2b10      	cmp	r3, #16
 800681a:	d10a      	bne.n	8006832 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800681c:	2300      	movs	r3, #0
 800681e:	60fb      	str	r3, [r7, #12]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	60fb      	str	r3, [r7, #12]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	60fb      	str	r3, [r7, #12]
 8006830:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f7fa fda7 	bl	800138c <HAL_UARTEx_RxEventCallback>
 800683e:	e002      	b.n	8006846 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f7ff fc25 	bl	8006090 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006846:	2300      	movs	r3, #0
 8006848:	e002      	b.n	8006850 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	e000      	b.n	8006850 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800684e:	2302      	movs	r3, #2
  }
}
 8006850:	4618      	mov	r0, r3
 8006852:	3730      	adds	r7, #48	; 0x30
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800685c:	b0c0      	sub	sp, #256	; 0x100
 800685e:	af00      	add	r7, sp, #0
 8006860:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006874:	68d9      	ldr	r1, [r3, #12]
 8006876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	ea40 0301 	orr.w	r3, r0, r1
 8006880:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006886:	689a      	ldr	r2, [r3, #8]
 8006888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	431a      	orrs	r2, r3
 8006890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	431a      	orrs	r2, r3
 8006898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800689c:	69db      	ldr	r3, [r3, #28]
 800689e:	4313      	orrs	r3, r2
 80068a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80068a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80068b0:	f021 010c 	bic.w	r1, r1, #12
 80068b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068be:	430b      	orrs	r3, r1
 80068c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80068ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d2:	6999      	ldr	r1, [r3, #24]
 80068d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	ea40 0301 	orr.w	r3, r0, r1
 80068de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	4b8f      	ldr	r3, [pc, #572]	; (8006b24 <UART_SetConfig+0x2cc>)
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d005      	beq.n	80068f8 <UART_SetConfig+0xa0>
 80068ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	4b8d      	ldr	r3, [pc, #564]	; (8006b28 <UART_SetConfig+0x2d0>)
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d104      	bne.n	8006902 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80068f8:	f7fd fdb0 	bl	800445c <HAL_RCC_GetPCLK2Freq>
 80068fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006900:	e003      	b.n	800690a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006902:	f7fd fd97 	bl	8004434 <HAL_RCC_GetPCLK1Freq>
 8006906:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800690a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800690e:	69db      	ldr	r3, [r3, #28]
 8006910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006914:	f040 810c 	bne.w	8006b30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006918:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800691c:	2200      	movs	r2, #0
 800691e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006922:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006926:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800692a:	4622      	mov	r2, r4
 800692c:	462b      	mov	r3, r5
 800692e:	1891      	adds	r1, r2, r2
 8006930:	65b9      	str	r1, [r7, #88]	; 0x58
 8006932:	415b      	adcs	r3, r3
 8006934:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006936:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800693a:	4621      	mov	r1, r4
 800693c:	eb12 0801 	adds.w	r8, r2, r1
 8006940:	4629      	mov	r1, r5
 8006942:	eb43 0901 	adc.w	r9, r3, r1
 8006946:	f04f 0200 	mov.w	r2, #0
 800694a:	f04f 0300 	mov.w	r3, #0
 800694e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006952:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006956:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800695a:	4690      	mov	r8, r2
 800695c:	4699      	mov	r9, r3
 800695e:	4623      	mov	r3, r4
 8006960:	eb18 0303 	adds.w	r3, r8, r3
 8006964:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006968:	462b      	mov	r3, r5
 800696a:	eb49 0303 	adc.w	r3, r9, r3
 800696e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800697e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006982:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006986:	460b      	mov	r3, r1
 8006988:	18db      	adds	r3, r3, r3
 800698a:	653b      	str	r3, [r7, #80]	; 0x50
 800698c:	4613      	mov	r3, r2
 800698e:	eb42 0303 	adc.w	r3, r2, r3
 8006992:	657b      	str	r3, [r7, #84]	; 0x54
 8006994:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006998:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800699c:	f7fa fa82 	bl	8000ea4 <__aeabi_uldivmod>
 80069a0:	4602      	mov	r2, r0
 80069a2:	460b      	mov	r3, r1
 80069a4:	4b61      	ldr	r3, [pc, #388]	; (8006b2c <UART_SetConfig+0x2d4>)
 80069a6:	fba3 2302 	umull	r2, r3, r3, r2
 80069aa:	095b      	lsrs	r3, r3, #5
 80069ac:	011c      	lsls	r4, r3, #4
 80069ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069b2:	2200      	movs	r2, #0
 80069b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80069bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80069c0:	4642      	mov	r2, r8
 80069c2:	464b      	mov	r3, r9
 80069c4:	1891      	adds	r1, r2, r2
 80069c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80069c8:	415b      	adcs	r3, r3
 80069ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80069d0:	4641      	mov	r1, r8
 80069d2:	eb12 0a01 	adds.w	sl, r2, r1
 80069d6:	4649      	mov	r1, r9
 80069d8:	eb43 0b01 	adc.w	fp, r3, r1
 80069dc:	f04f 0200 	mov.w	r2, #0
 80069e0:	f04f 0300 	mov.w	r3, #0
 80069e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80069e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80069ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069f0:	4692      	mov	sl, r2
 80069f2:	469b      	mov	fp, r3
 80069f4:	4643      	mov	r3, r8
 80069f6:	eb1a 0303 	adds.w	r3, sl, r3
 80069fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069fe:	464b      	mov	r3, r9
 8006a00:	eb4b 0303 	adc.w	r3, fp, r3
 8006a04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a14:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006a18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	18db      	adds	r3, r3, r3
 8006a20:	643b      	str	r3, [r7, #64]	; 0x40
 8006a22:	4613      	mov	r3, r2
 8006a24:	eb42 0303 	adc.w	r3, r2, r3
 8006a28:	647b      	str	r3, [r7, #68]	; 0x44
 8006a2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006a2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006a32:	f7fa fa37 	bl	8000ea4 <__aeabi_uldivmod>
 8006a36:	4602      	mov	r2, r0
 8006a38:	460b      	mov	r3, r1
 8006a3a:	4611      	mov	r1, r2
 8006a3c:	4b3b      	ldr	r3, [pc, #236]	; (8006b2c <UART_SetConfig+0x2d4>)
 8006a3e:	fba3 2301 	umull	r2, r3, r3, r1
 8006a42:	095b      	lsrs	r3, r3, #5
 8006a44:	2264      	movs	r2, #100	; 0x64
 8006a46:	fb02 f303 	mul.w	r3, r2, r3
 8006a4a:	1acb      	subs	r3, r1, r3
 8006a4c:	00db      	lsls	r3, r3, #3
 8006a4e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006a52:	4b36      	ldr	r3, [pc, #216]	; (8006b2c <UART_SetConfig+0x2d4>)
 8006a54:	fba3 2302 	umull	r2, r3, r3, r2
 8006a58:	095b      	lsrs	r3, r3, #5
 8006a5a:	005b      	lsls	r3, r3, #1
 8006a5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a60:	441c      	add	r4, r3
 8006a62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a66:	2200      	movs	r2, #0
 8006a68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a6c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006a70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006a74:	4642      	mov	r2, r8
 8006a76:	464b      	mov	r3, r9
 8006a78:	1891      	adds	r1, r2, r2
 8006a7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a7c:	415b      	adcs	r3, r3
 8006a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a84:	4641      	mov	r1, r8
 8006a86:	1851      	adds	r1, r2, r1
 8006a88:	6339      	str	r1, [r7, #48]	; 0x30
 8006a8a:	4649      	mov	r1, r9
 8006a8c:	414b      	adcs	r3, r1
 8006a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a90:	f04f 0200 	mov.w	r2, #0
 8006a94:	f04f 0300 	mov.w	r3, #0
 8006a98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006a9c:	4659      	mov	r1, fp
 8006a9e:	00cb      	lsls	r3, r1, #3
 8006aa0:	4651      	mov	r1, sl
 8006aa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006aa6:	4651      	mov	r1, sl
 8006aa8:	00ca      	lsls	r2, r1, #3
 8006aaa:	4610      	mov	r0, r2
 8006aac:	4619      	mov	r1, r3
 8006aae:	4603      	mov	r3, r0
 8006ab0:	4642      	mov	r2, r8
 8006ab2:	189b      	adds	r3, r3, r2
 8006ab4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ab8:	464b      	mov	r3, r9
 8006aba:	460a      	mov	r2, r1
 8006abc:	eb42 0303 	adc.w	r3, r2, r3
 8006ac0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006ad0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006ad4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006ad8:	460b      	mov	r3, r1
 8006ada:	18db      	adds	r3, r3, r3
 8006adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ade:	4613      	mov	r3, r2
 8006ae0:	eb42 0303 	adc.w	r3, r2, r3
 8006ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ae6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006aea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006aee:	f7fa f9d9 	bl	8000ea4 <__aeabi_uldivmod>
 8006af2:	4602      	mov	r2, r0
 8006af4:	460b      	mov	r3, r1
 8006af6:	4b0d      	ldr	r3, [pc, #52]	; (8006b2c <UART_SetConfig+0x2d4>)
 8006af8:	fba3 1302 	umull	r1, r3, r3, r2
 8006afc:	095b      	lsrs	r3, r3, #5
 8006afe:	2164      	movs	r1, #100	; 0x64
 8006b00:	fb01 f303 	mul.w	r3, r1, r3
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	00db      	lsls	r3, r3, #3
 8006b08:	3332      	adds	r3, #50	; 0x32
 8006b0a:	4a08      	ldr	r2, [pc, #32]	; (8006b2c <UART_SetConfig+0x2d4>)
 8006b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b10:	095b      	lsrs	r3, r3, #5
 8006b12:	f003 0207 	and.w	r2, r3, #7
 8006b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4422      	add	r2, r4
 8006b1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b20:	e105      	b.n	8006d2e <UART_SetConfig+0x4d6>
 8006b22:	bf00      	nop
 8006b24:	40011000 	.word	0x40011000
 8006b28:	40011400 	.word	0x40011400
 8006b2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b34:	2200      	movs	r2, #0
 8006b36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006b3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006b42:	4642      	mov	r2, r8
 8006b44:	464b      	mov	r3, r9
 8006b46:	1891      	adds	r1, r2, r2
 8006b48:	6239      	str	r1, [r7, #32]
 8006b4a:	415b      	adcs	r3, r3
 8006b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b52:	4641      	mov	r1, r8
 8006b54:	1854      	adds	r4, r2, r1
 8006b56:	4649      	mov	r1, r9
 8006b58:	eb43 0501 	adc.w	r5, r3, r1
 8006b5c:	f04f 0200 	mov.w	r2, #0
 8006b60:	f04f 0300 	mov.w	r3, #0
 8006b64:	00eb      	lsls	r3, r5, #3
 8006b66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b6a:	00e2      	lsls	r2, r4, #3
 8006b6c:	4614      	mov	r4, r2
 8006b6e:	461d      	mov	r5, r3
 8006b70:	4643      	mov	r3, r8
 8006b72:	18e3      	adds	r3, r4, r3
 8006b74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b78:	464b      	mov	r3, r9
 8006b7a:	eb45 0303 	adc.w	r3, r5, r3
 8006b7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b92:	f04f 0200 	mov.w	r2, #0
 8006b96:	f04f 0300 	mov.w	r3, #0
 8006b9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006b9e:	4629      	mov	r1, r5
 8006ba0:	008b      	lsls	r3, r1, #2
 8006ba2:	4621      	mov	r1, r4
 8006ba4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ba8:	4621      	mov	r1, r4
 8006baa:	008a      	lsls	r2, r1, #2
 8006bac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006bb0:	f7fa f978 	bl	8000ea4 <__aeabi_uldivmod>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	4b60      	ldr	r3, [pc, #384]	; (8006d3c <UART_SetConfig+0x4e4>)
 8006bba:	fba3 2302 	umull	r2, r3, r3, r2
 8006bbe:	095b      	lsrs	r3, r3, #5
 8006bc0:	011c      	lsls	r4, r3, #4
 8006bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006bcc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006bd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006bd4:	4642      	mov	r2, r8
 8006bd6:	464b      	mov	r3, r9
 8006bd8:	1891      	adds	r1, r2, r2
 8006bda:	61b9      	str	r1, [r7, #24]
 8006bdc:	415b      	adcs	r3, r3
 8006bde:	61fb      	str	r3, [r7, #28]
 8006be0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006be4:	4641      	mov	r1, r8
 8006be6:	1851      	adds	r1, r2, r1
 8006be8:	6139      	str	r1, [r7, #16]
 8006bea:	4649      	mov	r1, r9
 8006bec:	414b      	adcs	r3, r1
 8006bee:	617b      	str	r3, [r7, #20]
 8006bf0:	f04f 0200 	mov.w	r2, #0
 8006bf4:	f04f 0300 	mov.w	r3, #0
 8006bf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006bfc:	4659      	mov	r1, fp
 8006bfe:	00cb      	lsls	r3, r1, #3
 8006c00:	4651      	mov	r1, sl
 8006c02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c06:	4651      	mov	r1, sl
 8006c08:	00ca      	lsls	r2, r1, #3
 8006c0a:	4610      	mov	r0, r2
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	4603      	mov	r3, r0
 8006c10:	4642      	mov	r2, r8
 8006c12:	189b      	adds	r3, r3, r2
 8006c14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c18:	464b      	mov	r3, r9
 8006c1a:	460a      	mov	r2, r1
 8006c1c:	eb42 0303 	adc.w	r3, r2, r3
 8006c20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c2e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006c30:	f04f 0200 	mov.w	r2, #0
 8006c34:	f04f 0300 	mov.w	r3, #0
 8006c38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006c3c:	4649      	mov	r1, r9
 8006c3e:	008b      	lsls	r3, r1, #2
 8006c40:	4641      	mov	r1, r8
 8006c42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c46:	4641      	mov	r1, r8
 8006c48:	008a      	lsls	r2, r1, #2
 8006c4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006c4e:	f7fa f929 	bl	8000ea4 <__aeabi_uldivmod>
 8006c52:	4602      	mov	r2, r0
 8006c54:	460b      	mov	r3, r1
 8006c56:	4b39      	ldr	r3, [pc, #228]	; (8006d3c <UART_SetConfig+0x4e4>)
 8006c58:	fba3 1302 	umull	r1, r3, r3, r2
 8006c5c:	095b      	lsrs	r3, r3, #5
 8006c5e:	2164      	movs	r1, #100	; 0x64
 8006c60:	fb01 f303 	mul.w	r3, r1, r3
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	011b      	lsls	r3, r3, #4
 8006c68:	3332      	adds	r3, #50	; 0x32
 8006c6a:	4a34      	ldr	r2, [pc, #208]	; (8006d3c <UART_SetConfig+0x4e4>)
 8006c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c70:	095b      	lsrs	r3, r3, #5
 8006c72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c76:	441c      	add	r4, r3
 8006c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	673b      	str	r3, [r7, #112]	; 0x70
 8006c80:	677a      	str	r2, [r7, #116]	; 0x74
 8006c82:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006c86:	4642      	mov	r2, r8
 8006c88:	464b      	mov	r3, r9
 8006c8a:	1891      	adds	r1, r2, r2
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	415b      	adcs	r3, r3
 8006c90:	60fb      	str	r3, [r7, #12]
 8006c92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c96:	4641      	mov	r1, r8
 8006c98:	1851      	adds	r1, r2, r1
 8006c9a:	6039      	str	r1, [r7, #0]
 8006c9c:	4649      	mov	r1, r9
 8006c9e:	414b      	adcs	r3, r1
 8006ca0:	607b      	str	r3, [r7, #4]
 8006ca2:	f04f 0200 	mov.w	r2, #0
 8006ca6:	f04f 0300 	mov.w	r3, #0
 8006caa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006cae:	4659      	mov	r1, fp
 8006cb0:	00cb      	lsls	r3, r1, #3
 8006cb2:	4651      	mov	r1, sl
 8006cb4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cb8:	4651      	mov	r1, sl
 8006cba:	00ca      	lsls	r2, r1, #3
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	4642      	mov	r2, r8
 8006cc4:	189b      	adds	r3, r3, r2
 8006cc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cc8:	464b      	mov	r3, r9
 8006cca:	460a      	mov	r2, r1
 8006ccc:	eb42 0303 	adc.w	r3, r2, r3
 8006cd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	663b      	str	r3, [r7, #96]	; 0x60
 8006cdc:	667a      	str	r2, [r7, #100]	; 0x64
 8006cde:	f04f 0200 	mov.w	r2, #0
 8006ce2:	f04f 0300 	mov.w	r3, #0
 8006ce6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006cea:	4649      	mov	r1, r9
 8006cec:	008b      	lsls	r3, r1, #2
 8006cee:	4641      	mov	r1, r8
 8006cf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cf4:	4641      	mov	r1, r8
 8006cf6:	008a      	lsls	r2, r1, #2
 8006cf8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006cfc:	f7fa f8d2 	bl	8000ea4 <__aeabi_uldivmod>
 8006d00:	4602      	mov	r2, r0
 8006d02:	460b      	mov	r3, r1
 8006d04:	4b0d      	ldr	r3, [pc, #52]	; (8006d3c <UART_SetConfig+0x4e4>)
 8006d06:	fba3 1302 	umull	r1, r3, r3, r2
 8006d0a:	095b      	lsrs	r3, r3, #5
 8006d0c:	2164      	movs	r1, #100	; 0x64
 8006d0e:	fb01 f303 	mul.w	r3, r1, r3
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	011b      	lsls	r3, r3, #4
 8006d16:	3332      	adds	r3, #50	; 0x32
 8006d18:	4a08      	ldr	r2, [pc, #32]	; (8006d3c <UART_SetConfig+0x4e4>)
 8006d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d1e:	095b      	lsrs	r3, r3, #5
 8006d20:	f003 020f 	and.w	r2, r3, #15
 8006d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4422      	add	r2, r4
 8006d2c:	609a      	str	r2, [r3, #8]
}
 8006d2e:	bf00      	nop
 8006d30:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006d34:	46bd      	mov	sp, r7
 8006d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d3a:	bf00      	nop
 8006d3c:	51eb851f 	.word	0x51eb851f

08006d40 <MOTOR_driver_setupPWM>:
 *      Author: minht
 */

#include "MOTOR_DRIVER.h"
void MOTOR_driver_setupPWM(MOTOR_DRIVER_t* motor, TIM_HandleTypeDef* htimPWM, uint32_t CH1, uint32_t CH2)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
 8006d4c:	603b      	str	r3, [r7, #0]
    motor->htimPWM = htimPWM;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	605a      	str	r2, [r3, #4]
    motor->PWM_CH1 = CH1;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	611a      	str	r2, [r3, #16]
    motor->PWM_CH2 = CH2;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	683a      	ldr	r2, [r7, #0]
 8006d5e:	615a      	str	r2, [r3, #20]
    HAL_TIM_PWM_Start(motor->htimPWM, motor->PWM_CH1);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	685a      	ldr	r2, [r3, #4]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	4619      	mov	r1, r3
 8006d6a:	4610      	mov	r0, r2
 8006d6c:	f7fd fd0c 	bl	8004788 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(motor->htimPWM, motor->PWM_CH2);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	4619      	mov	r1, r3
 8006d7a:	4610      	mov	r0, r2
 8006d7c:	f7fd fd04 	bl	8004788 <HAL_TIM_PWM_Start>
}
 8006d80:	bf00      	nop
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <MOTOR_driver_setupENCODER>:
void MOTOR_driver_setupENCODER(MOTOR_DRIVER_t* motor, TIM_HandleTypeDef *htimENC, uint32_t CH1, uint32_t CH2)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
 8006d94:	603b      	str	r3, [r7, #0]
    motor->htimENC = htimENC;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	68ba      	ldr	r2, [r7, #8]
 8006d9a:	601a      	str	r2, [r3, #0]
    motor->ENC_CH1 = CH1;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	619a      	str	r2, [r3, #24]
    motor->ENC_CH2 = CH2;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	61da      	str	r2, [r3, #28]
    HAL_TIM_Base_Start(motor->htimENC);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7fd fbb9 	bl	8004524 <HAL_TIM_Base_Start>
    HAL_TIM_Encoder_Start(motor->htimENC, motor->ENC_CH1 | motor->ENC_CH1);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	4619      	mov	r1, r3
 8006dbc:	4610      	mov	r0, r2
 8006dbe:	f7fd fe51 	bl	8004a64 <HAL_TIM_Encoder_Start>
}
 8006dc2:	bf00      	nop
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <MOTOR_driver_rotary>:
void MOTOR_driver_rotary(MOTOR_DRIVER_t* motor, float duty)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b083      	sub	sp, #12
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
 8006dd2:	ed87 0a00 	vstr	s0, [r7]
    if (duty >= 0)
 8006dd6:	edd7 7a00 	vldr	s15, [r7]
 8006dda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006de2:	db61      	blt.n	8006ea8 <MOTOR_driver_rotary+0xde>
    {
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH1, (uint16_t)duty);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10b      	bne.n	8006e04 <MOTOR_driver_rotary+0x3a>
 8006dec:	edd7 7a00 	vldr	s15, [r7]
 8006df0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006df4:	ee17 3a90 	vmov	r3, s15
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	635a      	str	r2, [r3, #52]	; 0x34
 8006e02:	e02d      	b.n	8006e60 <MOTOR_driver_rotary+0x96>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	2b04      	cmp	r3, #4
 8006e0a:	d10c      	bne.n	8006e26 <MOTOR_driver_rotary+0x5c>
 8006e0c:	edd7 7a00 	vldr	s15, [r7]
 8006e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e14:	ee17 3a90 	vmov	r3, s15
 8006e18:	b299      	uxth	r1, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	460b      	mov	r3, r1
 8006e22:	6393      	str	r3, [r2, #56]	; 0x38
 8006e24:	e01c      	b.n	8006e60 <MOTOR_driver_rotary+0x96>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	2b08      	cmp	r3, #8
 8006e2c:	d10c      	bne.n	8006e48 <MOTOR_driver_rotary+0x7e>
 8006e2e:	edd7 7a00 	vldr	s15, [r7]
 8006e32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e36:	ee17 3a90 	vmov	r3, s15
 8006e3a:	b299      	uxth	r1, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	460b      	mov	r3, r1
 8006e44:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006e46:	e00b      	b.n	8006e60 <MOTOR_driver_rotary+0x96>
 8006e48:	edd7 7a00 	vldr	s15, [r7]
 8006e4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e50:	ee17 3a90 	vmov	r3, s15
 8006e54:	b299      	uxth	r1, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	6413      	str	r3, [r2, #64]	; 0x40
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)0);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d105      	bne.n	8006e74 <MOTOR_driver_rotary+0xaa>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	635a      	str	r2, [r3, #52]	; 0x34
    else
    {
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH1, (uint16_t)0);
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)-duty);
    }
}
 8006e72:	e083      	b.n	8006f7c <MOTOR_driver_rotary+0x1b2>
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)0);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	2b04      	cmp	r3, #4
 8006e7a:	d105      	bne.n	8006e88 <MOTOR_driver_rotary+0xbe>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	2300      	movs	r3, #0
 8006e84:	6393      	str	r3, [r2, #56]	; 0x38
 8006e86:	e079      	b.n	8006f7c <MOTOR_driver_rotary+0x1b2>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	695b      	ldr	r3, [r3, #20]
 8006e8c:	2b08      	cmp	r3, #8
 8006e8e:	d105      	bne.n	8006e9c <MOTOR_driver_rotary+0xd2>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	2300      	movs	r3, #0
 8006e98:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006e9a:	e06f      	b.n	8006f7c <MOTOR_driver_rotary+0x1b2>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8006ea6:	e069      	b.n	8006f7c <MOTOR_driver_rotary+0x1b2>
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH1, (uint16_t)0);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d105      	bne.n	8006ebc <MOTOR_driver_rotary+0xf2>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	635a      	str	r2, [r3, #52]	; 0x34
 8006eba:	e018      	b.n	8006eee <MOTOR_driver_rotary+0x124>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	2b04      	cmp	r3, #4
 8006ec2:	d105      	bne.n	8006ed0 <MOTOR_driver_rotary+0x106>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	2300      	movs	r3, #0
 8006ecc:	6393      	str	r3, [r2, #56]	; 0x38
 8006ece:	e00e      	b.n	8006eee <MOTOR_driver_rotary+0x124>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	2b08      	cmp	r3, #8
 8006ed6:	d105      	bne.n	8006ee4 <MOTOR_driver_rotary+0x11a>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	2300      	movs	r3, #0
 8006ee0:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006ee2:	e004      	b.n	8006eee <MOTOR_driver_rotary+0x124>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	2300      	movs	r3, #0
 8006eec:	6413      	str	r3, [r2, #64]	; 0x40
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)-duty);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10d      	bne.n	8006f12 <MOTOR_driver_rotary+0x148>
 8006ef6:	edd7 7a00 	vldr	s15, [r7]
 8006efa:	eef1 7a67 	vneg.f32	s15, s15
 8006efe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f02:	ee17 3a90 	vmov	r3, s15
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006f10:	e034      	b.n	8006f7c <MOTOR_driver_rotary+0x1b2>
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)-duty);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	695b      	ldr	r3, [r3, #20]
 8006f16:	2b04      	cmp	r3, #4
 8006f18:	d10e      	bne.n	8006f38 <MOTOR_driver_rotary+0x16e>
 8006f1a:	edd7 7a00 	vldr	s15, [r7]
 8006f1e:	eef1 7a67 	vneg.f32	s15, s15
 8006f22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f26:	ee17 3a90 	vmov	r3, s15
 8006f2a:	b299      	uxth	r1, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	460b      	mov	r3, r1
 8006f34:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006f36:	e021      	b.n	8006f7c <MOTOR_driver_rotary+0x1b2>
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)-duty);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	695b      	ldr	r3, [r3, #20]
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	d10e      	bne.n	8006f5e <MOTOR_driver_rotary+0x194>
 8006f40:	edd7 7a00 	vldr	s15, [r7]
 8006f44:	eef1 7a67 	vneg.f32	s15, s15
 8006f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f4c:	ee17 3a90 	vmov	r3, s15
 8006f50:	b299      	uxth	r1, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	460b      	mov	r3, r1
 8006f5a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8006f5c:	e00e      	b.n	8006f7c <MOTOR_driver_rotary+0x1b2>
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)-duty);
 8006f5e:	edd7 7a00 	vldr	s15, [r7]
 8006f62:	eef1 7a67 	vneg.f32	s15, s15
 8006f66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f6a:	ee17 3a90 	vmov	r3, s15
 8006f6e:	b299      	uxth	r1, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	460b      	mov	r3, r1
 8006f78:	6413      	str	r3, [r2, #64]	; 0x40
}
 8006f7a:	e7ff      	b.n	8006f7c <MOTOR_driver_rotary+0x1b2>
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <MOTOR_driver_readPosAndSpeed>:
void MOTOR_driver_readPosAndSpeed(MOTOR_DRIVER_t* motor, float* pos, float* speed, float Ts)
{
 8006f88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006f8c:	b084      	sub	sp, #16
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	60f8      	str	r0, [r7, #12]
 8006f92:	60b9      	str	r1, [r7, #8]
 8006f94:	607a      	str	r2, [r7, #4]
 8006f96:	ed87 0a00 	vstr	s0, [r7]
    motor->EncCount += (int16_t)motor->htimENC->Instance->CNT; // Đọc xung encoder
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa2:	b219      	sxth	r1, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006faa:	b209      	sxth	r1, r1
 8006fac:	17c8      	asrs	r0, r1, #31
 8006fae:	460c      	mov	r4, r1
 8006fb0:	4605      	mov	r5, r0
 8006fb2:	eb12 0804 	adds.w	r8, r2, r4
 8006fb6:	eb43 0905 	adc.w	r9, r3, r5
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	e9c3 8902 	strd	r8, r9, [r3, #8]
    __HAL_TIM_SET_COUNTER(motor->htimENC, 0); // Reset xung encoder
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	625a      	str	r2, [r3, #36]	; 0x24

    *pos = motor->pos = (float)motor->EncCount / motor->ratio; // Tính góc hiện tại của trục động cơ 
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	f7f9 ff28 	bl	8000e28 <__aeabi_l2f>
 8006fd8:	ee06 0a90 	vmov	s13, r0
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8006fe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	601a      	str	r2, [r3, #0]
    *speed = motor->speed = (motor->pos - motor->prePos) * 1000 / Ts; // tính vận tốc xoay góc
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8007000:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007004:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8007034 <MOTOR_driver_readPosAndSpeed+0xac>
 8007008:	ee67 6a87 	vmul.f32	s13, s15, s14
 800700c:	ed97 7a00 	vldr	s14, [r7]
 8007010:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	edc3 7a08 	vstr	s15, [r3, #32]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6a1a      	ldr	r2, [r3, #32]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	601a      	str	r2, [r3, #0]
    motor->prePos = motor->pos;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800702a:	bf00      	nop
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007034:	447a0000 	.word	0x447a0000

08007038 <MOTOR_driver_reset>:
void MOTOR_driver_reset(MOTOR_DRIVER_t* motor)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
	motor->EncCount = 0;
 8007040:	6879      	ldr	r1, [r7, #4]
 8007042:	f04f 0200 	mov.w	r2, #0
 8007046:	f04f 0300 	mov.w	r3, #0
 800704a:	e9c1 2302 	strd	r2, r3, [r1, #8]
    motor->pos = 0;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f04f 0200 	mov.w	r2, #0
 8007054:	625a      	str	r2, [r3, #36]	; 0x24
    motor->prePos = 0;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f04f 0200 	mov.w	r2, #0
 800705c:	62da      	str	r2, [r3, #44]	; 0x2c
    motor->speed = 0;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f04f 0200 	mov.w	r2, #0
 8007064:	621a      	str	r2, [r3, #32]
    motor->preSpeed = 0;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f04f 0200 	mov.w	r2, #0
 800706c:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_TIM_SET_COUNTER(motor->htimENC, 0);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2200      	movs	r2, #0
 8007076:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <MOTOR_setPIDVelocity>:
 *  Created on: Nov 20, 2023
 *      Author: minht
 */
#include "MOTOR_PID_CONTROL.h"
void MOTOR_setPIDVelocity(MOTOR_t* motor, float Kp, float Ki, float Kd, float Ts)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b086      	sub	sp, #24
 8007088:	af00      	add	r7, sp, #0
 800708a:	6178      	str	r0, [r7, #20]
 800708c:	ed87 0a04 	vstr	s0, [r7, #16]
 8007090:	edc7 0a03 	vstr	s1, [r7, #12]
 8007094:	ed87 1a02 	vstr	s2, [r7, #8]
 8007098:	edc7 1a01 	vstr	s3, [r7, #4]
    PID_init(&motor->PIDVelocity, Kp, Ki, Kd, Ts);
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	edd7 1a01 	vldr	s3, [r7, #4]
 80070a2:	ed97 1a02 	vldr	s2, [r7, #8]
 80070a6:	edd7 0a03 	vldr	s1, [r7, #12]
 80070aa:	ed97 0a04 	vldr	s0, [r7, #16]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f000 f9a3 	bl	80073fa <PID_init>
}
 80070b4:	bf00      	nop
 80070b6:	3718      	adds	r7, #24
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <MOTOR_setPIDPosition>:
void MOTOR_setPIDPosition(MOTOR_t* motor, float Kp, float Ki, float Kd, float Ts)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6178      	str	r0, [r7, #20]
 80070c4:	ed87 0a04 	vstr	s0, [r7, #16]
 80070c8:	edc7 0a03 	vstr	s1, [r7, #12]
 80070cc:	ed87 1a02 	vstr	s2, [r7, #8]
 80070d0:	edc7 1a01 	vstr	s3, [r7, #4]
    PID_init(&motor->PIDPosition, Kp, Ki, Kd, Ts);
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	3348      	adds	r3, #72	; 0x48
 80070d8:	edd7 1a01 	vldr	s3, [r7, #4]
 80070dc:	ed97 1a02 	vldr	s2, [r7, #8]
 80070e0:	edd7 0a03 	vldr	s1, [r7, #12]
 80070e4:	ed97 0a04 	vldr	s0, [r7, #16]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f000 f986 	bl	80073fa <PID_init>
}
 80070ee:	bf00      	nop
 80070f0:	3718      	adds	r7, #24
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
	...

080070f8 <MOTOR_setOutputRange>:
void MOTOR_setOutputRange(MOTOR_t* motor, float OutMin, float OutMax)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	ed87 0a02 	vstr	s0, [r7, #8]
 8007104:	edc7 0a01 	vstr	s1, [r7, #4]
    PID_setOutputRange(&motor->PIDPosition, -500, 500);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	3348      	adds	r3, #72	; 0x48
 800710c:	eddf 0a09 	vldr	s1, [pc, #36]	; 8007134 <MOTOR_setOutputRange+0x3c>
 8007110:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8007138 <MOTOR_setOutputRange+0x40>
 8007114:	4618      	mov	r0, r3
 8007116:	f000 f9ad 	bl	8007474 <PID_setOutputRange>
    PID_setOutputRange(&motor->PIDVelocity, OutMin, OutMax);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	edd7 0a01 	vldr	s1, [r7, #4]
 8007120:	ed97 0a02 	vldr	s0, [r7, #8]
 8007124:	4618      	mov	r0, r3
 8007126:	f000 f9a5 	bl	8007474 <PID_setOutputRange>
}
 800712a:	bf00      	nop
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	43fa0000 	.word	0x43fa0000
 8007138:	c3fa0000 	.word	0xc3fa0000

0800713c <MOTOR_setWindupRange>:
void MOTOR_setWindupRange(MOTOR_t* motor, float OutMin, float OutMax)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	ed87 0a02 	vstr	s0, [r7, #8]
 8007148:	edc7 0a01 	vstr	s1, [r7, #4]
    PID_setWindupGain(&motor->PIDVelocity, 0);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8007170 <MOTOR_setWindupRange+0x34>
 8007152:	4618      	mov	r0, r3
 8007154:	f000 f9b6 	bl	80074c4 <PID_setWindupGain>
    PID_setWindupRange(&motor->PIDVelocity, OutMin, OutMax);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	edd7 0a01 	vldr	s1, [r7, #4]
 800715e:	ed97 0a02 	vldr	s0, [r7, #8]
 8007162:	4618      	mov	r0, r3
 8007164:	f000 f99a 	bl	800749c <PID_setWindupRange>
}
 8007168:	bf00      	nop
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	00000000 	.word	0x00000000

08007174 <MOTOR_setAngle>:
void MOTOR_setAngle(MOTOR_t* motor, float setAngle)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	ed87 0a00 	vstr	s0, [r7]
    motor->setPoint = setAngle * motor->ratioJoint;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8007186:	edd7 7a00 	vldr	s15, [r7]
 800718a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <MOTOR_runAngle>:
void MOTOR_runAngle(MOTOR_t* motor)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
    if (motor->setPoint != motor->preSetPoint)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80071b4:	eeb4 7a67 	vcmp.f32	s14, s15
 80071b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071bc:	d00e      	beq.n	80071dc <MOTOR_runAngle+0x3c>
    {
        PID_clear(&motor->PIDPosition);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	3348      	adds	r3, #72	; 0x48
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 f938 	bl	8007438 <PID_clear>
        PID_clear(&motor->PIDVelocity);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 f934 	bl	8007438 <PID_clear>
        motor->preSetPoint = motor->setPoint;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
    MOTOR_driver_readPosAndSpeed(motor->motorDriver, &motor->pos, &motor->speed, motor->PIDPosition.Sample_time);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f103 01ac 	add.w	r1, r3, #172	; 0xac
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80071f4:	eeb0 0a67 	vmov.f32	s0, s15
 80071f8:	f7ff fec6 	bl	8006f88 <MOTOR_driver_readPosAndSpeed>
    motor->error = motor->setPoint - motor->pos;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8007208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
//    motor->error = motor->setPoint;

    // PD+PI controller
    PID_compute(&motor->PIDPosition, motor->error);  // tinh PD
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800721e:	eeb0 0a67 	vmov.f32	s0, s15
 8007222:	4610      	mov	r0, r2
 8007224:	f000 f95e 	bl	80074e4 <PID_compute>
    PID_compute(&motor->PIDVelocity, motor->PIDPosition.Output - motor->speed); // tinh PI
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8007236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800723a:	eeb0 0a67 	vmov.f32	s0, s15
 800723e:	4610      	mov	r0, r2
 8007240:	f000 f950 	bl	80074e4 <PID_compute>

    if (fabs(motor->pos) < motor->limitPos)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 800724a:	eeb0 7ae7 	vabs.f32	s14, s15
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8007254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800725c:	d50b      	bpl.n	8007276 <MOTOR_runAngle+0xd6>
    {
        MOTOR_driver_rotary(motor->motorDriver, motor->PIDVelocity.Output);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800726a:	eeb0 0a67 	vmov.f32	s0, s15
 800726e:	4610      	mov	r0, r2
 8007270:	f7ff fdab 	bl	8006dca <MOTOR_driver_rotary>
    }
    else
    {
        MOTOR_driver_rotary(motor->motorDriver, 0);
    }
}
 8007274:	e007      	b.n	8007286 <MOTOR_runAngle+0xe6>
        MOTOR_driver_rotary(motor->motorDriver, 0);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800727c:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8007290 <MOTOR_runAngle+0xf0>
 8007280:	4618      	mov	r0, r3
 8007282:	f7ff fda2 	bl	8006dca <MOTOR_driver_rotary>
}
 8007286:	bf00      	nop
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	00000000 	.word	0x00000000

08007294 <MOTOR_init>:
void MOTOR_init(MOTOR_t* motor, MOTOR_DRIVER_t *motorDriver,float ratio, uint16_t pinSetHome, float limitPos)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	6178      	str	r0, [r7, #20]
 800729c:	6139      	str	r1, [r7, #16]
 800729e:	ed87 0a03 	vstr	s0, [r7, #12]
 80072a2:	4613      	mov	r3, r2
 80072a4:	edc7 0a01 	vstr	s1, [r7, #4]
 80072a8:	817b      	strh	r3, [r7, #10]
    motor->ratioJoint = ratio;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    motor->pinSetHome = 0;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
    motor->setPoint = 0;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	f04f 0200 	mov.w	r2, #0
 80072c0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    motor->preSetPoint = 0;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f04f 0200 	mov.w	r2, #0
 80072ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    motor->error = 0;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f04f 0200 	mov.w	r2, #0
 80072d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    motor->preError = 0;
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	f04f 0200 	mov.w	r2, #0
 80072de:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    motor->pos = 0;
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f04f 0200 	mov.w	r2, #0
 80072e8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    motor->speed = 0;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	f04f 0200 	mov.w	r2, #0
 80072f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    motor->motorDriver = motorDriver;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    motor->limitPos = limitPos * motor->ratioJoint;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8007304:	edd7 7a01 	vldr	s15, [r7, #4]
 8007308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
    MOTOR_driver_setupPWM(motor->motorDriver, motor->motorDriver->htimPWM, motor->motorDriver->PWM_CH1, motor->motorDriver->PWM_CH2);
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800731e:	6859      	ldr	r1, [r3, #4]
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007326:	691a      	ldr	r2, [r3, #16]
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800732e:	695b      	ldr	r3, [r3, #20]
 8007330:	f7ff fd06 	bl	8006d40 <MOTOR_driver_setupPWM>
    MOTOR_driver_setupENCODER(motor->motorDriver, motor->motorDriver->htimENC, motor->motorDriver->ENC_CH1, motor->motorDriver->ENC_CH2);
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007340:	6819      	ldr	r1, [r3, #0]
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007348:	699a      	ldr	r2, [r3, #24]
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	f7ff fd19 	bl	8006d88 <MOTOR_driver_setupENCODER>
}
 8007356:	bf00      	nop
 8007358:	3718      	adds	r7, #24
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <MOTOR_reset>:
void MOTOR_reset(MOTOR_t* motor)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b082      	sub	sp, #8
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
    motor->pinSetHome = 0;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
    motor->setPoint = 0;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f04f 0200 	mov.w	r2, #0
 8007374:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    motor->preSetPoint = 0;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f04f 0200 	mov.w	r2, #0
 800737e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    motor->error = 0;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f04f 0200 	mov.w	r2, #0
 8007388:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    motor->preError = 0;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f04f 0200 	mov.w	r2, #0
 8007392:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    motor->pos = 0;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f04f 0200 	mov.w	r2, #0
 800739c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    motor->speed = 0;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f04f 0200 	mov.w	r2, #0
 80073a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    MOTOR_driver_reset(motor->motorDriver);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7ff fe41 	bl	8007038 <MOTOR_driver_reset>
    PID_clear(&motor->PIDPosition);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	3348      	adds	r3, #72	; 0x48
 80073ba:	4618      	mov	r0, r3
 80073bc:	f000 f83c 	bl	8007438 <PID_clear>
    PID_clear(&motor->PIDVelocity);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 f838 	bl	8007438 <PID_clear>
}
 80073c8:	bf00      	nop
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <MOTOR_getPos>:
float MOTOR_getPos(MOTOR_t* motor)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
	return motor->pos/motor->ratioJoint;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 80073e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80073e8:	eef0 7a66 	vmov.f32	s15, s13
}
 80073ec:	eeb0 0a67 	vmov.f32	s0, s15
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <PID_init>:
 *      Author: minht
 */
#include "PID.h"
#include "stdint.h"
void PID_init(PID_TypeDef* pid, float Kp, float Ki, float Kd, float Sample_time)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b086      	sub	sp, #24
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6178      	str	r0, [r7, #20]
 8007402:	ed87 0a04 	vstr	s0, [r7, #16]
 8007406:	edc7 0a03 	vstr	s1, [r7, #12]
 800740a:	ed87 1a02 	vstr	s2, [r7, #8]
 800740e:	edc7 1a01 	vstr	s3, [r7, #4]
	PID_clear(pid);
 8007412:	6978      	ldr	r0, [r7, #20]
 8007414:	f000 f810 	bl	8007438 <PID_clear>
	pid->Kp = Kp;
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	605a      	str	r2, [r3, #4]
	pid->Kd = Kd;
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	609a      	str	r2, [r3, #8]
	pid->Sample_time = Sample_time;
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8007430:	bf00      	nop
 8007432:	3718      	adds	r7, #24
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <PID_clear>:
void PID_clear(PID_TypeDef* pid)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
	pid->PTerm = 0;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f04f 0200 	mov.w	r2, #0
 8007446:	61da      	str	r2, [r3, #28]
	pid->ITerm = 0;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f04f 0200 	mov.w	r2, #0
 800744e:	621a      	str	r2, [r3, #32]
	pid->DTerm = 0;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f04f 0200 	mov.w	r2, #0
 8007456:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Output = 0;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f04f 0200 	mov.w	r2, #0
 800745e:	639a      	str	r2, [r3, #56]	; 0x38
	pid->FeedbackWindup = 0;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f04f 0200 	mov.w	r2, #0
 8007466:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007468:	bf00      	nop
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <PID_setOutputRange>:
void PID_setKp(PID_TypeDef* pid, float value) { pid->Kp = value; }
void PID_setKi(PID_TypeDef* pid, float value) { pid->Ki = value; }
void PID_setKd(PID_TypeDef* pid, float value) { pid->Kd = value; }
void PID_setSampleTime(PID_TypeDef* pid, float value) { pid->Sample_time = value; }
void PID_setOutputRange(PID_TypeDef* pid, float valueMin, float valueMax)
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	ed87 0a02 	vstr	s0, [r7, #8]
 8007480:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->OutMax = valueMax;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	63da      	str	r2, [r3, #60]	; 0x3c
	pid->OutMin = valueMin;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007490:	bf00      	nop
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <PID_setWindupRange>:
void PID_setWindupRange(PID_TypeDef* pid, float valueMin, float valueMax)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80074a8:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->WindupMax = valueMax;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	629a      	str	r2, [r3, #40]	; 0x28
	pid->WindupMin = valueMin;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80074b8:	bf00      	nop
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <PID_setWindupGain>:
void PID_setWindupGain(PID_TypeDef* pid, float value)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	ed87 0a00 	vstr	s0, [r7]
	pid->Kb = value;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	60da      	str	r2, [r3, #12]
}
 80074d6:	bf00      	nop
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
	...

080074e4 <PID_compute>:
float PID_compute(PID_TypeDef* pid, float Error)
{
 80074e4:	b5b0      	push	{r4, r5, r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	ed87 0a00 	vstr	s0, [r7]

	pid->PTerm = pid->Kp * Error;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	ed93 7a00 	vldr	s14, [r3]
 80074f6:	edd7 7a00 	vldr	s15, [r7]
 80074fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	edc3 7a07 	vstr	s15, [r3, #28]

	pid->ITerm += ((Error + pid->Last_error)* pid->Ki * 0.5 + pid->FeedbackWindup * pid->Kb) * (pid->Sample_time / 1000.0);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	ed93 7a05 	vldr	s14, [r3, #20]
 800750a:	edd7 7a00 	vldr	s15, [r7]
 800750e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	edd3 7a01 	vldr	s15, [r3, #4]
 8007518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800751c:	ee17 0a90 	vmov	r0, s15
 8007520:	f7f9 f812 	bl	8000548 <__aeabi_f2d>
 8007524:	f04f 0200 	mov.w	r2, #0
 8007528:	4b75      	ldr	r3, [pc, #468]	; (8007700 <PID_compute+0x21c>)
 800752a:	f7f9 f865 	bl	80005f8 <__aeabi_dmul>
 800752e:	4602      	mov	r2, r0
 8007530:	460b      	mov	r3, r1
 8007532:	4614      	mov	r4, r2
 8007534:	461d      	mov	r5, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	edd3 7a03 	vldr	s15, [r3, #12]
 8007542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007546:	ee17 0a90 	vmov	r0, s15
 800754a:	f7f8 fffd 	bl	8000548 <__aeabi_f2d>
 800754e:	4602      	mov	r2, r0
 8007550:	460b      	mov	r3, r1
 8007552:	4620      	mov	r0, r4
 8007554:	4629      	mov	r1, r5
 8007556:	f7f8 fe99 	bl	800028c <__adddf3>
 800755a:	4602      	mov	r2, r0
 800755c:	460b      	mov	r3, r1
 800755e:	4614      	mov	r4, r2
 8007560:	461d      	mov	r5, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007566:	4618      	mov	r0, r3
 8007568:	f7f8 ffee 	bl	8000548 <__aeabi_f2d>
 800756c:	f04f 0200 	mov.w	r2, #0
 8007570:	4b64      	ldr	r3, [pc, #400]	; (8007704 <PID_compute+0x220>)
 8007572:	f7f9 f96b 	bl	800084c <__aeabi_ddiv>
 8007576:	4602      	mov	r2, r0
 8007578:	460b      	mov	r3, r1
 800757a:	4620      	mov	r0, r4
 800757c:	4629      	mov	r1, r5
 800757e:	f7f9 f83b 	bl	80005f8 <__aeabi_dmul>
 8007582:	4602      	mov	r2, r0
 8007584:	460b      	mov	r3, r1
 8007586:	4614      	mov	r4, r2
 8007588:	461d      	mov	r5, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	4618      	mov	r0, r3
 8007590:	f7f8 ffda 	bl	8000548 <__aeabi_f2d>
 8007594:	4602      	mov	r2, r0
 8007596:	460b      	mov	r3, r1
 8007598:	4620      	mov	r0, r4
 800759a:	4629      	mov	r1, r5
 800759c:	f7f8 fe76 	bl	800028c <__adddf3>
 80075a0:	4602      	mov	r2, r0
 80075a2:	460b      	mov	r3, r1
 80075a4:	4610      	mov	r0, r2
 80075a6:	4619      	mov	r1, r3
 80075a8:	f7f9 fb1e 	bl	8000be8 <__aeabi_d2f>
 80075ac:	4602      	mov	r2, r0
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	621a      	str	r2, [r3, #32]
	if (pid->ITerm > pid->WindupMax) pid->ITerm = pid->WindupMax;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	ed93 7a08 	vldr	s14, [r3, #32]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80075be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80075c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075c6:	dd04      	ble.n	80075d2 <PID_compute+0xee>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	621a      	str	r2, [r3, #32]
 80075d0:	e00e      	b.n	80075f0 <PID_compute+0x10c>
	else if (pid->ITerm < pid->WindupMin) pid->ITerm = pid->WindupMin;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	ed93 7a08 	vldr	s14, [r3, #32]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80075de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80075e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075e6:	d503      	bpl.n	80075f0 <PID_compute+0x10c>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	621a      	str	r2, [r3, #32]

	pid->Delta_error = Error - pid->Last_error;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	edd3 7a05 	vldr	s15, [r3, #20]
 80075f6:	ed97 7a00 	vldr	s14, [r7]
 80075fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->DTerm = pid->Kd * pid->Delta_error / (pid->Sample_time / 1000.0);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	ed93 7a02 	vldr	s14, [r3, #8]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007614:	ee17 0a90 	vmov	r0, s15
 8007618:	f7f8 ff96 	bl	8000548 <__aeabi_f2d>
 800761c:	4604      	mov	r4, r0
 800761e:	460d      	mov	r5, r1
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007624:	4618      	mov	r0, r3
 8007626:	f7f8 ff8f 	bl	8000548 <__aeabi_f2d>
 800762a:	f04f 0200 	mov.w	r2, #0
 800762e:	4b35      	ldr	r3, [pc, #212]	; (8007704 <PID_compute+0x220>)
 8007630:	f7f9 f90c 	bl	800084c <__aeabi_ddiv>
 8007634:	4602      	mov	r2, r0
 8007636:	460b      	mov	r3, r1
 8007638:	4620      	mov	r0, r4
 800763a:	4629      	mov	r1, r5
 800763c:	f7f9 f906 	bl	800084c <__aeabi_ddiv>
 8007640:	4602      	mov	r2, r0
 8007642:	460b      	mov	r3, r1
 8007644:	4610      	mov	r0, r2
 8007646:	4619      	mov	r1, r3
 8007648:	f7f9 face 	bl	8000be8 <__aeabi_d2f>
 800764c:	4602      	mov	r2, r0
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Last_error = Error;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	683a      	ldr	r2, [r7, #0]
 8007656:	615a      	str	r2, [r3, #20]

	pid->Output = pid->PTerm + pid->ITerm + pid->DTerm;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	ed93 7a07 	vldr	s14, [r3, #28]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	edd3 7a08 	vldr	s15, [r3, #32]
 8007664:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800766e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	if (pid->Output > pid->OutMax)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8007684:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800768c:	dd0f      	ble.n	80076ae <PID_compute+0x1ca>
	{
		pid->FeedbackWindup = pid->Output - pid->OutMax;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800769a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		pid->Output = pid->OutMax;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	639a      	str	r2, [r3, #56]	; 0x38
 80076ac:	e01e      	b.n	80076ec <PID_compute+0x208>
	}
	else if (pid->Output < pid->OutMin)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80076ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80076be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076c2:	d50f      	bpl.n	80076e4 <PID_compute+0x200>
	{
		pid->FeedbackWindup = pid->Output - pid->OutMin;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80076d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		pid->Output = pid->OutMin;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	639a      	str	r2, [r3, #56]	; 0x38
 80076e2:	e003      	b.n	80076ec <PID_compute+0x208>
	}
	else
	{
		pid->FeedbackWindup = 0;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f04f 0200 	mov.w	r2, #0
 80076ea:	631a      	str	r2, [r3, #48]	; 0x30
	}
	return pid->Output;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f0:	ee07 3a90 	vmov	s15, r3
}
 80076f4:	eeb0 0a67 	vmov.f32	s0, s15
 80076f8:	3708      	adds	r7, #8
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bdb0      	pop	{r4, r5, r7, pc}
 80076fe:	bf00      	nop
 8007700:	3fe00000 	.word	0x3fe00000
 8007704:	408f4000 	.word	0x408f4000

08007708 <__errno>:
 8007708:	4b01      	ldr	r3, [pc, #4]	; (8007710 <__errno+0x8>)
 800770a:	6818      	ldr	r0, [r3, #0]
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	200000ec 	.word	0x200000ec

08007714 <__libc_init_array>:
 8007714:	b570      	push	{r4, r5, r6, lr}
 8007716:	4d0d      	ldr	r5, [pc, #52]	; (800774c <__libc_init_array+0x38>)
 8007718:	4c0d      	ldr	r4, [pc, #52]	; (8007750 <__libc_init_array+0x3c>)
 800771a:	1b64      	subs	r4, r4, r5
 800771c:	10a4      	asrs	r4, r4, #2
 800771e:	2600      	movs	r6, #0
 8007720:	42a6      	cmp	r6, r4
 8007722:	d109      	bne.n	8007738 <__libc_init_array+0x24>
 8007724:	4d0b      	ldr	r5, [pc, #44]	; (8007754 <__libc_init_array+0x40>)
 8007726:	4c0c      	ldr	r4, [pc, #48]	; (8007758 <__libc_init_array+0x44>)
 8007728:	f005 f8ec 	bl	800c904 <_init>
 800772c:	1b64      	subs	r4, r4, r5
 800772e:	10a4      	asrs	r4, r4, #2
 8007730:	2600      	movs	r6, #0
 8007732:	42a6      	cmp	r6, r4
 8007734:	d105      	bne.n	8007742 <__libc_init_array+0x2e>
 8007736:	bd70      	pop	{r4, r5, r6, pc}
 8007738:	f855 3b04 	ldr.w	r3, [r5], #4
 800773c:	4798      	blx	r3
 800773e:	3601      	adds	r6, #1
 8007740:	e7ee      	b.n	8007720 <__libc_init_array+0xc>
 8007742:	f855 3b04 	ldr.w	r3, [r5], #4
 8007746:	4798      	blx	r3
 8007748:	3601      	adds	r6, #1
 800774a:	e7f2      	b.n	8007732 <__libc_init_array+0x1e>
 800774c:	0800ce64 	.word	0x0800ce64
 8007750:	0800ce64 	.word	0x0800ce64
 8007754:	0800ce64 	.word	0x0800ce64
 8007758:	0800ce68 	.word	0x0800ce68

0800775c <memset>:
 800775c:	4402      	add	r2, r0
 800775e:	4603      	mov	r3, r0
 8007760:	4293      	cmp	r3, r2
 8007762:	d100      	bne.n	8007766 <memset+0xa>
 8007764:	4770      	bx	lr
 8007766:	f803 1b01 	strb.w	r1, [r3], #1
 800776a:	e7f9      	b.n	8007760 <memset+0x4>

0800776c <__cvt>:
 800776c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007770:	ec55 4b10 	vmov	r4, r5, d0
 8007774:	2d00      	cmp	r5, #0
 8007776:	460e      	mov	r6, r1
 8007778:	4619      	mov	r1, r3
 800777a:	462b      	mov	r3, r5
 800777c:	bfbb      	ittet	lt
 800777e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007782:	461d      	movlt	r5, r3
 8007784:	2300      	movge	r3, #0
 8007786:	232d      	movlt	r3, #45	; 0x2d
 8007788:	700b      	strb	r3, [r1, #0]
 800778a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800778c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007790:	4691      	mov	r9, r2
 8007792:	f023 0820 	bic.w	r8, r3, #32
 8007796:	bfbc      	itt	lt
 8007798:	4622      	movlt	r2, r4
 800779a:	4614      	movlt	r4, r2
 800779c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077a0:	d005      	beq.n	80077ae <__cvt+0x42>
 80077a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80077a6:	d100      	bne.n	80077aa <__cvt+0x3e>
 80077a8:	3601      	adds	r6, #1
 80077aa:	2102      	movs	r1, #2
 80077ac:	e000      	b.n	80077b0 <__cvt+0x44>
 80077ae:	2103      	movs	r1, #3
 80077b0:	ab03      	add	r3, sp, #12
 80077b2:	9301      	str	r3, [sp, #4]
 80077b4:	ab02      	add	r3, sp, #8
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	ec45 4b10 	vmov	d0, r4, r5
 80077bc:	4653      	mov	r3, sl
 80077be:	4632      	mov	r2, r6
 80077c0:	f001 fe66 	bl	8009490 <_dtoa_r>
 80077c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80077c8:	4607      	mov	r7, r0
 80077ca:	d102      	bne.n	80077d2 <__cvt+0x66>
 80077cc:	f019 0f01 	tst.w	r9, #1
 80077d0:	d022      	beq.n	8007818 <__cvt+0xac>
 80077d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077d6:	eb07 0906 	add.w	r9, r7, r6
 80077da:	d110      	bne.n	80077fe <__cvt+0x92>
 80077dc:	783b      	ldrb	r3, [r7, #0]
 80077de:	2b30      	cmp	r3, #48	; 0x30
 80077e0:	d10a      	bne.n	80077f8 <__cvt+0x8c>
 80077e2:	2200      	movs	r2, #0
 80077e4:	2300      	movs	r3, #0
 80077e6:	4620      	mov	r0, r4
 80077e8:	4629      	mov	r1, r5
 80077ea:	f7f9 f96d 	bl	8000ac8 <__aeabi_dcmpeq>
 80077ee:	b918      	cbnz	r0, 80077f8 <__cvt+0x8c>
 80077f0:	f1c6 0601 	rsb	r6, r6, #1
 80077f4:	f8ca 6000 	str.w	r6, [sl]
 80077f8:	f8da 3000 	ldr.w	r3, [sl]
 80077fc:	4499      	add	r9, r3
 80077fe:	2200      	movs	r2, #0
 8007800:	2300      	movs	r3, #0
 8007802:	4620      	mov	r0, r4
 8007804:	4629      	mov	r1, r5
 8007806:	f7f9 f95f 	bl	8000ac8 <__aeabi_dcmpeq>
 800780a:	b108      	cbz	r0, 8007810 <__cvt+0xa4>
 800780c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007810:	2230      	movs	r2, #48	; 0x30
 8007812:	9b03      	ldr	r3, [sp, #12]
 8007814:	454b      	cmp	r3, r9
 8007816:	d307      	bcc.n	8007828 <__cvt+0xbc>
 8007818:	9b03      	ldr	r3, [sp, #12]
 800781a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800781c:	1bdb      	subs	r3, r3, r7
 800781e:	4638      	mov	r0, r7
 8007820:	6013      	str	r3, [r2, #0]
 8007822:	b004      	add	sp, #16
 8007824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007828:	1c59      	adds	r1, r3, #1
 800782a:	9103      	str	r1, [sp, #12]
 800782c:	701a      	strb	r2, [r3, #0]
 800782e:	e7f0      	b.n	8007812 <__cvt+0xa6>

08007830 <__exponent>:
 8007830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007832:	4603      	mov	r3, r0
 8007834:	2900      	cmp	r1, #0
 8007836:	bfb8      	it	lt
 8007838:	4249      	neglt	r1, r1
 800783a:	f803 2b02 	strb.w	r2, [r3], #2
 800783e:	bfb4      	ite	lt
 8007840:	222d      	movlt	r2, #45	; 0x2d
 8007842:	222b      	movge	r2, #43	; 0x2b
 8007844:	2909      	cmp	r1, #9
 8007846:	7042      	strb	r2, [r0, #1]
 8007848:	dd2a      	ble.n	80078a0 <__exponent+0x70>
 800784a:	f10d 0407 	add.w	r4, sp, #7
 800784e:	46a4      	mov	ip, r4
 8007850:	270a      	movs	r7, #10
 8007852:	46a6      	mov	lr, r4
 8007854:	460a      	mov	r2, r1
 8007856:	fb91 f6f7 	sdiv	r6, r1, r7
 800785a:	fb07 1516 	mls	r5, r7, r6, r1
 800785e:	3530      	adds	r5, #48	; 0x30
 8007860:	2a63      	cmp	r2, #99	; 0x63
 8007862:	f104 34ff 	add.w	r4, r4, #4294967295
 8007866:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800786a:	4631      	mov	r1, r6
 800786c:	dcf1      	bgt.n	8007852 <__exponent+0x22>
 800786e:	3130      	adds	r1, #48	; 0x30
 8007870:	f1ae 0502 	sub.w	r5, lr, #2
 8007874:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007878:	1c44      	adds	r4, r0, #1
 800787a:	4629      	mov	r1, r5
 800787c:	4561      	cmp	r1, ip
 800787e:	d30a      	bcc.n	8007896 <__exponent+0x66>
 8007880:	f10d 0209 	add.w	r2, sp, #9
 8007884:	eba2 020e 	sub.w	r2, r2, lr
 8007888:	4565      	cmp	r5, ip
 800788a:	bf88      	it	hi
 800788c:	2200      	movhi	r2, #0
 800788e:	4413      	add	r3, r2
 8007890:	1a18      	subs	r0, r3, r0
 8007892:	b003      	add	sp, #12
 8007894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007896:	f811 2b01 	ldrb.w	r2, [r1], #1
 800789a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800789e:	e7ed      	b.n	800787c <__exponent+0x4c>
 80078a0:	2330      	movs	r3, #48	; 0x30
 80078a2:	3130      	adds	r1, #48	; 0x30
 80078a4:	7083      	strb	r3, [r0, #2]
 80078a6:	70c1      	strb	r1, [r0, #3]
 80078a8:	1d03      	adds	r3, r0, #4
 80078aa:	e7f1      	b.n	8007890 <__exponent+0x60>

080078ac <_printf_float>:
 80078ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b0:	ed2d 8b02 	vpush	{d8}
 80078b4:	b08d      	sub	sp, #52	; 0x34
 80078b6:	460c      	mov	r4, r1
 80078b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80078bc:	4616      	mov	r6, r2
 80078be:	461f      	mov	r7, r3
 80078c0:	4605      	mov	r5, r0
 80078c2:	f002 ff43 	bl	800a74c <_localeconv_r>
 80078c6:	f8d0 a000 	ldr.w	sl, [r0]
 80078ca:	4650      	mov	r0, sl
 80078cc:	f7f8 fc80 	bl	80001d0 <strlen>
 80078d0:	2300      	movs	r3, #0
 80078d2:	930a      	str	r3, [sp, #40]	; 0x28
 80078d4:	6823      	ldr	r3, [r4, #0]
 80078d6:	9305      	str	r3, [sp, #20]
 80078d8:	f8d8 3000 	ldr.w	r3, [r8]
 80078dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80078e0:	3307      	adds	r3, #7
 80078e2:	f023 0307 	bic.w	r3, r3, #7
 80078e6:	f103 0208 	add.w	r2, r3, #8
 80078ea:	f8c8 2000 	str.w	r2, [r8]
 80078ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80078f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80078fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80078fe:	9307      	str	r3, [sp, #28]
 8007900:	f8cd 8018 	str.w	r8, [sp, #24]
 8007904:	ee08 0a10 	vmov	s16, r0
 8007908:	4b9f      	ldr	r3, [pc, #636]	; (8007b88 <_printf_float+0x2dc>)
 800790a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800790e:	f04f 32ff 	mov.w	r2, #4294967295
 8007912:	f7f9 f90b 	bl	8000b2c <__aeabi_dcmpun>
 8007916:	bb88      	cbnz	r0, 800797c <_printf_float+0xd0>
 8007918:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800791c:	4b9a      	ldr	r3, [pc, #616]	; (8007b88 <_printf_float+0x2dc>)
 800791e:	f04f 32ff 	mov.w	r2, #4294967295
 8007922:	f7f9 f8e5 	bl	8000af0 <__aeabi_dcmple>
 8007926:	bb48      	cbnz	r0, 800797c <_printf_float+0xd0>
 8007928:	2200      	movs	r2, #0
 800792a:	2300      	movs	r3, #0
 800792c:	4640      	mov	r0, r8
 800792e:	4649      	mov	r1, r9
 8007930:	f7f9 f8d4 	bl	8000adc <__aeabi_dcmplt>
 8007934:	b110      	cbz	r0, 800793c <_printf_float+0x90>
 8007936:	232d      	movs	r3, #45	; 0x2d
 8007938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800793c:	4b93      	ldr	r3, [pc, #588]	; (8007b8c <_printf_float+0x2e0>)
 800793e:	4894      	ldr	r0, [pc, #592]	; (8007b90 <_printf_float+0x2e4>)
 8007940:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007944:	bf94      	ite	ls
 8007946:	4698      	movls	r8, r3
 8007948:	4680      	movhi	r8, r0
 800794a:	2303      	movs	r3, #3
 800794c:	6123      	str	r3, [r4, #16]
 800794e:	9b05      	ldr	r3, [sp, #20]
 8007950:	f023 0204 	bic.w	r2, r3, #4
 8007954:	6022      	str	r2, [r4, #0]
 8007956:	f04f 0900 	mov.w	r9, #0
 800795a:	9700      	str	r7, [sp, #0]
 800795c:	4633      	mov	r3, r6
 800795e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007960:	4621      	mov	r1, r4
 8007962:	4628      	mov	r0, r5
 8007964:	f000 f9d8 	bl	8007d18 <_printf_common>
 8007968:	3001      	adds	r0, #1
 800796a:	f040 8090 	bne.w	8007a8e <_printf_float+0x1e2>
 800796e:	f04f 30ff 	mov.w	r0, #4294967295
 8007972:	b00d      	add	sp, #52	; 0x34
 8007974:	ecbd 8b02 	vpop	{d8}
 8007978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800797c:	4642      	mov	r2, r8
 800797e:	464b      	mov	r3, r9
 8007980:	4640      	mov	r0, r8
 8007982:	4649      	mov	r1, r9
 8007984:	f7f9 f8d2 	bl	8000b2c <__aeabi_dcmpun>
 8007988:	b140      	cbz	r0, 800799c <_printf_float+0xf0>
 800798a:	464b      	mov	r3, r9
 800798c:	2b00      	cmp	r3, #0
 800798e:	bfbc      	itt	lt
 8007990:	232d      	movlt	r3, #45	; 0x2d
 8007992:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007996:	487f      	ldr	r0, [pc, #508]	; (8007b94 <_printf_float+0x2e8>)
 8007998:	4b7f      	ldr	r3, [pc, #508]	; (8007b98 <_printf_float+0x2ec>)
 800799a:	e7d1      	b.n	8007940 <_printf_float+0x94>
 800799c:	6863      	ldr	r3, [r4, #4]
 800799e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80079a2:	9206      	str	r2, [sp, #24]
 80079a4:	1c5a      	adds	r2, r3, #1
 80079a6:	d13f      	bne.n	8007a28 <_printf_float+0x17c>
 80079a8:	2306      	movs	r3, #6
 80079aa:	6063      	str	r3, [r4, #4]
 80079ac:	9b05      	ldr	r3, [sp, #20]
 80079ae:	6861      	ldr	r1, [r4, #4]
 80079b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80079b4:	2300      	movs	r3, #0
 80079b6:	9303      	str	r3, [sp, #12]
 80079b8:	ab0a      	add	r3, sp, #40	; 0x28
 80079ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80079be:	ab09      	add	r3, sp, #36	; 0x24
 80079c0:	ec49 8b10 	vmov	d0, r8, r9
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	6022      	str	r2, [r4, #0]
 80079c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80079cc:	4628      	mov	r0, r5
 80079ce:	f7ff fecd 	bl	800776c <__cvt>
 80079d2:	9b06      	ldr	r3, [sp, #24]
 80079d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079d6:	2b47      	cmp	r3, #71	; 0x47
 80079d8:	4680      	mov	r8, r0
 80079da:	d108      	bne.n	80079ee <_printf_float+0x142>
 80079dc:	1cc8      	adds	r0, r1, #3
 80079de:	db02      	blt.n	80079e6 <_printf_float+0x13a>
 80079e0:	6863      	ldr	r3, [r4, #4]
 80079e2:	4299      	cmp	r1, r3
 80079e4:	dd41      	ble.n	8007a6a <_printf_float+0x1be>
 80079e6:	f1ab 0b02 	sub.w	fp, fp, #2
 80079ea:	fa5f fb8b 	uxtb.w	fp, fp
 80079ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80079f2:	d820      	bhi.n	8007a36 <_printf_float+0x18a>
 80079f4:	3901      	subs	r1, #1
 80079f6:	465a      	mov	r2, fp
 80079f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80079fc:	9109      	str	r1, [sp, #36]	; 0x24
 80079fe:	f7ff ff17 	bl	8007830 <__exponent>
 8007a02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a04:	1813      	adds	r3, r2, r0
 8007a06:	2a01      	cmp	r2, #1
 8007a08:	4681      	mov	r9, r0
 8007a0a:	6123      	str	r3, [r4, #16]
 8007a0c:	dc02      	bgt.n	8007a14 <_printf_float+0x168>
 8007a0e:	6822      	ldr	r2, [r4, #0]
 8007a10:	07d2      	lsls	r2, r2, #31
 8007a12:	d501      	bpl.n	8007a18 <_printf_float+0x16c>
 8007a14:	3301      	adds	r3, #1
 8007a16:	6123      	str	r3, [r4, #16]
 8007a18:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d09c      	beq.n	800795a <_printf_float+0xae>
 8007a20:	232d      	movs	r3, #45	; 0x2d
 8007a22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a26:	e798      	b.n	800795a <_printf_float+0xae>
 8007a28:	9a06      	ldr	r2, [sp, #24]
 8007a2a:	2a47      	cmp	r2, #71	; 0x47
 8007a2c:	d1be      	bne.n	80079ac <_printf_float+0x100>
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1bc      	bne.n	80079ac <_printf_float+0x100>
 8007a32:	2301      	movs	r3, #1
 8007a34:	e7b9      	b.n	80079aa <_printf_float+0xfe>
 8007a36:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007a3a:	d118      	bne.n	8007a6e <_printf_float+0x1c2>
 8007a3c:	2900      	cmp	r1, #0
 8007a3e:	6863      	ldr	r3, [r4, #4]
 8007a40:	dd0b      	ble.n	8007a5a <_printf_float+0x1ae>
 8007a42:	6121      	str	r1, [r4, #16]
 8007a44:	b913      	cbnz	r3, 8007a4c <_printf_float+0x1a0>
 8007a46:	6822      	ldr	r2, [r4, #0]
 8007a48:	07d0      	lsls	r0, r2, #31
 8007a4a:	d502      	bpl.n	8007a52 <_printf_float+0x1a6>
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	440b      	add	r3, r1
 8007a50:	6123      	str	r3, [r4, #16]
 8007a52:	65a1      	str	r1, [r4, #88]	; 0x58
 8007a54:	f04f 0900 	mov.w	r9, #0
 8007a58:	e7de      	b.n	8007a18 <_printf_float+0x16c>
 8007a5a:	b913      	cbnz	r3, 8007a62 <_printf_float+0x1b6>
 8007a5c:	6822      	ldr	r2, [r4, #0]
 8007a5e:	07d2      	lsls	r2, r2, #31
 8007a60:	d501      	bpl.n	8007a66 <_printf_float+0x1ba>
 8007a62:	3302      	adds	r3, #2
 8007a64:	e7f4      	b.n	8007a50 <_printf_float+0x1a4>
 8007a66:	2301      	movs	r3, #1
 8007a68:	e7f2      	b.n	8007a50 <_printf_float+0x1a4>
 8007a6a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a70:	4299      	cmp	r1, r3
 8007a72:	db05      	blt.n	8007a80 <_printf_float+0x1d4>
 8007a74:	6823      	ldr	r3, [r4, #0]
 8007a76:	6121      	str	r1, [r4, #16]
 8007a78:	07d8      	lsls	r0, r3, #31
 8007a7a:	d5ea      	bpl.n	8007a52 <_printf_float+0x1a6>
 8007a7c:	1c4b      	adds	r3, r1, #1
 8007a7e:	e7e7      	b.n	8007a50 <_printf_float+0x1a4>
 8007a80:	2900      	cmp	r1, #0
 8007a82:	bfd4      	ite	le
 8007a84:	f1c1 0202 	rsble	r2, r1, #2
 8007a88:	2201      	movgt	r2, #1
 8007a8a:	4413      	add	r3, r2
 8007a8c:	e7e0      	b.n	8007a50 <_printf_float+0x1a4>
 8007a8e:	6823      	ldr	r3, [r4, #0]
 8007a90:	055a      	lsls	r2, r3, #21
 8007a92:	d407      	bmi.n	8007aa4 <_printf_float+0x1f8>
 8007a94:	6923      	ldr	r3, [r4, #16]
 8007a96:	4642      	mov	r2, r8
 8007a98:	4631      	mov	r1, r6
 8007a9a:	4628      	mov	r0, r5
 8007a9c:	47b8      	blx	r7
 8007a9e:	3001      	adds	r0, #1
 8007aa0:	d12c      	bne.n	8007afc <_printf_float+0x250>
 8007aa2:	e764      	b.n	800796e <_printf_float+0xc2>
 8007aa4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007aa8:	f240 80e0 	bls.w	8007c6c <_printf_float+0x3c0>
 8007aac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	f7f9 f808 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	d034      	beq.n	8007b26 <_printf_float+0x27a>
 8007abc:	4a37      	ldr	r2, [pc, #220]	; (8007b9c <_printf_float+0x2f0>)
 8007abe:	2301      	movs	r3, #1
 8007ac0:	4631      	mov	r1, r6
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	47b8      	blx	r7
 8007ac6:	3001      	adds	r0, #1
 8007ac8:	f43f af51 	beq.w	800796e <_printf_float+0xc2>
 8007acc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	db02      	blt.n	8007ada <_printf_float+0x22e>
 8007ad4:	6823      	ldr	r3, [r4, #0]
 8007ad6:	07d8      	lsls	r0, r3, #31
 8007ad8:	d510      	bpl.n	8007afc <_printf_float+0x250>
 8007ada:	ee18 3a10 	vmov	r3, s16
 8007ade:	4652      	mov	r2, sl
 8007ae0:	4631      	mov	r1, r6
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	47b8      	blx	r7
 8007ae6:	3001      	adds	r0, #1
 8007ae8:	f43f af41 	beq.w	800796e <_printf_float+0xc2>
 8007aec:	f04f 0800 	mov.w	r8, #0
 8007af0:	f104 091a 	add.w	r9, r4, #26
 8007af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007af6:	3b01      	subs	r3, #1
 8007af8:	4543      	cmp	r3, r8
 8007afa:	dc09      	bgt.n	8007b10 <_printf_float+0x264>
 8007afc:	6823      	ldr	r3, [r4, #0]
 8007afe:	079b      	lsls	r3, r3, #30
 8007b00:	f100 8105 	bmi.w	8007d0e <_printf_float+0x462>
 8007b04:	68e0      	ldr	r0, [r4, #12]
 8007b06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b08:	4298      	cmp	r0, r3
 8007b0a:	bfb8      	it	lt
 8007b0c:	4618      	movlt	r0, r3
 8007b0e:	e730      	b.n	8007972 <_printf_float+0xc6>
 8007b10:	2301      	movs	r3, #1
 8007b12:	464a      	mov	r2, r9
 8007b14:	4631      	mov	r1, r6
 8007b16:	4628      	mov	r0, r5
 8007b18:	47b8      	blx	r7
 8007b1a:	3001      	adds	r0, #1
 8007b1c:	f43f af27 	beq.w	800796e <_printf_float+0xc2>
 8007b20:	f108 0801 	add.w	r8, r8, #1
 8007b24:	e7e6      	b.n	8007af4 <_printf_float+0x248>
 8007b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	dc39      	bgt.n	8007ba0 <_printf_float+0x2f4>
 8007b2c:	4a1b      	ldr	r2, [pc, #108]	; (8007b9c <_printf_float+0x2f0>)
 8007b2e:	2301      	movs	r3, #1
 8007b30:	4631      	mov	r1, r6
 8007b32:	4628      	mov	r0, r5
 8007b34:	47b8      	blx	r7
 8007b36:	3001      	adds	r0, #1
 8007b38:	f43f af19 	beq.w	800796e <_printf_float+0xc2>
 8007b3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b40:	4313      	orrs	r3, r2
 8007b42:	d102      	bne.n	8007b4a <_printf_float+0x29e>
 8007b44:	6823      	ldr	r3, [r4, #0]
 8007b46:	07d9      	lsls	r1, r3, #31
 8007b48:	d5d8      	bpl.n	8007afc <_printf_float+0x250>
 8007b4a:	ee18 3a10 	vmov	r3, s16
 8007b4e:	4652      	mov	r2, sl
 8007b50:	4631      	mov	r1, r6
 8007b52:	4628      	mov	r0, r5
 8007b54:	47b8      	blx	r7
 8007b56:	3001      	adds	r0, #1
 8007b58:	f43f af09 	beq.w	800796e <_printf_float+0xc2>
 8007b5c:	f04f 0900 	mov.w	r9, #0
 8007b60:	f104 0a1a 	add.w	sl, r4, #26
 8007b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b66:	425b      	negs	r3, r3
 8007b68:	454b      	cmp	r3, r9
 8007b6a:	dc01      	bgt.n	8007b70 <_printf_float+0x2c4>
 8007b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b6e:	e792      	b.n	8007a96 <_printf_float+0x1ea>
 8007b70:	2301      	movs	r3, #1
 8007b72:	4652      	mov	r2, sl
 8007b74:	4631      	mov	r1, r6
 8007b76:	4628      	mov	r0, r5
 8007b78:	47b8      	blx	r7
 8007b7a:	3001      	adds	r0, #1
 8007b7c:	f43f aef7 	beq.w	800796e <_printf_float+0xc2>
 8007b80:	f109 0901 	add.w	r9, r9, #1
 8007b84:	e7ee      	b.n	8007b64 <_printf_float+0x2b8>
 8007b86:	bf00      	nop
 8007b88:	7fefffff 	.word	0x7fefffff
 8007b8c:	0800c9a4 	.word	0x0800c9a4
 8007b90:	0800c9a8 	.word	0x0800c9a8
 8007b94:	0800c9b0 	.word	0x0800c9b0
 8007b98:	0800c9ac 	.word	0x0800c9ac
 8007b9c:	0800cda9 	.word	0x0800cda9
 8007ba0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ba2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	bfa8      	it	ge
 8007ba8:	461a      	movge	r2, r3
 8007baa:	2a00      	cmp	r2, #0
 8007bac:	4691      	mov	r9, r2
 8007bae:	dc37      	bgt.n	8007c20 <_printf_float+0x374>
 8007bb0:	f04f 0b00 	mov.w	fp, #0
 8007bb4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bb8:	f104 021a 	add.w	r2, r4, #26
 8007bbc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007bbe:	9305      	str	r3, [sp, #20]
 8007bc0:	eba3 0309 	sub.w	r3, r3, r9
 8007bc4:	455b      	cmp	r3, fp
 8007bc6:	dc33      	bgt.n	8007c30 <_printf_float+0x384>
 8007bc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	db3b      	blt.n	8007c48 <_printf_float+0x39c>
 8007bd0:	6823      	ldr	r3, [r4, #0]
 8007bd2:	07da      	lsls	r2, r3, #31
 8007bd4:	d438      	bmi.n	8007c48 <_printf_float+0x39c>
 8007bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd8:	9a05      	ldr	r2, [sp, #20]
 8007bda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bdc:	1a9a      	subs	r2, r3, r2
 8007bde:	eba3 0901 	sub.w	r9, r3, r1
 8007be2:	4591      	cmp	r9, r2
 8007be4:	bfa8      	it	ge
 8007be6:	4691      	movge	r9, r2
 8007be8:	f1b9 0f00 	cmp.w	r9, #0
 8007bec:	dc35      	bgt.n	8007c5a <_printf_float+0x3ae>
 8007bee:	f04f 0800 	mov.w	r8, #0
 8007bf2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bf6:	f104 0a1a 	add.w	sl, r4, #26
 8007bfa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bfe:	1a9b      	subs	r3, r3, r2
 8007c00:	eba3 0309 	sub.w	r3, r3, r9
 8007c04:	4543      	cmp	r3, r8
 8007c06:	f77f af79 	ble.w	8007afc <_printf_float+0x250>
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	4652      	mov	r2, sl
 8007c0e:	4631      	mov	r1, r6
 8007c10:	4628      	mov	r0, r5
 8007c12:	47b8      	blx	r7
 8007c14:	3001      	adds	r0, #1
 8007c16:	f43f aeaa 	beq.w	800796e <_printf_float+0xc2>
 8007c1a:	f108 0801 	add.w	r8, r8, #1
 8007c1e:	e7ec      	b.n	8007bfa <_printf_float+0x34e>
 8007c20:	4613      	mov	r3, r2
 8007c22:	4631      	mov	r1, r6
 8007c24:	4642      	mov	r2, r8
 8007c26:	4628      	mov	r0, r5
 8007c28:	47b8      	blx	r7
 8007c2a:	3001      	adds	r0, #1
 8007c2c:	d1c0      	bne.n	8007bb0 <_printf_float+0x304>
 8007c2e:	e69e      	b.n	800796e <_printf_float+0xc2>
 8007c30:	2301      	movs	r3, #1
 8007c32:	4631      	mov	r1, r6
 8007c34:	4628      	mov	r0, r5
 8007c36:	9205      	str	r2, [sp, #20]
 8007c38:	47b8      	blx	r7
 8007c3a:	3001      	adds	r0, #1
 8007c3c:	f43f ae97 	beq.w	800796e <_printf_float+0xc2>
 8007c40:	9a05      	ldr	r2, [sp, #20]
 8007c42:	f10b 0b01 	add.w	fp, fp, #1
 8007c46:	e7b9      	b.n	8007bbc <_printf_float+0x310>
 8007c48:	ee18 3a10 	vmov	r3, s16
 8007c4c:	4652      	mov	r2, sl
 8007c4e:	4631      	mov	r1, r6
 8007c50:	4628      	mov	r0, r5
 8007c52:	47b8      	blx	r7
 8007c54:	3001      	adds	r0, #1
 8007c56:	d1be      	bne.n	8007bd6 <_printf_float+0x32a>
 8007c58:	e689      	b.n	800796e <_printf_float+0xc2>
 8007c5a:	9a05      	ldr	r2, [sp, #20]
 8007c5c:	464b      	mov	r3, r9
 8007c5e:	4442      	add	r2, r8
 8007c60:	4631      	mov	r1, r6
 8007c62:	4628      	mov	r0, r5
 8007c64:	47b8      	blx	r7
 8007c66:	3001      	adds	r0, #1
 8007c68:	d1c1      	bne.n	8007bee <_printf_float+0x342>
 8007c6a:	e680      	b.n	800796e <_printf_float+0xc2>
 8007c6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c6e:	2a01      	cmp	r2, #1
 8007c70:	dc01      	bgt.n	8007c76 <_printf_float+0x3ca>
 8007c72:	07db      	lsls	r3, r3, #31
 8007c74:	d538      	bpl.n	8007ce8 <_printf_float+0x43c>
 8007c76:	2301      	movs	r3, #1
 8007c78:	4642      	mov	r2, r8
 8007c7a:	4631      	mov	r1, r6
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	47b8      	blx	r7
 8007c80:	3001      	adds	r0, #1
 8007c82:	f43f ae74 	beq.w	800796e <_printf_float+0xc2>
 8007c86:	ee18 3a10 	vmov	r3, s16
 8007c8a:	4652      	mov	r2, sl
 8007c8c:	4631      	mov	r1, r6
 8007c8e:	4628      	mov	r0, r5
 8007c90:	47b8      	blx	r7
 8007c92:	3001      	adds	r0, #1
 8007c94:	f43f ae6b 	beq.w	800796e <_printf_float+0xc2>
 8007c98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	f7f8 ff12 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ca4:	b9d8      	cbnz	r0, 8007cde <_printf_float+0x432>
 8007ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ca8:	f108 0201 	add.w	r2, r8, #1
 8007cac:	3b01      	subs	r3, #1
 8007cae:	4631      	mov	r1, r6
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	47b8      	blx	r7
 8007cb4:	3001      	adds	r0, #1
 8007cb6:	d10e      	bne.n	8007cd6 <_printf_float+0x42a>
 8007cb8:	e659      	b.n	800796e <_printf_float+0xc2>
 8007cba:	2301      	movs	r3, #1
 8007cbc:	4652      	mov	r2, sl
 8007cbe:	4631      	mov	r1, r6
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	47b8      	blx	r7
 8007cc4:	3001      	adds	r0, #1
 8007cc6:	f43f ae52 	beq.w	800796e <_printf_float+0xc2>
 8007cca:	f108 0801 	add.w	r8, r8, #1
 8007cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	4543      	cmp	r3, r8
 8007cd4:	dcf1      	bgt.n	8007cba <_printf_float+0x40e>
 8007cd6:	464b      	mov	r3, r9
 8007cd8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007cdc:	e6dc      	b.n	8007a98 <_printf_float+0x1ec>
 8007cde:	f04f 0800 	mov.w	r8, #0
 8007ce2:	f104 0a1a 	add.w	sl, r4, #26
 8007ce6:	e7f2      	b.n	8007cce <_printf_float+0x422>
 8007ce8:	2301      	movs	r3, #1
 8007cea:	4642      	mov	r2, r8
 8007cec:	e7df      	b.n	8007cae <_printf_float+0x402>
 8007cee:	2301      	movs	r3, #1
 8007cf0:	464a      	mov	r2, r9
 8007cf2:	4631      	mov	r1, r6
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	47b8      	blx	r7
 8007cf8:	3001      	adds	r0, #1
 8007cfa:	f43f ae38 	beq.w	800796e <_printf_float+0xc2>
 8007cfe:	f108 0801 	add.w	r8, r8, #1
 8007d02:	68e3      	ldr	r3, [r4, #12]
 8007d04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d06:	1a5b      	subs	r3, r3, r1
 8007d08:	4543      	cmp	r3, r8
 8007d0a:	dcf0      	bgt.n	8007cee <_printf_float+0x442>
 8007d0c:	e6fa      	b.n	8007b04 <_printf_float+0x258>
 8007d0e:	f04f 0800 	mov.w	r8, #0
 8007d12:	f104 0919 	add.w	r9, r4, #25
 8007d16:	e7f4      	b.n	8007d02 <_printf_float+0x456>

08007d18 <_printf_common>:
 8007d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d1c:	4616      	mov	r6, r2
 8007d1e:	4699      	mov	r9, r3
 8007d20:	688a      	ldr	r2, [r1, #8]
 8007d22:	690b      	ldr	r3, [r1, #16]
 8007d24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	bfb8      	it	lt
 8007d2c:	4613      	movlt	r3, r2
 8007d2e:	6033      	str	r3, [r6, #0]
 8007d30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d34:	4607      	mov	r7, r0
 8007d36:	460c      	mov	r4, r1
 8007d38:	b10a      	cbz	r2, 8007d3e <_printf_common+0x26>
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	6033      	str	r3, [r6, #0]
 8007d3e:	6823      	ldr	r3, [r4, #0]
 8007d40:	0699      	lsls	r1, r3, #26
 8007d42:	bf42      	ittt	mi
 8007d44:	6833      	ldrmi	r3, [r6, #0]
 8007d46:	3302      	addmi	r3, #2
 8007d48:	6033      	strmi	r3, [r6, #0]
 8007d4a:	6825      	ldr	r5, [r4, #0]
 8007d4c:	f015 0506 	ands.w	r5, r5, #6
 8007d50:	d106      	bne.n	8007d60 <_printf_common+0x48>
 8007d52:	f104 0a19 	add.w	sl, r4, #25
 8007d56:	68e3      	ldr	r3, [r4, #12]
 8007d58:	6832      	ldr	r2, [r6, #0]
 8007d5a:	1a9b      	subs	r3, r3, r2
 8007d5c:	42ab      	cmp	r3, r5
 8007d5e:	dc26      	bgt.n	8007dae <_printf_common+0x96>
 8007d60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d64:	1e13      	subs	r3, r2, #0
 8007d66:	6822      	ldr	r2, [r4, #0]
 8007d68:	bf18      	it	ne
 8007d6a:	2301      	movne	r3, #1
 8007d6c:	0692      	lsls	r2, r2, #26
 8007d6e:	d42b      	bmi.n	8007dc8 <_printf_common+0xb0>
 8007d70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d74:	4649      	mov	r1, r9
 8007d76:	4638      	mov	r0, r7
 8007d78:	47c0      	blx	r8
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	d01e      	beq.n	8007dbc <_printf_common+0xa4>
 8007d7e:	6823      	ldr	r3, [r4, #0]
 8007d80:	68e5      	ldr	r5, [r4, #12]
 8007d82:	6832      	ldr	r2, [r6, #0]
 8007d84:	f003 0306 	and.w	r3, r3, #6
 8007d88:	2b04      	cmp	r3, #4
 8007d8a:	bf08      	it	eq
 8007d8c:	1aad      	subeq	r5, r5, r2
 8007d8e:	68a3      	ldr	r3, [r4, #8]
 8007d90:	6922      	ldr	r2, [r4, #16]
 8007d92:	bf0c      	ite	eq
 8007d94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d98:	2500      	movne	r5, #0
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	bfc4      	itt	gt
 8007d9e:	1a9b      	subgt	r3, r3, r2
 8007da0:	18ed      	addgt	r5, r5, r3
 8007da2:	2600      	movs	r6, #0
 8007da4:	341a      	adds	r4, #26
 8007da6:	42b5      	cmp	r5, r6
 8007da8:	d11a      	bne.n	8007de0 <_printf_common+0xc8>
 8007daa:	2000      	movs	r0, #0
 8007dac:	e008      	b.n	8007dc0 <_printf_common+0xa8>
 8007dae:	2301      	movs	r3, #1
 8007db0:	4652      	mov	r2, sl
 8007db2:	4649      	mov	r1, r9
 8007db4:	4638      	mov	r0, r7
 8007db6:	47c0      	blx	r8
 8007db8:	3001      	adds	r0, #1
 8007dba:	d103      	bne.n	8007dc4 <_printf_common+0xac>
 8007dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dc4:	3501      	adds	r5, #1
 8007dc6:	e7c6      	b.n	8007d56 <_printf_common+0x3e>
 8007dc8:	18e1      	adds	r1, r4, r3
 8007dca:	1c5a      	adds	r2, r3, #1
 8007dcc:	2030      	movs	r0, #48	; 0x30
 8007dce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007dd2:	4422      	add	r2, r4
 8007dd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007dd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ddc:	3302      	adds	r3, #2
 8007dde:	e7c7      	b.n	8007d70 <_printf_common+0x58>
 8007de0:	2301      	movs	r3, #1
 8007de2:	4622      	mov	r2, r4
 8007de4:	4649      	mov	r1, r9
 8007de6:	4638      	mov	r0, r7
 8007de8:	47c0      	blx	r8
 8007dea:	3001      	adds	r0, #1
 8007dec:	d0e6      	beq.n	8007dbc <_printf_common+0xa4>
 8007dee:	3601      	adds	r6, #1
 8007df0:	e7d9      	b.n	8007da6 <_printf_common+0x8e>
	...

08007df4 <_printf_i>:
 8007df4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007df8:	7e0f      	ldrb	r7, [r1, #24]
 8007dfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007dfc:	2f78      	cmp	r7, #120	; 0x78
 8007dfe:	4691      	mov	r9, r2
 8007e00:	4680      	mov	r8, r0
 8007e02:	460c      	mov	r4, r1
 8007e04:	469a      	mov	sl, r3
 8007e06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e0a:	d807      	bhi.n	8007e1c <_printf_i+0x28>
 8007e0c:	2f62      	cmp	r7, #98	; 0x62
 8007e0e:	d80a      	bhi.n	8007e26 <_printf_i+0x32>
 8007e10:	2f00      	cmp	r7, #0
 8007e12:	f000 80d8 	beq.w	8007fc6 <_printf_i+0x1d2>
 8007e16:	2f58      	cmp	r7, #88	; 0x58
 8007e18:	f000 80a3 	beq.w	8007f62 <_printf_i+0x16e>
 8007e1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e24:	e03a      	b.n	8007e9c <_printf_i+0xa8>
 8007e26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e2a:	2b15      	cmp	r3, #21
 8007e2c:	d8f6      	bhi.n	8007e1c <_printf_i+0x28>
 8007e2e:	a101      	add	r1, pc, #4	; (adr r1, 8007e34 <_printf_i+0x40>)
 8007e30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e34:	08007e8d 	.word	0x08007e8d
 8007e38:	08007ea1 	.word	0x08007ea1
 8007e3c:	08007e1d 	.word	0x08007e1d
 8007e40:	08007e1d 	.word	0x08007e1d
 8007e44:	08007e1d 	.word	0x08007e1d
 8007e48:	08007e1d 	.word	0x08007e1d
 8007e4c:	08007ea1 	.word	0x08007ea1
 8007e50:	08007e1d 	.word	0x08007e1d
 8007e54:	08007e1d 	.word	0x08007e1d
 8007e58:	08007e1d 	.word	0x08007e1d
 8007e5c:	08007e1d 	.word	0x08007e1d
 8007e60:	08007fad 	.word	0x08007fad
 8007e64:	08007ed1 	.word	0x08007ed1
 8007e68:	08007f8f 	.word	0x08007f8f
 8007e6c:	08007e1d 	.word	0x08007e1d
 8007e70:	08007e1d 	.word	0x08007e1d
 8007e74:	08007fcf 	.word	0x08007fcf
 8007e78:	08007e1d 	.word	0x08007e1d
 8007e7c:	08007ed1 	.word	0x08007ed1
 8007e80:	08007e1d 	.word	0x08007e1d
 8007e84:	08007e1d 	.word	0x08007e1d
 8007e88:	08007f97 	.word	0x08007f97
 8007e8c:	682b      	ldr	r3, [r5, #0]
 8007e8e:	1d1a      	adds	r2, r3, #4
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	602a      	str	r2, [r5, #0]
 8007e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e0a3      	b.n	8007fe8 <_printf_i+0x1f4>
 8007ea0:	6820      	ldr	r0, [r4, #0]
 8007ea2:	6829      	ldr	r1, [r5, #0]
 8007ea4:	0606      	lsls	r6, r0, #24
 8007ea6:	f101 0304 	add.w	r3, r1, #4
 8007eaa:	d50a      	bpl.n	8007ec2 <_printf_i+0xce>
 8007eac:	680e      	ldr	r6, [r1, #0]
 8007eae:	602b      	str	r3, [r5, #0]
 8007eb0:	2e00      	cmp	r6, #0
 8007eb2:	da03      	bge.n	8007ebc <_printf_i+0xc8>
 8007eb4:	232d      	movs	r3, #45	; 0x2d
 8007eb6:	4276      	negs	r6, r6
 8007eb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ebc:	485e      	ldr	r0, [pc, #376]	; (8008038 <_printf_i+0x244>)
 8007ebe:	230a      	movs	r3, #10
 8007ec0:	e019      	b.n	8007ef6 <_printf_i+0x102>
 8007ec2:	680e      	ldr	r6, [r1, #0]
 8007ec4:	602b      	str	r3, [r5, #0]
 8007ec6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007eca:	bf18      	it	ne
 8007ecc:	b236      	sxthne	r6, r6
 8007ece:	e7ef      	b.n	8007eb0 <_printf_i+0xbc>
 8007ed0:	682b      	ldr	r3, [r5, #0]
 8007ed2:	6820      	ldr	r0, [r4, #0]
 8007ed4:	1d19      	adds	r1, r3, #4
 8007ed6:	6029      	str	r1, [r5, #0]
 8007ed8:	0601      	lsls	r1, r0, #24
 8007eda:	d501      	bpl.n	8007ee0 <_printf_i+0xec>
 8007edc:	681e      	ldr	r6, [r3, #0]
 8007ede:	e002      	b.n	8007ee6 <_printf_i+0xf2>
 8007ee0:	0646      	lsls	r6, r0, #25
 8007ee2:	d5fb      	bpl.n	8007edc <_printf_i+0xe8>
 8007ee4:	881e      	ldrh	r6, [r3, #0]
 8007ee6:	4854      	ldr	r0, [pc, #336]	; (8008038 <_printf_i+0x244>)
 8007ee8:	2f6f      	cmp	r7, #111	; 0x6f
 8007eea:	bf0c      	ite	eq
 8007eec:	2308      	moveq	r3, #8
 8007eee:	230a      	movne	r3, #10
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ef6:	6865      	ldr	r5, [r4, #4]
 8007ef8:	60a5      	str	r5, [r4, #8]
 8007efa:	2d00      	cmp	r5, #0
 8007efc:	bfa2      	ittt	ge
 8007efe:	6821      	ldrge	r1, [r4, #0]
 8007f00:	f021 0104 	bicge.w	r1, r1, #4
 8007f04:	6021      	strge	r1, [r4, #0]
 8007f06:	b90e      	cbnz	r6, 8007f0c <_printf_i+0x118>
 8007f08:	2d00      	cmp	r5, #0
 8007f0a:	d04d      	beq.n	8007fa8 <_printf_i+0x1b4>
 8007f0c:	4615      	mov	r5, r2
 8007f0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f12:	fb03 6711 	mls	r7, r3, r1, r6
 8007f16:	5dc7      	ldrb	r7, [r0, r7]
 8007f18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f1c:	4637      	mov	r7, r6
 8007f1e:	42bb      	cmp	r3, r7
 8007f20:	460e      	mov	r6, r1
 8007f22:	d9f4      	bls.n	8007f0e <_printf_i+0x11a>
 8007f24:	2b08      	cmp	r3, #8
 8007f26:	d10b      	bne.n	8007f40 <_printf_i+0x14c>
 8007f28:	6823      	ldr	r3, [r4, #0]
 8007f2a:	07de      	lsls	r6, r3, #31
 8007f2c:	d508      	bpl.n	8007f40 <_printf_i+0x14c>
 8007f2e:	6923      	ldr	r3, [r4, #16]
 8007f30:	6861      	ldr	r1, [r4, #4]
 8007f32:	4299      	cmp	r1, r3
 8007f34:	bfde      	ittt	le
 8007f36:	2330      	movle	r3, #48	; 0x30
 8007f38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f40:	1b52      	subs	r2, r2, r5
 8007f42:	6122      	str	r2, [r4, #16]
 8007f44:	f8cd a000 	str.w	sl, [sp]
 8007f48:	464b      	mov	r3, r9
 8007f4a:	aa03      	add	r2, sp, #12
 8007f4c:	4621      	mov	r1, r4
 8007f4e:	4640      	mov	r0, r8
 8007f50:	f7ff fee2 	bl	8007d18 <_printf_common>
 8007f54:	3001      	adds	r0, #1
 8007f56:	d14c      	bne.n	8007ff2 <_printf_i+0x1fe>
 8007f58:	f04f 30ff 	mov.w	r0, #4294967295
 8007f5c:	b004      	add	sp, #16
 8007f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f62:	4835      	ldr	r0, [pc, #212]	; (8008038 <_printf_i+0x244>)
 8007f64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f68:	6829      	ldr	r1, [r5, #0]
 8007f6a:	6823      	ldr	r3, [r4, #0]
 8007f6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f70:	6029      	str	r1, [r5, #0]
 8007f72:	061d      	lsls	r5, r3, #24
 8007f74:	d514      	bpl.n	8007fa0 <_printf_i+0x1ac>
 8007f76:	07df      	lsls	r7, r3, #31
 8007f78:	bf44      	itt	mi
 8007f7a:	f043 0320 	orrmi.w	r3, r3, #32
 8007f7e:	6023      	strmi	r3, [r4, #0]
 8007f80:	b91e      	cbnz	r6, 8007f8a <_printf_i+0x196>
 8007f82:	6823      	ldr	r3, [r4, #0]
 8007f84:	f023 0320 	bic.w	r3, r3, #32
 8007f88:	6023      	str	r3, [r4, #0]
 8007f8a:	2310      	movs	r3, #16
 8007f8c:	e7b0      	b.n	8007ef0 <_printf_i+0xfc>
 8007f8e:	6823      	ldr	r3, [r4, #0]
 8007f90:	f043 0320 	orr.w	r3, r3, #32
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	2378      	movs	r3, #120	; 0x78
 8007f98:	4828      	ldr	r0, [pc, #160]	; (800803c <_printf_i+0x248>)
 8007f9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f9e:	e7e3      	b.n	8007f68 <_printf_i+0x174>
 8007fa0:	0659      	lsls	r1, r3, #25
 8007fa2:	bf48      	it	mi
 8007fa4:	b2b6      	uxthmi	r6, r6
 8007fa6:	e7e6      	b.n	8007f76 <_printf_i+0x182>
 8007fa8:	4615      	mov	r5, r2
 8007faa:	e7bb      	b.n	8007f24 <_printf_i+0x130>
 8007fac:	682b      	ldr	r3, [r5, #0]
 8007fae:	6826      	ldr	r6, [r4, #0]
 8007fb0:	6961      	ldr	r1, [r4, #20]
 8007fb2:	1d18      	adds	r0, r3, #4
 8007fb4:	6028      	str	r0, [r5, #0]
 8007fb6:	0635      	lsls	r5, r6, #24
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	d501      	bpl.n	8007fc0 <_printf_i+0x1cc>
 8007fbc:	6019      	str	r1, [r3, #0]
 8007fbe:	e002      	b.n	8007fc6 <_printf_i+0x1d2>
 8007fc0:	0670      	lsls	r0, r6, #25
 8007fc2:	d5fb      	bpl.n	8007fbc <_printf_i+0x1c8>
 8007fc4:	8019      	strh	r1, [r3, #0]
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	6123      	str	r3, [r4, #16]
 8007fca:	4615      	mov	r5, r2
 8007fcc:	e7ba      	b.n	8007f44 <_printf_i+0x150>
 8007fce:	682b      	ldr	r3, [r5, #0]
 8007fd0:	1d1a      	adds	r2, r3, #4
 8007fd2:	602a      	str	r2, [r5, #0]
 8007fd4:	681d      	ldr	r5, [r3, #0]
 8007fd6:	6862      	ldr	r2, [r4, #4]
 8007fd8:	2100      	movs	r1, #0
 8007fda:	4628      	mov	r0, r5
 8007fdc:	f7f8 f900 	bl	80001e0 <memchr>
 8007fe0:	b108      	cbz	r0, 8007fe6 <_printf_i+0x1f2>
 8007fe2:	1b40      	subs	r0, r0, r5
 8007fe4:	6060      	str	r0, [r4, #4]
 8007fe6:	6863      	ldr	r3, [r4, #4]
 8007fe8:	6123      	str	r3, [r4, #16]
 8007fea:	2300      	movs	r3, #0
 8007fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ff0:	e7a8      	b.n	8007f44 <_printf_i+0x150>
 8007ff2:	6923      	ldr	r3, [r4, #16]
 8007ff4:	462a      	mov	r2, r5
 8007ff6:	4649      	mov	r1, r9
 8007ff8:	4640      	mov	r0, r8
 8007ffa:	47d0      	blx	sl
 8007ffc:	3001      	adds	r0, #1
 8007ffe:	d0ab      	beq.n	8007f58 <_printf_i+0x164>
 8008000:	6823      	ldr	r3, [r4, #0]
 8008002:	079b      	lsls	r3, r3, #30
 8008004:	d413      	bmi.n	800802e <_printf_i+0x23a>
 8008006:	68e0      	ldr	r0, [r4, #12]
 8008008:	9b03      	ldr	r3, [sp, #12]
 800800a:	4298      	cmp	r0, r3
 800800c:	bfb8      	it	lt
 800800e:	4618      	movlt	r0, r3
 8008010:	e7a4      	b.n	8007f5c <_printf_i+0x168>
 8008012:	2301      	movs	r3, #1
 8008014:	4632      	mov	r2, r6
 8008016:	4649      	mov	r1, r9
 8008018:	4640      	mov	r0, r8
 800801a:	47d0      	blx	sl
 800801c:	3001      	adds	r0, #1
 800801e:	d09b      	beq.n	8007f58 <_printf_i+0x164>
 8008020:	3501      	adds	r5, #1
 8008022:	68e3      	ldr	r3, [r4, #12]
 8008024:	9903      	ldr	r1, [sp, #12]
 8008026:	1a5b      	subs	r3, r3, r1
 8008028:	42ab      	cmp	r3, r5
 800802a:	dcf2      	bgt.n	8008012 <_printf_i+0x21e>
 800802c:	e7eb      	b.n	8008006 <_printf_i+0x212>
 800802e:	2500      	movs	r5, #0
 8008030:	f104 0619 	add.w	r6, r4, #25
 8008034:	e7f5      	b.n	8008022 <_printf_i+0x22e>
 8008036:	bf00      	nop
 8008038:	0800c9b4 	.word	0x0800c9b4
 800803c:	0800c9c5 	.word	0x0800c9c5

08008040 <_scanf_float>:
 8008040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008044:	b087      	sub	sp, #28
 8008046:	4617      	mov	r7, r2
 8008048:	9303      	str	r3, [sp, #12]
 800804a:	688b      	ldr	r3, [r1, #8]
 800804c:	1e5a      	subs	r2, r3, #1
 800804e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008052:	bf83      	ittte	hi
 8008054:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008058:	195b      	addhi	r3, r3, r5
 800805a:	9302      	strhi	r3, [sp, #8]
 800805c:	2300      	movls	r3, #0
 800805e:	bf86      	itte	hi
 8008060:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008064:	608b      	strhi	r3, [r1, #8]
 8008066:	9302      	strls	r3, [sp, #8]
 8008068:	680b      	ldr	r3, [r1, #0]
 800806a:	468b      	mov	fp, r1
 800806c:	2500      	movs	r5, #0
 800806e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008072:	f84b 3b1c 	str.w	r3, [fp], #28
 8008076:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800807a:	4680      	mov	r8, r0
 800807c:	460c      	mov	r4, r1
 800807e:	465e      	mov	r6, fp
 8008080:	46aa      	mov	sl, r5
 8008082:	46a9      	mov	r9, r5
 8008084:	9501      	str	r5, [sp, #4]
 8008086:	68a2      	ldr	r2, [r4, #8]
 8008088:	b152      	cbz	r2, 80080a0 <_scanf_float+0x60>
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	2b4e      	cmp	r3, #78	; 0x4e
 8008090:	d864      	bhi.n	800815c <_scanf_float+0x11c>
 8008092:	2b40      	cmp	r3, #64	; 0x40
 8008094:	d83c      	bhi.n	8008110 <_scanf_float+0xd0>
 8008096:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800809a:	b2c8      	uxtb	r0, r1
 800809c:	280e      	cmp	r0, #14
 800809e:	d93a      	bls.n	8008116 <_scanf_float+0xd6>
 80080a0:	f1b9 0f00 	cmp.w	r9, #0
 80080a4:	d003      	beq.n	80080ae <_scanf_float+0x6e>
 80080a6:	6823      	ldr	r3, [r4, #0]
 80080a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080ac:	6023      	str	r3, [r4, #0]
 80080ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080b2:	f1ba 0f01 	cmp.w	sl, #1
 80080b6:	f200 8113 	bhi.w	80082e0 <_scanf_float+0x2a0>
 80080ba:	455e      	cmp	r6, fp
 80080bc:	f200 8105 	bhi.w	80082ca <_scanf_float+0x28a>
 80080c0:	2501      	movs	r5, #1
 80080c2:	4628      	mov	r0, r5
 80080c4:	b007      	add	sp, #28
 80080c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ca:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80080ce:	2a0d      	cmp	r2, #13
 80080d0:	d8e6      	bhi.n	80080a0 <_scanf_float+0x60>
 80080d2:	a101      	add	r1, pc, #4	; (adr r1, 80080d8 <_scanf_float+0x98>)
 80080d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80080d8:	08008217 	.word	0x08008217
 80080dc:	080080a1 	.word	0x080080a1
 80080e0:	080080a1 	.word	0x080080a1
 80080e4:	080080a1 	.word	0x080080a1
 80080e8:	08008277 	.word	0x08008277
 80080ec:	0800824f 	.word	0x0800824f
 80080f0:	080080a1 	.word	0x080080a1
 80080f4:	080080a1 	.word	0x080080a1
 80080f8:	08008225 	.word	0x08008225
 80080fc:	080080a1 	.word	0x080080a1
 8008100:	080080a1 	.word	0x080080a1
 8008104:	080080a1 	.word	0x080080a1
 8008108:	080080a1 	.word	0x080080a1
 800810c:	080081dd 	.word	0x080081dd
 8008110:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008114:	e7db      	b.n	80080ce <_scanf_float+0x8e>
 8008116:	290e      	cmp	r1, #14
 8008118:	d8c2      	bhi.n	80080a0 <_scanf_float+0x60>
 800811a:	a001      	add	r0, pc, #4	; (adr r0, 8008120 <_scanf_float+0xe0>)
 800811c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008120:	080081cf 	.word	0x080081cf
 8008124:	080080a1 	.word	0x080080a1
 8008128:	080081cf 	.word	0x080081cf
 800812c:	08008263 	.word	0x08008263
 8008130:	080080a1 	.word	0x080080a1
 8008134:	0800817d 	.word	0x0800817d
 8008138:	080081b9 	.word	0x080081b9
 800813c:	080081b9 	.word	0x080081b9
 8008140:	080081b9 	.word	0x080081b9
 8008144:	080081b9 	.word	0x080081b9
 8008148:	080081b9 	.word	0x080081b9
 800814c:	080081b9 	.word	0x080081b9
 8008150:	080081b9 	.word	0x080081b9
 8008154:	080081b9 	.word	0x080081b9
 8008158:	080081b9 	.word	0x080081b9
 800815c:	2b6e      	cmp	r3, #110	; 0x6e
 800815e:	d809      	bhi.n	8008174 <_scanf_float+0x134>
 8008160:	2b60      	cmp	r3, #96	; 0x60
 8008162:	d8b2      	bhi.n	80080ca <_scanf_float+0x8a>
 8008164:	2b54      	cmp	r3, #84	; 0x54
 8008166:	d077      	beq.n	8008258 <_scanf_float+0x218>
 8008168:	2b59      	cmp	r3, #89	; 0x59
 800816a:	d199      	bne.n	80080a0 <_scanf_float+0x60>
 800816c:	2d07      	cmp	r5, #7
 800816e:	d197      	bne.n	80080a0 <_scanf_float+0x60>
 8008170:	2508      	movs	r5, #8
 8008172:	e029      	b.n	80081c8 <_scanf_float+0x188>
 8008174:	2b74      	cmp	r3, #116	; 0x74
 8008176:	d06f      	beq.n	8008258 <_scanf_float+0x218>
 8008178:	2b79      	cmp	r3, #121	; 0x79
 800817a:	e7f6      	b.n	800816a <_scanf_float+0x12a>
 800817c:	6821      	ldr	r1, [r4, #0]
 800817e:	05c8      	lsls	r0, r1, #23
 8008180:	d51a      	bpl.n	80081b8 <_scanf_float+0x178>
 8008182:	9b02      	ldr	r3, [sp, #8]
 8008184:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008188:	6021      	str	r1, [r4, #0]
 800818a:	f109 0901 	add.w	r9, r9, #1
 800818e:	b11b      	cbz	r3, 8008198 <_scanf_float+0x158>
 8008190:	3b01      	subs	r3, #1
 8008192:	3201      	adds	r2, #1
 8008194:	9302      	str	r3, [sp, #8]
 8008196:	60a2      	str	r2, [r4, #8]
 8008198:	68a3      	ldr	r3, [r4, #8]
 800819a:	3b01      	subs	r3, #1
 800819c:	60a3      	str	r3, [r4, #8]
 800819e:	6923      	ldr	r3, [r4, #16]
 80081a0:	3301      	adds	r3, #1
 80081a2:	6123      	str	r3, [r4, #16]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	3b01      	subs	r3, #1
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	607b      	str	r3, [r7, #4]
 80081ac:	f340 8084 	ble.w	80082b8 <_scanf_float+0x278>
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	3301      	adds	r3, #1
 80081b4:	603b      	str	r3, [r7, #0]
 80081b6:	e766      	b.n	8008086 <_scanf_float+0x46>
 80081b8:	eb1a 0f05 	cmn.w	sl, r5
 80081bc:	f47f af70 	bne.w	80080a0 <_scanf_float+0x60>
 80081c0:	6822      	ldr	r2, [r4, #0]
 80081c2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80081c6:	6022      	str	r2, [r4, #0]
 80081c8:	f806 3b01 	strb.w	r3, [r6], #1
 80081cc:	e7e4      	b.n	8008198 <_scanf_float+0x158>
 80081ce:	6822      	ldr	r2, [r4, #0]
 80081d0:	0610      	lsls	r0, r2, #24
 80081d2:	f57f af65 	bpl.w	80080a0 <_scanf_float+0x60>
 80081d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081da:	e7f4      	b.n	80081c6 <_scanf_float+0x186>
 80081dc:	f1ba 0f00 	cmp.w	sl, #0
 80081e0:	d10e      	bne.n	8008200 <_scanf_float+0x1c0>
 80081e2:	f1b9 0f00 	cmp.w	r9, #0
 80081e6:	d10e      	bne.n	8008206 <_scanf_float+0x1c6>
 80081e8:	6822      	ldr	r2, [r4, #0]
 80081ea:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80081ee:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80081f2:	d108      	bne.n	8008206 <_scanf_float+0x1c6>
 80081f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80081f8:	6022      	str	r2, [r4, #0]
 80081fa:	f04f 0a01 	mov.w	sl, #1
 80081fe:	e7e3      	b.n	80081c8 <_scanf_float+0x188>
 8008200:	f1ba 0f02 	cmp.w	sl, #2
 8008204:	d055      	beq.n	80082b2 <_scanf_float+0x272>
 8008206:	2d01      	cmp	r5, #1
 8008208:	d002      	beq.n	8008210 <_scanf_float+0x1d0>
 800820a:	2d04      	cmp	r5, #4
 800820c:	f47f af48 	bne.w	80080a0 <_scanf_float+0x60>
 8008210:	3501      	adds	r5, #1
 8008212:	b2ed      	uxtb	r5, r5
 8008214:	e7d8      	b.n	80081c8 <_scanf_float+0x188>
 8008216:	f1ba 0f01 	cmp.w	sl, #1
 800821a:	f47f af41 	bne.w	80080a0 <_scanf_float+0x60>
 800821e:	f04f 0a02 	mov.w	sl, #2
 8008222:	e7d1      	b.n	80081c8 <_scanf_float+0x188>
 8008224:	b97d      	cbnz	r5, 8008246 <_scanf_float+0x206>
 8008226:	f1b9 0f00 	cmp.w	r9, #0
 800822a:	f47f af3c 	bne.w	80080a6 <_scanf_float+0x66>
 800822e:	6822      	ldr	r2, [r4, #0]
 8008230:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008234:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008238:	f47f af39 	bne.w	80080ae <_scanf_float+0x6e>
 800823c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008240:	6022      	str	r2, [r4, #0]
 8008242:	2501      	movs	r5, #1
 8008244:	e7c0      	b.n	80081c8 <_scanf_float+0x188>
 8008246:	2d03      	cmp	r5, #3
 8008248:	d0e2      	beq.n	8008210 <_scanf_float+0x1d0>
 800824a:	2d05      	cmp	r5, #5
 800824c:	e7de      	b.n	800820c <_scanf_float+0x1cc>
 800824e:	2d02      	cmp	r5, #2
 8008250:	f47f af26 	bne.w	80080a0 <_scanf_float+0x60>
 8008254:	2503      	movs	r5, #3
 8008256:	e7b7      	b.n	80081c8 <_scanf_float+0x188>
 8008258:	2d06      	cmp	r5, #6
 800825a:	f47f af21 	bne.w	80080a0 <_scanf_float+0x60>
 800825e:	2507      	movs	r5, #7
 8008260:	e7b2      	b.n	80081c8 <_scanf_float+0x188>
 8008262:	6822      	ldr	r2, [r4, #0]
 8008264:	0591      	lsls	r1, r2, #22
 8008266:	f57f af1b 	bpl.w	80080a0 <_scanf_float+0x60>
 800826a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800826e:	6022      	str	r2, [r4, #0]
 8008270:	f8cd 9004 	str.w	r9, [sp, #4]
 8008274:	e7a8      	b.n	80081c8 <_scanf_float+0x188>
 8008276:	6822      	ldr	r2, [r4, #0]
 8008278:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800827c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008280:	d006      	beq.n	8008290 <_scanf_float+0x250>
 8008282:	0550      	lsls	r0, r2, #21
 8008284:	f57f af0c 	bpl.w	80080a0 <_scanf_float+0x60>
 8008288:	f1b9 0f00 	cmp.w	r9, #0
 800828c:	f43f af0f 	beq.w	80080ae <_scanf_float+0x6e>
 8008290:	0591      	lsls	r1, r2, #22
 8008292:	bf58      	it	pl
 8008294:	9901      	ldrpl	r1, [sp, #4]
 8008296:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800829a:	bf58      	it	pl
 800829c:	eba9 0101 	subpl.w	r1, r9, r1
 80082a0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80082a4:	bf58      	it	pl
 80082a6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80082aa:	6022      	str	r2, [r4, #0]
 80082ac:	f04f 0900 	mov.w	r9, #0
 80082b0:	e78a      	b.n	80081c8 <_scanf_float+0x188>
 80082b2:	f04f 0a03 	mov.w	sl, #3
 80082b6:	e787      	b.n	80081c8 <_scanf_float+0x188>
 80082b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80082bc:	4639      	mov	r1, r7
 80082be:	4640      	mov	r0, r8
 80082c0:	4798      	blx	r3
 80082c2:	2800      	cmp	r0, #0
 80082c4:	f43f aedf 	beq.w	8008086 <_scanf_float+0x46>
 80082c8:	e6ea      	b.n	80080a0 <_scanf_float+0x60>
 80082ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80082d2:	463a      	mov	r2, r7
 80082d4:	4640      	mov	r0, r8
 80082d6:	4798      	blx	r3
 80082d8:	6923      	ldr	r3, [r4, #16]
 80082da:	3b01      	subs	r3, #1
 80082dc:	6123      	str	r3, [r4, #16]
 80082de:	e6ec      	b.n	80080ba <_scanf_float+0x7a>
 80082e0:	1e6b      	subs	r3, r5, #1
 80082e2:	2b06      	cmp	r3, #6
 80082e4:	d825      	bhi.n	8008332 <_scanf_float+0x2f2>
 80082e6:	2d02      	cmp	r5, #2
 80082e8:	d836      	bhi.n	8008358 <_scanf_float+0x318>
 80082ea:	455e      	cmp	r6, fp
 80082ec:	f67f aee8 	bls.w	80080c0 <_scanf_float+0x80>
 80082f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082f4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80082f8:	463a      	mov	r2, r7
 80082fa:	4640      	mov	r0, r8
 80082fc:	4798      	blx	r3
 80082fe:	6923      	ldr	r3, [r4, #16]
 8008300:	3b01      	subs	r3, #1
 8008302:	6123      	str	r3, [r4, #16]
 8008304:	e7f1      	b.n	80082ea <_scanf_float+0x2aa>
 8008306:	9802      	ldr	r0, [sp, #8]
 8008308:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800830c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008310:	9002      	str	r0, [sp, #8]
 8008312:	463a      	mov	r2, r7
 8008314:	4640      	mov	r0, r8
 8008316:	4798      	blx	r3
 8008318:	6923      	ldr	r3, [r4, #16]
 800831a:	3b01      	subs	r3, #1
 800831c:	6123      	str	r3, [r4, #16]
 800831e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008322:	fa5f fa8a 	uxtb.w	sl, sl
 8008326:	f1ba 0f02 	cmp.w	sl, #2
 800832a:	d1ec      	bne.n	8008306 <_scanf_float+0x2c6>
 800832c:	3d03      	subs	r5, #3
 800832e:	b2ed      	uxtb	r5, r5
 8008330:	1b76      	subs	r6, r6, r5
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	05da      	lsls	r2, r3, #23
 8008336:	d52f      	bpl.n	8008398 <_scanf_float+0x358>
 8008338:	055b      	lsls	r3, r3, #21
 800833a:	d510      	bpl.n	800835e <_scanf_float+0x31e>
 800833c:	455e      	cmp	r6, fp
 800833e:	f67f aebf 	bls.w	80080c0 <_scanf_float+0x80>
 8008342:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008346:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800834a:	463a      	mov	r2, r7
 800834c:	4640      	mov	r0, r8
 800834e:	4798      	blx	r3
 8008350:	6923      	ldr	r3, [r4, #16]
 8008352:	3b01      	subs	r3, #1
 8008354:	6123      	str	r3, [r4, #16]
 8008356:	e7f1      	b.n	800833c <_scanf_float+0x2fc>
 8008358:	46aa      	mov	sl, r5
 800835a:	9602      	str	r6, [sp, #8]
 800835c:	e7df      	b.n	800831e <_scanf_float+0x2de>
 800835e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008362:	6923      	ldr	r3, [r4, #16]
 8008364:	2965      	cmp	r1, #101	; 0x65
 8008366:	f103 33ff 	add.w	r3, r3, #4294967295
 800836a:	f106 35ff 	add.w	r5, r6, #4294967295
 800836e:	6123      	str	r3, [r4, #16]
 8008370:	d00c      	beq.n	800838c <_scanf_float+0x34c>
 8008372:	2945      	cmp	r1, #69	; 0x45
 8008374:	d00a      	beq.n	800838c <_scanf_float+0x34c>
 8008376:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800837a:	463a      	mov	r2, r7
 800837c:	4640      	mov	r0, r8
 800837e:	4798      	blx	r3
 8008380:	6923      	ldr	r3, [r4, #16]
 8008382:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008386:	3b01      	subs	r3, #1
 8008388:	1eb5      	subs	r5, r6, #2
 800838a:	6123      	str	r3, [r4, #16]
 800838c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008390:	463a      	mov	r2, r7
 8008392:	4640      	mov	r0, r8
 8008394:	4798      	blx	r3
 8008396:	462e      	mov	r6, r5
 8008398:	6825      	ldr	r5, [r4, #0]
 800839a:	f015 0510 	ands.w	r5, r5, #16
 800839e:	d159      	bne.n	8008454 <_scanf_float+0x414>
 80083a0:	7035      	strb	r5, [r6, #0]
 80083a2:	6823      	ldr	r3, [r4, #0]
 80083a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80083a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083ac:	d11b      	bne.n	80083e6 <_scanf_float+0x3a6>
 80083ae:	9b01      	ldr	r3, [sp, #4]
 80083b0:	454b      	cmp	r3, r9
 80083b2:	eba3 0209 	sub.w	r2, r3, r9
 80083b6:	d123      	bne.n	8008400 <_scanf_float+0x3c0>
 80083b8:	2200      	movs	r2, #0
 80083ba:	4659      	mov	r1, fp
 80083bc:	4640      	mov	r0, r8
 80083be:	f000 ff2d 	bl	800921c <_strtod_r>
 80083c2:	6822      	ldr	r2, [r4, #0]
 80083c4:	9b03      	ldr	r3, [sp, #12]
 80083c6:	f012 0f02 	tst.w	r2, #2
 80083ca:	ec57 6b10 	vmov	r6, r7, d0
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	d021      	beq.n	8008416 <_scanf_float+0x3d6>
 80083d2:	9903      	ldr	r1, [sp, #12]
 80083d4:	1d1a      	adds	r2, r3, #4
 80083d6:	600a      	str	r2, [r1, #0]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	e9c3 6700 	strd	r6, r7, [r3]
 80083de:	68e3      	ldr	r3, [r4, #12]
 80083e0:	3301      	adds	r3, #1
 80083e2:	60e3      	str	r3, [r4, #12]
 80083e4:	e66d      	b.n	80080c2 <_scanf_float+0x82>
 80083e6:	9b04      	ldr	r3, [sp, #16]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d0e5      	beq.n	80083b8 <_scanf_float+0x378>
 80083ec:	9905      	ldr	r1, [sp, #20]
 80083ee:	230a      	movs	r3, #10
 80083f0:	462a      	mov	r2, r5
 80083f2:	3101      	adds	r1, #1
 80083f4:	4640      	mov	r0, r8
 80083f6:	f000 ff99 	bl	800932c <_strtol_r>
 80083fa:	9b04      	ldr	r3, [sp, #16]
 80083fc:	9e05      	ldr	r6, [sp, #20]
 80083fe:	1ac2      	subs	r2, r0, r3
 8008400:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008404:	429e      	cmp	r6, r3
 8008406:	bf28      	it	cs
 8008408:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800840c:	4912      	ldr	r1, [pc, #72]	; (8008458 <_scanf_float+0x418>)
 800840e:	4630      	mov	r0, r6
 8008410:	f000 f82c 	bl	800846c <siprintf>
 8008414:	e7d0      	b.n	80083b8 <_scanf_float+0x378>
 8008416:	9903      	ldr	r1, [sp, #12]
 8008418:	f012 0f04 	tst.w	r2, #4
 800841c:	f103 0204 	add.w	r2, r3, #4
 8008420:	600a      	str	r2, [r1, #0]
 8008422:	d1d9      	bne.n	80083d8 <_scanf_float+0x398>
 8008424:	f8d3 8000 	ldr.w	r8, [r3]
 8008428:	ee10 2a10 	vmov	r2, s0
 800842c:	ee10 0a10 	vmov	r0, s0
 8008430:	463b      	mov	r3, r7
 8008432:	4639      	mov	r1, r7
 8008434:	f7f8 fb7a 	bl	8000b2c <__aeabi_dcmpun>
 8008438:	b128      	cbz	r0, 8008446 <_scanf_float+0x406>
 800843a:	4808      	ldr	r0, [pc, #32]	; (800845c <_scanf_float+0x41c>)
 800843c:	f000 f810 	bl	8008460 <nanf>
 8008440:	ed88 0a00 	vstr	s0, [r8]
 8008444:	e7cb      	b.n	80083de <_scanf_float+0x39e>
 8008446:	4630      	mov	r0, r6
 8008448:	4639      	mov	r1, r7
 800844a:	f7f8 fbcd 	bl	8000be8 <__aeabi_d2f>
 800844e:	f8c8 0000 	str.w	r0, [r8]
 8008452:	e7c4      	b.n	80083de <_scanf_float+0x39e>
 8008454:	2500      	movs	r5, #0
 8008456:	e634      	b.n	80080c2 <_scanf_float+0x82>
 8008458:	0800c9d6 	.word	0x0800c9d6
 800845c:	0800cdfb 	.word	0x0800cdfb

08008460 <nanf>:
 8008460:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008468 <nanf+0x8>
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	7fc00000 	.word	0x7fc00000

0800846c <siprintf>:
 800846c:	b40e      	push	{r1, r2, r3}
 800846e:	b500      	push	{lr}
 8008470:	b09c      	sub	sp, #112	; 0x70
 8008472:	ab1d      	add	r3, sp, #116	; 0x74
 8008474:	9002      	str	r0, [sp, #8]
 8008476:	9006      	str	r0, [sp, #24]
 8008478:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800847c:	4809      	ldr	r0, [pc, #36]	; (80084a4 <siprintf+0x38>)
 800847e:	9107      	str	r1, [sp, #28]
 8008480:	9104      	str	r1, [sp, #16]
 8008482:	4909      	ldr	r1, [pc, #36]	; (80084a8 <siprintf+0x3c>)
 8008484:	f853 2b04 	ldr.w	r2, [r3], #4
 8008488:	9105      	str	r1, [sp, #20]
 800848a:	6800      	ldr	r0, [r0, #0]
 800848c:	9301      	str	r3, [sp, #4]
 800848e:	a902      	add	r1, sp, #8
 8008490:	f002 ffae 	bl	800b3f0 <_svfiprintf_r>
 8008494:	9b02      	ldr	r3, [sp, #8]
 8008496:	2200      	movs	r2, #0
 8008498:	701a      	strb	r2, [r3, #0]
 800849a:	b01c      	add	sp, #112	; 0x70
 800849c:	f85d eb04 	ldr.w	lr, [sp], #4
 80084a0:	b003      	add	sp, #12
 80084a2:	4770      	bx	lr
 80084a4:	200000ec 	.word	0x200000ec
 80084a8:	ffff0208 	.word	0xffff0208

080084ac <siscanf>:
 80084ac:	b40e      	push	{r1, r2, r3}
 80084ae:	b510      	push	{r4, lr}
 80084b0:	b09f      	sub	sp, #124	; 0x7c
 80084b2:	ac21      	add	r4, sp, #132	; 0x84
 80084b4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80084b8:	f854 2b04 	ldr.w	r2, [r4], #4
 80084bc:	9201      	str	r2, [sp, #4]
 80084be:	f8ad 101c 	strh.w	r1, [sp, #28]
 80084c2:	9004      	str	r0, [sp, #16]
 80084c4:	9008      	str	r0, [sp, #32]
 80084c6:	f7f7 fe83 	bl	80001d0 <strlen>
 80084ca:	4b0c      	ldr	r3, [pc, #48]	; (80084fc <siscanf+0x50>)
 80084cc:	9005      	str	r0, [sp, #20]
 80084ce:	9009      	str	r0, [sp, #36]	; 0x24
 80084d0:	930d      	str	r3, [sp, #52]	; 0x34
 80084d2:	480b      	ldr	r0, [pc, #44]	; (8008500 <siscanf+0x54>)
 80084d4:	9a01      	ldr	r2, [sp, #4]
 80084d6:	6800      	ldr	r0, [r0, #0]
 80084d8:	9403      	str	r4, [sp, #12]
 80084da:	2300      	movs	r3, #0
 80084dc:	9311      	str	r3, [sp, #68]	; 0x44
 80084de:	9316      	str	r3, [sp, #88]	; 0x58
 80084e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80084e4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80084e8:	a904      	add	r1, sp, #16
 80084ea:	4623      	mov	r3, r4
 80084ec:	f003 f8da 	bl	800b6a4 <__ssvfiscanf_r>
 80084f0:	b01f      	add	sp, #124	; 0x7c
 80084f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084f6:	b003      	add	sp, #12
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	08008527 	.word	0x08008527
 8008500:	200000ec 	.word	0x200000ec

08008504 <__sread>:
 8008504:	b510      	push	{r4, lr}
 8008506:	460c      	mov	r4, r1
 8008508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800850c:	f003 fb94 	bl	800bc38 <_read_r>
 8008510:	2800      	cmp	r0, #0
 8008512:	bfab      	itete	ge
 8008514:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008516:	89a3      	ldrhlt	r3, [r4, #12]
 8008518:	181b      	addge	r3, r3, r0
 800851a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800851e:	bfac      	ite	ge
 8008520:	6563      	strge	r3, [r4, #84]	; 0x54
 8008522:	81a3      	strhlt	r3, [r4, #12]
 8008524:	bd10      	pop	{r4, pc}

08008526 <__seofread>:
 8008526:	2000      	movs	r0, #0
 8008528:	4770      	bx	lr

0800852a <__swrite>:
 800852a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800852e:	461f      	mov	r7, r3
 8008530:	898b      	ldrh	r3, [r1, #12]
 8008532:	05db      	lsls	r3, r3, #23
 8008534:	4605      	mov	r5, r0
 8008536:	460c      	mov	r4, r1
 8008538:	4616      	mov	r6, r2
 800853a:	d505      	bpl.n	8008548 <__swrite+0x1e>
 800853c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008540:	2302      	movs	r3, #2
 8008542:	2200      	movs	r2, #0
 8008544:	f002 f906 	bl	800a754 <_lseek_r>
 8008548:	89a3      	ldrh	r3, [r4, #12]
 800854a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800854e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008552:	81a3      	strh	r3, [r4, #12]
 8008554:	4632      	mov	r2, r6
 8008556:	463b      	mov	r3, r7
 8008558:	4628      	mov	r0, r5
 800855a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800855e:	f000 bee7 	b.w	8009330 <_write_r>

08008562 <__sseek>:
 8008562:	b510      	push	{r4, lr}
 8008564:	460c      	mov	r4, r1
 8008566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800856a:	f002 f8f3 	bl	800a754 <_lseek_r>
 800856e:	1c43      	adds	r3, r0, #1
 8008570:	89a3      	ldrh	r3, [r4, #12]
 8008572:	bf15      	itete	ne
 8008574:	6560      	strne	r0, [r4, #84]	; 0x54
 8008576:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800857a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800857e:	81a3      	strheq	r3, [r4, #12]
 8008580:	bf18      	it	ne
 8008582:	81a3      	strhne	r3, [r4, #12]
 8008584:	bd10      	pop	{r4, pc}

08008586 <__sclose>:
 8008586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800858a:	f000 bee3 	b.w	8009354 <_close_r>

0800858e <strchr>:
 800858e:	b2c9      	uxtb	r1, r1
 8008590:	4603      	mov	r3, r0
 8008592:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008596:	b11a      	cbz	r2, 80085a0 <strchr+0x12>
 8008598:	428a      	cmp	r2, r1
 800859a:	d1f9      	bne.n	8008590 <strchr+0x2>
 800859c:	4618      	mov	r0, r3
 800859e:	4770      	bx	lr
 80085a0:	2900      	cmp	r1, #0
 80085a2:	bf18      	it	ne
 80085a4:	2300      	movne	r3, #0
 80085a6:	e7f9      	b.n	800859c <strchr+0xe>

080085a8 <strstr>:
 80085a8:	780a      	ldrb	r2, [r1, #0]
 80085aa:	b570      	push	{r4, r5, r6, lr}
 80085ac:	b96a      	cbnz	r2, 80085ca <strstr+0x22>
 80085ae:	bd70      	pop	{r4, r5, r6, pc}
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d109      	bne.n	80085c8 <strstr+0x20>
 80085b4:	460c      	mov	r4, r1
 80085b6:	4605      	mov	r5, r0
 80085b8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d0f6      	beq.n	80085ae <strstr+0x6>
 80085c0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80085c4:	429e      	cmp	r6, r3
 80085c6:	d0f7      	beq.n	80085b8 <strstr+0x10>
 80085c8:	3001      	adds	r0, #1
 80085ca:	7803      	ldrb	r3, [r0, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1ef      	bne.n	80085b0 <strstr+0x8>
 80085d0:	4618      	mov	r0, r3
 80085d2:	e7ec      	b.n	80085ae <strstr+0x6>

080085d4 <sulp>:
 80085d4:	b570      	push	{r4, r5, r6, lr}
 80085d6:	4604      	mov	r4, r0
 80085d8:	460d      	mov	r5, r1
 80085da:	ec45 4b10 	vmov	d0, r4, r5
 80085de:	4616      	mov	r6, r2
 80085e0:	f002 fc64 	bl	800aeac <__ulp>
 80085e4:	ec51 0b10 	vmov	r0, r1, d0
 80085e8:	b17e      	cbz	r6, 800860a <sulp+0x36>
 80085ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80085ee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	dd09      	ble.n	800860a <sulp+0x36>
 80085f6:	051b      	lsls	r3, r3, #20
 80085f8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80085fc:	2400      	movs	r4, #0
 80085fe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008602:	4622      	mov	r2, r4
 8008604:	462b      	mov	r3, r5
 8008606:	f7f7 fff7 	bl	80005f8 <__aeabi_dmul>
 800860a:	bd70      	pop	{r4, r5, r6, pc}
 800860c:	0000      	movs	r0, r0
	...

08008610 <_strtod_l>:
 8008610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008614:	ed2d 8b02 	vpush	{d8}
 8008618:	b09d      	sub	sp, #116	; 0x74
 800861a:	461f      	mov	r7, r3
 800861c:	2300      	movs	r3, #0
 800861e:	9318      	str	r3, [sp, #96]	; 0x60
 8008620:	4ba2      	ldr	r3, [pc, #648]	; (80088ac <_strtod_l+0x29c>)
 8008622:	9213      	str	r2, [sp, #76]	; 0x4c
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	9305      	str	r3, [sp, #20]
 8008628:	4604      	mov	r4, r0
 800862a:	4618      	mov	r0, r3
 800862c:	4688      	mov	r8, r1
 800862e:	f7f7 fdcf 	bl	80001d0 <strlen>
 8008632:	f04f 0a00 	mov.w	sl, #0
 8008636:	4605      	mov	r5, r0
 8008638:	f04f 0b00 	mov.w	fp, #0
 800863c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008640:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008642:	781a      	ldrb	r2, [r3, #0]
 8008644:	2a2b      	cmp	r2, #43	; 0x2b
 8008646:	d04e      	beq.n	80086e6 <_strtod_l+0xd6>
 8008648:	d83b      	bhi.n	80086c2 <_strtod_l+0xb2>
 800864a:	2a0d      	cmp	r2, #13
 800864c:	d834      	bhi.n	80086b8 <_strtod_l+0xa8>
 800864e:	2a08      	cmp	r2, #8
 8008650:	d834      	bhi.n	80086bc <_strtod_l+0xac>
 8008652:	2a00      	cmp	r2, #0
 8008654:	d03e      	beq.n	80086d4 <_strtod_l+0xc4>
 8008656:	2300      	movs	r3, #0
 8008658:	930a      	str	r3, [sp, #40]	; 0x28
 800865a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800865c:	7833      	ldrb	r3, [r6, #0]
 800865e:	2b30      	cmp	r3, #48	; 0x30
 8008660:	f040 80b0 	bne.w	80087c4 <_strtod_l+0x1b4>
 8008664:	7873      	ldrb	r3, [r6, #1]
 8008666:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800866a:	2b58      	cmp	r3, #88	; 0x58
 800866c:	d168      	bne.n	8008740 <_strtod_l+0x130>
 800866e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008670:	9301      	str	r3, [sp, #4]
 8008672:	ab18      	add	r3, sp, #96	; 0x60
 8008674:	9702      	str	r7, [sp, #8]
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	4a8d      	ldr	r2, [pc, #564]	; (80088b0 <_strtod_l+0x2a0>)
 800867a:	ab19      	add	r3, sp, #100	; 0x64
 800867c:	a917      	add	r1, sp, #92	; 0x5c
 800867e:	4620      	mov	r0, r4
 8008680:	f001 fd5c 	bl	800a13c <__gethex>
 8008684:	f010 0707 	ands.w	r7, r0, #7
 8008688:	4605      	mov	r5, r0
 800868a:	d005      	beq.n	8008698 <_strtod_l+0x88>
 800868c:	2f06      	cmp	r7, #6
 800868e:	d12c      	bne.n	80086ea <_strtod_l+0xda>
 8008690:	3601      	adds	r6, #1
 8008692:	2300      	movs	r3, #0
 8008694:	9617      	str	r6, [sp, #92]	; 0x5c
 8008696:	930a      	str	r3, [sp, #40]	; 0x28
 8008698:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800869a:	2b00      	cmp	r3, #0
 800869c:	f040 8590 	bne.w	80091c0 <_strtod_l+0xbb0>
 80086a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086a2:	b1eb      	cbz	r3, 80086e0 <_strtod_l+0xd0>
 80086a4:	4652      	mov	r2, sl
 80086a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80086aa:	ec43 2b10 	vmov	d0, r2, r3
 80086ae:	b01d      	add	sp, #116	; 0x74
 80086b0:	ecbd 8b02 	vpop	{d8}
 80086b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b8:	2a20      	cmp	r2, #32
 80086ba:	d1cc      	bne.n	8008656 <_strtod_l+0x46>
 80086bc:	3301      	adds	r3, #1
 80086be:	9317      	str	r3, [sp, #92]	; 0x5c
 80086c0:	e7be      	b.n	8008640 <_strtod_l+0x30>
 80086c2:	2a2d      	cmp	r2, #45	; 0x2d
 80086c4:	d1c7      	bne.n	8008656 <_strtod_l+0x46>
 80086c6:	2201      	movs	r2, #1
 80086c8:	920a      	str	r2, [sp, #40]	; 0x28
 80086ca:	1c5a      	adds	r2, r3, #1
 80086cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80086ce:	785b      	ldrb	r3, [r3, #1]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1c2      	bne.n	800865a <_strtod_l+0x4a>
 80086d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80086d6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80086da:	2b00      	cmp	r3, #0
 80086dc:	f040 856e 	bne.w	80091bc <_strtod_l+0xbac>
 80086e0:	4652      	mov	r2, sl
 80086e2:	465b      	mov	r3, fp
 80086e4:	e7e1      	b.n	80086aa <_strtod_l+0x9a>
 80086e6:	2200      	movs	r2, #0
 80086e8:	e7ee      	b.n	80086c8 <_strtod_l+0xb8>
 80086ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80086ec:	b13a      	cbz	r2, 80086fe <_strtod_l+0xee>
 80086ee:	2135      	movs	r1, #53	; 0x35
 80086f0:	a81a      	add	r0, sp, #104	; 0x68
 80086f2:	f002 fce6 	bl	800b0c2 <__copybits>
 80086f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80086f8:	4620      	mov	r0, r4
 80086fa:	f002 f8a5 	bl	800a848 <_Bfree>
 80086fe:	3f01      	subs	r7, #1
 8008700:	2f04      	cmp	r7, #4
 8008702:	d806      	bhi.n	8008712 <_strtod_l+0x102>
 8008704:	e8df f007 	tbb	[pc, r7]
 8008708:	1714030a 	.word	0x1714030a
 800870c:	0a          	.byte	0x0a
 800870d:	00          	.byte	0x00
 800870e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008712:	0728      	lsls	r0, r5, #28
 8008714:	d5c0      	bpl.n	8008698 <_strtod_l+0x88>
 8008716:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800871a:	e7bd      	b.n	8008698 <_strtod_l+0x88>
 800871c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008720:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008722:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008726:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800872a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800872e:	e7f0      	b.n	8008712 <_strtod_l+0x102>
 8008730:	f8df b180 	ldr.w	fp, [pc, #384]	; 80088b4 <_strtod_l+0x2a4>
 8008734:	e7ed      	b.n	8008712 <_strtod_l+0x102>
 8008736:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800873a:	f04f 3aff 	mov.w	sl, #4294967295
 800873e:	e7e8      	b.n	8008712 <_strtod_l+0x102>
 8008740:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008742:	1c5a      	adds	r2, r3, #1
 8008744:	9217      	str	r2, [sp, #92]	; 0x5c
 8008746:	785b      	ldrb	r3, [r3, #1]
 8008748:	2b30      	cmp	r3, #48	; 0x30
 800874a:	d0f9      	beq.n	8008740 <_strtod_l+0x130>
 800874c:	2b00      	cmp	r3, #0
 800874e:	d0a3      	beq.n	8008698 <_strtod_l+0x88>
 8008750:	2301      	movs	r3, #1
 8008752:	f04f 0900 	mov.w	r9, #0
 8008756:	9304      	str	r3, [sp, #16]
 8008758:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800875a:	9308      	str	r3, [sp, #32]
 800875c:	f8cd 901c 	str.w	r9, [sp, #28]
 8008760:	464f      	mov	r7, r9
 8008762:	220a      	movs	r2, #10
 8008764:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008766:	7806      	ldrb	r6, [r0, #0]
 8008768:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800876c:	b2d9      	uxtb	r1, r3
 800876e:	2909      	cmp	r1, #9
 8008770:	d92a      	bls.n	80087c8 <_strtod_l+0x1b8>
 8008772:	9905      	ldr	r1, [sp, #20]
 8008774:	462a      	mov	r2, r5
 8008776:	f003 fac3 	bl	800bd00 <strncmp>
 800877a:	b398      	cbz	r0, 80087e4 <_strtod_l+0x1d4>
 800877c:	2000      	movs	r0, #0
 800877e:	4632      	mov	r2, r6
 8008780:	463d      	mov	r5, r7
 8008782:	9005      	str	r0, [sp, #20]
 8008784:	4603      	mov	r3, r0
 8008786:	2a65      	cmp	r2, #101	; 0x65
 8008788:	d001      	beq.n	800878e <_strtod_l+0x17e>
 800878a:	2a45      	cmp	r2, #69	; 0x45
 800878c:	d118      	bne.n	80087c0 <_strtod_l+0x1b0>
 800878e:	b91d      	cbnz	r5, 8008798 <_strtod_l+0x188>
 8008790:	9a04      	ldr	r2, [sp, #16]
 8008792:	4302      	orrs	r2, r0
 8008794:	d09e      	beq.n	80086d4 <_strtod_l+0xc4>
 8008796:	2500      	movs	r5, #0
 8008798:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800879c:	f108 0201 	add.w	r2, r8, #1
 80087a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80087a2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80087a6:	2a2b      	cmp	r2, #43	; 0x2b
 80087a8:	d075      	beq.n	8008896 <_strtod_l+0x286>
 80087aa:	2a2d      	cmp	r2, #45	; 0x2d
 80087ac:	d07b      	beq.n	80088a6 <_strtod_l+0x296>
 80087ae:	f04f 0c00 	mov.w	ip, #0
 80087b2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80087b6:	2909      	cmp	r1, #9
 80087b8:	f240 8082 	bls.w	80088c0 <_strtod_l+0x2b0>
 80087bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80087c0:	2600      	movs	r6, #0
 80087c2:	e09d      	b.n	8008900 <_strtod_l+0x2f0>
 80087c4:	2300      	movs	r3, #0
 80087c6:	e7c4      	b.n	8008752 <_strtod_l+0x142>
 80087c8:	2f08      	cmp	r7, #8
 80087ca:	bfd8      	it	le
 80087cc:	9907      	ldrle	r1, [sp, #28]
 80087ce:	f100 0001 	add.w	r0, r0, #1
 80087d2:	bfda      	itte	le
 80087d4:	fb02 3301 	mlale	r3, r2, r1, r3
 80087d8:	9307      	strle	r3, [sp, #28]
 80087da:	fb02 3909 	mlagt	r9, r2, r9, r3
 80087de:	3701      	adds	r7, #1
 80087e0:	9017      	str	r0, [sp, #92]	; 0x5c
 80087e2:	e7bf      	b.n	8008764 <_strtod_l+0x154>
 80087e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087e6:	195a      	adds	r2, r3, r5
 80087e8:	9217      	str	r2, [sp, #92]	; 0x5c
 80087ea:	5d5a      	ldrb	r2, [r3, r5]
 80087ec:	2f00      	cmp	r7, #0
 80087ee:	d037      	beq.n	8008860 <_strtod_l+0x250>
 80087f0:	9005      	str	r0, [sp, #20]
 80087f2:	463d      	mov	r5, r7
 80087f4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80087f8:	2b09      	cmp	r3, #9
 80087fa:	d912      	bls.n	8008822 <_strtod_l+0x212>
 80087fc:	2301      	movs	r3, #1
 80087fe:	e7c2      	b.n	8008786 <_strtod_l+0x176>
 8008800:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008802:	1c5a      	adds	r2, r3, #1
 8008804:	9217      	str	r2, [sp, #92]	; 0x5c
 8008806:	785a      	ldrb	r2, [r3, #1]
 8008808:	3001      	adds	r0, #1
 800880a:	2a30      	cmp	r2, #48	; 0x30
 800880c:	d0f8      	beq.n	8008800 <_strtod_l+0x1f0>
 800880e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008812:	2b08      	cmp	r3, #8
 8008814:	f200 84d9 	bhi.w	80091ca <_strtod_l+0xbba>
 8008818:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800881a:	9005      	str	r0, [sp, #20]
 800881c:	2000      	movs	r0, #0
 800881e:	9308      	str	r3, [sp, #32]
 8008820:	4605      	mov	r5, r0
 8008822:	3a30      	subs	r2, #48	; 0x30
 8008824:	f100 0301 	add.w	r3, r0, #1
 8008828:	d014      	beq.n	8008854 <_strtod_l+0x244>
 800882a:	9905      	ldr	r1, [sp, #20]
 800882c:	4419      	add	r1, r3
 800882e:	9105      	str	r1, [sp, #20]
 8008830:	462b      	mov	r3, r5
 8008832:	eb00 0e05 	add.w	lr, r0, r5
 8008836:	210a      	movs	r1, #10
 8008838:	4573      	cmp	r3, lr
 800883a:	d113      	bne.n	8008864 <_strtod_l+0x254>
 800883c:	182b      	adds	r3, r5, r0
 800883e:	2b08      	cmp	r3, #8
 8008840:	f105 0501 	add.w	r5, r5, #1
 8008844:	4405      	add	r5, r0
 8008846:	dc1c      	bgt.n	8008882 <_strtod_l+0x272>
 8008848:	9907      	ldr	r1, [sp, #28]
 800884a:	230a      	movs	r3, #10
 800884c:	fb03 2301 	mla	r3, r3, r1, r2
 8008850:	9307      	str	r3, [sp, #28]
 8008852:	2300      	movs	r3, #0
 8008854:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008856:	1c51      	adds	r1, r2, #1
 8008858:	9117      	str	r1, [sp, #92]	; 0x5c
 800885a:	7852      	ldrb	r2, [r2, #1]
 800885c:	4618      	mov	r0, r3
 800885e:	e7c9      	b.n	80087f4 <_strtod_l+0x1e4>
 8008860:	4638      	mov	r0, r7
 8008862:	e7d2      	b.n	800880a <_strtod_l+0x1fa>
 8008864:	2b08      	cmp	r3, #8
 8008866:	dc04      	bgt.n	8008872 <_strtod_l+0x262>
 8008868:	9e07      	ldr	r6, [sp, #28]
 800886a:	434e      	muls	r6, r1
 800886c:	9607      	str	r6, [sp, #28]
 800886e:	3301      	adds	r3, #1
 8008870:	e7e2      	b.n	8008838 <_strtod_l+0x228>
 8008872:	f103 0c01 	add.w	ip, r3, #1
 8008876:	f1bc 0f10 	cmp.w	ip, #16
 800887a:	bfd8      	it	le
 800887c:	fb01 f909 	mulle.w	r9, r1, r9
 8008880:	e7f5      	b.n	800886e <_strtod_l+0x25e>
 8008882:	2d10      	cmp	r5, #16
 8008884:	bfdc      	itt	le
 8008886:	230a      	movle	r3, #10
 8008888:	fb03 2909 	mlale	r9, r3, r9, r2
 800888c:	e7e1      	b.n	8008852 <_strtod_l+0x242>
 800888e:	2300      	movs	r3, #0
 8008890:	9305      	str	r3, [sp, #20]
 8008892:	2301      	movs	r3, #1
 8008894:	e77c      	b.n	8008790 <_strtod_l+0x180>
 8008896:	f04f 0c00 	mov.w	ip, #0
 800889a:	f108 0202 	add.w	r2, r8, #2
 800889e:	9217      	str	r2, [sp, #92]	; 0x5c
 80088a0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80088a4:	e785      	b.n	80087b2 <_strtod_l+0x1a2>
 80088a6:	f04f 0c01 	mov.w	ip, #1
 80088aa:	e7f6      	b.n	800889a <_strtod_l+0x28a>
 80088ac:	0800cc28 	.word	0x0800cc28
 80088b0:	0800c9dc 	.word	0x0800c9dc
 80088b4:	7ff00000 	.word	0x7ff00000
 80088b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80088ba:	1c51      	adds	r1, r2, #1
 80088bc:	9117      	str	r1, [sp, #92]	; 0x5c
 80088be:	7852      	ldrb	r2, [r2, #1]
 80088c0:	2a30      	cmp	r2, #48	; 0x30
 80088c2:	d0f9      	beq.n	80088b8 <_strtod_l+0x2a8>
 80088c4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80088c8:	2908      	cmp	r1, #8
 80088ca:	f63f af79 	bhi.w	80087c0 <_strtod_l+0x1b0>
 80088ce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80088d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80088d4:	9206      	str	r2, [sp, #24]
 80088d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80088d8:	1c51      	adds	r1, r2, #1
 80088da:	9117      	str	r1, [sp, #92]	; 0x5c
 80088dc:	7852      	ldrb	r2, [r2, #1]
 80088de:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80088e2:	2e09      	cmp	r6, #9
 80088e4:	d937      	bls.n	8008956 <_strtod_l+0x346>
 80088e6:	9e06      	ldr	r6, [sp, #24]
 80088e8:	1b89      	subs	r1, r1, r6
 80088ea:	2908      	cmp	r1, #8
 80088ec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80088f0:	dc02      	bgt.n	80088f8 <_strtod_l+0x2e8>
 80088f2:	4576      	cmp	r6, lr
 80088f4:	bfa8      	it	ge
 80088f6:	4676      	movge	r6, lr
 80088f8:	f1bc 0f00 	cmp.w	ip, #0
 80088fc:	d000      	beq.n	8008900 <_strtod_l+0x2f0>
 80088fe:	4276      	negs	r6, r6
 8008900:	2d00      	cmp	r5, #0
 8008902:	d14d      	bne.n	80089a0 <_strtod_l+0x390>
 8008904:	9904      	ldr	r1, [sp, #16]
 8008906:	4301      	orrs	r1, r0
 8008908:	f47f aec6 	bne.w	8008698 <_strtod_l+0x88>
 800890c:	2b00      	cmp	r3, #0
 800890e:	f47f aee1 	bne.w	80086d4 <_strtod_l+0xc4>
 8008912:	2a69      	cmp	r2, #105	; 0x69
 8008914:	d027      	beq.n	8008966 <_strtod_l+0x356>
 8008916:	dc24      	bgt.n	8008962 <_strtod_l+0x352>
 8008918:	2a49      	cmp	r2, #73	; 0x49
 800891a:	d024      	beq.n	8008966 <_strtod_l+0x356>
 800891c:	2a4e      	cmp	r2, #78	; 0x4e
 800891e:	f47f aed9 	bne.w	80086d4 <_strtod_l+0xc4>
 8008922:	499f      	ldr	r1, [pc, #636]	; (8008ba0 <_strtod_l+0x590>)
 8008924:	a817      	add	r0, sp, #92	; 0x5c
 8008926:	f001 fe61 	bl	800a5ec <__match>
 800892a:	2800      	cmp	r0, #0
 800892c:	f43f aed2 	beq.w	80086d4 <_strtod_l+0xc4>
 8008930:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	2b28      	cmp	r3, #40	; 0x28
 8008936:	d12d      	bne.n	8008994 <_strtod_l+0x384>
 8008938:	499a      	ldr	r1, [pc, #616]	; (8008ba4 <_strtod_l+0x594>)
 800893a:	aa1a      	add	r2, sp, #104	; 0x68
 800893c:	a817      	add	r0, sp, #92	; 0x5c
 800893e:	f001 fe69 	bl	800a614 <__hexnan>
 8008942:	2805      	cmp	r0, #5
 8008944:	d126      	bne.n	8008994 <_strtod_l+0x384>
 8008946:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008948:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800894c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008950:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008954:	e6a0      	b.n	8008698 <_strtod_l+0x88>
 8008956:	210a      	movs	r1, #10
 8008958:	fb01 2e0e 	mla	lr, r1, lr, r2
 800895c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008960:	e7b9      	b.n	80088d6 <_strtod_l+0x2c6>
 8008962:	2a6e      	cmp	r2, #110	; 0x6e
 8008964:	e7db      	b.n	800891e <_strtod_l+0x30e>
 8008966:	4990      	ldr	r1, [pc, #576]	; (8008ba8 <_strtod_l+0x598>)
 8008968:	a817      	add	r0, sp, #92	; 0x5c
 800896a:	f001 fe3f 	bl	800a5ec <__match>
 800896e:	2800      	cmp	r0, #0
 8008970:	f43f aeb0 	beq.w	80086d4 <_strtod_l+0xc4>
 8008974:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008976:	498d      	ldr	r1, [pc, #564]	; (8008bac <_strtod_l+0x59c>)
 8008978:	3b01      	subs	r3, #1
 800897a:	a817      	add	r0, sp, #92	; 0x5c
 800897c:	9317      	str	r3, [sp, #92]	; 0x5c
 800897e:	f001 fe35 	bl	800a5ec <__match>
 8008982:	b910      	cbnz	r0, 800898a <_strtod_l+0x37a>
 8008984:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008986:	3301      	adds	r3, #1
 8008988:	9317      	str	r3, [sp, #92]	; 0x5c
 800898a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008bbc <_strtod_l+0x5ac>
 800898e:	f04f 0a00 	mov.w	sl, #0
 8008992:	e681      	b.n	8008698 <_strtod_l+0x88>
 8008994:	4886      	ldr	r0, [pc, #536]	; (8008bb0 <_strtod_l+0x5a0>)
 8008996:	f003 f963 	bl	800bc60 <nan>
 800899a:	ec5b ab10 	vmov	sl, fp, d0
 800899e:	e67b      	b.n	8008698 <_strtod_l+0x88>
 80089a0:	9b05      	ldr	r3, [sp, #20]
 80089a2:	9807      	ldr	r0, [sp, #28]
 80089a4:	1af3      	subs	r3, r6, r3
 80089a6:	2f00      	cmp	r7, #0
 80089a8:	bf08      	it	eq
 80089aa:	462f      	moveq	r7, r5
 80089ac:	2d10      	cmp	r5, #16
 80089ae:	9306      	str	r3, [sp, #24]
 80089b0:	46a8      	mov	r8, r5
 80089b2:	bfa8      	it	ge
 80089b4:	f04f 0810 	movge.w	r8, #16
 80089b8:	f7f7 fda4 	bl	8000504 <__aeabi_ui2d>
 80089bc:	2d09      	cmp	r5, #9
 80089be:	4682      	mov	sl, r0
 80089c0:	468b      	mov	fp, r1
 80089c2:	dd13      	ble.n	80089ec <_strtod_l+0x3dc>
 80089c4:	4b7b      	ldr	r3, [pc, #492]	; (8008bb4 <_strtod_l+0x5a4>)
 80089c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80089ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80089ce:	f7f7 fe13 	bl	80005f8 <__aeabi_dmul>
 80089d2:	4682      	mov	sl, r0
 80089d4:	4648      	mov	r0, r9
 80089d6:	468b      	mov	fp, r1
 80089d8:	f7f7 fd94 	bl	8000504 <__aeabi_ui2d>
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4650      	mov	r0, sl
 80089e2:	4659      	mov	r1, fp
 80089e4:	f7f7 fc52 	bl	800028c <__adddf3>
 80089e8:	4682      	mov	sl, r0
 80089ea:	468b      	mov	fp, r1
 80089ec:	2d0f      	cmp	r5, #15
 80089ee:	dc38      	bgt.n	8008a62 <_strtod_l+0x452>
 80089f0:	9b06      	ldr	r3, [sp, #24]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	f43f ae50 	beq.w	8008698 <_strtod_l+0x88>
 80089f8:	dd24      	ble.n	8008a44 <_strtod_l+0x434>
 80089fa:	2b16      	cmp	r3, #22
 80089fc:	dc0b      	bgt.n	8008a16 <_strtod_l+0x406>
 80089fe:	496d      	ldr	r1, [pc, #436]	; (8008bb4 <_strtod_l+0x5a4>)
 8008a00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008a04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a08:	4652      	mov	r2, sl
 8008a0a:	465b      	mov	r3, fp
 8008a0c:	f7f7 fdf4 	bl	80005f8 <__aeabi_dmul>
 8008a10:	4682      	mov	sl, r0
 8008a12:	468b      	mov	fp, r1
 8008a14:	e640      	b.n	8008698 <_strtod_l+0x88>
 8008a16:	9a06      	ldr	r2, [sp, #24]
 8008a18:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	db20      	blt.n	8008a62 <_strtod_l+0x452>
 8008a20:	4c64      	ldr	r4, [pc, #400]	; (8008bb4 <_strtod_l+0x5a4>)
 8008a22:	f1c5 050f 	rsb	r5, r5, #15
 8008a26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008a2a:	4652      	mov	r2, sl
 8008a2c:	465b      	mov	r3, fp
 8008a2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a32:	f7f7 fde1 	bl	80005f8 <__aeabi_dmul>
 8008a36:	9b06      	ldr	r3, [sp, #24]
 8008a38:	1b5d      	subs	r5, r3, r5
 8008a3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008a3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008a42:	e7e3      	b.n	8008a0c <_strtod_l+0x3fc>
 8008a44:	9b06      	ldr	r3, [sp, #24]
 8008a46:	3316      	adds	r3, #22
 8008a48:	db0b      	blt.n	8008a62 <_strtod_l+0x452>
 8008a4a:	9b05      	ldr	r3, [sp, #20]
 8008a4c:	1b9e      	subs	r6, r3, r6
 8008a4e:	4b59      	ldr	r3, [pc, #356]	; (8008bb4 <_strtod_l+0x5a4>)
 8008a50:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008a54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008a58:	4650      	mov	r0, sl
 8008a5a:	4659      	mov	r1, fp
 8008a5c:	f7f7 fef6 	bl	800084c <__aeabi_ddiv>
 8008a60:	e7d6      	b.n	8008a10 <_strtod_l+0x400>
 8008a62:	9b06      	ldr	r3, [sp, #24]
 8008a64:	eba5 0808 	sub.w	r8, r5, r8
 8008a68:	4498      	add	r8, r3
 8008a6a:	f1b8 0f00 	cmp.w	r8, #0
 8008a6e:	dd74      	ble.n	8008b5a <_strtod_l+0x54a>
 8008a70:	f018 030f 	ands.w	r3, r8, #15
 8008a74:	d00a      	beq.n	8008a8c <_strtod_l+0x47c>
 8008a76:	494f      	ldr	r1, [pc, #316]	; (8008bb4 <_strtod_l+0x5a4>)
 8008a78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008a7c:	4652      	mov	r2, sl
 8008a7e:	465b      	mov	r3, fp
 8008a80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a84:	f7f7 fdb8 	bl	80005f8 <__aeabi_dmul>
 8008a88:	4682      	mov	sl, r0
 8008a8a:	468b      	mov	fp, r1
 8008a8c:	f038 080f 	bics.w	r8, r8, #15
 8008a90:	d04f      	beq.n	8008b32 <_strtod_l+0x522>
 8008a92:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008a96:	dd22      	ble.n	8008ade <_strtod_l+0x4ce>
 8008a98:	2500      	movs	r5, #0
 8008a9a:	462e      	mov	r6, r5
 8008a9c:	9507      	str	r5, [sp, #28]
 8008a9e:	9505      	str	r5, [sp, #20]
 8008aa0:	2322      	movs	r3, #34	; 0x22
 8008aa2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008bbc <_strtod_l+0x5ac>
 8008aa6:	6023      	str	r3, [r4, #0]
 8008aa8:	f04f 0a00 	mov.w	sl, #0
 8008aac:	9b07      	ldr	r3, [sp, #28]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f43f adf2 	beq.w	8008698 <_strtod_l+0x88>
 8008ab4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f001 fec6 	bl	800a848 <_Bfree>
 8008abc:	9905      	ldr	r1, [sp, #20]
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f001 fec2 	bl	800a848 <_Bfree>
 8008ac4:	4631      	mov	r1, r6
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f001 febe 	bl	800a848 <_Bfree>
 8008acc:	9907      	ldr	r1, [sp, #28]
 8008ace:	4620      	mov	r0, r4
 8008ad0:	f001 feba 	bl	800a848 <_Bfree>
 8008ad4:	4629      	mov	r1, r5
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f001 feb6 	bl	800a848 <_Bfree>
 8008adc:	e5dc      	b.n	8008698 <_strtod_l+0x88>
 8008ade:	4b36      	ldr	r3, [pc, #216]	; (8008bb8 <_strtod_l+0x5a8>)
 8008ae0:	9304      	str	r3, [sp, #16]
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008ae8:	4650      	mov	r0, sl
 8008aea:	4659      	mov	r1, fp
 8008aec:	4699      	mov	r9, r3
 8008aee:	f1b8 0f01 	cmp.w	r8, #1
 8008af2:	dc21      	bgt.n	8008b38 <_strtod_l+0x528>
 8008af4:	b10b      	cbz	r3, 8008afa <_strtod_l+0x4ea>
 8008af6:	4682      	mov	sl, r0
 8008af8:	468b      	mov	fp, r1
 8008afa:	4b2f      	ldr	r3, [pc, #188]	; (8008bb8 <_strtod_l+0x5a8>)
 8008afc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008b00:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008b04:	4652      	mov	r2, sl
 8008b06:	465b      	mov	r3, fp
 8008b08:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008b0c:	f7f7 fd74 	bl	80005f8 <__aeabi_dmul>
 8008b10:	4b2a      	ldr	r3, [pc, #168]	; (8008bbc <_strtod_l+0x5ac>)
 8008b12:	460a      	mov	r2, r1
 8008b14:	400b      	ands	r3, r1
 8008b16:	492a      	ldr	r1, [pc, #168]	; (8008bc0 <_strtod_l+0x5b0>)
 8008b18:	428b      	cmp	r3, r1
 8008b1a:	4682      	mov	sl, r0
 8008b1c:	d8bc      	bhi.n	8008a98 <_strtod_l+0x488>
 8008b1e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008b22:	428b      	cmp	r3, r1
 8008b24:	bf86      	itte	hi
 8008b26:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008bc4 <_strtod_l+0x5b4>
 8008b2a:	f04f 3aff 	movhi.w	sl, #4294967295
 8008b2e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008b32:	2300      	movs	r3, #0
 8008b34:	9304      	str	r3, [sp, #16]
 8008b36:	e084      	b.n	8008c42 <_strtod_l+0x632>
 8008b38:	f018 0f01 	tst.w	r8, #1
 8008b3c:	d005      	beq.n	8008b4a <_strtod_l+0x53a>
 8008b3e:	9b04      	ldr	r3, [sp, #16]
 8008b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b44:	f7f7 fd58 	bl	80005f8 <__aeabi_dmul>
 8008b48:	2301      	movs	r3, #1
 8008b4a:	9a04      	ldr	r2, [sp, #16]
 8008b4c:	3208      	adds	r2, #8
 8008b4e:	f109 0901 	add.w	r9, r9, #1
 8008b52:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008b56:	9204      	str	r2, [sp, #16]
 8008b58:	e7c9      	b.n	8008aee <_strtod_l+0x4de>
 8008b5a:	d0ea      	beq.n	8008b32 <_strtod_l+0x522>
 8008b5c:	f1c8 0800 	rsb	r8, r8, #0
 8008b60:	f018 020f 	ands.w	r2, r8, #15
 8008b64:	d00a      	beq.n	8008b7c <_strtod_l+0x56c>
 8008b66:	4b13      	ldr	r3, [pc, #76]	; (8008bb4 <_strtod_l+0x5a4>)
 8008b68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b6c:	4650      	mov	r0, sl
 8008b6e:	4659      	mov	r1, fp
 8008b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b74:	f7f7 fe6a 	bl	800084c <__aeabi_ddiv>
 8008b78:	4682      	mov	sl, r0
 8008b7a:	468b      	mov	fp, r1
 8008b7c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008b80:	d0d7      	beq.n	8008b32 <_strtod_l+0x522>
 8008b82:	f1b8 0f1f 	cmp.w	r8, #31
 8008b86:	dd1f      	ble.n	8008bc8 <_strtod_l+0x5b8>
 8008b88:	2500      	movs	r5, #0
 8008b8a:	462e      	mov	r6, r5
 8008b8c:	9507      	str	r5, [sp, #28]
 8008b8e:	9505      	str	r5, [sp, #20]
 8008b90:	2322      	movs	r3, #34	; 0x22
 8008b92:	f04f 0a00 	mov.w	sl, #0
 8008b96:	f04f 0b00 	mov.w	fp, #0
 8008b9a:	6023      	str	r3, [r4, #0]
 8008b9c:	e786      	b.n	8008aac <_strtod_l+0x49c>
 8008b9e:	bf00      	nop
 8008ba0:	0800c9b1 	.word	0x0800c9b1
 8008ba4:	0800c9f0 	.word	0x0800c9f0
 8008ba8:	0800c9a9 	.word	0x0800c9a9
 8008bac:	0800cb34 	.word	0x0800cb34
 8008bb0:	0800cdfb 	.word	0x0800cdfb
 8008bb4:	0800ccc0 	.word	0x0800ccc0
 8008bb8:	0800cc98 	.word	0x0800cc98
 8008bbc:	7ff00000 	.word	0x7ff00000
 8008bc0:	7ca00000 	.word	0x7ca00000
 8008bc4:	7fefffff 	.word	0x7fefffff
 8008bc8:	f018 0310 	ands.w	r3, r8, #16
 8008bcc:	bf18      	it	ne
 8008bce:	236a      	movne	r3, #106	; 0x6a
 8008bd0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008f80 <_strtod_l+0x970>
 8008bd4:	9304      	str	r3, [sp, #16]
 8008bd6:	4650      	mov	r0, sl
 8008bd8:	4659      	mov	r1, fp
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f018 0f01 	tst.w	r8, #1
 8008be0:	d004      	beq.n	8008bec <_strtod_l+0x5dc>
 8008be2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008be6:	f7f7 fd07 	bl	80005f8 <__aeabi_dmul>
 8008bea:	2301      	movs	r3, #1
 8008bec:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008bf0:	f109 0908 	add.w	r9, r9, #8
 8008bf4:	d1f2      	bne.n	8008bdc <_strtod_l+0x5cc>
 8008bf6:	b10b      	cbz	r3, 8008bfc <_strtod_l+0x5ec>
 8008bf8:	4682      	mov	sl, r0
 8008bfa:	468b      	mov	fp, r1
 8008bfc:	9b04      	ldr	r3, [sp, #16]
 8008bfe:	b1c3      	cbz	r3, 8008c32 <_strtod_l+0x622>
 8008c00:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008c04:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	4659      	mov	r1, fp
 8008c0c:	dd11      	ble.n	8008c32 <_strtod_l+0x622>
 8008c0e:	2b1f      	cmp	r3, #31
 8008c10:	f340 8124 	ble.w	8008e5c <_strtod_l+0x84c>
 8008c14:	2b34      	cmp	r3, #52	; 0x34
 8008c16:	bfde      	ittt	le
 8008c18:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008c1c:	f04f 33ff 	movle.w	r3, #4294967295
 8008c20:	fa03 f202 	lslle.w	r2, r3, r2
 8008c24:	f04f 0a00 	mov.w	sl, #0
 8008c28:	bfcc      	ite	gt
 8008c2a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008c2e:	ea02 0b01 	andle.w	fp, r2, r1
 8008c32:	2200      	movs	r2, #0
 8008c34:	2300      	movs	r3, #0
 8008c36:	4650      	mov	r0, sl
 8008c38:	4659      	mov	r1, fp
 8008c3a:	f7f7 ff45 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	d1a2      	bne.n	8008b88 <_strtod_l+0x578>
 8008c42:	9b07      	ldr	r3, [sp, #28]
 8008c44:	9300      	str	r3, [sp, #0]
 8008c46:	9908      	ldr	r1, [sp, #32]
 8008c48:	462b      	mov	r3, r5
 8008c4a:	463a      	mov	r2, r7
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	f001 fe63 	bl	800a918 <__s2b>
 8008c52:	9007      	str	r0, [sp, #28]
 8008c54:	2800      	cmp	r0, #0
 8008c56:	f43f af1f 	beq.w	8008a98 <_strtod_l+0x488>
 8008c5a:	9b05      	ldr	r3, [sp, #20]
 8008c5c:	1b9e      	subs	r6, r3, r6
 8008c5e:	9b06      	ldr	r3, [sp, #24]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	bfb4      	ite	lt
 8008c64:	4633      	movlt	r3, r6
 8008c66:	2300      	movge	r3, #0
 8008c68:	930c      	str	r3, [sp, #48]	; 0x30
 8008c6a:	9b06      	ldr	r3, [sp, #24]
 8008c6c:	2500      	movs	r5, #0
 8008c6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008c72:	9312      	str	r3, [sp, #72]	; 0x48
 8008c74:	462e      	mov	r6, r5
 8008c76:	9b07      	ldr	r3, [sp, #28]
 8008c78:	4620      	mov	r0, r4
 8008c7a:	6859      	ldr	r1, [r3, #4]
 8008c7c:	f001 fda4 	bl	800a7c8 <_Balloc>
 8008c80:	9005      	str	r0, [sp, #20]
 8008c82:	2800      	cmp	r0, #0
 8008c84:	f43f af0c 	beq.w	8008aa0 <_strtod_l+0x490>
 8008c88:	9b07      	ldr	r3, [sp, #28]
 8008c8a:	691a      	ldr	r2, [r3, #16]
 8008c8c:	3202      	adds	r2, #2
 8008c8e:	f103 010c 	add.w	r1, r3, #12
 8008c92:	0092      	lsls	r2, r2, #2
 8008c94:	300c      	adds	r0, #12
 8008c96:	f001 fd89 	bl	800a7ac <memcpy>
 8008c9a:	ec4b ab10 	vmov	d0, sl, fp
 8008c9e:	aa1a      	add	r2, sp, #104	; 0x68
 8008ca0:	a919      	add	r1, sp, #100	; 0x64
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	f002 f97e 	bl	800afa4 <__d2b>
 8008ca8:	ec4b ab18 	vmov	d8, sl, fp
 8008cac:	9018      	str	r0, [sp, #96]	; 0x60
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	f43f aef6 	beq.w	8008aa0 <_strtod_l+0x490>
 8008cb4:	2101      	movs	r1, #1
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	f001 fec8 	bl	800aa4c <__i2b>
 8008cbc:	4606      	mov	r6, r0
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	f43f aeee 	beq.w	8008aa0 <_strtod_l+0x490>
 8008cc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008cc6:	9904      	ldr	r1, [sp, #16]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	bfab      	itete	ge
 8008ccc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008cce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008cd0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008cd2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008cd6:	bfac      	ite	ge
 8008cd8:	eb03 0902 	addge.w	r9, r3, r2
 8008cdc:	1ad7      	sublt	r7, r2, r3
 8008cde:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008ce0:	eba3 0801 	sub.w	r8, r3, r1
 8008ce4:	4490      	add	r8, r2
 8008ce6:	4ba1      	ldr	r3, [pc, #644]	; (8008f6c <_strtod_l+0x95c>)
 8008ce8:	f108 38ff 	add.w	r8, r8, #4294967295
 8008cec:	4598      	cmp	r8, r3
 8008cee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008cf2:	f280 80c7 	bge.w	8008e84 <_strtod_l+0x874>
 8008cf6:	eba3 0308 	sub.w	r3, r3, r8
 8008cfa:	2b1f      	cmp	r3, #31
 8008cfc:	eba2 0203 	sub.w	r2, r2, r3
 8008d00:	f04f 0101 	mov.w	r1, #1
 8008d04:	f300 80b1 	bgt.w	8008e6a <_strtod_l+0x85a>
 8008d08:	fa01 f303 	lsl.w	r3, r1, r3
 8008d0c:	930d      	str	r3, [sp, #52]	; 0x34
 8008d0e:	2300      	movs	r3, #0
 8008d10:	9308      	str	r3, [sp, #32]
 8008d12:	eb09 0802 	add.w	r8, r9, r2
 8008d16:	9b04      	ldr	r3, [sp, #16]
 8008d18:	45c1      	cmp	r9, r8
 8008d1a:	4417      	add	r7, r2
 8008d1c:	441f      	add	r7, r3
 8008d1e:	464b      	mov	r3, r9
 8008d20:	bfa8      	it	ge
 8008d22:	4643      	movge	r3, r8
 8008d24:	42bb      	cmp	r3, r7
 8008d26:	bfa8      	it	ge
 8008d28:	463b      	movge	r3, r7
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	bfc2      	ittt	gt
 8008d2e:	eba8 0803 	subgt.w	r8, r8, r3
 8008d32:	1aff      	subgt	r7, r7, r3
 8008d34:	eba9 0903 	subgt.w	r9, r9, r3
 8008d38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	dd17      	ble.n	8008d6e <_strtod_l+0x75e>
 8008d3e:	4631      	mov	r1, r6
 8008d40:	461a      	mov	r2, r3
 8008d42:	4620      	mov	r0, r4
 8008d44:	f001 ff42 	bl	800abcc <__pow5mult>
 8008d48:	4606      	mov	r6, r0
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	f43f aea8 	beq.w	8008aa0 <_strtod_l+0x490>
 8008d50:	4601      	mov	r1, r0
 8008d52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008d54:	4620      	mov	r0, r4
 8008d56:	f001 fe8f 	bl	800aa78 <__multiply>
 8008d5a:	900b      	str	r0, [sp, #44]	; 0x2c
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	f43f ae9f 	beq.w	8008aa0 <_strtod_l+0x490>
 8008d62:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008d64:	4620      	mov	r0, r4
 8008d66:	f001 fd6f 	bl	800a848 <_Bfree>
 8008d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d6c:	9318      	str	r3, [sp, #96]	; 0x60
 8008d6e:	f1b8 0f00 	cmp.w	r8, #0
 8008d72:	f300 808c 	bgt.w	8008e8e <_strtod_l+0x87e>
 8008d76:	9b06      	ldr	r3, [sp, #24]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	dd08      	ble.n	8008d8e <_strtod_l+0x77e>
 8008d7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d7e:	9905      	ldr	r1, [sp, #20]
 8008d80:	4620      	mov	r0, r4
 8008d82:	f001 ff23 	bl	800abcc <__pow5mult>
 8008d86:	9005      	str	r0, [sp, #20]
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	f43f ae89 	beq.w	8008aa0 <_strtod_l+0x490>
 8008d8e:	2f00      	cmp	r7, #0
 8008d90:	dd08      	ble.n	8008da4 <_strtod_l+0x794>
 8008d92:	9905      	ldr	r1, [sp, #20]
 8008d94:	463a      	mov	r2, r7
 8008d96:	4620      	mov	r0, r4
 8008d98:	f001 ff72 	bl	800ac80 <__lshift>
 8008d9c:	9005      	str	r0, [sp, #20]
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	f43f ae7e 	beq.w	8008aa0 <_strtod_l+0x490>
 8008da4:	f1b9 0f00 	cmp.w	r9, #0
 8008da8:	dd08      	ble.n	8008dbc <_strtod_l+0x7ac>
 8008daa:	4631      	mov	r1, r6
 8008dac:	464a      	mov	r2, r9
 8008dae:	4620      	mov	r0, r4
 8008db0:	f001 ff66 	bl	800ac80 <__lshift>
 8008db4:	4606      	mov	r6, r0
 8008db6:	2800      	cmp	r0, #0
 8008db8:	f43f ae72 	beq.w	8008aa0 <_strtod_l+0x490>
 8008dbc:	9a05      	ldr	r2, [sp, #20]
 8008dbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	f001 ffe9 	bl	800ad98 <__mdiff>
 8008dc6:	4605      	mov	r5, r0
 8008dc8:	2800      	cmp	r0, #0
 8008dca:	f43f ae69 	beq.w	8008aa0 <_strtod_l+0x490>
 8008dce:	68c3      	ldr	r3, [r0, #12]
 8008dd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	60c3      	str	r3, [r0, #12]
 8008dd6:	4631      	mov	r1, r6
 8008dd8:	f001 ffc2 	bl	800ad60 <__mcmp>
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	da60      	bge.n	8008ea2 <_strtod_l+0x892>
 8008de0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008de2:	ea53 030a 	orrs.w	r3, r3, sl
 8008de6:	f040 8082 	bne.w	8008eee <_strtod_l+0x8de>
 8008dea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d17d      	bne.n	8008eee <_strtod_l+0x8de>
 8008df2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008df6:	0d1b      	lsrs	r3, r3, #20
 8008df8:	051b      	lsls	r3, r3, #20
 8008dfa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008dfe:	d976      	bls.n	8008eee <_strtod_l+0x8de>
 8008e00:	696b      	ldr	r3, [r5, #20]
 8008e02:	b913      	cbnz	r3, 8008e0a <_strtod_l+0x7fa>
 8008e04:	692b      	ldr	r3, [r5, #16]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	dd71      	ble.n	8008eee <_strtod_l+0x8de>
 8008e0a:	4629      	mov	r1, r5
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	4620      	mov	r0, r4
 8008e10:	f001 ff36 	bl	800ac80 <__lshift>
 8008e14:	4631      	mov	r1, r6
 8008e16:	4605      	mov	r5, r0
 8008e18:	f001 ffa2 	bl	800ad60 <__mcmp>
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	dd66      	ble.n	8008eee <_strtod_l+0x8de>
 8008e20:	9904      	ldr	r1, [sp, #16]
 8008e22:	4a53      	ldr	r2, [pc, #332]	; (8008f70 <_strtod_l+0x960>)
 8008e24:	465b      	mov	r3, fp
 8008e26:	2900      	cmp	r1, #0
 8008e28:	f000 8081 	beq.w	8008f2e <_strtod_l+0x91e>
 8008e2c:	ea02 010b 	and.w	r1, r2, fp
 8008e30:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008e34:	dc7b      	bgt.n	8008f2e <_strtod_l+0x91e>
 8008e36:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008e3a:	f77f aea9 	ble.w	8008b90 <_strtod_l+0x580>
 8008e3e:	4b4d      	ldr	r3, [pc, #308]	; (8008f74 <_strtod_l+0x964>)
 8008e40:	4650      	mov	r0, sl
 8008e42:	4659      	mov	r1, fp
 8008e44:	2200      	movs	r2, #0
 8008e46:	f7f7 fbd7 	bl	80005f8 <__aeabi_dmul>
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	4303      	orrs	r3, r0
 8008e4e:	bf08      	it	eq
 8008e50:	2322      	moveq	r3, #34	; 0x22
 8008e52:	4682      	mov	sl, r0
 8008e54:	468b      	mov	fp, r1
 8008e56:	bf08      	it	eq
 8008e58:	6023      	streq	r3, [r4, #0]
 8008e5a:	e62b      	b.n	8008ab4 <_strtod_l+0x4a4>
 8008e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e60:	fa02 f303 	lsl.w	r3, r2, r3
 8008e64:	ea03 0a0a 	and.w	sl, r3, sl
 8008e68:	e6e3      	b.n	8008c32 <_strtod_l+0x622>
 8008e6a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008e6e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008e72:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008e76:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008e7a:	fa01 f308 	lsl.w	r3, r1, r8
 8008e7e:	9308      	str	r3, [sp, #32]
 8008e80:	910d      	str	r1, [sp, #52]	; 0x34
 8008e82:	e746      	b.n	8008d12 <_strtod_l+0x702>
 8008e84:	2300      	movs	r3, #0
 8008e86:	9308      	str	r3, [sp, #32]
 8008e88:	2301      	movs	r3, #1
 8008e8a:	930d      	str	r3, [sp, #52]	; 0x34
 8008e8c:	e741      	b.n	8008d12 <_strtod_l+0x702>
 8008e8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008e90:	4642      	mov	r2, r8
 8008e92:	4620      	mov	r0, r4
 8008e94:	f001 fef4 	bl	800ac80 <__lshift>
 8008e98:	9018      	str	r0, [sp, #96]	; 0x60
 8008e9a:	2800      	cmp	r0, #0
 8008e9c:	f47f af6b 	bne.w	8008d76 <_strtod_l+0x766>
 8008ea0:	e5fe      	b.n	8008aa0 <_strtod_l+0x490>
 8008ea2:	465f      	mov	r7, fp
 8008ea4:	d16e      	bne.n	8008f84 <_strtod_l+0x974>
 8008ea6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ea8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008eac:	b342      	cbz	r2, 8008f00 <_strtod_l+0x8f0>
 8008eae:	4a32      	ldr	r2, [pc, #200]	; (8008f78 <_strtod_l+0x968>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d128      	bne.n	8008f06 <_strtod_l+0x8f6>
 8008eb4:	9b04      	ldr	r3, [sp, #16]
 8008eb6:	4651      	mov	r1, sl
 8008eb8:	b1eb      	cbz	r3, 8008ef6 <_strtod_l+0x8e6>
 8008eba:	4b2d      	ldr	r3, [pc, #180]	; (8008f70 <_strtod_l+0x960>)
 8008ebc:	403b      	ands	r3, r7
 8008ebe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ec6:	d819      	bhi.n	8008efc <_strtod_l+0x8ec>
 8008ec8:	0d1b      	lsrs	r3, r3, #20
 8008eca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008ece:	fa02 f303 	lsl.w	r3, r2, r3
 8008ed2:	4299      	cmp	r1, r3
 8008ed4:	d117      	bne.n	8008f06 <_strtod_l+0x8f6>
 8008ed6:	4b29      	ldr	r3, [pc, #164]	; (8008f7c <_strtod_l+0x96c>)
 8008ed8:	429f      	cmp	r7, r3
 8008eda:	d102      	bne.n	8008ee2 <_strtod_l+0x8d2>
 8008edc:	3101      	adds	r1, #1
 8008ede:	f43f addf 	beq.w	8008aa0 <_strtod_l+0x490>
 8008ee2:	4b23      	ldr	r3, [pc, #140]	; (8008f70 <_strtod_l+0x960>)
 8008ee4:	403b      	ands	r3, r7
 8008ee6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008eea:	f04f 0a00 	mov.w	sl, #0
 8008eee:	9b04      	ldr	r3, [sp, #16]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d1a4      	bne.n	8008e3e <_strtod_l+0x82e>
 8008ef4:	e5de      	b.n	8008ab4 <_strtod_l+0x4a4>
 8008ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8008efa:	e7ea      	b.n	8008ed2 <_strtod_l+0x8c2>
 8008efc:	4613      	mov	r3, r2
 8008efe:	e7e8      	b.n	8008ed2 <_strtod_l+0x8c2>
 8008f00:	ea53 030a 	orrs.w	r3, r3, sl
 8008f04:	d08c      	beq.n	8008e20 <_strtod_l+0x810>
 8008f06:	9b08      	ldr	r3, [sp, #32]
 8008f08:	b1db      	cbz	r3, 8008f42 <_strtod_l+0x932>
 8008f0a:	423b      	tst	r3, r7
 8008f0c:	d0ef      	beq.n	8008eee <_strtod_l+0x8de>
 8008f0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f10:	9a04      	ldr	r2, [sp, #16]
 8008f12:	4650      	mov	r0, sl
 8008f14:	4659      	mov	r1, fp
 8008f16:	b1c3      	cbz	r3, 8008f4a <_strtod_l+0x93a>
 8008f18:	f7ff fb5c 	bl	80085d4 <sulp>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	460b      	mov	r3, r1
 8008f20:	ec51 0b18 	vmov	r0, r1, d8
 8008f24:	f7f7 f9b2 	bl	800028c <__adddf3>
 8008f28:	4682      	mov	sl, r0
 8008f2a:	468b      	mov	fp, r1
 8008f2c:	e7df      	b.n	8008eee <_strtod_l+0x8de>
 8008f2e:	4013      	ands	r3, r2
 8008f30:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008f34:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008f38:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008f3c:	f04f 3aff 	mov.w	sl, #4294967295
 8008f40:	e7d5      	b.n	8008eee <_strtod_l+0x8de>
 8008f42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f44:	ea13 0f0a 	tst.w	r3, sl
 8008f48:	e7e0      	b.n	8008f0c <_strtod_l+0x8fc>
 8008f4a:	f7ff fb43 	bl	80085d4 <sulp>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	460b      	mov	r3, r1
 8008f52:	ec51 0b18 	vmov	r0, r1, d8
 8008f56:	f7f7 f997 	bl	8000288 <__aeabi_dsub>
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	4682      	mov	sl, r0
 8008f60:	468b      	mov	fp, r1
 8008f62:	f7f7 fdb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f66:	2800      	cmp	r0, #0
 8008f68:	d0c1      	beq.n	8008eee <_strtod_l+0x8de>
 8008f6a:	e611      	b.n	8008b90 <_strtod_l+0x580>
 8008f6c:	fffffc02 	.word	0xfffffc02
 8008f70:	7ff00000 	.word	0x7ff00000
 8008f74:	39500000 	.word	0x39500000
 8008f78:	000fffff 	.word	0x000fffff
 8008f7c:	7fefffff 	.word	0x7fefffff
 8008f80:	0800ca08 	.word	0x0800ca08
 8008f84:	4631      	mov	r1, r6
 8008f86:	4628      	mov	r0, r5
 8008f88:	f002 f868 	bl	800b05c <__ratio>
 8008f8c:	ec59 8b10 	vmov	r8, r9, d0
 8008f90:	ee10 0a10 	vmov	r0, s0
 8008f94:	2200      	movs	r2, #0
 8008f96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008f9a:	4649      	mov	r1, r9
 8008f9c:	f7f7 fda8 	bl	8000af0 <__aeabi_dcmple>
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	d07a      	beq.n	800909a <_strtod_l+0xa8a>
 8008fa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d04a      	beq.n	8009040 <_strtod_l+0xa30>
 8008faa:	4b95      	ldr	r3, [pc, #596]	; (8009200 <_strtod_l+0xbf0>)
 8008fac:	2200      	movs	r2, #0
 8008fae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008fb2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009200 <_strtod_l+0xbf0>
 8008fb6:	f04f 0800 	mov.w	r8, #0
 8008fba:	4b92      	ldr	r3, [pc, #584]	; (8009204 <_strtod_l+0xbf4>)
 8008fbc:	403b      	ands	r3, r7
 8008fbe:	930d      	str	r3, [sp, #52]	; 0x34
 8008fc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fc2:	4b91      	ldr	r3, [pc, #580]	; (8009208 <_strtod_l+0xbf8>)
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	f040 80b0 	bne.w	800912a <_strtod_l+0xb1a>
 8008fca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008fce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008fd2:	ec4b ab10 	vmov	d0, sl, fp
 8008fd6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008fda:	f001 ff67 	bl	800aeac <__ulp>
 8008fde:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008fe2:	ec53 2b10 	vmov	r2, r3, d0
 8008fe6:	f7f7 fb07 	bl	80005f8 <__aeabi_dmul>
 8008fea:	4652      	mov	r2, sl
 8008fec:	465b      	mov	r3, fp
 8008fee:	f7f7 f94d 	bl	800028c <__adddf3>
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	4983      	ldr	r1, [pc, #524]	; (8009204 <_strtod_l+0xbf4>)
 8008ff6:	4a85      	ldr	r2, [pc, #532]	; (800920c <_strtod_l+0xbfc>)
 8008ff8:	4019      	ands	r1, r3
 8008ffa:	4291      	cmp	r1, r2
 8008ffc:	4682      	mov	sl, r0
 8008ffe:	d960      	bls.n	80090c2 <_strtod_l+0xab2>
 8009000:	ee18 3a90 	vmov	r3, s17
 8009004:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009008:	4293      	cmp	r3, r2
 800900a:	d104      	bne.n	8009016 <_strtod_l+0xa06>
 800900c:	ee18 3a10 	vmov	r3, s16
 8009010:	3301      	adds	r3, #1
 8009012:	f43f ad45 	beq.w	8008aa0 <_strtod_l+0x490>
 8009016:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009218 <_strtod_l+0xc08>
 800901a:	f04f 3aff 	mov.w	sl, #4294967295
 800901e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009020:	4620      	mov	r0, r4
 8009022:	f001 fc11 	bl	800a848 <_Bfree>
 8009026:	9905      	ldr	r1, [sp, #20]
 8009028:	4620      	mov	r0, r4
 800902a:	f001 fc0d 	bl	800a848 <_Bfree>
 800902e:	4631      	mov	r1, r6
 8009030:	4620      	mov	r0, r4
 8009032:	f001 fc09 	bl	800a848 <_Bfree>
 8009036:	4629      	mov	r1, r5
 8009038:	4620      	mov	r0, r4
 800903a:	f001 fc05 	bl	800a848 <_Bfree>
 800903e:	e61a      	b.n	8008c76 <_strtod_l+0x666>
 8009040:	f1ba 0f00 	cmp.w	sl, #0
 8009044:	d11b      	bne.n	800907e <_strtod_l+0xa6e>
 8009046:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800904a:	b9f3      	cbnz	r3, 800908a <_strtod_l+0xa7a>
 800904c:	4b6c      	ldr	r3, [pc, #432]	; (8009200 <_strtod_l+0xbf0>)
 800904e:	2200      	movs	r2, #0
 8009050:	4640      	mov	r0, r8
 8009052:	4649      	mov	r1, r9
 8009054:	f7f7 fd42 	bl	8000adc <__aeabi_dcmplt>
 8009058:	b9d0      	cbnz	r0, 8009090 <_strtod_l+0xa80>
 800905a:	4640      	mov	r0, r8
 800905c:	4649      	mov	r1, r9
 800905e:	4b6c      	ldr	r3, [pc, #432]	; (8009210 <_strtod_l+0xc00>)
 8009060:	2200      	movs	r2, #0
 8009062:	f7f7 fac9 	bl	80005f8 <__aeabi_dmul>
 8009066:	4680      	mov	r8, r0
 8009068:	4689      	mov	r9, r1
 800906a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800906e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009072:	9315      	str	r3, [sp, #84]	; 0x54
 8009074:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009078:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800907c:	e79d      	b.n	8008fba <_strtod_l+0x9aa>
 800907e:	f1ba 0f01 	cmp.w	sl, #1
 8009082:	d102      	bne.n	800908a <_strtod_l+0xa7a>
 8009084:	2f00      	cmp	r7, #0
 8009086:	f43f ad83 	beq.w	8008b90 <_strtod_l+0x580>
 800908a:	4b62      	ldr	r3, [pc, #392]	; (8009214 <_strtod_l+0xc04>)
 800908c:	2200      	movs	r2, #0
 800908e:	e78e      	b.n	8008fae <_strtod_l+0x99e>
 8009090:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009210 <_strtod_l+0xc00>
 8009094:	f04f 0800 	mov.w	r8, #0
 8009098:	e7e7      	b.n	800906a <_strtod_l+0xa5a>
 800909a:	4b5d      	ldr	r3, [pc, #372]	; (8009210 <_strtod_l+0xc00>)
 800909c:	4640      	mov	r0, r8
 800909e:	4649      	mov	r1, r9
 80090a0:	2200      	movs	r2, #0
 80090a2:	f7f7 faa9 	bl	80005f8 <__aeabi_dmul>
 80090a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090a8:	4680      	mov	r8, r0
 80090aa:	4689      	mov	r9, r1
 80090ac:	b933      	cbnz	r3, 80090bc <_strtod_l+0xaac>
 80090ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090b2:	900e      	str	r0, [sp, #56]	; 0x38
 80090b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80090b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80090ba:	e7dd      	b.n	8009078 <_strtod_l+0xa68>
 80090bc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80090c0:	e7f9      	b.n	80090b6 <_strtod_l+0xaa6>
 80090c2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80090c6:	9b04      	ldr	r3, [sp, #16]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d1a8      	bne.n	800901e <_strtod_l+0xa0e>
 80090cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80090d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80090d2:	0d1b      	lsrs	r3, r3, #20
 80090d4:	051b      	lsls	r3, r3, #20
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d1a1      	bne.n	800901e <_strtod_l+0xa0e>
 80090da:	4640      	mov	r0, r8
 80090dc:	4649      	mov	r1, r9
 80090de:	f7f7 fef9 	bl	8000ed4 <__aeabi_d2lz>
 80090e2:	f7f7 fa5b 	bl	800059c <__aeabi_l2d>
 80090e6:	4602      	mov	r2, r0
 80090e8:	460b      	mov	r3, r1
 80090ea:	4640      	mov	r0, r8
 80090ec:	4649      	mov	r1, r9
 80090ee:	f7f7 f8cb 	bl	8000288 <__aeabi_dsub>
 80090f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80090f8:	ea43 030a 	orr.w	r3, r3, sl
 80090fc:	4313      	orrs	r3, r2
 80090fe:	4680      	mov	r8, r0
 8009100:	4689      	mov	r9, r1
 8009102:	d055      	beq.n	80091b0 <_strtod_l+0xba0>
 8009104:	a336      	add	r3, pc, #216	; (adr r3, 80091e0 <_strtod_l+0xbd0>)
 8009106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910a:	f7f7 fce7 	bl	8000adc <__aeabi_dcmplt>
 800910e:	2800      	cmp	r0, #0
 8009110:	f47f acd0 	bne.w	8008ab4 <_strtod_l+0x4a4>
 8009114:	a334      	add	r3, pc, #208	; (adr r3, 80091e8 <_strtod_l+0xbd8>)
 8009116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911a:	4640      	mov	r0, r8
 800911c:	4649      	mov	r1, r9
 800911e:	f7f7 fcfb 	bl	8000b18 <__aeabi_dcmpgt>
 8009122:	2800      	cmp	r0, #0
 8009124:	f43f af7b 	beq.w	800901e <_strtod_l+0xa0e>
 8009128:	e4c4      	b.n	8008ab4 <_strtod_l+0x4a4>
 800912a:	9b04      	ldr	r3, [sp, #16]
 800912c:	b333      	cbz	r3, 800917c <_strtod_l+0xb6c>
 800912e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009130:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009134:	d822      	bhi.n	800917c <_strtod_l+0xb6c>
 8009136:	a32e      	add	r3, pc, #184	; (adr r3, 80091f0 <_strtod_l+0xbe0>)
 8009138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913c:	4640      	mov	r0, r8
 800913e:	4649      	mov	r1, r9
 8009140:	f7f7 fcd6 	bl	8000af0 <__aeabi_dcmple>
 8009144:	b1a0      	cbz	r0, 8009170 <_strtod_l+0xb60>
 8009146:	4649      	mov	r1, r9
 8009148:	4640      	mov	r0, r8
 800914a:	f7f7 fd2d 	bl	8000ba8 <__aeabi_d2uiz>
 800914e:	2801      	cmp	r0, #1
 8009150:	bf38      	it	cc
 8009152:	2001      	movcc	r0, #1
 8009154:	f7f7 f9d6 	bl	8000504 <__aeabi_ui2d>
 8009158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800915a:	4680      	mov	r8, r0
 800915c:	4689      	mov	r9, r1
 800915e:	bb23      	cbnz	r3, 80091aa <_strtod_l+0xb9a>
 8009160:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009164:	9010      	str	r0, [sp, #64]	; 0x40
 8009166:	9311      	str	r3, [sp, #68]	; 0x44
 8009168:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800916c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009172:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009174:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009178:	1a9b      	subs	r3, r3, r2
 800917a:	9309      	str	r3, [sp, #36]	; 0x24
 800917c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009180:	eeb0 0a48 	vmov.f32	s0, s16
 8009184:	eef0 0a68 	vmov.f32	s1, s17
 8009188:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800918c:	f001 fe8e 	bl	800aeac <__ulp>
 8009190:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009194:	ec53 2b10 	vmov	r2, r3, d0
 8009198:	f7f7 fa2e 	bl	80005f8 <__aeabi_dmul>
 800919c:	ec53 2b18 	vmov	r2, r3, d8
 80091a0:	f7f7 f874 	bl	800028c <__adddf3>
 80091a4:	4682      	mov	sl, r0
 80091a6:	468b      	mov	fp, r1
 80091a8:	e78d      	b.n	80090c6 <_strtod_l+0xab6>
 80091aa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80091ae:	e7db      	b.n	8009168 <_strtod_l+0xb58>
 80091b0:	a311      	add	r3, pc, #68	; (adr r3, 80091f8 <_strtod_l+0xbe8>)
 80091b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b6:	f7f7 fc91 	bl	8000adc <__aeabi_dcmplt>
 80091ba:	e7b2      	b.n	8009122 <_strtod_l+0xb12>
 80091bc:	2300      	movs	r3, #0
 80091be:	930a      	str	r3, [sp, #40]	; 0x28
 80091c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80091c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091c4:	6013      	str	r3, [r2, #0]
 80091c6:	f7ff ba6b 	b.w	80086a0 <_strtod_l+0x90>
 80091ca:	2a65      	cmp	r2, #101	; 0x65
 80091cc:	f43f ab5f 	beq.w	800888e <_strtod_l+0x27e>
 80091d0:	2a45      	cmp	r2, #69	; 0x45
 80091d2:	f43f ab5c 	beq.w	800888e <_strtod_l+0x27e>
 80091d6:	2301      	movs	r3, #1
 80091d8:	f7ff bb94 	b.w	8008904 <_strtod_l+0x2f4>
 80091dc:	f3af 8000 	nop.w
 80091e0:	94a03595 	.word	0x94a03595
 80091e4:	3fdfffff 	.word	0x3fdfffff
 80091e8:	35afe535 	.word	0x35afe535
 80091ec:	3fe00000 	.word	0x3fe00000
 80091f0:	ffc00000 	.word	0xffc00000
 80091f4:	41dfffff 	.word	0x41dfffff
 80091f8:	94a03595 	.word	0x94a03595
 80091fc:	3fcfffff 	.word	0x3fcfffff
 8009200:	3ff00000 	.word	0x3ff00000
 8009204:	7ff00000 	.word	0x7ff00000
 8009208:	7fe00000 	.word	0x7fe00000
 800920c:	7c9fffff 	.word	0x7c9fffff
 8009210:	3fe00000 	.word	0x3fe00000
 8009214:	bff00000 	.word	0xbff00000
 8009218:	7fefffff 	.word	0x7fefffff

0800921c <_strtod_r>:
 800921c:	4b01      	ldr	r3, [pc, #4]	; (8009224 <_strtod_r+0x8>)
 800921e:	f7ff b9f7 	b.w	8008610 <_strtod_l>
 8009222:	bf00      	nop
 8009224:	20000154 	.word	0x20000154

08009228 <_strtol_l.constprop.0>:
 8009228:	2b01      	cmp	r3, #1
 800922a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800922e:	d001      	beq.n	8009234 <_strtol_l.constprop.0+0xc>
 8009230:	2b24      	cmp	r3, #36	; 0x24
 8009232:	d906      	bls.n	8009242 <_strtol_l.constprop.0+0x1a>
 8009234:	f7fe fa68 	bl	8007708 <__errno>
 8009238:	2316      	movs	r3, #22
 800923a:	6003      	str	r3, [r0, #0]
 800923c:	2000      	movs	r0, #0
 800923e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009242:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009328 <_strtol_l.constprop.0+0x100>
 8009246:	460d      	mov	r5, r1
 8009248:	462e      	mov	r6, r5
 800924a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800924e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009252:	f017 0708 	ands.w	r7, r7, #8
 8009256:	d1f7      	bne.n	8009248 <_strtol_l.constprop.0+0x20>
 8009258:	2c2d      	cmp	r4, #45	; 0x2d
 800925a:	d132      	bne.n	80092c2 <_strtol_l.constprop.0+0x9a>
 800925c:	782c      	ldrb	r4, [r5, #0]
 800925e:	2701      	movs	r7, #1
 8009260:	1cb5      	adds	r5, r6, #2
 8009262:	2b00      	cmp	r3, #0
 8009264:	d05b      	beq.n	800931e <_strtol_l.constprop.0+0xf6>
 8009266:	2b10      	cmp	r3, #16
 8009268:	d109      	bne.n	800927e <_strtol_l.constprop.0+0x56>
 800926a:	2c30      	cmp	r4, #48	; 0x30
 800926c:	d107      	bne.n	800927e <_strtol_l.constprop.0+0x56>
 800926e:	782c      	ldrb	r4, [r5, #0]
 8009270:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009274:	2c58      	cmp	r4, #88	; 0x58
 8009276:	d14d      	bne.n	8009314 <_strtol_l.constprop.0+0xec>
 8009278:	786c      	ldrb	r4, [r5, #1]
 800927a:	2310      	movs	r3, #16
 800927c:	3502      	adds	r5, #2
 800927e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009282:	f108 38ff 	add.w	r8, r8, #4294967295
 8009286:	f04f 0c00 	mov.w	ip, #0
 800928a:	fbb8 f9f3 	udiv	r9, r8, r3
 800928e:	4666      	mov	r6, ip
 8009290:	fb03 8a19 	mls	sl, r3, r9, r8
 8009294:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009298:	f1be 0f09 	cmp.w	lr, #9
 800929c:	d816      	bhi.n	80092cc <_strtol_l.constprop.0+0xa4>
 800929e:	4674      	mov	r4, lr
 80092a0:	42a3      	cmp	r3, r4
 80092a2:	dd24      	ble.n	80092ee <_strtol_l.constprop.0+0xc6>
 80092a4:	f1bc 0f00 	cmp.w	ip, #0
 80092a8:	db1e      	blt.n	80092e8 <_strtol_l.constprop.0+0xc0>
 80092aa:	45b1      	cmp	r9, r6
 80092ac:	d31c      	bcc.n	80092e8 <_strtol_l.constprop.0+0xc0>
 80092ae:	d101      	bne.n	80092b4 <_strtol_l.constprop.0+0x8c>
 80092b0:	45a2      	cmp	sl, r4
 80092b2:	db19      	blt.n	80092e8 <_strtol_l.constprop.0+0xc0>
 80092b4:	fb06 4603 	mla	r6, r6, r3, r4
 80092b8:	f04f 0c01 	mov.w	ip, #1
 80092bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80092c0:	e7e8      	b.n	8009294 <_strtol_l.constprop.0+0x6c>
 80092c2:	2c2b      	cmp	r4, #43	; 0x2b
 80092c4:	bf04      	itt	eq
 80092c6:	782c      	ldrbeq	r4, [r5, #0]
 80092c8:	1cb5      	addeq	r5, r6, #2
 80092ca:	e7ca      	b.n	8009262 <_strtol_l.constprop.0+0x3a>
 80092cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80092d0:	f1be 0f19 	cmp.w	lr, #25
 80092d4:	d801      	bhi.n	80092da <_strtol_l.constprop.0+0xb2>
 80092d6:	3c37      	subs	r4, #55	; 0x37
 80092d8:	e7e2      	b.n	80092a0 <_strtol_l.constprop.0+0x78>
 80092da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80092de:	f1be 0f19 	cmp.w	lr, #25
 80092e2:	d804      	bhi.n	80092ee <_strtol_l.constprop.0+0xc6>
 80092e4:	3c57      	subs	r4, #87	; 0x57
 80092e6:	e7db      	b.n	80092a0 <_strtol_l.constprop.0+0x78>
 80092e8:	f04f 3cff 	mov.w	ip, #4294967295
 80092ec:	e7e6      	b.n	80092bc <_strtol_l.constprop.0+0x94>
 80092ee:	f1bc 0f00 	cmp.w	ip, #0
 80092f2:	da05      	bge.n	8009300 <_strtol_l.constprop.0+0xd8>
 80092f4:	2322      	movs	r3, #34	; 0x22
 80092f6:	6003      	str	r3, [r0, #0]
 80092f8:	4646      	mov	r6, r8
 80092fa:	b942      	cbnz	r2, 800930e <_strtol_l.constprop.0+0xe6>
 80092fc:	4630      	mov	r0, r6
 80092fe:	e79e      	b.n	800923e <_strtol_l.constprop.0+0x16>
 8009300:	b107      	cbz	r7, 8009304 <_strtol_l.constprop.0+0xdc>
 8009302:	4276      	negs	r6, r6
 8009304:	2a00      	cmp	r2, #0
 8009306:	d0f9      	beq.n	80092fc <_strtol_l.constprop.0+0xd4>
 8009308:	f1bc 0f00 	cmp.w	ip, #0
 800930c:	d000      	beq.n	8009310 <_strtol_l.constprop.0+0xe8>
 800930e:	1e69      	subs	r1, r5, #1
 8009310:	6011      	str	r1, [r2, #0]
 8009312:	e7f3      	b.n	80092fc <_strtol_l.constprop.0+0xd4>
 8009314:	2430      	movs	r4, #48	; 0x30
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1b1      	bne.n	800927e <_strtol_l.constprop.0+0x56>
 800931a:	2308      	movs	r3, #8
 800931c:	e7af      	b.n	800927e <_strtol_l.constprop.0+0x56>
 800931e:	2c30      	cmp	r4, #48	; 0x30
 8009320:	d0a5      	beq.n	800926e <_strtol_l.constprop.0+0x46>
 8009322:	230a      	movs	r3, #10
 8009324:	e7ab      	b.n	800927e <_strtol_l.constprop.0+0x56>
 8009326:	bf00      	nop
 8009328:	0800ca31 	.word	0x0800ca31

0800932c <_strtol_r>:
 800932c:	f7ff bf7c 	b.w	8009228 <_strtol_l.constprop.0>

08009330 <_write_r>:
 8009330:	b538      	push	{r3, r4, r5, lr}
 8009332:	4d07      	ldr	r5, [pc, #28]	; (8009350 <_write_r+0x20>)
 8009334:	4604      	mov	r4, r0
 8009336:	4608      	mov	r0, r1
 8009338:	4611      	mov	r1, r2
 800933a:	2200      	movs	r2, #0
 800933c:	602a      	str	r2, [r5, #0]
 800933e:	461a      	mov	r2, r3
 8009340:	f7f9 fba5 	bl	8002a8e <_write>
 8009344:	1c43      	adds	r3, r0, #1
 8009346:	d102      	bne.n	800934e <_write_r+0x1e>
 8009348:	682b      	ldr	r3, [r5, #0]
 800934a:	b103      	cbz	r3, 800934e <_write_r+0x1e>
 800934c:	6023      	str	r3, [r4, #0]
 800934e:	bd38      	pop	{r3, r4, r5, pc}
 8009350:	200008ec 	.word	0x200008ec

08009354 <_close_r>:
 8009354:	b538      	push	{r3, r4, r5, lr}
 8009356:	4d06      	ldr	r5, [pc, #24]	; (8009370 <_close_r+0x1c>)
 8009358:	2300      	movs	r3, #0
 800935a:	4604      	mov	r4, r0
 800935c:	4608      	mov	r0, r1
 800935e:	602b      	str	r3, [r5, #0]
 8009360:	f7f9 fbb1 	bl	8002ac6 <_close>
 8009364:	1c43      	adds	r3, r0, #1
 8009366:	d102      	bne.n	800936e <_close_r+0x1a>
 8009368:	682b      	ldr	r3, [r5, #0]
 800936a:	b103      	cbz	r3, 800936e <_close_r+0x1a>
 800936c:	6023      	str	r3, [r4, #0]
 800936e:	bd38      	pop	{r3, r4, r5, pc}
 8009370:	200008ec 	.word	0x200008ec

08009374 <quorem>:
 8009374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009378:	6903      	ldr	r3, [r0, #16]
 800937a:	690c      	ldr	r4, [r1, #16]
 800937c:	42a3      	cmp	r3, r4
 800937e:	4607      	mov	r7, r0
 8009380:	f2c0 8081 	blt.w	8009486 <quorem+0x112>
 8009384:	3c01      	subs	r4, #1
 8009386:	f101 0814 	add.w	r8, r1, #20
 800938a:	f100 0514 	add.w	r5, r0, #20
 800938e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009392:	9301      	str	r3, [sp, #4]
 8009394:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009398:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800939c:	3301      	adds	r3, #1
 800939e:	429a      	cmp	r2, r3
 80093a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80093a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80093a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80093ac:	d331      	bcc.n	8009412 <quorem+0x9e>
 80093ae:	f04f 0e00 	mov.w	lr, #0
 80093b2:	4640      	mov	r0, r8
 80093b4:	46ac      	mov	ip, r5
 80093b6:	46f2      	mov	sl, lr
 80093b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80093bc:	b293      	uxth	r3, r2
 80093be:	fb06 e303 	mla	r3, r6, r3, lr
 80093c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	ebaa 0303 	sub.w	r3, sl, r3
 80093cc:	f8dc a000 	ldr.w	sl, [ip]
 80093d0:	0c12      	lsrs	r2, r2, #16
 80093d2:	fa13 f38a 	uxtah	r3, r3, sl
 80093d6:	fb06 e202 	mla	r2, r6, r2, lr
 80093da:	9300      	str	r3, [sp, #0]
 80093dc:	9b00      	ldr	r3, [sp, #0]
 80093de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80093e2:	b292      	uxth	r2, r2
 80093e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80093e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093ec:	f8bd 3000 	ldrh.w	r3, [sp]
 80093f0:	4581      	cmp	r9, r0
 80093f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093f6:	f84c 3b04 	str.w	r3, [ip], #4
 80093fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80093fe:	d2db      	bcs.n	80093b8 <quorem+0x44>
 8009400:	f855 300b 	ldr.w	r3, [r5, fp]
 8009404:	b92b      	cbnz	r3, 8009412 <quorem+0x9e>
 8009406:	9b01      	ldr	r3, [sp, #4]
 8009408:	3b04      	subs	r3, #4
 800940a:	429d      	cmp	r5, r3
 800940c:	461a      	mov	r2, r3
 800940e:	d32e      	bcc.n	800946e <quorem+0xfa>
 8009410:	613c      	str	r4, [r7, #16]
 8009412:	4638      	mov	r0, r7
 8009414:	f001 fca4 	bl	800ad60 <__mcmp>
 8009418:	2800      	cmp	r0, #0
 800941a:	db24      	blt.n	8009466 <quorem+0xf2>
 800941c:	3601      	adds	r6, #1
 800941e:	4628      	mov	r0, r5
 8009420:	f04f 0c00 	mov.w	ip, #0
 8009424:	f858 2b04 	ldr.w	r2, [r8], #4
 8009428:	f8d0 e000 	ldr.w	lr, [r0]
 800942c:	b293      	uxth	r3, r2
 800942e:	ebac 0303 	sub.w	r3, ip, r3
 8009432:	0c12      	lsrs	r2, r2, #16
 8009434:	fa13 f38e 	uxtah	r3, r3, lr
 8009438:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800943c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009440:	b29b      	uxth	r3, r3
 8009442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009446:	45c1      	cmp	r9, r8
 8009448:	f840 3b04 	str.w	r3, [r0], #4
 800944c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009450:	d2e8      	bcs.n	8009424 <quorem+0xb0>
 8009452:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009456:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800945a:	b922      	cbnz	r2, 8009466 <quorem+0xf2>
 800945c:	3b04      	subs	r3, #4
 800945e:	429d      	cmp	r5, r3
 8009460:	461a      	mov	r2, r3
 8009462:	d30a      	bcc.n	800947a <quorem+0x106>
 8009464:	613c      	str	r4, [r7, #16]
 8009466:	4630      	mov	r0, r6
 8009468:	b003      	add	sp, #12
 800946a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800946e:	6812      	ldr	r2, [r2, #0]
 8009470:	3b04      	subs	r3, #4
 8009472:	2a00      	cmp	r2, #0
 8009474:	d1cc      	bne.n	8009410 <quorem+0x9c>
 8009476:	3c01      	subs	r4, #1
 8009478:	e7c7      	b.n	800940a <quorem+0x96>
 800947a:	6812      	ldr	r2, [r2, #0]
 800947c:	3b04      	subs	r3, #4
 800947e:	2a00      	cmp	r2, #0
 8009480:	d1f0      	bne.n	8009464 <quorem+0xf0>
 8009482:	3c01      	subs	r4, #1
 8009484:	e7eb      	b.n	800945e <quorem+0xea>
 8009486:	2000      	movs	r0, #0
 8009488:	e7ee      	b.n	8009468 <quorem+0xf4>
 800948a:	0000      	movs	r0, r0
 800948c:	0000      	movs	r0, r0
	...

08009490 <_dtoa_r>:
 8009490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009494:	ed2d 8b04 	vpush	{d8-d9}
 8009498:	ec57 6b10 	vmov	r6, r7, d0
 800949c:	b093      	sub	sp, #76	; 0x4c
 800949e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80094a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80094a4:	9106      	str	r1, [sp, #24]
 80094a6:	ee10 aa10 	vmov	sl, s0
 80094aa:	4604      	mov	r4, r0
 80094ac:	9209      	str	r2, [sp, #36]	; 0x24
 80094ae:	930c      	str	r3, [sp, #48]	; 0x30
 80094b0:	46bb      	mov	fp, r7
 80094b2:	b975      	cbnz	r5, 80094d2 <_dtoa_r+0x42>
 80094b4:	2010      	movs	r0, #16
 80094b6:	f001 f95f 	bl	800a778 <malloc>
 80094ba:	4602      	mov	r2, r0
 80094bc:	6260      	str	r0, [r4, #36]	; 0x24
 80094be:	b920      	cbnz	r0, 80094ca <_dtoa_r+0x3a>
 80094c0:	4ba7      	ldr	r3, [pc, #668]	; (8009760 <_dtoa_r+0x2d0>)
 80094c2:	21ea      	movs	r1, #234	; 0xea
 80094c4:	48a7      	ldr	r0, [pc, #668]	; (8009764 <_dtoa_r+0x2d4>)
 80094c6:	f002 fceb 	bl	800bea0 <__assert_func>
 80094ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80094ce:	6005      	str	r5, [r0, #0]
 80094d0:	60c5      	str	r5, [r0, #12]
 80094d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094d4:	6819      	ldr	r1, [r3, #0]
 80094d6:	b151      	cbz	r1, 80094ee <_dtoa_r+0x5e>
 80094d8:	685a      	ldr	r2, [r3, #4]
 80094da:	604a      	str	r2, [r1, #4]
 80094dc:	2301      	movs	r3, #1
 80094de:	4093      	lsls	r3, r2
 80094e0:	608b      	str	r3, [r1, #8]
 80094e2:	4620      	mov	r0, r4
 80094e4:	f001 f9b0 	bl	800a848 <_Bfree>
 80094e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094ea:	2200      	movs	r2, #0
 80094ec:	601a      	str	r2, [r3, #0]
 80094ee:	1e3b      	subs	r3, r7, #0
 80094f0:	bfaa      	itet	ge
 80094f2:	2300      	movge	r3, #0
 80094f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80094f8:	f8c8 3000 	strge.w	r3, [r8]
 80094fc:	4b9a      	ldr	r3, [pc, #616]	; (8009768 <_dtoa_r+0x2d8>)
 80094fe:	bfbc      	itt	lt
 8009500:	2201      	movlt	r2, #1
 8009502:	f8c8 2000 	strlt.w	r2, [r8]
 8009506:	ea33 030b 	bics.w	r3, r3, fp
 800950a:	d11b      	bne.n	8009544 <_dtoa_r+0xb4>
 800950c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800950e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009512:	6013      	str	r3, [r2, #0]
 8009514:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009518:	4333      	orrs	r3, r6
 800951a:	f000 8592 	beq.w	800a042 <_dtoa_r+0xbb2>
 800951e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009520:	b963      	cbnz	r3, 800953c <_dtoa_r+0xac>
 8009522:	4b92      	ldr	r3, [pc, #584]	; (800976c <_dtoa_r+0x2dc>)
 8009524:	e022      	b.n	800956c <_dtoa_r+0xdc>
 8009526:	4b92      	ldr	r3, [pc, #584]	; (8009770 <_dtoa_r+0x2e0>)
 8009528:	9301      	str	r3, [sp, #4]
 800952a:	3308      	adds	r3, #8
 800952c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800952e:	6013      	str	r3, [r2, #0]
 8009530:	9801      	ldr	r0, [sp, #4]
 8009532:	b013      	add	sp, #76	; 0x4c
 8009534:	ecbd 8b04 	vpop	{d8-d9}
 8009538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800953c:	4b8b      	ldr	r3, [pc, #556]	; (800976c <_dtoa_r+0x2dc>)
 800953e:	9301      	str	r3, [sp, #4]
 8009540:	3303      	adds	r3, #3
 8009542:	e7f3      	b.n	800952c <_dtoa_r+0x9c>
 8009544:	2200      	movs	r2, #0
 8009546:	2300      	movs	r3, #0
 8009548:	4650      	mov	r0, sl
 800954a:	4659      	mov	r1, fp
 800954c:	f7f7 fabc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009550:	ec4b ab19 	vmov	d9, sl, fp
 8009554:	4680      	mov	r8, r0
 8009556:	b158      	cbz	r0, 8009570 <_dtoa_r+0xe0>
 8009558:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800955a:	2301      	movs	r3, #1
 800955c:	6013      	str	r3, [r2, #0]
 800955e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009560:	2b00      	cmp	r3, #0
 8009562:	f000 856b 	beq.w	800a03c <_dtoa_r+0xbac>
 8009566:	4883      	ldr	r0, [pc, #524]	; (8009774 <_dtoa_r+0x2e4>)
 8009568:	6018      	str	r0, [r3, #0]
 800956a:	1e43      	subs	r3, r0, #1
 800956c:	9301      	str	r3, [sp, #4]
 800956e:	e7df      	b.n	8009530 <_dtoa_r+0xa0>
 8009570:	ec4b ab10 	vmov	d0, sl, fp
 8009574:	aa10      	add	r2, sp, #64	; 0x40
 8009576:	a911      	add	r1, sp, #68	; 0x44
 8009578:	4620      	mov	r0, r4
 800957a:	f001 fd13 	bl	800afa4 <__d2b>
 800957e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009582:	ee08 0a10 	vmov	s16, r0
 8009586:	2d00      	cmp	r5, #0
 8009588:	f000 8084 	beq.w	8009694 <_dtoa_r+0x204>
 800958c:	ee19 3a90 	vmov	r3, s19
 8009590:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009594:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009598:	4656      	mov	r6, sl
 800959a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800959e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80095a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80095a6:	4b74      	ldr	r3, [pc, #464]	; (8009778 <_dtoa_r+0x2e8>)
 80095a8:	2200      	movs	r2, #0
 80095aa:	4630      	mov	r0, r6
 80095ac:	4639      	mov	r1, r7
 80095ae:	f7f6 fe6b 	bl	8000288 <__aeabi_dsub>
 80095b2:	a365      	add	r3, pc, #404	; (adr r3, 8009748 <_dtoa_r+0x2b8>)
 80095b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b8:	f7f7 f81e 	bl	80005f8 <__aeabi_dmul>
 80095bc:	a364      	add	r3, pc, #400	; (adr r3, 8009750 <_dtoa_r+0x2c0>)
 80095be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c2:	f7f6 fe63 	bl	800028c <__adddf3>
 80095c6:	4606      	mov	r6, r0
 80095c8:	4628      	mov	r0, r5
 80095ca:	460f      	mov	r7, r1
 80095cc:	f7f6 ffaa 	bl	8000524 <__aeabi_i2d>
 80095d0:	a361      	add	r3, pc, #388	; (adr r3, 8009758 <_dtoa_r+0x2c8>)
 80095d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d6:	f7f7 f80f 	bl	80005f8 <__aeabi_dmul>
 80095da:	4602      	mov	r2, r0
 80095dc:	460b      	mov	r3, r1
 80095de:	4630      	mov	r0, r6
 80095e0:	4639      	mov	r1, r7
 80095e2:	f7f6 fe53 	bl	800028c <__adddf3>
 80095e6:	4606      	mov	r6, r0
 80095e8:	460f      	mov	r7, r1
 80095ea:	f7f7 fab5 	bl	8000b58 <__aeabi_d2iz>
 80095ee:	2200      	movs	r2, #0
 80095f0:	9000      	str	r0, [sp, #0]
 80095f2:	2300      	movs	r3, #0
 80095f4:	4630      	mov	r0, r6
 80095f6:	4639      	mov	r1, r7
 80095f8:	f7f7 fa70 	bl	8000adc <__aeabi_dcmplt>
 80095fc:	b150      	cbz	r0, 8009614 <_dtoa_r+0x184>
 80095fe:	9800      	ldr	r0, [sp, #0]
 8009600:	f7f6 ff90 	bl	8000524 <__aeabi_i2d>
 8009604:	4632      	mov	r2, r6
 8009606:	463b      	mov	r3, r7
 8009608:	f7f7 fa5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800960c:	b910      	cbnz	r0, 8009614 <_dtoa_r+0x184>
 800960e:	9b00      	ldr	r3, [sp, #0]
 8009610:	3b01      	subs	r3, #1
 8009612:	9300      	str	r3, [sp, #0]
 8009614:	9b00      	ldr	r3, [sp, #0]
 8009616:	2b16      	cmp	r3, #22
 8009618:	d85a      	bhi.n	80096d0 <_dtoa_r+0x240>
 800961a:	9a00      	ldr	r2, [sp, #0]
 800961c:	4b57      	ldr	r3, [pc, #348]	; (800977c <_dtoa_r+0x2ec>)
 800961e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009626:	ec51 0b19 	vmov	r0, r1, d9
 800962a:	f7f7 fa57 	bl	8000adc <__aeabi_dcmplt>
 800962e:	2800      	cmp	r0, #0
 8009630:	d050      	beq.n	80096d4 <_dtoa_r+0x244>
 8009632:	9b00      	ldr	r3, [sp, #0]
 8009634:	3b01      	subs	r3, #1
 8009636:	9300      	str	r3, [sp, #0]
 8009638:	2300      	movs	r3, #0
 800963a:	930b      	str	r3, [sp, #44]	; 0x2c
 800963c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800963e:	1b5d      	subs	r5, r3, r5
 8009640:	1e6b      	subs	r3, r5, #1
 8009642:	9305      	str	r3, [sp, #20]
 8009644:	bf45      	ittet	mi
 8009646:	f1c5 0301 	rsbmi	r3, r5, #1
 800964a:	9304      	strmi	r3, [sp, #16]
 800964c:	2300      	movpl	r3, #0
 800964e:	2300      	movmi	r3, #0
 8009650:	bf4c      	ite	mi
 8009652:	9305      	strmi	r3, [sp, #20]
 8009654:	9304      	strpl	r3, [sp, #16]
 8009656:	9b00      	ldr	r3, [sp, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	db3d      	blt.n	80096d8 <_dtoa_r+0x248>
 800965c:	9b05      	ldr	r3, [sp, #20]
 800965e:	9a00      	ldr	r2, [sp, #0]
 8009660:	920a      	str	r2, [sp, #40]	; 0x28
 8009662:	4413      	add	r3, r2
 8009664:	9305      	str	r3, [sp, #20]
 8009666:	2300      	movs	r3, #0
 8009668:	9307      	str	r3, [sp, #28]
 800966a:	9b06      	ldr	r3, [sp, #24]
 800966c:	2b09      	cmp	r3, #9
 800966e:	f200 8089 	bhi.w	8009784 <_dtoa_r+0x2f4>
 8009672:	2b05      	cmp	r3, #5
 8009674:	bfc4      	itt	gt
 8009676:	3b04      	subgt	r3, #4
 8009678:	9306      	strgt	r3, [sp, #24]
 800967a:	9b06      	ldr	r3, [sp, #24]
 800967c:	f1a3 0302 	sub.w	r3, r3, #2
 8009680:	bfcc      	ite	gt
 8009682:	2500      	movgt	r5, #0
 8009684:	2501      	movle	r5, #1
 8009686:	2b03      	cmp	r3, #3
 8009688:	f200 8087 	bhi.w	800979a <_dtoa_r+0x30a>
 800968c:	e8df f003 	tbb	[pc, r3]
 8009690:	59383a2d 	.word	0x59383a2d
 8009694:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009698:	441d      	add	r5, r3
 800969a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800969e:	2b20      	cmp	r3, #32
 80096a0:	bfc1      	itttt	gt
 80096a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80096a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80096aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80096ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80096b2:	bfda      	itte	le
 80096b4:	f1c3 0320 	rsble	r3, r3, #32
 80096b8:	fa06 f003 	lslle.w	r0, r6, r3
 80096bc:	4318      	orrgt	r0, r3
 80096be:	f7f6 ff21 	bl	8000504 <__aeabi_ui2d>
 80096c2:	2301      	movs	r3, #1
 80096c4:	4606      	mov	r6, r0
 80096c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80096ca:	3d01      	subs	r5, #1
 80096cc:	930e      	str	r3, [sp, #56]	; 0x38
 80096ce:	e76a      	b.n	80095a6 <_dtoa_r+0x116>
 80096d0:	2301      	movs	r3, #1
 80096d2:	e7b2      	b.n	800963a <_dtoa_r+0x1aa>
 80096d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80096d6:	e7b1      	b.n	800963c <_dtoa_r+0x1ac>
 80096d8:	9b04      	ldr	r3, [sp, #16]
 80096da:	9a00      	ldr	r2, [sp, #0]
 80096dc:	1a9b      	subs	r3, r3, r2
 80096de:	9304      	str	r3, [sp, #16]
 80096e0:	4253      	negs	r3, r2
 80096e2:	9307      	str	r3, [sp, #28]
 80096e4:	2300      	movs	r3, #0
 80096e6:	930a      	str	r3, [sp, #40]	; 0x28
 80096e8:	e7bf      	b.n	800966a <_dtoa_r+0x1da>
 80096ea:	2300      	movs	r3, #0
 80096ec:	9308      	str	r3, [sp, #32]
 80096ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	dc55      	bgt.n	80097a0 <_dtoa_r+0x310>
 80096f4:	2301      	movs	r3, #1
 80096f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80096fa:	461a      	mov	r2, r3
 80096fc:	9209      	str	r2, [sp, #36]	; 0x24
 80096fe:	e00c      	b.n	800971a <_dtoa_r+0x28a>
 8009700:	2301      	movs	r3, #1
 8009702:	e7f3      	b.n	80096ec <_dtoa_r+0x25c>
 8009704:	2300      	movs	r3, #0
 8009706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009708:	9308      	str	r3, [sp, #32]
 800970a:	9b00      	ldr	r3, [sp, #0]
 800970c:	4413      	add	r3, r2
 800970e:	9302      	str	r3, [sp, #8]
 8009710:	3301      	adds	r3, #1
 8009712:	2b01      	cmp	r3, #1
 8009714:	9303      	str	r3, [sp, #12]
 8009716:	bfb8      	it	lt
 8009718:	2301      	movlt	r3, #1
 800971a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800971c:	2200      	movs	r2, #0
 800971e:	6042      	str	r2, [r0, #4]
 8009720:	2204      	movs	r2, #4
 8009722:	f102 0614 	add.w	r6, r2, #20
 8009726:	429e      	cmp	r6, r3
 8009728:	6841      	ldr	r1, [r0, #4]
 800972a:	d93d      	bls.n	80097a8 <_dtoa_r+0x318>
 800972c:	4620      	mov	r0, r4
 800972e:	f001 f84b 	bl	800a7c8 <_Balloc>
 8009732:	9001      	str	r0, [sp, #4]
 8009734:	2800      	cmp	r0, #0
 8009736:	d13b      	bne.n	80097b0 <_dtoa_r+0x320>
 8009738:	4b11      	ldr	r3, [pc, #68]	; (8009780 <_dtoa_r+0x2f0>)
 800973a:	4602      	mov	r2, r0
 800973c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009740:	e6c0      	b.n	80094c4 <_dtoa_r+0x34>
 8009742:	2301      	movs	r3, #1
 8009744:	e7df      	b.n	8009706 <_dtoa_r+0x276>
 8009746:	bf00      	nop
 8009748:	636f4361 	.word	0x636f4361
 800974c:	3fd287a7 	.word	0x3fd287a7
 8009750:	8b60c8b3 	.word	0x8b60c8b3
 8009754:	3fc68a28 	.word	0x3fc68a28
 8009758:	509f79fb 	.word	0x509f79fb
 800975c:	3fd34413 	.word	0x3fd34413
 8009760:	0800cb3e 	.word	0x0800cb3e
 8009764:	0800cb55 	.word	0x0800cb55
 8009768:	7ff00000 	.word	0x7ff00000
 800976c:	0800cb3a 	.word	0x0800cb3a
 8009770:	0800cb31 	.word	0x0800cb31
 8009774:	0800cdaa 	.word	0x0800cdaa
 8009778:	3ff80000 	.word	0x3ff80000
 800977c:	0800ccc0 	.word	0x0800ccc0
 8009780:	0800cbb0 	.word	0x0800cbb0
 8009784:	2501      	movs	r5, #1
 8009786:	2300      	movs	r3, #0
 8009788:	9306      	str	r3, [sp, #24]
 800978a:	9508      	str	r5, [sp, #32]
 800978c:	f04f 33ff 	mov.w	r3, #4294967295
 8009790:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009794:	2200      	movs	r2, #0
 8009796:	2312      	movs	r3, #18
 8009798:	e7b0      	b.n	80096fc <_dtoa_r+0x26c>
 800979a:	2301      	movs	r3, #1
 800979c:	9308      	str	r3, [sp, #32]
 800979e:	e7f5      	b.n	800978c <_dtoa_r+0x2fc>
 80097a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80097a6:	e7b8      	b.n	800971a <_dtoa_r+0x28a>
 80097a8:	3101      	adds	r1, #1
 80097aa:	6041      	str	r1, [r0, #4]
 80097ac:	0052      	lsls	r2, r2, #1
 80097ae:	e7b8      	b.n	8009722 <_dtoa_r+0x292>
 80097b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097b2:	9a01      	ldr	r2, [sp, #4]
 80097b4:	601a      	str	r2, [r3, #0]
 80097b6:	9b03      	ldr	r3, [sp, #12]
 80097b8:	2b0e      	cmp	r3, #14
 80097ba:	f200 809d 	bhi.w	80098f8 <_dtoa_r+0x468>
 80097be:	2d00      	cmp	r5, #0
 80097c0:	f000 809a 	beq.w	80098f8 <_dtoa_r+0x468>
 80097c4:	9b00      	ldr	r3, [sp, #0]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	dd32      	ble.n	8009830 <_dtoa_r+0x3a0>
 80097ca:	4ab7      	ldr	r2, [pc, #732]	; (8009aa8 <_dtoa_r+0x618>)
 80097cc:	f003 030f 	and.w	r3, r3, #15
 80097d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80097d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80097d8:	9b00      	ldr	r3, [sp, #0]
 80097da:	05d8      	lsls	r0, r3, #23
 80097dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80097e0:	d516      	bpl.n	8009810 <_dtoa_r+0x380>
 80097e2:	4bb2      	ldr	r3, [pc, #712]	; (8009aac <_dtoa_r+0x61c>)
 80097e4:	ec51 0b19 	vmov	r0, r1, d9
 80097e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80097ec:	f7f7 f82e 	bl	800084c <__aeabi_ddiv>
 80097f0:	f007 070f 	and.w	r7, r7, #15
 80097f4:	4682      	mov	sl, r0
 80097f6:	468b      	mov	fp, r1
 80097f8:	2503      	movs	r5, #3
 80097fa:	4eac      	ldr	r6, [pc, #688]	; (8009aac <_dtoa_r+0x61c>)
 80097fc:	b957      	cbnz	r7, 8009814 <_dtoa_r+0x384>
 80097fe:	4642      	mov	r2, r8
 8009800:	464b      	mov	r3, r9
 8009802:	4650      	mov	r0, sl
 8009804:	4659      	mov	r1, fp
 8009806:	f7f7 f821 	bl	800084c <__aeabi_ddiv>
 800980a:	4682      	mov	sl, r0
 800980c:	468b      	mov	fp, r1
 800980e:	e028      	b.n	8009862 <_dtoa_r+0x3d2>
 8009810:	2502      	movs	r5, #2
 8009812:	e7f2      	b.n	80097fa <_dtoa_r+0x36a>
 8009814:	07f9      	lsls	r1, r7, #31
 8009816:	d508      	bpl.n	800982a <_dtoa_r+0x39a>
 8009818:	4640      	mov	r0, r8
 800981a:	4649      	mov	r1, r9
 800981c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009820:	f7f6 feea 	bl	80005f8 <__aeabi_dmul>
 8009824:	3501      	adds	r5, #1
 8009826:	4680      	mov	r8, r0
 8009828:	4689      	mov	r9, r1
 800982a:	107f      	asrs	r7, r7, #1
 800982c:	3608      	adds	r6, #8
 800982e:	e7e5      	b.n	80097fc <_dtoa_r+0x36c>
 8009830:	f000 809b 	beq.w	800996a <_dtoa_r+0x4da>
 8009834:	9b00      	ldr	r3, [sp, #0]
 8009836:	4f9d      	ldr	r7, [pc, #628]	; (8009aac <_dtoa_r+0x61c>)
 8009838:	425e      	negs	r6, r3
 800983a:	4b9b      	ldr	r3, [pc, #620]	; (8009aa8 <_dtoa_r+0x618>)
 800983c:	f006 020f 	and.w	r2, r6, #15
 8009840:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009848:	ec51 0b19 	vmov	r0, r1, d9
 800984c:	f7f6 fed4 	bl	80005f8 <__aeabi_dmul>
 8009850:	1136      	asrs	r6, r6, #4
 8009852:	4682      	mov	sl, r0
 8009854:	468b      	mov	fp, r1
 8009856:	2300      	movs	r3, #0
 8009858:	2502      	movs	r5, #2
 800985a:	2e00      	cmp	r6, #0
 800985c:	d17a      	bne.n	8009954 <_dtoa_r+0x4c4>
 800985e:	2b00      	cmp	r3, #0
 8009860:	d1d3      	bne.n	800980a <_dtoa_r+0x37a>
 8009862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009864:	2b00      	cmp	r3, #0
 8009866:	f000 8082 	beq.w	800996e <_dtoa_r+0x4de>
 800986a:	4b91      	ldr	r3, [pc, #580]	; (8009ab0 <_dtoa_r+0x620>)
 800986c:	2200      	movs	r2, #0
 800986e:	4650      	mov	r0, sl
 8009870:	4659      	mov	r1, fp
 8009872:	f7f7 f933 	bl	8000adc <__aeabi_dcmplt>
 8009876:	2800      	cmp	r0, #0
 8009878:	d079      	beq.n	800996e <_dtoa_r+0x4de>
 800987a:	9b03      	ldr	r3, [sp, #12]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d076      	beq.n	800996e <_dtoa_r+0x4de>
 8009880:	9b02      	ldr	r3, [sp, #8]
 8009882:	2b00      	cmp	r3, #0
 8009884:	dd36      	ble.n	80098f4 <_dtoa_r+0x464>
 8009886:	9b00      	ldr	r3, [sp, #0]
 8009888:	4650      	mov	r0, sl
 800988a:	4659      	mov	r1, fp
 800988c:	1e5f      	subs	r7, r3, #1
 800988e:	2200      	movs	r2, #0
 8009890:	4b88      	ldr	r3, [pc, #544]	; (8009ab4 <_dtoa_r+0x624>)
 8009892:	f7f6 feb1 	bl	80005f8 <__aeabi_dmul>
 8009896:	9e02      	ldr	r6, [sp, #8]
 8009898:	4682      	mov	sl, r0
 800989a:	468b      	mov	fp, r1
 800989c:	3501      	adds	r5, #1
 800989e:	4628      	mov	r0, r5
 80098a0:	f7f6 fe40 	bl	8000524 <__aeabi_i2d>
 80098a4:	4652      	mov	r2, sl
 80098a6:	465b      	mov	r3, fp
 80098a8:	f7f6 fea6 	bl	80005f8 <__aeabi_dmul>
 80098ac:	4b82      	ldr	r3, [pc, #520]	; (8009ab8 <_dtoa_r+0x628>)
 80098ae:	2200      	movs	r2, #0
 80098b0:	f7f6 fcec 	bl	800028c <__adddf3>
 80098b4:	46d0      	mov	r8, sl
 80098b6:	46d9      	mov	r9, fp
 80098b8:	4682      	mov	sl, r0
 80098ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80098be:	2e00      	cmp	r6, #0
 80098c0:	d158      	bne.n	8009974 <_dtoa_r+0x4e4>
 80098c2:	4b7e      	ldr	r3, [pc, #504]	; (8009abc <_dtoa_r+0x62c>)
 80098c4:	2200      	movs	r2, #0
 80098c6:	4640      	mov	r0, r8
 80098c8:	4649      	mov	r1, r9
 80098ca:	f7f6 fcdd 	bl	8000288 <__aeabi_dsub>
 80098ce:	4652      	mov	r2, sl
 80098d0:	465b      	mov	r3, fp
 80098d2:	4680      	mov	r8, r0
 80098d4:	4689      	mov	r9, r1
 80098d6:	f7f7 f91f 	bl	8000b18 <__aeabi_dcmpgt>
 80098da:	2800      	cmp	r0, #0
 80098dc:	f040 8295 	bne.w	8009e0a <_dtoa_r+0x97a>
 80098e0:	4652      	mov	r2, sl
 80098e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80098e6:	4640      	mov	r0, r8
 80098e8:	4649      	mov	r1, r9
 80098ea:	f7f7 f8f7 	bl	8000adc <__aeabi_dcmplt>
 80098ee:	2800      	cmp	r0, #0
 80098f0:	f040 8289 	bne.w	8009e06 <_dtoa_r+0x976>
 80098f4:	ec5b ab19 	vmov	sl, fp, d9
 80098f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	f2c0 8148 	blt.w	8009b90 <_dtoa_r+0x700>
 8009900:	9a00      	ldr	r2, [sp, #0]
 8009902:	2a0e      	cmp	r2, #14
 8009904:	f300 8144 	bgt.w	8009b90 <_dtoa_r+0x700>
 8009908:	4b67      	ldr	r3, [pc, #412]	; (8009aa8 <_dtoa_r+0x618>)
 800990a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800990e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009914:	2b00      	cmp	r3, #0
 8009916:	f280 80d5 	bge.w	8009ac4 <_dtoa_r+0x634>
 800991a:	9b03      	ldr	r3, [sp, #12]
 800991c:	2b00      	cmp	r3, #0
 800991e:	f300 80d1 	bgt.w	8009ac4 <_dtoa_r+0x634>
 8009922:	f040 826f 	bne.w	8009e04 <_dtoa_r+0x974>
 8009926:	4b65      	ldr	r3, [pc, #404]	; (8009abc <_dtoa_r+0x62c>)
 8009928:	2200      	movs	r2, #0
 800992a:	4640      	mov	r0, r8
 800992c:	4649      	mov	r1, r9
 800992e:	f7f6 fe63 	bl	80005f8 <__aeabi_dmul>
 8009932:	4652      	mov	r2, sl
 8009934:	465b      	mov	r3, fp
 8009936:	f7f7 f8e5 	bl	8000b04 <__aeabi_dcmpge>
 800993a:	9e03      	ldr	r6, [sp, #12]
 800993c:	4637      	mov	r7, r6
 800993e:	2800      	cmp	r0, #0
 8009940:	f040 8245 	bne.w	8009dce <_dtoa_r+0x93e>
 8009944:	9d01      	ldr	r5, [sp, #4]
 8009946:	2331      	movs	r3, #49	; 0x31
 8009948:	f805 3b01 	strb.w	r3, [r5], #1
 800994c:	9b00      	ldr	r3, [sp, #0]
 800994e:	3301      	adds	r3, #1
 8009950:	9300      	str	r3, [sp, #0]
 8009952:	e240      	b.n	8009dd6 <_dtoa_r+0x946>
 8009954:	07f2      	lsls	r2, r6, #31
 8009956:	d505      	bpl.n	8009964 <_dtoa_r+0x4d4>
 8009958:	e9d7 2300 	ldrd	r2, r3, [r7]
 800995c:	f7f6 fe4c 	bl	80005f8 <__aeabi_dmul>
 8009960:	3501      	adds	r5, #1
 8009962:	2301      	movs	r3, #1
 8009964:	1076      	asrs	r6, r6, #1
 8009966:	3708      	adds	r7, #8
 8009968:	e777      	b.n	800985a <_dtoa_r+0x3ca>
 800996a:	2502      	movs	r5, #2
 800996c:	e779      	b.n	8009862 <_dtoa_r+0x3d2>
 800996e:	9f00      	ldr	r7, [sp, #0]
 8009970:	9e03      	ldr	r6, [sp, #12]
 8009972:	e794      	b.n	800989e <_dtoa_r+0x40e>
 8009974:	9901      	ldr	r1, [sp, #4]
 8009976:	4b4c      	ldr	r3, [pc, #304]	; (8009aa8 <_dtoa_r+0x618>)
 8009978:	4431      	add	r1, r6
 800997a:	910d      	str	r1, [sp, #52]	; 0x34
 800997c:	9908      	ldr	r1, [sp, #32]
 800997e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009982:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009986:	2900      	cmp	r1, #0
 8009988:	d043      	beq.n	8009a12 <_dtoa_r+0x582>
 800998a:	494d      	ldr	r1, [pc, #308]	; (8009ac0 <_dtoa_r+0x630>)
 800998c:	2000      	movs	r0, #0
 800998e:	f7f6 ff5d 	bl	800084c <__aeabi_ddiv>
 8009992:	4652      	mov	r2, sl
 8009994:	465b      	mov	r3, fp
 8009996:	f7f6 fc77 	bl	8000288 <__aeabi_dsub>
 800999a:	9d01      	ldr	r5, [sp, #4]
 800999c:	4682      	mov	sl, r0
 800999e:	468b      	mov	fp, r1
 80099a0:	4649      	mov	r1, r9
 80099a2:	4640      	mov	r0, r8
 80099a4:	f7f7 f8d8 	bl	8000b58 <__aeabi_d2iz>
 80099a8:	4606      	mov	r6, r0
 80099aa:	f7f6 fdbb 	bl	8000524 <__aeabi_i2d>
 80099ae:	4602      	mov	r2, r0
 80099b0:	460b      	mov	r3, r1
 80099b2:	4640      	mov	r0, r8
 80099b4:	4649      	mov	r1, r9
 80099b6:	f7f6 fc67 	bl	8000288 <__aeabi_dsub>
 80099ba:	3630      	adds	r6, #48	; 0x30
 80099bc:	f805 6b01 	strb.w	r6, [r5], #1
 80099c0:	4652      	mov	r2, sl
 80099c2:	465b      	mov	r3, fp
 80099c4:	4680      	mov	r8, r0
 80099c6:	4689      	mov	r9, r1
 80099c8:	f7f7 f888 	bl	8000adc <__aeabi_dcmplt>
 80099cc:	2800      	cmp	r0, #0
 80099ce:	d163      	bne.n	8009a98 <_dtoa_r+0x608>
 80099d0:	4642      	mov	r2, r8
 80099d2:	464b      	mov	r3, r9
 80099d4:	4936      	ldr	r1, [pc, #216]	; (8009ab0 <_dtoa_r+0x620>)
 80099d6:	2000      	movs	r0, #0
 80099d8:	f7f6 fc56 	bl	8000288 <__aeabi_dsub>
 80099dc:	4652      	mov	r2, sl
 80099de:	465b      	mov	r3, fp
 80099e0:	f7f7 f87c 	bl	8000adc <__aeabi_dcmplt>
 80099e4:	2800      	cmp	r0, #0
 80099e6:	f040 80b5 	bne.w	8009b54 <_dtoa_r+0x6c4>
 80099ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099ec:	429d      	cmp	r5, r3
 80099ee:	d081      	beq.n	80098f4 <_dtoa_r+0x464>
 80099f0:	4b30      	ldr	r3, [pc, #192]	; (8009ab4 <_dtoa_r+0x624>)
 80099f2:	2200      	movs	r2, #0
 80099f4:	4650      	mov	r0, sl
 80099f6:	4659      	mov	r1, fp
 80099f8:	f7f6 fdfe 	bl	80005f8 <__aeabi_dmul>
 80099fc:	4b2d      	ldr	r3, [pc, #180]	; (8009ab4 <_dtoa_r+0x624>)
 80099fe:	4682      	mov	sl, r0
 8009a00:	468b      	mov	fp, r1
 8009a02:	4640      	mov	r0, r8
 8009a04:	4649      	mov	r1, r9
 8009a06:	2200      	movs	r2, #0
 8009a08:	f7f6 fdf6 	bl	80005f8 <__aeabi_dmul>
 8009a0c:	4680      	mov	r8, r0
 8009a0e:	4689      	mov	r9, r1
 8009a10:	e7c6      	b.n	80099a0 <_dtoa_r+0x510>
 8009a12:	4650      	mov	r0, sl
 8009a14:	4659      	mov	r1, fp
 8009a16:	f7f6 fdef 	bl	80005f8 <__aeabi_dmul>
 8009a1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a1c:	9d01      	ldr	r5, [sp, #4]
 8009a1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a20:	4682      	mov	sl, r0
 8009a22:	468b      	mov	fp, r1
 8009a24:	4649      	mov	r1, r9
 8009a26:	4640      	mov	r0, r8
 8009a28:	f7f7 f896 	bl	8000b58 <__aeabi_d2iz>
 8009a2c:	4606      	mov	r6, r0
 8009a2e:	f7f6 fd79 	bl	8000524 <__aeabi_i2d>
 8009a32:	3630      	adds	r6, #48	; 0x30
 8009a34:	4602      	mov	r2, r0
 8009a36:	460b      	mov	r3, r1
 8009a38:	4640      	mov	r0, r8
 8009a3a:	4649      	mov	r1, r9
 8009a3c:	f7f6 fc24 	bl	8000288 <__aeabi_dsub>
 8009a40:	f805 6b01 	strb.w	r6, [r5], #1
 8009a44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a46:	429d      	cmp	r5, r3
 8009a48:	4680      	mov	r8, r0
 8009a4a:	4689      	mov	r9, r1
 8009a4c:	f04f 0200 	mov.w	r2, #0
 8009a50:	d124      	bne.n	8009a9c <_dtoa_r+0x60c>
 8009a52:	4b1b      	ldr	r3, [pc, #108]	; (8009ac0 <_dtoa_r+0x630>)
 8009a54:	4650      	mov	r0, sl
 8009a56:	4659      	mov	r1, fp
 8009a58:	f7f6 fc18 	bl	800028c <__adddf3>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	460b      	mov	r3, r1
 8009a60:	4640      	mov	r0, r8
 8009a62:	4649      	mov	r1, r9
 8009a64:	f7f7 f858 	bl	8000b18 <__aeabi_dcmpgt>
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	d173      	bne.n	8009b54 <_dtoa_r+0x6c4>
 8009a6c:	4652      	mov	r2, sl
 8009a6e:	465b      	mov	r3, fp
 8009a70:	4913      	ldr	r1, [pc, #76]	; (8009ac0 <_dtoa_r+0x630>)
 8009a72:	2000      	movs	r0, #0
 8009a74:	f7f6 fc08 	bl	8000288 <__aeabi_dsub>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	4640      	mov	r0, r8
 8009a7e:	4649      	mov	r1, r9
 8009a80:	f7f7 f82c 	bl	8000adc <__aeabi_dcmplt>
 8009a84:	2800      	cmp	r0, #0
 8009a86:	f43f af35 	beq.w	80098f4 <_dtoa_r+0x464>
 8009a8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009a8c:	1e6b      	subs	r3, r5, #1
 8009a8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a90:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009a94:	2b30      	cmp	r3, #48	; 0x30
 8009a96:	d0f8      	beq.n	8009a8a <_dtoa_r+0x5fa>
 8009a98:	9700      	str	r7, [sp, #0]
 8009a9a:	e049      	b.n	8009b30 <_dtoa_r+0x6a0>
 8009a9c:	4b05      	ldr	r3, [pc, #20]	; (8009ab4 <_dtoa_r+0x624>)
 8009a9e:	f7f6 fdab 	bl	80005f8 <__aeabi_dmul>
 8009aa2:	4680      	mov	r8, r0
 8009aa4:	4689      	mov	r9, r1
 8009aa6:	e7bd      	b.n	8009a24 <_dtoa_r+0x594>
 8009aa8:	0800ccc0 	.word	0x0800ccc0
 8009aac:	0800cc98 	.word	0x0800cc98
 8009ab0:	3ff00000 	.word	0x3ff00000
 8009ab4:	40240000 	.word	0x40240000
 8009ab8:	401c0000 	.word	0x401c0000
 8009abc:	40140000 	.word	0x40140000
 8009ac0:	3fe00000 	.word	0x3fe00000
 8009ac4:	9d01      	ldr	r5, [sp, #4]
 8009ac6:	4656      	mov	r6, sl
 8009ac8:	465f      	mov	r7, fp
 8009aca:	4642      	mov	r2, r8
 8009acc:	464b      	mov	r3, r9
 8009ace:	4630      	mov	r0, r6
 8009ad0:	4639      	mov	r1, r7
 8009ad2:	f7f6 febb 	bl	800084c <__aeabi_ddiv>
 8009ad6:	f7f7 f83f 	bl	8000b58 <__aeabi_d2iz>
 8009ada:	4682      	mov	sl, r0
 8009adc:	f7f6 fd22 	bl	8000524 <__aeabi_i2d>
 8009ae0:	4642      	mov	r2, r8
 8009ae2:	464b      	mov	r3, r9
 8009ae4:	f7f6 fd88 	bl	80005f8 <__aeabi_dmul>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	460b      	mov	r3, r1
 8009aec:	4630      	mov	r0, r6
 8009aee:	4639      	mov	r1, r7
 8009af0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009af4:	f7f6 fbc8 	bl	8000288 <__aeabi_dsub>
 8009af8:	f805 6b01 	strb.w	r6, [r5], #1
 8009afc:	9e01      	ldr	r6, [sp, #4]
 8009afe:	9f03      	ldr	r7, [sp, #12]
 8009b00:	1bae      	subs	r6, r5, r6
 8009b02:	42b7      	cmp	r7, r6
 8009b04:	4602      	mov	r2, r0
 8009b06:	460b      	mov	r3, r1
 8009b08:	d135      	bne.n	8009b76 <_dtoa_r+0x6e6>
 8009b0a:	f7f6 fbbf 	bl	800028c <__adddf3>
 8009b0e:	4642      	mov	r2, r8
 8009b10:	464b      	mov	r3, r9
 8009b12:	4606      	mov	r6, r0
 8009b14:	460f      	mov	r7, r1
 8009b16:	f7f6 ffff 	bl	8000b18 <__aeabi_dcmpgt>
 8009b1a:	b9d0      	cbnz	r0, 8009b52 <_dtoa_r+0x6c2>
 8009b1c:	4642      	mov	r2, r8
 8009b1e:	464b      	mov	r3, r9
 8009b20:	4630      	mov	r0, r6
 8009b22:	4639      	mov	r1, r7
 8009b24:	f7f6 ffd0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b28:	b110      	cbz	r0, 8009b30 <_dtoa_r+0x6a0>
 8009b2a:	f01a 0f01 	tst.w	sl, #1
 8009b2e:	d110      	bne.n	8009b52 <_dtoa_r+0x6c2>
 8009b30:	4620      	mov	r0, r4
 8009b32:	ee18 1a10 	vmov	r1, s16
 8009b36:	f000 fe87 	bl	800a848 <_Bfree>
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	9800      	ldr	r0, [sp, #0]
 8009b3e:	702b      	strb	r3, [r5, #0]
 8009b40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b42:	3001      	adds	r0, #1
 8009b44:	6018      	str	r0, [r3, #0]
 8009b46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f43f acf1 	beq.w	8009530 <_dtoa_r+0xa0>
 8009b4e:	601d      	str	r5, [r3, #0]
 8009b50:	e4ee      	b.n	8009530 <_dtoa_r+0xa0>
 8009b52:	9f00      	ldr	r7, [sp, #0]
 8009b54:	462b      	mov	r3, r5
 8009b56:	461d      	mov	r5, r3
 8009b58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b5c:	2a39      	cmp	r2, #57	; 0x39
 8009b5e:	d106      	bne.n	8009b6e <_dtoa_r+0x6de>
 8009b60:	9a01      	ldr	r2, [sp, #4]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d1f7      	bne.n	8009b56 <_dtoa_r+0x6c6>
 8009b66:	9901      	ldr	r1, [sp, #4]
 8009b68:	2230      	movs	r2, #48	; 0x30
 8009b6a:	3701      	adds	r7, #1
 8009b6c:	700a      	strb	r2, [r1, #0]
 8009b6e:	781a      	ldrb	r2, [r3, #0]
 8009b70:	3201      	adds	r2, #1
 8009b72:	701a      	strb	r2, [r3, #0]
 8009b74:	e790      	b.n	8009a98 <_dtoa_r+0x608>
 8009b76:	4ba6      	ldr	r3, [pc, #664]	; (8009e10 <_dtoa_r+0x980>)
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f7f6 fd3d 	bl	80005f8 <__aeabi_dmul>
 8009b7e:	2200      	movs	r2, #0
 8009b80:	2300      	movs	r3, #0
 8009b82:	4606      	mov	r6, r0
 8009b84:	460f      	mov	r7, r1
 8009b86:	f7f6 ff9f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b8a:	2800      	cmp	r0, #0
 8009b8c:	d09d      	beq.n	8009aca <_dtoa_r+0x63a>
 8009b8e:	e7cf      	b.n	8009b30 <_dtoa_r+0x6a0>
 8009b90:	9a08      	ldr	r2, [sp, #32]
 8009b92:	2a00      	cmp	r2, #0
 8009b94:	f000 80d7 	beq.w	8009d46 <_dtoa_r+0x8b6>
 8009b98:	9a06      	ldr	r2, [sp, #24]
 8009b9a:	2a01      	cmp	r2, #1
 8009b9c:	f300 80ba 	bgt.w	8009d14 <_dtoa_r+0x884>
 8009ba0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ba2:	2a00      	cmp	r2, #0
 8009ba4:	f000 80b2 	beq.w	8009d0c <_dtoa_r+0x87c>
 8009ba8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009bac:	9e07      	ldr	r6, [sp, #28]
 8009bae:	9d04      	ldr	r5, [sp, #16]
 8009bb0:	9a04      	ldr	r2, [sp, #16]
 8009bb2:	441a      	add	r2, r3
 8009bb4:	9204      	str	r2, [sp, #16]
 8009bb6:	9a05      	ldr	r2, [sp, #20]
 8009bb8:	2101      	movs	r1, #1
 8009bba:	441a      	add	r2, r3
 8009bbc:	4620      	mov	r0, r4
 8009bbe:	9205      	str	r2, [sp, #20]
 8009bc0:	f000 ff44 	bl	800aa4c <__i2b>
 8009bc4:	4607      	mov	r7, r0
 8009bc6:	2d00      	cmp	r5, #0
 8009bc8:	dd0c      	ble.n	8009be4 <_dtoa_r+0x754>
 8009bca:	9b05      	ldr	r3, [sp, #20]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	dd09      	ble.n	8009be4 <_dtoa_r+0x754>
 8009bd0:	42ab      	cmp	r3, r5
 8009bd2:	9a04      	ldr	r2, [sp, #16]
 8009bd4:	bfa8      	it	ge
 8009bd6:	462b      	movge	r3, r5
 8009bd8:	1ad2      	subs	r2, r2, r3
 8009bda:	9204      	str	r2, [sp, #16]
 8009bdc:	9a05      	ldr	r2, [sp, #20]
 8009bde:	1aed      	subs	r5, r5, r3
 8009be0:	1ad3      	subs	r3, r2, r3
 8009be2:	9305      	str	r3, [sp, #20]
 8009be4:	9b07      	ldr	r3, [sp, #28]
 8009be6:	b31b      	cbz	r3, 8009c30 <_dtoa_r+0x7a0>
 8009be8:	9b08      	ldr	r3, [sp, #32]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f000 80af 	beq.w	8009d4e <_dtoa_r+0x8be>
 8009bf0:	2e00      	cmp	r6, #0
 8009bf2:	dd13      	ble.n	8009c1c <_dtoa_r+0x78c>
 8009bf4:	4639      	mov	r1, r7
 8009bf6:	4632      	mov	r2, r6
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f000 ffe7 	bl	800abcc <__pow5mult>
 8009bfe:	ee18 2a10 	vmov	r2, s16
 8009c02:	4601      	mov	r1, r0
 8009c04:	4607      	mov	r7, r0
 8009c06:	4620      	mov	r0, r4
 8009c08:	f000 ff36 	bl	800aa78 <__multiply>
 8009c0c:	ee18 1a10 	vmov	r1, s16
 8009c10:	4680      	mov	r8, r0
 8009c12:	4620      	mov	r0, r4
 8009c14:	f000 fe18 	bl	800a848 <_Bfree>
 8009c18:	ee08 8a10 	vmov	s16, r8
 8009c1c:	9b07      	ldr	r3, [sp, #28]
 8009c1e:	1b9a      	subs	r2, r3, r6
 8009c20:	d006      	beq.n	8009c30 <_dtoa_r+0x7a0>
 8009c22:	ee18 1a10 	vmov	r1, s16
 8009c26:	4620      	mov	r0, r4
 8009c28:	f000 ffd0 	bl	800abcc <__pow5mult>
 8009c2c:	ee08 0a10 	vmov	s16, r0
 8009c30:	2101      	movs	r1, #1
 8009c32:	4620      	mov	r0, r4
 8009c34:	f000 ff0a 	bl	800aa4c <__i2b>
 8009c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	4606      	mov	r6, r0
 8009c3e:	f340 8088 	ble.w	8009d52 <_dtoa_r+0x8c2>
 8009c42:	461a      	mov	r2, r3
 8009c44:	4601      	mov	r1, r0
 8009c46:	4620      	mov	r0, r4
 8009c48:	f000 ffc0 	bl	800abcc <__pow5mult>
 8009c4c:	9b06      	ldr	r3, [sp, #24]
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	4606      	mov	r6, r0
 8009c52:	f340 8081 	ble.w	8009d58 <_dtoa_r+0x8c8>
 8009c56:	f04f 0800 	mov.w	r8, #0
 8009c5a:	6933      	ldr	r3, [r6, #16]
 8009c5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009c60:	6918      	ldr	r0, [r3, #16]
 8009c62:	f000 fea3 	bl	800a9ac <__hi0bits>
 8009c66:	f1c0 0020 	rsb	r0, r0, #32
 8009c6a:	9b05      	ldr	r3, [sp, #20]
 8009c6c:	4418      	add	r0, r3
 8009c6e:	f010 001f 	ands.w	r0, r0, #31
 8009c72:	f000 8092 	beq.w	8009d9a <_dtoa_r+0x90a>
 8009c76:	f1c0 0320 	rsb	r3, r0, #32
 8009c7a:	2b04      	cmp	r3, #4
 8009c7c:	f340 808a 	ble.w	8009d94 <_dtoa_r+0x904>
 8009c80:	f1c0 001c 	rsb	r0, r0, #28
 8009c84:	9b04      	ldr	r3, [sp, #16]
 8009c86:	4403      	add	r3, r0
 8009c88:	9304      	str	r3, [sp, #16]
 8009c8a:	9b05      	ldr	r3, [sp, #20]
 8009c8c:	4403      	add	r3, r0
 8009c8e:	4405      	add	r5, r0
 8009c90:	9305      	str	r3, [sp, #20]
 8009c92:	9b04      	ldr	r3, [sp, #16]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	dd07      	ble.n	8009ca8 <_dtoa_r+0x818>
 8009c98:	ee18 1a10 	vmov	r1, s16
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f000 ffee 	bl	800ac80 <__lshift>
 8009ca4:	ee08 0a10 	vmov	s16, r0
 8009ca8:	9b05      	ldr	r3, [sp, #20]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	dd05      	ble.n	8009cba <_dtoa_r+0x82a>
 8009cae:	4631      	mov	r1, r6
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	f000 ffe4 	bl	800ac80 <__lshift>
 8009cb8:	4606      	mov	r6, r0
 8009cba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d06e      	beq.n	8009d9e <_dtoa_r+0x90e>
 8009cc0:	ee18 0a10 	vmov	r0, s16
 8009cc4:	4631      	mov	r1, r6
 8009cc6:	f001 f84b 	bl	800ad60 <__mcmp>
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	da67      	bge.n	8009d9e <_dtoa_r+0x90e>
 8009cce:	9b00      	ldr	r3, [sp, #0]
 8009cd0:	3b01      	subs	r3, #1
 8009cd2:	ee18 1a10 	vmov	r1, s16
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	220a      	movs	r2, #10
 8009cda:	2300      	movs	r3, #0
 8009cdc:	4620      	mov	r0, r4
 8009cde:	f000 fdd5 	bl	800a88c <__multadd>
 8009ce2:	9b08      	ldr	r3, [sp, #32]
 8009ce4:	ee08 0a10 	vmov	s16, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f000 81b1 	beq.w	800a050 <_dtoa_r+0xbc0>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	4639      	mov	r1, r7
 8009cf2:	220a      	movs	r2, #10
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	f000 fdc9 	bl	800a88c <__multadd>
 8009cfa:	9b02      	ldr	r3, [sp, #8]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	4607      	mov	r7, r0
 8009d00:	f300 808e 	bgt.w	8009e20 <_dtoa_r+0x990>
 8009d04:	9b06      	ldr	r3, [sp, #24]
 8009d06:	2b02      	cmp	r3, #2
 8009d08:	dc51      	bgt.n	8009dae <_dtoa_r+0x91e>
 8009d0a:	e089      	b.n	8009e20 <_dtoa_r+0x990>
 8009d0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009d12:	e74b      	b.n	8009bac <_dtoa_r+0x71c>
 8009d14:	9b03      	ldr	r3, [sp, #12]
 8009d16:	1e5e      	subs	r6, r3, #1
 8009d18:	9b07      	ldr	r3, [sp, #28]
 8009d1a:	42b3      	cmp	r3, r6
 8009d1c:	bfbf      	itttt	lt
 8009d1e:	9b07      	ldrlt	r3, [sp, #28]
 8009d20:	9607      	strlt	r6, [sp, #28]
 8009d22:	1af2      	sublt	r2, r6, r3
 8009d24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009d26:	bfb6      	itet	lt
 8009d28:	189b      	addlt	r3, r3, r2
 8009d2a:	1b9e      	subge	r6, r3, r6
 8009d2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009d2e:	9b03      	ldr	r3, [sp, #12]
 8009d30:	bfb8      	it	lt
 8009d32:	2600      	movlt	r6, #0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	bfb7      	itett	lt
 8009d38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009d3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009d40:	1a9d      	sublt	r5, r3, r2
 8009d42:	2300      	movlt	r3, #0
 8009d44:	e734      	b.n	8009bb0 <_dtoa_r+0x720>
 8009d46:	9e07      	ldr	r6, [sp, #28]
 8009d48:	9d04      	ldr	r5, [sp, #16]
 8009d4a:	9f08      	ldr	r7, [sp, #32]
 8009d4c:	e73b      	b.n	8009bc6 <_dtoa_r+0x736>
 8009d4e:	9a07      	ldr	r2, [sp, #28]
 8009d50:	e767      	b.n	8009c22 <_dtoa_r+0x792>
 8009d52:	9b06      	ldr	r3, [sp, #24]
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	dc18      	bgt.n	8009d8a <_dtoa_r+0x8fa>
 8009d58:	f1ba 0f00 	cmp.w	sl, #0
 8009d5c:	d115      	bne.n	8009d8a <_dtoa_r+0x8fa>
 8009d5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d62:	b993      	cbnz	r3, 8009d8a <_dtoa_r+0x8fa>
 8009d64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d68:	0d1b      	lsrs	r3, r3, #20
 8009d6a:	051b      	lsls	r3, r3, #20
 8009d6c:	b183      	cbz	r3, 8009d90 <_dtoa_r+0x900>
 8009d6e:	9b04      	ldr	r3, [sp, #16]
 8009d70:	3301      	adds	r3, #1
 8009d72:	9304      	str	r3, [sp, #16]
 8009d74:	9b05      	ldr	r3, [sp, #20]
 8009d76:	3301      	adds	r3, #1
 8009d78:	9305      	str	r3, [sp, #20]
 8009d7a:	f04f 0801 	mov.w	r8, #1
 8009d7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f47f af6a 	bne.w	8009c5a <_dtoa_r+0x7ca>
 8009d86:	2001      	movs	r0, #1
 8009d88:	e76f      	b.n	8009c6a <_dtoa_r+0x7da>
 8009d8a:	f04f 0800 	mov.w	r8, #0
 8009d8e:	e7f6      	b.n	8009d7e <_dtoa_r+0x8ee>
 8009d90:	4698      	mov	r8, r3
 8009d92:	e7f4      	b.n	8009d7e <_dtoa_r+0x8ee>
 8009d94:	f43f af7d 	beq.w	8009c92 <_dtoa_r+0x802>
 8009d98:	4618      	mov	r0, r3
 8009d9a:	301c      	adds	r0, #28
 8009d9c:	e772      	b.n	8009c84 <_dtoa_r+0x7f4>
 8009d9e:	9b03      	ldr	r3, [sp, #12]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	dc37      	bgt.n	8009e14 <_dtoa_r+0x984>
 8009da4:	9b06      	ldr	r3, [sp, #24]
 8009da6:	2b02      	cmp	r3, #2
 8009da8:	dd34      	ble.n	8009e14 <_dtoa_r+0x984>
 8009daa:	9b03      	ldr	r3, [sp, #12]
 8009dac:	9302      	str	r3, [sp, #8]
 8009dae:	9b02      	ldr	r3, [sp, #8]
 8009db0:	b96b      	cbnz	r3, 8009dce <_dtoa_r+0x93e>
 8009db2:	4631      	mov	r1, r6
 8009db4:	2205      	movs	r2, #5
 8009db6:	4620      	mov	r0, r4
 8009db8:	f000 fd68 	bl	800a88c <__multadd>
 8009dbc:	4601      	mov	r1, r0
 8009dbe:	4606      	mov	r6, r0
 8009dc0:	ee18 0a10 	vmov	r0, s16
 8009dc4:	f000 ffcc 	bl	800ad60 <__mcmp>
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	f73f adbb 	bgt.w	8009944 <_dtoa_r+0x4b4>
 8009dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dd0:	9d01      	ldr	r5, [sp, #4]
 8009dd2:	43db      	mvns	r3, r3
 8009dd4:	9300      	str	r3, [sp, #0]
 8009dd6:	f04f 0800 	mov.w	r8, #0
 8009dda:	4631      	mov	r1, r6
 8009ddc:	4620      	mov	r0, r4
 8009dde:	f000 fd33 	bl	800a848 <_Bfree>
 8009de2:	2f00      	cmp	r7, #0
 8009de4:	f43f aea4 	beq.w	8009b30 <_dtoa_r+0x6a0>
 8009de8:	f1b8 0f00 	cmp.w	r8, #0
 8009dec:	d005      	beq.n	8009dfa <_dtoa_r+0x96a>
 8009dee:	45b8      	cmp	r8, r7
 8009df0:	d003      	beq.n	8009dfa <_dtoa_r+0x96a>
 8009df2:	4641      	mov	r1, r8
 8009df4:	4620      	mov	r0, r4
 8009df6:	f000 fd27 	bl	800a848 <_Bfree>
 8009dfa:	4639      	mov	r1, r7
 8009dfc:	4620      	mov	r0, r4
 8009dfe:	f000 fd23 	bl	800a848 <_Bfree>
 8009e02:	e695      	b.n	8009b30 <_dtoa_r+0x6a0>
 8009e04:	2600      	movs	r6, #0
 8009e06:	4637      	mov	r7, r6
 8009e08:	e7e1      	b.n	8009dce <_dtoa_r+0x93e>
 8009e0a:	9700      	str	r7, [sp, #0]
 8009e0c:	4637      	mov	r7, r6
 8009e0e:	e599      	b.n	8009944 <_dtoa_r+0x4b4>
 8009e10:	40240000 	.word	0x40240000
 8009e14:	9b08      	ldr	r3, [sp, #32]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f000 80ca 	beq.w	8009fb0 <_dtoa_r+0xb20>
 8009e1c:	9b03      	ldr	r3, [sp, #12]
 8009e1e:	9302      	str	r3, [sp, #8]
 8009e20:	2d00      	cmp	r5, #0
 8009e22:	dd05      	ble.n	8009e30 <_dtoa_r+0x9a0>
 8009e24:	4639      	mov	r1, r7
 8009e26:	462a      	mov	r2, r5
 8009e28:	4620      	mov	r0, r4
 8009e2a:	f000 ff29 	bl	800ac80 <__lshift>
 8009e2e:	4607      	mov	r7, r0
 8009e30:	f1b8 0f00 	cmp.w	r8, #0
 8009e34:	d05b      	beq.n	8009eee <_dtoa_r+0xa5e>
 8009e36:	6879      	ldr	r1, [r7, #4]
 8009e38:	4620      	mov	r0, r4
 8009e3a:	f000 fcc5 	bl	800a7c8 <_Balloc>
 8009e3e:	4605      	mov	r5, r0
 8009e40:	b928      	cbnz	r0, 8009e4e <_dtoa_r+0x9be>
 8009e42:	4b87      	ldr	r3, [pc, #540]	; (800a060 <_dtoa_r+0xbd0>)
 8009e44:	4602      	mov	r2, r0
 8009e46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009e4a:	f7ff bb3b 	b.w	80094c4 <_dtoa_r+0x34>
 8009e4e:	693a      	ldr	r2, [r7, #16]
 8009e50:	3202      	adds	r2, #2
 8009e52:	0092      	lsls	r2, r2, #2
 8009e54:	f107 010c 	add.w	r1, r7, #12
 8009e58:	300c      	adds	r0, #12
 8009e5a:	f000 fca7 	bl	800a7ac <memcpy>
 8009e5e:	2201      	movs	r2, #1
 8009e60:	4629      	mov	r1, r5
 8009e62:	4620      	mov	r0, r4
 8009e64:	f000 ff0c 	bl	800ac80 <__lshift>
 8009e68:	9b01      	ldr	r3, [sp, #4]
 8009e6a:	f103 0901 	add.w	r9, r3, #1
 8009e6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009e72:	4413      	add	r3, r2
 8009e74:	9305      	str	r3, [sp, #20]
 8009e76:	f00a 0301 	and.w	r3, sl, #1
 8009e7a:	46b8      	mov	r8, r7
 8009e7c:	9304      	str	r3, [sp, #16]
 8009e7e:	4607      	mov	r7, r0
 8009e80:	4631      	mov	r1, r6
 8009e82:	ee18 0a10 	vmov	r0, s16
 8009e86:	f7ff fa75 	bl	8009374 <quorem>
 8009e8a:	4641      	mov	r1, r8
 8009e8c:	9002      	str	r0, [sp, #8]
 8009e8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009e92:	ee18 0a10 	vmov	r0, s16
 8009e96:	f000 ff63 	bl	800ad60 <__mcmp>
 8009e9a:	463a      	mov	r2, r7
 8009e9c:	9003      	str	r0, [sp, #12]
 8009e9e:	4631      	mov	r1, r6
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	f000 ff79 	bl	800ad98 <__mdiff>
 8009ea6:	68c2      	ldr	r2, [r0, #12]
 8009ea8:	f109 3bff 	add.w	fp, r9, #4294967295
 8009eac:	4605      	mov	r5, r0
 8009eae:	bb02      	cbnz	r2, 8009ef2 <_dtoa_r+0xa62>
 8009eb0:	4601      	mov	r1, r0
 8009eb2:	ee18 0a10 	vmov	r0, s16
 8009eb6:	f000 ff53 	bl	800ad60 <__mcmp>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	4629      	mov	r1, r5
 8009ebe:	4620      	mov	r0, r4
 8009ec0:	9207      	str	r2, [sp, #28]
 8009ec2:	f000 fcc1 	bl	800a848 <_Bfree>
 8009ec6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009eca:	ea43 0102 	orr.w	r1, r3, r2
 8009ece:	9b04      	ldr	r3, [sp, #16]
 8009ed0:	430b      	orrs	r3, r1
 8009ed2:	464d      	mov	r5, r9
 8009ed4:	d10f      	bne.n	8009ef6 <_dtoa_r+0xa66>
 8009ed6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009eda:	d02a      	beq.n	8009f32 <_dtoa_r+0xaa2>
 8009edc:	9b03      	ldr	r3, [sp, #12]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	dd02      	ble.n	8009ee8 <_dtoa_r+0xa58>
 8009ee2:	9b02      	ldr	r3, [sp, #8]
 8009ee4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009ee8:	f88b a000 	strb.w	sl, [fp]
 8009eec:	e775      	b.n	8009dda <_dtoa_r+0x94a>
 8009eee:	4638      	mov	r0, r7
 8009ef0:	e7ba      	b.n	8009e68 <_dtoa_r+0x9d8>
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	e7e2      	b.n	8009ebc <_dtoa_r+0xa2c>
 8009ef6:	9b03      	ldr	r3, [sp, #12]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	db04      	blt.n	8009f06 <_dtoa_r+0xa76>
 8009efc:	9906      	ldr	r1, [sp, #24]
 8009efe:	430b      	orrs	r3, r1
 8009f00:	9904      	ldr	r1, [sp, #16]
 8009f02:	430b      	orrs	r3, r1
 8009f04:	d122      	bne.n	8009f4c <_dtoa_r+0xabc>
 8009f06:	2a00      	cmp	r2, #0
 8009f08:	ddee      	ble.n	8009ee8 <_dtoa_r+0xa58>
 8009f0a:	ee18 1a10 	vmov	r1, s16
 8009f0e:	2201      	movs	r2, #1
 8009f10:	4620      	mov	r0, r4
 8009f12:	f000 feb5 	bl	800ac80 <__lshift>
 8009f16:	4631      	mov	r1, r6
 8009f18:	ee08 0a10 	vmov	s16, r0
 8009f1c:	f000 ff20 	bl	800ad60 <__mcmp>
 8009f20:	2800      	cmp	r0, #0
 8009f22:	dc03      	bgt.n	8009f2c <_dtoa_r+0xa9c>
 8009f24:	d1e0      	bne.n	8009ee8 <_dtoa_r+0xa58>
 8009f26:	f01a 0f01 	tst.w	sl, #1
 8009f2a:	d0dd      	beq.n	8009ee8 <_dtoa_r+0xa58>
 8009f2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009f30:	d1d7      	bne.n	8009ee2 <_dtoa_r+0xa52>
 8009f32:	2339      	movs	r3, #57	; 0x39
 8009f34:	f88b 3000 	strb.w	r3, [fp]
 8009f38:	462b      	mov	r3, r5
 8009f3a:	461d      	mov	r5, r3
 8009f3c:	3b01      	subs	r3, #1
 8009f3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009f42:	2a39      	cmp	r2, #57	; 0x39
 8009f44:	d071      	beq.n	800a02a <_dtoa_r+0xb9a>
 8009f46:	3201      	adds	r2, #1
 8009f48:	701a      	strb	r2, [r3, #0]
 8009f4a:	e746      	b.n	8009dda <_dtoa_r+0x94a>
 8009f4c:	2a00      	cmp	r2, #0
 8009f4e:	dd07      	ble.n	8009f60 <_dtoa_r+0xad0>
 8009f50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009f54:	d0ed      	beq.n	8009f32 <_dtoa_r+0xaa2>
 8009f56:	f10a 0301 	add.w	r3, sl, #1
 8009f5a:	f88b 3000 	strb.w	r3, [fp]
 8009f5e:	e73c      	b.n	8009dda <_dtoa_r+0x94a>
 8009f60:	9b05      	ldr	r3, [sp, #20]
 8009f62:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009f66:	4599      	cmp	r9, r3
 8009f68:	d047      	beq.n	8009ffa <_dtoa_r+0xb6a>
 8009f6a:	ee18 1a10 	vmov	r1, s16
 8009f6e:	2300      	movs	r3, #0
 8009f70:	220a      	movs	r2, #10
 8009f72:	4620      	mov	r0, r4
 8009f74:	f000 fc8a 	bl	800a88c <__multadd>
 8009f78:	45b8      	cmp	r8, r7
 8009f7a:	ee08 0a10 	vmov	s16, r0
 8009f7e:	f04f 0300 	mov.w	r3, #0
 8009f82:	f04f 020a 	mov.w	r2, #10
 8009f86:	4641      	mov	r1, r8
 8009f88:	4620      	mov	r0, r4
 8009f8a:	d106      	bne.n	8009f9a <_dtoa_r+0xb0a>
 8009f8c:	f000 fc7e 	bl	800a88c <__multadd>
 8009f90:	4680      	mov	r8, r0
 8009f92:	4607      	mov	r7, r0
 8009f94:	f109 0901 	add.w	r9, r9, #1
 8009f98:	e772      	b.n	8009e80 <_dtoa_r+0x9f0>
 8009f9a:	f000 fc77 	bl	800a88c <__multadd>
 8009f9e:	4639      	mov	r1, r7
 8009fa0:	4680      	mov	r8, r0
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	220a      	movs	r2, #10
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	f000 fc70 	bl	800a88c <__multadd>
 8009fac:	4607      	mov	r7, r0
 8009fae:	e7f1      	b.n	8009f94 <_dtoa_r+0xb04>
 8009fb0:	9b03      	ldr	r3, [sp, #12]
 8009fb2:	9302      	str	r3, [sp, #8]
 8009fb4:	9d01      	ldr	r5, [sp, #4]
 8009fb6:	ee18 0a10 	vmov	r0, s16
 8009fba:	4631      	mov	r1, r6
 8009fbc:	f7ff f9da 	bl	8009374 <quorem>
 8009fc0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009fc4:	9b01      	ldr	r3, [sp, #4]
 8009fc6:	f805 ab01 	strb.w	sl, [r5], #1
 8009fca:	1aea      	subs	r2, r5, r3
 8009fcc:	9b02      	ldr	r3, [sp, #8]
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	dd09      	ble.n	8009fe6 <_dtoa_r+0xb56>
 8009fd2:	ee18 1a10 	vmov	r1, s16
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	220a      	movs	r2, #10
 8009fda:	4620      	mov	r0, r4
 8009fdc:	f000 fc56 	bl	800a88c <__multadd>
 8009fe0:	ee08 0a10 	vmov	s16, r0
 8009fe4:	e7e7      	b.n	8009fb6 <_dtoa_r+0xb26>
 8009fe6:	9b02      	ldr	r3, [sp, #8]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	bfc8      	it	gt
 8009fec:	461d      	movgt	r5, r3
 8009fee:	9b01      	ldr	r3, [sp, #4]
 8009ff0:	bfd8      	it	le
 8009ff2:	2501      	movle	r5, #1
 8009ff4:	441d      	add	r5, r3
 8009ff6:	f04f 0800 	mov.w	r8, #0
 8009ffa:	ee18 1a10 	vmov	r1, s16
 8009ffe:	2201      	movs	r2, #1
 800a000:	4620      	mov	r0, r4
 800a002:	f000 fe3d 	bl	800ac80 <__lshift>
 800a006:	4631      	mov	r1, r6
 800a008:	ee08 0a10 	vmov	s16, r0
 800a00c:	f000 fea8 	bl	800ad60 <__mcmp>
 800a010:	2800      	cmp	r0, #0
 800a012:	dc91      	bgt.n	8009f38 <_dtoa_r+0xaa8>
 800a014:	d102      	bne.n	800a01c <_dtoa_r+0xb8c>
 800a016:	f01a 0f01 	tst.w	sl, #1
 800a01a:	d18d      	bne.n	8009f38 <_dtoa_r+0xaa8>
 800a01c:	462b      	mov	r3, r5
 800a01e:	461d      	mov	r5, r3
 800a020:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a024:	2a30      	cmp	r2, #48	; 0x30
 800a026:	d0fa      	beq.n	800a01e <_dtoa_r+0xb8e>
 800a028:	e6d7      	b.n	8009dda <_dtoa_r+0x94a>
 800a02a:	9a01      	ldr	r2, [sp, #4]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d184      	bne.n	8009f3a <_dtoa_r+0xaaa>
 800a030:	9b00      	ldr	r3, [sp, #0]
 800a032:	3301      	adds	r3, #1
 800a034:	9300      	str	r3, [sp, #0]
 800a036:	2331      	movs	r3, #49	; 0x31
 800a038:	7013      	strb	r3, [r2, #0]
 800a03a:	e6ce      	b.n	8009dda <_dtoa_r+0x94a>
 800a03c:	4b09      	ldr	r3, [pc, #36]	; (800a064 <_dtoa_r+0xbd4>)
 800a03e:	f7ff ba95 	b.w	800956c <_dtoa_r+0xdc>
 800a042:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a044:	2b00      	cmp	r3, #0
 800a046:	f47f aa6e 	bne.w	8009526 <_dtoa_r+0x96>
 800a04a:	4b07      	ldr	r3, [pc, #28]	; (800a068 <_dtoa_r+0xbd8>)
 800a04c:	f7ff ba8e 	b.w	800956c <_dtoa_r+0xdc>
 800a050:	9b02      	ldr	r3, [sp, #8]
 800a052:	2b00      	cmp	r3, #0
 800a054:	dcae      	bgt.n	8009fb4 <_dtoa_r+0xb24>
 800a056:	9b06      	ldr	r3, [sp, #24]
 800a058:	2b02      	cmp	r3, #2
 800a05a:	f73f aea8 	bgt.w	8009dae <_dtoa_r+0x91e>
 800a05e:	e7a9      	b.n	8009fb4 <_dtoa_r+0xb24>
 800a060:	0800cbb0 	.word	0x0800cbb0
 800a064:	0800cda9 	.word	0x0800cda9
 800a068:	0800cb31 	.word	0x0800cb31

0800a06c <rshift>:
 800a06c:	6903      	ldr	r3, [r0, #16]
 800a06e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a072:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a076:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a07a:	f100 0414 	add.w	r4, r0, #20
 800a07e:	dd45      	ble.n	800a10c <rshift+0xa0>
 800a080:	f011 011f 	ands.w	r1, r1, #31
 800a084:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a088:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a08c:	d10c      	bne.n	800a0a8 <rshift+0x3c>
 800a08e:	f100 0710 	add.w	r7, r0, #16
 800a092:	4629      	mov	r1, r5
 800a094:	42b1      	cmp	r1, r6
 800a096:	d334      	bcc.n	800a102 <rshift+0x96>
 800a098:	1a9b      	subs	r3, r3, r2
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	1eea      	subs	r2, r5, #3
 800a09e:	4296      	cmp	r6, r2
 800a0a0:	bf38      	it	cc
 800a0a2:	2300      	movcc	r3, #0
 800a0a4:	4423      	add	r3, r4
 800a0a6:	e015      	b.n	800a0d4 <rshift+0x68>
 800a0a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a0ac:	f1c1 0820 	rsb	r8, r1, #32
 800a0b0:	40cf      	lsrs	r7, r1
 800a0b2:	f105 0e04 	add.w	lr, r5, #4
 800a0b6:	46a1      	mov	r9, r4
 800a0b8:	4576      	cmp	r6, lr
 800a0ba:	46f4      	mov	ip, lr
 800a0bc:	d815      	bhi.n	800a0ea <rshift+0x7e>
 800a0be:	1a9a      	subs	r2, r3, r2
 800a0c0:	0092      	lsls	r2, r2, #2
 800a0c2:	3a04      	subs	r2, #4
 800a0c4:	3501      	adds	r5, #1
 800a0c6:	42ae      	cmp	r6, r5
 800a0c8:	bf38      	it	cc
 800a0ca:	2200      	movcc	r2, #0
 800a0cc:	18a3      	adds	r3, r4, r2
 800a0ce:	50a7      	str	r7, [r4, r2]
 800a0d0:	b107      	cbz	r7, 800a0d4 <rshift+0x68>
 800a0d2:	3304      	adds	r3, #4
 800a0d4:	1b1a      	subs	r2, r3, r4
 800a0d6:	42a3      	cmp	r3, r4
 800a0d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a0dc:	bf08      	it	eq
 800a0de:	2300      	moveq	r3, #0
 800a0e0:	6102      	str	r2, [r0, #16]
 800a0e2:	bf08      	it	eq
 800a0e4:	6143      	streq	r3, [r0, #20]
 800a0e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0ea:	f8dc c000 	ldr.w	ip, [ip]
 800a0ee:	fa0c fc08 	lsl.w	ip, ip, r8
 800a0f2:	ea4c 0707 	orr.w	r7, ip, r7
 800a0f6:	f849 7b04 	str.w	r7, [r9], #4
 800a0fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a0fe:	40cf      	lsrs	r7, r1
 800a100:	e7da      	b.n	800a0b8 <rshift+0x4c>
 800a102:	f851 cb04 	ldr.w	ip, [r1], #4
 800a106:	f847 cf04 	str.w	ip, [r7, #4]!
 800a10a:	e7c3      	b.n	800a094 <rshift+0x28>
 800a10c:	4623      	mov	r3, r4
 800a10e:	e7e1      	b.n	800a0d4 <rshift+0x68>

0800a110 <__hexdig_fun>:
 800a110:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a114:	2b09      	cmp	r3, #9
 800a116:	d802      	bhi.n	800a11e <__hexdig_fun+0xe>
 800a118:	3820      	subs	r0, #32
 800a11a:	b2c0      	uxtb	r0, r0
 800a11c:	4770      	bx	lr
 800a11e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a122:	2b05      	cmp	r3, #5
 800a124:	d801      	bhi.n	800a12a <__hexdig_fun+0x1a>
 800a126:	3847      	subs	r0, #71	; 0x47
 800a128:	e7f7      	b.n	800a11a <__hexdig_fun+0xa>
 800a12a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a12e:	2b05      	cmp	r3, #5
 800a130:	d801      	bhi.n	800a136 <__hexdig_fun+0x26>
 800a132:	3827      	subs	r0, #39	; 0x27
 800a134:	e7f1      	b.n	800a11a <__hexdig_fun+0xa>
 800a136:	2000      	movs	r0, #0
 800a138:	4770      	bx	lr
	...

0800a13c <__gethex>:
 800a13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a140:	ed2d 8b02 	vpush	{d8}
 800a144:	b089      	sub	sp, #36	; 0x24
 800a146:	ee08 0a10 	vmov	s16, r0
 800a14a:	9304      	str	r3, [sp, #16]
 800a14c:	4bb4      	ldr	r3, [pc, #720]	; (800a420 <__gethex+0x2e4>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	9301      	str	r3, [sp, #4]
 800a152:	4618      	mov	r0, r3
 800a154:	468b      	mov	fp, r1
 800a156:	4690      	mov	r8, r2
 800a158:	f7f6 f83a 	bl	80001d0 <strlen>
 800a15c:	9b01      	ldr	r3, [sp, #4]
 800a15e:	f8db 2000 	ldr.w	r2, [fp]
 800a162:	4403      	add	r3, r0
 800a164:	4682      	mov	sl, r0
 800a166:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a16a:	9305      	str	r3, [sp, #20]
 800a16c:	1c93      	adds	r3, r2, #2
 800a16e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a172:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a176:	32fe      	adds	r2, #254	; 0xfe
 800a178:	18d1      	adds	r1, r2, r3
 800a17a:	461f      	mov	r7, r3
 800a17c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a180:	9100      	str	r1, [sp, #0]
 800a182:	2830      	cmp	r0, #48	; 0x30
 800a184:	d0f8      	beq.n	800a178 <__gethex+0x3c>
 800a186:	f7ff ffc3 	bl	800a110 <__hexdig_fun>
 800a18a:	4604      	mov	r4, r0
 800a18c:	2800      	cmp	r0, #0
 800a18e:	d13a      	bne.n	800a206 <__gethex+0xca>
 800a190:	9901      	ldr	r1, [sp, #4]
 800a192:	4652      	mov	r2, sl
 800a194:	4638      	mov	r0, r7
 800a196:	f001 fdb3 	bl	800bd00 <strncmp>
 800a19a:	4605      	mov	r5, r0
 800a19c:	2800      	cmp	r0, #0
 800a19e:	d168      	bne.n	800a272 <__gethex+0x136>
 800a1a0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a1a4:	eb07 060a 	add.w	r6, r7, sl
 800a1a8:	f7ff ffb2 	bl	800a110 <__hexdig_fun>
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	d062      	beq.n	800a276 <__gethex+0x13a>
 800a1b0:	4633      	mov	r3, r6
 800a1b2:	7818      	ldrb	r0, [r3, #0]
 800a1b4:	2830      	cmp	r0, #48	; 0x30
 800a1b6:	461f      	mov	r7, r3
 800a1b8:	f103 0301 	add.w	r3, r3, #1
 800a1bc:	d0f9      	beq.n	800a1b2 <__gethex+0x76>
 800a1be:	f7ff ffa7 	bl	800a110 <__hexdig_fun>
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	fab0 f480 	clz	r4, r0
 800a1c8:	0964      	lsrs	r4, r4, #5
 800a1ca:	4635      	mov	r5, r6
 800a1cc:	9300      	str	r3, [sp, #0]
 800a1ce:	463a      	mov	r2, r7
 800a1d0:	4616      	mov	r6, r2
 800a1d2:	3201      	adds	r2, #1
 800a1d4:	7830      	ldrb	r0, [r6, #0]
 800a1d6:	f7ff ff9b 	bl	800a110 <__hexdig_fun>
 800a1da:	2800      	cmp	r0, #0
 800a1dc:	d1f8      	bne.n	800a1d0 <__gethex+0x94>
 800a1de:	9901      	ldr	r1, [sp, #4]
 800a1e0:	4652      	mov	r2, sl
 800a1e2:	4630      	mov	r0, r6
 800a1e4:	f001 fd8c 	bl	800bd00 <strncmp>
 800a1e8:	b980      	cbnz	r0, 800a20c <__gethex+0xd0>
 800a1ea:	b94d      	cbnz	r5, 800a200 <__gethex+0xc4>
 800a1ec:	eb06 050a 	add.w	r5, r6, sl
 800a1f0:	462a      	mov	r2, r5
 800a1f2:	4616      	mov	r6, r2
 800a1f4:	3201      	adds	r2, #1
 800a1f6:	7830      	ldrb	r0, [r6, #0]
 800a1f8:	f7ff ff8a 	bl	800a110 <__hexdig_fun>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	d1f8      	bne.n	800a1f2 <__gethex+0xb6>
 800a200:	1bad      	subs	r5, r5, r6
 800a202:	00ad      	lsls	r5, r5, #2
 800a204:	e004      	b.n	800a210 <__gethex+0xd4>
 800a206:	2400      	movs	r4, #0
 800a208:	4625      	mov	r5, r4
 800a20a:	e7e0      	b.n	800a1ce <__gethex+0x92>
 800a20c:	2d00      	cmp	r5, #0
 800a20e:	d1f7      	bne.n	800a200 <__gethex+0xc4>
 800a210:	7833      	ldrb	r3, [r6, #0]
 800a212:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a216:	2b50      	cmp	r3, #80	; 0x50
 800a218:	d13b      	bne.n	800a292 <__gethex+0x156>
 800a21a:	7873      	ldrb	r3, [r6, #1]
 800a21c:	2b2b      	cmp	r3, #43	; 0x2b
 800a21e:	d02c      	beq.n	800a27a <__gethex+0x13e>
 800a220:	2b2d      	cmp	r3, #45	; 0x2d
 800a222:	d02e      	beq.n	800a282 <__gethex+0x146>
 800a224:	1c71      	adds	r1, r6, #1
 800a226:	f04f 0900 	mov.w	r9, #0
 800a22a:	7808      	ldrb	r0, [r1, #0]
 800a22c:	f7ff ff70 	bl	800a110 <__hexdig_fun>
 800a230:	1e43      	subs	r3, r0, #1
 800a232:	b2db      	uxtb	r3, r3
 800a234:	2b18      	cmp	r3, #24
 800a236:	d82c      	bhi.n	800a292 <__gethex+0x156>
 800a238:	f1a0 0210 	sub.w	r2, r0, #16
 800a23c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a240:	f7ff ff66 	bl	800a110 <__hexdig_fun>
 800a244:	1e43      	subs	r3, r0, #1
 800a246:	b2db      	uxtb	r3, r3
 800a248:	2b18      	cmp	r3, #24
 800a24a:	d91d      	bls.n	800a288 <__gethex+0x14c>
 800a24c:	f1b9 0f00 	cmp.w	r9, #0
 800a250:	d000      	beq.n	800a254 <__gethex+0x118>
 800a252:	4252      	negs	r2, r2
 800a254:	4415      	add	r5, r2
 800a256:	f8cb 1000 	str.w	r1, [fp]
 800a25a:	b1e4      	cbz	r4, 800a296 <__gethex+0x15a>
 800a25c:	9b00      	ldr	r3, [sp, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	bf14      	ite	ne
 800a262:	2700      	movne	r7, #0
 800a264:	2706      	moveq	r7, #6
 800a266:	4638      	mov	r0, r7
 800a268:	b009      	add	sp, #36	; 0x24
 800a26a:	ecbd 8b02 	vpop	{d8}
 800a26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a272:	463e      	mov	r6, r7
 800a274:	4625      	mov	r5, r4
 800a276:	2401      	movs	r4, #1
 800a278:	e7ca      	b.n	800a210 <__gethex+0xd4>
 800a27a:	f04f 0900 	mov.w	r9, #0
 800a27e:	1cb1      	adds	r1, r6, #2
 800a280:	e7d3      	b.n	800a22a <__gethex+0xee>
 800a282:	f04f 0901 	mov.w	r9, #1
 800a286:	e7fa      	b.n	800a27e <__gethex+0x142>
 800a288:	230a      	movs	r3, #10
 800a28a:	fb03 0202 	mla	r2, r3, r2, r0
 800a28e:	3a10      	subs	r2, #16
 800a290:	e7d4      	b.n	800a23c <__gethex+0x100>
 800a292:	4631      	mov	r1, r6
 800a294:	e7df      	b.n	800a256 <__gethex+0x11a>
 800a296:	1bf3      	subs	r3, r6, r7
 800a298:	3b01      	subs	r3, #1
 800a29a:	4621      	mov	r1, r4
 800a29c:	2b07      	cmp	r3, #7
 800a29e:	dc0b      	bgt.n	800a2b8 <__gethex+0x17c>
 800a2a0:	ee18 0a10 	vmov	r0, s16
 800a2a4:	f000 fa90 	bl	800a7c8 <_Balloc>
 800a2a8:	4604      	mov	r4, r0
 800a2aa:	b940      	cbnz	r0, 800a2be <__gethex+0x182>
 800a2ac:	4b5d      	ldr	r3, [pc, #372]	; (800a424 <__gethex+0x2e8>)
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	21de      	movs	r1, #222	; 0xde
 800a2b2:	485d      	ldr	r0, [pc, #372]	; (800a428 <__gethex+0x2ec>)
 800a2b4:	f001 fdf4 	bl	800bea0 <__assert_func>
 800a2b8:	3101      	adds	r1, #1
 800a2ba:	105b      	asrs	r3, r3, #1
 800a2bc:	e7ee      	b.n	800a29c <__gethex+0x160>
 800a2be:	f100 0914 	add.w	r9, r0, #20
 800a2c2:	f04f 0b00 	mov.w	fp, #0
 800a2c6:	f1ca 0301 	rsb	r3, sl, #1
 800a2ca:	f8cd 9008 	str.w	r9, [sp, #8]
 800a2ce:	f8cd b000 	str.w	fp, [sp]
 800a2d2:	9306      	str	r3, [sp, #24]
 800a2d4:	42b7      	cmp	r7, r6
 800a2d6:	d340      	bcc.n	800a35a <__gethex+0x21e>
 800a2d8:	9802      	ldr	r0, [sp, #8]
 800a2da:	9b00      	ldr	r3, [sp, #0]
 800a2dc:	f840 3b04 	str.w	r3, [r0], #4
 800a2e0:	eba0 0009 	sub.w	r0, r0, r9
 800a2e4:	1080      	asrs	r0, r0, #2
 800a2e6:	0146      	lsls	r6, r0, #5
 800a2e8:	6120      	str	r0, [r4, #16]
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f000 fb5e 	bl	800a9ac <__hi0bits>
 800a2f0:	1a30      	subs	r0, r6, r0
 800a2f2:	f8d8 6000 	ldr.w	r6, [r8]
 800a2f6:	42b0      	cmp	r0, r6
 800a2f8:	dd63      	ble.n	800a3c2 <__gethex+0x286>
 800a2fa:	1b87      	subs	r7, r0, r6
 800a2fc:	4639      	mov	r1, r7
 800a2fe:	4620      	mov	r0, r4
 800a300:	f000 ff02 	bl	800b108 <__any_on>
 800a304:	4682      	mov	sl, r0
 800a306:	b1a8      	cbz	r0, 800a334 <__gethex+0x1f8>
 800a308:	1e7b      	subs	r3, r7, #1
 800a30a:	1159      	asrs	r1, r3, #5
 800a30c:	f003 021f 	and.w	r2, r3, #31
 800a310:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a314:	f04f 0a01 	mov.w	sl, #1
 800a318:	fa0a f202 	lsl.w	r2, sl, r2
 800a31c:	420a      	tst	r2, r1
 800a31e:	d009      	beq.n	800a334 <__gethex+0x1f8>
 800a320:	4553      	cmp	r3, sl
 800a322:	dd05      	ble.n	800a330 <__gethex+0x1f4>
 800a324:	1eb9      	subs	r1, r7, #2
 800a326:	4620      	mov	r0, r4
 800a328:	f000 feee 	bl	800b108 <__any_on>
 800a32c:	2800      	cmp	r0, #0
 800a32e:	d145      	bne.n	800a3bc <__gethex+0x280>
 800a330:	f04f 0a02 	mov.w	sl, #2
 800a334:	4639      	mov	r1, r7
 800a336:	4620      	mov	r0, r4
 800a338:	f7ff fe98 	bl	800a06c <rshift>
 800a33c:	443d      	add	r5, r7
 800a33e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a342:	42ab      	cmp	r3, r5
 800a344:	da4c      	bge.n	800a3e0 <__gethex+0x2a4>
 800a346:	ee18 0a10 	vmov	r0, s16
 800a34a:	4621      	mov	r1, r4
 800a34c:	f000 fa7c 	bl	800a848 <_Bfree>
 800a350:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a352:	2300      	movs	r3, #0
 800a354:	6013      	str	r3, [r2, #0]
 800a356:	27a3      	movs	r7, #163	; 0xa3
 800a358:	e785      	b.n	800a266 <__gethex+0x12a>
 800a35a:	1e73      	subs	r3, r6, #1
 800a35c:	9a05      	ldr	r2, [sp, #20]
 800a35e:	9303      	str	r3, [sp, #12]
 800a360:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a364:	4293      	cmp	r3, r2
 800a366:	d019      	beq.n	800a39c <__gethex+0x260>
 800a368:	f1bb 0f20 	cmp.w	fp, #32
 800a36c:	d107      	bne.n	800a37e <__gethex+0x242>
 800a36e:	9b02      	ldr	r3, [sp, #8]
 800a370:	9a00      	ldr	r2, [sp, #0]
 800a372:	f843 2b04 	str.w	r2, [r3], #4
 800a376:	9302      	str	r3, [sp, #8]
 800a378:	2300      	movs	r3, #0
 800a37a:	9300      	str	r3, [sp, #0]
 800a37c:	469b      	mov	fp, r3
 800a37e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a382:	f7ff fec5 	bl	800a110 <__hexdig_fun>
 800a386:	9b00      	ldr	r3, [sp, #0]
 800a388:	f000 000f 	and.w	r0, r0, #15
 800a38c:	fa00 f00b 	lsl.w	r0, r0, fp
 800a390:	4303      	orrs	r3, r0
 800a392:	9300      	str	r3, [sp, #0]
 800a394:	f10b 0b04 	add.w	fp, fp, #4
 800a398:	9b03      	ldr	r3, [sp, #12]
 800a39a:	e00d      	b.n	800a3b8 <__gethex+0x27c>
 800a39c:	9b03      	ldr	r3, [sp, #12]
 800a39e:	9a06      	ldr	r2, [sp, #24]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	42bb      	cmp	r3, r7
 800a3a4:	d3e0      	bcc.n	800a368 <__gethex+0x22c>
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	9901      	ldr	r1, [sp, #4]
 800a3aa:	9307      	str	r3, [sp, #28]
 800a3ac:	4652      	mov	r2, sl
 800a3ae:	f001 fca7 	bl	800bd00 <strncmp>
 800a3b2:	9b07      	ldr	r3, [sp, #28]
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	d1d7      	bne.n	800a368 <__gethex+0x22c>
 800a3b8:	461e      	mov	r6, r3
 800a3ba:	e78b      	b.n	800a2d4 <__gethex+0x198>
 800a3bc:	f04f 0a03 	mov.w	sl, #3
 800a3c0:	e7b8      	b.n	800a334 <__gethex+0x1f8>
 800a3c2:	da0a      	bge.n	800a3da <__gethex+0x29e>
 800a3c4:	1a37      	subs	r7, r6, r0
 800a3c6:	4621      	mov	r1, r4
 800a3c8:	ee18 0a10 	vmov	r0, s16
 800a3cc:	463a      	mov	r2, r7
 800a3ce:	f000 fc57 	bl	800ac80 <__lshift>
 800a3d2:	1bed      	subs	r5, r5, r7
 800a3d4:	4604      	mov	r4, r0
 800a3d6:	f100 0914 	add.w	r9, r0, #20
 800a3da:	f04f 0a00 	mov.w	sl, #0
 800a3de:	e7ae      	b.n	800a33e <__gethex+0x202>
 800a3e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a3e4:	42a8      	cmp	r0, r5
 800a3e6:	dd72      	ble.n	800a4ce <__gethex+0x392>
 800a3e8:	1b45      	subs	r5, r0, r5
 800a3ea:	42ae      	cmp	r6, r5
 800a3ec:	dc36      	bgt.n	800a45c <__gethex+0x320>
 800a3ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a3f2:	2b02      	cmp	r3, #2
 800a3f4:	d02a      	beq.n	800a44c <__gethex+0x310>
 800a3f6:	2b03      	cmp	r3, #3
 800a3f8:	d02c      	beq.n	800a454 <__gethex+0x318>
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d11c      	bne.n	800a438 <__gethex+0x2fc>
 800a3fe:	42ae      	cmp	r6, r5
 800a400:	d11a      	bne.n	800a438 <__gethex+0x2fc>
 800a402:	2e01      	cmp	r6, #1
 800a404:	d112      	bne.n	800a42c <__gethex+0x2f0>
 800a406:	9a04      	ldr	r2, [sp, #16]
 800a408:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a40c:	6013      	str	r3, [r2, #0]
 800a40e:	2301      	movs	r3, #1
 800a410:	6123      	str	r3, [r4, #16]
 800a412:	f8c9 3000 	str.w	r3, [r9]
 800a416:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a418:	2762      	movs	r7, #98	; 0x62
 800a41a:	601c      	str	r4, [r3, #0]
 800a41c:	e723      	b.n	800a266 <__gethex+0x12a>
 800a41e:	bf00      	nop
 800a420:	0800cc28 	.word	0x0800cc28
 800a424:	0800cbb0 	.word	0x0800cbb0
 800a428:	0800cbc1 	.word	0x0800cbc1
 800a42c:	1e71      	subs	r1, r6, #1
 800a42e:	4620      	mov	r0, r4
 800a430:	f000 fe6a 	bl	800b108 <__any_on>
 800a434:	2800      	cmp	r0, #0
 800a436:	d1e6      	bne.n	800a406 <__gethex+0x2ca>
 800a438:	ee18 0a10 	vmov	r0, s16
 800a43c:	4621      	mov	r1, r4
 800a43e:	f000 fa03 	bl	800a848 <_Bfree>
 800a442:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a444:	2300      	movs	r3, #0
 800a446:	6013      	str	r3, [r2, #0]
 800a448:	2750      	movs	r7, #80	; 0x50
 800a44a:	e70c      	b.n	800a266 <__gethex+0x12a>
 800a44c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d1f2      	bne.n	800a438 <__gethex+0x2fc>
 800a452:	e7d8      	b.n	800a406 <__gethex+0x2ca>
 800a454:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1d5      	bne.n	800a406 <__gethex+0x2ca>
 800a45a:	e7ed      	b.n	800a438 <__gethex+0x2fc>
 800a45c:	1e6f      	subs	r7, r5, #1
 800a45e:	f1ba 0f00 	cmp.w	sl, #0
 800a462:	d131      	bne.n	800a4c8 <__gethex+0x38c>
 800a464:	b127      	cbz	r7, 800a470 <__gethex+0x334>
 800a466:	4639      	mov	r1, r7
 800a468:	4620      	mov	r0, r4
 800a46a:	f000 fe4d 	bl	800b108 <__any_on>
 800a46e:	4682      	mov	sl, r0
 800a470:	117b      	asrs	r3, r7, #5
 800a472:	2101      	movs	r1, #1
 800a474:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a478:	f007 071f 	and.w	r7, r7, #31
 800a47c:	fa01 f707 	lsl.w	r7, r1, r7
 800a480:	421f      	tst	r7, r3
 800a482:	4629      	mov	r1, r5
 800a484:	4620      	mov	r0, r4
 800a486:	bf18      	it	ne
 800a488:	f04a 0a02 	orrne.w	sl, sl, #2
 800a48c:	1b76      	subs	r6, r6, r5
 800a48e:	f7ff fded 	bl	800a06c <rshift>
 800a492:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a496:	2702      	movs	r7, #2
 800a498:	f1ba 0f00 	cmp.w	sl, #0
 800a49c:	d048      	beq.n	800a530 <__gethex+0x3f4>
 800a49e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a4a2:	2b02      	cmp	r3, #2
 800a4a4:	d015      	beq.n	800a4d2 <__gethex+0x396>
 800a4a6:	2b03      	cmp	r3, #3
 800a4a8:	d017      	beq.n	800a4da <__gethex+0x39e>
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d109      	bne.n	800a4c2 <__gethex+0x386>
 800a4ae:	f01a 0f02 	tst.w	sl, #2
 800a4b2:	d006      	beq.n	800a4c2 <__gethex+0x386>
 800a4b4:	f8d9 0000 	ldr.w	r0, [r9]
 800a4b8:	ea4a 0a00 	orr.w	sl, sl, r0
 800a4bc:	f01a 0f01 	tst.w	sl, #1
 800a4c0:	d10e      	bne.n	800a4e0 <__gethex+0x3a4>
 800a4c2:	f047 0710 	orr.w	r7, r7, #16
 800a4c6:	e033      	b.n	800a530 <__gethex+0x3f4>
 800a4c8:	f04f 0a01 	mov.w	sl, #1
 800a4cc:	e7d0      	b.n	800a470 <__gethex+0x334>
 800a4ce:	2701      	movs	r7, #1
 800a4d0:	e7e2      	b.n	800a498 <__gethex+0x35c>
 800a4d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4d4:	f1c3 0301 	rsb	r3, r3, #1
 800a4d8:	9315      	str	r3, [sp, #84]	; 0x54
 800a4da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d0f0      	beq.n	800a4c2 <__gethex+0x386>
 800a4e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a4e4:	f104 0314 	add.w	r3, r4, #20
 800a4e8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a4ec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a4f0:	f04f 0c00 	mov.w	ip, #0
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4fa:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a4fe:	d01c      	beq.n	800a53a <__gethex+0x3fe>
 800a500:	3201      	adds	r2, #1
 800a502:	6002      	str	r2, [r0, #0]
 800a504:	2f02      	cmp	r7, #2
 800a506:	f104 0314 	add.w	r3, r4, #20
 800a50a:	d13f      	bne.n	800a58c <__gethex+0x450>
 800a50c:	f8d8 2000 	ldr.w	r2, [r8]
 800a510:	3a01      	subs	r2, #1
 800a512:	42b2      	cmp	r2, r6
 800a514:	d10a      	bne.n	800a52c <__gethex+0x3f0>
 800a516:	1171      	asrs	r1, r6, #5
 800a518:	2201      	movs	r2, #1
 800a51a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a51e:	f006 061f 	and.w	r6, r6, #31
 800a522:	fa02 f606 	lsl.w	r6, r2, r6
 800a526:	421e      	tst	r6, r3
 800a528:	bf18      	it	ne
 800a52a:	4617      	movne	r7, r2
 800a52c:	f047 0720 	orr.w	r7, r7, #32
 800a530:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a532:	601c      	str	r4, [r3, #0]
 800a534:	9b04      	ldr	r3, [sp, #16]
 800a536:	601d      	str	r5, [r3, #0]
 800a538:	e695      	b.n	800a266 <__gethex+0x12a>
 800a53a:	4299      	cmp	r1, r3
 800a53c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a540:	d8d8      	bhi.n	800a4f4 <__gethex+0x3b8>
 800a542:	68a3      	ldr	r3, [r4, #8]
 800a544:	459b      	cmp	fp, r3
 800a546:	db19      	blt.n	800a57c <__gethex+0x440>
 800a548:	6861      	ldr	r1, [r4, #4]
 800a54a:	ee18 0a10 	vmov	r0, s16
 800a54e:	3101      	adds	r1, #1
 800a550:	f000 f93a 	bl	800a7c8 <_Balloc>
 800a554:	4681      	mov	r9, r0
 800a556:	b918      	cbnz	r0, 800a560 <__gethex+0x424>
 800a558:	4b1a      	ldr	r3, [pc, #104]	; (800a5c4 <__gethex+0x488>)
 800a55a:	4602      	mov	r2, r0
 800a55c:	2184      	movs	r1, #132	; 0x84
 800a55e:	e6a8      	b.n	800a2b2 <__gethex+0x176>
 800a560:	6922      	ldr	r2, [r4, #16]
 800a562:	3202      	adds	r2, #2
 800a564:	f104 010c 	add.w	r1, r4, #12
 800a568:	0092      	lsls	r2, r2, #2
 800a56a:	300c      	adds	r0, #12
 800a56c:	f000 f91e 	bl	800a7ac <memcpy>
 800a570:	4621      	mov	r1, r4
 800a572:	ee18 0a10 	vmov	r0, s16
 800a576:	f000 f967 	bl	800a848 <_Bfree>
 800a57a:	464c      	mov	r4, r9
 800a57c:	6923      	ldr	r3, [r4, #16]
 800a57e:	1c5a      	adds	r2, r3, #1
 800a580:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a584:	6122      	str	r2, [r4, #16]
 800a586:	2201      	movs	r2, #1
 800a588:	615a      	str	r2, [r3, #20]
 800a58a:	e7bb      	b.n	800a504 <__gethex+0x3c8>
 800a58c:	6922      	ldr	r2, [r4, #16]
 800a58e:	455a      	cmp	r2, fp
 800a590:	dd0b      	ble.n	800a5aa <__gethex+0x46e>
 800a592:	2101      	movs	r1, #1
 800a594:	4620      	mov	r0, r4
 800a596:	f7ff fd69 	bl	800a06c <rshift>
 800a59a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a59e:	3501      	adds	r5, #1
 800a5a0:	42ab      	cmp	r3, r5
 800a5a2:	f6ff aed0 	blt.w	800a346 <__gethex+0x20a>
 800a5a6:	2701      	movs	r7, #1
 800a5a8:	e7c0      	b.n	800a52c <__gethex+0x3f0>
 800a5aa:	f016 061f 	ands.w	r6, r6, #31
 800a5ae:	d0fa      	beq.n	800a5a6 <__gethex+0x46a>
 800a5b0:	4453      	add	r3, sl
 800a5b2:	f1c6 0620 	rsb	r6, r6, #32
 800a5b6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a5ba:	f000 f9f7 	bl	800a9ac <__hi0bits>
 800a5be:	42b0      	cmp	r0, r6
 800a5c0:	dbe7      	blt.n	800a592 <__gethex+0x456>
 800a5c2:	e7f0      	b.n	800a5a6 <__gethex+0x46a>
 800a5c4:	0800cbb0 	.word	0x0800cbb0

0800a5c8 <L_shift>:
 800a5c8:	f1c2 0208 	rsb	r2, r2, #8
 800a5cc:	0092      	lsls	r2, r2, #2
 800a5ce:	b570      	push	{r4, r5, r6, lr}
 800a5d0:	f1c2 0620 	rsb	r6, r2, #32
 800a5d4:	6843      	ldr	r3, [r0, #4]
 800a5d6:	6804      	ldr	r4, [r0, #0]
 800a5d8:	fa03 f506 	lsl.w	r5, r3, r6
 800a5dc:	432c      	orrs	r4, r5
 800a5de:	40d3      	lsrs	r3, r2
 800a5e0:	6004      	str	r4, [r0, #0]
 800a5e2:	f840 3f04 	str.w	r3, [r0, #4]!
 800a5e6:	4288      	cmp	r0, r1
 800a5e8:	d3f4      	bcc.n	800a5d4 <L_shift+0xc>
 800a5ea:	bd70      	pop	{r4, r5, r6, pc}

0800a5ec <__match>:
 800a5ec:	b530      	push	{r4, r5, lr}
 800a5ee:	6803      	ldr	r3, [r0, #0]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5f6:	b914      	cbnz	r4, 800a5fe <__match+0x12>
 800a5f8:	6003      	str	r3, [r0, #0]
 800a5fa:	2001      	movs	r0, #1
 800a5fc:	bd30      	pop	{r4, r5, pc}
 800a5fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a602:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a606:	2d19      	cmp	r5, #25
 800a608:	bf98      	it	ls
 800a60a:	3220      	addls	r2, #32
 800a60c:	42a2      	cmp	r2, r4
 800a60e:	d0f0      	beq.n	800a5f2 <__match+0x6>
 800a610:	2000      	movs	r0, #0
 800a612:	e7f3      	b.n	800a5fc <__match+0x10>

0800a614 <__hexnan>:
 800a614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a618:	680b      	ldr	r3, [r1, #0]
 800a61a:	115e      	asrs	r6, r3, #5
 800a61c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a620:	f013 031f 	ands.w	r3, r3, #31
 800a624:	b087      	sub	sp, #28
 800a626:	bf18      	it	ne
 800a628:	3604      	addne	r6, #4
 800a62a:	2500      	movs	r5, #0
 800a62c:	1f37      	subs	r7, r6, #4
 800a62e:	4690      	mov	r8, r2
 800a630:	6802      	ldr	r2, [r0, #0]
 800a632:	9301      	str	r3, [sp, #4]
 800a634:	4682      	mov	sl, r0
 800a636:	f846 5c04 	str.w	r5, [r6, #-4]
 800a63a:	46b9      	mov	r9, r7
 800a63c:	463c      	mov	r4, r7
 800a63e:	9502      	str	r5, [sp, #8]
 800a640:	46ab      	mov	fp, r5
 800a642:	7851      	ldrb	r1, [r2, #1]
 800a644:	1c53      	adds	r3, r2, #1
 800a646:	9303      	str	r3, [sp, #12]
 800a648:	b341      	cbz	r1, 800a69c <__hexnan+0x88>
 800a64a:	4608      	mov	r0, r1
 800a64c:	9205      	str	r2, [sp, #20]
 800a64e:	9104      	str	r1, [sp, #16]
 800a650:	f7ff fd5e 	bl	800a110 <__hexdig_fun>
 800a654:	2800      	cmp	r0, #0
 800a656:	d14f      	bne.n	800a6f8 <__hexnan+0xe4>
 800a658:	9904      	ldr	r1, [sp, #16]
 800a65a:	9a05      	ldr	r2, [sp, #20]
 800a65c:	2920      	cmp	r1, #32
 800a65e:	d818      	bhi.n	800a692 <__hexnan+0x7e>
 800a660:	9b02      	ldr	r3, [sp, #8]
 800a662:	459b      	cmp	fp, r3
 800a664:	dd13      	ble.n	800a68e <__hexnan+0x7a>
 800a666:	454c      	cmp	r4, r9
 800a668:	d206      	bcs.n	800a678 <__hexnan+0x64>
 800a66a:	2d07      	cmp	r5, #7
 800a66c:	dc04      	bgt.n	800a678 <__hexnan+0x64>
 800a66e:	462a      	mov	r2, r5
 800a670:	4649      	mov	r1, r9
 800a672:	4620      	mov	r0, r4
 800a674:	f7ff ffa8 	bl	800a5c8 <L_shift>
 800a678:	4544      	cmp	r4, r8
 800a67a:	d950      	bls.n	800a71e <__hexnan+0x10a>
 800a67c:	2300      	movs	r3, #0
 800a67e:	f1a4 0904 	sub.w	r9, r4, #4
 800a682:	f844 3c04 	str.w	r3, [r4, #-4]
 800a686:	f8cd b008 	str.w	fp, [sp, #8]
 800a68a:	464c      	mov	r4, r9
 800a68c:	461d      	mov	r5, r3
 800a68e:	9a03      	ldr	r2, [sp, #12]
 800a690:	e7d7      	b.n	800a642 <__hexnan+0x2e>
 800a692:	2929      	cmp	r1, #41	; 0x29
 800a694:	d156      	bne.n	800a744 <__hexnan+0x130>
 800a696:	3202      	adds	r2, #2
 800a698:	f8ca 2000 	str.w	r2, [sl]
 800a69c:	f1bb 0f00 	cmp.w	fp, #0
 800a6a0:	d050      	beq.n	800a744 <__hexnan+0x130>
 800a6a2:	454c      	cmp	r4, r9
 800a6a4:	d206      	bcs.n	800a6b4 <__hexnan+0xa0>
 800a6a6:	2d07      	cmp	r5, #7
 800a6a8:	dc04      	bgt.n	800a6b4 <__hexnan+0xa0>
 800a6aa:	462a      	mov	r2, r5
 800a6ac:	4649      	mov	r1, r9
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	f7ff ff8a 	bl	800a5c8 <L_shift>
 800a6b4:	4544      	cmp	r4, r8
 800a6b6:	d934      	bls.n	800a722 <__hexnan+0x10e>
 800a6b8:	f1a8 0204 	sub.w	r2, r8, #4
 800a6bc:	4623      	mov	r3, r4
 800a6be:	f853 1b04 	ldr.w	r1, [r3], #4
 800a6c2:	f842 1f04 	str.w	r1, [r2, #4]!
 800a6c6:	429f      	cmp	r7, r3
 800a6c8:	d2f9      	bcs.n	800a6be <__hexnan+0xaa>
 800a6ca:	1b3b      	subs	r3, r7, r4
 800a6cc:	f023 0303 	bic.w	r3, r3, #3
 800a6d0:	3304      	adds	r3, #4
 800a6d2:	3401      	adds	r4, #1
 800a6d4:	3e03      	subs	r6, #3
 800a6d6:	42b4      	cmp	r4, r6
 800a6d8:	bf88      	it	hi
 800a6da:	2304      	movhi	r3, #4
 800a6dc:	4443      	add	r3, r8
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f843 2b04 	str.w	r2, [r3], #4
 800a6e4:	429f      	cmp	r7, r3
 800a6e6:	d2fb      	bcs.n	800a6e0 <__hexnan+0xcc>
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	b91b      	cbnz	r3, 800a6f4 <__hexnan+0xe0>
 800a6ec:	4547      	cmp	r7, r8
 800a6ee:	d127      	bne.n	800a740 <__hexnan+0x12c>
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	603b      	str	r3, [r7, #0]
 800a6f4:	2005      	movs	r0, #5
 800a6f6:	e026      	b.n	800a746 <__hexnan+0x132>
 800a6f8:	3501      	adds	r5, #1
 800a6fa:	2d08      	cmp	r5, #8
 800a6fc:	f10b 0b01 	add.w	fp, fp, #1
 800a700:	dd06      	ble.n	800a710 <__hexnan+0xfc>
 800a702:	4544      	cmp	r4, r8
 800a704:	d9c3      	bls.n	800a68e <__hexnan+0x7a>
 800a706:	2300      	movs	r3, #0
 800a708:	f844 3c04 	str.w	r3, [r4, #-4]
 800a70c:	2501      	movs	r5, #1
 800a70e:	3c04      	subs	r4, #4
 800a710:	6822      	ldr	r2, [r4, #0]
 800a712:	f000 000f 	and.w	r0, r0, #15
 800a716:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a71a:	6022      	str	r2, [r4, #0]
 800a71c:	e7b7      	b.n	800a68e <__hexnan+0x7a>
 800a71e:	2508      	movs	r5, #8
 800a720:	e7b5      	b.n	800a68e <__hexnan+0x7a>
 800a722:	9b01      	ldr	r3, [sp, #4]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d0df      	beq.n	800a6e8 <__hexnan+0xd4>
 800a728:	f04f 32ff 	mov.w	r2, #4294967295
 800a72c:	f1c3 0320 	rsb	r3, r3, #32
 800a730:	fa22 f303 	lsr.w	r3, r2, r3
 800a734:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a738:	401a      	ands	r2, r3
 800a73a:	f846 2c04 	str.w	r2, [r6, #-4]
 800a73e:	e7d3      	b.n	800a6e8 <__hexnan+0xd4>
 800a740:	3f04      	subs	r7, #4
 800a742:	e7d1      	b.n	800a6e8 <__hexnan+0xd4>
 800a744:	2004      	movs	r0, #4
 800a746:	b007      	add	sp, #28
 800a748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a74c <_localeconv_r>:
 800a74c:	4800      	ldr	r0, [pc, #0]	; (800a750 <_localeconv_r+0x4>)
 800a74e:	4770      	bx	lr
 800a750:	20000244 	.word	0x20000244

0800a754 <_lseek_r>:
 800a754:	b538      	push	{r3, r4, r5, lr}
 800a756:	4d07      	ldr	r5, [pc, #28]	; (800a774 <_lseek_r+0x20>)
 800a758:	4604      	mov	r4, r0
 800a75a:	4608      	mov	r0, r1
 800a75c:	4611      	mov	r1, r2
 800a75e:	2200      	movs	r2, #0
 800a760:	602a      	str	r2, [r5, #0]
 800a762:	461a      	mov	r2, r3
 800a764:	f7f8 f9d6 	bl	8002b14 <_lseek>
 800a768:	1c43      	adds	r3, r0, #1
 800a76a:	d102      	bne.n	800a772 <_lseek_r+0x1e>
 800a76c:	682b      	ldr	r3, [r5, #0]
 800a76e:	b103      	cbz	r3, 800a772 <_lseek_r+0x1e>
 800a770:	6023      	str	r3, [r4, #0]
 800a772:	bd38      	pop	{r3, r4, r5, pc}
 800a774:	200008ec 	.word	0x200008ec

0800a778 <malloc>:
 800a778:	4b02      	ldr	r3, [pc, #8]	; (800a784 <malloc+0xc>)
 800a77a:	4601      	mov	r1, r0
 800a77c:	6818      	ldr	r0, [r3, #0]
 800a77e:	f000 bd67 	b.w	800b250 <_malloc_r>
 800a782:	bf00      	nop
 800a784:	200000ec 	.word	0x200000ec

0800a788 <__ascii_mbtowc>:
 800a788:	b082      	sub	sp, #8
 800a78a:	b901      	cbnz	r1, 800a78e <__ascii_mbtowc+0x6>
 800a78c:	a901      	add	r1, sp, #4
 800a78e:	b142      	cbz	r2, 800a7a2 <__ascii_mbtowc+0x1a>
 800a790:	b14b      	cbz	r3, 800a7a6 <__ascii_mbtowc+0x1e>
 800a792:	7813      	ldrb	r3, [r2, #0]
 800a794:	600b      	str	r3, [r1, #0]
 800a796:	7812      	ldrb	r2, [r2, #0]
 800a798:	1e10      	subs	r0, r2, #0
 800a79a:	bf18      	it	ne
 800a79c:	2001      	movne	r0, #1
 800a79e:	b002      	add	sp, #8
 800a7a0:	4770      	bx	lr
 800a7a2:	4610      	mov	r0, r2
 800a7a4:	e7fb      	b.n	800a79e <__ascii_mbtowc+0x16>
 800a7a6:	f06f 0001 	mvn.w	r0, #1
 800a7aa:	e7f8      	b.n	800a79e <__ascii_mbtowc+0x16>

0800a7ac <memcpy>:
 800a7ac:	440a      	add	r2, r1
 800a7ae:	4291      	cmp	r1, r2
 800a7b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7b4:	d100      	bne.n	800a7b8 <memcpy+0xc>
 800a7b6:	4770      	bx	lr
 800a7b8:	b510      	push	{r4, lr}
 800a7ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7c2:	4291      	cmp	r1, r2
 800a7c4:	d1f9      	bne.n	800a7ba <memcpy+0xe>
 800a7c6:	bd10      	pop	{r4, pc}

0800a7c8 <_Balloc>:
 800a7c8:	b570      	push	{r4, r5, r6, lr}
 800a7ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a7cc:	4604      	mov	r4, r0
 800a7ce:	460d      	mov	r5, r1
 800a7d0:	b976      	cbnz	r6, 800a7f0 <_Balloc+0x28>
 800a7d2:	2010      	movs	r0, #16
 800a7d4:	f7ff ffd0 	bl	800a778 <malloc>
 800a7d8:	4602      	mov	r2, r0
 800a7da:	6260      	str	r0, [r4, #36]	; 0x24
 800a7dc:	b920      	cbnz	r0, 800a7e8 <_Balloc+0x20>
 800a7de:	4b18      	ldr	r3, [pc, #96]	; (800a840 <_Balloc+0x78>)
 800a7e0:	4818      	ldr	r0, [pc, #96]	; (800a844 <_Balloc+0x7c>)
 800a7e2:	2166      	movs	r1, #102	; 0x66
 800a7e4:	f001 fb5c 	bl	800bea0 <__assert_func>
 800a7e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7ec:	6006      	str	r6, [r0, #0]
 800a7ee:	60c6      	str	r6, [r0, #12]
 800a7f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a7f2:	68f3      	ldr	r3, [r6, #12]
 800a7f4:	b183      	cbz	r3, 800a818 <_Balloc+0x50>
 800a7f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a7fe:	b9b8      	cbnz	r0, 800a830 <_Balloc+0x68>
 800a800:	2101      	movs	r1, #1
 800a802:	fa01 f605 	lsl.w	r6, r1, r5
 800a806:	1d72      	adds	r2, r6, #5
 800a808:	0092      	lsls	r2, r2, #2
 800a80a:	4620      	mov	r0, r4
 800a80c:	f000 fc9d 	bl	800b14a <_calloc_r>
 800a810:	b160      	cbz	r0, 800a82c <_Balloc+0x64>
 800a812:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a816:	e00e      	b.n	800a836 <_Balloc+0x6e>
 800a818:	2221      	movs	r2, #33	; 0x21
 800a81a:	2104      	movs	r1, #4
 800a81c:	4620      	mov	r0, r4
 800a81e:	f000 fc94 	bl	800b14a <_calloc_r>
 800a822:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a824:	60f0      	str	r0, [r6, #12]
 800a826:	68db      	ldr	r3, [r3, #12]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d1e4      	bne.n	800a7f6 <_Balloc+0x2e>
 800a82c:	2000      	movs	r0, #0
 800a82e:	bd70      	pop	{r4, r5, r6, pc}
 800a830:	6802      	ldr	r2, [r0, #0]
 800a832:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a836:	2300      	movs	r3, #0
 800a838:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a83c:	e7f7      	b.n	800a82e <_Balloc+0x66>
 800a83e:	bf00      	nop
 800a840:	0800cb3e 	.word	0x0800cb3e
 800a844:	0800cc3c 	.word	0x0800cc3c

0800a848 <_Bfree>:
 800a848:	b570      	push	{r4, r5, r6, lr}
 800a84a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a84c:	4605      	mov	r5, r0
 800a84e:	460c      	mov	r4, r1
 800a850:	b976      	cbnz	r6, 800a870 <_Bfree+0x28>
 800a852:	2010      	movs	r0, #16
 800a854:	f7ff ff90 	bl	800a778 <malloc>
 800a858:	4602      	mov	r2, r0
 800a85a:	6268      	str	r0, [r5, #36]	; 0x24
 800a85c:	b920      	cbnz	r0, 800a868 <_Bfree+0x20>
 800a85e:	4b09      	ldr	r3, [pc, #36]	; (800a884 <_Bfree+0x3c>)
 800a860:	4809      	ldr	r0, [pc, #36]	; (800a888 <_Bfree+0x40>)
 800a862:	218a      	movs	r1, #138	; 0x8a
 800a864:	f001 fb1c 	bl	800bea0 <__assert_func>
 800a868:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a86c:	6006      	str	r6, [r0, #0]
 800a86e:	60c6      	str	r6, [r0, #12]
 800a870:	b13c      	cbz	r4, 800a882 <_Bfree+0x3a>
 800a872:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a874:	6862      	ldr	r2, [r4, #4]
 800a876:	68db      	ldr	r3, [r3, #12]
 800a878:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a87c:	6021      	str	r1, [r4, #0]
 800a87e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a882:	bd70      	pop	{r4, r5, r6, pc}
 800a884:	0800cb3e 	.word	0x0800cb3e
 800a888:	0800cc3c 	.word	0x0800cc3c

0800a88c <__multadd>:
 800a88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a890:	690d      	ldr	r5, [r1, #16]
 800a892:	4607      	mov	r7, r0
 800a894:	460c      	mov	r4, r1
 800a896:	461e      	mov	r6, r3
 800a898:	f101 0c14 	add.w	ip, r1, #20
 800a89c:	2000      	movs	r0, #0
 800a89e:	f8dc 3000 	ldr.w	r3, [ip]
 800a8a2:	b299      	uxth	r1, r3
 800a8a4:	fb02 6101 	mla	r1, r2, r1, r6
 800a8a8:	0c1e      	lsrs	r6, r3, #16
 800a8aa:	0c0b      	lsrs	r3, r1, #16
 800a8ac:	fb02 3306 	mla	r3, r2, r6, r3
 800a8b0:	b289      	uxth	r1, r1
 800a8b2:	3001      	adds	r0, #1
 800a8b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a8b8:	4285      	cmp	r5, r0
 800a8ba:	f84c 1b04 	str.w	r1, [ip], #4
 800a8be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a8c2:	dcec      	bgt.n	800a89e <__multadd+0x12>
 800a8c4:	b30e      	cbz	r6, 800a90a <__multadd+0x7e>
 800a8c6:	68a3      	ldr	r3, [r4, #8]
 800a8c8:	42ab      	cmp	r3, r5
 800a8ca:	dc19      	bgt.n	800a900 <__multadd+0x74>
 800a8cc:	6861      	ldr	r1, [r4, #4]
 800a8ce:	4638      	mov	r0, r7
 800a8d0:	3101      	adds	r1, #1
 800a8d2:	f7ff ff79 	bl	800a7c8 <_Balloc>
 800a8d6:	4680      	mov	r8, r0
 800a8d8:	b928      	cbnz	r0, 800a8e6 <__multadd+0x5a>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	4b0c      	ldr	r3, [pc, #48]	; (800a910 <__multadd+0x84>)
 800a8de:	480d      	ldr	r0, [pc, #52]	; (800a914 <__multadd+0x88>)
 800a8e0:	21b5      	movs	r1, #181	; 0xb5
 800a8e2:	f001 fadd 	bl	800bea0 <__assert_func>
 800a8e6:	6922      	ldr	r2, [r4, #16]
 800a8e8:	3202      	adds	r2, #2
 800a8ea:	f104 010c 	add.w	r1, r4, #12
 800a8ee:	0092      	lsls	r2, r2, #2
 800a8f0:	300c      	adds	r0, #12
 800a8f2:	f7ff ff5b 	bl	800a7ac <memcpy>
 800a8f6:	4621      	mov	r1, r4
 800a8f8:	4638      	mov	r0, r7
 800a8fa:	f7ff ffa5 	bl	800a848 <_Bfree>
 800a8fe:	4644      	mov	r4, r8
 800a900:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a904:	3501      	adds	r5, #1
 800a906:	615e      	str	r6, [r3, #20]
 800a908:	6125      	str	r5, [r4, #16]
 800a90a:	4620      	mov	r0, r4
 800a90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a910:	0800cbb0 	.word	0x0800cbb0
 800a914:	0800cc3c 	.word	0x0800cc3c

0800a918 <__s2b>:
 800a918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a91c:	460c      	mov	r4, r1
 800a91e:	4615      	mov	r5, r2
 800a920:	461f      	mov	r7, r3
 800a922:	2209      	movs	r2, #9
 800a924:	3308      	adds	r3, #8
 800a926:	4606      	mov	r6, r0
 800a928:	fb93 f3f2 	sdiv	r3, r3, r2
 800a92c:	2100      	movs	r1, #0
 800a92e:	2201      	movs	r2, #1
 800a930:	429a      	cmp	r2, r3
 800a932:	db09      	blt.n	800a948 <__s2b+0x30>
 800a934:	4630      	mov	r0, r6
 800a936:	f7ff ff47 	bl	800a7c8 <_Balloc>
 800a93a:	b940      	cbnz	r0, 800a94e <__s2b+0x36>
 800a93c:	4602      	mov	r2, r0
 800a93e:	4b19      	ldr	r3, [pc, #100]	; (800a9a4 <__s2b+0x8c>)
 800a940:	4819      	ldr	r0, [pc, #100]	; (800a9a8 <__s2b+0x90>)
 800a942:	21ce      	movs	r1, #206	; 0xce
 800a944:	f001 faac 	bl	800bea0 <__assert_func>
 800a948:	0052      	lsls	r2, r2, #1
 800a94a:	3101      	adds	r1, #1
 800a94c:	e7f0      	b.n	800a930 <__s2b+0x18>
 800a94e:	9b08      	ldr	r3, [sp, #32]
 800a950:	6143      	str	r3, [r0, #20]
 800a952:	2d09      	cmp	r5, #9
 800a954:	f04f 0301 	mov.w	r3, #1
 800a958:	6103      	str	r3, [r0, #16]
 800a95a:	dd16      	ble.n	800a98a <__s2b+0x72>
 800a95c:	f104 0909 	add.w	r9, r4, #9
 800a960:	46c8      	mov	r8, r9
 800a962:	442c      	add	r4, r5
 800a964:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a968:	4601      	mov	r1, r0
 800a96a:	3b30      	subs	r3, #48	; 0x30
 800a96c:	220a      	movs	r2, #10
 800a96e:	4630      	mov	r0, r6
 800a970:	f7ff ff8c 	bl	800a88c <__multadd>
 800a974:	45a0      	cmp	r8, r4
 800a976:	d1f5      	bne.n	800a964 <__s2b+0x4c>
 800a978:	f1a5 0408 	sub.w	r4, r5, #8
 800a97c:	444c      	add	r4, r9
 800a97e:	1b2d      	subs	r5, r5, r4
 800a980:	1963      	adds	r3, r4, r5
 800a982:	42bb      	cmp	r3, r7
 800a984:	db04      	blt.n	800a990 <__s2b+0x78>
 800a986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a98a:	340a      	adds	r4, #10
 800a98c:	2509      	movs	r5, #9
 800a98e:	e7f6      	b.n	800a97e <__s2b+0x66>
 800a990:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a994:	4601      	mov	r1, r0
 800a996:	3b30      	subs	r3, #48	; 0x30
 800a998:	220a      	movs	r2, #10
 800a99a:	4630      	mov	r0, r6
 800a99c:	f7ff ff76 	bl	800a88c <__multadd>
 800a9a0:	e7ee      	b.n	800a980 <__s2b+0x68>
 800a9a2:	bf00      	nop
 800a9a4:	0800cbb0 	.word	0x0800cbb0
 800a9a8:	0800cc3c 	.word	0x0800cc3c

0800a9ac <__hi0bits>:
 800a9ac:	0c03      	lsrs	r3, r0, #16
 800a9ae:	041b      	lsls	r3, r3, #16
 800a9b0:	b9d3      	cbnz	r3, 800a9e8 <__hi0bits+0x3c>
 800a9b2:	0400      	lsls	r0, r0, #16
 800a9b4:	2310      	movs	r3, #16
 800a9b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a9ba:	bf04      	itt	eq
 800a9bc:	0200      	lsleq	r0, r0, #8
 800a9be:	3308      	addeq	r3, #8
 800a9c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a9c4:	bf04      	itt	eq
 800a9c6:	0100      	lsleq	r0, r0, #4
 800a9c8:	3304      	addeq	r3, #4
 800a9ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a9ce:	bf04      	itt	eq
 800a9d0:	0080      	lsleq	r0, r0, #2
 800a9d2:	3302      	addeq	r3, #2
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	db05      	blt.n	800a9e4 <__hi0bits+0x38>
 800a9d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a9dc:	f103 0301 	add.w	r3, r3, #1
 800a9e0:	bf08      	it	eq
 800a9e2:	2320      	moveq	r3, #32
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	4770      	bx	lr
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	e7e4      	b.n	800a9b6 <__hi0bits+0xa>

0800a9ec <__lo0bits>:
 800a9ec:	6803      	ldr	r3, [r0, #0]
 800a9ee:	f013 0207 	ands.w	r2, r3, #7
 800a9f2:	4601      	mov	r1, r0
 800a9f4:	d00b      	beq.n	800aa0e <__lo0bits+0x22>
 800a9f6:	07da      	lsls	r2, r3, #31
 800a9f8:	d423      	bmi.n	800aa42 <__lo0bits+0x56>
 800a9fa:	0798      	lsls	r0, r3, #30
 800a9fc:	bf49      	itett	mi
 800a9fe:	085b      	lsrmi	r3, r3, #1
 800aa00:	089b      	lsrpl	r3, r3, #2
 800aa02:	2001      	movmi	r0, #1
 800aa04:	600b      	strmi	r3, [r1, #0]
 800aa06:	bf5c      	itt	pl
 800aa08:	600b      	strpl	r3, [r1, #0]
 800aa0a:	2002      	movpl	r0, #2
 800aa0c:	4770      	bx	lr
 800aa0e:	b298      	uxth	r0, r3
 800aa10:	b9a8      	cbnz	r0, 800aa3e <__lo0bits+0x52>
 800aa12:	0c1b      	lsrs	r3, r3, #16
 800aa14:	2010      	movs	r0, #16
 800aa16:	b2da      	uxtb	r2, r3
 800aa18:	b90a      	cbnz	r2, 800aa1e <__lo0bits+0x32>
 800aa1a:	3008      	adds	r0, #8
 800aa1c:	0a1b      	lsrs	r3, r3, #8
 800aa1e:	071a      	lsls	r2, r3, #28
 800aa20:	bf04      	itt	eq
 800aa22:	091b      	lsreq	r3, r3, #4
 800aa24:	3004      	addeq	r0, #4
 800aa26:	079a      	lsls	r2, r3, #30
 800aa28:	bf04      	itt	eq
 800aa2a:	089b      	lsreq	r3, r3, #2
 800aa2c:	3002      	addeq	r0, #2
 800aa2e:	07da      	lsls	r2, r3, #31
 800aa30:	d403      	bmi.n	800aa3a <__lo0bits+0x4e>
 800aa32:	085b      	lsrs	r3, r3, #1
 800aa34:	f100 0001 	add.w	r0, r0, #1
 800aa38:	d005      	beq.n	800aa46 <__lo0bits+0x5a>
 800aa3a:	600b      	str	r3, [r1, #0]
 800aa3c:	4770      	bx	lr
 800aa3e:	4610      	mov	r0, r2
 800aa40:	e7e9      	b.n	800aa16 <__lo0bits+0x2a>
 800aa42:	2000      	movs	r0, #0
 800aa44:	4770      	bx	lr
 800aa46:	2020      	movs	r0, #32
 800aa48:	4770      	bx	lr
	...

0800aa4c <__i2b>:
 800aa4c:	b510      	push	{r4, lr}
 800aa4e:	460c      	mov	r4, r1
 800aa50:	2101      	movs	r1, #1
 800aa52:	f7ff feb9 	bl	800a7c8 <_Balloc>
 800aa56:	4602      	mov	r2, r0
 800aa58:	b928      	cbnz	r0, 800aa66 <__i2b+0x1a>
 800aa5a:	4b05      	ldr	r3, [pc, #20]	; (800aa70 <__i2b+0x24>)
 800aa5c:	4805      	ldr	r0, [pc, #20]	; (800aa74 <__i2b+0x28>)
 800aa5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aa62:	f001 fa1d 	bl	800bea0 <__assert_func>
 800aa66:	2301      	movs	r3, #1
 800aa68:	6144      	str	r4, [r0, #20]
 800aa6a:	6103      	str	r3, [r0, #16]
 800aa6c:	bd10      	pop	{r4, pc}
 800aa6e:	bf00      	nop
 800aa70:	0800cbb0 	.word	0x0800cbb0
 800aa74:	0800cc3c 	.word	0x0800cc3c

0800aa78 <__multiply>:
 800aa78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa7c:	4691      	mov	r9, r2
 800aa7e:	690a      	ldr	r2, [r1, #16]
 800aa80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	bfb8      	it	lt
 800aa88:	460b      	movlt	r3, r1
 800aa8a:	460c      	mov	r4, r1
 800aa8c:	bfbc      	itt	lt
 800aa8e:	464c      	movlt	r4, r9
 800aa90:	4699      	movlt	r9, r3
 800aa92:	6927      	ldr	r7, [r4, #16]
 800aa94:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aa98:	68a3      	ldr	r3, [r4, #8]
 800aa9a:	6861      	ldr	r1, [r4, #4]
 800aa9c:	eb07 060a 	add.w	r6, r7, sl
 800aaa0:	42b3      	cmp	r3, r6
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	bfb8      	it	lt
 800aaa6:	3101      	addlt	r1, #1
 800aaa8:	f7ff fe8e 	bl	800a7c8 <_Balloc>
 800aaac:	b930      	cbnz	r0, 800aabc <__multiply+0x44>
 800aaae:	4602      	mov	r2, r0
 800aab0:	4b44      	ldr	r3, [pc, #272]	; (800abc4 <__multiply+0x14c>)
 800aab2:	4845      	ldr	r0, [pc, #276]	; (800abc8 <__multiply+0x150>)
 800aab4:	f240 115d 	movw	r1, #349	; 0x15d
 800aab8:	f001 f9f2 	bl	800bea0 <__assert_func>
 800aabc:	f100 0514 	add.w	r5, r0, #20
 800aac0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aac4:	462b      	mov	r3, r5
 800aac6:	2200      	movs	r2, #0
 800aac8:	4543      	cmp	r3, r8
 800aaca:	d321      	bcc.n	800ab10 <__multiply+0x98>
 800aacc:	f104 0314 	add.w	r3, r4, #20
 800aad0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aad4:	f109 0314 	add.w	r3, r9, #20
 800aad8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aadc:	9202      	str	r2, [sp, #8]
 800aade:	1b3a      	subs	r2, r7, r4
 800aae0:	3a15      	subs	r2, #21
 800aae2:	f022 0203 	bic.w	r2, r2, #3
 800aae6:	3204      	adds	r2, #4
 800aae8:	f104 0115 	add.w	r1, r4, #21
 800aaec:	428f      	cmp	r7, r1
 800aaee:	bf38      	it	cc
 800aaf0:	2204      	movcc	r2, #4
 800aaf2:	9201      	str	r2, [sp, #4]
 800aaf4:	9a02      	ldr	r2, [sp, #8]
 800aaf6:	9303      	str	r3, [sp, #12]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d80c      	bhi.n	800ab16 <__multiply+0x9e>
 800aafc:	2e00      	cmp	r6, #0
 800aafe:	dd03      	ble.n	800ab08 <__multiply+0x90>
 800ab00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d05a      	beq.n	800abbe <__multiply+0x146>
 800ab08:	6106      	str	r6, [r0, #16]
 800ab0a:	b005      	add	sp, #20
 800ab0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab10:	f843 2b04 	str.w	r2, [r3], #4
 800ab14:	e7d8      	b.n	800aac8 <__multiply+0x50>
 800ab16:	f8b3 a000 	ldrh.w	sl, [r3]
 800ab1a:	f1ba 0f00 	cmp.w	sl, #0
 800ab1e:	d024      	beq.n	800ab6a <__multiply+0xf2>
 800ab20:	f104 0e14 	add.w	lr, r4, #20
 800ab24:	46a9      	mov	r9, r5
 800ab26:	f04f 0c00 	mov.w	ip, #0
 800ab2a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ab2e:	f8d9 1000 	ldr.w	r1, [r9]
 800ab32:	fa1f fb82 	uxth.w	fp, r2
 800ab36:	b289      	uxth	r1, r1
 800ab38:	fb0a 110b 	mla	r1, sl, fp, r1
 800ab3c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ab40:	f8d9 2000 	ldr.w	r2, [r9]
 800ab44:	4461      	add	r1, ip
 800ab46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab4a:	fb0a c20b 	mla	r2, sl, fp, ip
 800ab4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ab52:	b289      	uxth	r1, r1
 800ab54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab58:	4577      	cmp	r7, lr
 800ab5a:	f849 1b04 	str.w	r1, [r9], #4
 800ab5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab62:	d8e2      	bhi.n	800ab2a <__multiply+0xb2>
 800ab64:	9a01      	ldr	r2, [sp, #4]
 800ab66:	f845 c002 	str.w	ip, [r5, r2]
 800ab6a:	9a03      	ldr	r2, [sp, #12]
 800ab6c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ab70:	3304      	adds	r3, #4
 800ab72:	f1b9 0f00 	cmp.w	r9, #0
 800ab76:	d020      	beq.n	800abba <__multiply+0x142>
 800ab78:	6829      	ldr	r1, [r5, #0]
 800ab7a:	f104 0c14 	add.w	ip, r4, #20
 800ab7e:	46ae      	mov	lr, r5
 800ab80:	f04f 0a00 	mov.w	sl, #0
 800ab84:	f8bc b000 	ldrh.w	fp, [ip]
 800ab88:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ab8c:	fb09 220b 	mla	r2, r9, fp, r2
 800ab90:	4492      	add	sl, r2
 800ab92:	b289      	uxth	r1, r1
 800ab94:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ab98:	f84e 1b04 	str.w	r1, [lr], #4
 800ab9c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aba0:	f8be 1000 	ldrh.w	r1, [lr]
 800aba4:	0c12      	lsrs	r2, r2, #16
 800aba6:	fb09 1102 	mla	r1, r9, r2, r1
 800abaa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800abae:	4567      	cmp	r7, ip
 800abb0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800abb4:	d8e6      	bhi.n	800ab84 <__multiply+0x10c>
 800abb6:	9a01      	ldr	r2, [sp, #4]
 800abb8:	50a9      	str	r1, [r5, r2]
 800abba:	3504      	adds	r5, #4
 800abbc:	e79a      	b.n	800aaf4 <__multiply+0x7c>
 800abbe:	3e01      	subs	r6, #1
 800abc0:	e79c      	b.n	800aafc <__multiply+0x84>
 800abc2:	bf00      	nop
 800abc4:	0800cbb0 	.word	0x0800cbb0
 800abc8:	0800cc3c 	.word	0x0800cc3c

0800abcc <__pow5mult>:
 800abcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abd0:	4615      	mov	r5, r2
 800abd2:	f012 0203 	ands.w	r2, r2, #3
 800abd6:	4606      	mov	r6, r0
 800abd8:	460f      	mov	r7, r1
 800abda:	d007      	beq.n	800abec <__pow5mult+0x20>
 800abdc:	4c25      	ldr	r4, [pc, #148]	; (800ac74 <__pow5mult+0xa8>)
 800abde:	3a01      	subs	r2, #1
 800abe0:	2300      	movs	r3, #0
 800abe2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800abe6:	f7ff fe51 	bl	800a88c <__multadd>
 800abea:	4607      	mov	r7, r0
 800abec:	10ad      	asrs	r5, r5, #2
 800abee:	d03d      	beq.n	800ac6c <__pow5mult+0xa0>
 800abf0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800abf2:	b97c      	cbnz	r4, 800ac14 <__pow5mult+0x48>
 800abf4:	2010      	movs	r0, #16
 800abf6:	f7ff fdbf 	bl	800a778 <malloc>
 800abfa:	4602      	mov	r2, r0
 800abfc:	6270      	str	r0, [r6, #36]	; 0x24
 800abfe:	b928      	cbnz	r0, 800ac0c <__pow5mult+0x40>
 800ac00:	4b1d      	ldr	r3, [pc, #116]	; (800ac78 <__pow5mult+0xac>)
 800ac02:	481e      	ldr	r0, [pc, #120]	; (800ac7c <__pow5mult+0xb0>)
 800ac04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ac08:	f001 f94a 	bl	800bea0 <__assert_func>
 800ac0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac10:	6004      	str	r4, [r0, #0]
 800ac12:	60c4      	str	r4, [r0, #12]
 800ac14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ac18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ac1c:	b94c      	cbnz	r4, 800ac32 <__pow5mult+0x66>
 800ac1e:	f240 2171 	movw	r1, #625	; 0x271
 800ac22:	4630      	mov	r0, r6
 800ac24:	f7ff ff12 	bl	800aa4c <__i2b>
 800ac28:	2300      	movs	r3, #0
 800ac2a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ac2e:	4604      	mov	r4, r0
 800ac30:	6003      	str	r3, [r0, #0]
 800ac32:	f04f 0900 	mov.w	r9, #0
 800ac36:	07eb      	lsls	r3, r5, #31
 800ac38:	d50a      	bpl.n	800ac50 <__pow5mult+0x84>
 800ac3a:	4639      	mov	r1, r7
 800ac3c:	4622      	mov	r2, r4
 800ac3e:	4630      	mov	r0, r6
 800ac40:	f7ff ff1a 	bl	800aa78 <__multiply>
 800ac44:	4639      	mov	r1, r7
 800ac46:	4680      	mov	r8, r0
 800ac48:	4630      	mov	r0, r6
 800ac4a:	f7ff fdfd 	bl	800a848 <_Bfree>
 800ac4e:	4647      	mov	r7, r8
 800ac50:	106d      	asrs	r5, r5, #1
 800ac52:	d00b      	beq.n	800ac6c <__pow5mult+0xa0>
 800ac54:	6820      	ldr	r0, [r4, #0]
 800ac56:	b938      	cbnz	r0, 800ac68 <__pow5mult+0x9c>
 800ac58:	4622      	mov	r2, r4
 800ac5a:	4621      	mov	r1, r4
 800ac5c:	4630      	mov	r0, r6
 800ac5e:	f7ff ff0b 	bl	800aa78 <__multiply>
 800ac62:	6020      	str	r0, [r4, #0]
 800ac64:	f8c0 9000 	str.w	r9, [r0]
 800ac68:	4604      	mov	r4, r0
 800ac6a:	e7e4      	b.n	800ac36 <__pow5mult+0x6a>
 800ac6c:	4638      	mov	r0, r7
 800ac6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac72:	bf00      	nop
 800ac74:	0800cd88 	.word	0x0800cd88
 800ac78:	0800cb3e 	.word	0x0800cb3e
 800ac7c:	0800cc3c 	.word	0x0800cc3c

0800ac80 <__lshift>:
 800ac80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac84:	460c      	mov	r4, r1
 800ac86:	6849      	ldr	r1, [r1, #4]
 800ac88:	6923      	ldr	r3, [r4, #16]
 800ac8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac8e:	68a3      	ldr	r3, [r4, #8]
 800ac90:	4607      	mov	r7, r0
 800ac92:	4691      	mov	r9, r2
 800ac94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac98:	f108 0601 	add.w	r6, r8, #1
 800ac9c:	42b3      	cmp	r3, r6
 800ac9e:	db0b      	blt.n	800acb8 <__lshift+0x38>
 800aca0:	4638      	mov	r0, r7
 800aca2:	f7ff fd91 	bl	800a7c8 <_Balloc>
 800aca6:	4605      	mov	r5, r0
 800aca8:	b948      	cbnz	r0, 800acbe <__lshift+0x3e>
 800acaa:	4602      	mov	r2, r0
 800acac:	4b2a      	ldr	r3, [pc, #168]	; (800ad58 <__lshift+0xd8>)
 800acae:	482b      	ldr	r0, [pc, #172]	; (800ad5c <__lshift+0xdc>)
 800acb0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800acb4:	f001 f8f4 	bl	800bea0 <__assert_func>
 800acb8:	3101      	adds	r1, #1
 800acba:	005b      	lsls	r3, r3, #1
 800acbc:	e7ee      	b.n	800ac9c <__lshift+0x1c>
 800acbe:	2300      	movs	r3, #0
 800acc0:	f100 0114 	add.w	r1, r0, #20
 800acc4:	f100 0210 	add.w	r2, r0, #16
 800acc8:	4618      	mov	r0, r3
 800acca:	4553      	cmp	r3, sl
 800accc:	db37      	blt.n	800ad3e <__lshift+0xbe>
 800acce:	6920      	ldr	r0, [r4, #16]
 800acd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800acd4:	f104 0314 	add.w	r3, r4, #20
 800acd8:	f019 091f 	ands.w	r9, r9, #31
 800acdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ace0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ace4:	d02f      	beq.n	800ad46 <__lshift+0xc6>
 800ace6:	f1c9 0e20 	rsb	lr, r9, #32
 800acea:	468a      	mov	sl, r1
 800acec:	f04f 0c00 	mov.w	ip, #0
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	fa02 f209 	lsl.w	r2, r2, r9
 800acf6:	ea42 020c 	orr.w	r2, r2, ip
 800acfa:	f84a 2b04 	str.w	r2, [sl], #4
 800acfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad02:	4298      	cmp	r0, r3
 800ad04:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ad08:	d8f2      	bhi.n	800acf0 <__lshift+0x70>
 800ad0a:	1b03      	subs	r3, r0, r4
 800ad0c:	3b15      	subs	r3, #21
 800ad0e:	f023 0303 	bic.w	r3, r3, #3
 800ad12:	3304      	adds	r3, #4
 800ad14:	f104 0215 	add.w	r2, r4, #21
 800ad18:	4290      	cmp	r0, r2
 800ad1a:	bf38      	it	cc
 800ad1c:	2304      	movcc	r3, #4
 800ad1e:	f841 c003 	str.w	ip, [r1, r3]
 800ad22:	f1bc 0f00 	cmp.w	ip, #0
 800ad26:	d001      	beq.n	800ad2c <__lshift+0xac>
 800ad28:	f108 0602 	add.w	r6, r8, #2
 800ad2c:	3e01      	subs	r6, #1
 800ad2e:	4638      	mov	r0, r7
 800ad30:	612e      	str	r6, [r5, #16]
 800ad32:	4621      	mov	r1, r4
 800ad34:	f7ff fd88 	bl	800a848 <_Bfree>
 800ad38:	4628      	mov	r0, r5
 800ad3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad3e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ad42:	3301      	adds	r3, #1
 800ad44:	e7c1      	b.n	800acca <__lshift+0x4a>
 800ad46:	3904      	subs	r1, #4
 800ad48:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad4c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ad50:	4298      	cmp	r0, r3
 800ad52:	d8f9      	bhi.n	800ad48 <__lshift+0xc8>
 800ad54:	e7ea      	b.n	800ad2c <__lshift+0xac>
 800ad56:	bf00      	nop
 800ad58:	0800cbb0 	.word	0x0800cbb0
 800ad5c:	0800cc3c 	.word	0x0800cc3c

0800ad60 <__mcmp>:
 800ad60:	b530      	push	{r4, r5, lr}
 800ad62:	6902      	ldr	r2, [r0, #16]
 800ad64:	690c      	ldr	r4, [r1, #16]
 800ad66:	1b12      	subs	r2, r2, r4
 800ad68:	d10e      	bne.n	800ad88 <__mcmp+0x28>
 800ad6a:	f100 0314 	add.w	r3, r0, #20
 800ad6e:	3114      	adds	r1, #20
 800ad70:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ad74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ad78:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ad7c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ad80:	42a5      	cmp	r5, r4
 800ad82:	d003      	beq.n	800ad8c <__mcmp+0x2c>
 800ad84:	d305      	bcc.n	800ad92 <__mcmp+0x32>
 800ad86:	2201      	movs	r2, #1
 800ad88:	4610      	mov	r0, r2
 800ad8a:	bd30      	pop	{r4, r5, pc}
 800ad8c:	4283      	cmp	r3, r0
 800ad8e:	d3f3      	bcc.n	800ad78 <__mcmp+0x18>
 800ad90:	e7fa      	b.n	800ad88 <__mcmp+0x28>
 800ad92:	f04f 32ff 	mov.w	r2, #4294967295
 800ad96:	e7f7      	b.n	800ad88 <__mcmp+0x28>

0800ad98 <__mdiff>:
 800ad98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad9c:	460c      	mov	r4, r1
 800ad9e:	4606      	mov	r6, r0
 800ada0:	4611      	mov	r1, r2
 800ada2:	4620      	mov	r0, r4
 800ada4:	4690      	mov	r8, r2
 800ada6:	f7ff ffdb 	bl	800ad60 <__mcmp>
 800adaa:	1e05      	subs	r5, r0, #0
 800adac:	d110      	bne.n	800add0 <__mdiff+0x38>
 800adae:	4629      	mov	r1, r5
 800adb0:	4630      	mov	r0, r6
 800adb2:	f7ff fd09 	bl	800a7c8 <_Balloc>
 800adb6:	b930      	cbnz	r0, 800adc6 <__mdiff+0x2e>
 800adb8:	4b3a      	ldr	r3, [pc, #232]	; (800aea4 <__mdiff+0x10c>)
 800adba:	4602      	mov	r2, r0
 800adbc:	f240 2132 	movw	r1, #562	; 0x232
 800adc0:	4839      	ldr	r0, [pc, #228]	; (800aea8 <__mdiff+0x110>)
 800adc2:	f001 f86d 	bl	800bea0 <__assert_func>
 800adc6:	2301      	movs	r3, #1
 800adc8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800adcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800add0:	bfa4      	itt	ge
 800add2:	4643      	movge	r3, r8
 800add4:	46a0      	movge	r8, r4
 800add6:	4630      	mov	r0, r6
 800add8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800addc:	bfa6      	itte	ge
 800adde:	461c      	movge	r4, r3
 800ade0:	2500      	movge	r5, #0
 800ade2:	2501      	movlt	r5, #1
 800ade4:	f7ff fcf0 	bl	800a7c8 <_Balloc>
 800ade8:	b920      	cbnz	r0, 800adf4 <__mdiff+0x5c>
 800adea:	4b2e      	ldr	r3, [pc, #184]	; (800aea4 <__mdiff+0x10c>)
 800adec:	4602      	mov	r2, r0
 800adee:	f44f 7110 	mov.w	r1, #576	; 0x240
 800adf2:	e7e5      	b.n	800adc0 <__mdiff+0x28>
 800adf4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800adf8:	6926      	ldr	r6, [r4, #16]
 800adfa:	60c5      	str	r5, [r0, #12]
 800adfc:	f104 0914 	add.w	r9, r4, #20
 800ae00:	f108 0514 	add.w	r5, r8, #20
 800ae04:	f100 0e14 	add.w	lr, r0, #20
 800ae08:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ae0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ae10:	f108 0210 	add.w	r2, r8, #16
 800ae14:	46f2      	mov	sl, lr
 800ae16:	2100      	movs	r1, #0
 800ae18:	f859 3b04 	ldr.w	r3, [r9], #4
 800ae1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ae20:	fa1f f883 	uxth.w	r8, r3
 800ae24:	fa11 f18b 	uxtah	r1, r1, fp
 800ae28:	0c1b      	lsrs	r3, r3, #16
 800ae2a:	eba1 0808 	sub.w	r8, r1, r8
 800ae2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ae32:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ae36:	fa1f f888 	uxth.w	r8, r8
 800ae3a:	1419      	asrs	r1, r3, #16
 800ae3c:	454e      	cmp	r6, r9
 800ae3e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ae42:	f84a 3b04 	str.w	r3, [sl], #4
 800ae46:	d8e7      	bhi.n	800ae18 <__mdiff+0x80>
 800ae48:	1b33      	subs	r3, r6, r4
 800ae4a:	3b15      	subs	r3, #21
 800ae4c:	f023 0303 	bic.w	r3, r3, #3
 800ae50:	3304      	adds	r3, #4
 800ae52:	3415      	adds	r4, #21
 800ae54:	42a6      	cmp	r6, r4
 800ae56:	bf38      	it	cc
 800ae58:	2304      	movcc	r3, #4
 800ae5a:	441d      	add	r5, r3
 800ae5c:	4473      	add	r3, lr
 800ae5e:	469e      	mov	lr, r3
 800ae60:	462e      	mov	r6, r5
 800ae62:	4566      	cmp	r6, ip
 800ae64:	d30e      	bcc.n	800ae84 <__mdiff+0xec>
 800ae66:	f10c 0203 	add.w	r2, ip, #3
 800ae6a:	1b52      	subs	r2, r2, r5
 800ae6c:	f022 0203 	bic.w	r2, r2, #3
 800ae70:	3d03      	subs	r5, #3
 800ae72:	45ac      	cmp	ip, r5
 800ae74:	bf38      	it	cc
 800ae76:	2200      	movcc	r2, #0
 800ae78:	441a      	add	r2, r3
 800ae7a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ae7e:	b17b      	cbz	r3, 800aea0 <__mdiff+0x108>
 800ae80:	6107      	str	r7, [r0, #16]
 800ae82:	e7a3      	b.n	800adcc <__mdiff+0x34>
 800ae84:	f856 8b04 	ldr.w	r8, [r6], #4
 800ae88:	fa11 f288 	uxtah	r2, r1, r8
 800ae8c:	1414      	asrs	r4, r2, #16
 800ae8e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ae92:	b292      	uxth	r2, r2
 800ae94:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ae98:	f84e 2b04 	str.w	r2, [lr], #4
 800ae9c:	1421      	asrs	r1, r4, #16
 800ae9e:	e7e0      	b.n	800ae62 <__mdiff+0xca>
 800aea0:	3f01      	subs	r7, #1
 800aea2:	e7ea      	b.n	800ae7a <__mdiff+0xe2>
 800aea4:	0800cbb0 	.word	0x0800cbb0
 800aea8:	0800cc3c 	.word	0x0800cc3c

0800aeac <__ulp>:
 800aeac:	b082      	sub	sp, #8
 800aeae:	ed8d 0b00 	vstr	d0, [sp]
 800aeb2:	9b01      	ldr	r3, [sp, #4]
 800aeb4:	4912      	ldr	r1, [pc, #72]	; (800af00 <__ulp+0x54>)
 800aeb6:	4019      	ands	r1, r3
 800aeb8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800aebc:	2900      	cmp	r1, #0
 800aebe:	dd05      	ble.n	800aecc <__ulp+0x20>
 800aec0:	2200      	movs	r2, #0
 800aec2:	460b      	mov	r3, r1
 800aec4:	ec43 2b10 	vmov	d0, r2, r3
 800aec8:	b002      	add	sp, #8
 800aeca:	4770      	bx	lr
 800aecc:	4249      	negs	r1, r1
 800aece:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800aed2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800aed6:	f04f 0200 	mov.w	r2, #0
 800aeda:	f04f 0300 	mov.w	r3, #0
 800aede:	da04      	bge.n	800aeea <__ulp+0x3e>
 800aee0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800aee4:	fa41 f300 	asr.w	r3, r1, r0
 800aee8:	e7ec      	b.n	800aec4 <__ulp+0x18>
 800aeea:	f1a0 0114 	sub.w	r1, r0, #20
 800aeee:	291e      	cmp	r1, #30
 800aef0:	bfda      	itte	le
 800aef2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800aef6:	fa20 f101 	lsrle.w	r1, r0, r1
 800aefa:	2101      	movgt	r1, #1
 800aefc:	460a      	mov	r2, r1
 800aefe:	e7e1      	b.n	800aec4 <__ulp+0x18>
 800af00:	7ff00000 	.word	0x7ff00000

0800af04 <__b2d>:
 800af04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af06:	6905      	ldr	r5, [r0, #16]
 800af08:	f100 0714 	add.w	r7, r0, #20
 800af0c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800af10:	1f2e      	subs	r6, r5, #4
 800af12:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800af16:	4620      	mov	r0, r4
 800af18:	f7ff fd48 	bl	800a9ac <__hi0bits>
 800af1c:	f1c0 0320 	rsb	r3, r0, #32
 800af20:	280a      	cmp	r0, #10
 800af22:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800afa0 <__b2d+0x9c>
 800af26:	600b      	str	r3, [r1, #0]
 800af28:	dc14      	bgt.n	800af54 <__b2d+0x50>
 800af2a:	f1c0 0e0b 	rsb	lr, r0, #11
 800af2e:	fa24 f10e 	lsr.w	r1, r4, lr
 800af32:	42b7      	cmp	r7, r6
 800af34:	ea41 030c 	orr.w	r3, r1, ip
 800af38:	bf34      	ite	cc
 800af3a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800af3e:	2100      	movcs	r1, #0
 800af40:	3015      	adds	r0, #21
 800af42:	fa04 f000 	lsl.w	r0, r4, r0
 800af46:	fa21 f10e 	lsr.w	r1, r1, lr
 800af4a:	ea40 0201 	orr.w	r2, r0, r1
 800af4e:	ec43 2b10 	vmov	d0, r2, r3
 800af52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af54:	42b7      	cmp	r7, r6
 800af56:	bf3a      	itte	cc
 800af58:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800af5c:	f1a5 0608 	subcc.w	r6, r5, #8
 800af60:	2100      	movcs	r1, #0
 800af62:	380b      	subs	r0, #11
 800af64:	d017      	beq.n	800af96 <__b2d+0x92>
 800af66:	f1c0 0c20 	rsb	ip, r0, #32
 800af6a:	fa04 f500 	lsl.w	r5, r4, r0
 800af6e:	42be      	cmp	r6, r7
 800af70:	fa21 f40c 	lsr.w	r4, r1, ip
 800af74:	ea45 0504 	orr.w	r5, r5, r4
 800af78:	bf8c      	ite	hi
 800af7a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800af7e:	2400      	movls	r4, #0
 800af80:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800af84:	fa01 f000 	lsl.w	r0, r1, r0
 800af88:	fa24 f40c 	lsr.w	r4, r4, ip
 800af8c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800af90:	ea40 0204 	orr.w	r2, r0, r4
 800af94:	e7db      	b.n	800af4e <__b2d+0x4a>
 800af96:	ea44 030c 	orr.w	r3, r4, ip
 800af9a:	460a      	mov	r2, r1
 800af9c:	e7d7      	b.n	800af4e <__b2d+0x4a>
 800af9e:	bf00      	nop
 800afa0:	3ff00000 	.word	0x3ff00000

0800afa4 <__d2b>:
 800afa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800afa8:	4689      	mov	r9, r1
 800afaa:	2101      	movs	r1, #1
 800afac:	ec57 6b10 	vmov	r6, r7, d0
 800afb0:	4690      	mov	r8, r2
 800afb2:	f7ff fc09 	bl	800a7c8 <_Balloc>
 800afb6:	4604      	mov	r4, r0
 800afb8:	b930      	cbnz	r0, 800afc8 <__d2b+0x24>
 800afba:	4602      	mov	r2, r0
 800afbc:	4b25      	ldr	r3, [pc, #148]	; (800b054 <__d2b+0xb0>)
 800afbe:	4826      	ldr	r0, [pc, #152]	; (800b058 <__d2b+0xb4>)
 800afc0:	f240 310a 	movw	r1, #778	; 0x30a
 800afc4:	f000 ff6c 	bl	800bea0 <__assert_func>
 800afc8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800afcc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800afd0:	bb35      	cbnz	r5, 800b020 <__d2b+0x7c>
 800afd2:	2e00      	cmp	r6, #0
 800afd4:	9301      	str	r3, [sp, #4]
 800afd6:	d028      	beq.n	800b02a <__d2b+0x86>
 800afd8:	4668      	mov	r0, sp
 800afda:	9600      	str	r6, [sp, #0]
 800afdc:	f7ff fd06 	bl	800a9ec <__lo0bits>
 800afe0:	9900      	ldr	r1, [sp, #0]
 800afe2:	b300      	cbz	r0, 800b026 <__d2b+0x82>
 800afe4:	9a01      	ldr	r2, [sp, #4]
 800afe6:	f1c0 0320 	rsb	r3, r0, #32
 800afea:	fa02 f303 	lsl.w	r3, r2, r3
 800afee:	430b      	orrs	r3, r1
 800aff0:	40c2      	lsrs	r2, r0
 800aff2:	6163      	str	r3, [r4, #20]
 800aff4:	9201      	str	r2, [sp, #4]
 800aff6:	9b01      	ldr	r3, [sp, #4]
 800aff8:	61a3      	str	r3, [r4, #24]
 800affa:	2b00      	cmp	r3, #0
 800affc:	bf14      	ite	ne
 800affe:	2202      	movne	r2, #2
 800b000:	2201      	moveq	r2, #1
 800b002:	6122      	str	r2, [r4, #16]
 800b004:	b1d5      	cbz	r5, 800b03c <__d2b+0x98>
 800b006:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b00a:	4405      	add	r5, r0
 800b00c:	f8c9 5000 	str.w	r5, [r9]
 800b010:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b014:	f8c8 0000 	str.w	r0, [r8]
 800b018:	4620      	mov	r0, r4
 800b01a:	b003      	add	sp, #12
 800b01c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b020:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b024:	e7d5      	b.n	800afd2 <__d2b+0x2e>
 800b026:	6161      	str	r1, [r4, #20]
 800b028:	e7e5      	b.n	800aff6 <__d2b+0x52>
 800b02a:	a801      	add	r0, sp, #4
 800b02c:	f7ff fcde 	bl	800a9ec <__lo0bits>
 800b030:	9b01      	ldr	r3, [sp, #4]
 800b032:	6163      	str	r3, [r4, #20]
 800b034:	2201      	movs	r2, #1
 800b036:	6122      	str	r2, [r4, #16]
 800b038:	3020      	adds	r0, #32
 800b03a:	e7e3      	b.n	800b004 <__d2b+0x60>
 800b03c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b040:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b044:	f8c9 0000 	str.w	r0, [r9]
 800b048:	6918      	ldr	r0, [r3, #16]
 800b04a:	f7ff fcaf 	bl	800a9ac <__hi0bits>
 800b04e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b052:	e7df      	b.n	800b014 <__d2b+0x70>
 800b054:	0800cbb0 	.word	0x0800cbb0
 800b058:	0800cc3c 	.word	0x0800cc3c

0800b05c <__ratio>:
 800b05c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b060:	4688      	mov	r8, r1
 800b062:	4669      	mov	r1, sp
 800b064:	4681      	mov	r9, r0
 800b066:	f7ff ff4d 	bl	800af04 <__b2d>
 800b06a:	a901      	add	r1, sp, #4
 800b06c:	4640      	mov	r0, r8
 800b06e:	ec55 4b10 	vmov	r4, r5, d0
 800b072:	f7ff ff47 	bl	800af04 <__b2d>
 800b076:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b07a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b07e:	eba3 0c02 	sub.w	ip, r3, r2
 800b082:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b086:	1a9b      	subs	r3, r3, r2
 800b088:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b08c:	ec51 0b10 	vmov	r0, r1, d0
 800b090:	2b00      	cmp	r3, #0
 800b092:	bfd6      	itet	le
 800b094:	460a      	movle	r2, r1
 800b096:	462a      	movgt	r2, r5
 800b098:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b09c:	468b      	mov	fp, r1
 800b09e:	462f      	mov	r7, r5
 800b0a0:	bfd4      	ite	le
 800b0a2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b0a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	ee10 2a10 	vmov	r2, s0
 800b0b0:	465b      	mov	r3, fp
 800b0b2:	4639      	mov	r1, r7
 800b0b4:	f7f5 fbca 	bl	800084c <__aeabi_ddiv>
 800b0b8:	ec41 0b10 	vmov	d0, r0, r1
 800b0bc:	b003      	add	sp, #12
 800b0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b0c2 <__copybits>:
 800b0c2:	3901      	subs	r1, #1
 800b0c4:	b570      	push	{r4, r5, r6, lr}
 800b0c6:	1149      	asrs	r1, r1, #5
 800b0c8:	6914      	ldr	r4, [r2, #16]
 800b0ca:	3101      	adds	r1, #1
 800b0cc:	f102 0314 	add.w	r3, r2, #20
 800b0d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b0d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b0d8:	1f05      	subs	r5, r0, #4
 800b0da:	42a3      	cmp	r3, r4
 800b0dc:	d30c      	bcc.n	800b0f8 <__copybits+0x36>
 800b0de:	1aa3      	subs	r3, r4, r2
 800b0e0:	3b11      	subs	r3, #17
 800b0e2:	f023 0303 	bic.w	r3, r3, #3
 800b0e6:	3211      	adds	r2, #17
 800b0e8:	42a2      	cmp	r2, r4
 800b0ea:	bf88      	it	hi
 800b0ec:	2300      	movhi	r3, #0
 800b0ee:	4418      	add	r0, r3
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	4288      	cmp	r0, r1
 800b0f4:	d305      	bcc.n	800b102 <__copybits+0x40>
 800b0f6:	bd70      	pop	{r4, r5, r6, pc}
 800b0f8:	f853 6b04 	ldr.w	r6, [r3], #4
 800b0fc:	f845 6f04 	str.w	r6, [r5, #4]!
 800b100:	e7eb      	b.n	800b0da <__copybits+0x18>
 800b102:	f840 3b04 	str.w	r3, [r0], #4
 800b106:	e7f4      	b.n	800b0f2 <__copybits+0x30>

0800b108 <__any_on>:
 800b108:	f100 0214 	add.w	r2, r0, #20
 800b10c:	6900      	ldr	r0, [r0, #16]
 800b10e:	114b      	asrs	r3, r1, #5
 800b110:	4298      	cmp	r0, r3
 800b112:	b510      	push	{r4, lr}
 800b114:	db11      	blt.n	800b13a <__any_on+0x32>
 800b116:	dd0a      	ble.n	800b12e <__any_on+0x26>
 800b118:	f011 011f 	ands.w	r1, r1, #31
 800b11c:	d007      	beq.n	800b12e <__any_on+0x26>
 800b11e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b122:	fa24 f001 	lsr.w	r0, r4, r1
 800b126:	fa00 f101 	lsl.w	r1, r0, r1
 800b12a:	428c      	cmp	r4, r1
 800b12c:	d10b      	bne.n	800b146 <__any_on+0x3e>
 800b12e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b132:	4293      	cmp	r3, r2
 800b134:	d803      	bhi.n	800b13e <__any_on+0x36>
 800b136:	2000      	movs	r0, #0
 800b138:	bd10      	pop	{r4, pc}
 800b13a:	4603      	mov	r3, r0
 800b13c:	e7f7      	b.n	800b12e <__any_on+0x26>
 800b13e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b142:	2900      	cmp	r1, #0
 800b144:	d0f5      	beq.n	800b132 <__any_on+0x2a>
 800b146:	2001      	movs	r0, #1
 800b148:	e7f6      	b.n	800b138 <__any_on+0x30>

0800b14a <_calloc_r>:
 800b14a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b14c:	fba1 2402 	umull	r2, r4, r1, r2
 800b150:	b94c      	cbnz	r4, 800b166 <_calloc_r+0x1c>
 800b152:	4611      	mov	r1, r2
 800b154:	9201      	str	r2, [sp, #4]
 800b156:	f000 f87b 	bl	800b250 <_malloc_r>
 800b15a:	9a01      	ldr	r2, [sp, #4]
 800b15c:	4605      	mov	r5, r0
 800b15e:	b930      	cbnz	r0, 800b16e <_calloc_r+0x24>
 800b160:	4628      	mov	r0, r5
 800b162:	b003      	add	sp, #12
 800b164:	bd30      	pop	{r4, r5, pc}
 800b166:	220c      	movs	r2, #12
 800b168:	6002      	str	r2, [r0, #0]
 800b16a:	2500      	movs	r5, #0
 800b16c:	e7f8      	b.n	800b160 <_calloc_r+0x16>
 800b16e:	4621      	mov	r1, r4
 800b170:	f7fc faf4 	bl	800775c <memset>
 800b174:	e7f4      	b.n	800b160 <_calloc_r+0x16>
	...

0800b178 <_free_r>:
 800b178:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b17a:	2900      	cmp	r1, #0
 800b17c:	d044      	beq.n	800b208 <_free_r+0x90>
 800b17e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b182:	9001      	str	r0, [sp, #4]
 800b184:	2b00      	cmp	r3, #0
 800b186:	f1a1 0404 	sub.w	r4, r1, #4
 800b18a:	bfb8      	it	lt
 800b18c:	18e4      	addlt	r4, r4, r3
 800b18e:	f001 f88b 	bl	800c2a8 <__malloc_lock>
 800b192:	4a1e      	ldr	r2, [pc, #120]	; (800b20c <_free_r+0x94>)
 800b194:	9801      	ldr	r0, [sp, #4]
 800b196:	6813      	ldr	r3, [r2, #0]
 800b198:	b933      	cbnz	r3, 800b1a8 <_free_r+0x30>
 800b19a:	6063      	str	r3, [r4, #4]
 800b19c:	6014      	str	r4, [r2, #0]
 800b19e:	b003      	add	sp, #12
 800b1a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1a4:	f001 b886 	b.w	800c2b4 <__malloc_unlock>
 800b1a8:	42a3      	cmp	r3, r4
 800b1aa:	d908      	bls.n	800b1be <_free_r+0x46>
 800b1ac:	6825      	ldr	r5, [r4, #0]
 800b1ae:	1961      	adds	r1, r4, r5
 800b1b0:	428b      	cmp	r3, r1
 800b1b2:	bf01      	itttt	eq
 800b1b4:	6819      	ldreq	r1, [r3, #0]
 800b1b6:	685b      	ldreq	r3, [r3, #4]
 800b1b8:	1949      	addeq	r1, r1, r5
 800b1ba:	6021      	streq	r1, [r4, #0]
 800b1bc:	e7ed      	b.n	800b19a <_free_r+0x22>
 800b1be:	461a      	mov	r2, r3
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	b10b      	cbz	r3, 800b1c8 <_free_r+0x50>
 800b1c4:	42a3      	cmp	r3, r4
 800b1c6:	d9fa      	bls.n	800b1be <_free_r+0x46>
 800b1c8:	6811      	ldr	r1, [r2, #0]
 800b1ca:	1855      	adds	r5, r2, r1
 800b1cc:	42a5      	cmp	r5, r4
 800b1ce:	d10b      	bne.n	800b1e8 <_free_r+0x70>
 800b1d0:	6824      	ldr	r4, [r4, #0]
 800b1d2:	4421      	add	r1, r4
 800b1d4:	1854      	adds	r4, r2, r1
 800b1d6:	42a3      	cmp	r3, r4
 800b1d8:	6011      	str	r1, [r2, #0]
 800b1da:	d1e0      	bne.n	800b19e <_free_r+0x26>
 800b1dc:	681c      	ldr	r4, [r3, #0]
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	6053      	str	r3, [r2, #4]
 800b1e2:	4421      	add	r1, r4
 800b1e4:	6011      	str	r1, [r2, #0]
 800b1e6:	e7da      	b.n	800b19e <_free_r+0x26>
 800b1e8:	d902      	bls.n	800b1f0 <_free_r+0x78>
 800b1ea:	230c      	movs	r3, #12
 800b1ec:	6003      	str	r3, [r0, #0]
 800b1ee:	e7d6      	b.n	800b19e <_free_r+0x26>
 800b1f0:	6825      	ldr	r5, [r4, #0]
 800b1f2:	1961      	adds	r1, r4, r5
 800b1f4:	428b      	cmp	r3, r1
 800b1f6:	bf04      	itt	eq
 800b1f8:	6819      	ldreq	r1, [r3, #0]
 800b1fa:	685b      	ldreq	r3, [r3, #4]
 800b1fc:	6063      	str	r3, [r4, #4]
 800b1fe:	bf04      	itt	eq
 800b200:	1949      	addeq	r1, r1, r5
 800b202:	6021      	streq	r1, [r4, #0]
 800b204:	6054      	str	r4, [r2, #4]
 800b206:	e7ca      	b.n	800b19e <_free_r+0x26>
 800b208:	b003      	add	sp, #12
 800b20a:	bd30      	pop	{r4, r5, pc}
 800b20c:	200008e4 	.word	0x200008e4

0800b210 <sbrk_aligned>:
 800b210:	b570      	push	{r4, r5, r6, lr}
 800b212:	4e0e      	ldr	r6, [pc, #56]	; (800b24c <sbrk_aligned+0x3c>)
 800b214:	460c      	mov	r4, r1
 800b216:	6831      	ldr	r1, [r6, #0]
 800b218:	4605      	mov	r5, r0
 800b21a:	b911      	cbnz	r1, 800b222 <sbrk_aligned+0x12>
 800b21c:	f000 fd28 	bl	800bc70 <_sbrk_r>
 800b220:	6030      	str	r0, [r6, #0]
 800b222:	4621      	mov	r1, r4
 800b224:	4628      	mov	r0, r5
 800b226:	f000 fd23 	bl	800bc70 <_sbrk_r>
 800b22a:	1c43      	adds	r3, r0, #1
 800b22c:	d00a      	beq.n	800b244 <sbrk_aligned+0x34>
 800b22e:	1cc4      	adds	r4, r0, #3
 800b230:	f024 0403 	bic.w	r4, r4, #3
 800b234:	42a0      	cmp	r0, r4
 800b236:	d007      	beq.n	800b248 <sbrk_aligned+0x38>
 800b238:	1a21      	subs	r1, r4, r0
 800b23a:	4628      	mov	r0, r5
 800b23c:	f000 fd18 	bl	800bc70 <_sbrk_r>
 800b240:	3001      	adds	r0, #1
 800b242:	d101      	bne.n	800b248 <sbrk_aligned+0x38>
 800b244:	f04f 34ff 	mov.w	r4, #4294967295
 800b248:	4620      	mov	r0, r4
 800b24a:	bd70      	pop	{r4, r5, r6, pc}
 800b24c:	200008e8 	.word	0x200008e8

0800b250 <_malloc_r>:
 800b250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b254:	1ccd      	adds	r5, r1, #3
 800b256:	f025 0503 	bic.w	r5, r5, #3
 800b25a:	3508      	adds	r5, #8
 800b25c:	2d0c      	cmp	r5, #12
 800b25e:	bf38      	it	cc
 800b260:	250c      	movcc	r5, #12
 800b262:	2d00      	cmp	r5, #0
 800b264:	4607      	mov	r7, r0
 800b266:	db01      	blt.n	800b26c <_malloc_r+0x1c>
 800b268:	42a9      	cmp	r1, r5
 800b26a:	d905      	bls.n	800b278 <_malloc_r+0x28>
 800b26c:	230c      	movs	r3, #12
 800b26e:	603b      	str	r3, [r7, #0]
 800b270:	2600      	movs	r6, #0
 800b272:	4630      	mov	r0, r6
 800b274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b278:	4e2e      	ldr	r6, [pc, #184]	; (800b334 <_malloc_r+0xe4>)
 800b27a:	f001 f815 	bl	800c2a8 <__malloc_lock>
 800b27e:	6833      	ldr	r3, [r6, #0]
 800b280:	461c      	mov	r4, r3
 800b282:	bb34      	cbnz	r4, 800b2d2 <_malloc_r+0x82>
 800b284:	4629      	mov	r1, r5
 800b286:	4638      	mov	r0, r7
 800b288:	f7ff ffc2 	bl	800b210 <sbrk_aligned>
 800b28c:	1c43      	adds	r3, r0, #1
 800b28e:	4604      	mov	r4, r0
 800b290:	d14d      	bne.n	800b32e <_malloc_r+0xde>
 800b292:	6834      	ldr	r4, [r6, #0]
 800b294:	4626      	mov	r6, r4
 800b296:	2e00      	cmp	r6, #0
 800b298:	d140      	bne.n	800b31c <_malloc_r+0xcc>
 800b29a:	6823      	ldr	r3, [r4, #0]
 800b29c:	4631      	mov	r1, r6
 800b29e:	4638      	mov	r0, r7
 800b2a0:	eb04 0803 	add.w	r8, r4, r3
 800b2a4:	f000 fce4 	bl	800bc70 <_sbrk_r>
 800b2a8:	4580      	cmp	r8, r0
 800b2aa:	d13a      	bne.n	800b322 <_malloc_r+0xd2>
 800b2ac:	6821      	ldr	r1, [r4, #0]
 800b2ae:	3503      	adds	r5, #3
 800b2b0:	1a6d      	subs	r5, r5, r1
 800b2b2:	f025 0503 	bic.w	r5, r5, #3
 800b2b6:	3508      	adds	r5, #8
 800b2b8:	2d0c      	cmp	r5, #12
 800b2ba:	bf38      	it	cc
 800b2bc:	250c      	movcc	r5, #12
 800b2be:	4629      	mov	r1, r5
 800b2c0:	4638      	mov	r0, r7
 800b2c2:	f7ff ffa5 	bl	800b210 <sbrk_aligned>
 800b2c6:	3001      	adds	r0, #1
 800b2c8:	d02b      	beq.n	800b322 <_malloc_r+0xd2>
 800b2ca:	6823      	ldr	r3, [r4, #0]
 800b2cc:	442b      	add	r3, r5
 800b2ce:	6023      	str	r3, [r4, #0]
 800b2d0:	e00e      	b.n	800b2f0 <_malloc_r+0xa0>
 800b2d2:	6822      	ldr	r2, [r4, #0]
 800b2d4:	1b52      	subs	r2, r2, r5
 800b2d6:	d41e      	bmi.n	800b316 <_malloc_r+0xc6>
 800b2d8:	2a0b      	cmp	r2, #11
 800b2da:	d916      	bls.n	800b30a <_malloc_r+0xba>
 800b2dc:	1961      	adds	r1, r4, r5
 800b2de:	42a3      	cmp	r3, r4
 800b2e0:	6025      	str	r5, [r4, #0]
 800b2e2:	bf18      	it	ne
 800b2e4:	6059      	strne	r1, [r3, #4]
 800b2e6:	6863      	ldr	r3, [r4, #4]
 800b2e8:	bf08      	it	eq
 800b2ea:	6031      	streq	r1, [r6, #0]
 800b2ec:	5162      	str	r2, [r4, r5]
 800b2ee:	604b      	str	r3, [r1, #4]
 800b2f0:	4638      	mov	r0, r7
 800b2f2:	f104 060b 	add.w	r6, r4, #11
 800b2f6:	f000 ffdd 	bl	800c2b4 <__malloc_unlock>
 800b2fa:	f026 0607 	bic.w	r6, r6, #7
 800b2fe:	1d23      	adds	r3, r4, #4
 800b300:	1af2      	subs	r2, r6, r3
 800b302:	d0b6      	beq.n	800b272 <_malloc_r+0x22>
 800b304:	1b9b      	subs	r3, r3, r6
 800b306:	50a3      	str	r3, [r4, r2]
 800b308:	e7b3      	b.n	800b272 <_malloc_r+0x22>
 800b30a:	6862      	ldr	r2, [r4, #4]
 800b30c:	42a3      	cmp	r3, r4
 800b30e:	bf0c      	ite	eq
 800b310:	6032      	streq	r2, [r6, #0]
 800b312:	605a      	strne	r2, [r3, #4]
 800b314:	e7ec      	b.n	800b2f0 <_malloc_r+0xa0>
 800b316:	4623      	mov	r3, r4
 800b318:	6864      	ldr	r4, [r4, #4]
 800b31a:	e7b2      	b.n	800b282 <_malloc_r+0x32>
 800b31c:	4634      	mov	r4, r6
 800b31e:	6876      	ldr	r6, [r6, #4]
 800b320:	e7b9      	b.n	800b296 <_malloc_r+0x46>
 800b322:	230c      	movs	r3, #12
 800b324:	603b      	str	r3, [r7, #0]
 800b326:	4638      	mov	r0, r7
 800b328:	f000 ffc4 	bl	800c2b4 <__malloc_unlock>
 800b32c:	e7a1      	b.n	800b272 <_malloc_r+0x22>
 800b32e:	6025      	str	r5, [r4, #0]
 800b330:	e7de      	b.n	800b2f0 <_malloc_r+0xa0>
 800b332:	bf00      	nop
 800b334:	200008e4 	.word	0x200008e4

0800b338 <__ssputs_r>:
 800b338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b33c:	688e      	ldr	r6, [r1, #8]
 800b33e:	429e      	cmp	r6, r3
 800b340:	4682      	mov	sl, r0
 800b342:	460c      	mov	r4, r1
 800b344:	4690      	mov	r8, r2
 800b346:	461f      	mov	r7, r3
 800b348:	d838      	bhi.n	800b3bc <__ssputs_r+0x84>
 800b34a:	898a      	ldrh	r2, [r1, #12]
 800b34c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b350:	d032      	beq.n	800b3b8 <__ssputs_r+0x80>
 800b352:	6825      	ldr	r5, [r4, #0]
 800b354:	6909      	ldr	r1, [r1, #16]
 800b356:	eba5 0901 	sub.w	r9, r5, r1
 800b35a:	6965      	ldr	r5, [r4, #20]
 800b35c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b360:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b364:	3301      	adds	r3, #1
 800b366:	444b      	add	r3, r9
 800b368:	106d      	asrs	r5, r5, #1
 800b36a:	429d      	cmp	r5, r3
 800b36c:	bf38      	it	cc
 800b36e:	461d      	movcc	r5, r3
 800b370:	0553      	lsls	r3, r2, #21
 800b372:	d531      	bpl.n	800b3d8 <__ssputs_r+0xa0>
 800b374:	4629      	mov	r1, r5
 800b376:	f7ff ff6b 	bl	800b250 <_malloc_r>
 800b37a:	4606      	mov	r6, r0
 800b37c:	b950      	cbnz	r0, 800b394 <__ssputs_r+0x5c>
 800b37e:	230c      	movs	r3, #12
 800b380:	f8ca 3000 	str.w	r3, [sl]
 800b384:	89a3      	ldrh	r3, [r4, #12]
 800b386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b38a:	81a3      	strh	r3, [r4, #12]
 800b38c:	f04f 30ff 	mov.w	r0, #4294967295
 800b390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b394:	6921      	ldr	r1, [r4, #16]
 800b396:	464a      	mov	r2, r9
 800b398:	f7ff fa08 	bl	800a7ac <memcpy>
 800b39c:	89a3      	ldrh	r3, [r4, #12]
 800b39e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3a6:	81a3      	strh	r3, [r4, #12]
 800b3a8:	6126      	str	r6, [r4, #16]
 800b3aa:	6165      	str	r5, [r4, #20]
 800b3ac:	444e      	add	r6, r9
 800b3ae:	eba5 0509 	sub.w	r5, r5, r9
 800b3b2:	6026      	str	r6, [r4, #0]
 800b3b4:	60a5      	str	r5, [r4, #8]
 800b3b6:	463e      	mov	r6, r7
 800b3b8:	42be      	cmp	r6, r7
 800b3ba:	d900      	bls.n	800b3be <__ssputs_r+0x86>
 800b3bc:	463e      	mov	r6, r7
 800b3be:	6820      	ldr	r0, [r4, #0]
 800b3c0:	4632      	mov	r2, r6
 800b3c2:	4641      	mov	r1, r8
 800b3c4:	f000 ff56 	bl	800c274 <memmove>
 800b3c8:	68a3      	ldr	r3, [r4, #8]
 800b3ca:	1b9b      	subs	r3, r3, r6
 800b3cc:	60a3      	str	r3, [r4, #8]
 800b3ce:	6823      	ldr	r3, [r4, #0]
 800b3d0:	4433      	add	r3, r6
 800b3d2:	6023      	str	r3, [r4, #0]
 800b3d4:	2000      	movs	r0, #0
 800b3d6:	e7db      	b.n	800b390 <__ssputs_r+0x58>
 800b3d8:	462a      	mov	r2, r5
 800b3da:	f000 ff71 	bl	800c2c0 <_realloc_r>
 800b3de:	4606      	mov	r6, r0
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	d1e1      	bne.n	800b3a8 <__ssputs_r+0x70>
 800b3e4:	6921      	ldr	r1, [r4, #16]
 800b3e6:	4650      	mov	r0, sl
 800b3e8:	f7ff fec6 	bl	800b178 <_free_r>
 800b3ec:	e7c7      	b.n	800b37e <__ssputs_r+0x46>
	...

0800b3f0 <_svfiprintf_r>:
 800b3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f4:	4698      	mov	r8, r3
 800b3f6:	898b      	ldrh	r3, [r1, #12]
 800b3f8:	061b      	lsls	r3, r3, #24
 800b3fa:	b09d      	sub	sp, #116	; 0x74
 800b3fc:	4607      	mov	r7, r0
 800b3fe:	460d      	mov	r5, r1
 800b400:	4614      	mov	r4, r2
 800b402:	d50e      	bpl.n	800b422 <_svfiprintf_r+0x32>
 800b404:	690b      	ldr	r3, [r1, #16]
 800b406:	b963      	cbnz	r3, 800b422 <_svfiprintf_r+0x32>
 800b408:	2140      	movs	r1, #64	; 0x40
 800b40a:	f7ff ff21 	bl	800b250 <_malloc_r>
 800b40e:	6028      	str	r0, [r5, #0]
 800b410:	6128      	str	r0, [r5, #16]
 800b412:	b920      	cbnz	r0, 800b41e <_svfiprintf_r+0x2e>
 800b414:	230c      	movs	r3, #12
 800b416:	603b      	str	r3, [r7, #0]
 800b418:	f04f 30ff 	mov.w	r0, #4294967295
 800b41c:	e0d1      	b.n	800b5c2 <_svfiprintf_r+0x1d2>
 800b41e:	2340      	movs	r3, #64	; 0x40
 800b420:	616b      	str	r3, [r5, #20]
 800b422:	2300      	movs	r3, #0
 800b424:	9309      	str	r3, [sp, #36]	; 0x24
 800b426:	2320      	movs	r3, #32
 800b428:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b42c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b430:	2330      	movs	r3, #48	; 0x30
 800b432:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b5dc <_svfiprintf_r+0x1ec>
 800b436:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b43a:	f04f 0901 	mov.w	r9, #1
 800b43e:	4623      	mov	r3, r4
 800b440:	469a      	mov	sl, r3
 800b442:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b446:	b10a      	cbz	r2, 800b44c <_svfiprintf_r+0x5c>
 800b448:	2a25      	cmp	r2, #37	; 0x25
 800b44a:	d1f9      	bne.n	800b440 <_svfiprintf_r+0x50>
 800b44c:	ebba 0b04 	subs.w	fp, sl, r4
 800b450:	d00b      	beq.n	800b46a <_svfiprintf_r+0x7a>
 800b452:	465b      	mov	r3, fp
 800b454:	4622      	mov	r2, r4
 800b456:	4629      	mov	r1, r5
 800b458:	4638      	mov	r0, r7
 800b45a:	f7ff ff6d 	bl	800b338 <__ssputs_r>
 800b45e:	3001      	adds	r0, #1
 800b460:	f000 80aa 	beq.w	800b5b8 <_svfiprintf_r+0x1c8>
 800b464:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b466:	445a      	add	r2, fp
 800b468:	9209      	str	r2, [sp, #36]	; 0x24
 800b46a:	f89a 3000 	ldrb.w	r3, [sl]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	f000 80a2 	beq.w	800b5b8 <_svfiprintf_r+0x1c8>
 800b474:	2300      	movs	r3, #0
 800b476:	f04f 32ff 	mov.w	r2, #4294967295
 800b47a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b47e:	f10a 0a01 	add.w	sl, sl, #1
 800b482:	9304      	str	r3, [sp, #16]
 800b484:	9307      	str	r3, [sp, #28]
 800b486:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b48a:	931a      	str	r3, [sp, #104]	; 0x68
 800b48c:	4654      	mov	r4, sl
 800b48e:	2205      	movs	r2, #5
 800b490:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b494:	4851      	ldr	r0, [pc, #324]	; (800b5dc <_svfiprintf_r+0x1ec>)
 800b496:	f7f4 fea3 	bl	80001e0 <memchr>
 800b49a:	9a04      	ldr	r2, [sp, #16]
 800b49c:	b9d8      	cbnz	r0, 800b4d6 <_svfiprintf_r+0xe6>
 800b49e:	06d0      	lsls	r0, r2, #27
 800b4a0:	bf44      	itt	mi
 800b4a2:	2320      	movmi	r3, #32
 800b4a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4a8:	0711      	lsls	r1, r2, #28
 800b4aa:	bf44      	itt	mi
 800b4ac:	232b      	movmi	r3, #43	; 0x2b
 800b4ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4b2:	f89a 3000 	ldrb.w	r3, [sl]
 800b4b6:	2b2a      	cmp	r3, #42	; 0x2a
 800b4b8:	d015      	beq.n	800b4e6 <_svfiprintf_r+0xf6>
 800b4ba:	9a07      	ldr	r2, [sp, #28]
 800b4bc:	4654      	mov	r4, sl
 800b4be:	2000      	movs	r0, #0
 800b4c0:	f04f 0c0a 	mov.w	ip, #10
 800b4c4:	4621      	mov	r1, r4
 800b4c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4ca:	3b30      	subs	r3, #48	; 0x30
 800b4cc:	2b09      	cmp	r3, #9
 800b4ce:	d94e      	bls.n	800b56e <_svfiprintf_r+0x17e>
 800b4d0:	b1b0      	cbz	r0, 800b500 <_svfiprintf_r+0x110>
 800b4d2:	9207      	str	r2, [sp, #28]
 800b4d4:	e014      	b.n	800b500 <_svfiprintf_r+0x110>
 800b4d6:	eba0 0308 	sub.w	r3, r0, r8
 800b4da:	fa09 f303 	lsl.w	r3, r9, r3
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	9304      	str	r3, [sp, #16]
 800b4e2:	46a2      	mov	sl, r4
 800b4e4:	e7d2      	b.n	800b48c <_svfiprintf_r+0x9c>
 800b4e6:	9b03      	ldr	r3, [sp, #12]
 800b4e8:	1d19      	adds	r1, r3, #4
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	9103      	str	r1, [sp, #12]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	bfbb      	ittet	lt
 800b4f2:	425b      	neglt	r3, r3
 800b4f4:	f042 0202 	orrlt.w	r2, r2, #2
 800b4f8:	9307      	strge	r3, [sp, #28]
 800b4fa:	9307      	strlt	r3, [sp, #28]
 800b4fc:	bfb8      	it	lt
 800b4fe:	9204      	strlt	r2, [sp, #16]
 800b500:	7823      	ldrb	r3, [r4, #0]
 800b502:	2b2e      	cmp	r3, #46	; 0x2e
 800b504:	d10c      	bne.n	800b520 <_svfiprintf_r+0x130>
 800b506:	7863      	ldrb	r3, [r4, #1]
 800b508:	2b2a      	cmp	r3, #42	; 0x2a
 800b50a:	d135      	bne.n	800b578 <_svfiprintf_r+0x188>
 800b50c:	9b03      	ldr	r3, [sp, #12]
 800b50e:	1d1a      	adds	r2, r3, #4
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	9203      	str	r2, [sp, #12]
 800b514:	2b00      	cmp	r3, #0
 800b516:	bfb8      	it	lt
 800b518:	f04f 33ff 	movlt.w	r3, #4294967295
 800b51c:	3402      	adds	r4, #2
 800b51e:	9305      	str	r3, [sp, #20]
 800b520:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b5ec <_svfiprintf_r+0x1fc>
 800b524:	7821      	ldrb	r1, [r4, #0]
 800b526:	2203      	movs	r2, #3
 800b528:	4650      	mov	r0, sl
 800b52a:	f7f4 fe59 	bl	80001e0 <memchr>
 800b52e:	b140      	cbz	r0, 800b542 <_svfiprintf_r+0x152>
 800b530:	2340      	movs	r3, #64	; 0x40
 800b532:	eba0 000a 	sub.w	r0, r0, sl
 800b536:	fa03 f000 	lsl.w	r0, r3, r0
 800b53a:	9b04      	ldr	r3, [sp, #16]
 800b53c:	4303      	orrs	r3, r0
 800b53e:	3401      	adds	r4, #1
 800b540:	9304      	str	r3, [sp, #16]
 800b542:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b546:	4826      	ldr	r0, [pc, #152]	; (800b5e0 <_svfiprintf_r+0x1f0>)
 800b548:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b54c:	2206      	movs	r2, #6
 800b54e:	f7f4 fe47 	bl	80001e0 <memchr>
 800b552:	2800      	cmp	r0, #0
 800b554:	d038      	beq.n	800b5c8 <_svfiprintf_r+0x1d8>
 800b556:	4b23      	ldr	r3, [pc, #140]	; (800b5e4 <_svfiprintf_r+0x1f4>)
 800b558:	bb1b      	cbnz	r3, 800b5a2 <_svfiprintf_r+0x1b2>
 800b55a:	9b03      	ldr	r3, [sp, #12]
 800b55c:	3307      	adds	r3, #7
 800b55e:	f023 0307 	bic.w	r3, r3, #7
 800b562:	3308      	adds	r3, #8
 800b564:	9303      	str	r3, [sp, #12]
 800b566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b568:	4433      	add	r3, r6
 800b56a:	9309      	str	r3, [sp, #36]	; 0x24
 800b56c:	e767      	b.n	800b43e <_svfiprintf_r+0x4e>
 800b56e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b572:	460c      	mov	r4, r1
 800b574:	2001      	movs	r0, #1
 800b576:	e7a5      	b.n	800b4c4 <_svfiprintf_r+0xd4>
 800b578:	2300      	movs	r3, #0
 800b57a:	3401      	adds	r4, #1
 800b57c:	9305      	str	r3, [sp, #20]
 800b57e:	4619      	mov	r1, r3
 800b580:	f04f 0c0a 	mov.w	ip, #10
 800b584:	4620      	mov	r0, r4
 800b586:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b58a:	3a30      	subs	r2, #48	; 0x30
 800b58c:	2a09      	cmp	r2, #9
 800b58e:	d903      	bls.n	800b598 <_svfiprintf_r+0x1a8>
 800b590:	2b00      	cmp	r3, #0
 800b592:	d0c5      	beq.n	800b520 <_svfiprintf_r+0x130>
 800b594:	9105      	str	r1, [sp, #20]
 800b596:	e7c3      	b.n	800b520 <_svfiprintf_r+0x130>
 800b598:	fb0c 2101 	mla	r1, ip, r1, r2
 800b59c:	4604      	mov	r4, r0
 800b59e:	2301      	movs	r3, #1
 800b5a0:	e7f0      	b.n	800b584 <_svfiprintf_r+0x194>
 800b5a2:	ab03      	add	r3, sp, #12
 800b5a4:	9300      	str	r3, [sp, #0]
 800b5a6:	462a      	mov	r2, r5
 800b5a8:	4b0f      	ldr	r3, [pc, #60]	; (800b5e8 <_svfiprintf_r+0x1f8>)
 800b5aa:	a904      	add	r1, sp, #16
 800b5ac:	4638      	mov	r0, r7
 800b5ae:	f7fc f97d 	bl	80078ac <_printf_float>
 800b5b2:	1c42      	adds	r2, r0, #1
 800b5b4:	4606      	mov	r6, r0
 800b5b6:	d1d6      	bne.n	800b566 <_svfiprintf_r+0x176>
 800b5b8:	89ab      	ldrh	r3, [r5, #12]
 800b5ba:	065b      	lsls	r3, r3, #25
 800b5bc:	f53f af2c 	bmi.w	800b418 <_svfiprintf_r+0x28>
 800b5c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5c2:	b01d      	add	sp, #116	; 0x74
 800b5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5c8:	ab03      	add	r3, sp, #12
 800b5ca:	9300      	str	r3, [sp, #0]
 800b5cc:	462a      	mov	r2, r5
 800b5ce:	4b06      	ldr	r3, [pc, #24]	; (800b5e8 <_svfiprintf_r+0x1f8>)
 800b5d0:	a904      	add	r1, sp, #16
 800b5d2:	4638      	mov	r0, r7
 800b5d4:	f7fc fc0e 	bl	8007df4 <_printf_i>
 800b5d8:	e7eb      	b.n	800b5b2 <_svfiprintf_r+0x1c2>
 800b5da:	bf00      	nop
 800b5dc:	0800cd94 	.word	0x0800cd94
 800b5e0:	0800cd9e 	.word	0x0800cd9e
 800b5e4:	080078ad 	.word	0x080078ad
 800b5e8:	0800b339 	.word	0x0800b339
 800b5ec:	0800cd9a 	.word	0x0800cd9a

0800b5f0 <_sungetc_r>:
 800b5f0:	b538      	push	{r3, r4, r5, lr}
 800b5f2:	1c4b      	adds	r3, r1, #1
 800b5f4:	4614      	mov	r4, r2
 800b5f6:	d103      	bne.n	800b600 <_sungetc_r+0x10>
 800b5f8:	f04f 35ff 	mov.w	r5, #4294967295
 800b5fc:	4628      	mov	r0, r5
 800b5fe:	bd38      	pop	{r3, r4, r5, pc}
 800b600:	8993      	ldrh	r3, [r2, #12]
 800b602:	f023 0320 	bic.w	r3, r3, #32
 800b606:	8193      	strh	r3, [r2, #12]
 800b608:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b60a:	6852      	ldr	r2, [r2, #4]
 800b60c:	b2cd      	uxtb	r5, r1
 800b60e:	b18b      	cbz	r3, 800b634 <_sungetc_r+0x44>
 800b610:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b612:	4293      	cmp	r3, r2
 800b614:	dd08      	ble.n	800b628 <_sungetc_r+0x38>
 800b616:	6823      	ldr	r3, [r4, #0]
 800b618:	1e5a      	subs	r2, r3, #1
 800b61a:	6022      	str	r2, [r4, #0]
 800b61c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b620:	6863      	ldr	r3, [r4, #4]
 800b622:	3301      	adds	r3, #1
 800b624:	6063      	str	r3, [r4, #4]
 800b626:	e7e9      	b.n	800b5fc <_sungetc_r+0xc>
 800b628:	4621      	mov	r1, r4
 800b62a:	f000 fbf1 	bl	800be10 <__submore>
 800b62e:	2800      	cmp	r0, #0
 800b630:	d0f1      	beq.n	800b616 <_sungetc_r+0x26>
 800b632:	e7e1      	b.n	800b5f8 <_sungetc_r+0x8>
 800b634:	6921      	ldr	r1, [r4, #16]
 800b636:	6823      	ldr	r3, [r4, #0]
 800b638:	b151      	cbz	r1, 800b650 <_sungetc_r+0x60>
 800b63a:	4299      	cmp	r1, r3
 800b63c:	d208      	bcs.n	800b650 <_sungetc_r+0x60>
 800b63e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b642:	42a9      	cmp	r1, r5
 800b644:	d104      	bne.n	800b650 <_sungetc_r+0x60>
 800b646:	3b01      	subs	r3, #1
 800b648:	3201      	adds	r2, #1
 800b64a:	6023      	str	r3, [r4, #0]
 800b64c:	6062      	str	r2, [r4, #4]
 800b64e:	e7d5      	b.n	800b5fc <_sungetc_r+0xc>
 800b650:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b658:	6363      	str	r3, [r4, #52]	; 0x34
 800b65a:	2303      	movs	r3, #3
 800b65c:	63a3      	str	r3, [r4, #56]	; 0x38
 800b65e:	4623      	mov	r3, r4
 800b660:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b664:	6023      	str	r3, [r4, #0]
 800b666:	2301      	movs	r3, #1
 800b668:	e7dc      	b.n	800b624 <_sungetc_r+0x34>

0800b66a <__ssrefill_r>:
 800b66a:	b510      	push	{r4, lr}
 800b66c:	460c      	mov	r4, r1
 800b66e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b670:	b169      	cbz	r1, 800b68e <__ssrefill_r+0x24>
 800b672:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b676:	4299      	cmp	r1, r3
 800b678:	d001      	beq.n	800b67e <__ssrefill_r+0x14>
 800b67a:	f7ff fd7d 	bl	800b178 <_free_r>
 800b67e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b680:	6063      	str	r3, [r4, #4]
 800b682:	2000      	movs	r0, #0
 800b684:	6360      	str	r0, [r4, #52]	; 0x34
 800b686:	b113      	cbz	r3, 800b68e <__ssrefill_r+0x24>
 800b688:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b68a:	6023      	str	r3, [r4, #0]
 800b68c:	bd10      	pop	{r4, pc}
 800b68e:	6923      	ldr	r3, [r4, #16]
 800b690:	6023      	str	r3, [r4, #0]
 800b692:	2300      	movs	r3, #0
 800b694:	6063      	str	r3, [r4, #4]
 800b696:	89a3      	ldrh	r3, [r4, #12]
 800b698:	f043 0320 	orr.w	r3, r3, #32
 800b69c:	81a3      	strh	r3, [r4, #12]
 800b69e:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a2:	e7f3      	b.n	800b68c <__ssrefill_r+0x22>

0800b6a4 <__ssvfiscanf_r>:
 800b6a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6a8:	460c      	mov	r4, r1
 800b6aa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b6ae:	2100      	movs	r1, #0
 800b6b0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b6b4:	49a6      	ldr	r1, [pc, #664]	; (800b950 <__ssvfiscanf_r+0x2ac>)
 800b6b6:	91a0      	str	r1, [sp, #640]	; 0x280
 800b6b8:	f10d 0804 	add.w	r8, sp, #4
 800b6bc:	49a5      	ldr	r1, [pc, #660]	; (800b954 <__ssvfiscanf_r+0x2b0>)
 800b6be:	4fa6      	ldr	r7, [pc, #664]	; (800b958 <__ssvfiscanf_r+0x2b4>)
 800b6c0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b95c <__ssvfiscanf_r+0x2b8>
 800b6c4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b6c8:	4606      	mov	r6, r0
 800b6ca:	91a1      	str	r1, [sp, #644]	; 0x284
 800b6cc:	9300      	str	r3, [sp, #0]
 800b6ce:	7813      	ldrb	r3, [r2, #0]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	f000 815a 	beq.w	800b98a <__ssvfiscanf_r+0x2e6>
 800b6d6:	5dd9      	ldrb	r1, [r3, r7]
 800b6d8:	f011 0108 	ands.w	r1, r1, #8
 800b6dc:	f102 0501 	add.w	r5, r2, #1
 800b6e0:	d019      	beq.n	800b716 <__ssvfiscanf_r+0x72>
 800b6e2:	6863      	ldr	r3, [r4, #4]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	dd0f      	ble.n	800b708 <__ssvfiscanf_r+0x64>
 800b6e8:	6823      	ldr	r3, [r4, #0]
 800b6ea:	781a      	ldrb	r2, [r3, #0]
 800b6ec:	5cba      	ldrb	r2, [r7, r2]
 800b6ee:	0712      	lsls	r2, r2, #28
 800b6f0:	d401      	bmi.n	800b6f6 <__ssvfiscanf_r+0x52>
 800b6f2:	462a      	mov	r2, r5
 800b6f4:	e7eb      	b.n	800b6ce <__ssvfiscanf_r+0x2a>
 800b6f6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b6f8:	3201      	adds	r2, #1
 800b6fa:	9245      	str	r2, [sp, #276]	; 0x114
 800b6fc:	6862      	ldr	r2, [r4, #4]
 800b6fe:	3301      	adds	r3, #1
 800b700:	3a01      	subs	r2, #1
 800b702:	6062      	str	r2, [r4, #4]
 800b704:	6023      	str	r3, [r4, #0]
 800b706:	e7ec      	b.n	800b6e2 <__ssvfiscanf_r+0x3e>
 800b708:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b70a:	4621      	mov	r1, r4
 800b70c:	4630      	mov	r0, r6
 800b70e:	4798      	blx	r3
 800b710:	2800      	cmp	r0, #0
 800b712:	d0e9      	beq.n	800b6e8 <__ssvfiscanf_r+0x44>
 800b714:	e7ed      	b.n	800b6f2 <__ssvfiscanf_r+0x4e>
 800b716:	2b25      	cmp	r3, #37	; 0x25
 800b718:	d012      	beq.n	800b740 <__ssvfiscanf_r+0x9c>
 800b71a:	469a      	mov	sl, r3
 800b71c:	6863      	ldr	r3, [r4, #4]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	f340 8091 	ble.w	800b846 <__ssvfiscanf_r+0x1a2>
 800b724:	6822      	ldr	r2, [r4, #0]
 800b726:	7813      	ldrb	r3, [r2, #0]
 800b728:	4553      	cmp	r3, sl
 800b72a:	f040 812e 	bne.w	800b98a <__ssvfiscanf_r+0x2e6>
 800b72e:	6863      	ldr	r3, [r4, #4]
 800b730:	3b01      	subs	r3, #1
 800b732:	6063      	str	r3, [r4, #4]
 800b734:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b736:	3201      	adds	r2, #1
 800b738:	3301      	adds	r3, #1
 800b73a:	6022      	str	r2, [r4, #0]
 800b73c:	9345      	str	r3, [sp, #276]	; 0x114
 800b73e:	e7d8      	b.n	800b6f2 <__ssvfiscanf_r+0x4e>
 800b740:	9141      	str	r1, [sp, #260]	; 0x104
 800b742:	9143      	str	r1, [sp, #268]	; 0x10c
 800b744:	7853      	ldrb	r3, [r2, #1]
 800b746:	2b2a      	cmp	r3, #42	; 0x2a
 800b748:	bf02      	ittt	eq
 800b74a:	2310      	moveq	r3, #16
 800b74c:	1c95      	addeq	r5, r2, #2
 800b74e:	9341      	streq	r3, [sp, #260]	; 0x104
 800b750:	220a      	movs	r2, #10
 800b752:	46aa      	mov	sl, r5
 800b754:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b758:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b75c:	2b09      	cmp	r3, #9
 800b75e:	d91d      	bls.n	800b79c <__ssvfiscanf_r+0xf8>
 800b760:	487e      	ldr	r0, [pc, #504]	; (800b95c <__ssvfiscanf_r+0x2b8>)
 800b762:	2203      	movs	r2, #3
 800b764:	f7f4 fd3c 	bl	80001e0 <memchr>
 800b768:	b140      	cbz	r0, 800b77c <__ssvfiscanf_r+0xd8>
 800b76a:	2301      	movs	r3, #1
 800b76c:	eba0 0009 	sub.w	r0, r0, r9
 800b770:	fa03 f000 	lsl.w	r0, r3, r0
 800b774:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b776:	4318      	orrs	r0, r3
 800b778:	9041      	str	r0, [sp, #260]	; 0x104
 800b77a:	4655      	mov	r5, sl
 800b77c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b780:	2b78      	cmp	r3, #120	; 0x78
 800b782:	d806      	bhi.n	800b792 <__ssvfiscanf_r+0xee>
 800b784:	2b57      	cmp	r3, #87	; 0x57
 800b786:	d810      	bhi.n	800b7aa <__ssvfiscanf_r+0x106>
 800b788:	2b25      	cmp	r3, #37	; 0x25
 800b78a:	d0c6      	beq.n	800b71a <__ssvfiscanf_r+0x76>
 800b78c:	d856      	bhi.n	800b83c <__ssvfiscanf_r+0x198>
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d064      	beq.n	800b85c <__ssvfiscanf_r+0x1b8>
 800b792:	2303      	movs	r3, #3
 800b794:	9347      	str	r3, [sp, #284]	; 0x11c
 800b796:	230a      	movs	r3, #10
 800b798:	9342      	str	r3, [sp, #264]	; 0x108
 800b79a:	e071      	b.n	800b880 <__ssvfiscanf_r+0x1dc>
 800b79c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b79e:	fb02 1103 	mla	r1, r2, r3, r1
 800b7a2:	3930      	subs	r1, #48	; 0x30
 800b7a4:	9143      	str	r1, [sp, #268]	; 0x10c
 800b7a6:	4655      	mov	r5, sl
 800b7a8:	e7d3      	b.n	800b752 <__ssvfiscanf_r+0xae>
 800b7aa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b7ae:	2a20      	cmp	r2, #32
 800b7b0:	d8ef      	bhi.n	800b792 <__ssvfiscanf_r+0xee>
 800b7b2:	a101      	add	r1, pc, #4	; (adr r1, 800b7b8 <__ssvfiscanf_r+0x114>)
 800b7b4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b7b8:	0800b86b 	.word	0x0800b86b
 800b7bc:	0800b793 	.word	0x0800b793
 800b7c0:	0800b793 	.word	0x0800b793
 800b7c4:	0800b8c9 	.word	0x0800b8c9
 800b7c8:	0800b793 	.word	0x0800b793
 800b7cc:	0800b793 	.word	0x0800b793
 800b7d0:	0800b793 	.word	0x0800b793
 800b7d4:	0800b793 	.word	0x0800b793
 800b7d8:	0800b793 	.word	0x0800b793
 800b7dc:	0800b793 	.word	0x0800b793
 800b7e0:	0800b793 	.word	0x0800b793
 800b7e4:	0800b8df 	.word	0x0800b8df
 800b7e8:	0800b8b5 	.word	0x0800b8b5
 800b7ec:	0800b843 	.word	0x0800b843
 800b7f0:	0800b843 	.word	0x0800b843
 800b7f4:	0800b843 	.word	0x0800b843
 800b7f8:	0800b793 	.word	0x0800b793
 800b7fc:	0800b8b9 	.word	0x0800b8b9
 800b800:	0800b793 	.word	0x0800b793
 800b804:	0800b793 	.word	0x0800b793
 800b808:	0800b793 	.word	0x0800b793
 800b80c:	0800b793 	.word	0x0800b793
 800b810:	0800b8ef 	.word	0x0800b8ef
 800b814:	0800b8c1 	.word	0x0800b8c1
 800b818:	0800b863 	.word	0x0800b863
 800b81c:	0800b793 	.word	0x0800b793
 800b820:	0800b793 	.word	0x0800b793
 800b824:	0800b8eb 	.word	0x0800b8eb
 800b828:	0800b793 	.word	0x0800b793
 800b82c:	0800b8b5 	.word	0x0800b8b5
 800b830:	0800b793 	.word	0x0800b793
 800b834:	0800b793 	.word	0x0800b793
 800b838:	0800b86b 	.word	0x0800b86b
 800b83c:	3b45      	subs	r3, #69	; 0x45
 800b83e:	2b02      	cmp	r3, #2
 800b840:	d8a7      	bhi.n	800b792 <__ssvfiscanf_r+0xee>
 800b842:	2305      	movs	r3, #5
 800b844:	e01b      	b.n	800b87e <__ssvfiscanf_r+0x1da>
 800b846:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b848:	4621      	mov	r1, r4
 800b84a:	4630      	mov	r0, r6
 800b84c:	4798      	blx	r3
 800b84e:	2800      	cmp	r0, #0
 800b850:	f43f af68 	beq.w	800b724 <__ssvfiscanf_r+0x80>
 800b854:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b856:	2800      	cmp	r0, #0
 800b858:	f040 808d 	bne.w	800b976 <__ssvfiscanf_r+0x2d2>
 800b85c:	f04f 30ff 	mov.w	r0, #4294967295
 800b860:	e08f      	b.n	800b982 <__ssvfiscanf_r+0x2de>
 800b862:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b864:	f042 0220 	orr.w	r2, r2, #32
 800b868:	9241      	str	r2, [sp, #260]	; 0x104
 800b86a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b86c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b870:	9241      	str	r2, [sp, #260]	; 0x104
 800b872:	2210      	movs	r2, #16
 800b874:	2b6f      	cmp	r3, #111	; 0x6f
 800b876:	9242      	str	r2, [sp, #264]	; 0x108
 800b878:	bf34      	ite	cc
 800b87a:	2303      	movcc	r3, #3
 800b87c:	2304      	movcs	r3, #4
 800b87e:	9347      	str	r3, [sp, #284]	; 0x11c
 800b880:	6863      	ldr	r3, [r4, #4]
 800b882:	2b00      	cmp	r3, #0
 800b884:	dd42      	ble.n	800b90c <__ssvfiscanf_r+0x268>
 800b886:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b888:	0659      	lsls	r1, r3, #25
 800b88a:	d404      	bmi.n	800b896 <__ssvfiscanf_r+0x1f2>
 800b88c:	6823      	ldr	r3, [r4, #0]
 800b88e:	781a      	ldrb	r2, [r3, #0]
 800b890:	5cba      	ldrb	r2, [r7, r2]
 800b892:	0712      	lsls	r2, r2, #28
 800b894:	d441      	bmi.n	800b91a <__ssvfiscanf_r+0x276>
 800b896:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b898:	2b02      	cmp	r3, #2
 800b89a:	dc50      	bgt.n	800b93e <__ssvfiscanf_r+0x29a>
 800b89c:	466b      	mov	r3, sp
 800b89e:	4622      	mov	r2, r4
 800b8a0:	a941      	add	r1, sp, #260	; 0x104
 800b8a2:	4630      	mov	r0, r6
 800b8a4:	f000 f876 	bl	800b994 <_scanf_chars>
 800b8a8:	2801      	cmp	r0, #1
 800b8aa:	d06e      	beq.n	800b98a <__ssvfiscanf_r+0x2e6>
 800b8ac:	2802      	cmp	r0, #2
 800b8ae:	f47f af20 	bne.w	800b6f2 <__ssvfiscanf_r+0x4e>
 800b8b2:	e7cf      	b.n	800b854 <__ssvfiscanf_r+0x1b0>
 800b8b4:	220a      	movs	r2, #10
 800b8b6:	e7dd      	b.n	800b874 <__ssvfiscanf_r+0x1d0>
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	9342      	str	r3, [sp, #264]	; 0x108
 800b8bc:	2303      	movs	r3, #3
 800b8be:	e7de      	b.n	800b87e <__ssvfiscanf_r+0x1da>
 800b8c0:	2308      	movs	r3, #8
 800b8c2:	9342      	str	r3, [sp, #264]	; 0x108
 800b8c4:	2304      	movs	r3, #4
 800b8c6:	e7da      	b.n	800b87e <__ssvfiscanf_r+0x1da>
 800b8c8:	4629      	mov	r1, r5
 800b8ca:	4640      	mov	r0, r8
 800b8cc:	f000 f9e0 	bl	800bc90 <__sccl>
 800b8d0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b8d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8d6:	9341      	str	r3, [sp, #260]	; 0x104
 800b8d8:	4605      	mov	r5, r0
 800b8da:	2301      	movs	r3, #1
 800b8dc:	e7cf      	b.n	800b87e <__ssvfiscanf_r+0x1da>
 800b8de:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b8e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8e4:	9341      	str	r3, [sp, #260]	; 0x104
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	e7c9      	b.n	800b87e <__ssvfiscanf_r+0x1da>
 800b8ea:	2302      	movs	r3, #2
 800b8ec:	e7c7      	b.n	800b87e <__ssvfiscanf_r+0x1da>
 800b8ee:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b8f0:	06c3      	lsls	r3, r0, #27
 800b8f2:	f53f aefe 	bmi.w	800b6f2 <__ssvfiscanf_r+0x4e>
 800b8f6:	9b00      	ldr	r3, [sp, #0]
 800b8f8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b8fa:	1d19      	adds	r1, r3, #4
 800b8fc:	9100      	str	r1, [sp, #0]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f010 0f01 	tst.w	r0, #1
 800b904:	bf14      	ite	ne
 800b906:	801a      	strhne	r2, [r3, #0]
 800b908:	601a      	streq	r2, [r3, #0]
 800b90a:	e6f2      	b.n	800b6f2 <__ssvfiscanf_r+0x4e>
 800b90c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b90e:	4621      	mov	r1, r4
 800b910:	4630      	mov	r0, r6
 800b912:	4798      	blx	r3
 800b914:	2800      	cmp	r0, #0
 800b916:	d0b6      	beq.n	800b886 <__ssvfiscanf_r+0x1e2>
 800b918:	e79c      	b.n	800b854 <__ssvfiscanf_r+0x1b0>
 800b91a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b91c:	3201      	adds	r2, #1
 800b91e:	9245      	str	r2, [sp, #276]	; 0x114
 800b920:	6862      	ldr	r2, [r4, #4]
 800b922:	3a01      	subs	r2, #1
 800b924:	2a00      	cmp	r2, #0
 800b926:	6062      	str	r2, [r4, #4]
 800b928:	dd02      	ble.n	800b930 <__ssvfiscanf_r+0x28c>
 800b92a:	3301      	adds	r3, #1
 800b92c:	6023      	str	r3, [r4, #0]
 800b92e:	e7ad      	b.n	800b88c <__ssvfiscanf_r+0x1e8>
 800b930:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b932:	4621      	mov	r1, r4
 800b934:	4630      	mov	r0, r6
 800b936:	4798      	blx	r3
 800b938:	2800      	cmp	r0, #0
 800b93a:	d0a7      	beq.n	800b88c <__ssvfiscanf_r+0x1e8>
 800b93c:	e78a      	b.n	800b854 <__ssvfiscanf_r+0x1b0>
 800b93e:	2b04      	cmp	r3, #4
 800b940:	dc0e      	bgt.n	800b960 <__ssvfiscanf_r+0x2bc>
 800b942:	466b      	mov	r3, sp
 800b944:	4622      	mov	r2, r4
 800b946:	a941      	add	r1, sp, #260	; 0x104
 800b948:	4630      	mov	r0, r6
 800b94a:	f000 f87d 	bl	800ba48 <_scanf_i>
 800b94e:	e7ab      	b.n	800b8a8 <__ssvfiscanf_r+0x204>
 800b950:	0800b5f1 	.word	0x0800b5f1
 800b954:	0800b66b 	.word	0x0800b66b
 800b958:	0800ca31 	.word	0x0800ca31
 800b95c:	0800cd9a 	.word	0x0800cd9a
 800b960:	4b0b      	ldr	r3, [pc, #44]	; (800b990 <__ssvfiscanf_r+0x2ec>)
 800b962:	2b00      	cmp	r3, #0
 800b964:	f43f aec5 	beq.w	800b6f2 <__ssvfiscanf_r+0x4e>
 800b968:	466b      	mov	r3, sp
 800b96a:	4622      	mov	r2, r4
 800b96c:	a941      	add	r1, sp, #260	; 0x104
 800b96e:	4630      	mov	r0, r6
 800b970:	f7fc fb66 	bl	8008040 <_scanf_float>
 800b974:	e798      	b.n	800b8a8 <__ssvfiscanf_r+0x204>
 800b976:	89a3      	ldrh	r3, [r4, #12]
 800b978:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b97c:	bf18      	it	ne
 800b97e:	f04f 30ff 	movne.w	r0, #4294967295
 800b982:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b98a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b98c:	e7f9      	b.n	800b982 <__ssvfiscanf_r+0x2de>
 800b98e:	bf00      	nop
 800b990:	08008041 	.word	0x08008041

0800b994 <_scanf_chars>:
 800b994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b998:	4615      	mov	r5, r2
 800b99a:	688a      	ldr	r2, [r1, #8]
 800b99c:	4680      	mov	r8, r0
 800b99e:	460c      	mov	r4, r1
 800b9a0:	b932      	cbnz	r2, 800b9b0 <_scanf_chars+0x1c>
 800b9a2:	698a      	ldr	r2, [r1, #24]
 800b9a4:	2a00      	cmp	r2, #0
 800b9a6:	bf0c      	ite	eq
 800b9a8:	2201      	moveq	r2, #1
 800b9aa:	f04f 32ff 	movne.w	r2, #4294967295
 800b9ae:	608a      	str	r2, [r1, #8]
 800b9b0:	6822      	ldr	r2, [r4, #0]
 800b9b2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800ba44 <_scanf_chars+0xb0>
 800b9b6:	06d1      	lsls	r1, r2, #27
 800b9b8:	bf5f      	itttt	pl
 800b9ba:	681a      	ldrpl	r2, [r3, #0]
 800b9bc:	1d11      	addpl	r1, r2, #4
 800b9be:	6019      	strpl	r1, [r3, #0]
 800b9c0:	6816      	ldrpl	r6, [r2, #0]
 800b9c2:	2700      	movs	r7, #0
 800b9c4:	69a0      	ldr	r0, [r4, #24]
 800b9c6:	b188      	cbz	r0, 800b9ec <_scanf_chars+0x58>
 800b9c8:	2801      	cmp	r0, #1
 800b9ca:	d107      	bne.n	800b9dc <_scanf_chars+0x48>
 800b9cc:	682a      	ldr	r2, [r5, #0]
 800b9ce:	7811      	ldrb	r1, [r2, #0]
 800b9d0:	6962      	ldr	r2, [r4, #20]
 800b9d2:	5c52      	ldrb	r2, [r2, r1]
 800b9d4:	b952      	cbnz	r2, 800b9ec <_scanf_chars+0x58>
 800b9d6:	2f00      	cmp	r7, #0
 800b9d8:	d031      	beq.n	800ba3e <_scanf_chars+0xaa>
 800b9da:	e022      	b.n	800ba22 <_scanf_chars+0x8e>
 800b9dc:	2802      	cmp	r0, #2
 800b9de:	d120      	bne.n	800ba22 <_scanf_chars+0x8e>
 800b9e0:	682b      	ldr	r3, [r5, #0]
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b9e8:	071b      	lsls	r3, r3, #28
 800b9ea:	d41a      	bmi.n	800ba22 <_scanf_chars+0x8e>
 800b9ec:	6823      	ldr	r3, [r4, #0]
 800b9ee:	06da      	lsls	r2, r3, #27
 800b9f0:	bf5e      	ittt	pl
 800b9f2:	682b      	ldrpl	r3, [r5, #0]
 800b9f4:	781b      	ldrbpl	r3, [r3, #0]
 800b9f6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b9fa:	682a      	ldr	r2, [r5, #0]
 800b9fc:	686b      	ldr	r3, [r5, #4]
 800b9fe:	3201      	adds	r2, #1
 800ba00:	602a      	str	r2, [r5, #0]
 800ba02:	68a2      	ldr	r2, [r4, #8]
 800ba04:	3b01      	subs	r3, #1
 800ba06:	3a01      	subs	r2, #1
 800ba08:	606b      	str	r3, [r5, #4]
 800ba0a:	3701      	adds	r7, #1
 800ba0c:	60a2      	str	r2, [r4, #8]
 800ba0e:	b142      	cbz	r2, 800ba22 <_scanf_chars+0x8e>
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	dcd7      	bgt.n	800b9c4 <_scanf_chars+0x30>
 800ba14:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ba18:	4629      	mov	r1, r5
 800ba1a:	4640      	mov	r0, r8
 800ba1c:	4798      	blx	r3
 800ba1e:	2800      	cmp	r0, #0
 800ba20:	d0d0      	beq.n	800b9c4 <_scanf_chars+0x30>
 800ba22:	6823      	ldr	r3, [r4, #0]
 800ba24:	f013 0310 	ands.w	r3, r3, #16
 800ba28:	d105      	bne.n	800ba36 <_scanf_chars+0xa2>
 800ba2a:	68e2      	ldr	r2, [r4, #12]
 800ba2c:	3201      	adds	r2, #1
 800ba2e:	60e2      	str	r2, [r4, #12]
 800ba30:	69a2      	ldr	r2, [r4, #24]
 800ba32:	b102      	cbz	r2, 800ba36 <_scanf_chars+0xa2>
 800ba34:	7033      	strb	r3, [r6, #0]
 800ba36:	6923      	ldr	r3, [r4, #16]
 800ba38:	443b      	add	r3, r7
 800ba3a:	6123      	str	r3, [r4, #16]
 800ba3c:	2000      	movs	r0, #0
 800ba3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba42:	bf00      	nop
 800ba44:	0800ca31 	.word	0x0800ca31

0800ba48 <_scanf_i>:
 800ba48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba4c:	4698      	mov	r8, r3
 800ba4e:	4b76      	ldr	r3, [pc, #472]	; (800bc28 <_scanf_i+0x1e0>)
 800ba50:	460c      	mov	r4, r1
 800ba52:	4682      	mov	sl, r0
 800ba54:	4616      	mov	r6, r2
 800ba56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ba5a:	b087      	sub	sp, #28
 800ba5c:	ab03      	add	r3, sp, #12
 800ba5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ba62:	4b72      	ldr	r3, [pc, #456]	; (800bc2c <_scanf_i+0x1e4>)
 800ba64:	69a1      	ldr	r1, [r4, #24]
 800ba66:	4a72      	ldr	r2, [pc, #456]	; (800bc30 <_scanf_i+0x1e8>)
 800ba68:	2903      	cmp	r1, #3
 800ba6a:	bf18      	it	ne
 800ba6c:	461a      	movne	r2, r3
 800ba6e:	68a3      	ldr	r3, [r4, #8]
 800ba70:	9201      	str	r2, [sp, #4]
 800ba72:	1e5a      	subs	r2, r3, #1
 800ba74:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ba78:	bf88      	it	hi
 800ba7a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ba7e:	4627      	mov	r7, r4
 800ba80:	bf82      	ittt	hi
 800ba82:	eb03 0905 	addhi.w	r9, r3, r5
 800ba86:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ba8a:	60a3      	strhi	r3, [r4, #8]
 800ba8c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ba90:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ba94:	bf98      	it	ls
 800ba96:	f04f 0900 	movls.w	r9, #0
 800ba9a:	6023      	str	r3, [r4, #0]
 800ba9c:	463d      	mov	r5, r7
 800ba9e:	f04f 0b00 	mov.w	fp, #0
 800baa2:	6831      	ldr	r1, [r6, #0]
 800baa4:	ab03      	add	r3, sp, #12
 800baa6:	7809      	ldrb	r1, [r1, #0]
 800baa8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800baac:	2202      	movs	r2, #2
 800baae:	f7f4 fb97 	bl	80001e0 <memchr>
 800bab2:	b328      	cbz	r0, 800bb00 <_scanf_i+0xb8>
 800bab4:	f1bb 0f01 	cmp.w	fp, #1
 800bab8:	d159      	bne.n	800bb6e <_scanf_i+0x126>
 800baba:	6862      	ldr	r2, [r4, #4]
 800babc:	b92a      	cbnz	r2, 800baca <_scanf_i+0x82>
 800babe:	6822      	ldr	r2, [r4, #0]
 800bac0:	2308      	movs	r3, #8
 800bac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bac6:	6063      	str	r3, [r4, #4]
 800bac8:	6022      	str	r2, [r4, #0]
 800baca:	6822      	ldr	r2, [r4, #0]
 800bacc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800bad0:	6022      	str	r2, [r4, #0]
 800bad2:	68a2      	ldr	r2, [r4, #8]
 800bad4:	1e51      	subs	r1, r2, #1
 800bad6:	60a1      	str	r1, [r4, #8]
 800bad8:	b192      	cbz	r2, 800bb00 <_scanf_i+0xb8>
 800bada:	6832      	ldr	r2, [r6, #0]
 800badc:	1c51      	adds	r1, r2, #1
 800bade:	6031      	str	r1, [r6, #0]
 800bae0:	7812      	ldrb	r2, [r2, #0]
 800bae2:	f805 2b01 	strb.w	r2, [r5], #1
 800bae6:	6872      	ldr	r2, [r6, #4]
 800bae8:	3a01      	subs	r2, #1
 800baea:	2a00      	cmp	r2, #0
 800baec:	6072      	str	r2, [r6, #4]
 800baee:	dc07      	bgt.n	800bb00 <_scanf_i+0xb8>
 800baf0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800baf4:	4631      	mov	r1, r6
 800baf6:	4650      	mov	r0, sl
 800baf8:	4790      	blx	r2
 800bafa:	2800      	cmp	r0, #0
 800bafc:	f040 8085 	bne.w	800bc0a <_scanf_i+0x1c2>
 800bb00:	f10b 0b01 	add.w	fp, fp, #1
 800bb04:	f1bb 0f03 	cmp.w	fp, #3
 800bb08:	d1cb      	bne.n	800baa2 <_scanf_i+0x5a>
 800bb0a:	6863      	ldr	r3, [r4, #4]
 800bb0c:	b90b      	cbnz	r3, 800bb12 <_scanf_i+0xca>
 800bb0e:	230a      	movs	r3, #10
 800bb10:	6063      	str	r3, [r4, #4]
 800bb12:	6863      	ldr	r3, [r4, #4]
 800bb14:	4947      	ldr	r1, [pc, #284]	; (800bc34 <_scanf_i+0x1ec>)
 800bb16:	6960      	ldr	r0, [r4, #20]
 800bb18:	1ac9      	subs	r1, r1, r3
 800bb1a:	f000 f8b9 	bl	800bc90 <__sccl>
 800bb1e:	f04f 0b00 	mov.w	fp, #0
 800bb22:	68a3      	ldr	r3, [r4, #8]
 800bb24:	6822      	ldr	r2, [r4, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d03d      	beq.n	800bba6 <_scanf_i+0x15e>
 800bb2a:	6831      	ldr	r1, [r6, #0]
 800bb2c:	6960      	ldr	r0, [r4, #20]
 800bb2e:	f891 c000 	ldrb.w	ip, [r1]
 800bb32:	f810 000c 	ldrb.w	r0, [r0, ip]
 800bb36:	2800      	cmp	r0, #0
 800bb38:	d035      	beq.n	800bba6 <_scanf_i+0x15e>
 800bb3a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800bb3e:	d124      	bne.n	800bb8a <_scanf_i+0x142>
 800bb40:	0510      	lsls	r0, r2, #20
 800bb42:	d522      	bpl.n	800bb8a <_scanf_i+0x142>
 800bb44:	f10b 0b01 	add.w	fp, fp, #1
 800bb48:	f1b9 0f00 	cmp.w	r9, #0
 800bb4c:	d003      	beq.n	800bb56 <_scanf_i+0x10e>
 800bb4e:	3301      	adds	r3, #1
 800bb50:	f109 39ff 	add.w	r9, r9, #4294967295
 800bb54:	60a3      	str	r3, [r4, #8]
 800bb56:	6873      	ldr	r3, [r6, #4]
 800bb58:	3b01      	subs	r3, #1
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	6073      	str	r3, [r6, #4]
 800bb5e:	dd1b      	ble.n	800bb98 <_scanf_i+0x150>
 800bb60:	6833      	ldr	r3, [r6, #0]
 800bb62:	3301      	adds	r3, #1
 800bb64:	6033      	str	r3, [r6, #0]
 800bb66:	68a3      	ldr	r3, [r4, #8]
 800bb68:	3b01      	subs	r3, #1
 800bb6a:	60a3      	str	r3, [r4, #8]
 800bb6c:	e7d9      	b.n	800bb22 <_scanf_i+0xda>
 800bb6e:	f1bb 0f02 	cmp.w	fp, #2
 800bb72:	d1ae      	bne.n	800bad2 <_scanf_i+0x8a>
 800bb74:	6822      	ldr	r2, [r4, #0]
 800bb76:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800bb7a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bb7e:	d1bf      	bne.n	800bb00 <_scanf_i+0xb8>
 800bb80:	2310      	movs	r3, #16
 800bb82:	6063      	str	r3, [r4, #4]
 800bb84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb88:	e7a2      	b.n	800bad0 <_scanf_i+0x88>
 800bb8a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800bb8e:	6022      	str	r2, [r4, #0]
 800bb90:	780b      	ldrb	r3, [r1, #0]
 800bb92:	f805 3b01 	strb.w	r3, [r5], #1
 800bb96:	e7de      	b.n	800bb56 <_scanf_i+0x10e>
 800bb98:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bb9c:	4631      	mov	r1, r6
 800bb9e:	4650      	mov	r0, sl
 800bba0:	4798      	blx	r3
 800bba2:	2800      	cmp	r0, #0
 800bba4:	d0df      	beq.n	800bb66 <_scanf_i+0x11e>
 800bba6:	6823      	ldr	r3, [r4, #0]
 800bba8:	05db      	lsls	r3, r3, #23
 800bbaa:	d50d      	bpl.n	800bbc8 <_scanf_i+0x180>
 800bbac:	42bd      	cmp	r5, r7
 800bbae:	d909      	bls.n	800bbc4 <_scanf_i+0x17c>
 800bbb0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bbb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bbb8:	4632      	mov	r2, r6
 800bbba:	4650      	mov	r0, sl
 800bbbc:	4798      	blx	r3
 800bbbe:	f105 39ff 	add.w	r9, r5, #4294967295
 800bbc2:	464d      	mov	r5, r9
 800bbc4:	42bd      	cmp	r5, r7
 800bbc6:	d02d      	beq.n	800bc24 <_scanf_i+0x1dc>
 800bbc8:	6822      	ldr	r2, [r4, #0]
 800bbca:	f012 0210 	ands.w	r2, r2, #16
 800bbce:	d113      	bne.n	800bbf8 <_scanf_i+0x1b0>
 800bbd0:	702a      	strb	r2, [r5, #0]
 800bbd2:	6863      	ldr	r3, [r4, #4]
 800bbd4:	9e01      	ldr	r6, [sp, #4]
 800bbd6:	4639      	mov	r1, r7
 800bbd8:	4650      	mov	r0, sl
 800bbda:	47b0      	blx	r6
 800bbdc:	6821      	ldr	r1, [r4, #0]
 800bbde:	f8d8 3000 	ldr.w	r3, [r8]
 800bbe2:	f011 0f20 	tst.w	r1, #32
 800bbe6:	d013      	beq.n	800bc10 <_scanf_i+0x1c8>
 800bbe8:	1d1a      	adds	r2, r3, #4
 800bbea:	f8c8 2000 	str.w	r2, [r8]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	6018      	str	r0, [r3, #0]
 800bbf2:	68e3      	ldr	r3, [r4, #12]
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	60e3      	str	r3, [r4, #12]
 800bbf8:	1bed      	subs	r5, r5, r7
 800bbfa:	44ab      	add	fp, r5
 800bbfc:	6925      	ldr	r5, [r4, #16]
 800bbfe:	445d      	add	r5, fp
 800bc00:	6125      	str	r5, [r4, #16]
 800bc02:	2000      	movs	r0, #0
 800bc04:	b007      	add	sp, #28
 800bc06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc0a:	f04f 0b00 	mov.w	fp, #0
 800bc0e:	e7ca      	b.n	800bba6 <_scanf_i+0x15e>
 800bc10:	1d1a      	adds	r2, r3, #4
 800bc12:	f8c8 2000 	str.w	r2, [r8]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f011 0f01 	tst.w	r1, #1
 800bc1c:	bf14      	ite	ne
 800bc1e:	8018      	strhne	r0, [r3, #0]
 800bc20:	6018      	streq	r0, [r3, #0]
 800bc22:	e7e6      	b.n	800bbf2 <_scanf_i+0x1aa>
 800bc24:	2001      	movs	r0, #1
 800bc26:	e7ed      	b.n	800bc04 <_scanf_i+0x1bc>
 800bc28:	0800c974 	.word	0x0800c974
 800bc2c:	0800be0d 	.word	0x0800be0d
 800bc30:	0800932d 	.word	0x0800932d
 800bc34:	0800cdbe 	.word	0x0800cdbe

0800bc38 <_read_r>:
 800bc38:	b538      	push	{r3, r4, r5, lr}
 800bc3a:	4d07      	ldr	r5, [pc, #28]	; (800bc58 <_read_r+0x20>)
 800bc3c:	4604      	mov	r4, r0
 800bc3e:	4608      	mov	r0, r1
 800bc40:	4611      	mov	r1, r2
 800bc42:	2200      	movs	r2, #0
 800bc44:	602a      	str	r2, [r5, #0]
 800bc46:	461a      	mov	r2, r3
 800bc48:	f7f6 ff04 	bl	8002a54 <_read>
 800bc4c:	1c43      	adds	r3, r0, #1
 800bc4e:	d102      	bne.n	800bc56 <_read_r+0x1e>
 800bc50:	682b      	ldr	r3, [r5, #0]
 800bc52:	b103      	cbz	r3, 800bc56 <_read_r+0x1e>
 800bc54:	6023      	str	r3, [r4, #0]
 800bc56:	bd38      	pop	{r3, r4, r5, pc}
 800bc58:	200008ec 	.word	0x200008ec
 800bc5c:	00000000 	.word	0x00000000

0800bc60 <nan>:
 800bc60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bc68 <nan+0x8>
 800bc64:	4770      	bx	lr
 800bc66:	bf00      	nop
 800bc68:	00000000 	.word	0x00000000
 800bc6c:	7ff80000 	.word	0x7ff80000

0800bc70 <_sbrk_r>:
 800bc70:	b538      	push	{r3, r4, r5, lr}
 800bc72:	4d06      	ldr	r5, [pc, #24]	; (800bc8c <_sbrk_r+0x1c>)
 800bc74:	2300      	movs	r3, #0
 800bc76:	4604      	mov	r4, r0
 800bc78:	4608      	mov	r0, r1
 800bc7a:	602b      	str	r3, [r5, #0]
 800bc7c:	f7f6 ff58 	bl	8002b30 <_sbrk>
 800bc80:	1c43      	adds	r3, r0, #1
 800bc82:	d102      	bne.n	800bc8a <_sbrk_r+0x1a>
 800bc84:	682b      	ldr	r3, [r5, #0]
 800bc86:	b103      	cbz	r3, 800bc8a <_sbrk_r+0x1a>
 800bc88:	6023      	str	r3, [r4, #0]
 800bc8a:	bd38      	pop	{r3, r4, r5, pc}
 800bc8c:	200008ec 	.word	0x200008ec

0800bc90 <__sccl>:
 800bc90:	b570      	push	{r4, r5, r6, lr}
 800bc92:	780b      	ldrb	r3, [r1, #0]
 800bc94:	4604      	mov	r4, r0
 800bc96:	2b5e      	cmp	r3, #94	; 0x5e
 800bc98:	bf0b      	itete	eq
 800bc9a:	784b      	ldrbeq	r3, [r1, #1]
 800bc9c:	1c48      	addne	r0, r1, #1
 800bc9e:	1c88      	addeq	r0, r1, #2
 800bca0:	2200      	movne	r2, #0
 800bca2:	bf08      	it	eq
 800bca4:	2201      	moveq	r2, #1
 800bca6:	1e61      	subs	r1, r4, #1
 800bca8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800bcac:	f801 2f01 	strb.w	r2, [r1, #1]!
 800bcb0:	42a9      	cmp	r1, r5
 800bcb2:	d1fb      	bne.n	800bcac <__sccl+0x1c>
 800bcb4:	b90b      	cbnz	r3, 800bcba <__sccl+0x2a>
 800bcb6:	3801      	subs	r0, #1
 800bcb8:	bd70      	pop	{r4, r5, r6, pc}
 800bcba:	f082 0201 	eor.w	r2, r2, #1
 800bcbe:	54e2      	strb	r2, [r4, r3]
 800bcc0:	4605      	mov	r5, r0
 800bcc2:	4628      	mov	r0, r5
 800bcc4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800bcc8:	292d      	cmp	r1, #45	; 0x2d
 800bcca:	d006      	beq.n	800bcda <__sccl+0x4a>
 800bccc:	295d      	cmp	r1, #93	; 0x5d
 800bcce:	d0f3      	beq.n	800bcb8 <__sccl+0x28>
 800bcd0:	b909      	cbnz	r1, 800bcd6 <__sccl+0x46>
 800bcd2:	4628      	mov	r0, r5
 800bcd4:	e7f0      	b.n	800bcb8 <__sccl+0x28>
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	e7f1      	b.n	800bcbe <__sccl+0x2e>
 800bcda:	786e      	ldrb	r6, [r5, #1]
 800bcdc:	2e5d      	cmp	r6, #93	; 0x5d
 800bcde:	d0fa      	beq.n	800bcd6 <__sccl+0x46>
 800bce0:	42b3      	cmp	r3, r6
 800bce2:	dcf8      	bgt.n	800bcd6 <__sccl+0x46>
 800bce4:	3502      	adds	r5, #2
 800bce6:	4619      	mov	r1, r3
 800bce8:	3101      	adds	r1, #1
 800bcea:	428e      	cmp	r6, r1
 800bcec:	5462      	strb	r2, [r4, r1]
 800bcee:	dcfb      	bgt.n	800bce8 <__sccl+0x58>
 800bcf0:	1af1      	subs	r1, r6, r3
 800bcf2:	3901      	subs	r1, #1
 800bcf4:	1c58      	adds	r0, r3, #1
 800bcf6:	42b3      	cmp	r3, r6
 800bcf8:	bfa8      	it	ge
 800bcfa:	2100      	movge	r1, #0
 800bcfc:	1843      	adds	r3, r0, r1
 800bcfe:	e7e0      	b.n	800bcc2 <__sccl+0x32>

0800bd00 <strncmp>:
 800bd00:	b510      	push	{r4, lr}
 800bd02:	b17a      	cbz	r2, 800bd24 <strncmp+0x24>
 800bd04:	4603      	mov	r3, r0
 800bd06:	3901      	subs	r1, #1
 800bd08:	1884      	adds	r4, r0, r2
 800bd0a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bd0e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bd12:	4290      	cmp	r0, r2
 800bd14:	d101      	bne.n	800bd1a <strncmp+0x1a>
 800bd16:	42a3      	cmp	r3, r4
 800bd18:	d101      	bne.n	800bd1e <strncmp+0x1e>
 800bd1a:	1a80      	subs	r0, r0, r2
 800bd1c:	bd10      	pop	{r4, pc}
 800bd1e:	2800      	cmp	r0, #0
 800bd20:	d1f3      	bne.n	800bd0a <strncmp+0xa>
 800bd22:	e7fa      	b.n	800bd1a <strncmp+0x1a>
 800bd24:	4610      	mov	r0, r2
 800bd26:	e7f9      	b.n	800bd1c <strncmp+0x1c>

0800bd28 <_strtoul_l.constprop.0>:
 800bd28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd2c:	4f36      	ldr	r7, [pc, #216]	; (800be08 <_strtoul_l.constprop.0+0xe0>)
 800bd2e:	4686      	mov	lr, r0
 800bd30:	460d      	mov	r5, r1
 800bd32:	4628      	mov	r0, r5
 800bd34:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd38:	5de6      	ldrb	r6, [r4, r7]
 800bd3a:	f016 0608 	ands.w	r6, r6, #8
 800bd3e:	d1f8      	bne.n	800bd32 <_strtoul_l.constprop.0+0xa>
 800bd40:	2c2d      	cmp	r4, #45	; 0x2d
 800bd42:	d12f      	bne.n	800bda4 <_strtoul_l.constprop.0+0x7c>
 800bd44:	782c      	ldrb	r4, [r5, #0]
 800bd46:	2601      	movs	r6, #1
 800bd48:	1c85      	adds	r5, r0, #2
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d057      	beq.n	800bdfe <_strtoul_l.constprop.0+0xd6>
 800bd4e:	2b10      	cmp	r3, #16
 800bd50:	d109      	bne.n	800bd66 <_strtoul_l.constprop.0+0x3e>
 800bd52:	2c30      	cmp	r4, #48	; 0x30
 800bd54:	d107      	bne.n	800bd66 <_strtoul_l.constprop.0+0x3e>
 800bd56:	7828      	ldrb	r0, [r5, #0]
 800bd58:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800bd5c:	2858      	cmp	r0, #88	; 0x58
 800bd5e:	d149      	bne.n	800bdf4 <_strtoul_l.constprop.0+0xcc>
 800bd60:	786c      	ldrb	r4, [r5, #1]
 800bd62:	2310      	movs	r3, #16
 800bd64:	3502      	adds	r5, #2
 800bd66:	f04f 38ff 	mov.w	r8, #4294967295
 800bd6a:	2700      	movs	r7, #0
 800bd6c:	fbb8 f8f3 	udiv	r8, r8, r3
 800bd70:	fb03 f908 	mul.w	r9, r3, r8
 800bd74:	ea6f 0909 	mvn.w	r9, r9
 800bd78:	4638      	mov	r0, r7
 800bd7a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bd7e:	f1bc 0f09 	cmp.w	ip, #9
 800bd82:	d814      	bhi.n	800bdae <_strtoul_l.constprop.0+0x86>
 800bd84:	4664      	mov	r4, ip
 800bd86:	42a3      	cmp	r3, r4
 800bd88:	dd22      	ble.n	800bdd0 <_strtoul_l.constprop.0+0xa8>
 800bd8a:	2f00      	cmp	r7, #0
 800bd8c:	db1d      	blt.n	800bdca <_strtoul_l.constprop.0+0xa2>
 800bd8e:	4580      	cmp	r8, r0
 800bd90:	d31b      	bcc.n	800bdca <_strtoul_l.constprop.0+0xa2>
 800bd92:	d101      	bne.n	800bd98 <_strtoul_l.constprop.0+0x70>
 800bd94:	45a1      	cmp	r9, r4
 800bd96:	db18      	blt.n	800bdca <_strtoul_l.constprop.0+0xa2>
 800bd98:	fb00 4003 	mla	r0, r0, r3, r4
 800bd9c:	2701      	movs	r7, #1
 800bd9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bda2:	e7ea      	b.n	800bd7a <_strtoul_l.constprop.0+0x52>
 800bda4:	2c2b      	cmp	r4, #43	; 0x2b
 800bda6:	bf04      	itt	eq
 800bda8:	782c      	ldrbeq	r4, [r5, #0]
 800bdaa:	1c85      	addeq	r5, r0, #2
 800bdac:	e7cd      	b.n	800bd4a <_strtoul_l.constprop.0+0x22>
 800bdae:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bdb2:	f1bc 0f19 	cmp.w	ip, #25
 800bdb6:	d801      	bhi.n	800bdbc <_strtoul_l.constprop.0+0x94>
 800bdb8:	3c37      	subs	r4, #55	; 0x37
 800bdba:	e7e4      	b.n	800bd86 <_strtoul_l.constprop.0+0x5e>
 800bdbc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bdc0:	f1bc 0f19 	cmp.w	ip, #25
 800bdc4:	d804      	bhi.n	800bdd0 <_strtoul_l.constprop.0+0xa8>
 800bdc6:	3c57      	subs	r4, #87	; 0x57
 800bdc8:	e7dd      	b.n	800bd86 <_strtoul_l.constprop.0+0x5e>
 800bdca:	f04f 37ff 	mov.w	r7, #4294967295
 800bdce:	e7e6      	b.n	800bd9e <_strtoul_l.constprop.0+0x76>
 800bdd0:	2f00      	cmp	r7, #0
 800bdd2:	da07      	bge.n	800bde4 <_strtoul_l.constprop.0+0xbc>
 800bdd4:	2322      	movs	r3, #34	; 0x22
 800bdd6:	f8ce 3000 	str.w	r3, [lr]
 800bdda:	f04f 30ff 	mov.w	r0, #4294967295
 800bdde:	b932      	cbnz	r2, 800bdee <_strtoul_l.constprop.0+0xc6>
 800bde0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bde4:	b106      	cbz	r6, 800bde8 <_strtoul_l.constprop.0+0xc0>
 800bde6:	4240      	negs	r0, r0
 800bde8:	2a00      	cmp	r2, #0
 800bdea:	d0f9      	beq.n	800bde0 <_strtoul_l.constprop.0+0xb8>
 800bdec:	b107      	cbz	r7, 800bdf0 <_strtoul_l.constprop.0+0xc8>
 800bdee:	1e69      	subs	r1, r5, #1
 800bdf0:	6011      	str	r1, [r2, #0]
 800bdf2:	e7f5      	b.n	800bde0 <_strtoul_l.constprop.0+0xb8>
 800bdf4:	2430      	movs	r4, #48	; 0x30
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d1b5      	bne.n	800bd66 <_strtoul_l.constprop.0+0x3e>
 800bdfa:	2308      	movs	r3, #8
 800bdfc:	e7b3      	b.n	800bd66 <_strtoul_l.constprop.0+0x3e>
 800bdfe:	2c30      	cmp	r4, #48	; 0x30
 800be00:	d0a9      	beq.n	800bd56 <_strtoul_l.constprop.0+0x2e>
 800be02:	230a      	movs	r3, #10
 800be04:	e7af      	b.n	800bd66 <_strtoul_l.constprop.0+0x3e>
 800be06:	bf00      	nop
 800be08:	0800ca31 	.word	0x0800ca31

0800be0c <_strtoul_r>:
 800be0c:	f7ff bf8c 	b.w	800bd28 <_strtoul_l.constprop.0>

0800be10 <__submore>:
 800be10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be14:	460c      	mov	r4, r1
 800be16:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800be18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be1c:	4299      	cmp	r1, r3
 800be1e:	d11d      	bne.n	800be5c <__submore+0x4c>
 800be20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800be24:	f7ff fa14 	bl	800b250 <_malloc_r>
 800be28:	b918      	cbnz	r0, 800be32 <__submore+0x22>
 800be2a:	f04f 30ff 	mov.w	r0, #4294967295
 800be2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be36:	63a3      	str	r3, [r4, #56]	; 0x38
 800be38:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800be3c:	6360      	str	r0, [r4, #52]	; 0x34
 800be3e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800be42:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800be46:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800be4a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800be4e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800be52:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800be56:	6020      	str	r0, [r4, #0]
 800be58:	2000      	movs	r0, #0
 800be5a:	e7e8      	b.n	800be2e <__submore+0x1e>
 800be5c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800be5e:	0077      	lsls	r7, r6, #1
 800be60:	463a      	mov	r2, r7
 800be62:	f000 fa2d 	bl	800c2c0 <_realloc_r>
 800be66:	4605      	mov	r5, r0
 800be68:	2800      	cmp	r0, #0
 800be6a:	d0de      	beq.n	800be2a <__submore+0x1a>
 800be6c:	eb00 0806 	add.w	r8, r0, r6
 800be70:	4601      	mov	r1, r0
 800be72:	4632      	mov	r2, r6
 800be74:	4640      	mov	r0, r8
 800be76:	f7fe fc99 	bl	800a7ac <memcpy>
 800be7a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800be7e:	f8c4 8000 	str.w	r8, [r4]
 800be82:	e7e9      	b.n	800be58 <__submore+0x48>

0800be84 <__ascii_wctomb>:
 800be84:	b149      	cbz	r1, 800be9a <__ascii_wctomb+0x16>
 800be86:	2aff      	cmp	r2, #255	; 0xff
 800be88:	bf85      	ittet	hi
 800be8a:	238a      	movhi	r3, #138	; 0x8a
 800be8c:	6003      	strhi	r3, [r0, #0]
 800be8e:	700a      	strbls	r2, [r1, #0]
 800be90:	f04f 30ff 	movhi.w	r0, #4294967295
 800be94:	bf98      	it	ls
 800be96:	2001      	movls	r0, #1
 800be98:	4770      	bx	lr
 800be9a:	4608      	mov	r0, r1
 800be9c:	4770      	bx	lr
	...

0800bea0 <__assert_func>:
 800bea0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bea2:	4614      	mov	r4, r2
 800bea4:	461a      	mov	r2, r3
 800bea6:	4b09      	ldr	r3, [pc, #36]	; (800becc <__assert_func+0x2c>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4605      	mov	r5, r0
 800beac:	68d8      	ldr	r0, [r3, #12]
 800beae:	b14c      	cbz	r4, 800bec4 <__assert_func+0x24>
 800beb0:	4b07      	ldr	r3, [pc, #28]	; (800bed0 <__assert_func+0x30>)
 800beb2:	9100      	str	r1, [sp, #0]
 800beb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800beb8:	4906      	ldr	r1, [pc, #24]	; (800bed4 <__assert_func+0x34>)
 800beba:	462b      	mov	r3, r5
 800bebc:	f000 f9a6 	bl	800c20c <fiprintf>
 800bec0:	f000 fc46 	bl	800c750 <abort>
 800bec4:	4b04      	ldr	r3, [pc, #16]	; (800bed8 <__assert_func+0x38>)
 800bec6:	461c      	mov	r4, r3
 800bec8:	e7f3      	b.n	800beb2 <__assert_func+0x12>
 800beca:	bf00      	nop
 800becc:	200000ec 	.word	0x200000ec
 800bed0:	0800cdc0 	.word	0x0800cdc0
 800bed4:	0800cdcd 	.word	0x0800cdcd
 800bed8:	0800cdfb 	.word	0x0800cdfb

0800bedc <__sflush_r>:
 800bedc:	898a      	ldrh	r2, [r1, #12]
 800bede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bee2:	4605      	mov	r5, r0
 800bee4:	0710      	lsls	r0, r2, #28
 800bee6:	460c      	mov	r4, r1
 800bee8:	d458      	bmi.n	800bf9c <__sflush_r+0xc0>
 800beea:	684b      	ldr	r3, [r1, #4]
 800beec:	2b00      	cmp	r3, #0
 800beee:	dc05      	bgt.n	800befc <__sflush_r+0x20>
 800bef0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	dc02      	bgt.n	800befc <__sflush_r+0x20>
 800bef6:	2000      	movs	r0, #0
 800bef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800befc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800befe:	2e00      	cmp	r6, #0
 800bf00:	d0f9      	beq.n	800bef6 <__sflush_r+0x1a>
 800bf02:	2300      	movs	r3, #0
 800bf04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bf08:	682f      	ldr	r7, [r5, #0]
 800bf0a:	602b      	str	r3, [r5, #0]
 800bf0c:	d032      	beq.n	800bf74 <__sflush_r+0x98>
 800bf0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf10:	89a3      	ldrh	r3, [r4, #12]
 800bf12:	075a      	lsls	r2, r3, #29
 800bf14:	d505      	bpl.n	800bf22 <__sflush_r+0x46>
 800bf16:	6863      	ldr	r3, [r4, #4]
 800bf18:	1ac0      	subs	r0, r0, r3
 800bf1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf1c:	b10b      	cbz	r3, 800bf22 <__sflush_r+0x46>
 800bf1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf20:	1ac0      	subs	r0, r0, r3
 800bf22:	2300      	movs	r3, #0
 800bf24:	4602      	mov	r2, r0
 800bf26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf28:	6a21      	ldr	r1, [r4, #32]
 800bf2a:	4628      	mov	r0, r5
 800bf2c:	47b0      	blx	r6
 800bf2e:	1c43      	adds	r3, r0, #1
 800bf30:	89a3      	ldrh	r3, [r4, #12]
 800bf32:	d106      	bne.n	800bf42 <__sflush_r+0x66>
 800bf34:	6829      	ldr	r1, [r5, #0]
 800bf36:	291d      	cmp	r1, #29
 800bf38:	d82c      	bhi.n	800bf94 <__sflush_r+0xb8>
 800bf3a:	4a2a      	ldr	r2, [pc, #168]	; (800bfe4 <__sflush_r+0x108>)
 800bf3c:	40ca      	lsrs	r2, r1
 800bf3e:	07d6      	lsls	r6, r2, #31
 800bf40:	d528      	bpl.n	800bf94 <__sflush_r+0xb8>
 800bf42:	2200      	movs	r2, #0
 800bf44:	6062      	str	r2, [r4, #4]
 800bf46:	04d9      	lsls	r1, r3, #19
 800bf48:	6922      	ldr	r2, [r4, #16]
 800bf4a:	6022      	str	r2, [r4, #0]
 800bf4c:	d504      	bpl.n	800bf58 <__sflush_r+0x7c>
 800bf4e:	1c42      	adds	r2, r0, #1
 800bf50:	d101      	bne.n	800bf56 <__sflush_r+0x7a>
 800bf52:	682b      	ldr	r3, [r5, #0]
 800bf54:	b903      	cbnz	r3, 800bf58 <__sflush_r+0x7c>
 800bf56:	6560      	str	r0, [r4, #84]	; 0x54
 800bf58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf5a:	602f      	str	r7, [r5, #0]
 800bf5c:	2900      	cmp	r1, #0
 800bf5e:	d0ca      	beq.n	800bef6 <__sflush_r+0x1a>
 800bf60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf64:	4299      	cmp	r1, r3
 800bf66:	d002      	beq.n	800bf6e <__sflush_r+0x92>
 800bf68:	4628      	mov	r0, r5
 800bf6a:	f7ff f905 	bl	800b178 <_free_r>
 800bf6e:	2000      	movs	r0, #0
 800bf70:	6360      	str	r0, [r4, #52]	; 0x34
 800bf72:	e7c1      	b.n	800bef8 <__sflush_r+0x1c>
 800bf74:	6a21      	ldr	r1, [r4, #32]
 800bf76:	2301      	movs	r3, #1
 800bf78:	4628      	mov	r0, r5
 800bf7a:	47b0      	blx	r6
 800bf7c:	1c41      	adds	r1, r0, #1
 800bf7e:	d1c7      	bne.n	800bf10 <__sflush_r+0x34>
 800bf80:	682b      	ldr	r3, [r5, #0]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d0c4      	beq.n	800bf10 <__sflush_r+0x34>
 800bf86:	2b1d      	cmp	r3, #29
 800bf88:	d001      	beq.n	800bf8e <__sflush_r+0xb2>
 800bf8a:	2b16      	cmp	r3, #22
 800bf8c:	d101      	bne.n	800bf92 <__sflush_r+0xb6>
 800bf8e:	602f      	str	r7, [r5, #0]
 800bf90:	e7b1      	b.n	800bef6 <__sflush_r+0x1a>
 800bf92:	89a3      	ldrh	r3, [r4, #12]
 800bf94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf98:	81a3      	strh	r3, [r4, #12]
 800bf9a:	e7ad      	b.n	800bef8 <__sflush_r+0x1c>
 800bf9c:	690f      	ldr	r7, [r1, #16]
 800bf9e:	2f00      	cmp	r7, #0
 800bfa0:	d0a9      	beq.n	800bef6 <__sflush_r+0x1a>
 800bfa2:	0793      	lsls	r3, r2, #30
 800bfa4:	680e      	ldr	r6, [r1, #0]
 800bfa6:	bf08      	it	eq
 800bfa8:	694b      	ldreq	r3, [r1, #20]
 800bfaa:	600f      	str	r7, [r1, #0]
 800bfac:	bf18      	it	ne
 800bfae:	2300      	movne	r3, #0
 800bfb0:	eba6 0807 	sub.w	r8, r6, r7
 800bfb4:	608b      	str	r3, [r1, #8]
 800bfb6:	f1b8 0f00 	cmp.w	r8, #0
 800bfba:	dd9c      	ble.n	800bef6 <__sflush_r+0x1a>
 800bfbc:	6a21      	ldr	r1, [r4, #32]
 800bfbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bfc0:	4643      	mov	r3, r8
 800bfc2:	463a      	mov	r2, r7
 800bfc4:	4628      	mov	r0, r5
 800bfc6:	47b0      	blx	r6
 800bfc8:	2800      	cmp	r0, #0
 800bfca:	dc06      	bgt.n	800bfda <__sflush_r+0xfe>
 800bfcc:	89a3      	ldrh	r3, [r4, #12]
 800bfce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfd2:	81a3      	strh	r3, [r4, #12]
 800bfd4:	f04f 30ff 	mov.w	r0, #4294967295
 800bfd8:	e78e      	b.n	800bef8 <__sflush_r+0x1c>
 800bfda:	4407      	add	r7, r0
 800bfdc:	eba8 0800 	sub.w	r8, r8, r0
 800bfe0:	e7e9      	b.n	800bfb6 <__sflush_r+0xda>
 800bfe2:	bf00      	nop
 800bfe4:	20400001 	.word	0x20400001

0800bfe8 <_fflush_r>:
 800bfe8:	b538      	push	{r3, r4, r5, lr}
 800bfea:	690b      	ldr	r3, [r1, #16]
 800bfec:	4605      	mov	r5, r0
 800bfee:	460c      	mov	r4, r1
 800bff0:	b913      	cbnz	r3, 800bff8 <_fflush_r+0x10>
 800bff2:	2500      	movs	r5, #0
 800bff4:	4628      	mov	r0, r5
 800bff6:	bd38      	pop	{r3, r4, r5, pc}
 800bff8:	b118      	cbz	r0, 800c002 <_fflush_r+0x1a>
 800bffa:	6983      	ldr	r3, [r0, #24]
 800bffc:	b90b      	cbnz	r3, 800c002 <_fflush_r+0x1a>
 800bffe:	f000 f887 	bl	800c110 <__sinit>
 800c002:	4b14      	ldr	r3, [pc, #80]	; (800c054 <_fflush_r+0x6c>)
 800c004:	429c      	cmp	r4, r3
 800c006:	d11b      	bne.n	800c040 <_fflush_r+0x58>
 800c008:	686c      	ldr	r4, [r5, #4]
 800c00a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d0ef      	beq.n	800bff2 <_fflush_r+0xa>
 800c012:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c014:	07d0      	lsls	r0, r2, #31
 800c016:	d404      	bmi.n	800c022 <_fflush_r+0x3a>
 800c018:	0599      	lsls	r1, r3, #22
 800c01a:	d402      	bmi.n	800c022 <_fflush_r+0x3a>
 800c01c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c01e:	f000 f927 	bl	800c270 <__retarget_lock_acquire_recursive>
 800c022:	4628      	mov	r0, r5
 800c024:	4621      	mov	r1, r4
 800c026:	f7ff ff59 	bl	800bedc <__sflush_r>
 800c02a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c02c:	07da      	lsls	r2, r3, #31
 800c02e:	4605      	mov	r5, r0
 800c030:	d4e0      	bmi.n	800bff4 <_fflush_r+0xc>
 800c032:	89a3      	ldrh	r3, [r4, #12]
 800c034:	059b      	lsls	r3, r3, #22
 800c036:	d4dd      	bmi.n	800bff4 <_fflush_r+0xc>
 800c038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c03a:	f000 f91a 	bl	800c272 <__retarget_lock_release_recursive>
 800c03e:	e7d9      	b.n	800bff4 <_fflush_r+0xc>
 800c040:	4b05      	ldr	r3, [pc, #20]	; (800c058 <_fflush_r+0x70>)
 800c042:	429c      	cmp	r4, r3
 800c044:	d101      	bne.n	800c04a <_fflush_r+0x62>
 800c046:	68ac      	ldr	r4, [r5, #8]
 800c048:	e7df      	b.n	800c00a <_fflush_r+0x22>
 800c04a:	4b04      	ldr	r3, [pc, #16]	; (800c05c <_fflush_r+0x74>)
 800c04c:	429c      	cmp	r4, r3
 800c04e:	bf08      	it	eq
 800c050:	68ec      	ldreq	r4, [r5, #12]
 800c052:	e7da      	b.n	800c00a <_fflush_r+0x22>
 800c054:	0800ce1c 	.word	0x0800ce1c
 800c058:	0800ce3c 	.word	0x0800ce3c
 800c05c:	0800cdfc 	.word	0x0800cdfc

0800c060 <std>:
 800c060:	2300      	movs	r3, #0
 800c062:	b510      	push	{r4, lr}
 800c064:	4604      	mov	r4, r0
 800c066:	e9c0 3300 	strd	r3, r3, [r0]
 800c06a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c06e:	6083      	str	r3, [r0, #8]
 800c070:	8181      	strh	r1, [r0, #12]
 800c072:	6643      	str	r3, [r0, #100]	; 0x64
 800c074:	81c2      	strh	r2, [r0, #14]
 800c076:	6183      	str	r3, [r0, #24]
 800c078:	4619      	mov	r1, r3
 800c07a:	2208      	movs	r2, #8
 800c07c:	305c      	adds	r0, #92	; 0x5c
 800c07e:	f7fb fb6d 	bl	800775c <memset>
 800c082:	4b05      	ldr	r3, [pc, #20]	; (800c098 <std+0x38>)
 800c084:	6263      	str	r3, [r4, #36]	; 0x24
 800c086:	4b05      	ldr	r3, [pc, #20]	; (800c09c <std+0x3c>)
 800c088:	62a3      	str	r3, [r4, #40]	; 0x28
 800c08a:	4b05      	ldr	r3, [pc, #20]	; (800c0a0 <std+0x40>)
 800c08c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c08e:	4b05      	ldr	r3, [pc, #20]	; (800c0a4 <std+0x44>)
 800c090:	6224      	str	r4, [r4, #32]
 800c092:	6323      	str	r3, [r4, #48]	; 0x30
 800c094:	bd10      	pop	{r4, pc}
 800c096:	bf00      	nop
 800c098:	08008505 	.word	0x08008505
 800c09c:	0800852b 	.word	0x0800852b
 800c0a0:	08008563 	.word	0x08008563
 800c0a4:	08008587 	.word	0x08008587

0800c0a8 <_cleanup_r>:
 800c0a8:	4901      	ldr	r1, [pc, #4]	; (800c0b0 <_cleanup_r+0x8>)
 800c0aa:	f000 b8c1 	b.w	800c230 <_fwalk_reent>
 800c0ae:	bf00      	nop
 800c0b0:	0800bfe9 	.word	0x0800bfe9

0800c0b4 <__sfmoreglue>:
 800c0b4:	b570      	push	{r4, r5, r6, lr}
 800c0b6:	2268      	movs	r2, #104	; 0x68
 800c0b8:	1e4d      	subs	r5, r1, #1
 800c0ba:	4355      	muls	r5, r2
 800c0bc:	460e      	mov	r6, r1
 800c0be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c0c2:	f7ff f8c5 	bl	800b250 <_malloc_r>
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	b140      	cbz	r0, 800c0dc <__sfmoreglue+0x28>
 800c0ca:	2100      	movs	r1, #0
 800c0cc:	e9c0 1600 	strd	r1, r6, [r0]
 800c0d0:	300c      	adds	r0, #12
 800c0d2:	60a0      	str	r0, [r4, #8]
 800c0d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c0d8:	f7fb fb40 	bl	800775c <memset>
 800c0dc:	4620      	mov	r0, r4
 800c0de:	bd70      	pop	{r4, r5, r6, pc}

0800c0e0 <__sfp_lock_acquire>:
 800c0e0:	4801      	ldr	r0, [pc, #4]	; (800c0e8 <__sfp_lock_acquire+0x8>)
 800c0e2:	f000 b8c5 	b.w	800c270 <__retarget_lock_acquire_recursive>
 800c0e6:	bf00      	nop
 800c0e8:	200008f1 	.word	0x200008f1

0800c0ec <__sfp_lock_release>:
 800c0ec:	4801      	ldr	r0, [pc, #4]	; (800c0f4 <__sfp_lock_release+0x8>)
 800c0ee:	f000 b8c0 	b.w	800c272 <__retarget_lock_release_recursive>
 800c0f2:	bf00      	nop
 800c0f4:	200008f1 	.word	0x200008f1

0800c0f8 <__sinit_lock_acquire>:
 800c0f8:	4801      	ldr	r0, [pc, #4]	; (800c100 <__sinit_lock_acquire+0x8>)
 800c0fa:	f000 b8b9 	b.w	800c270 <__retarget_lock_acquire_recursive>
 800c0fe:	bf00      	nop
 800c100:	200008f2 	.word	0x200008f2

0800c104 <__sinit_lock_release>:
 800c104:	4801      	ldr	r0, [pc, #4]	; (800c10c <__sinit_lock_release+0x8>)
 800c106:	f000 b8b4 	b.w	800c272 <__retarget_lock_release_recursive>
 800c10a:	bf00      	nop
 800c10c:	200008f2 	.word	0x200008f2

0800c110 <__sinit>:
 800c110:	b510      	push	{r4, lr}
 800c112:	4604      	mov	r4, r0
 800c114:	f7ff fff0 	bl	800c0f8 <__sinit_lock_acquire>
 800c118:	69a3      	ldr	r3, [r4, #24]
 800c11a:	b11b      	cbz	r3, 800c124 <__sinit+0x14>
 800c11c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c120:	f7ff bff0 	b.w	800c104 <__sinit_lock_release>
 800c124:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c128:	6523      	str	r3, [r4, #80]	; 0x50
 800c12a:	4b13      	ldr	r3, [pc, #76]	; (800c178 <__sinit+0x68>)
 800c12c:	4a13      	ldr	r2, [pc, #76]	; (800c17c <__sinit+0x6c>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	62a2      	str	r2, [r4, #40]	; 0x28
 800c132:	42a3      	cmp	r3, r4
 800c134:	bf04      	itt	eq
 800c136:	2301      	moveq	r3, #1
 800c138:	61a3      	streq	r3, [r4, #24]
 800c13a:	4620      	mov	r0, r4
 800c13c:	f000 f820 	bl	800c180 <__sfp>
 800c140:	6060      	str	r0, [r4, #4]
 800c142:	4620      	mov	r0, r4
 800c144:	f000 f81c 	bl	800c180 <__sfp>
 800c148:	60a0      	str	r0, [r4, #8]
 800c14a:	4620      	mov	r0, r4
 800c14c:	f000 f818 	bl	800c180 <__sfp>
 800c150:	2200      	movs	r2, #0
 800c152:	60e0      	str	r0, [r4, #12]
 800c154:	2104      	movs	r1, #4
 800c156:	6860      	ldr	r0, [r4, #4]
 800c158:	f7ff ff82 	bl	800c060 <std>
 800c15c:	68a0      	ldr	r0, [r4, #8]
 800c15e:	2201      	movs	r2, #1
 800c160:	2109      	movs	r1, #9
 800c162:	f7ff ff7d 	bl	800c060 <std>
 800c166:	68e0      	ldr	r0, [r4, #12]
 800c168:	2202      	movs	r2, #2
 800c16a:	2112      	movs	r1, #18
 800c16c:	f7ff ff78 	bl	800c060 <std>
 800c170:	2301      	movs	r3, #1
 800c172:	61a3      	str	r3, [r4, #24]
 800c174:	e7d2      	b.n	800c11c <__sinit+0xc>
 800c176:	bf00      	nop
 800c178:	0800c9a0 	.word	0x0800c9a0
 800c17c:	0800c0a9 	.word	0x0800c0a9

0800c180 <__sfp>:
 800c180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c182:	4607      	mov	r7, r0
 800c184:	f7ff ffac 	bl	800c0e0 <__sfp_lock_acquire>
 800c188:	4b1e      	ldr	r3, [pc, #120]	; (800c204 <__sfp+0x84>)
 800c18a:	681e      	ldr	r6, [r3, #0]
 800c18c:	69b3      	ldr	r3, [r6, #24]
 800c18e:	b913      	cbnz	r3, 800c196 <__sfp+0x16>
 800c190:	4630      	mov	r0, r6
 800c192:	f7ff ffbd 	bl	800c110 <__sinit>
 800c196:	3648      	adds	r6, #72	; 0x48
 800c198:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c19c:	3b01      	subs	r3, #1
 800c19e:	d503      	bpl.n	800c1a8 <__sfp+0x28>
 800c1a0:	6833      	ldr	r3, [r6, #0]
 800c1a2:	b30b      	cbz	r3, 800c1e8 <__sfp+0x68>
 800c1a4:	6836      	ldr	r6, [r6, #0]
 800c1a6:	e7f7      	b.n	800c198 <__sfp+0x18>
 800c1a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c1ac:	b9d5      	cbnz	r5, 800c1e4 <__sfp+0x64>
 800c1ae:	4b16      	ldr	r3, [pc, #88]	; (800c208 <__sfp+0x88>)
 800c1b0:	60e3      	str	r3, [r4, #12]
 800c1b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c1b6:	6665      	str	r5, [r4, #100]	; 0x64
 800c1b8:	f000 f859 	bl	800c26e <__retarget_lock_init_recursive>
 800c1bc:	f7ff ff96 	bl	800c0ec <__sfp_lock_release>
 800c1c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c1c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c1c8:	6025      	str	r5, [r4, #0]
 800c1ca:	61a5      	str	r5, [r4, #24]
 800c1cc:	2208      	movs	r2, #8
 800c1ce:	4629      	mov	r1, r5
 800c1d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c1d4:	f7fb fac2 	bl	800775c <memset>
 800c1d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c1dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c1e0:	4620      	mov	r0, r4
 800c1e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1e4:	3468      	adds	r4, #104	; 0x68
 800c1e6:	e7d9      	b.n	800c19c <__sfp+0x1c>
 800c1e8:	2104      	movs	r1, #4
 800c1ea:	4638      	mov	r0, r7
 800c1ec:	f7ff ff62 	bl	800c0b4 <__sfmoreglue>
 800c1f0:	4604      	mov	r4, r0
 800c1f2:	6030      	str	r0, [r6, #0]
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	d1d5      	bne.n	800c1a4 <__sfp+0x24>
 800c1f8:	f7ff ff78 	bl	800c0ec <__sfp_lock_release>
 800c1fc:	230c      	movs	r3, #12
 800c1fe:	603b      	str	r3, [r7, #0]
 800c200:	e7ee      	b.n	800c1e0 <__sfp+0x60>
 800c202:	bf00      	nop
 800c204:	0800c9a0 	.word	0x0800c9a0
 800c208:	ffff0001 	.word	0xffff0001

0800c20c <fiprintf>:
 800c20c:	b40e      	push	{r1, r2, r3}
 800c20e:	b503      	push	{r0, r1, lr}
 800c210:	4601      	mov	r1, r0
 800c212:	ab03      	add	r3, sp, #12
 800c214:	4805      	ldr	r0, [pc, #20]	; (800c22c <fiprintf+0x20>)
 800c216:	f853 2b04 	ldr.w	r2, [r3], #4
 800c21a:	6800      	ldr	r0, [r0, #0]
 800c21c:	9301      	str	r3, [sp, #4]
 800c21e:	f000 f8a7 	bl	800c370 <_vfiprintf_r>
 800c222:	b002      	add	sp, #8
 800c224:	f85d eb04 	ldr.w	lr, [sp], #4
 800c228:	b003      	add	sp, #12
 800c22a:	4770      	bx	lr
 800c22c:	200000ec 	.word	0x200000ec

0800c230 <_fwalk_reent>:
 800c230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c234:	4606      	mov	r6, r0
 800c236:	4688      	mov	r8, r1
 800c238:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c23c:	2700      	movs	r7, #0
 800c23e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c242:	f1b9 0901 	subs.w	r9, r9, #1
 800c246:	d505      	bpl.n	800c254 <_fwalk_reent+0x24>
 800c248:	6824      	ldr	r4, [r4, #0]
 800c24a:	2c00      	cmp	r4, #0
 800c24c:	d1f7      	bne.n	800c23e <_fwalk_reent+0xe>
 800c24e:	4638      	mov	r0, r7
 800c250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c254:	89ab      	ldrh	r3, [r5, #12]
 800c256:	2b01      	cmp	r3, #1
 800c258:	d907      	bls.n	800c26a <_fwalk_reent+0x3a>
 800c25a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c25e:	3301      	adds	r3, #1
 800c260:	d003      	beq.n	800c26a <_fwalk_reent+0x3a>
 800c262:	4629      	mov	r1, r5
 800c264:	4630      	mov	r0, r6
 800c266:	47c0      	blx	r8
 800c268:	4307      	orrs	r7, r0
 800c26a:	3568      	adds	r5, #104	; 0x68
 800c26c:	e7e9      	b.n	800c242 <_fwalk_reent+0x12>

0800c26e <__retarget_lock_init_recursive>:
 800c26e:	4770      	bx	lr

0800c270 <__retarget_lock_acquire_recursive>:
 800c270:	4770      	bx	lr

0800c272 <__retarget_lock_release_recursive>:
 800c272:	4770      	bx	lr

0800c274 <memmove>:
 800c274:	4288      	cmp	r0, r1
 800c276:	b510      	push	{r4, lr}
 800c278:	eb01 0402 	add.w	r4, r1, r2
 800c27c:	d902      	bls.n	800c284 <memmove+0x10>
 800c27e:	4284      	cmp	r4, r0
 800c280:	4623      	mov	r3, r4
 800c282:	d807      	bhi.n	800c294 <memmove+0x20>
 800c284:	1e43      	subs	r3, r0, #1
 800c286:	42a1      	cmp	r1, r4
 800c288:	d008      	beq.n	800c29c <memmove+0x28>
 800c28a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c28e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c292:	e7f8      	b.n	800c286 <memmove+0x12>
 800c294:	4402      	add	r2, r0
 800c296:	4601      	mov	r1, r0
 800c298:	428a      	cmp	r2, r1
 800c29a:	d100      	bne.n	800c29e <memmove+0x2a>
 800c29c:	bd10      	pop	{r4, pc}
 800c29e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c2a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c2a6:	e7f7      	b.n	800c298 <memmove+0x24>

0800c2a8 <__malloc_lock>:
 800c2a8:	4801      	ldr	r0, [pc, #4]	; (800c2b0 <__malloc_lock+0x8>)
 800c2aa:	f7ff bfe1 	b.w	800c270 <__retarget_lock_acquire_recursive>
 800c2ae:	bf00      	nop
 800c2b0:	200008f0 	.word	0x200008f0

0800c2b4 <__malloc_unlock>:
 800c2b4:	4801      	ldr	r0, [pc, #4]	; (800c2bc <__malloc_unlock+0x8>)
 800c2b6:	f7ff bfdc 	b.w	800c272 <__retarget_lock_release_recursive>
 800c2ba:	bf00      	nop
 800c2bc:	200008f0 	.word	0x200008f0

0800c2c0 <_realloc_r>:
 800c2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2c4:	4680      	mov	r8, r0
 800c2c6:	4614      	mov	r4, r2
 800c2c8:	460e      	mov	r6, r1
 800c2ca:	b921      	cbnz	r1, 800c2d6 <_realloc_r+0x16>
 800c2cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2d0:	4611      	mov	r1, r2
 800c2d2:	f7fe bfbd 	b.w	800b250 <_malloc_r>
 800c2d6:	b92a      	cbnz	r2, 800c2e4 <_realloc_r+0x24>
 800c2d8:	f7fe ff4e 	bl	800b178 <_free_r>
 800c2dc:	4625      	mov	r5, r4
 800c2de:	4628      	mov	r0, r5
 800c2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2e4:	f000 faa0 	bl	800c828 <_malloc_usable_size_r>
 800c2e8:	4284      	cmp	r4, r0
 800c2ea:	4607      	mov	r7, r0
 800c2ec:	d802      	bhi.n	800c2f4 <_realloc_r+0x34>
 800c2ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c2f2:	d812      	bhi.n	800c31a <_realloc_r+0x5a>
 800c2f4:	4621      	mov	r1, r4
 800c2f6:	4640      	mov	r0, r8
 800c2f8:	f7fe ffaa 	bl	800b250 <_malloc_r>
 800c2fc:	4605      	mov	r5, r0
 800c2fe:	2800      	cmp	r0, #0
 800c300:	d0ed      	beq.n	800c2de <_realloc_r+0x1e>
 800c302:	42bc      	cmp	r4, r7
 800c304:	4622      	mov	r2, r4
 800c306:	4631      	mov	r1, r6
 800c308:	bf28      	it	cs
 800c30a:	463a      	movcs	r2, r7
 800c30c:	f7fe fa4e 	bl	800a7ac <memcpy>
 800c310:	4631      	mov	r1, r6
 800c312:	4640      	mov	r0, r8
 800c314:	f7fe ff30 	bl	800b178 <_free_r>
 800c318:	e7e1      	b.n	800c2de <_realloc_r+0x1e>
 800c31a:	4635      	mov	r5, r6
 800c31c:	e7df      	b.n	800c2de <_realloc_r+0x1e>

0800c31e <__sfputc_r>:
 800c31e:	6893      	ldr	r3, [r2, #8]
 800c320:	3b01      	subs	r3, #1
 800c322:	2b00      	cmp	r3, #0
 800c324:	b410      	push	{r4}
 800c326:	6093      	str	r3, [r2, #8]
 800c328:	da08      	bge.n	800c33c <__sfputc_r+0x1e>
 800c32a:	6994      	ldr	r4, [r2, #24]
 800c32c:	42a3      	cmp	r3, r4
 800c32e:	db01      	blt.n	800c334 <__sfputc_r+0x16>
 800c330:	290a      	cmp	r1, #10
 800c332:	d103      	bne.n	800c33c <__sfputc_r+0x1e>
 800c334:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c338:	f000 b94a 	b.w	800c5d0 <__swbuf_r>
 800c33c:	6813      	ldr	r3, [r2, #0]
 800c33e:	1c58      	adds	r0, r3, #1
 800c340:	6010      	str	r0, [r2, #0]
 800c342:	7019      	strb	r1, [r3, #0]
 800c344:	4608      	mov	r0, r1
 800c346:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c34a:	4770      	bx	lr

0800c34c <__sfputs_r>:
 800c34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c34e:	4606      	mov	r6, r0
 800c350:	460f      	mov	r7, r1
 800c352:	4614      	mov	r4, r2
 800c354:	18d5      	adds	r5, r2, r3
 800c356:	42ac      	cmp	r4, r5
 800c358:	d101      	bne.n	800c35e <__sfputs_r+0x12>
 800c35a:	2000      	movs	r0, #0
 800c35c:	e007      	b.n	800c36e <__sfputs_r+0x22>
 800c35e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c362:	463a      	mov	r2, r7
 800c364:	4630      	mov	r0, r6
 800c366:	f7ff ffda 	bl	800c31e <__sfputc_r>
 800c36a:	1c43      	adds	r3, r0, #1
 800c36c:	d1f3      	bne.n	800c356 <__sfputs_r+0xa>
 800c36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c370 <_vfiprintf_r>:
 800c370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c374:	460d      	mov	r5, r1
 800c376:	b09d      	sub	sp, #116	; 0x74
 800c378:	4614      	mov	r4, r2
 800c37a:	4698      	mov	r8, r3
 800c37c:	4606      	mov	r6, r0
 800c37e:	b118      	cbz	r0, 800c388 <_vfiprintf_r+0x18>
 800c380:	6983      	ldr	r3, [r0, #24]
 800c382:	b90b      	cbnz	r3, 800c388 <_vfiprintf_r+0x18>
 800c384:	f7ff fec4 	bl	800c110 <__sinit>
 800c388:	4b89      	ldr	r3, [pc, #548]	; (800c5b0 <_vfiprintf_r+0x240>)
 800c38a:	429d      	cmp	r5, r3
 800c38c:	d11b      	bne.n	800c3c6 <_vfiprintf_r+0x56>
 800c38e:	6875      	ldr	r5, [r6, #4]
 800c390:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c392:	07d9      	lsls	r1, r3, #31
 800c394:	d405      	bmi.n	800c3a2 <_vfiprintf_r+0x32>
 800c396:	89ab      	ldrh	r3, [r5, #12]
 800c398:	059a      	lsls	r2, r3, #22
 800c39a:	d402      	bmi.n	800c3a2 <_vfiprintf_r+0x32>
 800c39c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c39e:	f7ff ff67 	bl	800c270 <__retarget_lock_acquire_recursive>
 800c3a2:	89ab      	ldrh	r3, [r5, #12]
 800c3a4:	071b      	lsls	r3, r3, #28
 800c3a6:	d501      	bpl.n	800c3ac <_vfiprintf_r+0x3c>
 800c3a8:	692b      	ldr	r3, [r5, #16]
 800c3aa:	b9eb      	cbnz	r3, 800c3e8 <_vfiprintf_r+0x78>
 800c3ac:	4629      	mov	r1, r5
 800c3ae:	4630      	mov	r0, r6
 800c3b0:	f000 f960 	bl	800c674 <__swsetup_r>
 800c3b4:	b1c0      	cbz	r0, 800c3e8 <_vfiprintf_r+0x78>
 800c3b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3b8:	07dc      	lsls	r4, r3, #31
 800c3ba:	d50e      	bpl.n	800c3da <_vfiprintf_r+0x6a>
 800c3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c3c0:	b01d      	add	sp, #116	; 0x74
 800c3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3c6:	4b7b      	ldr	r3, [pc, #492]	; (800c5b4 <_vfiprintf_r+0x244>)
 800c3c8:	429d      	cmp	r5, r3
 800c3ca:	d101      	bne.n	800c3d0 <_vfiprintf_r+0x60>
 800c3cc:	68b5      	ldr	r5, [r6, #8]
 800c3ce:	e7df      	b.n	800c390 <_vfiprintf_r+0x20>
 800c3d0:	4b79      	ldr	r3, [pc, #484]	; (800c5b8 <_vfiprintf_r+0x248>)
 800c3d2:	429d      	cmp	r5, r3
 800c3d4:	bf08      	it	eq
 800c3d6:	68f5      	ldreq	r5, [r6, #12]
 800c3d8:	e7da      	b.n	800c390 <_vfiprintf_r+0x20>
 800c3da:	89ab      	ldrh	r3, [r5, #12]
 800c3dc:	0598      	lsls	r0, r3, #22
 800c3de:	d4ed      	bmi.n	800c3bc <_vfiprintf_r+0x4c>
 800c3e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3e2:	f7ff ff46 	bl	800c272 <__retarget_lock_release_recursive>
 800c3e6:	e7e9      	b.n	800c3bc <_vfiprintf_r+0x4c>
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	9309      	str	r3, [sp, #36]	; 0x24
 800c3ec:	2320      	movs	r3, #32
 800c3ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3f6:	2330      	movs	r3, #48	; 0x30
 800c3f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c5bc <_vfiprintf_r+0x24c>
 800c3fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c400:	f04f 0901 	mov.w	r9, #1
 800c404:	4623      	mov	r3, r4
 800c406:	469a      	mov	sl, r3
 800c408:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c40c:	b10a      	cbz	r2, 800c412 <_vfiprintf_r+0xa2>
 800c40e:	2a25      	cmp	r2, #37	; 0x25
 800c410:	d1f9      	bne.n	800c406 <_vfiprintf_r+0x96>
 800c412:	ebba 0b04 	subs.w	fp, sl, r4
 800c416:	d00b      	beq.n	800c430 <_vfiprintf_r+0xc0>
 800c418:	465b      	mov	r3, fp
 800c41a:	4622      	mov	r2, r4
 800c41c:	4629      	mov	r1, r5
 800c41e:	4630      	mov	r0, r6
 800c420:	f7ff ff94 	bl	800c34c <__sfputs_r>
 800c424:	3001      	adds	r0, #1
 800c426:	f000 80aa 	beq.w	800c57e <_vfiprintf_r+0x20e>
 800c42a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c42c:	445a      	add	r2, fp
 800c42e:	9209      	str	r2, [sp, #36]	; 0x24
 800c430:	f89a 3000 	ldrb.w	r3, [sl]
 800c434:	2b00      	cmp	r3, #0
 800c436:	f000 80a2 	beq.w	800c57e <_vfiprintf_r+0x20e>
 800c43a:	2300      	movs	r3, #0
 800c43c:	f04f 32ff 	mov.w	r2, #4294967295
 800c440:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c444:	f10a 0a01 	add.w	sl, sl, #1
 800c448:	9304      	str	r3, [sp, #16]
 800c44a:	9307      	str	r3, [sp, #28]
 800c44c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c450:	931a      	str	r3, [sp, #104]	; 0x68
 800c452:	4654      	mov	r4, sl
 800c454:	2205      	movs	r2, #5
 800c456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c45a:	4858      	ldr	r0, [pc, #352]	; (800c5bc <_vfiprintf_r+0x24c>)
 800c45c:	f7f3 fec0 	bl	80001e0 <memchr>
 800c460:	9a04      	ldr	r2, [sp, #16]
 800c462:	b9d8      	cbnz	r0, 800c49c <_vfiprintf_r+0x12c>
 800c464:	06d1      	lsls	r1, r2, #27
 800c466:	bf44      	itt	mi
 800c468:	2320      	movmi	r3, #32
 800c46a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c46e:	0713      	lsls	r3, r2, #28
 800c470:	bf44      	itt	mi
 800c472:	232b      	movmi	r3, #43	; 0x2b
 800c474:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c478:	f89a 3000 	ldrb.w	r3, [sl]
 800c47c:	2b2a      	cmp	r3, #42	; 0x2a
 800c47e:	d015      	beq.n	800c4ac <_vfiprintf_r+0x13c>
 800c480:	9a07      	ldr	r2, [sp, #28]
 800c482:	4654      	mov	r4, sl
 800c484:	2000      	movs	r0, #0
 800c486:	f04f 0c0a 	mov.w	ip, #10
 800c48a:	4621      	mov	r1, r4
 800c48c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c490:	3b30      	subs	r3, #48	; 0x30
 800c492:	2b09      	cmp	r3, #9
 800c494:	d94e      	bls.n	800c534 <_vfiprintf_r+0x1c4>
 800c496:	b1b0      	cbz	r0, 800c4c6 <_vfiprintf_r+0x156>
 800c498:	9207      	str	r2, [sp, #28]
 800c49a:	e014      	b.n	800c4c6 <_vfiprintf_r+0x156>
 800c49c:	eba0 0308 	sub.w	r3, r0, r8
 800c4a0:	fa09 f303 	lsl.w	r3, r9, r3
 800c4a4:	4313      	orrs	r3, r2
 800c4a6:	9304      	str	r3, [sp, #16]
 800c4a8:	46a2      	mov	sl, r4
 800c4aa:	e7d2      	b.n	800c452 <_vfiprintf_r+0xe2>
 800c4ac:	9b03      	ldr	r3, [sp, #12]
 800c4ae:	1d19      	adds	r1, r3, #4
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	9103      	str	r1, [sp, #12]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	bfbb      	ittet	lt
 800c4b8:	425b      	neglt	r3, r3
 800c4ba:	f042 0202 	orrlt.w	r2, r2, #2
 800c4be:	9307      	strge	r3, [sp, #28]
 800c4c0:	9307      	strlt	r3, [sp, #28]
 800c4c2:	bfb8      	it	lt
 800c4c4:	9204      	strlt	r2, [sp, #16]
 800c4c6:	7823      	ldrb	r3, [r4, #0]
 800c4c8:	2b2e      	cmp	r3, #46	; 0x2e
 800c4ca:	d10c      	bne.n	800c4e6 <_vfiprintf_r+0x176>
 800c4cc:	7863      	ldrb	r3, [r4, #1]
 800c4ce:	2b2a      	cmp	r3, #42	; 0x2a
 800c4d0:	d135      	bne.n	800c53e <_vfiprintf_r+0x1ce>
 800c4d2:	9b03      	ldr	r3, [sp, #12]
 800c4d4:	1d1a      	adds	r2, r3, #4
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	9203      	str	r2, [sp, #12]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	bfb8      	it	lt
 800c4de:	f04f 33ff 	movlt.w	r3, #4294967295
 800c4e2:	3402      	adds	r4, #2
 800c4e4:	9305      	str	r3, [sp, #20]
 800c4e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c5cc <_vfiprintf_r+0x25c>
 800c4ea:	7821      	ldrb	r1, [r4, #0]
 800c4ec:	2203      	movs	r2, #3
 800c4ee:	4650      	mov	r0, sl
 800c4f0:	f7f3 fe76 	bl	80001e0 <memchr>
 800c4f4:	b140      	cbz	r0, 800c508 <_vfiprintf_r+0x198>
 800c4f6:	2340      	movs	r3, #64	; 0x40
 800c4f8:	eba0 000a 	sub.w	r0, r0, sl
 800c4fc:	fa03 f000 	lsl.w	r0, r3, r0
 800c500:	9b04      	ldr	r3, [sp, #16]
 800c502:	4303      	orrs	r3, r0
 800c504:	3401      	adds	r4, #1
 800c506:	9304      	str	r3, [sp, #16]
 800c508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c50c:	482c      	ldr	r0, [pc, #176]	; (800c5c0 <_vfiprintf_r+0x250>)
 800c50e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c512:	2206      	movs	r2, #6
 800c514:	f7f3 fe64 	bl	80001e0 <memchr>
 800c518:	2800      	cmp	r0, #0
 800c51a:	d03f      	beq.n	800c59c <_vfiprintf_r+0x22c>
 800c51c:	4b29      	ldr	r3, [pc, #164]	; (800c5c4 <_vfiprintf_r+0x254>)
 800c51e:	bb1b      	cbnz	r3, 800c568 <_vfiprintf_r+0x1f8>
 800c520:	9b03      	ldr	r3, [sp, #12]
 800c522:	3307      	adds	r3, #7
 800c524:	f023 0307 	bic.w	r3, r3, #7
 800c528:	3308      	adds	r3, #8
 800c52a:	9303      	str	r3, [sp, #12]
 800c52c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c52e:	443b      	add	r3, r7
 800c530:	9309      	str	r3, [sp, #36]	; 0x24
 800c532:	e767      	b.n	800c404 <_vfiprintf_r+0x94>
 800c534:	fb0c 3202 	mla	r2, ip, r2, r3
 800c538:	460c      	mov	r4, r1
 800c53a:	2001      	movs	r0, #1
 800c53c:	e7a5      	b.n	800c48a <_vfiprintf_r+0x11a>
 800c53e:	2300      	movs	r3, #0
 800c540:	3401      	adds	r4, #1
 800c542:	9305      	str	r3, [sp, #20]
 800c544:	4619      	mov	r1, r3
 800c546:	f04f 0c0a 	mov.w	ip, #10
 800c54a:	4620      	mov	r0, r4
 800c54c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c550:	3a30      	subs	r2, #48	; 0x30
 800c552:	2a09      	cmp	r2, #9
 800c554:	d903      	bls.n	800c55e <_vfiprintf_r+0x1ee>
 800c556:	2b00      	cmp	r3, #0
 800c558:	d0c5      	beq.n	800c4e6 <_vfiprintf_r+0x176>
 800c55a:	9105      	str	r1, [sp, #20]
 800c55c:	e7c3      	b.n	800c4e6 <_vfiprintf_r+0x176>
 800c55e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c562:	4604      	mov	r4, r0
 800c564:	2301      	movs	r3, #1
 800c566:	e7f0      	b.n	800c54a <_vfiprintf_r+0x1da>
 800c568:	ab03      	add	r3, sp, #12
 800c56a:	9300      	str	r3, [sp, #0]
 800c56c:	462a      	mov	r2, r5
 800c56e:	4b16      	ldr	r3, [pc, #88]	; (800c5c8 <_vfiprintf_r+0x258>)
 800c570:	a904      	add	r1, sp, #16
 800c572:	4630      	mov	r0, r6
 800c574:	f7fb f99a 	bl	80078ac <_printf_float>
 800c578:	4607      	mov	r7, r0
 800c57a:	1c78      	adds	r0, r7, #1
 800c57c:	d1d6      	bne.n	800c52c <_vfiprintf_r+0x1bc>
 800c57e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c580:	07d9      	lsls	r1, r3, #31
 800c582:	d405      	bmi.n	800c590 <_vfiprintf_r+0x220>
 800c584:	89ab      	ldrh	r3, [r5, #12]
 800c586:	059a      	lsls	r2, r3, #22
 800c588:	d402      	bmi.n	800c590 <_vfiprintf_r+0x220>
 800c58a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c58c:	f7ff fe71 	bl	800c272 <__retarget_lock_release_recursive>
 800c590:	89ab      	ldrh	r3, [r5, #12]
 800c592:	065b      	lsls	r3, r3, #25
 800c594:	f53f af12 	bmi.w	800c3bc <_vfiprintf_r+0x4c>
 800c598:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c59a:	e711      	b.n	800c3c0 <_vfiprintf_r+0x50>
 800c59c:	ab03      	add	r3, sp, #12
 800c59e:	9300      	str	r3, [sp, #0]
 800c5a0:	462a      	mov	r2, r5
 800c5a2:	4b09      	ldr	r3, [pc, #36]	; (800c5c8 <_vfiprintf_r+0x258>)
 800c5a4:	a904      	add	r1, sp, #16
 800c5a6:	4630      	mov	r0, r6
 800c5a8:	f7fb fc24 	bl	8007df4 <_printf_i>
 800c5ac:	e7e4      	b.n	800c578 <_vfiprintf_r+0x208>
 800c5ae:	bf00      	nop
 800c5b0:	0800ce1c 	.word	0x0800ce1c
 800c5b4:	0800ce3c 	.word	0x0800ce3c
 800c5b8:	0800cdfc 	.word	0x0800cdfc
 800c5bc:	0800cd94 	.word	0x0800cd94
 800c5c0:	0800cd9e 	.word	0x0800cd9e
 800c5c4:	080078ad 	.word	0x080078ad
 800c5c8:	0800c34d 	.word	0x0800c34d
 800c5cc:	0800cd9a 	.word	0x0800cd9a

0800c5d0 <__swbuf_r>:
 800c5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5d2:	460e      	mov	r6, r1
 800c5d4:	4614      	mov	r4, r2
 800c5d6:	4605      	mov	r5, r0
 800c5d8:	b118      	cbz	r0, 800c5e2 <__swbuf_r+0x12>
 800c5da:	6983      	ldr	r3, [r0, #24]
 800c5dc:	b90b      	cbnz	r3, 800c5e2 <__swbuf_r+0x12>
 800c5de:	f7ff fd97 	bl	800c110 <__sinit>
 800c5e2:	4b21      	ldr	r3, [pc, #132]	; (800c668 <__swbuf_r+0x98>)
 800c5e4:	429c      	cmp	r4, r3
 800c5e6:	d12b      	bne.n	800c640 <__swbuf_r+0x70>
 800c5e8:	686c      	ldr	r4, [r5, #4]
 800c5ea:	69a3      	ldr	r3, [r4, #24]
 800c5ec:	60a3      	str	r3, [r4, #8]
 800c5ee:	89a3      	ldrh	r3, [r4, #12]
 800c5f0:	071a      	lsls	r2, r3, #28
 800c5f2:	d52f      	bpl.n	800c654 <__swbuf_r+0x84>
 800c5f4:	6923      	ldr	r3, [r4, #16]
 800c5f6:	b36b      	cbz	r3, 800c654 <__swbuf_r+0x84>
 800c5f8:	6923      	ldr	r3, [r4, #16]
 800c5fa:	6820      	ldr	r0, [r4, #0]
 800c5fc:	1ac0      	subs	r0, r0, r3
 800c5fe:	6963      	ldr	r3, [r4, #20]
 800c600:	b2f6      	uxtb	r6, r6
 800c602:	4283      	cmp	r3, r0
 800c604:	4637      	mov	r7, r6
 800c606:	dc04      	bgt.n	800c612 <__swbuf_r+0x42>
 800c608:	4621      	mov	r1, r4
 800c60a:	4628      	mov	r0, r5
 800c60c:	f7ff fcec 	bl	800bfe8 <_fflush_r>
 800c610:	bb30      	cbnz	r0, 800c660 <__swbuf_r+0x90>
 800c612:	68a3      	ldr	r3, [r4, #8]
 800c614:	3b01      	subs	r3, #1
 800c616:	60a3      	str	r3, [r4, #8]
 800c618:	6823      	ldr	r3, [r4, #0]
 800c61a:	1c5a      	adds	r2, r3, #1
 800c61c:	6022      	str	r2, [r4, #0]
 800c61e:	701e      	strb	r6, [r3, #0]
 800c620:	6963      	ldr	r3, [r4, #20]
 800c622:	3001      	adds	r0, #1
 800c624:	4283      	cmp	r3, r0
 800c626:	d004      	beq.n	800c632 <__swbuf_r+0x62>
 800c628:	89a3      	ldrh	r3, [r4, #12]
 800c62a:	07db      	lsls	r3, r3, #31
 800c62c:	d506      	bpl.n	800c63c <__swbuf_r+0x6c>
 800c62e:	2e0a      	cmp	r6, #10
 800c630:	d104      	bne.n	800c63c <__swbuf_r+0x6c>
 800c632:	4621      	mov	r1, r4
 800c634:	4628      	mov	r0, r5
 800c636:	f7ff fcd7 	bl	800bfe8 <_fflush_r>
 800c63a:	b988      	cbnz	r0, 800c660 <__swbuf_r+0x90>
 800c63c:	4638      	mov	r0, r7
 800c63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c640:	4b0a      	ldr	r3, [pc, #40]	; (800c66c <__swbuf_r+0x9c>)
 800c642:	429c      	cmp	r4, r3
 800c644:	d101      	bne.n	800c64a <__swbuf_r+0x7a>
 800c646:	68ac      	ldr	r4, [r5, #8]
 800c648:	e7cf      	b.n	800c5ea <__swbuf_r+0x1a>
 800c64a:	4b09      	ldr	r3, [pc, #36]	; (800c670 <__swbuf_r+0xa0>)
 800c64c:	429c      	cmp	r4, r3
 800c64e:	bf08      	it	eq
 800c650:	68ec      	ldreq	r4, [r5, #12]
 800c652:	e7ca      	b.n	800c5ea <__swbuf_r+0x1a>
 800c654:	4621      	mov	r1, r4
 800c656:	4628      	mov	r0, r5
 800c658:	f000 f80c 	bl	800c674 <__swsetup_r>
 800c65c:	2800      	cmp	r0, #0
 800c65e:	d0cb      	beq.n	800c5f8 <__swbuf_r+0x28>
 800c660:	f04f 37ff 	mov.w	r7, #4294967295
 800c664:	e7ea      	b.n	800c63c <__swbuf_r+0x6c>
 800c666:	bf00      	nop
 800c668:	0800ce1c 	.word	0x0800ce1c
 800c66c:	0800ce3c 	.word	0x0800ce3c
 800c670:	0800cdfc 	.word	0x0800cdfc

0800c674 <__swsetup_r>:
 800c674:	4b32      	ldr	r3, [pc, #200]	; (800c740 <__swsetup_r+0xcc>)
 800c676:	b570      	push	{r4, r5, r6, lr}
 800c678:	681d      	ldr	r5, [r3, #0]
 800c67a:	4606      	mov	r6, r0
 800c67c:	460c      	mov	r4, r1
 800c67e:	b125      	cbz	r5, 800c68a <__swsetup_r+0x16>
 800c680:	69ab      	ldr	r3, [r5, #24]
 800c682:	b913      	cbnz	r3, 800c68a <__swsetup_r+0x16>
 800c684:	4628      	mov	r0, r5
 800c686:	f7ff fd43 	bl	800c110 <__sinit>
 800c68a:	4b2e      	ldr	r3, [pc, #184]	; (800c744 <__swsetup_r+0xd0>)
 800c68c:	429c      	cmp	r4, r3
 800c68e:	d10f      	bne.n	800c6b0 <__swsetup_r+0x3c>
 800c690:	686c      	ldr	r4, [r5, #4]
 800c692:	89a3      	ldrh	r3, [r4, #12]
 800c694:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c698:	0719      	lsls	r1, r3, #28
 800c69a:	d42c      	bmi.n	800c6f6 <__swsetup_r+0x82>
 800c69c:	06dd      	lsls	r5, r3, #27
 800c69e:	d411      	bmi.n	800c6c4 <__swsetup_r+0x50>
 800c6a0:	2309      	movs	r3, #9
 800c6a2:	6033      	str	r3, [r6, #0]
 800c6a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c6a8:	81a3      	strh	r3, [r4, #12]
 800c6aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ae:	e03e      	b.n	800c72e <__swsetup_r+0xba>
 800c6b0:	4b25      	ldr	r3, [pc, #148]	; (800c748 <__swsetup_r+0xd4>)
 800c6b2:	429c      	cmp	r4, r3
 800c6b4:	d101      	bne.n	800c6ba <__swsetup_r+0x46>
 800c6b6:	68ac      	ldr	r4, [r5, #8]
 800c6b8:	e7eb      	b.n	800c692 <__swsetup_r+0x1e>
 800c6ba:	4b24      	ldr	r3, [pc, #144]	; (800c74c <__swsetup_r+0xd8>)
 800c6bc:	429c      	cmp	r4, r3
 800c6be:	bf08      	it	eq
 800c6c0:	68ec      	ldreq	r4, [r5, #12]
 800c6c2:	e7e6      	b.n	800c692 <__swsetup_r+0x1e>
 800c6c4:	0758      	lsls	r0, r3, #29
 800c6c6:	d512      	bpl.n	800c6ee <__swsetup_r+0x7a>
 800c6c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6ca:	b141      	cbz	r1, 800c6de <__swsetup_r+0x6a>
 800c6cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6d0:	4299      	cmp	r1, r3
 800c6d2:	d002      	beq.n	800c6da <__swsetup_r+0x66>
 800c6d4:	4630      	mov	r0, r6
 800c6d6:	f7fe fd4f 	bl	800b178 <_free_r>
 800c6da:	2300      	movs	r3, #0
 800c6dc:	6363      	str	r3, [r4, #52]	; 0x34
 800c6de:	89a3      	ldrh	r3, [r4, #12]
 800c6e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c6e4:	81a3      	strh	r3, [r4, #12]
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	6063      	str	r3, [r4, #4]
 800c6ea:	6923      	ldr	r3, [r4, #16]
 800c6ec:	6023      	str	r3, [r4, #0]
 800c6ee:	89a3      	ldrh	r3, [r4, #12]
 800c6f0:	f043 0308 	orr.w	r3, r3, #8
 800c6f4:	81a3      	strh	r3, [r4, #12]
 800c6f6:	6923      	ldr	r3, [r4, #16]
 800c6f8:	b94b      	cbnz	r3, 800c70e <__swsetup_r+0x9a>
 800c6fa:	89a3      	ldrh	r3, [r4, #12]
 800c6fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c704:	d003      	beq.n	800c70e <__swsetup_r+0x9a>
 800c706:	4621      	mov	r1, r4
 800c708:	4630      	mov	r0, r6
 800c70a:	f000 f84d 	bl	800c7a8 <__smakebuf_r>
 800c70e:	89a0      	ldrh	r0, [r4, #12]
 800c710:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c714:	f010 0301 	ands.w	r3, r0, #1
 800c718:	d00a      	beq.n	800c730 <__swsetup_r+0xbc>
 800c71a:	2300      	movs	r3, #0
 800c71c:	60a3      	str	r3, [r4, #8]
 800c71e:	6963      	ldr	r3, [r4, #20]
 800c720:	425b      	negs	r3, r3
 800c722:	61a3      	str	r3, [r4, #24]
 800c724:	6923      	ldr	r3, [r4, #16]
 800c726:	b943      	cbnz	r3, 800c73a <__swsetup_r+0xc6>
 800c728:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c72c:	d1ba      	bne.n	800c6a4 <__swsetup_r+0x30>
 800c72e:	bd70      	pop	{r4, r5, r6, pc}
 800c730:	0781      	lsls	r1, r0, #30
 800c732:	bf58      	it	pl
 800c734:	6963      	ldrpl	r3, [r4, #20]
 800c736:	60a3      	str	r3, [r4, #8]
 800c738:	e7f4      	b.n	800c724 <__swsetup_r+0xb0>
 800c73a:	2000      	movs	r0, #0
 800c73c:	e7f7      	b.n	800c72e <__swsetup_r+0xba>
 800c73e:	bf00      	nop
 800c740:	200000ec 	.word	0x200000ec
 800c744:	0800ce1c 	.word	0x0800ce1c
 800c748:	0800ce3c 	.word	0x0800ce3c
 800c74c:	0800cdfc 	.word	0x0800cdfc

0800c750 <abort>:
 800c750:	b508      	push	{r3, lr}
 800c752:	2006      	movs	r0, #6
 800c754:	f000 f898 	bl	800c888 <raise>
 800c758:	2001      	movs	r0, #1
 800c75a:	f7f6 f971 	bl	8002a40 <_exit>

0800c75e <__swhatbuf_r>:
 800c75e:	b570      	push	{r4, r5, r6, lr}
 800c760:	460e      	mov	r6, r1
 800c762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c766:	2900      	cmp	r1, #0
 800c768:	b096      	sub	sp, #88	; 0x58
 800c76a:	4614      	mov	r4, r2
 800c76c:	461d      	mov	r5, r3
 800c76e:	da08      	bge.n	800c782 <__swhatbuf_r+0x24>
 800c770:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c774:	2200      	movs	r2, #0
 800c776:	602a      	str	r2, [r5, #0]
 800c778:	061a      	lsls	r2, r3, #24
 800c77a:	d410      	bmi.n	800c79e <__swhatbuf_r+0x40>
 800c77c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c780:	e00e      	b.n	800c7a0 <__swhatbuf_r+0x42>
 800c782:	466a      	mov	r2, sp
 800c784:	f000 f89c 	bl	800c8c0 <_fstat_r>
 800c788:	2800      	cmp	r0, #0
 800c78a:	dbf1      	blt.n	800c770 <__swhatbuf_r+0x12>
 800c78c:	9a01      	ldr	r2, [sp, #4]
 800c78e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c792:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c796:	425a      	negs	r2, r3
 800c798:	415a      	adcs	r2, r3
 800c79a:	602a      	str	r2, [r5, #0]
 800c79c:	e7ee      	b.n	800c77c <__swhatbuf_r+0x1e>
 800c79e:	2340      	movs	r3, #64	; 0x40
 800c7a0:	2000      	movs	r0, #0
 800c7a2:	6023      	str	r3, [r4, #0]
 800c7a4:	b016      	add	sp, #88	; 0x58
 800c7a6:	bd70      	pop	{r4, r5, r6, pc}

0800c7a8 <__smakebuf_r>:
 800c7a8:	898b      	ldrh	r3, [r1, #12]
 800c7aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c7ac:	079d      	lsls	r5, r3, #30
 800c7ae:	4606      	mov	r6, r0
 800c7b0:	460c      	mov	r4, r1
 800c7b2:	d507      	bpl.n	800c7c4 <__smakebuf_r+0x1c>
 800c7b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c7b8:	6023      	str	r3, [r4, #0]
 800c7ba:	6123      	str	r3, [r4, #16]
 800c7bc:	2301      	movs	r3, #1
 800c7be:	6163      	str	r3, [r4, #20]
 800c7c0:	b002      	add	sp, #8
 800c7c2:	bd70      	pop	{r4, r5, r6, pc}
 800c7c4:	ab01      	add	r3, sp, #4
 800c7c6:	466a      	mov	r2, sp
 800c7c8:	f7ff ffc9 	bl	800c75e <__swhatbuf_r>
 800c7cc:	9900      	ldr	r1, [sp, #0]
 800c7ce:	4605      	mov	r5, r0
 800c7d0:	4630      	mov	r0, r6
 800c7d2:	f7fe fd3d 	bl	800b250 <_malloc_r>
 800c7d6:	b948      	cbnz	r0, 800c7ec <__smakebuf_r+0x44>
 800c7d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7dc:	059a      	lsls	r2, r3, #22
 800c7de:	d4ef      	bmi.n	800c7c0 <__smakebuf_r+0x18>
 800c7e0:	f023 0303 	bic.w	r3, r3, #3
 800c7e4:	f043 0302 	orr.w	r3, r3, #2
 800c7e8:	81a3      	strh	r3, [r4, #12]
 800c7ea:	e7e3      	b.n	800c7b4 <__smakebuf_r+0xc>
 800c7ec:	4b0d      	ldr	r3, [pc, #52]	; (800c824 <__smakebuf_r+0x7c>)
 800c7ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800c7f0:	89a3      	ldrh	r3, [r4, #12]
 800c7f2:	6020      	str	r0, [r4, #0]
 800c7f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7f8:	81a3      	strh	r3, [r4, #12]
 800c7fa:	9b00      	ldr	r3, [sp, #0]
 800c7fc:	6163      	str	r3, [r4, #20]
 800c7fe:	9b01      	ldr	r3, [sp, #4]
 800c800:	6120      	str	r0, [r4, #16]
 800c802:	b15b      	cbz	r3, 800c81c <__smakebuf_r+0x74>
 800c804:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c808:	4630      	mov	r0, r6
 800c80a:	f000 f86b 	bl	800c8e4 <_isatty_r>
 800c80e:	b128      	cbz	r0, 800c81c <__smakebuf_r+0x74>
 800c810:	89a3      	ldrh	r3, [r4, #12]
 800c812:	f023 0303 	bic.w	r3, r3, #3
 800c816:	f043 0301 	orr.w	r3, r3, #1
 800c81a:	81a3      	strh	r3, [r4, #12]
 800c81c:	89a0      	ldrh	r0, [r4, #12]
 800c81e:	4305      	orrs	r5, r0
 800c820:	81a5      	strh	r5, [r4, #12]
 800c822:	e7cd      	b.n	800c7c0 <__smakebuf_r+0x18>
 800c824:	0800c0a9 	.word	0x0800c0a9

0800c828 <_malloc_usable_size_r>:
 800c828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c82c:	1f18      	subs	r0, r3, #4
 800c82e:	2b00      	cmp	r3, #0
 800c830:	bfbc      	itt	lt
 800c832:	580b      	ldrlt	r3, [r1, r0]
 800c834:	18c0      	addlt	r0, r0, r3
 800c836:	4770      	bx	lr

0800c838 <_raise_r>:
 800c838:	291f      	cmp	r1, #31
 800c83a:	b538      	push	{r3, r4, r5, lr}
 800c83c:	4604      	mov	r4, r0
 800c83e:	460d      	mov	r5, r1
 800c840:	d904      	bls.n	800c84c <_raise_r+0x14>
 800c842:	2316      	movs	r3, #22
 800c844:	6003      	str	r3, [r0, #0]
 800c846:	f04f 30ff 	mov.w	r0, #4294967295
 800c84a:	bd38      	pop	{r3, r4, r5, pc}
 800c84c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c84e:	b112      	cbz	r2, 800c856 <_raise_r+0x1e>
 800c850:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c854:	b94b      	cbnz	r3, 800c86a <_raise_r+0x32>
 800c856:	4620      	mov	r0, r4
 800c858:	f000 f830 	bl	800c8bc <_getpid_r>
 800c85c:	462a      	mov	r2, r5
 800c85e:	4601      	mov	r1, r0
 800c860:	4620      	mov	r0, r4
 800c862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c866:	f000 b817 	b.w	800c898 <_kill_r>
 800c86a:	2b01      	cmp	r3, #1
 800c86c:	d00a      	beq.n	800c884 <_raise_r+0x4c>
 800c86e:	1c59      	adds	r1, r3, #1
 800c870:	d103      	bne.n	800c87a <_raise_r+0x42>
 800c872:	2316      	movs	r3, #22
 800c874:	6003      	str	r3, [r0, #0]
 800c876:	2001      	movs	r0, #1
 800c878:	e7e7      	b.n	800c84a <_raise_r+0x12>
 800c87a:	2400      	movs	r4, #0
 800c87c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c880:	4628      	mov	r0, r5
 800c882:	4798      	blx	r3
 800c884:	2000      	movs	r0, #0
 800c886:	e7e0      	b.n	800c84a <_raise_r+0x12>

0800c888 <raise>:
 800c888:	4b02      	ldr	r3, [pc, #8]	; (800c894 <raise+0xc>)
 800c88a:	4601      	mov	r1, r0
 800c88c:	6818      	ldr	r0, [r3, #0]
 800c88e:	f7ff bfd3 	b.w	800c838 <_raise_r>
 800c892:	bf00      	nop
 800c894:	200000ec 	.word	0x200000ec

0800c898 <_kill_r>:
 800c898:	b538      	push	{r3, r4, r5, lr}
 800c89a:	4d07      	ldr	r5, [pc, #28]	; (800c8b8 <_kill_r+0x20>)
 800c89c:	2300      	movs	r3, #0
 800c89e:	4604      	mov	r4, r0
 800c8a0:	4608      	mov	r0, r1
 800c8a2:	4611      	mov	r1, r2
 800c8a4:	602b      	str	r3, [r5, #0]
 800c8a6:	f7f6 f8bb 	bl	8002a20 <_kill>
 800c8aa:	1c43      	adds	r3, r0, #1
 800c8ac:	d102      	bne.n	800c8b4 <_kill_r+0x1c>
 800c8ae:	682b      	ldr	r3, [r5, #0]
 800c8b0:	b103      	cbz	r3, 800c8b4 <_kill_r+0x1c>
 800c8b2:	6023      	str	r3, [r4, #0]
 800c8b4:	bd38      	pop	{r3, r4, r5, pc}
 800c8b6:	bf00      	nop
 800c8b8:	200008ec 	.word	0x200008ec

0800c8bc <_getpid_r>:
 800c8bc:	f7f6 b8a8 	b.w	8002a10 <_getpid>

0800c8c0 <_fstat_r>:
 800c8c0:	b538      	push	{r3, r4, r5, lr}
 800c8c2:	4d07      	ldr	r5, [pc, #28]	; (800c8e0 <_fstat_r+0x20>)
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	4604      	mov	r4, r0
 800c8c8:	4608      	mov	r0, r1
 800c8ca:	4611      	mov	r1, r2
 800c8cc:	602b      	str	r3, [r5, #0]
 800c8ce:	f7f6 f906 	bl	8002ade <_fstat>
 800c8d2:	1c43      	adds	r3, r0, #1
 800c8d4:	d102      	bne.n	800c8dc <_fstat_r+0x1c>
 800c8d6:	682b      	ldr	r3, [r5, #0]
 800c8d8:	b103      	cbz	r3, 800c8dc <_fstat_r+0x1c>
 800c8da:	6023      	str	r3, [r4, #0]
 800c8dc:	bd38      	pop	{r3, r4, r5, pc}
 800c8de:	bf00      	nop
 800c8e0:	200008ec 	.word	0x200008ec

0800c8e4 <_isatty_r>:
 800c8e4:	b538      	push	{r3, r4, r5, lr}
 800c8e6:	4d06      	ldr	r5, [pc, #24]	; (800c900 <_isatty_r+0x1c>)
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	4604      	mov	r4, r0
 800c8ec:	4608      	mov	r0, r1
 800c8ee:	602b      	str	r3, [r5, #0]
 800c8f0:	f7f6 f905 	bl	8002afe <_isatty>
 800c8f4:	1c43      	adds	r3, r0, #1
 800c8f6:	d102      	bne.n	800c8fe <_isatty_r+0x1a>
 800c8f8:	682b      	ldr	r3, [r5, #0]
 800c8fa:	b103      	cbz	r3, 800c8fe <_isatty_r+0x1a>
 800c8fc:	6023      	str	r3, [r4, #0]
 800c8fe:	bd38      	pop	{r3, r4, r5, pc}
 800c900:	200008ec 	.word	0x200008ec

0800c904 <_init>:
 800c904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c906:	bf00      	nop
 800c908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c90a:	bc08      	pop	{r3}
 800c90c:	469e      	mov	lr, r3
 800c90e:	4770      	bx	lr

0800c910 <_fini>:
 800c910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c912:	bf00      	nop
 800c914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c916:	bc08      	pop	{r3}
 800c918:	469e      	mov	lr, r3
 800c91a:	4770      	bx	lr
