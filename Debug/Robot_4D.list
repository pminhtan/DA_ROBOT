
Robot_4D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  0800a118  0800a118  0001a118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5dc  0800a5dc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5dc  0800a5dc  0001a5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5e4  0800a5e4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5e4  0800a5e4  0001a5e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5e8  0800a5e8  0001a5e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a5ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000684  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000864  20000864  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000102c8  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000229e  00000000  00000000  000304d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e38  00000000  00000000  00032778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d50  00000000  00000000  000335b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000222a2  00000000  00000000  00034300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010322  00000000  00000000  000565a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd42a  00000000  00000000  000668c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00133cee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005164  00000000  00000000  00133d40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a100 	.word	0x0800a100

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a100 	.word	0x0800a100

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_frsub>:
 8000c88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c8c:	e002      	b.n	8000c94 <__addsf3>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_fsub>:
 8000c90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c94 <__addsf3>:
 8000c94:	0042      	lsls	r2, r0, #1
 8000c96:	bf1f      	itttt	ne
 8000c98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c9c:	ea92 0f03 	teqne	r2, r3
 8000ca0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ca4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca8:	d06a      	beq.n	8000d80 <__addsf3+0xec>
 8000caa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cb2:	bfc1      	itttt	gt
 8000cb4:	18d2      	addgt	r2, r2, r3
 8000cb6:	4041      	eorgt	r1, r0
 8000cb8:	4048      	eorgt	r0, r1
 8000cba:	4041      	eorgt	r1, r0
 8000cbc:	bfb8      	it	lt
 8000cbe:	425b      	neglt	r3, r3
 8000cc0:	2b19      	cmp	r3, #25
 8000cc2:	bf88      	it	hi
 8000cc4:	4770      	bxhi	lr
 8000cc6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cd2:	bf18      	it	ne
 8000cd4:	4240      	negne	r0, r0
 8000cd6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cda:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cde:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4249      	negne	r1, r1
 8000ce6:	ea92 0f03 	teq	r2, r3
 8000cea:	d03f      	beq.n	8000d6c <__addsf3+0xd8>
 8000cec:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cf4:	eb10 000c 	adds.w	r0, r0, ip
 8000cf8:	f1c3 0320 	rsb	r3, r3, #32
 8000cfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000d00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__addsf3+0x78>
 8000d06:	4249      	negs	r1, r1
 8000d08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d10:	d313      	bcc.n	8000d3a <__addsf3+0xa6>
 8000d12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d16:	d306      	bcc.n	8000d26 <__addsf3+0x92>
 8000d18:	0840      	lsrs	r0, r0, #1
 8000d1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d1e:	f102 0201 	add.w	r2, r2, #1
 8000d22:	2afe      	cmp	r2, #254	; 0xfe
 8000d24:	d251      	bcs.n	8000dca <__addsf3+0x136>
 8000d26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2e:	bf08      	it	eq
 8000d30:	f020 0001 	biceq.w	r0, r0, #1
 8000d34:	ea40 0003 	orr.w	r0, r0, r3
 8000d38:	4770      	bx	lr
 8000d3a:	0049      	lsls	r1, r1, #1
 8000d3c:	eb40 0000 	adc.w	r0, r0, r0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	bf28      	it	cs
 8000d44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d48:	d2ed      	bcs.n	8000d26 <__addsf3+0x92>
 8000d4a:	fab0 fc80 	clz	ip, r0
 8000d4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d52:	ebb2 020c 	subs.w	r2, r2, ip
 8000d56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d5a:	bfaa      	itet	ge
 8000d5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d60:	4252      	neglt	r2, r2
 8000d62:	4318      	orrge	r0, r3
 8000d64:	bfbc      	itt	lt
 8000d66:	40d0      	lsrlt	r0, r2
 8000d68:	4318      	orrlt	r0, r3
 8000d6a:	4770      	bx	lr
 8000d6c:	f092 0f00 	teq	r2, #0
 8000d70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d74:	bf06      	itte	eq
 8000d76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d7a:	3201      	addeq	r2, #1
 8000d7c:	3b01      	subne	r3, #1
 8000d7e:	e7b5      	b.n	8000cec <__addsf3+0x58>
 8000d80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d88:	bf18      	it	ne
 8000d8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d8e:	d021      	beq.n	8000dd4 <__addsf3+0x140>
 8000d90:	ea92 0f03 	teq	r2, r3
 8000d94:	d004      	beq.n	8000da0 <__addsf3+0x10c>
 8000d96:	f092 0f00 	teq	r2, #0
 8000d9a:	bf08      	it	eq
 8000d9c:	4608      	moveq	r0, r1
 8000d9e:	4770      	bx	lr
 8000da0:	ea90 0f01 	teq	r0, r1
 8000da4:	bf1c      	itt	ne
 8000da6:	2000      	movne	r0, #0
 8000da8:	4770      	bxne	lr
 8000daa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dae:	d104      	bne.n	8000dba <__addsf3+0x126>
 8000db0:	0040      	lsls	r0, r0, #1
 8000db2:	bf28      	it	cs
 8000db4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dbe:	bf3c      	itt	cc
 8000dc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dc4:	4770      	bxcc	lr
 8000dc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dd8:	bf16      	itet	ne
 8000dda:	4608      	movne	r0, r1
 8000ddc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de0:	4601      	movne	r1, r0
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	bf06      	itte	eq
 8000de6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dea:	ea90 0f01 	teqeq	r0, r1
 8000dee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_ui2f>:
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e004      	b.n	8000e04 <__aeabi_i2f+0x8>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_i2f>:
 8000dfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e00:	bf48      	it	mi
 8000e02:	4240      	negmi	r0, r0
 8000e04:	ea5f 0c00 	movs.w	ip, r0
 8000e08:	bf08      	it	eq
 8000e0a:	4770      	bxeq	lr
 8000e0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e10:	4601      	mov	r1, r0
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	e01c      	b.n	8000e52 <__aeabi_l2f+0x2a>

08000e18 <__aeabi_ul2f>:
 8000e18:	ea50 0201 	orrs.w	r2, r0, r1
 8000e1c:	bf08      	it	eq
 8000e1e:	4770      	bxeq	lr
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e00a      	b.n	8000e3c <__aeabi_l2f+0x14>
 8000e26:	bf00      	nop

08000e28 <__aeabi_l2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e34:	d502      	bpl.n	8000e3c <__aeabi_l2f+0x14>
 8000e36:	4240      	negs	r0, r0
 8000e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3c:	ea5f 0c01 	movs.w	ip, r1
 8000e40:	bf02      	ittt	eq
 8000e42:	4684      	moveq	ip, r0
 8000e44:	4601      	moveq	r1, r0
 8000e46:	2000      	moveq	r0, #0
 8000e48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e4c:	bf08      	it	eq
 8000e4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e56:	fabc f28c 	clz	r2, ip
 8000e5a:	3a08      	subs	r2, #8
 8000e5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e60:	db10      	blt.n	8000e84 <__aeabi_l2f+0x5c>
 8000e62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e66:	4463      	add	r3, ip
 8000e68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6c:	f1c2 0220 	rsb	r2, r2, #32
 8000e70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e74:	fa20 f202 	lsr.w	r2, r0, r2
 8000e78:	eb43 0002 	adc.w	r0, r3, r2
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f102 0220 	add.w	r2, r2, #32
 8000e88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e94:	fa21 f202 	lsr.w	r2, r1, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_uldivmod>:
 8000ea4:	b953      	cbnz	r3, 8000ebc <__aeabi_uldivmod+0x18>
 8000ea6:	b94a      	cbnz	r2, 8000ebc <__aeabi_uldivmod+0x18>
 8000ea8:	2900      	cmp	r1, #0
 8000eaa:	bf08      	it	eq
 8000eac:	2800      	cmpeq	r0, #0
 8000eae:	bf1c      	itt	ne
 8000eb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000eb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000eb8:	f000 b9aa 	b.w	8001210 <__aeabi_idiv0>
 8000ebc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ec0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ec4:	f000 f83c 	bl	8000f40 <__udivmoddi4>
 8000ec8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ecc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ed0:	b004      	add	sp, #16
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_d2lz>:
 8000ed4:	b538      	push	{r3, r4, r5, lr}
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2300      	movs	r3, #0
 8000eda:	4604      	mov	r4, r0
 8000edc:	460d      	mov	r5, r1
 8000ede:	f7ff fdfd 	bl	8000adc <__aeabi_dcmplt>
 8000ee2:	b928      	cbnz	r0, 8000ef0 <__aeabi_d2lz+0x1c>
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	4629      	mov	r1, r5
 8000ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000eec:	f000 b80a 	b.w	8000f04 <__aeabi_d2ulz>
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000ef6:	f000 f805 	bl	8000f04 <__aeabi_d2ulz>
 8000efa:	4240      	negs	r0, r0
 8000efc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f00:	bd38      	pop	{r3, r4, r5, pc}
 8000f02:	bf00      	nop

08000f04 <__aeabi_d2ulz>:
 8000f04:	b5d0      	push	{r4, r6, r7, lr}
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <__aeabi_d2ulz+0x34>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	4606      	mov	r6, r0
 8000f0c:	460f      	mov	r7, r1
 8000f0e:	f7ff fb73 	bl	80005f8 <__aeabi_dmul>
 8000f12:	f7ff fe49 	bl	8000ba8 <__aeabi_d2uiz>
 8000f16:	4604      	mov	r4, r0
 8000f18:	f7ff faf4 	bl	8000504 <__aeabi_ui2d>
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <__aeabi_d2ulz+0x38>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f7ff fb6a 	bl	80005f8 <__aeabi_dmul>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4630      	mov	r0, r6
 8000f2a:	4639      	mov	r1, r7
 8000f2c:	f7ff f9ac 	bl	8000288 <__aeabi_dsub>
 8000f30:	f7ff fe3a 	bl	8000ba8 <__aeabi_d2uiz>
 8000f34:	4621      	mov	r1, r4
 8000f36:	bdd0      	pop	{r4, r6, r7, pc}
 8000f38:	3df00000 	.word	0x3df00000
 8000f3c:	41f00000 	.word	0x41f00000

08000f40 <__udivmoddi4>:
 8000f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f44:	9d08      	ldr	r5, [sp, #32]
 8000f46:	4604      	mov	r4, r0
 8000f48:	468e      	mov	lr, r1
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d14d      	bne.n	8000fea <__udivmoddi4+0xaa>
 8000f4e:	428a      	cmp	r2, r1
 8000f50:	4694      	mov	ip, r2
 8000f52:	d969      	bls.n	8001028 <__udivmoddi4+0xe8>
 8000f54:	fab2 f282 	clz	r2, r2
 8000f58:	b152      	cbz	r2, 8000f70 <__udivmoddi4+0x30>
 8000f5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000f5e:	f1c2 0120 	rsb	r1, r2, #32
 8000f62:	fa20 f101 	lsr.w	r1, r0, r1
 8000f66:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f6a:	ea41 0e03 	orr.w	lr, r1, r3
 8000f6e:	4094      	lsls	r4, r2
 8000f70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f74:	0c21      	lsrs	r1, r4, #16
 8000f76:	fbbe f6f8 	udiv	r6, lr, r8
 8000f7a:	fa1f f78c 	uxth.w	r7, ip
 8000f7e:	fb08 e316 	mls	r3, r8, r6, lr
 8000f82:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000f86:	fb06 f107 	mul.w	r1, r6, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d90a      	bls.n	8000fa4 <__udivmoddi4+0x64>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f96:	f080 811f 	bcs.w	80011d8 <__udivmoddi4+0x298>
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	f240 811c 	bls.w	80011d8 <__udivmoddi4+0x298>
 8000fa0:	3e02      	subs	r6, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1a5b      	subs	r3, r3, r1
 8000fa6:	b2a4      	uxth	r4, r4
 8000fa8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fac:	fb08 3310 	mls	r3, r8, r0, r3
 8000fb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb4:	fb00 f707 	mul.w	r7, r0, r7
 8000fb8:	42a7      	cmp	r7, r4
 8000fba:	d90a      	bls.n	8000fd2 <__udivmoddi4+0x92>
 8000fbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fc4:	f080 810a 	bcs.w	80011dc <__udivmoddi4+0x29c>
 8000fc8:	42a7      	cmp	r7, r4
 8000fca:	f240 8107 	bls.w	80011dc <__udivmoddi4+0x29c>
 8000fce:	4464      	add	r4, ip
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000fd6:	1be4      	subs	r4, r4, r7
 8000fd8:	2600      	movs	r6, #0
 8000fda:	b11d      	cbz	r5, 8000fe4 <__udivmoddi4+0xa4>
 8000fdc:	40d4      	lsrs	r4, r2
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e9c5 4300 	strd	r4, r3, [r5]
 8000fe4:	4631      	mov	r1, r6
 8000fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fea:	428b      	cmp	r3, r1
 8000fec:	d909      	bls.n	8001002 <__udivmoddi4+0xc2>
 8000fee:	2d00      	cmp	r5, #0
 8000ff0:	f000 80ef 	beq.w	80011d2 <__udivmoddi4+0x292>
 8000ff4:	2600      	movs	r6, #0
 8000ff6:	e9c5 0100 	strd	r0, r1, [r5]
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	4631      	mov	r1, r6
 8000ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001002:	fab3 f683 	clz	r6, r3
 8001006:	2e00      	cmp	r6, #0
 8001008:	d14a      	bne.n	80010a0 <__udivmoddi4+0x160>
 800100a:	428b      	cmp	r3, r1
 800100c:	d302      	bcc.n	8001014 <__udivmoddi4+0xd4>
 800100e:	4282      	cmp	r2, r0
 8001010:	f200 80f9 	bhi.w	8001206 <__udivmoddi4+0x2c6>
 8001014:	1a84      	subs	r4, r0, r2
 8001016:	eb61 0303 	sbc.w	r3, r1, r3
 800101a:	2001      	movs	r0, #1
 800101c:	469e      	mov	lr, r3
 800101e:	2d00      	cmp	r5, #0
 8001020:	d0e0      	beq.n	8000fe4 <__udivmoddi4+0xa4>
 8001022:	e9c5 4e00 	strd	r4, lr, [r5]
 8001026:	e7dd      	b.n	8000fe4 <__udivmoddi4+0xa4>
 8001028:	b902      	cbnz	r2, 800102c <__udivmoddi4+0xec>
 800102a:	deff      	udf	#255	; 0xff
 800102c:	fab2 f282 	clz	r2, r2
 8001030:	2a00      	cmp	r2, #0
 8001032:	f040 8092 	bne.w	800115a <__udivmoddi4+0x21a>
 8001036:	eba1 010c 	sub.w	r1, r1, ip
 800103a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800103e:	fa1f fe8c 	uxth.w	lr, ip
 8001042:	2601      	movs	r6, #1
 8001044:	0c20      	lsrs	r0, r4, #16
 8001046:	fbb1 f3f7 	udiv	r3, r1, r7
 800104a:	fb07 1113 	mls	r1, r7, r3, r1
 800104e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001052:	fb0e f003 	mul.w	r0, lr, r3
 8001056:	4288      	cmp	r0, r1
 8001058:	d908      	bls.n	800106c <__udivmoddi4+0x12c>
 800105a:	eb1c 0101 	adds.w	r1, ip, r1
 800105e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001062:	d202      	bcs.n	800106a <__udivmoddi4+0x12a>
 8001064:	4288      	cmp	r0, r1
 8001066:	f200 80cb 	bhi.w	8001200 <__udivmoddi4+0x2c0>
 800106a:	4643      	mov	r3, r8
 800106c:	1a09      	subs	r1, r1, r0
 800106e:	b2a4      	uxth	r4, r4
 8001070:	fbb1 f0f7 	udiv	r0, r1, r7
 8001074:	fb07 1110 	mls	r1, r7, r0, r1
 8001078:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800107c:	fb0e fe00 	mul.w	lr, lr, r0
 8001080:	45a6      	cmp	lr, r4
 8001082:	d908      	bls.n	8001096 <__udivmoddi4+0x156>
 8001084:	eb1c 0404 	adds.w	r4, ip, r4
 8001088:	f100 31ff 	add.w	r1, r0, #4294967295
 800108c:	d202      	bcs.n	8001094 <__udivmoddi4+0x154>
 800108e:	45a6      	cmp	lr, r4
 8001090:	f200 80bb 	bhi.w	800120a <__udivmoddi4+0x2ca>
 8001094:	4608      	mov	r0, r1
 8001096:	eba4 040e 	sub.w	r4, r4, lr
 800109a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800109e:	e79c      	b.n	8000fda <__udivmoddi4+0x9a>
 80010a0:	f1c6 0720 	rsb	r7, r6, #32
 80010a4:	40b3      	lsls	r3, r6
 80010a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80010aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80010ae:	fa20 f407 	lsr.w	r4, r0, r7
 80010b2:	fa01 f306 	lsl.w	r3, r1, r6
 80010b6:	431c      	orrs	r4, r3
 80010b8:	40f9      	lsrs	r1, r7
 80010ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80010be:	fa00 f306 	lsl.w	r3, r0, r6
 80010c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80010c6:	0c20      	lsrs	r0, r4, #16
 80010c8:	fa1f fe8c 	uxth.w	lr, ip
 80010cc:	fb09 1118 	mls	r1, r9, r8, r1
 80010d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010d4:	fb08 f00e 	mul.w	r0, r8, lr
 80010d8:	4288      	cmp	r0, r1
 80010da:	fa02 f206 	lsl.w	r2, r2, r6
 80010de:	d90b      	bls.n	80010f8 <__udivmoddi4+0x1b8>
 80010e0:	eb1c 0101 	adds.w	r1, ip, r1
 80010e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80010e8:	f080 8088 	bcs.w	80011fc <__udivmoddi4+0x2bc>
 80010ec:	4288      	cmp	r0, r1
 80010ee:	f240 8085 	bls.w	80011fc <__udivmoddi4+0x2bc>
 80010f2:	f1a8 0802 	sub.w	r8, r8, #2
 80010f6:	4461      	add	r1, ip
 80010f8:	1a09      	subs	r1, r1, r0
 80010fa:	b2a4      	uxth	r4, r4
 80010fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8001100:	fb09 1110 	mls	r1, r9, r0, r1
 8001104:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001108:	fb00 fe0e 	mul.w	lr, r0, lr
 800110c:	458e      	cmp	lr, r1
 800110e:	d908      	bls.n	8001122 <__udivmoddi4+0x1e2>
 8001110:	eb1c 0101 	adds.w	r1, ip, r1
 8001114:	f100 34ff 	add.w	r4, r0, #4294967295
 8001118:	d26c      	bcs.n	80011f4 <__udivmoddi4+0x2b4>
 800111a:	458e      	cmp	lr, r1
 800111c:	d96a      	bls.n	80011f4 <__udivmoddi4+0x2b4>
 800111e:	3802      	subs	r0, #2
 8001120:	4461      	add	r1, ip
 8001122:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001126:	fba0 9402 	umull	r9, r4, r0, r2
 800112a:	eba1 010e 	sub.w	r1, r1, lr
 800112e:	42a1      	cmp	r1, r4
 8001130:	46c8      	mov	r8, r9
 8001132:	46a6      	mov	lr, r4
 8001134:	d356      	bcc.n	80011e4 <__udivmoddi4+0x2a4>
 8001136:	d053      	beq.n	80011e0 <__udivmoddi4+0x2a0>
 8001138:	b15d      	cbz	r5, 8001152 <__udivmoddi4+0x212>
 800113a:	ebb3 0208 	subs.w	r2, r3, r8
 800113e:	eb61 010e 	sbc.w	r1, r1, lr
 8001142:	fa01 f707 	lsl.w	r7, r1, r7
 8001146:	fa22 f306 	lsr.w	r3, r2, r6
 800114a:	40f1      	lsrs	r1, r6
 800114c:	431f      	orrs	r7, r3
 800114e:	e9c5 7100 	strd	r7, r1, [r5]
 8001152:	2600      	movs	r6, #0
 8001154:	4631      	mov	r1, r6
 8001156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800115a:	f1c2 0320 	rsb	r3, r2, #32
 800115e:	40d8      	lsrs	r0, r3
 8001160:	fa0c fc02 	lsl.w	ip, ip, r2
 8001164:	fa21 f303 	lsr.w	r3, r1, r3
 8001168:	4091      	lsls	r1, r2
 800116a:	4301      	orrs	r1, r0
 800116c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001170:	fa1f fe8c 	uxth.w	lr, ip
 8001174:	fbb3 f0f7 	udiv	r0, r3, r7
 8001178:	fb07 3610 	mls	r6, r7, r0, r3
 800117c:	0c0b      	lsrs	r3, r1, #16
 800117e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001182:	fb00 f60e 	mul.w	r6, r0, lr
 8001186:	429e      	cmp	r6, r3
 8001188:	fa04 f402 	lsl.w	r4, r4, r2
 800118c:	d908      	bls.n	80011a0 <__udivmoddi4+0x260>
 800118e:	eb1c 0303 	adds.w	r3, ip, r3
 8001192:	f100 38ff 	add.w	r8, r0, #4294967295
 8001196:	d22f      	bcs.n	80011f8 <__udivmoddi4+0x2b8>
 8001198:	429e      	cmp	r6, r3
 800119a:	d92d      	bls.n	80011f8 <__udivmoddi4+0x2b8>
 800119c:	3802      	subs	r0, #2
 800119e:	4463      	add	r3, ip
 80011a0:	1b9b      	subs	r3, r3, r6
 80011a2:	b289      	uxth	r1, r1
 80011a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80011a8:	fb07 3316 	mls	r3, r7, r6, r3
 80011ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80011b0:	fb06 f30e 	mul.w	r3, r6, lr
 80011b4:	428b      	cmp	r3, r1
 80011b6:	d908      	bls.n	80011ca <__udivmoddi4+0x28a>
 80011b8:	eb1c 0101 	adds.w	r1, ip, r1
 80011bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80011c0:	d216      	bcs.n	80011f0 <__udivmoddi4+0x2b0>
 80011c2:	428b      	cmp	r3, r1
 80011c4:	d914      	bls.n	80011f0 <__udivmoddi4+0x2b0>
 80011c6:	3e02      	subs	r6, #2
 80011c8:	4461      	add	r1, ip
 80011ca:	1ac9      	subs	r1, r1, r3
 80011cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80011d0:	e738      	b.n	8001044 <__udivmoddi4+0x104>
 80011d2:	462e      	mov	r6, r5
 80011d4:	4628      	mov	r0, r5
 80011d6:	e705      	b.n	8000fe4 <__udivmoddi4+0xa4>
 80011d8:	4606      	mov	r6, r0
 80011da:	e6e3      	b.n	8000fa4 <__udivmoddi4+0x64>
 80011dc:	4618      	mov	r0, r3
 80011de:	e6f8      	b.n	8000fd2 <__udivmoddi4+0x92>
 80011e0:	454b      	cmp	r3, r9
 80011e2:	d2a9      	bcs.n	8001138 <__udivmoddi4+0x1f8>
 80011e4:	ebb9 0802 	subs.w	r8, r9, r2
 80011e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80011ec:	3801      	subs	r0, #1
 80011ee:	e7a3      	b.n	8001138 <__udivmoddi4+0x1f8>
 80011f0:	4646      	mov	r6, r8
 80011f2:	e7ea      	b.n	80011ca <__udivmoddi4+0x28a>
 80011f4:	4620      	mov	r0, r4
 80011f6:	e794      	b.n	8001122 <__udivmoddi4+0x1e2>
 80011f8:	4640      	mov	r0, r8
 80011fa:	e7d1      	b.n	80011a0 <__udivmoddi4+0x260>
 80011fc:	46d0      	mov	r8, sl
 80011fe:	e77b      	b.n	80010f8 <__udivmoddi4+0x1b8>
 8001200:	3b02      	subs	r3, #2
 8001202:	4461      	add	r1, ip
 8001204:	e732      	b.n	800106c <__udivmoddi4+0x12c>
 8001206:	4630      	mov	r0, r6
 8001208:	e709      	b.n	800101e <__udivmoddi4+0xde>
 800120a:	4464      	add	r4, ip
 800120c:	3802      	subs	r0, #2
 800120e:	e742      	b.n	8001096 <__udivmoddi4+0x156>

08001210 <__aeabi_idiv0>:
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop

08001214 <HAL_TIM_PeriodElapsedCallback>:
     flag_uart_rx = 1;
     HAL_UARTEx_ReceiveToIdle_DMA(huart, (uint8_t*)uartLogBuffer, MAX_MESG);
   }
 }
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800121c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001220:	481b      	ldr	r0, [pc, #108]	; (8001290 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001222:	f001 ff5a 	bl	80030da <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8001226:	2140      	movs	r1, #64	; 0x40
 8001228:	481a      	ldr	r0, [pc, #104]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800122a:	f001 ff56 	bl	80030da <HAL_GPIO_TogglePin>
  static uint8_t mode = 0;
  switch (mode)
 800122e:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b03      	cmp	r3, #3
 8001234:	d826      	bhi.n	8001284 <HAL_TIM_PeriodElapsedCallback+0x70>
 8001236:	a201      	add	r2, pc, #4	; (adr r2, 800123c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123c:	0800124d 	.word	0x0800124d
 8001240:	0800125b 	.word	0x0800125b
 8001244:	08001269 	.word	0x08001269
 8001248:	08001277 	.word	0x08001277
  {
  case 0:
    MOTOR_runAngle(&motor1);
 800124c:	4813      	ldr	r0, [pc, #76]	; (800129c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800124e:	f004 f87b 	bl	8005348 <MOTOR_runAngle>
    mode = 1;
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]
    break;
 8001258:	e015      	b.n	8001286 <HAL_TIM_PeriodElapsedCallback+0x72>
  case 1:
    MOTOR_runAngle(&motor2);
 800125a:	4811      	ldr	r0, [pc, #68]	; (80012a0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800125c:	f004 f874 	bl	8005348 <MOTOR_runAngle>
    mode = 2;
 8001260:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001262:	2202      	movs	r2, #2
 8001264:	701a      	strb	r2, [r3, #0]
    break;
 8001266:	e00e      	b.n	8001286 <HAL_TIM_PeriodElapsedCallback+0x72>
  case 2:
    MOTOR_runAngle(&motor3);
 8001268:	480e      	ldr	r0, [pc, #56]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800126a:	f004 f86d 	bl	8005348 <MOTOR_runAngle>
    mode = 3;
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001270:	2203      	movs	r2, #3
 8001272:	701a      	strb	r2, [r3, #0]
    break;
 8001274:	e007      	b.n	8001286 <HAL_TIM_PeriodElapsedCallback+0x72>
  case 3:
    MOTOR_runAngle(&motor4);
 8001276:	480c      	ldr	r0, [pc, #48]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001278:	f004 f866 	bl	8005348 <MOTOR_runAngle>
    mode = 0;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
    break;
 8001282:	e000      	b.n	8001286 <HAL_TIM_PeriodElapsedCallback+0x72>
  default:
    break;
 8001284:	bf00      	nop
  }
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40020800 	.word	0x40020800
 8001294:	40020400 	.word	0x40020400
 8001298:	20000848 	.word	0x20000848
 800129c:	20000578 	.word	0x20000578
 80012a0:	2000062c 	.word	0x2000062c
 80012a4:	200006e0 	.word	0x200006e0
 80012a8:	20000794 	.word	0x20000794

080012ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b0:	f001 f8f0 	bl	8002494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b4:	f000 f8e4 	bl	8001480 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b8:	f000 fc9c 	bl	8001bf4 <MX_GPIO_Init>
  MX_DMA_Init();
 80012bc:	f000 fc7a 	bl	8001bb4 <MX_DMA_Init>
  MX_TIM1_Init();
 80012c0:	f000 f948 	bl	8001554 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012c4:	f000 f99e 	bl	8001604 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012c8:	f000 f9f0 	bl	80016ac <MX_TIM3_Init>
  MX_TIM4_Init();
 80012cc:	f000 fa42 	bl	8001754 <MX_TIM4_Init>
  MX_TIM5_Init();
 80012d0:	f000 fad8 	bl	8001884 <MX_TIM5_Init>
  MX_TIM8_Init();
 80012d4:	f000 fb2a 	bl	800192c <MX_TIM8_Init>
  MX_TIM9_Init();
 80012d8:	f000 fbd4 	bl	8001a84 <MX_TIM9_Init>
  MX_USART3_UART_Init();
 80012dc:	f000 fc40 	bl	8001b60 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  MOTOR_setPIDPosition(&motor1, 1, 0, 0, 4);
 80012e0:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 80012e4:	ed9f 1a56 	vldr	s2, [pc, #344]	; 8001440 <main+0x194>
 80012e8:	eddf 0a55 	vldr	s1, [pc, #340]	; 8001440 <main+0x194>
 80012ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80012f0:	4854      	ldr	r0, [pc, #336]	; (8001444 <main+0x198>)
 80012f2:	f003 ffcd 	bl	8005290 <MOTOR_setPIDPosition>
  MOTOR_setPIDVelocity(&motor1, 1, 200, 0, 4);
 80012f6:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 80012fa:	ed9f 1a51 	vldr	s2, [pc, #324]	; 8001440 <main+0x194>
 80012fe:	eddf 0a52 	vldr	s1, [pc, #328]	; 8001448 <main+0x19c>
 8001302:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001306:	484f      	ldr	r0, [pc, #316]	; (8001444 <main+0x198>)
 8001308:	f003 ffa6 	bl	8005258 <MOTOR_setPIDVelocity>
  MOTOR_setOutputRange(&motor1, -999, 999);
 800130c:	eddf 0a4f 	vldr	s1, [pc, #316]	; 800144c <main+0x1a0>
 8001310:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8001450 <main+0x1a4>
 8001314:	484b      	ldr	r0, [pc, #300]	; (8001444 <main+0x198>)
 8001316:	f003 ffd9 	bl	80052cc <MOTOR_setOutputRange>
  MOTOR_setWindupRange(&motor1, -500, 500);
 800131a:	eddf 0a4e 	vldr	s1, [pc, #312]	; 8001454 <main+0x1a8>
 800131e:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8001458 <main+0x1ac>
 8001322:	4848      	ldr	r0, [pc, #288]	; (8001444 <main+0x198>)
 8001324:	f003 fff4 	bl	8005310 <MOTOR_setWindupRange>
  MOTOR_init(&motor1, &driver1, 33.0, GPIO_PIN_6);
 8001328:	2240      	movs	r2, #64	; 0x40
 800132a:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 800145c <main+0x1b0>
 800132e:	494c      	ldr	r1, [pc, #304]	; (8001460 <main+0x1b4>)
 8001330:	4844      	ldr	r0, [pc, #272]	; (8001444 <main+0x198>)
 8001332:	f004 f883 	bl	800543c <MOTOR_init>

  MOTOR_setPIDPosition(&motor2, 1, 0, 0, 4);
 8001336:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 800133a:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8001440 <main+0x194>
 800133e:	eddf 0a40 	vldr	s1, [pc, #256]	; 8001440 <main+0x194>
 8001342:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001346:	4847      	ldr	r0, [pc, #284]	; (8001464 <main+0x1b8>)
 8001348:	f003 ffa2 	bl	8005290 <MOTOR_setPIDPosition>
  MOTOR_setPIDVelocity(&motor2, 1, 200, 0, 4);
 800134c:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 8001350:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 8001440 <main+0x194>
 8001354:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8001448 <main+0x19c>
 8001358:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800135c:	4841      	ldr	r0, [pc, #260]	; (8001464 <main+0x1b8>)
 800135e:	f003 ff7b 	bl	8005258 <MOTOR_setPIDVelocity>
  MOTOR_setOutputRange(&motor2, -999, 999);
 8001362:	eddf 0a3a 	vldr	s1, [pc, #232]	; 800144c <main+0x1a0>
 8001366:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8001450 <main+0x1a4>
 800136a:	483e      	ldr	r0, [pc, #248]	; (8001464 <main+0x1b8>)
 800136c:	f003 ffae 	bl	80052cc <MOTOR_setOutputRange>
  MOTOR_setWindupRange(&motor2, -500, 500);
 8001370:	eddf 0a38 	vldr	s1, [pc, #224]	; 8001454 <main+0x1a8>
 8001374:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8001458 <main+0x1ac>
 8001378:	483a      	ldr	r0, [pc, #232]	; (8001464 <main+0x1b8>)
 800137a:	f003 ffc9 	bl	8005310 <MOTOR_setWindupRange>
  MOTOR_init(&motor2, &driver2, 33.0, GPIO_PIN_6);
 800137e:	2240      	movs	r2, #64	; 0x40
 8001380:	ed9f 0a36 	vldr	s0, [pc, #216]	; 800145c <main+0x1b0>
 8001384:	4938      	ldr	r1, [pc, #224]	; (8001468 <main+0x1bc>)
 8001386:	4837      	ldr	r0, [pc, #220]	; (8001464 <main+0x1b8>)
 8001388:	f004 f858 	bl	800543c <MOTOR_init>

  MOTOR_setPIDPosition(&motor3, 1, 0, 0, 4);
 800138c:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 8001390:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 8001440 <main+0x194>
 8001394:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8001440 <main+0x194>
 8001398:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800139c:	4833      	ldr	r0, [pc, #204]	; (800146c <main+0x1c0>)
 800139e:	f003 ff77 	bl	8005290 <MOTOR_setPIDPosition>
  MOTOR_setPIDVelocity(&motor3, 1, 200, 0, 4);
 80013a2:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 80013a6:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8001440 <main+0x194>
 80013aa:	eddf 0a27 	vldr	s1, [pc, #156]	; 8001448 <main+0x19c>
 80013ae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80013b2:	482e      	ldr	r0, [pc, #184]	; (800146c <main+0x1c0>)
 80013b4:	f003 ff50 	bl	8005258 <MOTOR_setPIDVelocity>
  MOTOR_setOutputRange(&motor3, -999, 999);
 80013b8:	eddf 0a24 	vldr	s1, [pc, #144]	; 800144c <main+0x1a0>
 80013bc:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8001450 <main+0x1a4>
 80013c0:	482a      	ldr	r0, [pc, #168]	; (800146c <main+0x1c0>)
 80013c2:	f003 ff83 	bl	80052cc <MOTOR_setOutputRange>
  MOTOR_setWindupRange(&motor3, -500, 500);
 80013c6:	eddf 0a23 	vldr	s1, [pc, #140]	; 8001454 <main+0x1a8>
 80013ca:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8001458 <main+0x1ac>
 80013ce:	4827      	ldr	r0, [pc, #156]	; (800146c <main+0x1c0>)
 80013d0:	f003 ff9e 	bl	8005310 <MOTOR_setWindupRange>
  MOTOR_init(&motor3, &driver3, 33.0, GPIO_PIN_6);
 80013d4:	2240      	movs	r2, #64	; 0x40
 80013d6:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800145c <main+0x1b0>
 80013da:	4925      	ldr	r1, [pc, #148]	; (8001470 <main+0x1c4>)
 80013dc:	4823      	ldr	r0, [pc, #140]	; (800146c <main+0x1c0>)
 80013de:	f004 f82d 	bl	800543c <MOTOR_init>

  MOTOR_setPIDPosition(&motor4, 1, 0, 0, 4);
 80013e2:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 80013e6:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8001440 <main+0x194>
 80013ea:	eddf 0a15 	vldr	s1, [pc, #84]	; 8001440 <main+0x194>
 80013ee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80013f2:	4820      	ldr	r0, [pc, #128]	; (8001474 <main+0x1c8>)
 80013f4:	f003 ff4c 	bl	8005290 <MOTOR_setPIDPosition>
  MOTOR_setPIDVelocity(&motor4, 1, 200, 0, 4);
 80013f8:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 80013fc:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8001440 <main+0x194>
 8001400:	eddf 0a11 	vldr	s1, [pc, #68]	; 8001448 <main+0x19c>
 8001404:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001408:	481a      	ldr	r0, [pc, #104]	; (8001474 <main+0x1c8>)
 800140a:	f003 ff25 	bl	8005258 <MOTOR_setPIDVelocity>
  MOTOR_setOutputRange(&motor4, -999, 999);
 800140e:	eddf 0a0f 	vldr	s1, [pc, #60]	; 800144c <main+0x1a0>
 8001412:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001450 <main+0x1a4>
 8001416:	4817      	ldr	r0, [pc, #92]	; (8001474 <main+0x1c8>)
 8001418:	f003 ff58 	bl	80052cc <MOTOR_setOutputRange>
  MOTOR_setWindupRange(&motor4, -500, 500);
 800141c:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8001454 <main+0x1a8>
 8001420:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8001458 <main+0x1ac>
 8001424:	4813      	ldr	r0, [pc, #76]	; (8001474 <main+0x1c8>)
 8001426:	f003 ff73 	bl	8005310 <MOTOR_setWindupRange>
  MOTOR_init(&motor4, &driver4, 33.0, GPIO_PIN_6);
 800142a:	2240      	movs	r2, #64	; 0x40
 800142c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800145c <main+0x1b0>
 8001430:	4911      	ldr	r1, [pc, #68]	; (8001478 <main+0x1cc>)
 8001432:	4810      	ldr	r0, [pc, #64]	; (8001474 <main+0x1c8>)
 8001434:	f004 f802 	bl	800543c <MOTOR_init>

  HAL_TIM_Base_Start_IT(&htim9);
 8001438:	4810      	ldr	r0, [pc, #64]	; (800147c <main+0x1d0>)
 800143a:	f002 fb51 	bl	8003ae0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800143e:	e7fe      	b.n	800143e <main+0x192>
 8001440:	00000000 	.word	0x00000000
 8001444:	20000578 	.word	0x20000578
 8001448:	43480000 	.word	0x43480000
 800144c:	4479c000 	.word	0x4479c000
 8001450:	c479c000 	.word	0xc479c000
 8001454:	43fa0000 	.word	0x43fa0000
 8001458:	c3fa0000 	.word	0xc3fa0000
 800145c:	42040000 	.word	0x42040000
 8001460:	20000498 	.word	0x20000498
 8001464:	2000062c 	.word	0x2000062c
 8001468:	200004d0 	.word	0x200004d0
 800146c:	200006e0 	.word	0x200006e0
 8001470:	20000508 	.word	0x20000508
 8001474:	20000794 	.word	0x20000794
 8001478:	20000540 	.word	0x20000540
 800147c:	200003ac 	.word	0x200003ac

08001480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b094      	sub	sp, #80	; 0x50
 8001484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001486:	f107 0320 	add.w	r3, r7, #32
 800148a:	2230      	movs	r2, #48	; 0x30
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f004 f9bc 	bl	800580c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	4b28      	ldr	r3, [pc, #160]	; (800154c <SystemClock_Config+0xcc>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	4a27      	ldr	r2, [pc, #156]	; (800154c <SystemClock_Config+0xcc>)
 80014ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b2:	6413      	str	r3, [r2, #64]	; 0x40
 80014b4:	4b25      	ldr	r3, [pc, #148]	; (800154c <SystemClock_Config+0xcc>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c0:	2300      	movs	r3, #0
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	4b22      	ldr	r3, [pc, #136]	; (8001550 <SystemClock_Config+0xd0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a21      	ldr	r2, [pc, #132]	; (8001550 <SystemClock_Config+0xd0>)
 80014ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <SystemClock_Config+0xd0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014dc:	2302      	movs	r3, #2
 80014de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014e0:	2301      	movs	r3, #1
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014e4:	2310      	movs	r3, #16
 80014e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e8:	2302      	movs	r3, #2
 80014ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014ec:	2300      	movs	r3, #0
 80014ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014f0:	2308      	movs	r3, #8
 80014f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014f4:	23a8      	movs	r3, #168	; 0xa8
 80014f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014f8:	2302      	movs	r3, #2
 80014fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014fc:	2304      	movs	r3, #4
 80014fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001500:	f107 0320 	add.w	r3, r7, #32
 8001504:	4618      	mov	r0, r3
 8001506:	f001 fe03 	bl	8003110 <HAL_RCC_OscConfig>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001510:	f000 fbe6 	bl	8001ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001514:	230f      	movs	r3, #15
 8001516:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001518:	2302      	movs	r3, #2
 800151a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001520:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001524:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	2105      	movs	r1, #5
 8001532:	4618      	mov	r0, r3
 8001534:	f002 f864 	bl	8003600 <HAL_RCC_ClockConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800153e:	f000 fbcf 	bl	8001ce0 <Error_Handler>
  }
}
 8001542:	bf00      	nop
 8001544:	3750      	adds	r7, #80	; 0x50
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800
 8001550:	40007000 	.word	0x40007000

08001554 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08c      	sub	sp, #48	; 0x30
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	2224      	movs	r2, #36	; 0x24
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f004 f952 	bl	800580c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001570:	4b22      	ldr	r3, [pc, #136]	; (80015fc <MX_TIM1_Init+0xa8>)
 8001572:	4a23      	ldr	r2, [pc, #140]	; (8001600 <MX_TIM1_Init+0xac>)
 8001574:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001576:	4b21      	ldr	r3, [pc, #132]	; (80015fc <MX_TIM1_Init+0xa8>)
 8001578:	2200      	movs	r2, #0
 800157a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157c:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <MX_TIM1_Init+0xa8>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001582:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <MX_TIM1_Init+0xa8>)
 8001584:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001588:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158a:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <MX_TIM1_Init+0xa8>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001590:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <MX_TIM1_Init+0xa8>)
 8001592:	2200      	movs	r2, #0
 8001594:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001596:	4b19      	ldr	r3, [pc, #100]	; (80015fc <MX_TIM1_Init+0xa8>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800159c:	2303      	movs	r3, #3
 800159e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015a4:	2301      	movs	r3, #1
 80015a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015b0:	2300      	movs	r3, #0
 80015b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015b4:	2301      	movs	r3, #1
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	4619      	mov	r1, r3
 80015c6:	480d      	ldr	r0, [pc, #52]	; (80015fc <MX_TIM1_Init+0xa8>)
 80015c8:	f002 fb53 	bl	8003c72 <HAL_TIM_Encoder_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80015d2:	f000 fb85 	bl	8001ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	4619      	mov	r1, r3
 80015e2:	4806      	ldr	r0, [pc, #24]	; (80015fc <MX_TIM1_Init+0xa8>)
 80015e4:	f003 f990 	bl	8004908 <HAL_TIMEx_MasterConfigSynchronization>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80015ee:	f000 fb77 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	3730      	adds	r7, #48	; 0x30
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200001fc 	.word	0x200001fc
 8001600:	40010000 	.word	0x40010000

08001604 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08c      	sub	sp, #48	; 0x30
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	2224      	movs	r2, #36	; 0x24
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f004 f8fa 	bl	800580c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001620:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <MX_TIM2_Init+0xa4>)
 8001622:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001626:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001628:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <MX_TIM2_Init+0xa4>)
 800162a:	2200      	movs	r2, #0
 800162c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162e:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <MX_TIM2_Init+0xa4>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001634:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <MX_TIM2_Init+0xa4>)
 8001636:	f04f 32ff 	mov.w	r2, #4294967295
 800163a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163c:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <MX_TIM2_Init+0xa4>)
 800163e:	2200      	movs	r2, #0
 8001640:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001642:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <MX_TIM2_Init+0xa4>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001648:	2303      	movs	r3, #3
 800164a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800164c:	2300      	movs	r3, #0
 800164e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001650:	2301      	movs	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001660:	2301      	movs	r3, #1
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001664:	2300      	movs	r3, #0
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800166c:	f107 030c 	add.w	r3, r7, #12
 8001670:	4619      	mov	r1, r3
 8001672:	480d      	ldr	r0, [pc, #52]	; (80016a8 <MX_TIM2_Init+0xa4>)
 8001674:	f002 fafd 	bl	8003c72 <HAL_TIM_Encoder_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800167e:	f000 fb2f 	bl	8001ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	4619      	mov	r1, r3
 800168e:	4806      	ldr	r0, [pc, #24]	; (80016a8 <MX_TIM2_Init+0xa4>)
 8001690:	f003 f93a 	bl	8004908 <HAL_TIMEx_MasterConfigSynchronization>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800169a:	f000 fb21 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	3730      	adds	r7, #48	; 0x30
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000244 	.word	0x20000244

080016ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08c      	sub	sp, #48	; 0x30
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016b2:	f107 030c 	add.w	r3, r7, #12
 80016b6:	2224      	movs	r2, #36	; 0x24
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f004 f8a6 	bl	800580c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016c8:	4b20      	ldr	r3, [pc, #128]	; (800174c <MX_TIM3_Init+0xa0>)
 80016ca:	4a21      	ldr	r2, [pc, #132]	; (8001750 <MX_TIM3_Init+0xa4>)
 80016cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016ce:	4b1f      	ldr	r3, [pc, #124]	; (800174c <MX_TIM3_Init+0xa0>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d4:	4b1d      	ldr	r3, [pc, #116]	; (800174c <MX_TIM3_Init+0xa0>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016da:	4b1c      	ldr	r3, [pc, #112]	; (800174c <MX_TIM3_Init+0xa0>)
 80016dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e2:	4b1a      	ldr	r3, [pc, #104]	; (800174c <MX_TIM3_Init+0xa0>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e8:	4b18      	ldr	r3, [pc, #96]	; (800174c <MX_TIM3_Init+0xa0>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016ee:	2303      	movs	r3, #3
 80016f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016f6:	2301      	movs	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001702:	2300      	movs	r3, #0
 8001704:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001706:	2301      	movs	r3, #1
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800170a:	2300      	movs	r3, #0
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001712:	f107 030c 	add.w	r3, r7, #12
 8001716:	4619      	mov	r1, r3
 8001718:	480c      	ldr	r0, [pc, #48]	; (800174c <MX_TIM3_Init+0xa0>)
 800171a:	f002 faaa 	bl	8003c72 <HAL_TIM_Encoder_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001724:	f000 fadc 	bl	8001ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001728:	2300      	movs	r3, #0
 800172a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172c:	2300      	movs	r3, #0
 800172e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001730:	1d3b      	adds	r3, r7, #4
 8001732:	4619      	mov	r1, r3
 8001734:	4805      	ldr	r0, [pc, #20]	; (800174c <MX_TIM3_Init+0xa0>)
 8001736:	f003 f8e7 	bl	8004908 <HAL_TIMEx_MasterConfigSynchronization>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001740:	f000 face 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001744:	bf00      	nop
 8001746:	3730      	adds	r7, #48	; 0x30
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	2000028c 	.word	0x2000028c
 8001750:	40000400 	.word	0x40000400

08001754 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08e      	sub	sp, #56	; 0x38
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800175a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001768:	f107 0320 	add.w	r3, r7, #32
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
 8001780:	615a      	str	r2, [r3, #20]
 8001782:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001784:	4b3d      	ldr	r3, [pc, #244]	; (800187c <MX_TIM4_Init+0x128>)
 8001786:	4a3e      	ldr	r2, [pc, #248]	; (8001880 <MX_TIM4_Init+0x12c>)
 8001788:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 800178a:	4b3c      	ldr	r3, [pc, #240]	; (800187c <MX_TIM4_Init+0x128>)
 800178c:	2253      	movs	r2, #83	; 0x53
 800178e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001790:	4b3a      	ldr	r3, [pc, #232]	; (800187c <MX_TIM4_Init+0x128>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001796:	4b39      	ldr	r3, [pc, #228]	; (800187c <MX_TIM4_Init+0x128>)
 8001798:	f240 32e7 	movw	r2, #999	; 0x3e7
 800179c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800179e:	4b37      	ldr	r3, [pc, #220]	; (800187c <MX_TIM4_Init+0x128>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a4:	4b35      	ldr	r3, [pc, #212]	; (800187c <MX_TIM4_Init+0x128>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017aa:	4834      	ldr	r0, [pc, #208]	; (800187c <MX_TIM4_Init+0x128>)
 80017ac:	f002 f948 	bl	8003a40 <HAL_TIM_Base_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80017b6:	f000 fa93 	bl	8001ce0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017c4:	4619      	mov	r1, r3
 80017c6:	482d      	ldr	r0, [pc, #180]	; (800187c <MX_TIM4_Init+0x128>)
 80017c8:	f002 fcc4 	bl	8004154 <HAL_TIM_ConfigClockSource>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80017d2:	f000 fa85 	bl	8001ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80017d6:	4829      	ldr	r0, [pc, #164]	; (800187c <MX_TIM4_Init+0x128>)
 80017d8:	f002 f9f2 	bl	8003bc0 <HAL_TIM_PWM_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80017e2:	f000 fa7d 	bl	8001ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e6:	2300      	movs	r3, #0
 80017e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017ee:	f107 0320 	add.w	r3, r7, #32
 80017f2:	4619      	mov	r1, r3
 80017f4:	4821      	ldr	r0, [pc, #132]	; (800187c <MX_TIM4_Init+0x128>)
 80017f6:	f003 f887 	bl	8004908 <HAL_TIMEx_MasterConfigSynchronization>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001800:	f000 fa6e 	bl	8001ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001804:	2360      	movs	r3, #96	; 0x60
 8001806:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	2200      	movs	r2, #0
 8001818:	4619      	mov	r1, r3
 800181a:	4818      	ldr	r0, [pc, #96]	; (800187c <MX_TIM4_Init+0x128>)
 800181c:	f002 fbd8 	bl	8003fd0 <HAL_TIM_PWM_ConfigChannel>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001826:	f000 fa5b 	bl	8001ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	2204      	movs	r2, #4
 800182e:	4619      	mov	r1, r3
 8001830:	4812      	ldr	r0, [pc, #72]	; (800187c <MX_TIM4_Init+0x128>)
 8001832:	f002 fbcd 	bl	8003fd0 <HAL_TIM_PWM_ConfigChannel>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 800183c:	f000 fa50 	bl	8001ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	2208      	movs	r2, #8
 8001844:	4619      	mov	r1, r3
 8001846:	480d      	ldr	r0, [pc, #52]	; (800187c <MX_TIM4_Init+0x128>)
 8001848:	f002 fbc2 	bl	8003fd0 <HAL_TIM_PWM_ConfigChannel>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001852:	f000 fa45 	bl	8001ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	220c      	movs	r2, #12
 800185a:	4619      	mov	r1, r3
 800185c:	4807      	ldr	r0, [pc, #28]	; (800187c <MX_TIM4_Init+0x128>)
 800185e:	f002 fbb7 	bl	8003fd0 <HAL_TIM_PWM_ConfigChannel>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001868:	f000 fa3a 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800186c:	4803      	ldr	r0, [pc, #12]	; (800187c <MX_TIM4_Init+0x128>)
 800186e:	f000 fbc5 	bl	8001ffc <HAL_TIM_MspPostInit>

}
 8001872:	bf00      	nop
 8001874:	3738      	adds	r7, #56	; 0x38
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	200002d4 	.word	0x200002d4
 8001880:	40000800 	.word	0x40000800

08001884 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08c      	sub	sp, #48	; 0x30
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800188a:	f107 030c 	add.w	r3, r7, #12
 800188e:	2224      	movs	r2, #36	; 0x24
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f003 ffba 	bl	800580c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80018a0:	4b20      	ldr	r3, [pc, #128]	; (8001924 <MX_TIM5_Init+0xa0>)
 80018a2:	4a21      	ldr	r2, [pc, #132]	; (8001928 <MX_TIM5_Init+0xa4>)
 80018a4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80018a6:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <MX_TIM5_Init+0xa0>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <MX_TIM5_Init+0xa0>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80018b2:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <MX_TIM5_Init+0xa0>)
 80018b4:	f04f 32ff 	mov.w	r2, #4294967295
 80018b8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ba:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <MX_TIM5_Init+0xa0>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c0:	4b18      	ldr	r3, [pc, #96]	; (8001924 <MX_TIM5_Init+0xa0>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018c6:	2303      	movs	r3, #3
 80018c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018ce:	2301      	movs	r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018de:	2301      	movs	r3, #1
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018e2:	2300      	movs	r3, #0
 80018e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80018ea:	f107 030c 	add.w	r3, r7, #12
 80018ee:	4619      	mov	r1, r3
 80018f0:	480c      	ldr	r0, [pc, #48]	; (8001924 <MX_TIM5_Init+0xa0>)
 80018f2:	f002 f9be 	bl	8003c72 <HAL_TIM_Encoder_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80018fc:	f000 f9f0 	bl	8001ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001900:	2300      	movs	r3, #0
 8001902:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	4619      	mov	r1, r3
 800190c:	4805      	ldr	r0, [pc, #20]	; (8001924 <MX_TIM5_Init+0xa0>)
 800190e:	f002 fffb 	bl	8004908 <HAL_TIMEx_MasterConfigSynchronization>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001918:	f000 f9e2 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800191c:	bf00      	nop
 800191e:	3730      	adds	r7, #48	; 0x30
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	2000031c 	.word	0x2000031c
 8001928:	40000c00 	.word	0x40000c00

0800192c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b096      	sub	sp, #88	; 0x58
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001932:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001940:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800194a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	611a      	str	r2, [r3, #16]
 800195a:	615a      	str	r2, [r3, #20]
 800195c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	2220      	movs	r2, #32
 8001962:	2100      	movs	r1, #0
 8001964:	4618      	mov	r0, r3
 8001966:	f003 ff51 	bl	800580c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800196a:	4b44      	ldr	r3, [pc, #272]	; (8001a7c <MX_TIM8_Init+0x150>)
 800196c:	4a44      	ldr	r2, [pc, #272]	; (8001a80 <MX_TIM8_Init+0x154>)
 800196e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 8001970:	4b42      	ldr	r3, [pc, #264]	; (8001a7c <MX_TIM8_Init+0x150>)
 8001972:	22a7      	movs	r2, #167	; 0xa7
 8001974:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001976:	4b41      	ldr	r3, [pc, #260]	; (8001a7c <MX_TIM8_Init+0x150>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 800197c:	4b3f      	ldr	r3, [pc, #252]	; (8001a7c <MX_TIM8_Init+0x150>)
 800197e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001982:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001984:	4b3d      	ldr	r3, [pc, #244]	; (8001a7c <MX_TIM8_Init+0x150>)
 8001986:	2200      	movs	r2, #0
 8001988:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800198a:	4b3c      	ldr	r3, [pc, #240]	; (8001a7c <MX_TIM8_Init+0x150>)
 800198c:	2200      	movs	r2, #0
 800198e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001990:	4b3a      	ldr	r3, [pc, #232]	; (8001a7c <MX_TIM8_Init+0x150>)
 8001992:	2200      	movs	r2, #0
 8001994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001996:	4839      	ldr	r0, [pc, #228]	; (8001a7c <MX_TIM8_Init+0x150>)
 8001998:	f002 f852 	bl	8003a40 <HAL_TIM_Base_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80019a2:	f000 f99d 	bl	8001ce0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019aa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80019ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019b0:	4619      	mov	r1, r3
 80019b2:	4832      	ldr	r0, [pc, #200]	; (8001a7c <MX_TIM8_Init+0x150>)
 80019b4:	f002 fbce 	bl	8004154 <HAL_TIM_ConfigClockSource>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80019be:	f000 f98f 	bl	8001ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80019c2:	482e      	ldr	r0, [pc, #184]	; (8001a7c <MX_TIM8_Init+0x150>)
 80019c4:	f002 f8fc 	bl	8003bc0 <HAL_TIM_PWM_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80019ce:	f000 f987 	bl	8001ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d2:	2300      	movs	r3, #0
 80019d4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80019da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019de:	4619      	mov	r1, r3
 80019e0:	4826      	ldr	r0, [pc, #152]	; (8001a7c <MX_TIM8_Init+0x150>)
 80019e2:	f002 ff91 	bl	8004908 <HAL_TIMEx_MasterConfigSynchronization>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80019ec:	f000 f978 	bl	8001ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019f0:	2360      	movs	r3, #96	; 0x60
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019fc:	2300      	movs	r3, #0
 80019fe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a04:	2300      	movs	r3, #0
 8001a06:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a10:	2208      	movs	r2, #8
 8001a12:	4619      	mov	r1, r3
 8001a14:	4819      	ldr	r0, [pc, #100]	; (8001a7c <MX_TIM8_Init+0x150>)
 8001a16:	f002 fadb 	bl	8003fd0 <HAL_TIM_PWM_ConfigChannel>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001a20:	f000 f95e 	bl	8001ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a28:	220c      	movs	r2, #12
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4813      	ldr	r0, [pc, #76]	; (8001a7c <MX_TIM8_Init+0x150>)
 8001a2e:	f002 facf 	bl	8003fd0 <HAL_TIM_PWM_ConfigChannel>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001a38:	f000 f952 	bl	8001ce0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a54:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4807      	ldr	r0, [pc, #28]	; (8001a7c <MX_TIM8_Init+0x150>)
 8001a60:	f002 ffce 	bl	8004a00 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001a6a:	f000 f939 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001a6e:	4803      	ldr	r0, [pc, #12]	; (8001a7c <MX_TIM8_Init+0x150>)
 8001a70:	f000 fac4 	bl	8001ffc <HAL_TIM_MspPostInit>

}
 8001a74:	bf00      	nop
 8001a76:	3758      	adds	r7, #88	; 0x58
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000364 	.word	0x20000364
 8001a80:	40010400 	.word	0x40010400

08001a84 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08c      	sub	sp, #48	; 0x30
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a8a:	f107 0320 	add.w	r3, r7, #32
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
 8001aa4:	611a      	str	r2, [r3, #16]
 8001aa6:	615a      	str	r2, [r3, #20]
 8001aa8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001aaa:	4b2b      	ldr	r3, [pc, #172]	; (8001b58 <MX_TIM9_Init+0xd4>)
 8001aac:	4a2b      	ldr	r2, [pc, #172]	; (8001b5c <MX_TIM9_Init+0xd8>)
 8001aae:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 168-1;
 8001ab0:	4b29      	ldr	r3, [pc, #164]	; (8001b58 <MX_TIM9_Init+0xd4>)
 8001ab2:	22a7      	movs	r2, #167	; 0xa7
 8001ab4:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab6:	4b28      	ldr	r3, [pc, #160]	; (8001b58 <MX_TIM9_Init+0xd4>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8001abc:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <MX_TIM9_Init+0xd4>)
 8001abe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ac2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac4:	4b24      	ldr	r3, [pc, #144]	; (8001b58 <MX_TIM9_Init+0xd4>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aca:	4b23      	ldr	r3, [pc, #140]	; (8001b58 <MX_TIM9_Init+0xd4>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001ad0:	4821      	ldr	r0, [pc, #132]	; (8001b58 <MX_TIM9_Init+0xd4>)
 8001ad2:	f001 ffb5 	bl	8003a40 <HAL_TIM_Base_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001adc:	f000 f900 	bl	8001ce0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001ae6:	f107 0320 	add.w	r3, r7, #32
 8001aea:	4619      	mov	r1, r3
 8001aec:	481a      	ldr	r0, [pc, #104]	; (8001b58 <MX_TIM9_Init+0xd4>)
 8001aee:	f002 fb31 	bl	8004154 <HAL_TIM_ConfigClockSource>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001af8:	f000 f8f2 	bl	8001ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001afc:	4816      	ldr	r0, [pc, #88]	; (8001b58 <MX_TIM9_Init+0xd4>)
 8001afe:	f002 f85f 	bl	8003bc0 <HAL_TIM_PWM_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001b08:	f000 f8ea 	bl	8001ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b0c:	2360      	movs	r3, #96	; 0x60
 8001b0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	2200      	movs	r2, #0
 8001b20:	4619      	mov	r1, r3
 8001b22:	480d      	ldr	r0, [pc, #52]	; (8001b58 <MX_TIM9_Init+0xd4>)
 8001b24:	f002 fa54 	bl	8003fd0 <HAL_TIM_PWM_ConfigChannel>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8001b2e:	f000 f8d7 	bl	8001ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	2204      	movs	r2, #4
 8001b36:	4619      	mov	r1, r3
 8001b38:	4807      	ldr	r0, [pc, #28]	; (8001b58 <MX_TIM9_Init+0xd4>)
 8001b3a:	f002 fa49 	bl	8003fd0 <HAL_TIM_PWM_ConfigChannel>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 8001b44:	f000 f8cc 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001b48:	4803      	ldr	r0, [pc, #12]	; (8001b58 <MX_TIM9_Init+0xd4>)
 8001b4a:	f000 fa57 	bl	8001ffc <HAL_TIM_MspPostInit>

}
 8001b4e:	bf00      	nop
 8001b50:	3730      	adds	r7, #48	; 0x30
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200003ac 	.word	0x200003ac
 8001b5c:	40014000 	.word	0x40014000

08001b60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <MX_USART3_UART_Init+0x4c>)
 8001b66:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <MX_USART3_UART_Init+0x50>)
 8001b68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <MX_USART3_UART_Init+0x4c>)
 8001b6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <MX_USART3_UART_Init+0x4c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <MX_USART3_UART_Init+0x4c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <MX_USART3_UART_Init+0x4c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <MX_USART3_UART_Init+0x4c>)
 8001b86:	220c      	movs	r2, #12
 8001b88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <MX_USART3_UART_Init+0x4c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <MX_USART3_UART_Init+0x4c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b96:	4805      	ldr	r0, [pc, #20]	; (8001bac <MX_USART3_UART_Init+0x4c>)
 8001b98:	f002 ff98 	bl	8004acc <HAL_UART_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ba2:	f000 f89d 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200003f4 	.word	0x200003f4
 8001bb0:	40004800 	.word	0x40004800

08001bb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <MX_DMA_Init+0x3c>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a0b      	ldr	r2, [pc, #44]	; (8001bf0 <MX_DMA_Init+0x3c>)
 8001bc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <MX_DMA_Init+0x3c>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	200c      	movs	r0, #12
 8001bdc:	f000 fda7 	bl	800272e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001be0:	200c      	movs	r0, #12
 8001be2:	f000 fdc0 	bl	8002766 <HAL_NVIC_EnableIRQ>

}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800

08001bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08a      	sub	sp, #40	; 0x28
 8001bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	60da      	str	r2, [r3, #12]
 8001c08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	4b31      	ldr	r3, [pc, #196]	; (8001cd4 <MX_GPIO_Init+0xe0>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a30      	ldr	r2, [pc, #192]	; (8001cd4 <MX_GPIO_Init+0xe0>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b2e      	ldr	r3, [pc, #184]	; (8001cd4 <MX_GPIO_Init+0xe0>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b2a      	ldr	r3, [pc, #168]	; (8001cd4 <MX_GPIO_Init+0xe0>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a29      	ldr	r2, [pc, #164]	; (8001cd4 <MX_GPIO_Init+0xe0>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b27      	ldr	r3, [pc, #156]	; (8001cd4 <MX_GPIO_Init+0xe0>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <MX_GPIO_Init+0xe0>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a22      	ldr	r2, [pc, #136]	; (8001cd4 <MX_GPIO_Init+0xe0>)
 8001c4c:	f043 0302 	orr.w	r3, r3, #2
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <MX_GPIO_Init+0xe0>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	4b1c      	ldr	r3, [pc, #112]	; (8001cd4 <MX_GPIO_Init+0xe0>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a1b      	ldr	r2, [pc, #108]	; (8001cd4 <MX_GPIO_Init+0xe0>)
 8001c68:	f043 0308 	orr.w	r3, r3, #8
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <MX_GPIO_Init+0xe0>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c80:	4815      	ldr	r0, [pc, #84]	; (8001cd8 <MX_GPIO_Init+0xe4>)
 8001c82:	f001 fa11 	bl	80030a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001c86:	2200      	movs	r2, #0
 8001c88:	2140      	movs	r1, #64	; 0x40
 8001c8a:	4814      	ldr	r0, [pc, #80]	; (8001cdc <MX_GPIO_Init+0xe8>)
 8001c8c:	f001 fa0c 	bl	80030a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c96:	2301      	movs	r3, #1
 8001c98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca2:	f107 0314 	add.w	r3, r7, #20
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	480b      	ldr	r0, [pc, #44]	; (8001cd8 <MX_GPIO_Init+0xe4>)
 8001caa:	f001 f861 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cae:	2340      	movs	r3, #64	; 0x40
 8001cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbe:	f107 0314 	add.w	r3, r7, #20
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4805      	ldr	r0, [pc, #20]	; (8001cdc <MX_GPIO_Init+0xe8>)
 8001cc6:	f001 f853 	bl	8002d70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cca:	bf00      	nop
 8001ccc:	3728      	adds	r7, #40	; 0x28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40020800 	.word	0x40020800
 8001cdc:	40020400 	.word	0x40020400

08001ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce4:	b672      	cpsid	i
}
 8001ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <Error_Handler+0x8>
	...

08001cec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <HAL_MspInit+0x4c>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	4a0f      	ldr	r2, [pc, #60]	; (8001d38 <HAL_MspInit+0x4c>)
 8001cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d00:	6453      	str	r3, [r2, #68]	; 0x44
 8001d02:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <HAL_MspInit+0x4c>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	603b      	str	r3, [r7, #0]
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_MspInit+0x4c>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	4a08      	ldr	r2, [pc, #32]	; (8001d38 <HAL_MspInit+0x4c>)
 8001d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <HAL_MspInit+0x4c>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800

08001d3c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b090      	sub	sp, #64	; 0x40
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a78      	ldr	r2, [pc, #480]	; (8001f3c <HAL_TIM_Encoder_MspInit+0x200>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d135      	bne.n	8001dca <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d62:	4b77      	ldr	r3, [pc, #476]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x204>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	4a76      	ldr	r2, [pc, #472]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x204>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6e:	4b74      	ldr	r3, [pc, #464]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x204>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d78:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7e:	4b70      	ldr	r3, [pc, #448]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x204>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4a6f      	ldr	r2, [pc, #444]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x204>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8a:	4b6d      	ldr	r3, [pc, #436]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x204>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_J1_Pin|ENC_B_J1_Pin;
 8001d96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da4:	2300      	movs	r3, #0
 8001da6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001da8:	2301      	movs	r3, #1
 8001daa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001db0:	4619      	mov	r1, r3
 8001db2:	4864      	ldr	r0, [pc, #400]	; (8001f44 <HAL_TIM_Encoder_MspInit+0x208>)
 8001db4:	f000 ffdc 	bl	8002d70 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 0);
 8001db8:	2200      	movs	r2, #0
 8001dba:	2102      	movs	r1, #2
 8001dbc:	2018      	movs	r0, #24
 8001dbe:	f000 fcb6 	bl	800272e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001dc2:	2018      	movs	r0, #24
 8001dc4:	f000 fccf 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001dc8:	e0b3      	b.n	8001f32 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM2)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd2:	d14b      	bne.n	8001e6c <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	623b      	str	r3, [r7, #32]
 8001dd8:	4b59      	ldr	r3, [pc, #356]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x204>)
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	4a58      	ldr	r2, [pc, #352]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x204>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	6413      	str	r3, [r2, #64]	; 0x40
 8001de4:	4b56      	ldr	r3, [pc, #344]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x204>)
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	623b      	str	r3, [r7, #32]
 8001dee:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df0:	2300      	movs	r3, #0
 8001df2:	61fb      	str	r3, [r7, #28]
 8001df4:	4b52      	ldr	r3, [pc, #328]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x204>)
 8001df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df8:	4a51      	ldr	r2, [pc, #324]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x204>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8001e00:	4b4f      	ldr	r3, [pc, #316]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x204>)
 8001e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	61fb      	str	r3, [r7, #28]
 8001e0a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61bb      	str	r3, [r7, #24]
 8001e10:	4b4b      	ldr	r3, [pc, #300]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x204>)
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	4a4a      	ldr	r2, [pc, #296]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x204>)
 8001e16:	f043 0302 	orr.w	r3, r3, #2
 8001e1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1c:	4b48      	ldr	r3, [pc, #288]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x204>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	61bb      	str	r3, [r7, #24]
 8001e26:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENC_A_J2_Pin;
 8001e28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e36:	2300      	movs	r3, #0
 8001e38:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC_A_J2_GPIO_Port, &GPIO_InitStruct);
 8001e3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e42:	4619      	mov	r1, r3
 8001e44:	483f      	ldr	r0, [pc, #252]	; (8001f44 <HAL_TIM_Encoder_MspInit+0x208>)
 8001e46:	f000 ff93 	bl	8002d70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC_B_J2_Pin;
 8001e4a:	2308      	movs	r3, #8
 8001e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e56:	2300      	movs	r3, #0
 8001e58:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC_B_J2_GPIO_Port, &GPIO_InitStruct);
 8001e5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e62:	4619      	mov	r1, r3
 8001e64:	4838      	ldr	r0, [pc, #224]	; (8001f48 <HAL_TIM_Encoder_MspInit+0x20c>)
 8001e66:	f000 ff83 	bl	8002d70 <HAL_GPIO_Init>
}
 8001e6a:	e062      	b.n	8001f32 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM3)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a36      	ldr	r2, [pc, #216]	; (8001f4c <HAL_TIM_Encoder_MspInit+0x210>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d12c      	bne.n	8001ed0 <HAL_TIM_Encoder_MspInit+0x194>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	4b31      	ldr	r3, [pc, #196]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x204>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	4a30      	ldr	r2, [pc, #192]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x204>)
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	6413      	str	r3, [r2, #64]	; 0x40
 8001e86:	4b2e      	ldr	r3, [pc, #184]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x204>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	4b2a      	ldr	r3, [pc, #168]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x204>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a29      	ldr	r2, [pc, #164]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x204>)
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b27      	ldr	r3, [pc, #156]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x204>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC_A_J3_Pin|ENC_B_J3_Pin;
 8001eae:	2330      	movs	r3, #48	; 0x30
 8001eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	481f      	ldr	r0, [pc, #124]	; (8001f48 <HAL_TIM_Encoder_MspInit+0x20c>)
 8001eca:	f000 ff51 	bl	8002d70 <HAL_GPIO_Init>
}
 8001ece:	e030      	b.n	8001f32 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM5)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a1e      	ldr	r2, [pc, #120]	; (8001f50 <HAL_TIM_Encoder_MspInit+0x214>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d12b      	bne.n	8001f32 <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x204>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	4a17      	ldr	r2, [pc, #92]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x204>)
 8001ee4:	f043 0308 	orr.w	r3, r3, #8
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x204>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x204>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a10      	ldr	r2, [pc, #64]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x204>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x204>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_A_J4_Pin|ENC_B_J4_Pin;
 8001f12:	2303      	movs	r3, #3
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001f22:	2302      	movs	r3, #2
 8001f24:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4805      	ldr	r0, [pc, #20]	; (8001f44 <HAL_TIM_Encoder_MspInit+0x208>)
 8001f2e:	f000 ff1f 	bl	8002d70 <HAL_GPIO_Init>
}
 8001f32:	bf00      	nop
 8001f34:	3740      	adds	r7, #64	; 0x40
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40010000 	.word	0x40010000
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40020000 	.word	0x40020000
 8001f48:	40020400 	.word	0x40020400
 8001f4c:	40000400 	.word	0x40000400
 8001f50:	40000c00 	.word	0x40000c00

08001f54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a22      	ldr	r2, [pc, #136]	; (8001fec <HAL_TIM_Base_MspInit+0x98>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d10e      	bne.n	8001f84 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <HAL_TIM_Base_MspInit+0x9c>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	4a20      	ldr	r2, [pc, #128]	; (8001ff0 <HAL_TIM_Base_MspInit+0x9c>)
 8001f70:	f043 0304 	orr.w	r3, r3, #4
 8001f74:	6413      	str	r3, [r2, #64]	; 0x40
 8001f76:	4b1e      	ldr	r3, [pc, #120]	; (8001ff0 <HAL_TIM_Base_MspInit+0x9c>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001f82:	e02e      	b.n	8001fe2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM8)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a1a      	ldr	r2, [pc, #104]	; (8001ff4 <HAL_TIM_Base_MspInit+0xa0>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d10e      	bne.n	8001fac <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <HAL_TIM_Base_MspInit+0x9c>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	4a16      	ldr	r2, [pc, #88]	; (8001ff0 <HAL_TIM_Base_MspInit+0x9c>)
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9e:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <HAL_TIM_Base_MspInit+0x9c>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	693b      	ldr	r3, [r7, #16]
}
 8001faa:	e01a      	b.n	8001fe2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM9)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a11      	ldr	r2, [pc, #68]	; (8001ff8 <HAL_TIM_Base_MspInit+0xa4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d115      	bne.n	8001fe2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <HAL_TIM_Base_MspInit+0x9c>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	4a0c      	ldr	r2, [pc, #48]	; (8001ff0 <HAL_TIM_Base_MspInit+0x9c>)
 8001fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <HAL_TIM_Base_MspInit+0x9c>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 0);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2102      	movs	r1, #2
 8001fd6:	2018      	movs	r0, #24
 8001fd8:	f000 fba9 	bl	800272e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001fdc:	2018      	movs	r0, #24
 8001fde:	f000 fbc2 	bl	8002766 <HAL_NVIC_EnableIRQ>
}
 8001fe2:	bf00      	nop
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40000800 	.word	0x40000800
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40010400 	.word	0x40010400
 8001ff8:	40014000 	.word	0x40014000

08001ffc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08a      	sub	sp, #40	; 0x28
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a37      	ldr	r2, [pc, #220]	; (80020f8 <HAL_TIM_MspPostInit+0xfc>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d11f      	bne.n	800205e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	4b36      	ldr	r3, [pc, #216]	; (80020fc <HAL_TIM_MspPostInit+0x100>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	4a35      	ldr	r2, [pc, #212]	; (80020fc <HAL_TIM_MspPostInit+0x100>)
 8002028:	f043 0308 	orr.w	r3, r3, #8
 800202c:	6313      	str	r3, [r2, #48]	; 0x30
 800202e:	4b33      	ldr	r3, [pc, #204]	; (80020fc <HAL_TIM_MspPostInit+0x100>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693b      	ldr	r3, [r7, #16]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM3_A_Pin|PWM3_B_Pin|PWM2_A_Pin|PWM2_B_Pin;
 800203a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800203e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	2302      	movs	r3, #2
 8002042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	2300      	movs	r3, #0
 800204a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800204c:	2302      	movs	r3, #2
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	4619      	mov	r1, r3
 8002056:	482a      	ldr	r0, [pc, #168]	; (8002100 <HAL_TIM_MspPostInit+0x104>)
 8002058:	f000 fe8a 	bl	8002d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800205c:	e047      	b.n	80020ee <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a28      	ldr	r2, [pc, #160]	; (8002104 <HAL_TIM_MspPostInit+0x108>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d11f      	bne.n	80020a8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	4b23      	ldr	r3, [pc, #140]	; (80020fc <HAL_TIM_MspPostInit+0x100>)
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002070:	4a22      	ldr	r2, [pc, #136]	; (80020fc <HAL_TIM_MspPostInit+0x100>)
 8002072:	f043 0304 	orr.w	r3, r3, #4
 8002076:	6313      	str	r3, [r2, #48]	; 0x30
 8002078:	4b20      	ldr	r3, [pc, #128]	; (80020fc <HAL_TIM_MspPostInit+0x100>)
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_A_Pin|PWM1_B_Pin;
 8002084:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002092:	2300      	movs	r3, #0
 8002094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002096:	2303      	movs	r3, #3
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	4619      	mov	r1, r3
 80020a0:	4819      	ldr	r0, [pc, #100]	; (8002108 <HAL_TIM_MspPostInit+0x10c>)
 80020a2:	f000 fe65 	bl	8002d70 <HAL_GPIO_Init>
}
 80020a6:	e022      	b.n	80020ee <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM9)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a17      	ldr	r2, [pc, #92]	; (800210c <HAL_TIM_MspPostInit+0x110>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d11d      	bne.n	80020ee <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <HAL_TIM_MspPostInit+0x100>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a10      	ldr	r2, [pc, #64]	; (80020fc <HAL_TIM_MspPostInit+0x100>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <HAL_TIM_MspPostInit+0x100>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM4_A_Pin|PWM4_B_Pin;
 80020ce:	230c      	movs	r3, #12
 80020d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d2:	2302      	movs	r3, #2
 80020d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	2300      	movs	r3, #0
 80020dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80020de:	2303      	movs	r3, #3
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e2:	f107 0314 	add.w	r3, r7, #20
 80020e6:	4619      	mov	r1, r3
 80020e8:	4809      	ldr	r0, [pc, #36]	; (8002110 <HAL_TIM_MspPostInit+0x114>)
 80020ea:	f000 fe41 	bl	8002d70 <HAL_GPIO_Init>
}
 80020ee:	bf00      	nop
 80020f0:	3728      	adds	r7, #40	; 0x28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40000800 	.word	0x40000800
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020c00 	.word	0x40020c00
 8002104:	40010400 	.word	0x40010400
 8002108:	40020800 	.word	0x40020800
 800210c:	40014000 	.word	0x40014000
 8002110:	40020000 	.word	0x40020000

08002114 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08a      	sub	sp, #40	; 0x28
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a31      	ldr	r2, [pc, #196]	; (80021f8 <HAL_UART_MspInit+0xe4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d15b      	bne.n	80021ee <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	4b30      	ldr	r3, [pc, #192]	; (80021fc <HAL_UART_MspInit+0xe8>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	4a2f      	ldr	r2, [pc, #188]	; (80021fc <HAL_UART_MspInit+0xe8>)
 8002140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002144:	6413      	str	r3, [r2, #64]	; 0x40
 8002146:	4b2d      	ldr	r3, [pc, #180]	; (80021fc <HAL_UART_MspInit+0xe8>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	4b29      	ldr	r3, [pc, #164]	; (80021fc <HAL_UART_MspInit+0xe8>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a28      	ldr	r2, [pc, #160]	; (80021fc <HAL_UART_MspInit+0xe8>)
 800215c:	f043 0302 	orr.w	r3, r3, #2
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b26      	ldr	r3, [pc, #152]	; (80021fc <HAL_UART_MspInit+0xe8>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800216e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002174:	2302      	movs	r3, #2
 8002176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217c:	2303      	movs	r3, #3
 800217e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002180:	2307      	movs	r3, #7
 8002182:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	4619      	mov	r1, r3
 800218a:	481d      	ldr	r0, [pc, #116]	; (8002200 <HAL_UART_MspInit+0xec>)
 800218c:	f000 fdf0 	bl	8002d70 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002190:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <HAL_UART_MspInit+0xf0>)
 8002192:	4a1d      	ldr	r2, [pc, #116]	; (8002208 <HAL_UART_MspInit+0xf4>)
 8002194:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002196:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <HAL_UART_MspInit+0xf0>)
 8002198:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800219c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800219e:	4b19      	ldr	r3, [pc, #100]	; (8002204 <HAL_UART_MspInit+0xf0>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021a4:	4b17      	ldr	r3, [pc, #92]	; (8002204 <HAL_UART_MspInit+0xf0>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021aa:	4b16      	ldr	r3, [pc, #88]	; (8002204 <HAL_UART_MspInit+0xf0>)
 80021ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021b0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021b2:	4b14      	ldr	r3, [pc, #80]	; (8002204 <HAL_UART_MspInit+0xf0>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021b8:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_UART_MspInit+0xf0>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <HAL_UART_MspInit+0xf0>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <HAL_UART_MspInit+0xf0>)
 80021c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021ca:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021cc:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <HAL_UART_MspInit+0xf0>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80021d2:	480c      	ldr	r0, [pc, #48]	; (8002204 <HAL_UART_MspInit+0xf0>)
 80021d4:	f000 fae2 	bl	800279c <HAL_DMA_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80021de:	f7ff fd7f 	bl	8001ce0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a07      	ldr	r2, [pc, #28]	; (8002204 <HAL_UART_MspInit+0xf0>)
 80021e6:	639a      	str	r2, [r3, #56]	; 0x38
 80021e8:	4a06      	ldr	r2, [pc, #24]	; (8002204 <HAL_UART_MspInit+0xf0>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80021ee:	bf00      	nop
 80021f0:	3728      	adds	r7, #40	; 0x28
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40004800 	.word	0x40004800
 80021fc:	40023800 	.word	0x40023800
 8002200:	40020400 	.word	0x40020400
 8002204:	20000438 	.word	0x20000438
 8002208:	40026028 	.word	0x40026028

0800220c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002210:	e7fe      	b.n	8002210 <NMI_Handler+0x4>

08002212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002216:	e7fe      	b.n	8002216 <HardFault_Handler+0x4>

08002218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800221c:	e7fe      	b.n	800221c <MemManage_Handler+0x4>

0800221e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002222:	e7fe      	b.n	8002222 <BusFault_Handler+0x4>

08002224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002228:	e7fe      	b.n	8002228 <UsageFault_Handler+0x4>

0800222a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002258:	f000 f96e 	bl	8002538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800225c:	bf00      	nop
 800225e:	bd80      	pop	{r7, pc}

08002260 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002264:	4802      	ldr	r0, [pc, #8]	; (8002270 <DMA1_Stream1_IRQHandler+0x10>)
 8002266:	f000 fb47 	bl	80028f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000438 	.word	0x20000438

08002274 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002278:	4803      	ldr	r0, [pc, #12]	; (8002288 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800227a:	f001 fda0 	bl	8003dbe <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800227e:	4803      	ldr	r0, [pc, #12]	; (800228c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8002280:	f001 fd9d 	bl	8003dbe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}
 8002288:	200001fc 	.word	0x200001fc
 800228c:	200003ac 	.word	0x200003ac

08002290 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return 1;
 8002294:	2301      	movs	r3, #1
}
 8002296:	4618      	mov	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <_kill>:

int _kill(int pid, int sig)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022aa:	f003 fa85 	bl	80057b8 <__errno>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2216      	movs	r2, #22
 80022b2:	601a      	str	r2, [r3, #0]
  return -1;
 80022b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <_exit>:

void _exit (int status)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022c8:	f04f 31ff 	mov.w	r1, #4294967295
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ffe7 	bl	80022a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022d2:	e7fe      	b.n	80022d2 <_exit+0x12>

080022d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	e00a      	b.n	80022fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022e6:	f3af 8000 	nop.w
 80022ea:	4601      	mov	r1, r0
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	60ba      	str	r2, [r7, #8]
 80022f2:	b2ca      	uxtb	r2, r1
 80022f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	3301      	adds	r3, #1
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	429a      	cmp	r2, r3
 8002302:	dbf0      	blt.n	80022e6 <_read+0x12>
  }

  return len;
 8002304:	687b      	ldr	r3, [r7, #4]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b086      	sub	sp, #24
 8002312:	af00      	add	r7, sp, #0
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	e009      	b.n	8002334 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	60ba      	str	r2, [r7, #8]
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	3301      	adds	r3, #1
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	429a      	cmp	r2, r3
 800233a:	dbf1      	blt.n	8002320 <_write+0x12>
  }
  return len;
 800233c:	687b      	ldr	r3, [r7, #4]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <_close>:

int _close(int file)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800234e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800236e:	605a      	str	r2, [r3, #4]
  return 0;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <_isatty>:

int _isatty(int file)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002386:	2301      	movs	r3, #1
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023b8:	4a14      	ldr	r2, [pc, #80]	; (800240c <_sbrk+0x5c>)
 80023ba:	4b15      	ldr	r3, [pc, #84]	; (8002410 <_sbrk+0x60>)
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023c4:	4b13      	ldr	r3, [pc, #76]	; (8002414 <_sbrk+0x64>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d102      	bne.n	80023d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023cc:	4b11      	ldr	r3, [pc, #68]	; (8002414 <_sbrk+0x64>)
 80023ce:	4a12      	ldr	r2, [pc, #72]	; (8002418 <_sbrk+0x68>)
 80023d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <_sbrk+0x64>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d207      	bcs.n	80023f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023e0:	f003 f9ea 	bl	80057b8 <__errno>
 80023e4:	4603      	mov	r3, r0
 80023e6:	220c      	movs	r2, #12
 80023e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ea:	f04f 33ff 	mov.w	r3, #4294967295
 80023ee:	e009      	b.n	8002404 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <_sbrk+0x64>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023f6:	4b07      	ldr	r3, [pc, #28]	; (8002414 <_sbrk+0x64>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4413      	add	r3, r2
 80023fe:	4a05      	ldr	r2, [pc, #20]	; (8002414 <_sbrk+0x64>)
 8002400:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002402:	68fb      	ldr	r3, [r7, #12]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20020000 	.word	0x20020000
 8002410:	00000400 	.word	0x00000400
 8002414:	2000084c 	.word	0x2000084c
 8002418:	20000868 	.word	0x20000868

0800241c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <SystemInit+0x20>)
 8002422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002426:	4a05      	ldr	r2, [pc, #20]	; (800243c <SystemInit+0x20>)
 8002428:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800242c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002440:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002478 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002444:	480d      	ldr	r0, [pc, #52]	; (800247c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002446:	490e      	ldr	r1, [pc, #56]	; (8002480 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002448:	4a0e      	ldr	r2, [pc, #56]	; (8002484 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800244a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800244c:	e002      	b.n	8002454 <LoopCopyDataInit>

0800244e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800244e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002452:	3304      	adds	r3, #4

08002454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002458:	d3f9      	bcc.n	800244e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800245a:	4a0b      	ldr	r2, [pc, #44]	; (8002488 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800245c:	4c0b      	ldr	r4, [pc, #44]	; (800248c <LoopFillZerobss+0x26>)
  movs r3, #0
 800245e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002460:	e001      	b.n	8002466 <LoopFillZerobss>

08002462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002464:	3204      	adds	r2, #4

08002466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002468:	d3fb      	bcc.n	8002462 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800246a:	f7ff ffd7 	bl	800241c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800246e:	f003 f9a9 	bl	80057c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002472:	f7fe ff1b 	bl	80012ac <main>
  bx  lr    
 8002476:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002478:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800247c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002480:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002484:	0800a5ec 	.word	0x0800a5ec
  ldr r2, =_sbss
 8002488:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800248c:	20000864 	.word	0x20000864

08002490 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002490:	e7fe      	b.n	8002490 <ADC_IRQHandler>
	...

08002494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002498:	4b0e      	ldr	r3, [pc, #56]	; (80024d4 <HAL_Init+0x40>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a0d      	ldr	r2, [pc, #52]	; (80024d4 <HAL_Init+0x40>)
 800249e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_Init+0x40>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <HAL_Init+0x40>)
 80024aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024b0:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <HAL_Init+0x40>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a07      	ldr	r2, [pc, #28]	; (80024d4 <HAL_Init+0x40>)
 80024b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024bc:	2003      	movs	r0, #3
 80024be:	f000 f92b 	bl	8002718 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024c2:	200f      	movs	r0, #15
 80024c4:	f000 f808 	bl	80024d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024c8:	f7ff fc10 	bl	8001cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40023c00 	.word	0x40023c00

080024d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024e0:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_InitTick+0x54>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4b12      	ldr	r3, [pc, #72]	; (8002530 <HAL_InitTick+0x58>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	4619      	mov	r1, r3
 80024ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80024f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 f943 	bl	8002782 <HAL_SYSTICK_Config>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e00e      	b.n	8002524 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b0f      	cmp	r3, #15
 800250a:	d80a      	bhi.n	8002522 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800250c:	2200      	movs	r2, #0
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	f04f 30ff 	mov.w	r0, #4294967295
 8002514:	f000 f90b 	bl	800272e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002518:	4a06      	ldr	r2, [pc, #24]	; (8002534 <HAL_InitTick+0x5c>)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	e000      	b.n	8002524 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
}
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000000 	.word	0x20000000
 8002530:	20000008 	.word	0x20000008
 8002534:	20000004 	.word	0x20000004

08002538 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_IncTick+0x20>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	4b06      	ldr	r3, [pc, #24]	; (800255c <HAL_IncTick+0x24>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4413      	add	r3, r2
 8002548:	4a04      	ldr	r2, [pc, #16]	; (800255c <HAL_IncTick+0x24>)
 800254a:	6013      	str	r3, [r2, #0]
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20000008 	.word	0x20000008
 800255c:	20000850 	.word	0x20000850

08002560 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  return uwTick;
 8002564:	4b03      	ldr	r3, [pc, #12]	; (8002574 <HAL_GetTick+0x14>)
 8002566:	681b      	ldr	r3, [r3, #0]
}
 8002568:	4618      	mov	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	20000850 	.word	0x20000850

08002578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <__NVIC_SetPriorityGrouping+0x44>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002594:	4013      	ands	r3, r2
 8002596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025aa:	4a04      	ldr	r2, [pc, #16]	; (80025bc <__NVIC_SetPriorityGrouping+0x44>)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	60d3      	str	r3, [r2, #12]
}
 80025b0:	bf00      	nop
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c4:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <__NVIC_GetPriorityGrouping+0x18>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	0a1b      	lsrs	r3, r3, #8
 80025ca:	f003 0307 	and.w	r3, r3, #7
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	db0b      	blt.n	8002606 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	f003 021f 	and.w	r2, r3, #31
 80025f4:	4907      	ldr	r1, [pc, #28]	; (8002614 <__NVIC_EnableIRQ+0x38>)
 80025f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	2001      	movs	r0, #1
 80025fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	e000e100 	.word	0xe000e100

08002618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	6039      	str	r1, [r7, #0]
 8002622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002628:	2b00      	cmp	r3, #0
 800262a:	db0a      	blt.n	8002642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	b2da      	uxtb	r2, r3
 8002630:	490c      	ldr	r1, [pc, #48]	; (8002664 <__NVIC_SetPriority+0x4c>)
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	0112      	lsls	r2, r2, #4
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	440b      	add	r3, r1
 800263c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002640:	e00a      	b.n	8002658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	b2da      	uxtb	r2, r3
 8002646:	4908      	ldr	r1, [pc, #32]	; (8002668 <__NVIC_SetPriority+0x50>)
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	3b04      	subs	r3, #4
 8002650:	0112      	lsls	r2, r2, #4
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	440b      	add	r3, r1
 8002656:	761a      	strb	r2, [r3, #24]
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	e000e100 	.word	0xe000e100
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800266c:	b480      	push	{r7}
 800266e:	b089      	sub	sp, #36	; 0x24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f1c3 0307 	rsb	r3, r3, #7
 8002686:	2b04      	cmp	r3, #4
 8002688:	bf28      	it	cs
 800268a:	2304      	movcs	r3, #4
 800268c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3304      	adds	r3, #4
 8002692:	2b06      	cmp	r3, #6
 8002694:	d902      	bls.n	800269c <NVIC_EncodePriority+0x30>
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	3b03      	subs	r3, #3
 800269a:	e000      	b.n	800269e <NVIC_EncodePriority+0x32>
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	f04f 32ff 	mov.w	r2, #4294967295
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43da      	mvns	r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	401a      	ands	r2, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b4:	f04f 31ff 	mov.w	r1, #4294967295
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	fa01 f303 	lsl.w	r3, r1, r3
 80026be:	43d9      	mvns	r1, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c4:	4313      	orrs	r3, r2
         );
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3724      	adds	r7, #36	; 0x24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
	...

080026d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3b01      	subs	r3, #1
 80026e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026e4:	d301      	bcc.n	80026ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026e6:	2301      	movs	r3, #1
 80026e8:	e00f      	b.n	800270a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ea:	4a0a      	ldr	r2, [pc, #40]	; (8002714 <SysTick_Config+0x40>)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026f2:	210f      	movs	r1, #15
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295
 80026f8:	f7ff ff8e 	bl	8002618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <SysTick_Config+0x40>)
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002702:	4b04      	ldr	r3, [pc, #16]	; (8002714 <SysTick_Config+0x40>)
 8002704:	2207      	movs	r2, #7
 8002706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	e000e010 	.word	0xe000e010

08002718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff ff29 	bl	8002578 <__NVIC_SetPriorityGrouping>
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800272e:	b580      	push	{r7, lr}
 8002730:	b086      	sub	sp, #24
 8002732:	af00      	add	r7, sp, #0
 8002734:	4603      	mov	r3, r0
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
 800273a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002740:	f7ff ff3e 	bl	80025c0 <__NVIC_GetPriorityGrouping>
 8002744:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	6978      	ldr	r0, [r7, #20]
 800274c:	f7ff ff8e 	bl	800266c <NVIC_EncodePriority>
 8002750:	4602      	mov	r2, r0
 8002752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002756:	4611      	mov	r1, r2
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff ff5d 	bl	8002618 <__NVIC_SetPriority>
}
 800275e:	bf00      	nop
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	4603      	mov	r3, r0
 800276e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ff31 	bl	80025dc <__NVIC_EnableIRQ>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff ffa2 	bl	80026d4 <SysTick_Config>
 8002790:	4603      	mov	r3, r0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027a8:	f7ff feda 	bl	8002560 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e099      	b.n	80028ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2202      	movs	r2, #2
 80027bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0201 	bic.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027d8:	e00f      	b.n	80027fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027da:	f7ff fec1 	bl	8002560 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b05      	cmp	r3, #5
 80027e6:	d908      	bls.n	80027fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2220      	movs	r2, #32
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2203      	movs	r2, #3
 80027f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e078      	b.n	80028ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1e8      	bne.n	80027da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	4b38      	ldr	r3, [pc, #224]	; (80028f4 <HAL_DMA_Init+0x158>)
 8002814:	4013      	ands	r3, r2
 8002816:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002826:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002832:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800283e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4313      	orrs	r3, r2
 800284a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	2b04      	cmp	r3, #4
 8002852:	d107      	bne.n	8002864 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	4313      	orrs	r3, r2
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	4313      	orrs	r3, r2
 8002862:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f023 0307 	bic.w	r3, r3, #7
 800287a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	4313      	orrs	r3, r2
 8002884:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	2b04      	cmp	r3, #4
 800288c:	d117      	bne.n	80028be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00e      	beq.n	80028be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f9e9 	bl	8002c78 <DMA_CheckFifoParam>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2240      	movs	r2, #64	; 0x40
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028ba:	2301      	movs	r3, #1
 80028bc:	e016      	b.n	80028ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f9a0 	bl	8002c0c <DMA_CalcBaseAndBitshift>
 80028cc:	4603      	mov	r3, r0
 80028ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d4:	223f      	movs	r2, #63	; 0x3f
 80028d6:	409a      	lsls	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	f010803f 	.word	0xf010803f

080028f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002900:	2300      	movs	r3, #0
 8002902:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002904:	4b8e      	ldr	r3, [pc, #568]	; (8002b40 <HAL_DMA_IRQHandler+0x248>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a8e      	ldr	r2, [pc, #568]	; (8002b44 <HAL_DMA_IRQHandler+0x24c>)
 800290a:	fba2 2303 	umull	r2, r3, r2, r3
 800290e:	0a9b      	lsrs	r3, r3, #10
 8002910:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002916:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002922:	2208      	movs	r2, #8
 8002924:	409a      	lsls	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4013      	ands	r3, r2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d01a      	beq.n	8002964 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d013      	beq.n	8002964 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 0204 	bic.w	r2, r2, #4
 800294a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002950:	2208      	movs	r2, #8
 8002952:	409a      	lsls	r2, r3
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295c:	f043 0201 	orr.w	r2, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002968:	2201      	movs	r2, #1
 800296a:	409a      	lsls	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4013      	ands	r3, r2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d012      	beq.n	800299a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00b      	beq.n	800299a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002986:	2201      	movs	r2, #1
 8002988:	409a      	lsls	r2, r3
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002992:	f043 0202 	orr.w	r2, r3, #2
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299e:	2204      	movs	r2, #4
 80029a0:	409a      	lsls	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d012      	beq.n	80029d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00b      	beq.n	80029d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029bc:	2204      	movs	r2, #4
 80029be:	409a      	lsls	r2, r3
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c8:	f043 0204 	orr.w	r2, r3, #4
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d4:	2210      	movs	r2, #16
 80029d6:	409a      	lsls	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4013      	ands	r3, r2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d043      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d03c      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f2:	2210      	movs	r2, #16
 80029f4:	409a      	lsls	r2, r3
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d018      	beq.n	8002a3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d108      	bne.n	8002a28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d024      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	4798      	blx	r3
 8002a26:	e01f      	b.n	8002a68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d01b      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	4798      	blx	r3
 8002a38:	e016      	b.n	8002a68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d107      	bne.n	8002a58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0208 	bic.w	r2, r2, #8
 8002a56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	409a      	lsls	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 808f 	beq.w	8002b98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0310 	and.w	r3, r3, #16
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 8087 	beq.w	8002b98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8e:	2220      	movs	r2, #32
 8002a90:	409a      	lsls	r2, r3
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b05      	cmp	r3, #5
 8002aa0:	d136      	bne.n	8002b10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0216 	bic.w	r2, r2, #22
 8002ab0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695a      	ldr	r2, [r3, #20]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ac0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d103      	bne.n	8002ad2 <HAL_DMA_IRQHandler+0x1da>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d007      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0208 	bic.w	r2, r2, #8
 8002ae0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae6:	223f      	movs	r2, #63	; 0x3f
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d07e      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	4798      	blx	r3
        }
        return;
 8002b0e:	e079      	b.n	8002c04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d01d      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10d      	bne.n	8002b48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d031      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	4798      	blx	r3
 8002b3c:	e02c      	b.n	8002b98 <HAL_DMA_IRQHandler+0x2a0>
 8002b3e:	bf00      	nop
 8002b40:	20000000 	.word	0x20000000
 8002b44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d023      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	4798      	blx	r3
 8002b58:	e01e      	b.n	8002b98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10f      	bne.n	8002b88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0210 	bic.w	r2, r2, #16
 8002b76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d032      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d022      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2205      	movs	r2, #5
 8002bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d307      	bcc.n	8002be0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f2      	bne.n	8002bc4 <HAL_DMA_IRQHandler+0x2cc>
 8002bde:	e000      	b.n	8002be2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002be0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d005      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	4798      	blx	r3
 8002c02:	e000      	b.n	8002c06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c04:	bf00      	nop
    }
  }
}
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	3b10      	subs	r3, #16
 8002c1c:	4a14      	ldr	r2, [pc, #80]	; (8002c70 <DMA_CalcBaseAndBitshift+0x64>)
 8002c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c22:	091b      	lsrs	r3, r3, #4
 8002c24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c26:	4a13      	ldr	r2, [pc, #76]	; (8002c74 <DMA_CalcBaseAndBitshift+0x68>)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d909      	bls.n	8002c4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c42:	f023 0303 	bic.w	r3, r3, #3
 8002c46:	1d1a      	adds	r2, r3, #4
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	659a      	str	r2, [r3, #88]	; 0x58
 8002c4c:	e007      	b.n	8002c5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c56:	f023 0303 	bic.w	r3, r3, #3
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	aaaaaaab 	.word	0xaaaaaaab
 8002c74:	0800a130 	.word	0x0800a130

08002c78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d11f      	bne.n	8002cd2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	d856      	bhi.n	8002d46 <DMA_CheckFifoParam+0xce>
 8002c98:	a201      	add	r2, pc, #4	; (adr r2, 8002ca0 <DMA_CheckFifoParam+0x28>)
 8002c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9e:	bf00      	nop
 8002ca0:	08002cb1 	.word	0x08002cb1
 8002ca4:	08002cc3 	.word	0x08002cc3
 8002ca8:	08002cb1 	.word	0x08002cb1
 8002cac:	08002d47 	.word	0x08002d47
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d046      	beq.n	8002d4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cc0:	e043      	b.n	8002d4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cca:	d140      	bne.n	8002d4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd0:	e03d      	b.n	8002d4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cda:	d121      	bne.n	8002d20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d837      	bhi.n	8002d52 <DMA_CheckFifoParam+0xda>
 8002ce2:	a201      	add	r2, pc, #4	; (adr r2, 8002ce8 <DMA_CheckFifoParam+0x70>)
 8002ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce8:	08002cf9 	.word	0x08002cf9
 8002cec:	08002cff 	.word	0x08002cff
 8002cf0:	08002cf9 	.word	0x08002cf9
 8002cf4:	08002d11 	.word	0x08002d11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8002cfc:	e030      	b.n	8002d60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d025      	beq.n	8002d56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d0e:	e022      	b.n	8002d56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d18:	d11f      	bne.n	8002d5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d1e:	e01c      	b.n	8002d5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d903      	bls.n	8002d2e <DMA_CheckFifoParam+0xb6>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d003      	beq.n	8002d34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d2c:	e018      	b.n	8002d60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	73fb      	strb	r3, [r7, #15]
      break;
 8002d32:	e015      	b.n	8002d60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00e      	beq.n	8002d5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	73fb      	strb	r3, [r7, #15]
      break;
 8002d44:	e00b      	b.n	8002d5e <DMA_CheckFifoParam+0xe6>
      break;
 8002d46:	bf00      	nop
 8002d48:	e00a      	b.n	8002d60 <DMA_CheckFifoParam+0xe8>
      break;
 8002d4a:	bf00      	nop
 8002d4c:	e008      	b.n	8002d60 <DMA_CheckFifoParam+0xe8>
      break;
 8002d4e:	bf00      	nop
 8002d50:	e006      	b.n	8002d60 <DMA_CheckFifoParam+0xe8>
      break;
 8002d52:	bf00      	nop
 8002d54:	e004      	b.n	8002d60 <DMA_CheckFifoParam+0xe8>
      break;
 8002d56:	bf00      	nop
 8002d58:	e002      	b.n	8002d60 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d5a:	bf00      	nop
 8002d5c:	e000      	b.n	8002d60 <DMA_CheckFifoParam+0xe8>
      break;
 8002d5e:	bf00      	nop
    }
  } 
  
  return status; 
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop

08002d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b089      	sub	sp, #36	; 0x24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d86:	2300      	movs	r3, #0
 8002d88:	61fb      	str	r3, [r7, #28]
 8002d8a:	e16b      	b.n	8003064 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	f040 815a 	bne.w	800305e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d005      	beq.n	8002dc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d130      	bne.n	8002e24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	2203      	movs	r2, #3
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002df8:	2201      	movs	r2, #1
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	f003 0201 	and.w	r2, r3, #1
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 0303 	and.w	r3, r3, #3
 8002e2c:	2b03      	cmp	r3, #3
 8002e2e:	d017      	beq.n	8002e60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4013      	ands	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d123      	bne.n	8002eb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	08da      	lsrs	r2, r3, #3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3208      	adds	r2, #8
 8002e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	220f      	movs	r2, #15
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	08da      	lsrs	r2, r3, #3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3208      	adds	r2, #8
 8002eae:	69b9      	ldr	r1, [r7, #24]
 8002eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	2203      	movs	r2, #3
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 0203 	and.w	r2, r3, #3
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 80b4 	beq.w	800305e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	4b60      	ldr	r3, [pc, #384]	; (800307c <HAL_GPIO_Init+0x30c>)
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	4a5f      	ldr	r2, [pc, #380]	; (800307c <HAL_GPIO_Init+0x30c>)
 8002f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f04:	6453      	str	r3, [r2, #68]	; 0x44
 8002f06:	4b5d      	ldr	r3, [pc, #372]	; (800307c <HAL_GPIO_Init+0x30c>)
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f12:	4a5b      	ldr	r2, [pc, #364]	; (8003080 <HAL_GPIO_Init+0x310>)
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	089b      	lsrs	r3, r3, #2
 8002f18:	3302      	adds	r3, #2
 8002f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	220f      	movs	r2, #15
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4013      	ands	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a52      	ldr	r2, [pc, #328]	; (8003084 <HAL_GPIO_Init+0x314>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d02b      	beq.n	8002f96 <HAL_GPIO_Init+0x226>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a51      	ldr	r2, [pc, #324]	; (8003088 <HAL_GPIO_Init+0x318>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d025      	beq.n	8002f92 <HAL_GPIO_Init+0x222>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a50      	ldr	r2, [pc, #320]	; (800308c <HAL_GPIO_Init+0x31c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d01f      	beq.n	8002f8e <HAL_GPIO_Init+0x21e>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a4f      	ldr	r2, [pc, #316]	; (8003090 <HAL_GPIO_Init+0x320>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d019      	beq.n	8002f8a <HAL_GPIO_Init+0x21a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a4e      	ldr	r2, [pc, #312]	; (8003094 <HAL_GPIO_Init+0x324>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d013      	beq.n	8002f86 <HAL_GPIO_Init+0x216>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a4d      	ldr	r2, [pc, #308]	; (8003098 <HAL_GPIO_Init+0x328>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d00d      	beq.n	8002f82 <HAL_GPIO_Init+0x212>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a4c      	ldr	r2, [pc, #304]	; (800309c <HAL_GPIO_Init+0x32c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d007      	beq.n	8002f7e <HAL_GPIO_Init+0x20e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a4b      	ldr	r2, [pc, #300]	; (80030a0 <HAL_GPIO_Init+0x330>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d101      	bne.n	8002f7a <HAL_GPIO_Init+0x20a>
 8002f76:	2307      	movs	r3, #7
 8002f78:	e00e      	b.n	8002f98 <HAL_GPIO_Init+0x228>
 8002f7a:	2308      	movs	r3, #8
 8002f7c:	e00c      	b.n	8002f98 <HAL_GPIO_Init+0x228>
 8002f7e:	2306      	movs	r3, #6
 8002f80:	e00a      	b.n	8002f98 <HAL_GPIO_Init+0x228>
 8002f82:	2305      	movs	r3, #5
 8002f84:	e008      	b.n	8002f98 <HAL_GPIO_Init+0x228>
 8002f86:	2304      	movs	r3, #4
 8002f88:	e006      	b.n	8002f98 <HAL_GPIO_Init+0x228>
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e004      	b.n	8002f98 <HAL_GPIO_Init+0x228>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e002      	b.n	8002f98 <HAL_GPIO_Init+0x228>
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <HAL_GPIO_Init+0x228>
 8002f96:	2300      	movs	r3, #0
 8002f98:	69fa      	ldr	r2, [r7, #28]
 8002f9a:	f002 0203 	and.w	r2, r2, #3
 8002f9e:	0092      	lsls	r2, r2, #2
 8002fa0:	4093      	lsls	r3, r2
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fa8:	4935      	ldr	r1, [pc, #212]	; (8003080 <HAL_GPIO_Init+0x310>)
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	089b      	lsrs	r3, r3, #2
 8002fae:	3302      	adds	r3, #2
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fb6:	4b3b      	ldr	r3, [pc, #236]	; (80030a4 <HAL_GPIO_Init+0x334>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fda:	4a32      	ldr	r2, [pc, #200]	; (80030a4 <HAL_GPIO_Init+0x334>)
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fe0:	4b30      	ldr	r3, [pc, #192]	; (80030a4 <HAL_GPIO_Init+0x334>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003004:	4a27      	ldr	r2, [pc, #156]	; (80030a4 <HAL_GPIO_Init+0x334>)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800300a:	4b26      	ldr	r3, [pc, #152]	; (80030a4 <HAL_GPIO_Init+0x334>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	43db      	mvns	r3, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4013      	ands	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4313      	orrs	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800302e:	4a1d      	ldr	r2, [pc, #116]	; (80030a4 <HAL_GPIO_Init+0x334>)
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003034:	4b1b      	ldr	r3, [pc, #108]	; (80030a4 <HAL_GPIO_Init+0x334>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	43db      	mvns	r3, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4313      	orrs	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003058:	4a12      	ldr	r2, [pc, #72]	; (80030a4 <HAL_GPIO_Init+0x334>)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	3301      	adds	r3, #1
 8003062:	61fb      	str	r3, [r7, #28]
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	2b0f      	cmp	r3, #15
 8003068:	f67f ae90 	bls.w	8002d8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800306c:	bf00      	nop
 800306e:	bf00      	nop
 8003070:	3724      	adds	r7, #36	; 0x24
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40023800 	.word	0x40023800
 8003080:	40013800 	.word	0x40013800
 8003084:	40020000 	.word	0x40020000
 8003088:	40020400 	.word	0x40020400
 800308c:	40020800 	.word	0x40020800
 8003090:	40020c00 	.word	0x40020c00
 8003094:	40021000 	.word	0x40021000
 8003098:	40021400 	.word	0x40021400
 800309c:	40021800 	.word	0x40021800
 80030a0:	40021c00 	.word	0x40021c00
 80030a4:	40013c00 	.word	0x40013c00

080030a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	460b      	mov	r3, r1
 80030b2:	807b      	strh	r3, [r7, #2]
 80030b4:	4613      	mov	r3, r2
 80030b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030b8:	787b      	ldrb	r3, [r7, #1]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030be:	887a      	ldrh	r2, [r7, #2]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030c4:	e003      	b.n	80030ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030c6:	887b      	ldrh	r3, [r7, #2]
 80030c8:	041a      	lsls	r2, r3, #16
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	619a      	str	r2, [r3, #24]
}
 80030ce:	bf00      	nop
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030da:	b480      	push	{r7}
 80030dc:	b085      	sub	sp, #20
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	460b      	mov	r3, r1
 80030e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030ec:	887a      	ldrh	r2, [r7, #2]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4013      	ands	r3, r2
 80030f2:	041a      	lsls	r2, r3, #16
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	43d9      	mvns	r1, r3
 80030f8:	887b      	ldrh	r3, [r7, #2]
 80030fa:	400b      	ands	r3, r1
 80030fc:	431a      	orrs	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	619a      	str	r2, [r3, #24]
}
 8003102:	bf00      	nop
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
	...

08003110 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e267      	b.n	80035f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d075      	beq.n	800321a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800312e:	4b88      	ldr	r3, [pc, #544]	; (8003350 <HAL_RCC_OscConfig+0x240>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
 8003136:	2b04      	cmp	r3, #4
 8003138:	d00c      	beq.n	8003154 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800313a:	4b85      	ldr	r3, [pc, #532]	; (8003350 <HAL_RCC_OscConfig+0x240>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003142:	2b08      	cmp	r3, #8
 8003144:	d112      	bne.n	800316c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003146:	4b82      	ldr	r3, [pc, #520]	; (8003350 <HAL_RCC_OscConfig+0x240>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800314e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003152:	d10b      	bne.n	800316c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003154:	4b7e      	ldr	r3, [pc, #504]	; (8003350 <HAL_RCC_OscConfig+0x240>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d05b      	beq.n	8003218 <HAL_RCC_OscConfig+0x108>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d157      	bne.n	8003218 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e242      	b.n	80035f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003174:	d106      	bne.n	8003184 <HAL_RCC_OscConfig+0x74>
 8003176:	4b76      	ldr	r3, [pc, #472]	; (8003350 <HAL_RCC_OscConfig+0x240>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a75      	ldr	r2, [pc, #468]	; (8003350 <HAL_RCC_OscConfig+0x240>)
 800317c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	e01d      	b.n	80031c0 <HAL_RCC_OscConfig+0xb0>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800318c:	d10c      	bne.n	80031a8 <HAL_RCC_OscConfig+0x98>
 800318e:	4b70      	ldr	r3, [pc, #448]	; (8003350 <HAL_RCC_OscConfig+0x240>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a6f      	ldr	r2, [pc, #444]	; (8003350 <HAL_RCC_OscConfig+0x240>)
 8003194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	4b6d      	ldr	r3, [pc, #436]	; (8003350 <HAL_RCC_OscConfig+0x240>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a6c      	ldr	r2, [pc, #432]	; (8003350 <HAL_RCC_OscConfig+0x240>)
 80031a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	e00b      	b.n	80031c0 <HAL_RCC_OscConfig+0xb0>
 80031a8:	4b69      	ldr	r3, [pc, #420]	; (8003350 <HAL_RCC_OscConfig+0x240>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a68      	ldr	r2, [pc, #416]	; (8003350 <HAL_RCC_OscConfig+0x240>)
 80031ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b2:	6013      	str	r3, [r2, #0]
 80031b4:	4b66      	ldr	r3, [pc, #408]	; (8003350 <HAL_RCC_OscConfig+0x240>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a65      	ldr	r2, [pc, #404]	; (8003350 <HAL_RCC_OscConfig+0x240>)
 80031ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d013      	beq.n	80031f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c8:	f7ff f9ca 	bl	8002560 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031d0:	f7ff f9c6 	bl	8002560 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b64      	cmp	r3, #100	; 0x64
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e207      	b.n	80035f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e2:	4b5b      	ldr	r3, [pc, #364]	; (8003350 <HAL_RCC_OscConfig+0x240>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0f0      	beq.n	80031d0 <HAL_RCC_OscConfig+0xc0>
 80031ee:	e014      	b.n	800321a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f0:	f7ff f9b6 	bl	8002560 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031f8:	f7ff f9b2 	bl	8002560 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b64      	cmp	r3, #100	; 0x64
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e1f3      	b.n	80035f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800320a:	4b51      	ldr	r3, [pc, #324]	; (8003350 <HAL_RCC_OscConfig+0x240>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0xe8>
 8003216:	e000      	b.n	800321a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d063      	beq.n	80032ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003226:	4b4a      	ldr	r3, [pc, #296]	; (8003350 <HAL_RCC_OscConfig+0x240>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 030c 	and.w	r3, r3, #12
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00b      	beq.n	800324a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003232:	4b47      	ldr	r3, [pc, #284]	; (8003350 <HAL_RCC_OscConfig+0x240>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800323a:	2b08      	cmp	r3, #8
 800323c:	d11c      	bne.n	8003278 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800323e:	4b44      	ldr	r3, [pc, #272]	; (8003350 <HAL_RCC_OscConfig+0x240>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d116      	bne.n	8003278 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800324a:	4b41      	ldr	r3, [pc, #260]	; (8003350 <HAL_RCC_OscConfig+0x240>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d005      	beq.n	8003262 <HAL_RCC_OscConfig+0x152>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d001      	beq.n	8003262 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e1c7      	b.n	80035f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003262:	4b3b      	ldr	r3, [pc, #236]	; (8003350 <HAL_RCC_OscConfig+0x240>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	4937      	ldr	r1, [pc, #220]	; (8003350 <HAL_RCC_OscConfig+0x240>)
 8003272:	4313      	orrs	r3, r2
 8003274:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003276:	e03a      	b.n	80032ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d020      	beq.n	80032c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003280:	4b34      	ldr	r3, [pc, #208]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 8003282:	2201      	movs	r2, #1
 8003284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003286:	f7ff f96b 	bl	8002560 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800328e:	f7ff f967 	bl	8002560 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e1a8      	b.n	80035f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a0:	4b2b      	ldr	r3, [pc, #172]	; (8003350 <HAL_RCC_OscConfig+0x240>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0f0      	beq.n	800328e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ac:	4b28      	ldr	r3, [pc, #160]	; (8003350 <HAL_RCC_OscConfig+0x240>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4925      	ldr	r1, [pc, #148]	; (8003350 <HAL_RCC_OscConfig+0x240>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	600b      	str	r3, [r1, #0]
 80032c0:	e015      	b.n	80032ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032c2:	4b24      	ldr	r3, [pc, #144]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c8:	f7ff f94a 	bl	8002560 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032d0:	f7ff f946 	bl	8002560 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e187      	b.n	80035f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032e2:	4b1b      	ldr	r3, [pc, #108]	; (8003350 <HAL_RCC_OscConfig+0x240>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f0      	bne.n	80032d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d036      	beq.n	8003368 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d016      	beq.n	8003330 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003302:	4b15      	ldr	r3, [pc, #84]	; (8003358 <HAL_RCC_OscConfig+0x248>)
 8003304:	2201      	movs	r2, #1
 8003306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003308:	f7ff f92a 	bl	8002560 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003310:	f7ff f926 	bl	8002560 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e167      	b.n	80035f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003322:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <HAL_RCC_OscConfig+0x240>)
 8003324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0f0      	beq.n	8003310 <HAL_RCC_OscConfig+0x200>
 800332e:	e01b      	b.n	8003368 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003330:	4b09      	ldr	r3, [pc, #36]	; (8003358 <HAL_RCC_OscConfig+0x248>)
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003336:	f7ff f913 	bl	8002560 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800333c:	e00e      	b.n	800335c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800333e:	f7ff f90f 	bl	8002560 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d907      	bls.n	800335c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e150      	b.n	80035f2 <HAL_RCC_OscConfig+0x4e2>
 8003350:	40023800 	.word	0x40023800
 8003354:	42470000 	.word	0x42470000
 8003358:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800335c:	4b88      	ldr	r3, [pc, #544]	; (8003580 <HAL_RCC_OscConfig+0x470>)
 800335e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1ea      	bne.n	800333e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 8097 	beq.w	80034a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003376:	2300      	movs	r3, #0
 8003378:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800337a:	4b81      	ldr	r3, [pc, #516]	; (8003580 <HAL_RCC_OscConfig+0x470>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10f      	bne.n	80033a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003386:	2300      	movs	r3, #0
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	4b7d      	ldr	r3, [pc, #500]	; (8003580 <HAL_RCC_OscConfig+0x470>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	4a7c      	ldr	r2, [pc, #496]	; (8003580 <HAL_RCC_OscConfig+0x470>)
 8003390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003394:	6413      	str	r3, [r2, #64]	; 0x40
 8003396:	4b7a      	ldr	r3, [pc, #488]	; (8003580 <HAL_RCC_OscConfig+0x470>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033a2:	2301      	movs	r3, #1
 80033a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a6:	4b77      	ldr	r3, [pc, #476]	; (8003584 <HAL_RCC_OscConfig+0x474>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d118      	bne.n	80033e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033b2:	4b74      	ldr	r3, [pc, #464]	; (8003584 <HAL_RCC_OscConfig+0x474>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a73      	ldr	r2, [pc, #460]	; (8003584 <HAL_RCC_OscConfig+0x474>)
 80033b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033be:	f7ff f8cf 	bl	8002560 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c6:	f7ff f8cb 	bl	8002560 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e10c      	b.n	80035f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d8:	4b6a      	ldr	r3, [pc, #424]	; (8003584 <HAL_RCC_OscConfig+0x474>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0f0      	beq.n	80033c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d106      	bne.n	80033fa <HAL_RCC_OscConfig+0x2ea>
 80033ec:	4b64      	ldr	r3, [pc, #400]	; (8003580 <HAL_RCC_OscConfig+0x470>)
 80033ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f0:	4a63      	ldr	r2, [pc, #396]	; (8003580 <HAL_RCC_OscConfig+0x470>)
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	6713      	str	r3, [r2, #112]	; 0x70
 80033f8:	e01c      	b.n	8003434 <HAL_RCC_OscConfig+0x324>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b05      	cmp	r3, #5
 8003400:	d10c      	bne.n	800341c <HAL_RCC_OscConfig+0x30c>
 8003402:	4b5f      	ldr	r3, [pc, #380]	; (8003580 <HAL_RCC_OscConfig+0x470>)
 8003404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003406:	4a5e      	ldr	r2, [pc, #376]	; (8003580 <HAL_RCC_OscConfig+0x470>)
 8003408:	f043 0304 	orr.w	r3, r3, #4
 800340c:	6713      	str	r3, [r2, #112]	; 0x70
 800340e:	4b5c      	ldr	r3, [pc, #368]	; (8003580 <HAL_RCC_OscConfig+0x470>)
 8003410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003412:	4a5b      	ldr	r2, [pc, #364]	; (8003580 <HAL_RCC_OscConfig+0x470>)
 8003414:	f043 0301 	orr.w	r3, r3, #1
 8003418:	6713      	str	r3, [r2, #112]	; 0x70
 800341a:	e00b      	b.n	8003434 <HAL_RCC_OscConfig+0x324>
 800341c:	4b58      	ldr	r3, [pc, #352]	; (8003580 <HAL_RCC_OscConfig+0x470>)
 800341e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003420:	4a57      	ldr	r2, [pc, #348]	; (8003580 <HAL_RCC_OscConfig+0x470>)
 8003422:	f023 0301 	bic.w	r3, r3, #1
 8003426:	6713      	str	r3, [r2, #112]	; 0x70
 8003428:	4b55      	ldr	r3, [pc, #340]	; (8003580 <HAL_RCC_OscConfig+0x470>)
 800342a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342c:	4a54      	ldr	r2, [pc, #336]	; (8003580 <HAL_RCC_OscConfig+0x470>)
 800342e:	f023 0304 	bic.w	r3, r3, #4
 8003432:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d015      	beq.n	8003468 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343c:	f7ff f890 	bl	8002560 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003442:	e00a      	b.n	800345a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003444:	f7ff f88c 	bl	8002560 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003452:	4293      	cmp	r3, r2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e0cb      	b.n	80035f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800345a:	4b49      	ldr	r3, [pc, #292]	; (8003580 <HAL_RCC_OscConfig+0x470>)
 800345c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0ee      	beq.n	8003444 <HAL_RCC_OscConfig+0x334>
 8003466:	e014      	b.n	8003492 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003468:	f7ff f87a 	bl	8002560 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800346e:	e00a      	b.n	8003486 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003470:	f7ff f876 	bl	8002560 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	f241 3288 	movw	r2, #5000	; 0x1388
 800347e:	4293      	cmp	r3, r2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e0b5      	b.n	80035f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003486:	4b3e      	ldr	r3, [pc, #248]	; (8003580 <HAL_RCC_OscConfig+0x470>)
 8003488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1ee      	bne.n	8003470 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003492:	7dfb      	ldrb	r3, [r7, #23]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d105      	bne.n	80034a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003498:	4b39      	ldr	r3, [pc, #228]	; (8003580 <HAL_RCC_OscConfig+0x470>)
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	4a38      	ldr	r2, [pc, #224]	; (8003580 <HAL_RCC_OscConfig+0x470>)
 800349e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 80a1 	beq.w	80035f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034ae:	4b34      	ldr	r3, [pc, #208]	; (8003580 <HAL_RCC_OscConfig+0x470>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 030c 	and.w	r3, r3, #12
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d05c      	beq.n	8003574 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d141      	bne.n	8003546 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c2:	4b31      	ldr	r3, [pc, #196]	; (8003588 <HAL_RCC_OscConfig+0x478>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c8:	f7ff f84a 	bl	8002560 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d0:	f7ff f846 	bl	8002560 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e087      	b.n	80035f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e2:	4b27      	ldr	r3, [pc, #156]	; (8003580 <HAL_RCC_OscConfig+0x470>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69da      	ldr	r2, [r3, #28]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	019b      	lsls	r3, r3, #6
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003504:	085b      	lsrs	r3, r3, #1
 8003506:	3b01      	subs	r3, #1
 8003508:	041b      	lsls	r3, r3, #16
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003510:	061b      	lsls	r3, r3, #24
 8003512:	491b      	ldr	r1, [pc, #108]	; (8003580 <HAL_RCC_OscConfig+0x470>)
 8003514:	4313      	orrs	r3, r2
 8003516:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003518:	4b1b      	ldr	r3, [pc, #108]	; (8003588 <HAL_RCC_OscConfig+0x478>)
 800351a:	2201      	movs	r2, #1
 800351c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351e:	f7ff f81f 	bl	8002560 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003526:	f7ff f81b 	bl	8002560 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e05c      	b.n	80035f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003538:	4b11      	ldr	r3, [pc, #68]	; (8003580 <HAL_RCC_OscConfig+0x470>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0f0      	beq.n	8003526 <HAL_RCC_OscConfig+0x416>
 8003544:	e054      	b.n	80035f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003546:	4b10      	ldr	r3, [pc, #64]	; (8003588 <HAL_RCC_OscConfig+0x478>)
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354c:	f7ff f808 	bl	8002560 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003554:	f7ff f804 	bl	8002560 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e045      	b.n	80035f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003566:	4b06      	ldr	r3, [pc, #24]	; (8003580 <HAL_RCC_OscConfig+0x470>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f0      	bne.n	8003554 <HAL_RCC_OscConfig+0x444>
 8003572:	e03d      	b.n	80035f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d107      	bne.n	800358c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e038      	b.n	80035f2 <HAL_RCC_OscConfig+0x4e2>
 8003580:	40023800 	.word	0x40023800
 8003584:	40007000 	.word	0x40007000
 8003588:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800358c:	4b1b      	ldr	r3, [pc, #108]	; (80035fc <HAL_RCC_OscConfig+0x4ec>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d028      	beq.n	80035ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d121      	bne.n	80035ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d11a      	bne.n	80035ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035bc:	4013      	ands	r3, r2
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d111      	bne.n	80035ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d2:	085b      	lsrs	r3, r3, #1
 80035d4:	3b01      	subs	r3, #1
 80035d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035d8:	429a      	cmp	r2, r3
 80035da:	d107      	bne.n	80035ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d001      	beq.n	80035f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e000      	b.n	80035f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40023800 	.word	0x40023800

08003600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e0cc      	b.n	80037ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003614:	4b68      	ldr	r3, [pc, #416]	; (80037b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	429a      	cmp	r2, r3
 8003620:	d90c      	bls.n	800363c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003622:	4b65      	ldr	r3, [pc, #404]	; (80037b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800362a:	4b63      	ldr	r3, [pc, #396]	; (80037b8 <HAL_RCC_ClockConfig+0x1b8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	429a      	cmp	r2, r3
 8003636:	d001      	beq.n	800363c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e0b8      	b.n	80037ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d020      	beq.n	800368a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d005      	beq.n	8003660 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003654:	4b59      	ldr	r3, [pc, #356]	; (80037bc <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	4a58      	ldr	r2, [pc, #352]	; (80037bc <HAL_RCC_ClockConfig+0x1bc>)
 800365a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800365e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0308 	and.w	r3, r3, #8
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800366c:	4b53      	ldr	r3, [pc, #332]	; (80037bc <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	4a52      	ldr	r2, [pc, #328]	; (80037bc <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003676:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003678:	4b50      	ldr	r3, [pc, #320]	; (80037bc <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	494d      	ldr	r1, [pc, #308]	; (80037bc <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	4313      	orrs	r3, r2
 8003688:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d044      	beq.n	8003720 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d107      	bne.n	80036ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369e:	4b47      	ldr	r3, [pc, #284]	; (80037bc <HAL_RCC_ClockConfig+0x1bc>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d119      	bne.n	80036de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e07f      	b.n	80037ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d003      	beq.n	80036be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ba:	2b03      	cmp	r3, #3
 80036bc:	d107      	bne.n	80036ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036be:	4b3f      	ldr	r3, [pc, #252]	; (80037bc <HAL_RCC_ClockConfig+0x1bc>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d109      	bne.n	80036de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e06f      	b.n	80037ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ce:	4b3b      	ldr	r3, [pc, #236]	; (80037bc <HAL_RCC_ClockConfig+0x1bc>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e067      	b.n	80037ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036de:	4b37      	ldr	r3, [pc, #220]	; (80037bc <HAL_RCC_ClockConfig+0x1bc>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f023 0203 	bic.w	r2, r3, #3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	4934      	ldr	r1, [pc, #208]	; (80037bc <HAL_RCC_ClockConfig+0x1bc>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036f0:	f7fe ff36 	bl	8002560 <HAL_GetTick>
 80036f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f6:	e00a      	b.n	800370e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f8:	f7fe ff32 	bl	8002560 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	f241 3288 	movw	r2, #5000	; 0x1388
 8003706:	4293      	cmp	r3, r2
 8003708:	d901      	bls.n	800370e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e04f      	b.n	80037ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800370e:	4b2b      	ldr	r3, [pc, #172]	; (80037bc <HAL_RCC_ClockConfig+0x1bc>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 020c 	and.w	r2, r3, #12
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	429a      	cmp	r2, r3
 800371e:	d1eb      	bne.n	80036f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003720:	4b25      	ldr	r3, [pc, #148]	; (80037b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	429a      	cmp	r2, r3
 800372c:	d20c      	bcs.n	8003748 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372e:	4b22      	ldr	r3, [pc, #136]	; (80037b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003736:	4b20      	ldr	r3, [pc, #128]	; (80037b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	429a      	cmp	r2, r3
 8003742:	d001      	beq.n	8003748 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e032      	b.n	80037ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	d008      	beq.n	8003766 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003754:	4b19      	ldr	r3, [pc, #100]	; (80037bc <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	4916      	ldr	r1, [pc, #88]	; (80037bc <HAL_RCC_ClockConfig+0x1bc>)
 8003762:	4313      	orrs	r3, r2
 8003764:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b00      	cmp	r3, #0
 8003770:	d009      	beq.n	8003786 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003772:	4b12      	ldr	r3, [pc, #72]	; (80037bc <HAL_RCC_ClockConfig+0x1bc>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	490e      	ldr	r1, [pc, #56]	; (80037bc <HAL_RCC_ClockConfig+0x1bc>)
 8003782:	4313      	orrs	r3, r2
 8003784:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003786:	f000 f821 	bl	80037cc <HAL_RCC_GetSysClockFreq>
 800378a:	4602      	mov	r2, r0
 800378c:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	091b      	lsrs	r3, r3, #4
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	490a      	ldr	r1, [pc, #40]	; (80037c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003798:	5ccb      	ldrb	r3, [r1, r3]
 800379a:	fa22 f303 	lsr.w	r3, r2, r3
 800379e:	4a09      	ldr	r2, [pc, #36]	; (80037c4 <HAL_RCC_ClockConfig+0x1c4>)
 80037a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037a2:	4b09      	ldr	r3, [pc, #36]	; (80037c8 <HAL_RCC_ClockConfig+0x1c8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fe fe96 	bl	80024d8 <HAL_InitTick>

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40023c00 	.word	0x40023c00
 80037bc:	40023800 	.word	0x40023800
 80037c0:	0800a118 	.word	0x0800a118
 80037c4:	20000000 	.word	0x20000000
 80037c8:	20000004 	.word	0x20000004

080037cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037d0:	b094      	sub	sp, #80	; 0x50
 80037d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	647b      	str	r3, [r7, #68]	; 0x44
 80037d8:	2300      	movs	r3, #0
 80037da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037dc:	2300      	movs	r3, #0
 80037de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037e4:	4b79      	ldr	r3, [pc, #484]	; (80039cc <HAL_RCC_GetSysClockFreq+0x200>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 030c 	and.w	r3, r3, #12
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d00d      	beq.n	800380c <HAL_RCC_GetSysClockFreq+0x40>
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	f200 80e1 	bhi.w	80039b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <HAL_RCC_GetSysClockFreq+0x34>
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d003      	beq.n	8003806 <HAL_RCC_GetSysClockFreq+0x3a>
 80037fe:	e0db      	b.n	80039b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003800:	4b73      	ldr	r3, [pc, #460]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003802:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003804:	e0db      	b.n	80039be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003806:	4b73      	ldr	r3, [pc, #460]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003808:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800380a:	e0d8      	b.n	80039be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800380c:	4b6f      	ldr	r3, [pc, #444]	; (80039cc <HAL_RCC_GetSysClockFreq+0x200>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003814:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003816:	4b6d      	ldr	r3, [pc, #436]	; (80039cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d063      	beq.n	80038ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003822:	4b6a      	ldr	r3, [pc, #424]	; (80039cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	099b      	lsrs	r3, r3, #6
 8003828:	2200      	movs	r2, #0
 800382a:	63bb      	str	r3, [r7, #56]	; 0x38
 800382c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800382e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003834:	633b      	str	r3, [r7, #48]	; 0x30
 8003836:	2300      	movs	r3, #0
 8003838:	637b      	str	r3, [r7, #52]	; 0x34
 800383a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800383e:	4622      	mov	r2, r4
 8003840:	462b      	mov	r3, r5
 8003842:	f04f 0000 	mov.w	r0, #0
 8003846:	f04f 0100 	mov.w	r1, #0
 800384a:	0159      	lsls	r1, r3, #5
 800384c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003850:	0150      	lsls	r0, r2, #5
 8003852:	4602      	mov	r2, r0
 8003854:	460b      	mov	r3, r1
 8003856:	4621      	mov	r1, r4
 8003858:	1a51      	subs	r1, r2, r1
 800385a:	6139      	str	r1, [r7, #16]
 800385c:	4629      	mov	r1, r5
 800385e:	eb63 0301 	sbc.w	r3, r3, r1
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003870:	4659      	mov	r1, fp
 8003872:	018b      	lsls	r3, r1, #6
 8003874:	4651      	mov	r1, sl
 8003876:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800387a:	4651      	mov	r1, sl
 800387c:	018a      	lsls	r2, r1, #6
 800387e:	4651      	mov	r1, sl
 8003880:	ebb2 0801 	subs.w	r8, r2, r1
 8003884:	4659      	mov	r1, fp
 8003886:	eb63 0901 	sbc.w	r9, r3, r1
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	f04f 0300 	mov.w	r3, #0
 8003892:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003896:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800389a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800389e:	4690      	mov	r8, r2
 80038a0:	4699      	mov	r9, r3
 80038a2:	4623      	mov	r3, r4
 80038a4:	eb18 0303 	adds.w	r3, r8, r3
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	462b      	mov	r3, r5
 80038ac:	eb49 0303 	adc.w	r3, r9, r3
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038be:	4629      	mov	r1, r5
 80038c0:	024b      	lsls	r3, r1, #9
 80038c2:	4621      	mov	r1, r4
 80038c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038c8:	4621      	mov	r1, r4
 80038ca:	024a      	lsls	r2, r1, #9
 80038cc:	4610      	mov	r0, r2
 80038ce:	4619      	mov	r1, r3
 80038d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038d2:	2200      	movs	r2, #0
 80038d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80038d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038dc:	f7fd fae2 	bl	8000ea4 <__aeabi_uldivmod>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4613      	mov	r3, r2
 80038e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038e8:	e058      	b.n	800399c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ea:	4b38      	ldr	r3, [pc, #224]	; (80039cc <HAL_RCC_GetSysClockFreq+0x200>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	099b      	lsrs	r3, r3, #6
 80038f0:	2200      	movs	r2, #0
 80038f2:	4618      	mov	r0, r3
 80038f4:	4611      	mov	r1, r2
 80038f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038fa:	623b      	str	r3, [r7, #32]
 80038fc:	2300      	movs	r3, #0
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003900:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003904:	4642      	mov	r2, r8
 8003906:	464b      	mov	r3, r9
 8003908:	f04f 0000 	mov.w	r0, #0
 800390c:	f04f 0100 	mov.w	r1, #0
 8003910:	0159      	lsls	r1, r3, #5
 8003912:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003916:	0150      	lsls	r0, r2, #5
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	4641      	mov	r1, r8
 800391e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003922:	4649      	mov	r1, r9
 8003924:	eb63 0b01 	sbc.w	fp, r3, r1
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003934:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003938:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800393c:	ebb2 040a 	subs.w	r4, r2, sl
 8003940:	eb63 050b 	sbc.w	r5, r3, fp
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	00eb      	lsls	r3, r5, #3
 800394e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003952:	00e2      	lsls	r2, r4, #3
 8003954:	4614      	mov	r4, r2
 8003956:	461d      	mov	r5, r3
 8003958:	4643      	mov	r3, r8
 800395a:	18e3      	adds	r3, r4, r3
 800395c:	603b      	str	r3, [r7, #0]
 800395e:	464b      	mov	r3, r9
 8003960:	eb45 0303 	adc.w	r3, r5, r3
 8003964:	607b      	str	r3, [r7, #4]
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	f04f 0300 	mov.w	r3, #0
 800396e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003972:	4629      	mov	r1, r5
 8003974:	028b      	lsls	r3, r1, #10
 8003976:	4621      	mov	r1, r4
 8003978:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800397c:	4621      	mov	r1, r4
 800397e:	028a      	lsls	r2, r1, #10
 8003980:	4610      	mov	r0, r2
 8003982:	4619      	mov	r1, r3
 8003984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003986:	2200      	movs	r2, #0
 8003988:	61bb      	str	r3, [r7, #24]
 800398a:	61fa      	str	r2, [r7, #28]
 800398c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003990:	f7fd fa88 	bl	8000ea4 <__aeabi_uldivmod>
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	4613      	mov	r3, r2
 800399a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800399c:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <HAL_RCC_GetSysClockFreq+0x200>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	0c1b      	lsrs	r3, r3, #16
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	3301      	adds	r3, #1
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80039ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039b6:	e002      	b.n	80039be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80039ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3750      	adds	r7, #80	; 0x50
 80039c4:	46bd      	mov	sp, r7
 80039c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ca:	bf00      	nop
 80039cc:	40023800 	.word	0x40023800
 80039d0:	00f42400 	.word	0x00f42400
 80039d4:	007a1200 	.word	0x007a1200

080039d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039dc:	4b03      	ldr	r3, [pc, #12]	; (80039ec <HAL_RCC_GetHCLKFreq+0x14>)
 80039de:	681b      	ldr	r3, [r3, #0]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	20000000 	.word	0x20000000

080039f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039f4:	f7ff fff0 	bl	80039d8 <HAL_RCC_GetHCLKFreq>
 80039f8:	4602      	mov	r2, r0
 80039fa:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	0a9b      	lsrs	r3, r3, #10
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	4903      	ldr	r1, [pc, #12]	; (8003a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a06:	5ccb      	ldrb	r3, [r1, r3]
 8003a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40023800 	.word	0x40023800
 8003a14:	0800a128 	.word	0x0800a128

08003a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a1c:	f7ff ffdc 	bl	80039d8 <HAL_RCC_GetHCLKFreq>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	0b5b      	lsrs	r3, r3, #13
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	4903      	ldr	r1, [pc, #12]	; (8003a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a2e:	5ccb      	ldrb	r3, [r1, r3]
 8003a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	0800a128 	.word	0x0800a128

08003a40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e041      	b.n	8003ad6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d106      	bne.n	8003a6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7fe fa74 	bl	8001f54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4610      	mov	r0, r2
 8003a80:	f000 fc58 	bl	8004334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
	...

08003ae0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d001      	beq.n	8003af8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e04e      	b.n	8003b96 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a23      	ldr	r2, [pc, #140]	; (8003ba4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d022      	beq.n	8003b60 <HAL_TIM_Base_Start_IT+0x80>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b22:	d01d      	beq.n	8003b60 <HAL_TIM_Base_Start_IT+0x80>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1f      	ldr	r2, [pc, #124]	; (8003ba8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d018      	beq.n	8003b60 <HAL_TIM_Base_Start_IT+0x80>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1e      	ldr	r2, [pc, #120]	; (8003bac <HAL_TIM_Base_Start_IT+0xcc>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d013      	beq.n	8003b60 <HAL_TIM_Base_Start_IT+0x80>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a1c      	ldr	r2, [pc, #112]	; (8003bb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d00e      	beq.n	8003b60 <HAL_TIM_Base_Start_IT+0x80>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a1b      	ldr	r2, [pc, #108]	; (8003bb4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d009      	beq.n	8003b60 <HAL_TIM_Base_Start_IT+0x80>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a19      	ldr	r2, [pc, #100]	; (8003bb8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d004      	beq.n	8003b60 <HAL_TIM_Base_Start_IT+0x80>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a18      	ldr	r2, [pc, #96]	; (8003bbc <HAL_TIM_Base_Start_IT+0xdc>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d111      	bne.n	8003b84 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2b06      	cmp	r3, #6
 8003b70:	d010      	beq.n	8003b94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f042 0201 	orr.w	r2, r2, #1
 8003b80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b82:	e007      	b.n	8003b94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0201 	orr.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	40010000 	.word	0x40010000
 8003ba8:	40000400 	.word	0x40000400
 8003bac:	40000800 	.word	0x40000800
 8003bb0:	40000c00 	.word	0x40000c00
 8003bb4:	40010400 	.word	0x40010400
 8003bb8:	40014000 	.word	0x40014000
 8003bbc:	40001800 	.word	0x40001800

08003bc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e041      	b.n	8003c56 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d106      	bne.n	8003bec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f839 	bl	8003c5e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4610      	mov	r0, r2
 8003c00:	f000 fb98 	bl	8004334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b086      	sub	sp, #24
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e097      	b.n	8003db6 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7fe f84e 	bl	8001d3c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6812      	ldr	r2, [r2, #0]
 8003cb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cb6:	f023 0307 	bic.w	r3, r3, #7
 8003cba:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	f000 fb34 	bl	8004334 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf4:	f023 0303 	bic.w	r3, r3, #3
 8003cf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	689a      	ldr	r2, [r3, #8]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	021b      	lsls	r3, r3, #8
 8003d04:	4313      	orrs	r3, r2
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003d12:	f023 030c 	bic.w	r3, r3, #12
 8003d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	69db      	ldr	r3, [r3, #28]
 8003d2c:	021b      	lsls	r3, r3, #8
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	011a      	lsls	r2, r3, #4
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	031b      	lsls	r3, r3, #12
 8003d42:	4313      	orrs	r3, r2
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003d50:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003d58:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	4313      	orrs	r3, r2
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b082      	sub	sp, #8
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d122      	bne.n	8003e1a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d11b      	bne.n	8003e1a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f06f 0202 	mvn.w	r2, #2
 8003dea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f003 0303 	and.w	r3, r3, #3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 fa78 	bl	80042f6 <HAL_TIM_IC_CaptureCallback>
 8003e06:	e005      	b.n	8003e14 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 fa6a 	bl	80042e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fa7b 	bl	800430a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	d122      	bne.n	8003e6e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f003 0304 	and.w	r3, r3, #4
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d11b      	bne.n	8003e6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f06f 0204 	mvn.w	r2, #4
 8003e3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 fa4e 	bl	80042f6 <HAL_TIM_IC_CaptureCallback>
 8003e5a:	e005      	b.n	8003e68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 fa40 	bl	80042e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fa51 	bl	800430a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	f003 0308 	and.w	r3, r3, #8
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	d122      	bne.n	8003ec2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b08      	cmp	r3, #8
 8003e88:	d11b      	bne.n	8003ec2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f06f 0208 	mvn.w	r2, #8
 8003e92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2204      	movs	r2, #4
 8003e98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	f003 0303 	and.w	r3, r3, #3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 fa24 	bl	80042f6 <HAL_TIM_IC_CaptureCallback>
 8003eae:	e005      	b.n	8003ebc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 fa16 	bl	80042e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 fa27 	bl	800430a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	f003 0310 	and.w	r3, r3, #16
 8003ecc:	2b10      	cmp	r3, #16
 8003ece:	d122      	bne.n	8003f16 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f003 0310 	and.w	r3, r3, #16
 8003eda:	2b10      	cmp	r3, #16
 8003edc:	d11b      	bne.n	8003f16 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f06f 0210 	mvn.w	r2, #16
 8003ee6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2208      	movs	r2, #8
 8003eec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f9fa 	bl	80042f6 <HAL_TIM_IC_CaptureCallback>
 8003f02:	e005      	b.n	8003f10 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f9ec 	bl	80042e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f9fd 	bl	800430a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d10e      	bne.n	8003f42 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d107      	bne.n	8003f42 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f06f 0201 	mvn.w	r2, #1
 8003f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7fd f969 	bl	8001214 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4c:	2b80      	cmp	r3, #128	; 0x80
 8003f4e:	d10e      	bne.n	8003f6e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5a:	2b80      	cmp	r3, #128	; 0x80
 8003f5c:	d107      	bne.n	8003f6e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 fda5 	bl	8004ab8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f78:	2b40      	cmp	r3, #64	; 0x40
 8003f7a:	d10e      	bne.n	8003f9a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f86:	2b40      	cmp	r3, #64	; 0x40
 8003f88:	d107      	bne.n	8003f9a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f9c2 	bl	800431e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	f003 0320 	and.w	r3, r3, #32
 8003fa4:	2b20      	cmp	r3, #32
 8003fa6:	d10e      	bne.n	8003fc6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f003 0320 	and.w	r3, r3, #32
 8003fb2:	2b20      	cmp	r3, #32
 8003fb4:	d107      	bne.n	8003fc6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f06f 0220 	mvn.w	r2, #32
 8003fbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 fd6f 	bl	8004aa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fc6:	bf00      	nop
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d101      	bne.n	8003fee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fea:	2302      	movs	r3, #2
 8003fec:	e0ae      	b.n	800414c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b0c      	cmp	r3, #12
 8003ffa:	f200 809f 	bhi.w	800413c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ffe:	a201      	add	r2, pc, #4	; (adr r2, 8004004 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004004:	08004039 	.word	0x08004039
 8004008:	0800413d 	.word	0x0800413d
 800400c:	0800413d 	.word	0x0800413d
 8004010:	0800413d 	.word	0x0800413d
 8004014:	08004079 	.word	0x08004079
 8004018:	0800413d 	.word	0x0800413d
 800401c:	0800413d 	.word	0x0800413d
 8004020:	0800413d 	.word	0x0800413d
 8004024:	080040bb 	.word	0x080040bb
 8004028:	0800413d 	.word	0x0800413d
 800402c:	0800413d 	.word	0x0800413d
 8004030:	0800413d 	.word	0x0800413d
 8004034:	080040fb 	.word	0x080040fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68b9      	ldr	r1, [r7, #8]
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fa18 	bl	8004474 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699a      	ldr	r2, [r3, #24]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0208 	orr.w	r2, r2, #8
 8004052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699a      	ldr	r2, [r3, #24]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0204 	bic.w	r2, r2, #4
 8004062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6999      	ldr	r1, [r3, #24]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	691a      	ldr	r2, [r3, #16]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	619a      	str	r2, [r3, #24]
      break;
 8004076:	e064      	b.n	8004142 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68b9      	ldr	r1, [r7, #8]
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fa68 	bl	8004554 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	699a      	ldr	r2, [r3, #24]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	699a      	ldr	r2, [r3, #24]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6999      	ldr	r1, [r3, #24]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	021a      	lsls	r2, r3, #8
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	619a      	str	r2, [r3, #24]
      break;
 80040b8:	e043      	b.n	8004142 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68b9      	ldr	r1, [r7, #8]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 fabd 	bl	8004640 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	69da      	ldr	r2, [r3, #28]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f042 0208 	orr.w	r2, r2, #8
 80040d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	69da      	ldr	r2, [r3, #28]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0204 	bic.w	r2, r2, #4
 80040e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69d9      	ldr	r1, [r3, #28]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	691a      	ldr	r2, [r3, #16]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	61da      	str	r2, [r3, #28]
      break;
 80040f8:	e023      	b.n	8004142 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68b9      	ldr	r1, [r7, #8]
 8004100:	4618      	mov	r0, r3
 8004102:	f000 fb11 	bl	8004728 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	69da      	ldr	r2, [r3, #28]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004114:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69da      	ldr	r2, [r3, #28]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004124:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	69d9      	ldr	r1, [r3, #28]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	021a      	lsls	r2, r3, #8
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	61da      	str	r2, [r3, #28]
      break;
 800413a:	e002      	b.n	8004142 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	75fb      	strb	r3, [r7, #23]
      break;
 8004140:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800414a:	7dfb      	ldrb	r3, [r7, #23]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004168:	2b01      	cmp	r3, #1
 800416a:	d101      	bne.n	8004170 <HAL_TIM_ConfigClockSource+0x1c>
 800416c:	2302      	movs	r3, #2
 800416e:	e0b4      	b.n	80042da <HAL_TIM_ConfigClockSource+0x186>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800418e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004196:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a8:	d03e      	beq.n	8004228 <HAL_TIM_ConfigClockSource+0xd4>
 80041aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ae:	f200 8087 	bhi.w	80042c0 <HAL_TIM_ConfigClockSource+0x16c>
 80041b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b6:	f000 8086 	beq.w	80042c6 <HAL_TIM_ConfigClockSource+0x172>
 80041ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041be:	d87f      	bhi.n	80042c0 <HAL_TIM_ConfigClockSource+0x16c>
 80041c0:	2b70      	cmp	r3, #112	; 0x70
 80041c2:	d01a      	beq.n	80041fa <HAL_TIM_ConfigClockSource+0xa6>
 80041c4:	2b70      	cmp	r3, #112	; 0x70
 80041c6:	d87b      	bhi.n	80042c0 <HAL_TIM_ConfigClockSource+0x16c>
 80041c8:	2b60      	cmp	r3, #96	; 0x60
 80041ca:	d050      	beq.n	800426e <HAL_TIM_ConfigClockSource+0x11a>
 80041cc:	2b60      	cmp	r3, #96	; 0x60
 80041ce:	d877      	bhi.n	80042c0 <HAL_TIM_ConfigClockSource+0x16c>
 80041d0:	2b50      	cmp	r3, #80	; 0x50
 80041d2:	d03c      	beq.n	800424e <HAL_TIM_ConfigClockSource+0xfa>
 80041d4:	2b50      	cmp	r3, #80	; 0x50
 80041d6:	d873      	bhi.n	80042c0 <HAL_TIM_ConfigClockSource+0x16c>
 80041d8:	2b40      	cmp	r3, #64	; 0x40
 80041da:	d058      	beq.n	800428e <HAL_TIM_ConfigClockSource+0x13a>
 80041dc:	2b40      	cmp	r3, #64	; 0x40
 80041de:	d86f      	bhi.n	80042c0 <HAL_TIM_ConfigClockSource+0x16c>
 80041e0:	2b30      	cmp	r3, #48	; 0x30
 80041e2:	d064      	beq.n	80042ae <HAL_TIM_ConfigClockSource+0x15a>
 80041e4:	2b30      	cmp	r3, #48	; 0x30
 80041e6:	d86b      	bhi.n	80042c0 <HAL_TIM_ConfigClockSource+0x16c>
 80041e8:	2b20      	cmp	r3, #32
 80041ea:	d060      	beq.n	80042ae <HAL_TIM_ConfigClockSource+0x15a>
 80041ec:	2b20      	cmp	r3, #32
 80041ee:	d867      	bhi.n	80042c0 <HAL_TIM_ConfigClockSource+0x16c>
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d05c      	beq.n	80042ae <HAL_TIM_ConfigClockSource+0x15a>
 80041f4:	2b10      	cmp	r3, #16
 80041f6:	d05a      	beq.n	80042ae <HAL_TIM_ConfigClockSource+0x15a>
 80041f8:	e062      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6818      	ldr	r0, [r3, #0]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	6899      	ldr	r1, [r3, #8]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f000 fb5d 	bl	80048c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800421c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	609a      	str	r2, [r3, #8]
      break;
 8004226:	e04f      	b.n	80042c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6818      	ldr	r0, [r3, #0]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	6899      	ldr	r1, [r3, #8]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f000 fb46 	bl	80048c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800424a:	609a      	str	r2, [r3, #8]
      break;
 800424c:	e03c      	b.n	80042c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6818      	ldr	r0, [r3, #0]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	6859      	ldr	r1, [r3, #4]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	461a      	mov	r2, r3
 800425c:	f000 faba 	bl	80047d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2150      	movs	r1, #80	; 0x50
 8004266:	4618      	mov	r0, r3
 8004268:	f000 fb13 	bl	8004892 <TIM_ITRx_SetConfig>
      break;
 800426c:	e02c      	b.n	80042c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6818      	ldr	r0, [r3, #0]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	6859      	ldr	r1, [r3, #4]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	461a      	mov	r2, r3
 800427c:	f000 fad9 	bl	8004832 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2160      	movs	r1, #96	; 0x60
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fb03 	bl	8004892 <TIM_ITRx_SetConfig>
      break;
 800428c:	e01c      	b.n	80042c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6818      	ldr	r0, [r3, #0]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	6859      	ldr	r1, [r3, #4]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	461a      	mov	r2, r3
 800429c:	f000 fa9a 	bl	80047d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2140      	movs	r1, #64	; 0x40
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 faf3 	bl	8004892 <TIM_ITRx_SetConfig>
      break;
 80042ac:	e00c      	b.n	80042c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4619      	mov	r1, r3
 80042b8:	4610      	mov	r0, r2
 80042ba:	f000 faea 	bl	8004892 <TIM_ITRx_SetConfig>
      break;
 80042be:	e003      	b.n	80042c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	73fb      	strb	r3, [r7, #15]
      break;
 80042c4:	e000      	b.n	80042c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b083      	sub	sp, #12
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
	...

08004334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a40      	ldr	r2, [pc, #256]	; (8004448 <TIM_Base_SetConfig+0x114>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d013      	beq.n	8004374 <TIM_Base_SetConfig+0x40>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004352:	d00f      	beq.n	8004374 <TIM_Base_SetConfig+0x40>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a3d      	ldr	r2, [pc, #244]	; (800444c <TIM_Base_SetConfig+0x118>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d00b      	beq.n	8004374 <TIM_Base_SetConfig+0x40>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a3c      	ldr	r2, [pc, #240]	; (8004450 <TIM_Base_SetConfig+0x11c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d007      	beq.n	8004374 <TIM_Base_SetConfig+0x40>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a3b      	ldr	r2, [pc, #236]	; (8004454 <TIM_Base_SetConfig+0x120>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d003      	beq.n	8004374 <TIM_Base_SetConfig+0x40>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a3a      	ldr	r2, [pc, #232]	; (8004458 <TIM_Base_SetConfig+0x124>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d108      	bne.n	8004386 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	4313      	orrs	r3, r2
 8004384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a2f      	ldr	r2, [pc, #188]	; (8004448 <TIM_Base_SetConfig+0x114>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d02b      	beq.n	80043e6 <TIM_Base_SetConfig+0xb2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004394:	d027      	beq.n	80043e6 <TIM_Base_SetConfig+0xb2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a2c      	ldr	r2, [pc, #176]	; (800444c <TIM_Base_SetConfig+0x118>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d023      	beq.n	80043e6 <TIM_Base_SetConfig+0xb2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a2b      	ldr	r2, [pc, #172]	; (8004450 <TIM_Base_SetConfig+0x11c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d01f      	beq.n	80043e6 <TIM_Base_SetConfig+0xb2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a2a      	ldr	r2, [pc, #168]	; (8004454 <TIM_Base_SetConfig+0x120>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d01b      	beq.n	80043e6 <TIM_Base_SetConfig+0xb2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a29      	ldr	r2, [pc, #164]	; (8004458 <TIM_Base_SetConfig+0x124>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d017      	beq.n	80043e6 <TIM_Base_SetConfig+0xb2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a28      	ldr	r2, [pc, #160]	; (800445c <TIM_Base_SetConfig+0x128>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d013      	beq.n	80043e6 <TIM_Base_SetConfig+0xb2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a27      	ldr	r2, [pc, #156]	; (8004460 <TIM_Base_SetConfig+0x12c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00f      	beq.n	80043e6 <TIM_Base_SetConfig+0xb2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a26      	ldr	r2, [pc, #152]	; (8004464 <TIM_Base_SetConfig+0x130>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d00b      	beq.n	80043e6 <TIM_Base_SetConfig+0xb2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a25      	ldr	r2, [pc, #148]	; (8004468 <TIM_Base_SetConfig+0x134>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d007      	beq.n	80043e6 <TIM_Base_SetConfig+0xb2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a24      	ldr	r2, [pc, #144]	; (800446c <TIM_Base_SetConfig+0x138>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d003      	beq.n	80043e6 <TIM_Base_SetConfig+0xb2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a23      	ldr	r2, [pc, #140]	; (8004470 <TIM_Base_SetConfig+0x13c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d108      	bne.n	80043f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a0a      	ldr	r2, [pc, #40]	; (8004448 <TIM_Base_SetConfig+0x114>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d003      	beq.n	800442c <TIM_Base_SetConfig+0xf8>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a0c      	ldr	r2, [pc, #48]	; (8004458 <TIM_Base_SetConfig+0x124>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d103      	bne.n	8004434 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	615a      	str	r2, [r3, #20]
}
 800443a:	bf00      	nop
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	40010000 	.word	0x40010000
 800444c:	40000400 	.word	0x40000400
 8004450:	40000800 	.word	0x40000800
 8004454:	40000c00 	.word	0x40000c00
 8004458:	40010400 	.word	0x40010400
 800445c:	40014000 	.word	0x40014000
 8004460:	40014400 	.word	0x40014400
 8004464:	40014800 	.word	0x40014800
 8004468:	40001800 	.word	0x40001800
 800446c:	40001c00 	.word	0x40001c00
 8004470:	40002000 	.word	0x40002000

08004474 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004474:	b480      	push	{r7}
 8004476:	b087      	sub	sp, #28
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	f023 0201 	bic.w	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 0303 	bic.w	r3, r3, #3
 80044aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f023 0302 	bic.w	r3, r3, #2
 80044bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a20      	ldr	r2, [pc, #128]	; (800454c <TIM_OC1_SetConfig+0xd8>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d003      	beq.n	80044d8 <TIM_OC1_SetConfig+0x64>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a1f      	ldr	r2, [pc, #124]	; (8004550 <TIM_OC1_SetConfig+0xdc>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d10c      	bne.n	80044f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f023 0308 	bic.w	r3, r3, #8
 80044de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f023 0304 	bic.w	r3, r3, #4
 80044f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a15      	ldr	r2, [pc, #84]	; (800454c <TIM_OC1_SetConfig+0xd8>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d003      	beq.n	8004502 <TIM_OC1_SetConfig+0x8e>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a14      	ldr	r2, [pc, #80]	; (8004550 <TIM_OC1_SetConfig+0xdc>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d111      	bne.n	8004526 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4313      	orrs	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	4313      	orrs	r3, r2
 8004524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	621a      	str	r2, [r3, #32]
}
 8004540:	bf00      	nop
 8004542:	371c      	adds	r7, #28
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	40010000 	.word	0x40010000
 8004550:	40010400 	.word	0x40010400

08004554 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	f023 0210 	bic.w	r2, r3, #16
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800458a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	021b      	lsls	r3, r3, #8
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	4313      	orrs	r3, r2
 8004596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f023 0320 	bic.w	r3, r3, #32
 800459e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	011b      	lsls	r3, r3, #4
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a22      	ldr	r2, [pc, #136]	; (8004638 <TIM_OC2_SetConfig+0xe4>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d003      	beq.n	80045bc <TIM_OC2_SetConfig+0x68>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a21      	ldr	r2, [pc, #132]	; (800463c <TIM_OC2_SetConfig+0xe8>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d10d      	bne.n	80045d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	011b      	lsls	r3, r3, #4
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a17      	ldr	r2, [pc, #92]	; (8004638 <TIM_OC2_SetConfig+0xe4>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d003      	beq.n	80045e8 <TIM_OC2_SetConfig+0x94>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a16      	ldr	r2, [pc, #88]	; (800463c <TIM_OC2_SetConfig+0xe8>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d113      	bne.n	8004610 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	621a      	str	r2, [r3, #32]
}
 800462a:	bf00      	nop
 800462c:	371c      	adds	r7, #28
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	40010000 	.word	0x40010000
 800463c:	40010400 	.word	0x40010400

08004640 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004640:	b480      	push	{r7}
 8004642:	b087      	sub	sp, #28
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f023 0303 	bic.w	r3, r3, #3
 8004676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004688:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	021b      	lsls	r3, r3, #8
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	4313      	orrs	r3, r2
 8004694:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a21      	ldr	r2, [pc, #132]	; (8004720 <TIM_OC3_SetConfig+0xe0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d003      	beq.n	80046a6 <TIM_OC3_SetConfig+0x66>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a20      	ldr	r2, [pc, #128]	; (8004724 <TIM_OC3_SetConfig+0xe4>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d10d      	bne.n	80046c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	021b      	lsls	r3, r3, #8
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a16      	ldr	r2, [pc, #88]	; (8004720 <TIM_OC3_SetConfig+0xe0>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d003      	beq.n	80046d2 <TIM_OC3_SetConfig+0x92>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a15      	ldr	r2, [pc, #84]	; (8004724 <TIM_OC3_SetConfig+0xe4>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d113      	bne.n	80046fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	621a      	str	r2, [r3, #32]
}
 8004714:	bf00      	nop
 8004716:	371c      	adds	r7, #28
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	40010000 	.word	0x40010000
 8004724:	40010400 	.word	0x40010400

08004728 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800475e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	021b      	lsls	r3, r3, #8
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	4313      	orrs	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004772:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	031b      	lsls	r3, r3, #12
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a12      	ldr	r2, [pc, #72]	; (80047cc <TIM_OC4_SetConfig+0xa4>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d003      	beq.n	8004790 <TIM_OC4_SetConfig+0x68>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a11      	ldr	r2, [pc, #68]	; (80047d0 <TIM_OC4_SetConfig+0xa8>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d109      	bne.n	80047a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004796:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	019b      	lsls	r3, r3, #6
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	621a      	str	r2, [r3, #32]
}
 80047be:	bf00      	nop
 80047c0:	371c      	adds	r7, #28
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	40010000 	.word	0x40010000
 80047d0:	40010400 	.word	0x40010400

080047d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	f023 0201 	bic.w	r2, r3, #1
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	4313      	orrs	r3, r2
 8004808:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f023 030a 	bic.w	r3, r3, #10
 8004810:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	621a      	str	r2, [r3, #32]
}
 8004826:	bf00      	nop
 8004828:	371c      	adds	r7, #28
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004832:	b480      	push	{r7}
 8004834:	b087      	sub	sp, #28
 8004836:	af00      	add	r7, sp, #0
 8004838:	60f8      	str	r0, [r7, #12]
 800483a:	60b9      	str	r1, [r7, #8]
 800483c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	f023 0210 	bic.w	r2, r3, #16
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800485c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	031b      	lsls	r3, r3, #12
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	4313      	orrs	r3, r2
 8004866:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800486e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	4313      	orrs	r3, r2
 8004878:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	621a      	str	r2, [r3, #32]
}
 8004886:	bf00      	nop
 8004888:	371c      	adds	r7, #28
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004892:	b480      	push	{r7}
 8004894:	b085      	sub	sp, #20
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f043 0307 	orr.w	r3, r3, #7
 80048b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	609a      	str	r2, [r3, #8]
}
 80048bc:	bf00      	nop
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
 80048d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	021a      	lsls	r2, r3, #8
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	431a      	orrs	r2, r3
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	609a      	str	r2, [r3, #8]
}
 80048fc:	bf00      	nop
 80048fe:	371c      	adds	r7, #28
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004918:	2b01      	cmp	r3, #1
 800491a:	d101      	bne.n	8004920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800491c:	2302      	movs	r3, #2
 800491e:	e05a      	b.n	80049d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004946:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a21      	ldr	r2, [pc, #132]	; (80049e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d022      	beq.n	80049aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496c:	d01d      	beq.n	80049aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a1d      	ldr	r2, [pc, #116]	; (80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d018      	beq.n	80049aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a1b      	ldr	r2, [pc, #108]	; (80049ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d013      	beq.n	80049aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a1a      	ldr	r2, [pc, #104]	; (80049f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d00e      	beq.n	80049aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a18      	ldr	r2, [pc, #96]	; (80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d009      	beq.n	80049aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a17      	ldr	r2, [pc, #92]	; (80049f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d004      	beq.n	80049aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a15      	ldr	r2, [pc, #84]	; (80049fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d10c      	bne.n	80049c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40010000 	.word	0x40010000
 80049e8:	40000400 	.word	0x40000400
 80049ec:	40000800 	.word	0x40000800
 80049f0:	40000c00 	.word	0x40000c00
 80049f4:	40010400 	.word	0x40010400
 80049f8:	40014000 	.word	0x40014000
 80049fc:	40001800 	.word	0x40001800

08004a00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d101      	bne.n	8004a1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a18:	2302      	movs	r3, #2
 8004a1a:	e03d      	b.n	8004a98 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e03f      	b.n	8004b5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d106      	bne.n	8004af8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7fd fb0e 	bl	8002114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2224      	movs	r2, #36	; 0x24
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68da      	ldr	r2, [r3, #12]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f829 	bl	8004b68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	691a      	ldr	r2, [r3, #16]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	695a      	ldr	r2, [r3, #20]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
	...

08004b68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b6c:	b0c0      	sub	sp, #256	; 0x100
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b84:	68d9      	ldr	r1, [r3, #12]
 8004b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	ea40 0301 	orr.w	r3, r0, r1
 8004b90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004bc0:	f021 010c 	bic.w	r1, r1, #12
 8004bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004bce:	430b      	orrs	r3, r1
 8004bd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be2:	6999      	ldr	r1, [r3, #24]
 8004be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	ea40 0301 	orr.w	r3, r0, r1
 8004bee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	4b8f      	ldr	r3, [pc, #572]	; (8004e34 <UART_SetConfig+0x2cc>)
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d005      	beq.n	8004c08 <UART_SetConfig+0xa0>
 8004bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	4b8d      	ldr	r3, [pc, #564]	; (8004e38 <UART_SetConfig+0x2d0>)
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d104      	bne.n	8004c12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c08:	f7fe ff06 	bl	8003a18 <HAL_RCC_GetPCLK2Freq>
 8004c0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c10:	e003      	b.n	8004c1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c12:	f7fe feed 	bl	80039f0 <HAL_RCC_GetPCLK1Freq>
 8004c16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c24:	f040 810c 	bne.w	8004e40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c3a:	4622      	mov	r2, r4
 8004c3c:	462b      	mov	r3, r5
 8004c3e:	1891      	adds	r1, r2, r2
 8004c40:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c42:	415b      	adcs	r3, r3
 8004c44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	eb12 0801 	adds.w	r8, r2, r1
 8004c50:	4629      	mov	r1, r5
 8004c52:	eb43 0901 	adc.w	r9, r3, r1
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	f04f 0300 	mov.w	r3, #0
 8004c5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c6a:	4690      	mov	r8, r2
 8004c6c:	4699      	mov	r9, r3
 8004c6e:	4623      	mov	r3, r4
 8004c70:	eb18 0303 	adds.w	r3, r8, r3
 8004c74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c78:	462b      	mov	r3, r5
 8004c7a:	eb49 0303 	adc.w	r3, r9, r3
 8004c7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c96:	460b      	mov	r3, r1
 8004c98:	18db      	adds	r3, r3, r3
 8004c9a:	653b      	str	r3, [r7, #80]	; 0x50
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	eb42 0303 	adc.w	r3, r2, r3
 8004ca2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ca4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ca8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004cac:	f7fc f8fa 	bl	8000ea4 <__aeabi_uldivmod>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4b61      	ldr	r3, [pc, #388]	; (8004e3c <UART_SetConfig+0x2d4>)
 8004cb6:	fba3 2302 	umull	r2, r3, r3, r2
 8004cba:	095b      	lsrs	r3, r3, #5
 8004cbc:	011c      	lsls	r4, r3, #4
 8004cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cc8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ccc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004cd0:	4642      	mov	r2, r8
 8004cd2:	464b      	mov	r3, r9
 8004cd4:	1891      	adds	r1, r2, r2
 8004cd6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004cd8:	415b      	adcs	r3, r3
 8004cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ce0:	4641      	mov	r1, r8
 8004ce2:	eb12 0a01 	adds.w	sl, r2, r1
 8004ce6:	4649      	mov	r1, r9
 8004ce8:	eb43 0b01 	adc.w	fp, r3, r1
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cf8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d00:	4692      	mov	sl, r2
 8004d02:	469b      	mov	fp, r3
 8004d04:	4643      	mov	r3, r8
 8004d06:	eb1a 0303 	adds.w	r3, sl, r3
 8004d0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d0e:	464b      	mov	r3, r9
 8004d10:	eb4b 0303 	adc.w	r3, fp, r3
 8004d14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	18db      	adds	r3, r3, r3
 8004d30:	643b      	str	r3, [r7, #64]	; 0x40
 8004d32:	4613      	mov	r3, r2
 8004d34:	eb42 0303 	adc.w	r3, r2, r3
 8004d38:	647b      	str	r3, [r7, #68]	; 0x44
 8004d3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d42:	f7fc f8af 	bl	8000ea4 <__aeabi_uldivmod>
 8004d46:	4602      	mov	r2, r0
 8004d48:	460b      	mov	r3, r1
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	4b3b      	ldr	r3, [pc, #236]	; (8004e3c <UART_SetConfig+0x2d4>)
 8004d4e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d52:	095b      	lsrs	r3, r3, #5
 8004d54:	2264      	movs	r2, #100	; 0x64
 8004d56:	fb02 f303 	mul.w	r3, r2, r3
 8004d5a:	1acb      	subs	r3, r1, r3
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d62:	4b36      	ldr	r3, [pc, #216]	; (8004e3c <UART_SetConfig+0x2d4>)
 8004d64:	fba3 2302 	umull	r2, r3, r3, r2
 8004d68:	095b      	lsrs	r3, r3, #5
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d70:	441c      	add	r4, r3
 8004d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d76:	2200      	movs	r2, #0
 8004d78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004d80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004d84:	4642      	mov	r2, r8
 8004d86:	464b      	mov	r3, r9
 8004d88:	1891      	adds	r1, r2, r2
 8004d8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d8c:	415b      	adcs	r3, r3
 8004d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d94:	4641      	mov	r1, r8
 8004d96:	1851      	adds	r1, r2, r1
 8004d98:	6339      	str	r1, [r7, #48]	; 0x30
 8004d9a:	4649      	mov	r1, r9
 8004d9c:	414b      	adcs	r3, r1
 8004d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004dac:	4659      	mov	r1, fp
 8004dae:	00cb      	lsls	r3, r1, #3
 8004db0:	4651      	mov	r1, sl
 8004db2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004db6:	4651      	mov	r1, sl
 8004db8:	00ca      	lsls	r2, r1, #3
 8004dba:	4610      	mov	r0, r2
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	4642      	mov	r2, r8
 8004dc2:	189b      	adds	r3, r3, r2
 8004dc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004dc8:	464b      	mov	r3, r9
 8004dca:	460a      	mov	r2, r1
 8004dcc:	eb42 0303 	adc.w	r3, r2, r3
 8004dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004de0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004de4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004de8:	460b      	mov	r3, r1
 8004dea:	18db      	adds	r3, r3, r3
 8004dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dee:	4613      	mov	r3, r2
 8004df0:	eb42 0303 	adc.w	r3, r2, r3
 8004df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004df6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004dfe:	f7fc f851 	bl	8000ea4 <__aeabi_uldivmod>
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	4b0d      	ldr	r3, [pc, #52]	; (8004e3c <UART_SetConfig+0x2d4>)
 8004e08:	fba3 1302 	umull	r1, r3, r3, r2
 8004e0c:	095b      	lsrs	r3, r3, #5
 8004e0e:	2164      	movs	r1, #100	; 0x64
 8004e10:	fb01 f303 	mul.w	r3, r1, r3
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	3332      	adds	r3, #50	; 0x32
 8004e1a:	4a08      	ldr	r2, [pc, #32]	; (8004e3c <UART_SetConfig+0x2d4>)
 8004e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e20:	095b      	lsrs	r3, r3, #5
 8004e22:	f003 0207 	and.w	r2, r3, #7
 8004e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4422      	add	r2, r4
 8004e2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e30:	e105      	b.n	800503e <UART_SetConfig+0x4d6>
 8004e32:	bf00      	nop
 8004e34:	40011000 	.word	0x40011000
 8004e38:	40011400 	.word	0x40011400
 8004e3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e44:	2200      	movs	r2, #0
 8004e46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e52:	4642      	mov	r2, r8
 8004e54:	464b      	mov	r3, r9
 8004e56:	1891      	adds	r1, r2, r2
 8004e58:	6239      	str	r1, [r7, #32]
 8004e5a:	415b      	adcs	r3, r3
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e62:	4641      	mov	r1, r8
 8004e64:	1854      	adds	r4, r2, r1
 8004e66:	4649      	mov	r1, r9
 8004e68:	eb43 0501 	adc.w	r5, r3, r1
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	f04f 0300 	mov.w	r3, #0
 8004e74:	00eb      	lsls	r3, r5, #3
 8004e76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e7a:	00e2      	lsls	r2, r4, #3
 8004e7c:	4614      	mov	r4, r2
 8004e7e:	461d      	mov	r5, r3
 8004e80:	4643      	mov	r3, r8
 8004e82:	18e3      	adds	r3, r4, r3
 8004e84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e88:	464b      	mov	r3, r9
 8004e8a:	eb45 0303 	adc.w	r3, r5, r3
 8004e8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004eae:	4629      	mov	r1, r5
 8004eb0:	008b      	lsls	r3, r1, #2
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eb8:	4621      	mov	r1, r4
 8004eba:	008a      	lsls	r2, r1, #2
 8004ebc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ec0:	f7fb fff0 	bl	8000ea4 <__aeabi_uldivmod>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4b60      	ldr	r3, [pc, #384]	; (800504c <UART_SetConfig+0x4e4>)
 8004eca:	fba3 2302 	umull	r2, r3, r3, r2
 8004ece:	095b      	lsrs	r3, r3, #5
 8004ed0:	011c      	lsls	r4, r3, #4
 8004ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004edc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ee0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ee4:	4642      	mov	r2, r8
 8004ee6:	464b      	mov	r3, r9
 8004ee8:	1891      	adds	r1, r2, r2
 8004eea:	61b9      	str	r1, [r7, #24]
 8004eec:	415b      	adcs	r3, r3
 8004eee:	61fb      	str	r3, [r7, #28]
 8004ef0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ef4:	4641      	mov	r1, r8
 8004ef6:	1851      	adds	r1, r2, r1
 8004ef8:	6139      	str	r1, [r7, #16]
 8004efa:	4649      	mov	r1, r9
 8004efc:	414b      	adcs	r3, r1
 8004efe:	617b      	str	r3, [r7, #20]
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	f04f 0300 	mov.w	r3, #0
 8004f08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f0c:	4659      	mov	r1, fp
 8004f0e:	00cb      	lsls	r3, r1, #3
 8004f10:	4651      	mov	r1, sl
 8004f12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f16:	4651      	mov	r1, sl
 8004f18:	00ca      	lsls	r2, r1, #3
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4603      	mov	r3, r0
 8004f20:	4642      	mov	r2, r8
 8004f22:	189b      	adds	r3, r3, r2
 8004f24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f28:	464b      	mov	r3, r9
 8004f2a:	460a      	mov	r2, r1
 8004f2c:	eb42 0303 	adc.w	r3, r2, r3
 8004f30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f40:	f04f 0200 	mov.w	r2, #0
 8004f44:	f04f 0300 	mov.w	r3, #0
 8004f48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f4c:	4649      	mov	r1, r9
 8004f4e:	008b      	lsls	r3, r1, #2
 8004f50:	4641      	mov	r1, r8
 8004f52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f56:	4641      	mov	r1, r8
 8004f58:	008a      	lsls	r2, r1, #2
 8004f5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f5e:	f7fb ffa1 	bl	8000ea4 <__aeabi_uldivmod>
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	4b39      	ldr	r3, [pc, #228]	; (800504c <UART_SetConfig+0x4e4>)
 8004f68:	fba3 1302 	umull	r1, r3, r3, r2
 8004f6c:	095b      	lsrs	r3, r3, #5
 8004f6e:	2164      	movs	r1, #100	; 0x64
 8004f70:	fb01 f303 	mul.w	r3, r1, r3
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	011b      	lsls	r3, r3, #4
 8004f78:	3332      	adds	r3, #50	; 0x32
 8004f7a:	4a34      	ldr	r2, [pc, #208]	; (800504c <UART_SetConfig+0x4e4>)
 8004f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f80:	095b      	lsrs	r3, r3, #5
 8004f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f86:	441c      	add	r4, r3
 8004f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	673b      	str	r3, [r7, #112]	; 0x70
 8004f90:	677a      	str	r2, [r7, #116]	; 0x74
 8004f92:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f96:	4642      	mov	r2, r8
 8004f98:	464b      	mov	r3, r9
 8004f9a:	1891      	adds	r1, r2, r2
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	415b      	adcs	r3, r3
 8004fa0:	60fb      	str	r3, [r7, #12]
 8004fa2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fa6:	4641      	mov	r1, r8
 8004fa8:	1851      	adds	r1, r2, r1
 8004faa:	6039      	str	r1, [r7, #0]
 8004fac:	4649      	mov	r1, r9
 8004fae:	414b      	adcs	r3, r1
 8004fb0:	607b      	str	r3, [r7, #4]
 8004fb2:	f04f 0200 	mov.w	r2, #0
 8004fb6:	f04f 0300 	mov.w	r3, #0
 8004fba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fbe:	4659      	mov	r1, fp
 8004fc0:	00cb      	lsls	r3, r1, #3
 8004fc2:	4651      	mov	r1, sl
 8004fc4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fc8:	4651      	mov	r1, sl
 8004fca:	00ca      	lsls	r2, r1, #3
 8004fcc:	4610      	mov	r0, r2
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	4642      	mov	r2, r8
 8004fd4:	189b      	adds	r3, r3, r2
 8004fd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fd8:	464b      	mov	r3, r9
 8004fda:	460a      	mov	r2, r1
 8004fdc:	eb42 0303 	adc.w	r3, r2, r3
 8004fe0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	663b      	str	r3, [r7, #96]	; 0x60
 8004fec:	667a      	str	r2, [r7, #100]	; 0x64
 8004fee:	f04f 0200 	mov.w	r2, #0
 8004ff2:	f04f 0300 	mov.w	r3, #0
 8004ff6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ffa:	4649      	mov	r1, r9
 8004ffc:	008b      	lsls	r3, r1, #2
 8004ffe:	4641      	mov	r1, r8
 8005000:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005004:	4641      	mov	r1, r8
 8005006:	008a      	lsls	r2, r1, #2
 8005008:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800500c:	f7fb ff4a 	bl	8000ea4 <__aeabi_uldivmod>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	4b0d      	ldr	r3, [pc, #52]	; (800504c <UART_SetConfig+0x4e4>)
 8005016:	fba3 1302 	umull	r1, r3, r3, r2
 800501a:	095b      	lsrs	r3, r3, #5
 800501c:	2164      	movs	r1, #100	; 0x64
 800501e:	fb01 f303 	mul.w	r3, r1, r3
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	011b      	lsls	r3, r3, #4
 8005026:	3332      	adds	r3, #50	; 0x32
 8005028:	4a08      	ldr	r2, [pc, #32]	; (800504c <UART_SetConfig+0x4e4>)
 800502a:	fba2 2303 	umull	r2, r3, r2, r3
 800502e:	095b      	lsrs	r3, r3, #5
 8005030:	f003 020f 	and.w	r2, r3, #15
 8005034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4422      	add	r2, r4
 800503c:	609a      	str	r2, [r3, #8]
}
 800503e:	bf00      	nop
 8005040:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005044:	46bd      	mov	sp, r7
 8005046:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800504a:	bf00      	nop
 800504c:	51eb851f 	.word	0x51eb851f

08005050 <MOTOR_driver_rotary>:
    motor->ENC_CH1 = CH1;
    motor->ENC_CH2 = CH2;
    HAL_TIM_Encoder_Start(motor->htimENC, motor->ENC_CH1 | motor->ENC_CH2);
}
void MOTOR_driver_rotary(MOTOR_DRIVER_t* motor, int32_t duty)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
    if (duty >= 0)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	db4d      	blt.n	80050fc <MOTOR_driver_rotary+0xac>
    {
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH1, (uint16_t)duty);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d106      	bne.n	8005076 <MOTOR_driver_rotary+0x26>
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	b29a      	uxth	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	635a      	str	r2, [r3, #52]	; 0x34
 8005074:	e01e      	b.n	80050b4 <MOTOR_driver_rotary+0x64>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	2b04      	cmp	r3, #4
 800507c:	d107      	bne.n	800508e <MOTOR_driver_rotary+0x3e>
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	b299      	uxth	r1, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	460b      	mov	r3, r1
 800508a:	6393      	str	r3, [r2, #56]	; 0x38
 800508c:	e012      	b.n	80050b4 <MOTOR_driver_rotary+0x64>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	2b08      	cmp	r3, #8
 8005094:	d107      	bne.n	80050a6 <MOTOR_driver_rotary+0x56>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	b299      	uxth	r1, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	460b      	mov	r3, r1
 80050a2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80050a4:	e006      	b.n	80050b4 <MOTOR_driver_rotary+0x64>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	b299      	uxth	r1, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	460b      	mov	r3, r1
 80050b2:	6413      	str	r3, [r2, #64]	; 0x40
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)0);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d105      	bne.n	80050c8 <MOTOR_driver_rotary+0x78>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2200      	movs	r2, #0
 80050c4:	635a      	str	r2, [r3, #52]	; 0x34
    else
    {
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH1, (uint16_t)0);
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)-duty);
    }
}
 80050c6:	e06f      	b.n	80051a8 <MOTOR_driver_rotary+0x158>
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)0);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	d105      	bne.n	80050dc <MOTOR_driver_rotary+0x8c>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	2300      	movs	r3, #0
 80050d8:	6393      	str	r3, [r2, #56]	; 0x38
 80050da:	e065      	b.n	80051a8 <MOTOR_driver_rotary+0x158>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d105      	bne.n	80050f0 <MOTOR_driver_rotary+0xa0>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	2300      	movs	r3, #0
 80050ec:	63d3      	str	r3, [r2, #60]	; 0x3c
 80050ee:	e05b      	b.n	80051a8 <MOTOR_driver_rotary+0x158>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	2300      	movs	r3, #0
 80050f8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80050fa:	e055      	b.n	80051a8 <MOTOR_driver_rotary+0x158>
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH1, (uint16_t)0);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d105      	bne.n	8005110 <MOTOR_driver_rotary+0xc0>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2200      	movs	r2, #0
 800510c:	635a      	str	r2, [r3, #52]	; 0x34
 800510e:	e018      	b.n	8005142 <MOTOR_driver_rotary+0xf2>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	2b04      	cmp	r3, #4
 8005116:	d105      	bne.n	8005124 <MOTOR_driver_rotary+0xd4>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	2300      	movs	r3, #0
 8005120:	6393      	str	r3, [r2, #56]	; 0x38
 8005122:	e00e      	b.n	8005142 <MOTOR_driver_rotary+0xf2>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	2b08      	cmp	r3, #8
 800512a:	d105      	bne.n	8005138 <MOTOR_driver_rotary+0xe8>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	2300      	movs	r3, #0
 8005134:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005136:	e004      	b.n	8005142 <MOTOR_driver_rotary+0xf2>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	2300      	movs	r3, #0
 8005140:	6413      	str	r3, [r2, #64]	; 0x40
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)-duty);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d108      	bne.n	800515c <MOTOR_driver_rotary+0x10c>
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	b29b      	uxth	r3, r3
 800514e:	425b      	negs	r3, r3
 8005150:	b29a      	uxth	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	635a      	str	r2, [r3, #52]	; 0x34
}
 800515a:	e025      	b.n	80051a8 <MOTOR_driver_rotary+0x158>
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)-duty);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	2b04      	cmp	r3, #4
 8005162:	d109      	bne.n	8005178 <MOTOR_driver_rotary+0x128>
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	b29b      	uxth	r3, r3
 8005168:	425b      	negs	r3, r3
 800516a:	b299      	uxth	r1, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	460b      	mov	r3, r1
 8005174:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005176:	e017      	b.n	80051a8 <MOTOR_driver_rotary+0x158>
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)-duty);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	2b08      	cmp	r3, #8
 800517e:	d109      	bne.n	8005194 <MOTOR_driver_rotary+0x144>
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	b29b      	uxth	r3, r3
 8005184:	425b      	negs	r3, r3
 8005186:	b299      	uxth	r1, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	460b      	mov	r3, r1
 8005190:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8005192:	e009      	b.n	80051a8 <MOTOR_driver_rotary+0x158>
        __HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)-duty);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	b29b      	uxth	r3, r3
 8005198:	425b      	negs	r3, r3
 800519a:	b299      	uxth	r1, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	460b      	mov	r3, r1
 80051a4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80051a6:	e7ff      	b.n	80051a8 <MOTOR_driver_rotary+0x158>
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <MOTOR_driver_readPosAndSpeed>:
void MOTOR_driver_readPosAndSpeed(MOTOR_DRIVER_t* motor, float* pos, float* speed, float Ts)
{
 80051b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80051b8:	b084      	sub	sp, #16
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	60f8      	str	r0, [r7, #12]
 80051be:	60b9      	str	r1, [r7, #8]
 80051c0:	607a      	str	r2, [r7, #4]
 80051c2:	ed87 0a00 	vstr	s0, [r7]
    motor->EncCount += (int16_t)motor->htimENC->Instance->CNT; // Đọc xung encoder
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	b219      	sxth	r1, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80051d6:	b209      	sxth	r1, r1
 80051d8:	17c8      	asrs	r0, r1, #31
 80051da:	460c      	mov	r4, r1
 80051dc:	4605      	mov	r5, r0
 80051de:	eb12 0804 	adds.w	r8, r2, r4
 80051e2:	eb43 0905 	adc.w	r9, r3, r5
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	e9c3 8902 	strd	r8, r9, [r3, #8]
    __HAL_TIM_SET_COUNTER(motor->htimENC, 0); // Reset xung encoder
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2200      	movs	r2, #0
 80051f4:	625a      	str	r2, [r3, #36]	; 0x24

    *pos = motor->pos = (float)motor->EncCount / motor->ratio; // Tính góc hiện tại của trục động cơ 
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80051fc:	4610      	mov	r0, r2
 80051fe:	4619      	mov	r1, r3
 8005200:	f7fb fe12 	bl	8000e28 <__aeabi_l2f>
 8005204:	ee06 0a90 	vmov	s13, r0
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800520e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	601a      	str	r2, [r3, #0]
    *speed = motor->speed = (motor->pos - motor->prePos) / Ts; // tính vận tốc xoay góc
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800522c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005230:	ed97 7a00 	vldr	s14, [r7]
 8005234:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	edc3 7a08 	vstr	s15, [r3, #32]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6a1a      	ldr	r2, [r3, #32]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	601a      	str	r2, [r3, #0]
    motor->prePos = motor->pos;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800524e:	bf00      	nop
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08005258 <MOTOR_setPIDVelocity>:
 *  Created on: Nov 20, 2023
 *      Author: minht
 */
#include "MOTOR_PID_CONTROL.h"
void MOTOR_setPIDVelocity(MOTOR_t* motor, float Kp, float Ki, float Kd, float Ts)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	6178      	str	r0, [r7, #20]
 8005260:	ed87 0a04 	vstr	s0, [r7, #16]
 8005264:	edc7 0a03 	vstr	s1, [r7, #12]
 8005268:	ed87 1a02 	vstr	s2, [r7, #8]
 800526c:	edc7 1a01 	vstr	s3, [r7, #4]
    PID_init(&motor->PIDVelocity, Kp, Ki, Kd, Ts);
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	edd7 1a01 	vldr	s3, [r7, #4]
 8005276:	ed97 1a02 	vldr	s2, [r7, #8]
 800527a:	edd7 0a03 	vldr	s1, [r7, #12]
 800527e:	ed97 0a04 	vldr	s0, [r7, #16]
 8005282:	4618      	mov	r0, r3
 8005284:	f000 f913 	bl	80054ae <PID_init>
}
 8005288:	bf00      	nop
 800528a:	3718      	adds	r7, #24
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <MOTOR_setPIDPosition>:
void MOTOR_setPIDPosition(MOTOR_t* motor, float Kp, float Ki, float Kd, float Ts)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	6178      	str	r0, [r7, #20]
 8005298:	ed87 0a04 	vstr	s0, [r7, #16]
 800529c:	edc7 0a03 	vstr	s1, [r7, #12]
 80052a0:	ed87 1a02 	vstr	s2, [r7, #8]
 80052a4:	edc7 1a01 	vstr	s3, [r7, #4]
    PID_init(&motor->PIDPosition, Kp, Ki, Kd, Ts);
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	3348      	adds	r3, #72	; 0x48
 80052ac:	edd7 1a01 	vldr	s3, [r7, #4]
 80052b0:	ed97 1a02 	vldr	s2, [r7, #8]
 80052b4:	edd7 0a03 	vldr	s1, [r7, #12]
 80052b8:	ed97 0a04 	vldr	s0, [r7, #16]
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 f8f6 	bl	80054ae <PID_init>
}
 80052c2:	bf00      	nop
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
	...

080052cc <MOTOR_setOutputRange>:
void MOTOR_setOutputRange(MOTOR_t* motor, float OutMin, float OutMax)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	ed87 0a02 	vstr	s0, [r7, #8]
 80052d8:	edc7 0a01 	vstr	s1, [r7, #4]
    PID_setOutputRange(&motor->PIDPosition, -200, 200);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	3348      	adds	r3, #72	; 0x48
 80052e0:	eddf 0a09 	vldr	s1, [pc, #36]	; 8005308 <MOTOR_setOutputRange+0x3c>
 80052e4:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800530c <MOTOR_setOutputRange+0x40>
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 f91d 	bl	8005528 <PID_setOutputRange>
    PID_setOutputRange(&motor->PIDVelocity, OutMin, OutMax);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	edd7 0a01 	vldr	s1, [r7, #4]
 80052f4:	ed97 0a02 	vldr	s0, [r7, #8]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 f915 	bl	8005528 <PID_setOutputRange>
}
 80052fe:	bf00      	nop
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	43480000 	.word	0x43480000
 800530c:	c3480000 	.word	0xc3480000

08005310 <MOTOR_setWindupRange>:
void MOTOR_setWindupRange(MOTOR_t* motor, float OutMin, float OutMax)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	ed87 0a02 	vstr	s0, [r7, #8]
 800531c:	edc7 0a01 	vstr	s1, [r7, #4]
    PID_setWindupGain(&motor->PIDVelocity, 0);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8005344 <MOTOR_setWindupRange+0x34>
 8005326:	4618      	mov	r0, r3
 8005328:	f000 f926 	bl	8005578 <PID_setWindupGain>
    PID_setWindupRange(&motor->PIDVelocity, OutMin, OutMax);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	edd7 0a01 	vldr	s1, [r7, #4]
 8005332:	ed97 0a02 	vldr	s0, [r7, #8]
 8005336:	4618      	mov	r0, r3
 8005338:	f000 f90a 	bl	8005550 <PID_setWindupRange>
}
 800533c:	bf00      	nop
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	00000000 	.word	0x00000000

08005348 <MOTOR_runAngle>:
void MOTOR_setAngle(MOTOR_t* motor, float setAngle)
{
    motor->setPoint = setAngle * motor->ratioJoint;
}
void MOTOR_runAngle(MOTOR_t* motor)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
    if (motor->setPoint != motor->preSetPoint)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800535c:	eeb4 7a67 	vcmp.f32	s14, s15
 8005360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005364:	d00e      	beq.n	8005384 <MOTOR_runAngle+0x3c>
    {
        PID_clear(&motor->PIDPosition);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	3348      	adds	r3, #72	; 0x48
 800536a:	4618      	mov	r0, r3
 800536c:	f000 f8be 	bl	80054ec <PID_clear>
        PID_clear(&motor->PIDVelocity);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4618      	mov	r0, r3
 8005374:	f000 f8ba 	bl	80054ec <PID_clear>
        motor->preSetPoint = motor->setPoint;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
    MOTOR_driver_readPosAndSpeed(motor->motorDriver, &motor->pos, &motor->speed, motor->PIDPosition.Sample_time);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f103 01ac 	add.w	r1, r3, #172	; 0xac
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800539c:	eeb0 0a67 	vmov.f32	s0, s15
 80053a0:	f7ff ff08 	bl	80051b4 <MOTOR_driver_readPosAndSpeed>
    motor->error = motor->setPoint - motor->pos;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 80053b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

    // PD+PI controller
    PID_compute(&motor->PIDPosition, motor->error);  // tinh PD
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80053c6:	eeb0 0a67 	vmov.f32	s0, s15
 80053ca:	4610      	mov	r0, r2
 80053cc:	f000 f8e4 	bl	8005598 <PID_compute>
    PID_compute(&motor->PIDVelocity, motor->PIDPosition.Output - motor->speed); // tinh PI
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 80053de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053e2:	eeb0 0a67 	vmov.f32	s0, s15
 80053e6:	4610      	mov	r0, r2
 80053e8:	f000 f8d6 	bl	8005598 <PID_compute>

    if (fabs(motor->pos) < 1500)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 80053f2:	eef0 7ae7 	vabs.f32	s15, s15
 80053f6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005438 <MOTOR_runAngle+0xf0>
 80053fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005402:	d50d      	bpl.n	8005420 <MOTOR_runAngle+0xd8>
    {
        MOTOR_driver_rotary(motor->motorDriver, motor->PIDVelocity.Output);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005410:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005414:	ee17 1a90 	vmov	r1, s15
 8005418:	4610      	mov	r0, r2
 800541a:	f7ff fe19 	bl	8005050 <MOTOR_driver_rotary>
    }
    else
    {
        MOTOR_driver_rotary(motor->motorDriver, 0);
    }
}
 800541e:	e006      	b.n	800542e <MOTOR_runAngle+0xe6>
        MOTOR_driver_rotary(motor->motorDriver, 0);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005426:	2100      	movs	r1, #0
 8005428:	4618      	mov	r0, r3
 800542a:	f7ff fe11 	bl	8005050 <MOTOR_driver_rotary>
}
 800542e:	bf00      	nop
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	44bb8000 	.word	0x44bb8000

0800543c <MOTOR_init>:
void MOTOR_init(MOTOR_t* motor, MOTOR_DRIVER_t *motorDriver,float ratio, uint16_t pinSetHome)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	ed87 0a01 	vstr	s0, [r7, #4]
 800544a:	4613      	mov	r3, r2
 800544c:	807b      	strh	r3, [r7, #2]
    motor->ratioJoint = ratio;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    motor->pinSetHome = 0;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
    motor->setPoint = 0;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    motor->preSetPoint = 0;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f04f 0200 	mov.w	r2, #0
 800546e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    motor->error = 0;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f04f 0200 	mov.w	r2, #0
 8005478:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    motor->preError = 0;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f04f 0200 	mov.w	r2, #0
 8005482:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    motor->pos = 0;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f04f 0200 	mov.w	r2, #0
 800548c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    motor->speed = 0;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f04f 0200 	mov.w	r2, #0
 8005496:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    motor->motorDriver = motorDriver;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 80054a2:	bf00      	nop
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <PID_init>:
 *      Author: minht
 */
#include "PID.h"
#include "stdint.h"
void PID_init(PID_TypeDef* pid, float Kp, float Ki, float Kd, float Sample_time)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b086      	sub	sp, #24
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6178      	str	r0, [r7, #20]
 80054b6:	ed87 0a04 	vstr	s0, [r7, #16]
 80054ba:	edc7 0a03 	vstr	s1, [r7, #12]
 80054be:	ed87 1a02 	vstr	s2, [r7, #8]
 80054c2:	edc7 1a01 	vstr	s3, [r7, #4]
	PID_clear(pid);
 80054c6:	6978      	ldr	r0, [r7, #20]
 80054c8:	f000 f810 	bl	80054ec <PID_clear>
	pid->Kp = Kp;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	605a      	str	r2, [r3, #4]
	pid->Kd = Kd;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	609a      	str	r2, [r3, #8]
	pid->Sample_time = Sample_time;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	645a      	str	r2, [r3, #68]	; 0x44
}
 80054e4:	bf00      	nop
 80054e6:	3718      	adds	r7, #24
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <PID_clear>:
void PID_clear(PID_TypeDef* pid)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
	pid->PTerm = 0;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f04f 0200 	mov.w	r2, #0
 80054fa:	61da      	str	r2, [r3, #28]
	pid->ITerm = 0;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f04f 0200 	mov.w	r2, #0
 8005502:	621a      	str	r2, [r3, #32]
	pid->DTerm = 0;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f04f 0200 	mov.w	r2, #0
 800550a:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Output = 0;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f04f 0200 	mov.w	r2, #0
 8005512:	639a      	str	r2, [r3, #56]	; 0x38
	pid->FeedbackWindup = 0;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <PID_setOutputRange>:
void PID_setKp(PID_TypeDef* pid, float value) { pid->Kp = value; }
void PID_setKi(PID_TypeDef* pid, float value) { pid->Ki = value; }
void PID_setKd(PID_TypeDef* pid, float value) { pid->Kd = value; }
void PID_setSampleTime(PID_TypeDef* pid, float value) { pid->Sample_time = value; }
void PID_setOutputRange(PID_TypeDef* pid, float valueMin, float valueMax)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	ed87 0a02 	vstr	s0, [r7, #8]
 8005534:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->OutMax = valueMax;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	63da      	str	r2, [r3, #60]	; 0x3c
	pid->OutMin = valueMin;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005544:	bf00      	nop
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <PID_setWindupRange>:
void PID_setWindupRange(PID_TypeDef* pid, float valueMin, float valueMax)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	ed87 0a02 	vstr	s0, [r7, #8]
 800555c:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->WindupMax = valueMax;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	629a      	str	r2, [r3, #40]	; 0x28
	pid->WindupMin = valueMin;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800556c:	bf00      	nop
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <PID_setWindupGain>:
void PID_setWindupGain(PID_TypeDef* pid, float value)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	ed87 0a00 	vstr	s0, [r7]
	pid->Kb = value;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	60da      	str	r2, [r3, #12]
}
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
	...

08005598 <PID_compute>:
float PID_compute(PID_TypeDef* pid, float Error)
{
 8005598:	b5b0      	push	{r4, r5, r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	ed87 0a00 	vstr	s0, [r7]

	pid->PTerm = pid->Kp * Error;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	ed93 7a00 	vldr	s14, [r3]
 80055aa:	edd7 7a00 	vldr	s15, [r7]
 80055ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	edc3 7a07 	vstr	s15, [r3, #28]

	pid->ITerm += ((Error + pid->Last_error)* pid->Ki * 0.5 + pid->FeedbackWindup * pid->Kb) * (pid->Sample_time / 1000.0);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	ed93 7a05 	vldr	s14, [r3, #20]
 80055be:	edd7 7a00 	vldr	s15, [r7]
 80055c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80055cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055d0:	ee17 0a90 	vmov	r0, s15
 80055d4:	f7fa ffb8 	bl	8000548 <__aeabi_f2d>
 80055d8:	f04f 0200 	mov.w	r2, #0
 80055dc:	4b74      	ldr	r3, [pc, #464]	; (80057b0 <PID_compute+0x218>)
 80055de:	f7fb f80b 	bl	80005f8 <__aeabi_dmul>
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	4614      	mov	r4, r2
 80055e8:	461d      	mov	r5, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80055f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055fa:	ee17 0a90 	vmov	r0, s15
 80055fe:	f7fa ffa3 	bl	8000548 <__aeabi_f2d>
 8005602:	4602      	mov	r2, r0
 8005604:	460b      	mov	r3, r1
 8005606:	4620      	mov	r0, r4
 8005608:	4629      	mov	r1, r5
 800560a:	f7fa fe3f 	bl	800028c <__adddf3>
 800560e:	4602      	mov	r2, r0
 8005610:	460b      	mov	r3, r1
 8005612:	4614      	mov	r4, r2
 8005614:	461d      	mov	r5, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561a:	4618      	mov	r0, r3
 800561c:	f7fa ff94 	bl	8000548 <__aeabi_f2d>
 8005620:	f04f 0200 	mov.w	r2, #0
 8005624:	4b63      	ldr	r3, [pc, #396]	; (80057b4 <PID_compute+0x21c>)
 8005626:	f7fb f911 	bl	800084c <__aeabi_ddiv>
 800562a:	4602      	mov	r2, r0
 800562c:	460b      	mov	r3, r1
 800562e:	4620      	mov	r0, r4
 8005630:	4629      	mov	r1, r5
 8005632:	f7fa ffe1 	bl	80005f8 <__aeabi_dmul>
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	4614      	mov	r4, r2
 800563c:	461d      	mov	r5, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	4618      	mov	r0, r3
 8005644:	f7fa ff80 	bl	8000548 <__aeabi_f2d>
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	4620      	mov	r0, r4
 800564e:	4629      	mov	r1, r5
 8005650:	f7fa fe1c 	bl	800028c <__adddf3>
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	4610      	mov	r0, r2
 800565a:	4619      	mov	r1, r3
 800565c:	f7fb fac4 	bl	8000be8 <__aeabi_d2f>
 8005660:	4602      	mov	r2, r0
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	621a      	str	r2, [r3, #32]
	if (pid->ITerm > pid->WindupMax) pid->ITerm = pid->WindupMax;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	ed93 7a08 	vldr	s14, [r3, #32]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005672:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800567a:	dd04      	ble.n	8005686 <PID_compute+0xee>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	621a      	str	r2, [r3, #32]
 8005684:	e00e      	b.n	80056a4 <PID_compute+0x10c>
	else if (pid->ITerm < pid->WindupMin) pid->ITerm = pid->WindupMin;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	ed93 7a08 	vldr	s14, [r3, #32]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005692:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800569a:	d503      	bpl.n	80056a4 <PID_compute+0x10c>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	621a      	str	r2, [r3, #32]

	pid->Delta_error = Error - pid->Last_error;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	edd3 7a05 	vldr	s15, [r3, #20]
 80056aa:	ed97 7a00 	vldr	s14, [r7]
 80056ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->DTerm = pid->Delta_error / (pid->Sample_time / 1000.0);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056bc:	4618      	mov	r0, r3
 80056be:	f7fa ff43 	bl	8000548 <__aeabi_f2d>
 80056c2:	4604      	mov	r4, r0
 80056c4:	460d      	mov	r5, r1
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fa ff3c 	bl	8000548 <__aeabi_f2d>
 80056d0:	f04f 0200 	mov.w	r2, #0
 80056d4:	4b37      	ldr	r3, [pc, #220]	; (80057b4 <PID_compute+0x21c>)
 80056d6:	f7fb f8b9 	bl	800084c <__aeabi_ddiv>
 80056da:	4602      	mov	r2, r0
 80056dc:	460b      	mov	r3, r1
 80056de:	4620      	mov	r0, r4
 80056e0:	4629      	mov	r1, r5
 80056e2:	f7fb f8b3 	bl	800084c <__aeabi_ddiv>
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	4610      	mov	r0, r2
 80056ec:	4619      	mov	r1, r3
 80056ee:	f7fb fa7b 	bl	8000be8 <__aeabi_d2f>
 80056f2:	4602      	mov	r2, r0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Last_error = Error;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	615a      	str	r2, [r3, #20]

	pid->Output = pid->PTerm + pid->ITerm + pid->Kd * pid->DTerm;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	ed93 7a07 	vldr	s14, [r3, #28]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	edd3 7a08 	vldr	s15, [r3, #32]
 800570a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	edd3 6a02 	vldr	s13, [r3, #8]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800571a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800571e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	if (pid->Output > pid->OutMax)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005734:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800573c:	dd0f      	ble.n	800575e <PID_compute+0x1c6>
	{
		pid->FeedbackWindup = pid->Output - pid->OutMax;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800574a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		pid->Output = pid->OutMax;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	639a      	str	r2, [r3, #56]	; 0x38
 800575c:	e01e      	b.n	800579c <PID_compute+0x204>
	}
	else if (pid->Output < pid->OutMin)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800576a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800576e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005772:	d50f      	bpl.n	8005794 <PID_compute+0x1fc>
	{
		pid->FeedbackWindup = pid->Output - pid->OutMin;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005780:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		pid->Output = pid->OutMin;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	639a      	str	r2, [r3, #56]	; 0x38
 8005792:	e003      	b.n	800579c <PID_compute+0x204>
	}
	else
	{
		pid->FeedbackWindup = 0;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f04f 0200 	mov.w	r2, #0
 800579a:	631a      	str	r2, [r3, #48]	; 0x30
	}
	return pid->Output;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a0:	ee07 3a90 	vmov	s15, r3
}
 80057a4:	eeb0 0a67 	vmov.f32	s0, s15
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bdb0      	pop	{r4, r5, r7, pc}
 80057ae:	bf00      	nop
 80057b0:	3fe00000 	.word	0x3fe00000
 80057b4:	408f4000 	.word	0x408f4000

080057b8 <__errno>:
 80057b8:	4b01      	ldr	r3, [pc, #4]	; (80057c0 <__errno+0x8>)
 80057ba:	6818      	ldr	r0, [r3, #0]
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	2000000c 	.word	0x2000000c

080057c4 <__libc_init_array>:
 80057c4:	b570      	push	{r4, r5, r6, lr}
 80057c6:	4d0d      	ldr	r5, [pc, #52]	; (80057fc <__libc_init_array+0x38>)
 80057c8:	4c0d      	ldr	r4, [pc, #52]	; (8005800 <__libc_init_array+0x3c>)
 80057ca:	1b64      	subs	r4, r4, r5
 80057cc:	10a4      	asrs	r4, r4, #2
 80057ce:	2600      	movs	r6, #0
 80057d0:	42a6      	cmp	r6, r4
 80057d2:	d109      	bne.n	80057e8 <__libc_init_array+0x24>
 80057d4:	4d0b      	ldr	r5, [pc, #44]	; (8005804 <__libc_init_array+0x40>)
 80057d6:	4c0c      	ldr	r4, [pc, #48]	; (8005808 <__libc_init_array+0x44>)
 80057d8:	f004 fc92 	bl	800a100 <_init>
 80057dc:	1b64      	subs	r4, r4, r5
 80057de:	10a4      	asrs	r4, r4, #2
 80057e0:	2600      	movs	r6, #0
 80057e2:	42a6      	cmp	r6, r4
 80057e4:	d105      	bne.n	80057f2 <__libc_init_array+0x2e>
 80057e6:	bd70      	pop	{r4, r5, r6, pc}
 80057e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ec:	4798      	blx	r3
 80057ee:	3601      	adds	r6, #1
 80057f0:	e7ee      	b.n	80057d0 <__libc_init_array+0xc>
 80057f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80057f6:	4798      	blx	r3
 80057f8:	3601      	adds	r6, #1
 80057fa:	e7f2      	b.n	80057e2 <__libc_init_array+0x1e>
 80057fc:	0800a5e4 	.word	0x0800a5e4
 8005800:	0800a5e4 	.word	0x0800a5e4
 8005804:	0800a5e4 	.word	0x0800a5e4
 8005808:	0800a5e8 	.word	0x0800a5e8

0800580c <memset>:
 800580c:	4402      	add	r2, r0
 800580e:	4603      	mov	r3, r0
 8005810:	4293      	cmp	r3, r2
 8005812:	d100      	bne.n	8005816 <memset+0xa>
 8005814:	4770      	bx	lr
 8005816:	f803 1b01 	strb.w	r1, [r3], #1
 800581a:	e7f9      	b.n	8005810 <memset+0x4>

0800581c <__cvt>:
 800581c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005820:	ec55 4b10 	vmov	r4, r5, d0
 8005824:	2d00      	cmp	r5, #0
 8005826:	460e      	mov	r6, r1
 8005828:	4619      	mov	r1, r3
 800582a:	462b      	mov	r3, r5
 800582c:	bfbb      	ittet	lt
 800582e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005832:	461d      	movlt	r5, r3
 8005834:	2300      	movge	r3, #0
 8005836:	232d      	movlt	r3, #45	; 0x2d
 8005838:	700b      	strb	r3, [r1, #0]
 800583a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800583c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005840:	4691      	mov	r9, r2
 8005842:	f023 0820 	bic.w	r8, r3, #32
 8005846:	bfbc      	itt	lt
 8005848:	4622      	movlt	r2, r4
 800584a:	4614      	movlt	r4, r2
 800584c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005850:	d005      	beq.n	800585e <__cvt+0x42>
 8005852:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005856:	d100      	bne.n	800585a <__cvt+0x3e>
 8005858:	3601      	adds	r6, #1
 800585a:	2102      	movs	r1, #2
 800585c:	e000      	b.n	8005860 <__cvt+0x44>
 800585e:	2103      	movs	r1, #3
 8005860:	ab03      	add	r3, sp, #12
 8005862:	9301      	str	r3, [sp, #4]
 8005864:	ab02      	add	r3, sp, #8
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	ec45 4b10 	vmov	d0, r4, r5
 800586c:	4653      	mov	r3, sl
 800586e:	4632      	mov	r2, r6
 8005870:	f001 fe16 	bl	80074a0 <_dtoa_r>
 8005874:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005878:	4607      	mov	r7, r0
 800587a:	d102      	bne.n	8005882 <__cvt+0x66>
 800587c:	f019 0f01 	tst.w	r9, #1
 8005880:	d022      	beq.n	80058c8 <__cvt+0xac>
 8005882:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005886:	eb07 0906 	add.w	r9, r7, r6
 800588a:	d110      	bne.n	80058ae <__cvt+0x92>
 800588c:	783b      	ldrb	r3, [r7, #0]
 800588e:	2b30      	cmp	r3, #48	; 0x30
 8005890:	d10a      	bne.n	80058a8 <__cvt+0x8c>
 8005892:	2200      	movs	r2, #0
 8005894:	2300      	movs	r3, #0
 8005896:	4620      	mov	r0, r4
 8005898:	4629      	mov	r1, r5
 800589a:	f7fb f915 	bl	8000ac8 <__aeabi_dcmpeq>
 800589e:	b918      	cbnz	r0, 80058a8 <__cvt+0x8c>
 80058a0:	f1c6 0601 	rsb	r6, r6, #1
 80058a4:	f8ca 6000 	str.w	r6, [sl]
 80058a8:	f8da 3000 	ldr.w	r3, [sl]
 80058ac:	4499      	add	r9, r3
 80058ae:	2200      	movs	r2, #0
 80058b0:	2300      	movs	r3, #0
 80058b2:	4620      	mov	r0, r4
 80058b4:	4629      	mov	r1, r5
 80058b6:	f7fb f907 	bl	8000ac8 <__aeabi_dcmpeq>
 80058ba:	b108      	cbz	r0, 80058c0 <__cvt+0xa4>
 80058bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80058c0:	2230      	movs	r2, #48	; 0x30
 80058c2:	9b03      	ldr	r3, [sp, #12]
 80058c4:	454b      	cmp	r3, r9
 80058c6:	d307      	bcc.n	80058d8 <__cvt+0xbc>
 80058c8:	9b03      	ldr	r3, [sp, #12]
 80058ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058cc:	1bdb      	subs	r3, r3, r7
 80058ce:	4638      	mov	r0, r7
 80058d0:	6013      	str	r3, [r2, #0]
 80058d2:	b004      	add	sp, #16
 80058d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d8:	1c59      	adds	r1, r3, #1
 80058da:	9103      	str	r1, [sp, #12]
 80058dc:	701a      	strb	r2, [r3, #0]
 80058de:	e7f0      	b.n	80058c2 <__cvt+0xa6>

080058e0 <__exponent>:
 80058e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058e2:	4603      	mov	r3, r0
 80058e4:	2900      	cmp	r1, #0
 80058e6:	bfb8      	it	lt
 80058e8:	4249      	neglt	r1, r1
 80058ea:	f803 2b02 	strb.w	r2, [r3], #2
 80058ee:	bfb4      	ite	lt
 80058f0:	222d      	movlt	r2, #45	; 0x2d
 80058f2:	222b      	movge	r2, #43	; 0x2b
 80058f4:	2909      	cmp	r1, #9
 80058f6:	7042      	strb	r2, [r0, #1]
 80058f8:	dd2a      	ble.n	8005950 <__exponent+0x70>
 80058fa:	f10d 0407 	add.w	r4, sp, #7
 80058fe:	46a4      	mov	ip, r4
 8005900:	270a      	movs	r7, #10
 8005902:	46a6      	mov	lr, r4
 8005904:	460a      	mov	r2, r1
 8005906:	fb91 f6f7 	sdiv	r6, r1, r7
 800590a:	fb07 1516 	mls	r5, r7, r6, r1
 800590e:	3530      	adds	r5, #48	; 0x30
 8005910:	2a63      	cmp	r2, #99	; 0x63
 8005912:	f104 34ff 	add.w	r4, r4, #4294967295
 8005916:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800591a:	4631      	mov	r1, r6
 800591c:	dcf1      	bgt.n	8005902 <__exponent+0x22>
 800591e:	3130      	adds	r1, #48	; 0x30
 8005920:	f1ae 0502 	sub.w	r5, lr, #2
 8005924:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005928:	1c44      	adds	r4, r0, #1
 800592a:	4629      	mov	r1, r5
 800592c:	4561      	cmp	r1, ip
 800592e:	d30a      	bcc.n	8005946 <__exponent+0x66>
 8005930:	f10d 0209 	add.w	r2, sp, #9
 8005934:	eba2 020e 	sub.w	r2, r2, lr
 8005938:	4565      	cmp	r5, ip
 800593a:	bf88      	it	hi
 800593c:	2200      	movhi	r2, #0
 800593e:	4413      	add	r3, r2
 8005940:	1a18      	subs	r0, r3, r0
 8005942:	b003      	add	sp, #12
 8005944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005946:	f811 2b01 	ldrb.w	r2, [r1], #1
 800594a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800594e:	e7ed      	b.n	800592c <__exponent+0x4c>
 8005950:	2330      	movs	r3, #48	; 0x30
 8005952:	3130      	adds	r1, #48	; 0x30
 8005954:	7083      	strb	r3, [r0, #2]
 8005956:	70c1      	strb	r1, [r0, #3]
 8005958:	1d03      	adds	r3, r0, #4
 800595a:	e7f1      	b.n	8005940 <__exponent+0x60>

0800595c <_printf_float>:
 800595c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005960:	ed2d 8b02 	vpush	{d8}
 8005964:	b08d      	sub	sp, #52	; 0x34
 8005966:	460c      	mov	r4, r1
 8005968:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800596c:	4616      	mov	r6, r2
 800596e:	461f      	mov	r7, r3
 8005970:	4605      	mov	r5, r0
 8005972:	f002 fef3 	bl	800875c <_localeconv_r>
 8005976:	f8d0 a000 	ldr.w	sl, [r0]
 800597a:	4650      	mov	r0, sl
 800597c:	f7fa fc28 	bl	80001d0 <strlen>
 8005980:	2300      	movs	r3, #0
 8005982:	930a      	str	r3, [sp, #40]	; 0x28
 8005984:	6823      	ldr	r3, [r4, #0]
 8005986:	9305      	str	r3, [sp, #20]
 8005988:	f8d8 3000 	ldr.w	r3, [r8]
 800598c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005990:	3307      	adds	r3, #7
 8005992:	f023 0307 	bic.w	r3, r3, #7
 8005996:	f103 0208 	add.w	r2, r3, #8
 800599a:	f8c8 2000 	str.w	r2, [r8]
 800599e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80059a6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80059aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80059ae:	9307      	str	r3, [sp, #28]
 80059b0:	f8cd 8018 	str.w	r8, [sp, #24]
 80059b4:	ee08 0a10 	vmov	s16, r0
 80059b8:	4b9f      	ldr	r3, [pc, #636]	; (8005c38 <_printf_float+0x2dc>)
 80059ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059be:	f04f 32ff 	mov.w	r2, #4294967295
 80059c2:	f7fb f8b3 	bl	8000b2c <__aeabi_dcmpun>
 80059c6:	bb88      	cbnz	r0, 8005a2c <_printf_float+0xd0>
 80059c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059cc:	4b9a      	ldr	r3, [pc, #616]	; (8005c38 <_printf_float+0x2dc>)
 80059ce:	f04f 32ff 	mov.w	r2, #4294967295
 80059d2:	f7fb f88d 	bl	8000af0 <__aeabi_dcmple>
 80059d6:	bb48      	cbnz	r0, 8005a2c <_printf_float+0xd0>
 80059d8:	2200      	movs	r2, #0
 80059da:	2300      	movs	r3, #0
 80059dc:	4640      	mov	r0, r8
 80059de:	4649      	mov	r1, r9
 80059e0:	f7fb f87c 	bl	8000adc <__aeabi_dcmplt>
 80059e4:	b110      	cbz	r0, 80059ec <_printf_float+0x90>
 80059e6:	232d      	movs	r3, #45	; 0x2d
 80059e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059ec:	4b93      	ldr	r3, [pc, #588]	; (8005c3c <_printf_float+0x2e0>)
 80059ee:	4894      	ldr	r0, [pc, #592]	; (8005c40 <_printf_float+0x2e4>)
 80059f0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80059f4:	bf94      	ite	ls
 80059f6:	4698      	movls	r8, r3
 80059f8:	4680      	movhi	r8, r0
 80059fa:	2303      	movs	r3, #3
 80059fc:	6123      	str	r3, [r4, #16]
 80059fe:	9b05      	ldr	r3, [sp, #20]
 8005a00:	f023 0204 	bic.w	r2, r3, #4
 8005a04:	6022      	str	r2, [r4, #0]
 8005a06:	f04f 0900 	mov.w	r9, #0
 8005a0a:	9700      	str	r7, [sp, #0]
 8005a0c:	4633      	mov	r3, r6
 8005a0e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005a10:	4621      	mov	r1, r4
 8005a12:	4628      	mov	r0, r5
 8005a14:	f000 f9d8 	bl	8005dc8 <_printf_common>
 8005a18:	3001      	adds	r0, #1
 8005a1a:	f040 8090 	bne.w	8005b3e <_printf_float+0x1e2>
 8005a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a22:	b00d      	add	sp, #52	; 0x34
 8005a24:	ecbd 8b02 	vpop	{d8}
 8005a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a2c:	4642      	mov	r2, r8
 8005a2e:	464b      	mov	r3, r9
 8005a30:	4640      	mov	r0, r8
 8005a32:	4649      	mov	r1, r9
 8005a34:	f7fb f87a 	bl	8000b2c <__aeabi_dcmpun>
 8005a38:	b140      	cbz	r0, 8005a4c <_printf_float+0xf0>
 8005a3a:	464b      	mov	r3, r9
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	bfbc      	itt	lt
 8005a40:	232d      	movlt	r3, #45	; 0x2d
 8005a42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a46:	487f      	ldr	r0, [pc, #508]	; (8005c44 <_printf_float+0x2e8>)
 8005a48:	4b7f      	ldr	r3, [pc, #508]	; (8005c48 <_printf_float+0x2ec>)
 8005a4a:	e7d1      	b.n	80059f0 <_printf_float+0x94>
 8005a4c:	6863      	ldr	r3, [r4, #4]
 8005a4e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005a52:	9206      	str	r2, [sp, #24]
 8005a54:	1c5a      	adds	r2, r3, #1
 8005a56:	d13f      	bne.n	8005ad8 <_printf_float+0x17c>
 8005a58:	2306      	movs	r3, #6
 8005a5a:	6063      	str	r3, [r4, #4]
 8005a5c:	9b05      	ldr	r3, [sp, #20]
 8005a5e:	6861      	ldr	r1, [r4, #4]
 8005a60:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a64:	2300      	movs	r3, #0
 8005a66:	9303      	str	r3, [sp, #12]
 8005a68:	ab0a      	add	r3, sp, #40	; 0x28
 8005a6a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a6e:	ab09      	add	r3, sp, #36	; 0x24
 8005a70:	ec49 8b10 	vmov	d0, r8, r9
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	6022      	str	r2, [r4, #0]
 8005a78:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	f7ff fecd 	bl	800581c <__cvt>
 8005a82:	9b06      	ldr	r3, [sp, #24]
 8005a84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a86:	2b47      	cmp	r3, #71	; 0x47
 8005a88:	4680      	mov	r8, r0
 8005a8a:	d108      	bne.n	8005a9e <_printf_float+0x142>
 8005a8c:	1cc8      	adds	r0, r1, #3
 8005a8e:	db02      	blt.n	8005a96 <_printf_float+0x13a>
 8005a90:	6863      	ldr	r3, [r4, #4]
 8005a92:	4299      	cmp	r1, r3
 8005a94:	dd41      	ble.n	8005b1a <_printf_float+0x1be>
 8005a96:	f1ab 0b02 	sub.w	fp, fp, #2
 8005a9a:	fa5f fb8b 	uxtb.w	fp, fp
 8005a9e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005aa2:	d820      	bhi.n	8005ae6 <_printf_float+0x18a>
 8005aa4:	3901      	subs	r1, #1
 8005aa6:	465a      	mov	r2, fp
 8005aa8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005aac:	9109      	str	r1, [sp, #36]	; 0x24
 8005aae:	f7ff ff17 	bl	80058e0 <__exponent>
 8005ab2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ab4:	1813      	adds	r3, r2, r0
 8005ab6:	2a01      	cmp	r2, #1
 8005ab8:	4681      	mov	r9, r0
 8005aba:	6123      	str	r3, [r4, #16]
 8005abc:	dc02      	bgt.n	8005ac4 <_printf_float+0x168>
 8005abe:	6822      	ldr	r2, [r4, #0]
 8005ac0:	07d2      	lsls	r2, r2, #31
 8005ac2:	d501      	bpl.n	8005ac8 <_printf_float+0x16c>
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	6123      	str	r3, [r4, #16]
 8005ac8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d09c      	beq.n	8005a0a <_printf_float+0xae>
 8005ad0:	232d      	movs	r3, #45	; 0x2d
 8005ad2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ad6:	e798      	b.n	8005a0a <_printf_float+0xae>
 8005ad8:	9a06      	ldr	r2, [sp, #24]
 8005ada:	2a47      	cmp	r2, #71	; 0x47
 8005adc:	d1be      	bne.n	8005a5c <_printf_float+0x100>
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1bc      	bne.n	8005a5c <_printf_float+0x100>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e7b9      	b.n	8005a5a <_printf_float+0xfe>
 8005ae6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005aea:	d118      	bne.n	8005b1e <_printf_float+0x1c2>
 8005aec:	2900      	cmp	r1, #0
 8005aee:	6863      	ldr	r3, [r4, #4]
 8005af0:	dd0b      	ble.n	8005b0a <_printf_float+0x1ae>
 8005af2:	6121      	str	r1, [r4, #16]
 8005af4:	b913      	cbnz	r3, 8005afc <_printf_float+0x1a0>
 8005af6:	6822      	ldr	r2, [r4, #0]
 8005af8:	07d0      	lsls	r0, r2, #31
 8005afa:	d502      	bpl.n	8005b02 <_printf_float+0x1a6>
 8005afc:	3301      	adds	r3, #1
 8005afe:	440b      	add	r3, r1
 8005b00:	6123      	str	r3, [r4, #16]
 8005b02:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b04:	f04f 0900 	mov.w	r9, #0
 8005b08:	e7de      	b.n	8005ac8 <_printf_float+0x16c>
 8005b0a:	b913      	cbnz	r3, 8005b12 <_printf_float+0x1b6>
 8005b0c:	6822      	ldr	r2, [r4, #0]
 8005b0e:	07d2      	lsls	r2, r2, #31
 8005b10:	d501      	bpl.n	8005b16 <_printf_float+0x1ba>
 8005b12:	3302      	adds	r3, #2
 8005b14:	e7f4      	b.n	8005b00 <_printf_float+0x1a4>
 8005b16:	2301      	movs	r3, #1
 8005b18:	e7f2      	b.n	8005b00 <_printf_float+0x1a4>
 8005b1a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b20:	4299      	cmp	r1, r3
 8005b22:	db05      	blt.n	8005b30 <_printf_float+0x1d4>
 8005b24:	6823      	ldr	r3, [r4, #0]
 8005b26:	6121      	str	r1, [r4, #16]
 8005b28:	07d8      	lsls	r0, r3, #31
 8005b2a:	d5ea      	bpl.n	8005b02 <_printf_float+0x1a6>
 8005b2c:	1c4b      	adds	r3, r1, #1
 8005b2e:	e7e7      	b.n	8005b00 <_printf_float+0x1a4>
 8005b30:	2900      	cmp	r1, #0
 8005b32:	bfd4      	ite	le
 8005b34:	f1c1 0202 	rsble	r2, r1, #2
 8005b38:	2201      	movgt	r2, #1
 8005b3a:	4413      	add	r3, r2
 8005b3c:	e7e0      	b.n	8005b00 <_printf_float+0x1a4>
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	055a      	lsls	r2, r3, #21
 8005b42:	d407      	bmi.n	8005b54 <_printf_float+0x1f8>
 8005b44:	6923      	ldr	r3, [r4, #16]
 8005b46:	4642      	mov	r2, r8
 8005b48:	4631      	mov	r1, r6
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	47b8      	blx	r7
 8005b4e:	3001      	adds	r0, #1
 8005b50:	d12c      	bne.n	8005bac <_printf_float+0x250>
 8005b52:	e764      	b.n	8005a1e <_printf_float+0xc2>
 8005b54:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b58:	f240 80e0 	bls.w	8005d1c <_printf_float+0x3c0>
 8005b5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b60:	2200      	movs	r2, #0
 8005b62:	2300      	movs	r3, #0
 8005b64:	f7fa ffb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	d034      	beq.n	8005bd6 <_printf_float+0x27a>
 8005b6c:	4a37      	ldr	r2, [pc, #220]	; (8005c4c <_printf_float+0x2f0>)
 8005b6e:	2301      	movs	r3, #1
 8005b70:	4631      	mov	r1, r6
 8005b72:	4628      	mov	r0, r5
 8005b74:	47b8      	blx	r7
 8005b76:	3001      	adds	r0, #1
 8005b78:	f43f af51 	beq.w	8005a1e <_printf_float+0xc2>
 8005b7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b80:	429a      	cmp	r2, r3
 8005b82:	db02      	blt.n	8005b8a <_printf_float+0x22e>
 8005b84:	6823      	ldr	r3, [r4, #0]
 8005b86:	07d8      	lsls	r0, r3, #31
 8005b88:	d510      	bpl.n	8005bac <_printf_float+0x250>
 8005b8a:	ee18 3a10 	vmov	r3, s16
 8005b8e:	4652      	mov	r2, sl
 8005b90:	4631      	mov	r1, r6
 8005b92:	4628      	mov	r0, r5
 8005b94:	47b8      	blx	r7
 8005b96:	3001      	adds	r0, #1
 8005b98:	f43f af41 	beq.w	8005a1e <_printf_float+0xc2>
 8005b9c:	f04f 0800 	mov.w	r8, #0
 8005ba0:	f104 091a 	add.w	r9, r4, #26
 8005ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	4543      	cmp	r3, r8
 8005baa:	dc09      	bgt.n	8005bc0 <_printf_float+0x264>
 8005bac:	6823      	ldr	r3, [r4, #0]
 8005bae:	079b      	lsls	r3, r3, #30
 8005bb0:	f100 8105 	bmi.w	8005dbe <_printf_float+0x462>
 8005bb4:	68e0      	ldr	r0, [r4, #12]
 8005bb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bb8:	4298      	cmp	r0, r3
 8005bba:	bfb8      	it	lt
 8005bbc:	4618      	movlt	r0, r3
 8005bbe:	e730      	b.n	8005a22 <_printf_float+0xc6>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	464a      	mov	r2, r9
 8005bc4:	4631      	mov	r1, r6
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	47b8      	blx	r7
 8005bca:	3001      	adds	r0, #1
 8005bcc:	f43f af27 	beq.w	8005a1e <_printf_float+0xc2>
 8005bd0:	f108 0801 	add.w	r8, r8, #1
 8005bd4:	e7e6      	b.n	8005ba4 <_printf_float+0x248>
 8005bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	dc39      	bgt.n	8005c50 <_printf_float+0x2f4>
 8005bdc:	4a1b      	ldr	r2, [pc, #108]	; (8005c4c <_printf_float+0x2f0>)
 8005bde:	2301      	movs	r3, #1
 8005be0:	4631      	mov	r1, r6
 8005be2:	4628      	mov	r0, r5
 8005be4:	47b8      	blx	r7
 8005be6:	3001      	adds	r0, #1
 8005be8:	f43f af19 	beq.w	8005a1e <_printf_float+0xc2>
 8005bec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	d102      	bne.n	8005bfa <_printf_float+0x29e>
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	07d9      	lsls	r1, r3, #31
 8005bf8:	d5d8      	bpl.n	8005bac <_printf_float+0x250>
 8005bfa:	ee18 3a10 	vmov	r3, s16
 8005bfe:	4652      	mov	r2, sl
 8005c00:	4631      	mov	r1, r6
 8005c02:	4628      	mov	r0, r5
 8005c04:	47b8      	blx	r7
 8005c06:	3001      	adds	r0, #1
 8005c08:	f43f af09 	beq.w	8005a1e <_printf_float+0xc2>
 8005c0c:	f04f 0900 	mov.w	r9, #0
 8005c10:	f104 0a1a 	add.w	sl, r4, #26
 8005c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c16:	425b      	negs	r3, r3
 8005c18:	454b      	cmp	r3, r9
 8005c1a:	dc01      	bgt.n	8005c20 <_printf_float+0x2c4>
 8005c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c1e:	e792      	b.n	8005b46 <_printf_float+0x1ea>
 8005c20:	2301      	movs	r3, #1
 8005c22:	4652      	mov	r2, sl
 8005c24:	4631      	mov	r1, r6
 8005c26:	4628      	mov	r0, r5
 8005c28:	47b8      	blx	r7
 8005c2a:	3001      	adds	r0, #1
 8005c2c:	f43f aef7 	beq.w	8005a1e <_printf_float+0xc2>
 8005c30:	f109 0901 	add.w	r9, r9, #1
 8005c34:	e7ee      	b.n	8005c14 <_printf_float+0x2b8>
 8005c36:	bf00      	nop
 8005c38:	7fefffff 	.word	0x7fefffff
 8005c3c:	0800a13c 	.word	0x0800a13c
 8005c40:	0800a140 	.word	0x0800a140
 8005c44:	0800a148 	.word	0x0800a148
 8005c48:	0800a144 	.word	0x0800a144
 8005c4c:	0800a14c 	.word	0x0800a14c
 8005c50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c54:	429a      	cmp	r2, r3
 8005c56:	bfa8      	it	ge
 8005c58:	461a      	movge	r2, r3
 8005c5a:	2a00      	cmp	r2, #0
 8005c5c:	4691      	mov	r9, r2
 8005c5e:	dc37      	bgt.n	8005cd0 <_printf_float+0x374>
 8005c60:	f04f 0b00 	mov.w	fp, #0
 8005c64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c68:	f104 021a 	add.w	r2, r4, #26
 8005c6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c6e:	9305      	str	r3, [sp, #20]
 8005c70:	eba3 0309 	sub.w	r3, r3, r9
 8005c74:	455b      	cmp	r3, fp
 8005c76:	dc33      	bgt.n	8005ce0 <_printf_float+0x384>
 8005c78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	db3b      	blt.n	8005cf8 <_printf_float+0x39c>
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	07da      	lsls	r2, r3, #31
 8005c84:	d438      	bmi.n	8005cf8 <_printf_float+0x39c>
 8005c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c88:	9a05      	ldr	r2, [sp, #20]
 8005c8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c8c:	1a9a      	subs	r2, r3, r2
 8005c8e:	eba3 0901 	sub.w	r9, r3, r1
 8005c92:	4591      	cmp	r9, r2
 8005c94:	bfa8      	it	ge
 8005c96:	4691      	movge	r9, r2
 8005c98:	f1b9 0f00 	cmp.w	r9, #0
 8005c9c:	dc35      	bgt.n	8005d0a <_printf_float+0x3ae>
 8005c9e:	f04f 0800 	mov.w	r8, #0
 8005ca2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ca6:	f104 0a1a 	add.w	sl, r4, #26
 8005caa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cae:	1a9b      	subs	r3, r3, r2
 8005cb0:	eba3 0309 	sub.w	r3, r3, r9
 8005cb4:	4543      	cmp	r3, r8
 8005cb6:	f77f af79 	ble.w	8005bac <_printf_float+0x250>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	4652      	mov	r2, sl
 8005cbe:	4631      	mov	r1, r6
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	47b8      	blx	r7
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	f43f aeaa 	beq.w	8005a1e <_printf_float+0xc2>
 8005cca:	f108 0801 	add.w	r8, r8, #1
 8005cce:	e7ec      	b.n	8005caa <_printf_float+0x34e>
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	4631      	mov	r1, r6
 8005cd4:	4642      	mov	r2, r8
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	47b8      	blx	r7
 8005cda:	3001      	adds	r0, #1
 8005cdc:	d1c0      	bne.n	8005c60 <_printf_float+0x304>
 8005cde:	e69e      	b.n	8005a1e <_printf_float+0xc2>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	4631      	mov	r1, r6
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	9205      	str	r2, [sp, #20]
 8005ce8:	47b8      	blx	r7
 8005cea:	3001      	adds	r0, #1
 8005cec:	f43f ae97 	beq.w	8005a1e <_printf_float+0xc2>
 8005cf0:	9a05      	ldr	r2, [sp, #20]
 8005cf2:	f10b 0b01 	add.w	fp, fp, #1
 8005cf6:	e7b9      	b.n	8005c6c <_printf_float+0x310>
 8005cf8:	ee18 3a10 	vmov	r3, s16
 8005cfc:	4652      	mov	r2, sl
 8005cfe:	4631      	mov	r1, r6
 8005d00:	4628      	mov	r0, r5
 8005d02:	47b8      	blx	r7
 8005d04:	3001      	adds	r0, #1
 8005d06:	d1be      	bne.n	8005c86 <_printf_float+0x32a>
 8005d08:	e689      	b.n	8005a1e <_printf_float+0xc2>
 8005d0a:	9a05      	ldr	r2, [sp, #20]
 8005d0c:	464b      	mov	r3, r9
 8005d0e:	4442      	add	r2, r8
 8005d10:	4631      	mov	r1, r6
 8005d12:	4628      	mov	r0, r5
 8005d14:	47b8      	blx	r7
 8005d16:	3001      	adds	r0, #1
 8005d18:	d1c1      	bne.n	8005c9e <_printf_float+0x342>
 8005d1a:	e680      	b.n	8005a1e <_printf_float+0xc2>
 8005d1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d1e:	2a01      	cmp	r2, #1
 8005d20:	dc01      	bgt.n	8005d26 <_printf_float+0x3ca>
 8005d22:	07db      	lsls	r3, r3, #31
 8005d24:	d538      	bpl.n	8005d98 <_printf_float+0x43c>
 8005d26:	2301      	movs	r3, #1
 8005d28:	4642      	mov	r2, r8
 8005d2a:	4631      	mov	r1, r6
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	47b8      	blx	r7
 8005d30:	3001      	adds	r0, #1
 8005d32:	f43f ae74 	beq.w	8005a1e <_printf_float+0xc2>
 8005d36:	ee18 3a10 	vmov	r3, s16
 8005d3a:	4652      	mov	r2, sl
 8005d3c:	4631      	mov	r1, r6
 8005d3e:	4628      	mov	r0, r5
 8005d40:	47b8      	blx	r7
 8005d42:	3001      	adds	r0, #1
 8005d44:	f43f ae6b 	beq.w	8005a1e <_printf_float+0xc2>
 8005d48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	2300      	movs	r3, #0
 8005d50:	f7fa feba 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d54:	b9d8      	cbnz	r0, 8005d8e <_printf_float+0x432>
 8005d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d58:	f108 0201 	add.w	r2, r8, #1
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	4631      	mov	r1, r6
 8005d60:	4628      	mov	r0, r5
 8005d62:	47b8      	blx	r7
 8005d64:	3001      	adds	r0, #1
 8005d66:	d10e      	bne.n	8005d86 <_printf_float+0x42a>
 8005d68:	e659      	b.n	8005a1e <_printf_float+0xc2>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	4652      	mov	r2, sl
 8005d6e:	4631      	mov	r1, r6
 8005d70:	4628      	mov	r0, r5
 8005d72:	47b8      	blx	r7
 8005d74:	3001      	adds	r0, #1
 8005d76:	f43f ae52 	beq.w	8005a1e <_printf_float+0xc2>
 8005d7a:	f108 0801 	add.w	r8, r8, #1
 8005d7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d80:	3b01      	subs	r3, #1
 8005d82:	4543      	cmp	r3, r8
 8005d84:	dcf1      	bgt.n	8005d6a <_printf_float+0x40e>
 8005d86:	464b      	mov	r3, r9
 8005d88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d8c:	e6dc      	b.n	8005b48 <_printf_float+0x1ec>
 8005d8e:	f04f 0800 	mov.w	r8, #0
 8005d92:	f104 0a1a 	add.w	sl, r4, #26
 8005d96:	e7f2      	b.n	8005d7e <_printf_float+0x422>
 8005d98:	2301      	movs	r3, #1
 8005d9a:	4642      	mov	r2, r8
 8005d9c:	e7df      	b.n	8005d5e <_printf_float+0x402>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	464a      	mov	r2, r9
 8005da2:	4631      	mov	r1, r6
 8005da4:	4628      	mov	r0, r5
 8005da6:	47b8      	blx	r7
 8005da8:	3001      	adds	r0, #1
 8005daa:	f43f ae38 	beq.w	8005a1e <_printf_float+0xc2>
 8005dae:	f108 0801 	add.w	r8, r8, #1
 8005db2:	68e3      	ldr	r3, [r4, #12]
 8005db4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005db6:	1a5b      	subs	r3, r3, r1
 8005db8:	4543      	cmp	r3, r8
 8005dba:	dcf0      	bgt.n	8005d9e <_printf_float+0x442>
 8005dbc:	e6fa      	b.n	8005bb4 <_printf_float+0x258>
 8005dbe:	f04f 0800 	mov.w	r8, #0
 8005dc2:	f104 0919 	add.w	r9, r4, #25
 8005dc6:	e7f4      	b.n	8005db2 <_printf_float+0x456>

08005dc8 <_printf_common>:
 8005dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dcc:	4616      	mov	r6, r2
 8005dce:	4699      	mov	r9, r3
 8005dd0:	688a      	ldr	r2, [r1, #8]
 8005dd2:	690b      	ldr	r3, [r1, #16]
 8005dd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	bfb8      	it	lt
 8005ddc:	4613      	movlt	r3, r2
 8005dde:	6033      	str	r3, [r6, #0]
 8005de0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005de4:	4607      	mov	r7, r0
 8005de6:	460c      	mov	r4, r1
 8005de8:	b10a      	cbz	r2, 8005dee <_printf_common+0x26>
 8005dea:	3301      	adds	r3, #1
 8005dec:	6033      	str	r3, [r6, #0]
 8005dee:	6823      	ldr	r3, [r4, #0]
 8005df0:	0699      	lsls	r1, r3, #26
 8005df2:	bf42      	ittt	mi
 8005df4:	6833      	ldrmi	r3, [r6, #0]
 8005df6:	3302      	addmi	r3, #2
 8005df8:	6033      	strmi	r3, [r6, #0]
 8005dfa:	6825      	ldr	r5, [r4, #0]
 8005dfc:	f015 0506 	ands.w	r5, r5, #6
 8005e00:	d106      	bne.n	8005e10 <_printf_common+0x48>
 8005e02:	f104 0a19 	add.w	sl, r4, #25
 8005e06:	68e3      	ldr	r3, [r4, #12]
 8005e08:	6832      	ldr	r2, [r6, #0]
 8005e0a:	1a9b      	subs	r3, r3, r2
 8005e0c:	42ab      	cmp	r3, r5
 8005e0e:	dc26      	bgt.n	8005e5e <_printf_common+0x96>
 8005e10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e14:	1e13      	subs	r3, r2, #0
 8005e16:	6822      	ldr	r2, [r4, #0]
 8005e18:	bf18      	it	ne
 8005e1a:	2301      	movne	r3, #1
 8005e1c:	0692      	lsls	r2, r2, #26
 8005e1e:	d42b      	bmi.n	8005e78 <_printf_common+0xb0>
 8005e20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e24:	4649      	mov	r1, r9
 8005e26:	4638      	mov	r0, r7
 8005e28:	47c0      	blx	r8
 8005e2a:	3001      	adds	r0, #1
 8005e2c:	d01e      	beq.n	8005e6c <_printf_common+0xa4>
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	68e5      	ldr	r5, [r4, #12]
 8005e32:	6832      	ldr	r2, [r6, #0]
 8005e34:	f003 0306 	and.w	r3, r3, #6
 8005e38:	2b04      	cmp	r3, #4
 8005e3a:	bf08      	it	eq
 8005e3c:	1aad      	subeq	r5, r5, r2
 8005e3e:	68a3      	ldr	r3, [r4, #8]
 8005e40:	6922      	ldr	r2, [r4, #16]
 8005e42:	bf0c      	ite	eq
 8005e44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e48:	2500      	movne	r5, #0
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	bfc4      	itt	gt
 8005e4e:	1a9b      	subgt	r3, r3, r2
 8005e50:	18ed      	addgt	r5, r5, r3
 8005e52:	2600      	movs	r6, #0
 8005e54:	341a      	adds	r4, #26
 8005e56:	42b5      	cmp	r5, r6
 8005e58:	d11a      	bne.n	8005e90 <_printf_common+0xc8>
 8005e5a:	2000      	movs	r0, #0
 8005e5c:	e008      	b.n	8005e70 <_printf_common+0xa8>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	4652      	mov	r2, sl
 8005e62:	4649      	mov	r1, r9
 8005e64:	4638      	mov	r0, r7
 8005e66:	47c0      	blx	r8
 8005e68:	3001      	adds	r0, #1
 8005e6a:	d103      	bne.n	8005e74 <_printf_common+0xac>
 8005e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e74:	3501      	adds	r5, #1
 8005e76:	e7c6      	b.n	8005e06 <_printf_common+0x3e>
 8005e78:	18e1      	adds	r1, r4, r3
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	2030      	movs	r0, #48	; 0x30
 8005e7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e82:	4422      	add	r2, r4
 8005e84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e8c:	3302      	adds	r3, #2
 8005e8e:	e7c7      	b.n	8005e20 <_printf_common+0x58>
 8005e90:	2301      	movs	r3, #1
 8005e92:	4622      	mov	r2, r4
 8005e94:	4649      	mov	r1, r9
 8005e96:	4638      	mov	r0, r7
 8005e98:	47c0      	blx	r8
 8005e9a:	3001      	adds	r0, #1
 8005e9c:	d0e6      	beq.n	8005e6c <_printf_common+0xa4>
 8005e9e:	3601      	adds	r6, #1
 8005ea0:	e7d9      	b.n	8005e56 <_printf_common+0x8e>
	...

08005ea4 <_printf_i>:
 8005ea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea8:	7e0f      	ldrb	r7, [r1, #24]
 8005eaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005eac:	2f78      	cmp	r7, #120	; 0x78
 8005eae:	4691      	mov	r9, r2
 8005eb0:	4680      	mov	r8, r0
 8005eb2:	460c      	mov	r4, r1
 8005eb4:	469a      	mov	sl, r3
 8005eb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005eba:	d807      	bhi.n	8005ecc <_printf_i+0x28>
 8005ebc:	2f62      	cmp	r7, #98	; 0x62
 8005ebe:	d80a      	bhi.n	8005ed6 <_printf_i+0x32>
 8005ec0:	2f00      	cmp	r7, #0
 8005ec2:	f000 80d8 	beq.w	8006076 <_printf_i+0x1d2>
 8005ec6:	2f58      	cmp	r7, #88	; 0x58
 8005ec8:	f000 80a3 	beq.w	8006012 <_printf_i+0x16e>
 8005ecc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ed0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ed4:	e03a      	b.n	8005f4c <_printf_i+0xa8>
 8005ed6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005eda:	2b15      	cmp	r3, #21
 8005edc:	d8f6      	bhi.n	8005ecc <_printf_i+0x28>
 8005ede:	a101      	add	r1, pc, #4	; (adr r1, 8005ee4 <_printf_i+0x40>)
 8005ee0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ee4:	08005f3d 	.word	0x08005f3d
 8005ee8:	08005f51 	.word	0x08005f51
 8005eec:	08005ecd 	.word	0x08005ecd
 8005ef0:	08005ecd 	.word	0x08005ecd
 8005ef4:	08005ecd 	.word	0x08005ecd
 8005ef8:	08005ecd 	.word	0x08005ecd
 8005efc:	08005f51 	.word	0x08005f51
 8005f00:	08005ecd 	.word	0x08005ecd
 8005f04:	08005ecd 	.word	0x08005ecd
 8005f08:	08005ecd 	.word	0x08005ecd
 8005f0c:	08005ecd 	.word	0x08005ecd
 8005f10:	0800605d 	.word	0x0800605d
 8005f14:	08005f81 	.word	0x08005f81
 8005f18:	0800603f 	.word	0x0800603f
 8005f1c:	08005ecd 	.word	0x08005ecd
 8005f20:	08005ecd 	.word	0x08005ecd
 8005f24:	0800607f 	.word	0x0800607f
 8005f28:	08005ecd 	.word	0x08005ecd
 8005f2c:	08005f81 	.word	0x08005f81
 8005f30:	08005ecd 	.word	0x08005ecd
 8005f34:	08005ecd 	.word	0x08005ecd
 8005f38:	08006047 	.word	0x08006047
 8005f3c:	682b      	ldr	r3, [r5, #0]
 8005f3e:	1d1a      	adds	r2, r3, #4
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	602a      	str	r2, [r5, #0]
 8005f44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e0a3      	b.n	8006098 <_printf_i+0x1f4>
 8005f50:	6820      	ldr	r0, [r4, #0]
 8005f52:	6829      	ldr	r1, [r5, #0]
 8005f54:	0606      	lsls	r6, r0, #24
 8005f56:	f101 0304 	add.w	r3, r1, #4
 8005f5a:	d50a      	bpl.n	8005f72 <_printf_i+0xce>
 8005f5c:	680e      	ldr	r6, [r1, #0]
 8005f5e:	602b      	str	r3, [r5, #0]
 8005f60:	2e00      	cmp	r6, #0
 8005f62:	da03      	bge.n	8005f6c <_printf_i+0xc8>
 8005f64:	232d      	movs	r3, #45	; 0x2d
 8005f66:	4276      	negs	r6, r6
 8005f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f6c:	485e      	ldr	r0, [pc, #376]	; (80060e8 <_printf_i+0x244>)
 8005f6e:	230a      	movs	r3, #10
 8005f70:	e019      	b.n	8005fa6 <_printf_i+0x102>
 8005f72:	680e      	ldr	r6, [r1, #0]
 8005f74:	602b      	str	r3, [r5, #0]
 8005f76:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f7a:	bf18      	it	ne
 8005f7c:	b236      	sxthne	r6, r6
 8005f7e:	e7ef      	b.n	8005f60 <_printf_i+0xbc>
 8005f80:	682b      	ldr	r3, [r5, #0]
 8005f82:	6820      	ldr	r0, [r4, #0]
 8005f84:	1d19      	adds	r1, r3, #4
 8005f86:	6029      	str	r1, [r5, #0]
 8005f88:	0601      	lsls	r1, r0, #24
 8005f8a:	d501      	bpl.n	8005f90 <_printf_i+0xec>
 8005f8c:	681e      	ldr	r6, [r3, #0]
 8005f8e:	e002      	b.n	8005f96 <_printf_i+0xf2>
 8005f90:	0646      	lsls	r6, r0, #25
 8005f92:	d5fb      	bpl.n	8005f8c <_printf_i+0xe8>
 8005f94:	881e      	ldrh	r6, [r3, #0]
 8005f96:	4854      	ldr	r0, [pc, #336]	; (80060e8 <_printf_i+0x244>)
 8005f98:	2f6f      	cmp	r7, #111	; 0x6f
 8005f9a:	bf0c      	ite	eq
 8005f9c:	2308      	moveq	r3, #8
 8005f9e:	230a      	movne	r3, #10
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fa6:	6865      	ldr	r5, [r4, #4]
 8005fa8:	60a5      	str	r5, [r4, #8]
 8005faa:	2d00      	cmp	r5, #0
 8005fac:	bfa2      	ittt	ge
 8005fae:	6821      	ldrge	r1, [r4, #0]
 8005fb0:	f021 0104 	bicge.w	r1, r1, #4
 8005fb4:	6021      	strge	r1, [r4, #0]
 8005fb6:	b90e      	cbnz	r6, 8005fbc <_printf_i+0x118>
 8005fb8:	2d00      	cmp	r5, #0
 8005fba:	d04d      	beq.n	8006058 <_printf_i+0x1b4>
 8005fbc:	4615      	mov	r5, r2
 8005fbe:	fbb6 f1f3 	udiv	r1, r6, r3
 8005fc2:	fb03 6711 	mls	r7, r3, r1, r6
 8005fc6:	5dc7      	ldrb	r7, [r0, r7]
 8005fc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005fcc:	4637      	mov	r7, r6
 8005fce:	42bb      	cmp	r3, r7
 8005fd0:	460e      	mov	r6, r1
 8005fd2:	d9f4      	bls.n	8005fbe <_printf_i+0x11a>
 8005fd4:	2b08      	cmp	r3, #8
 8005fd6:	d10b      	bne.n	8005ff0 <_printf_i+0x14c>
 8005fd8:	6823      	ldr	r3, [r4, #0]
 8005fda:	07de      	lsls	r6, r3, #31
 8005fdc:	d508      	bpl.n	8005ff0 <_printf_i+0x14c>
 8005fde:	6923      	ldr	r3, [r4, #16]
 8005fe0:	6861      	ldr	r1, [r4, #4]
 8005fe2:	4299      	cmp	r1, r3
 8005fe4:	bfde      	ittt	le
 8005fe6:	2330      	movle	r3, #48	; 0x30
 8005fe8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005fec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ff0:	1b52      	subs	r2, r2, r5
 8005ff2:	6122      	str	r2, [r4, #16]
 8005ff4:	f8cd a000 	str.w	sl, [sp]
 8005ff8:	464b      	mov	r3, r9
 8005ffa:	aa03      	add	r2, sp, #12
 8005ffc:	4621      	mov	r1, r4
 8005ffe:	4640      	mov	r0, r8
 8006000:	f7ff fee2 	bl	8005dc8 <_printf_common>
 8006004:	3001      	adds	r0, #1
 8006006:	d14c      	bne.n	80060a2 <_printf_i+0x1fe>
 8006008:	f04f 30ff 	mov.w	r0, #4294967295
 800600c:	b004      	add	sp, #16
 800600e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006012:	4835      	ldr	r0, [pc, #212]	; (80060e8 <_printf_i+0x244>)
 8006014:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006018:	6829      	ldr	r1, [r5, #0]
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006020:	6029      	str	r1, [r5, #0]
 8006022:	061d      	lsls	r5, r3, #24
 8006024:	d514      	bpl.n	8006050 <_printf_i+0x1ac>
 8006026:	07df      	lsls	r7, r3, #31
 8006028:	bf44      	itt	mi
 800602a:	f043 0320 	orrmi.w	r3, r3, #32
 800602e:	6023      	strmi	r3, [r4, #0]
 8006030:	b91e      	cbnz	r6, 800603a <_printf_i+0x196>
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	f023 0320 	bic.w	r3, r3, #32
 8006038:	6023      	str	r3, [r4, #0]
 800603a:	2310      	movs	r3, #16
 800603c:	e7b0      	b.n	8005fa0 <_printf_i+0xfc>
 800603e:	6823      	ldr	r3, [r4, #0]
 8006040:	f043 0320 	orr.w	r3, r3, #32
 8006044:	6023      	str	r3, [r4, #0]
 8006046:	2378      	movs	r3, #120	; 0x78
 8006048:	4828      	ldr	r0, [pc, #160]	; (80060ec <_printf_i+0x248>)
 800604a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800604e:	e7e3      	b.n	8006018 <_printf_i+0x174>
 8006050:	0659      	lsls	r1, r3, #25
 8006052:	bf48      	it	mi
 8006054:	b2b6      	uxthmi	r6, r6
 8006056:	e7e6      	b.n	8006026 <_printf_i+0x182>
 8006058:	4615      	mov	r5, r2
 800605a:	e7bb      	b.n	8005fd4 <_printf_i+0x130>
 800605c:	682b      	ldr	r3, [r5, #0]
 800605e:	6826      	ldr	r6, [r4, #0]
 8006060:	6961      	ldr	r1, [r4, #20]
 8006062:	1d18      	adds	r0, r3, #4
 8006064:	6028      	str	r0, [r5, #0]
 8006066:	0635      	lsls	r5, r6, #24
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	d501      	bpl.n	8006070 <_printf_i+0x1cc>
 800606c:	6019      	str	r1, [r3, #0]
 800606e:	e002      	b.n	8006076 <_printf_i+0x1d2>
 8006070:	0670      	lsls	r0, r6, #25
 8006072:	d5fb      	bpl.n	800606c <_printf_i+0x1c8>
 8006074:	8019      	strh	r1, [r3, #0]
 8006076:	2300      	movs	r3, #0
 8006078:	6123      	str	r3, [r4, #16]
 800607a:	4615      	mov	r5, r2
 800607c:	e7ba      	b.n	8005ff4 <_printf_i+0x150>
 800607e:	682b      	ldr	r3, [r5, #0]
 8006080:	1d1a      	adds	r2, r3, #4
 8006082:	602a      	str	r2, [r5, #0]
 8006084:	681d      	ldr	r5, [r3, #0]
 8006086:	6862      	ldr	r2, [r4, #4]
 8006088:	2100      	movs	r1, #0
 800608a:	4628      	mov	r0, r5
 800608c:	f7fa f8a8 	bl	80001e0 <memchr>
 8006090:	b108      	cbz	r0, 8006096 <_printf_i+0x1f2>
 8006092:	1b40      	subs	r0, r0, r5
 8006094:	6060      	str	r0, [r4, #4]
 8006096:	6863      	ldr	r3, [r4, #4]
 8006098:	6123      	str	r3, [r4, #16]
 800609a:	2300      	movs	r3, #0
 800609c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060a0:	e7a8      	b.n	8005ff4 <_printf_i+0x150>
 80060a2:	6923      	ldr	r3, [r4, #16]
 80060a4:	462a      	mov	r2, r5
 80060a6:	4649      	mov	r1, r9
 80060a8:	4640      	mov	r0, r8
 80060aa:	47d0      	blx	sl
 80060ac:	3001      	adds	r0, #1
 80060ae:	d0ab      	beq.n	8006008 <_printf_i+0x164>
 80060b0:	6823      	ldr	r3, [r4, #0]
 80060b2:	079b      	lsls	r3, r3, #30
 80060b4:	d413      	bmi.n	80060de <_printf_i+0x23a>
 80060b6:	68e0      	ldr	r0, [r4, #12]
 80060b8:	9b03      	ldr	r3, [sp, #12]
 80060ba:	4298      	cmp	r0, r3
 80060bc:	bfb8      	it	lt
 80060be:	4618      	movlt	r0, r3
 80060c0:	e7a4      	b.n	800600c <_printf_i+0x168>
 80060c2:	2301      	movs	r3, #1
 80060c4:	4632      	mov	r2, r6
 80060c6:	4649      	mov	r1, r9
 80060c8:	4640      	mov	r0, r8
 80060ca:	47d0      	blx	sl
 80060cc:	3001      	adds	r0, #1
 80060ce:	d09b      	beq.n	8006008 <_printf_i+0x164>
 80060d0:	3501      	adds	r5, #1
 80060d2:	68e3      	ldr	r3, [r4, #12]
 80060d4:	9903      	ldr	r1, [sp, #12]
 80060d6:	1a5b      	subs	r3, r3, r1
 80060d8:	42ab      	cmp	r3, r5
 80060da:	dcf2      	bgt.n	80060c2 <_printf_i+0x21e>
 80060dc:	e7eb      	b.n	80060b6 <_printf_i+0x212>
 80060de:	2500      	movs	r5, #0
 80060e0:	f104 0619 	add.w	r6, r4, #25
 80060e4:	e7f5      	b.n	80060d2 <_printf_i+0x22e>
 80060e6:	bf00      	nop
 80060e8:	0800a14e 	.word	0x0800a14e
 80060ec:	0800a15f 	.word	0x0800a15f

080060f0 <_scanf_float>:
 80060f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060f4:	b087      	sub	sp, #28
 80060f6:	4617      	mov	r7, r2
 80060f8:	9303      	str	r3, [sp, #12]
 80060fa:	688b      	ldr	r3, [r1, #8]
 80060fc:	1e5a      	subs	r2, r3, #1
 80060fe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006102:	bf83      	ittte	hi
 8006104:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006108:	195b      	addhi	r3, r3, r5
 800610a:	9302      	strhi	r3, [sp, #8]
 800610c:	2300      	movls	r3, #0
 800610e:	bf86      	itte	hi
 8006110:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006114:	608b      	strhi	r3, [r1, #8]
 8006116:	9302      	strls	r3, [sp, #8]
 8006118:	680b      	ldr	r3, [r1, #0]
 800611a:	468b      	mov	fp, r1
 800611c:	2500      	movs	r5, #0
 800611e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006122:	f84b 3b1c 	str.w	r3, [fp], #28
 8006126:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800612a:	4680      	mov	r8, r0
 800612c:	460c      	mov	r4, r1
 800612e:	465e      	mov	r6, fp
 8006130:	46aa      	mov	sl, r5
 8006132:	46a9      	mov	r9, r5
 8006134:	9501      	str	r5, [sp, #4]
 8006136:	68a2      	ldr	r2, [r4, #8]
 8006138:	b152      	cbz	r2, 8006150 <_scanf_float+0x60>
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	2b4e      	cmp	r3, #78	; 0x4e
 8006140:	d864      	bhi.n	800620c <_scanf_float+0x11c>
 8006142:	2b40      	cmp	r3, #64	; 0x40
 8006144:	d83c      	bhi.n	80061c0 <_scanf_float+0xd0>
 8006146:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800614a:	b2c8      	uxtb	r0, r1
 800614c:	280e      	cmp	r0, #14
 800614e:	d93a      	bls.n	80061c6 <_scanf_float+0xd6>
 8006150:	f1b9 0f00 	cmp.w	r9, #0
 8006154:	d003      	beq.n	800615e <_scanf_float+0x6e>
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800615c:	6023      	str	r3, [r4, #0]
 800615e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006162:	f1ba 0f01 	cmp.w	sl, #1
 8006166:	f200 8113 	bhi.w	8006390 <_scanf_float+0x2a0>
 800616a:	455e      	cmp	r6, fp
 800616c:	f200 8105 	bhi.w	800637a <_scanf_float+0x28a>
 8006170:	2501      	movs	r5, #1
 8006172:	4628      	mov	r0, r5
 8006174:	b007      	add	sp, #28
 8006176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800617a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800617e:	2a0d      	cmp	r2, #13
 8006180:	d8e6      	bhi.n	8006150 <_scanf_float+0x60>
 8006182:	a101      	add	r1, pc, #4	; (adr r1, 8006188 <_scanf_float+0x98>)
 8006184:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006188:	080062c7 	.word	0x080062c7
 800618c:	08006151 	.word	0x08006151
 8006190:	08006151 	.word	0x08006151
 8006194:	08006151 	.word	0x08006151
 8006198:	08006327 	.word	0x08006327
 800619c:	080062ff 	.word	0x080062ff
 80061a0:	08006151 	.word	0x08006151
 80061a4:	08006151 	.word	0x08006151
 80061a8:	080062d5 	.word	0x080062d5
 80061ac:	08006151 	.word	0x08006151
 80061b0:	08006151 	.word	0x08006151
 80061b4:	08006151 	.word	0x08006151
 80061b8:	08006151 	.word	0x08006151
 80061bc:	0800628d 	.word	0x0800628d
 80061c0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80061c4:	e7db      	b.n	800617e <_scanf_float+0x8e>
 80061c6:	290e      	cmp	r1, #14
 80061c8:	d8c2      	bhi.n	8006150 <_scanf_float+0x60>
 80061ca:	a001      	add	r0, pc, #4	; (adr r0, 80061d0 <_scanf_float+0xe0>)
 80061cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80061d0:	0800627f 	.word	0x0800627f
 80061d4:	08006151 	.word	0x08006151
 80061d8:	0800627f 	.word	0x0800627f
 80061dc:	08006313 	.word	0x08006313
 80061e0:	08006151 	.word	0x08006151
 80061e4:	0800622d 	.word	0x0800622d
 80061e8:	08006269 	.word	0x08006269
 80061ec:	08006269 	.word	0x08006269
 80061f0:	08006269 	.word	0x08006269
 80061f4:	08006269 	.word	0x08006269
 80061f8:	08006269 	.word	0x08006269
 80061fc:	08006269 	.word	0x08006269
 8006200:	08006269 	.word	0x08006269
 8006204:	08006269 	.word	0x08006269
 8006208:	08006269 	.word	0x08006269
 800620c:	2b6e      	cmp	r3, #110	; 0x6e
 800620e:	d809      	bhi.n	8006224 <_scanf_float+0x134>
 8006210:	2b60      	cmp	r3, #96	; 0x60
 8006212:	d8b2      	bhi.n	800617a <_scanf_float+0x8a>
 8006214:	2b54      	cmp	r3, #84	; 0x54
 8006216:	d077      	beq.n	8006308 <_scanf_float+0x218>
 8006218:	2b59      	cmp	r3, #89	; 0x59
 800621a:	d199      	bne.n	8006150 <_scanf_float+0x60>
 800621c:	2d07      	cmp	r5, #7
 800621e:	d197      	bne.n	8006150 <_scanf_float+0x60>
 8006220:	2508      	movs	r5, #8
 8006222:	e029      	b.n	8006278 <_scanf_float+0x188>
 8006224:	2b74      	cmp	r3, #116	; 0x74
 8006226:	d06f      	beq.n	8006308 <_scanf_float+0x218>
 8006228:	2b79      	cmp	r3, #121	; 0x79
 800622a:	e7f6      	b.n	800621a <_scanf_float+0x12a>
 800622c:	6821      	ldr	r1, [r4, #0]
 800622e:	05c8      	lsls	r0, r1, #23
 8006230:	d51a      	bpl.n	8006268 <_scanf_float+0x178>
 8006232:	9b02      	ldr	r3, [sp, #8]
 8006234:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006238:	6021      	str	r1, [r4, #0]
 800623a:	f109 0901 	add.w	r9, r9, #1
 800623e:	b11b      	cbz	r3, 8006248 <_scanf_float+0x158>
 8006240:	3b01      	subs	r3, #1
 8006242:	3201      	adds	r2, #1
 8006244:	9302      	str	r3, [sp, #8]
 8006246:	60a2      	str	r2, [r4, #8]
 8006248:	68a3      	ldr	r3, [r4, #8]
 800624a:	3b01      	subs	r3, #1
 800624c:	60a3      	str	r3, [r4, #8]
 800624e:	6923      	ldr	r3, [r4, #16]
 8006250:	3301      	adds	r3, #1
 8006252:	6123      	str	r3, [r4, #16]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	3b01      	subs	r3, #1
 8006258:	2b00      	cmp	r3, #0
 800625a:	607b      	str	r3, [r7, #4]
 800625c:	f340 8084 	ble.w	8006368 <_scanf_float+0x278>
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	3301      	adds	r3, #1
 8006264:	603b      	str	r3, [r7, #0]
 8006266:	e766      	b.n	8006136 <_scanf_float+0x46>
 8006268:	eb1a 0f05 	cmn.w	sl, r5
 800626c:	f47f af70 	bne.w	8006150 <_scanf_float+0x60>
 8006270:	6822      	ldr	r2, [r4, #0]
 8006272:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006276:	6022      	str	r2, [r4, #0]
 8006278:	f806 3b01 	strb.w	r3, [r6], #1
 800627c:	e7e4      	b.n	8006248 <_scanf_float+0x158>
 800627e:	6822      	ldr	r2, [r4, #0]
 8006280:	0610      	lsls	r0, r2, #24
 8006282:	f57f af65 	bpl.w	8006150 <_scanf_float+0x60>
 8006286:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800628a:	e7f4      	b.n	8006276 <_scanf_float+0x186>
 800628c:	f1ba 0f00 	cmp.w	sl, #0
 8006290:	d10e      	bne.n	80062b0 <_scanf_float+0x1c0>
 8006292:	f1b9 0f00 	cmp.w	r9, #0
 8006296:	d10e      	bne.n	80062b6 <_scanf_float+0x1c6>
 8006298:	6822      	ldr	r2, [r4, #0]
 800629a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800629e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80062a2:	d108      	bne.n	80062b6 <_scanf_float+0x1c6>
 80062a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80062a8:	6022      	str	r2, [r4, #0]
 80062aa:	f04f 0a01 	mov.w	sl, #1
 80062ae:	e7e3      	b.n	8006278 <_scanf_float+0x188>
 80062b0:	f1ba 0f02 	cmp.w	sl, #2
 80062b4:	d055      	beq.n	8006362 <_scanf_float+0x272>
 80062b6:	2d01      	cmp	r5, #1
 80062b8:	d002      	beq.n	80062c0 <_scanf_float+0x1d0>
 80062ba:	2d04      	cmp	r5, #4
 80062bc:	f47f af48 	bne.w	8006150 <_scanf_float+0x60>
 80062c0:	3501      	adds	r5, #1
 80062c2:	b2ed      	uxtb	r5, r5
 80062c4:	e7d8      	b.n	8006278 <_scanf_float+0x188>
 80062c6:	f1ba 0f01 	cmp.w	sl, #1
 80062ca:	f47f af41 	bne.w	8006150 <_scanf_float+0x60>
 80062ce:	f04f 0a02 	mov.w	sl, #2
 80062d2:	e7d1      	b.n	8006278 <_scanf_float+0x188>
 80062d4:	b97d      	cbnz	r5, 80062f6 <_scanf_float+0x206>
 80062d6:	f1b9 0f00 	cmp.w	r9, #0
 80062da:	f47f af3c 	bne.w	8006156 <_scanf_float+0x66>
 80062de:	6822      	ldr	r2, [r4, #0]
 80062e0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80062e4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80062e8:	f47f af39 	bne.w	800615e <_scanf_float+0x6e>
 80062ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80062f0:	6022      	str	r2, [r4, #0]
 80062f2:	2501      	movs	r5, #1
 80062f4:	e7c0      	b.n	8006278 <_scanf_float+0x188>
 80062f6:	2d03      	cmp	r5, #3
 80062f8:	d0e2      	beq.n	80062c0 <_scanf_float+0x1d0>
 80062fa:	2d05      	cmp	r5, #5
 80062fc:	e7de      	b.n	80062bc <_scanf_float+0x1cc>
 80062fe:	2d02      	cmp	r5, #2
 8006300:	f47f af26 	bne.w	8006150 <_scanf_float+0x60>
 8006304:	2503      	movs	r5, #3
 8006306:	e7b7      	b.n	8006278 <_scanf_float+0x188>
 8006308:	2d06      	cmp	r5, #6
 800630a:	f47f af21 	bne.w	8006150 <_scanf_float+0x60>
 800630e:	2507      	movs	r5, #7
 8006310:	e7b2      	b.n	8006278 <_scanf_float+0x188>
 8006312:	6822      	ldr	r2, [r4, #0]
 8006314:	0591      	lsls	r1, r2, #22
 8006316:	f57f af1b 	bpl.w	8006150 <_scanf_float+0x60>
 800631a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800631e:	6022      	str	r2, [r4, #0]
 8006320:	f8cd 9004 	str.w	r9, [sp, #4]
 8006324:	e7a8      	b.n	8006278 <_scanf_float+0x188>
 8006326:	6822      	ldr	r2, [r4, #0]
 8006328:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800632c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006330:	d006      	beq.n	8006340 <_scanf_float+0x250>
 8006332:	0550      	lsls	r0, r2, #21
 8006334:	f57f af0c 	bpl.w	8006150 <_scanf_float+0x60>
 8006338:	f1b9 0f00 	cmp.w	r9, #0
 800633c:	f43f af0f 	beq.w	800615e <_scanf_float+0x6e>
 8006340:	0591      	lsls	r1, r2, #22
 8006342:	bf58      	it	pl
 8006344:	9901      	ldrpl	r1, [sp, #4]
 8006346:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800634a:	bf58      	it	pl
 800634c:	eba9 0101 	subpl.w	r1, r9, r1
 8006350:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006354:	bf58      	it	pl
 8006356:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800635a:	6022      	str	r2, [r4, #0]
 800635c:	f04f 0900 	mov.w	r9, #0
 8006360:	e78a      	b.n	8006278 <_scanf_float+0x188>
 8006362:	f04f 0a03 	mov.w	sl, #3
 8006366:	e787      	b.n	8006278 <_scanf_float+0x188>
 8006368:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800636c:	4639      	mov	r1, r7
 800636e:	4640      	mov	r0, r8
 8006370:	4798      	blx	r3
 8006372:	2800      	cmp	r0, #0
 8006374:	f43f aedf 	beq.w	8006136 <_scanf_float+0x46>
 8006378:	e6ea      	b.n	8006150 <_scanf_float+0x60>
 800637a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800637e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006382:	463a      	mov	r2, r7
 8006384:	4640      	mov	r0, r8
 8006386:	4798      	blx	r3
 8006388:	6923      	ldr	r3, [r4, #16]
 800638a:	3b01      	subs	r3, #1
 800638c:	6123      	str	r3, [r4, #16]
 800638e:	e6ec      	b.n	800616a <_scanf_float+0x7a>
 8006390:	1e6b      	subs	r3, r5, #1
 8006392:	2b06      	cmp	r3, #6
 8006394:	d825      	bhi.n	80063e2 <_scanf_float+0x2f2>
 8006396:	2d02      	cmp	r5, #2
 8006398:	d836      	bhi.n	8006408 <_scanf_float+0x318>
 800639a:	455e      	cmp	r6, fp
 800639c:	f67f aee8 	bls.w	8006170 <_scanf_float+0x80>
 80063a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063a4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063a8:	463a      	mov	r2, r7
 80063aa:	4640      	mov	r0, r8
 80063ac:	4798      	blx	r3
 80063ae:	6923      	ldr	r3, [r4, #16]
 80063b0:	3b01      	subs	r3, #1
 80063b2:	6123      	str	r3, [r4, #16]
 80063b4:	e7f1      	b.n	800639a <_scanf_float+0x2aa>
 80063b6:	9802      	ldr	r0, [sp, #8]
 80063b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063bc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80063c0:	9002      	str	r0, [sp, #8]
 80063c2:	463a      	mov	r2, r7
 80063c4:	4640      	mov	r0, r8
 80063c6:	4798      	blx	r3
 80063c8:	6923      	ldr	r3, [r4, #16]
 80063ca:	3b01      	subs	r3, #1
 80063cc:	6123      	str	r3, [r4, #16]
 80063ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063d2:	fa5f fa8a 	uxtb.w	sl, sl
 80063d6:	f1ba 0f02 	cmp.w	sl, #2
 80063da:	d1ec      	bne.n	80063b6 <_scanf_float+0x2c6>
 80063dc:	3d03      	subs	r5, #3
 80063de:	b2ed      	uxtb	r5, r5
 80063e0:	1b76      	subs	r6, r6, r5
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	05da      	lsls	r2, r3, #23
 80063e6:	d52f      	bpl.n	8006448 <_scanf_float+0x358>
 80063e8:	055b      	lsls	r3, r3, #21
 80063ea:	d510      	bpl.n	800640e <_scanf_float+0x31e>
 80063ec:	455e      	cmp	r6, fp
 80063ee:	f67f aebf 	bls.w	8006170 <_scanf_float+0x80>
 80063f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063fa:	463a      	mov	r2, r7
 80063fc:	4640      	mov	r0, r8
 80063fe:	4798      	blx	r3
 8006400:	6923      	ldr	r3, [r4, #16]
 8006402:	3b01      	subs	r3, #1
 8006404:	6123      	str	r3, [r4, #16]
 8006406:	e7f1      	b.n	80063ec <_scanf_float+0x2fc>
 8006408:	46aa      	mov	sl, r5
 800640a:	9602      	str	r6, [sp, #8]
 800640c:	e7df      	b.n	80063ce <_scanf_float+0x2de>
 800640e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006412:	6923      	ldr	r3, [r4, #16]
 8006414:	2965      	cmp	r1, #101	; 0x65
 8006416:	f103 33ff 	add.w	r3, r3, #4294967295
 800641a:	f106 35ff 	add.w	r5, r6, #4294967295
 800641e:	6123      	str	r3, [r4, #16]
 8006420:	d00c      	beq.n	800643c <_scanf_float+0x34c>
 8006422:	2945      	cmp	r1, #69	; 0x45
 8006424:	d00a      	beq.n	800643c <_scanf_float+0x34c>
 8006426:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800642a:	463a      	mov	r2, r7
 800642c:	4640      	mov	r0, r8
 800642e:	4798      	blx	r3
 8006430:	6923      	ldr	r3, [r4, #16]
 8006432:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006436:	3b01      	subs	r3, #1
 8006438:	1eb5      	subs	r5, r6, #2
 800643a:	6123      	str	r3, [r4, #16]
 800643c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006440:	463a      	mov	r2, r7
 8006442:	4640      	mov	r0, r8
 8006444:	4798      	blx	r3
 8006446:	462e      	mov	r6, r5
 8006448:	6825      	ldr	r5, [r4, #0]
 800644a:	f015 0510 	ands.w	r5, r5, #16
 800644e:	d159      	bne.n	8006504 <_scanf_float+0x414>
 8006450:	7035      	strb	r5, [r6, #0]
 8006452:	6823      	ldr	r3, [r4, #0]
 8006454:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800645c:	d11b      	bne.n	8006496 <_scanf_float+0x3a6>
 800645e:	9b01      	ldr	r3, [sp, #4]
 8006460:	454b      	cmp	r3, r9
 8006462:	eba3 0209 	sub.w	r2, r3, r9
 8006466:	d123      	bne.n	80064b0 <_scanf_float+0x3c0>
 8006468:	2200      	movs	r2, #0
 800646a:	4659      	mov	r1, fp
 800646c:	4640      	mov	r0, r8
 800646e:	f000 fedd 	bl	800722c <_strtod_r>
 8006472:	6822      	ldr	r2, [r4, #0]
 8006474:	9b03      	ldr	r3, [sp, #12]
 8006476:	f012 0f02 	tst.w	r2, #2
 800647a:	ec57 6b10 	vmov	r6, r7, d0
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	d021      	beq.n	80064c6 <_scanf_float+0x3d6>
 8006482:	9903      	ldr	r1, [sp, #12]
 8006484:	1d1a      	adds	r2, r3, #4
 8006486:	600a      	str	r2, [r1, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	e9c3 6700 	strd	r6, r7, [r3]
 800648e:	68e3      	ldr	r3, [r4, #12]
 8006490:	3301      	adds	r3, #1
 8006492:	60e3      	str	r3, [r4, #12]
 8006494:	e66d      	b.n	8006172 <_scanf_float+0x82>
 8006496:	9b04      	ldr	r3, [sp, #16]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d0e5      	beq.n	8006468 <_scanf_float+0x378>
 800649c:	9905      	ldr	r1, [sp, #20]
 800649e:	230a      	movs	r3, #10
 80064a0:	462a      	mov	r2, r5
 80064a2:	3101      	adds	r1, #1
 80064a4:	4640      	mov	r0, r8
 80064a6:	f000 ff49 	bl	800733c <_strtol_r>
 80064aa:	9b04      	ldr	r3, [sp, #16]
 80064ac:	9e05      	ldr	r6, [sp, #20]
 80064ae:	1ac2      	subs	r2, r0, r3
 80064b0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80064b4:	429e      	cmp	r6, r3
 80064b6:	bf28      	it	cs
 80064b8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80064bc:	4912      	ldr	r1, [pc, #72]	; (8006508 <_scanf_float+0x418>)
 80064be:	4630      	mov	r0, r6
 80064c0:	f000 f82c 	bl	800651c <siprintf>
 80064c4:	e7d0      	b.n	8006468 <_scanf_float+0x378>
 80064c6:	9903      	ldr	r1, [sp, #12]
 80064c8:	f012 0f04 	tst.w	r2, #4
 80064cc:	f103 0204 	add.w	r2, r3, #4
 80064d0:	600a      	str	r2, [r1, #0]
 80064d2:	d1d9      	bne.n	8006488 <_scanf_float+0x398>
 80064d4:	f8d3 8000 	ldr.w	r8, [r3]
 80064d8:	ee10 2a10 	vmov	r2, s0
 80064dc:	ee10 0a10 	vmov	r0, s0
 80064e0:	463b      	mov	r3, r7
 80064e2:	4639      	mov	r1, r7
 80064e4:	f7fa fb22 	bl	8000b2c <__aeabi_dcmpun>
 80064e8:	b128      	cbz	r0, 80064f6 <_scanf_float+0x406>
 80064ea:	4808      	ldr	r0, [pc, #32]	; (800650c <_scanf_float+0x41c>)
 80064ec:	f000 f810 	bl	8006510 <nanf>
 80064f0:	ed88 0a00 	vstr	s0, [r8]
 80064f4:	e7cb      	b.n	800648e <_scanf_float+0x39e>
 80064f6:	4630      	mov	r0, r6
 80064f8:	4639      	mov	r1, r7
 80064fa:	f7fa fb75 	bl	8000be8 <__aeabi_d2f>
 80064fe:	f8c8 0000 	str.w	r0, [r8]
 8006502:	e7c4      	b.n	800648e <_scanf_float+0x39e>
 8006504:	2500      	movs	r5, #0
 8006506:	e634      	b.n	8006172 <_scanf_float+0x82>
 8006508:	0800a170 	.word	0x0800a170
 800650c:	0800a578 	.word	0x0800a578

08006510 <nanf>:
 8006510:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006518 <nanf+0x8>
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	7fc00000 	.word	0x7fc00000

0800651c <siprintf>:
 800651c:	b40e      	push	{r1, r2, r3}
 800651e:	b500      	push	{lr}
 8006520:	b09c      	sub	sp, #112	; 0x70
 8006522:	ab1d      	add	r3, sp, #116	; 0x74
 8006524:	9002      	str	r0, [sp, #8]
 8006526:	9006      	str	r0, [sp, #24]
 8006528:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800652c:	4809      	ldr	r0, [pc, #36]	; (8006554 <siprintf+0x38>)
 800652e:	9107      	str	r1, [sp, #28]
 8006530:	9104      	str	r1, [sp, #16]
 8006532:	4909      	ldr	r1, [pc, #36]	; (8006558 <siprintf+0x3c>)
 8006534:	f853 2b04 	ldr.w	r2, [r3], #4
 8006538:	9105      	str	r1, [sp, #20]
 800653a:	6800      	ldr	r0, [r0, #0]
 800653c:	9301      	str	r3, [sp, #4]
 800653e:	a902      	add	r1, sp, #8
 8006540:	f002 ff5e 	bl	8009400 <_svfiprintf_r>
 8006544:	9b02      	ldr	r3, [sp, #8]
 8006546:	2200      	movs	r2, #0
 8006548:	701a      	strb	r2, [r3, #0]
 800654a:	b01c      	add	sp, #112	; 0x70
 800654c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006550:	b003      	add	sp, #12
 8006552:	4770      	bx	lr
 8006554:	2000000c 	.word	0x2000000c
 8006558:	ffff0208 	.word	0xffff0208

0800655c <__sread>:
 800655c:	b510      	push	{r4, lr}
 800655e:	460c      	mov	r4, r1
 8006560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006564:	f003 f84c 	bl	8009600 <_read_r>
 8006568:	2800      	cmp	r0, #0
 800656a:	bfab      	itete	ge
 800656c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800656e:	89a3      	ldrhlt	r3, [r4, #12]
 8006570:	181b      	addge	r3, r3, r0
 8006572:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006576:	bfac      	ite	ge
 8006578:	6563      	strge	r3, [r4, #84]	; 0x54
 800657a:	81a3      	strhlt	r3, [r4, #12]
 800657c:	bd10      	pop	{r4, pc}

0800657e <__swrite>:
 800657e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006582:	461f      	mov	r7, r3
 8006584:	898b      	ldrh	r3, [r1, #12]
 8006586:	05db      	lsls	r3, r3, #23
 8006588:	4605      	mov	r5, r0
 800658a:	460c      	mov	r4, r1
 800658c:	4616      	mov	r6, r2
 800658e:	d505      	bpl.n	800659c <__swrite+0x1e>
 8006590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006594:	2302      	movs	r3, #2
 8006596:	2200      	movs	r2, #0
 8006598:	f002 f8e4 	bl	8008764 <_lseek_r>
 800659c:	89a3      	ldrh	r3, [r4, #12]
 800659e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065a6:	81a3      	strh	r3, [r4, #12]
 80065a8:	4632      	mov	r2, r6
 80065aa:	463b      	mov	r3, r7
 80065ac:	4628      	mov	r0, r5
 80065ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065b2:	f000 bec5 	b.w	8007340 <_write_r>

080065b6 <__sseek>:
 80065b6:	b510      	push	{r4, lr}
 80065b8:	460c      	mov	r4, r1
 80065ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065be:	f002 f8d1 	bl	8008764 <_lseek_r>
 80065c2:	1c43      	adds	r3, r0, #1
 80065c4:	89a3      	ldrh	r3, [r4, #12]
 80065c6:	bf15      	itete	ne
 80065c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80065ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80065d2:	81a3      	strheq	r3, [r4, #12]
 80065d4:	bf18      	it	ne
 80065d6:	81a3      	strhne	r3, [r4, #12]
 80065d8:	bd10      	pop	{r4, pc}

080065da <__sclose>:
 80065da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065de:	f000 bec1 	b.w	8007364 <_close_r>

080065e2 <sulp>:
 80065e2:	b570      	push	{r4, r5, r6, lr}
 80065e4:	4604      	mov	r4, r0
 80065e6:	460d      	mov	r5, r1
 80065e8:	ec45 4b10 	vmov	d0, r4, r5
 80065ec:	4616      	mov	r6, r2
 80065ee:	f002 fc65 	bl	8008ebc <__ulp>
 80065f2:	ec51 0b10 	vmov	r0, r1, d0
 80065f6:	b17e      	cbz	r6, 8006618 <sulp+0x36>
 80065f8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80065fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006600:	2b00      	cmp	r3, #0
 8006602:	dd09      	ble.n	8006618 <sulp+0x36>
 8006604:	051b      	lsls	r3, r3, #20
 8006606:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800660a:	2400      	movs	r4, #0
 800660c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006610:	4622      	mov	r2, r4
 8006612:	462b      	mov	r3, r5
 8006614:	f7f9 fff0 	bl	80005f8 <__aeabi_dmul>
 8006618:	bd70      	pop	{r4, r5, r6, pc}
 800661a:	0000      	movs	r0, r0
 800661c:	0000      	movs	r0, r0
	...

08006620 <_strtod_l>:
 8006620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006624:	ed2d 8b02 	vpush	{d8}
 8006628:	b09d      	sub	sp, #116	; 0x74
 800662a:	461f      	mov	r7, r3
 800662c:	2300      	movs	r3, #0
 800662e:	9318      	str	r3, [sp, #96]	; 0x60
 8006630:	4ba2      	ldr	r3, [pc, #648]	; (80068bc <_strtod_l+0x29c>)
 8006632:	9213      	str	r2, [sp, #76]	; 0x4c
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	9305      	str	r3, [sp, #20]
 8006638:	4604      	mov	r4, r0
 800663a:	4618      	mov	r0, r3
 800663c:	4688      	mov	r8, r1
 800663e:	f7f9 fdc7 	bl	80001d0 <strlen>
 8006642:	f04f 0a00 	mov.w	sl, #0
 8006646:	4605      	mov	r5, r0
 8006648:	f04f 0b00 	mov.w	fp, #0
 800664c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006650:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006652:	781a      	ldrb	r2, [r3, #0]
 8006654:	2a2b      	cmp	r2, #43	; 0x2b
 8006656:	d04e      	beq.n	80066f6 <_strtod_l+0xd6>
 8006658:	d83b      	bhi.n	80066d2 <_strtod_l+0xb2>
 800665a:	2a0d      	cmp	r2, #13
 800665c:	d834      	bhi.n	80066c8 <_strtod_l+0xa8>
 800665e:	2a08      	cmp	r2, #8
 8006660:	d834      	bhi.n	80066cc <_strtod_l+0xac>
 8006662:	2a00      	cmp	r2, #0
 8006664:	d03e      	beq.n	80066e4 <_strtod_l+0xc4>
 8006666:	2300      	movs	r3, #0
 8006668:	930a      	str	r3, [sp, #40]	; 0x28
 800666a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800666c:	7833      	ldrb	r3, [r6, #0]
 800666e:	2b30      	cmp	r3, #48	; 0x30
 8006670:	f040 80b0 	bne.w	80067d4 <_strtod_l+0x1b4>
 8006674:	7873      	ldrb	r3, [r6, #1]
 8006676:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800667a:	2b58      	cmp	r3, #88	; 0x58
 800667c:	d168      	bne.n	8006750 <_strtod_l+0x130>
 800667e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006680:	9301      	str	r3, [sp, #4]
 8006682:	ab18      	add	r3, sp, #96	; 0x60
 8006684:	9702      	str	r7, [sp, #8]
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	4a8d      	ldr	r2, [pc, #564]	; (80068c0 <_strtod_l+0x2a0>)
 800668a:	ab19      	add	r3, sp, #100	; 0x64
 800668c:	a917      	add	r1, sp, #92	; 0x5c
 800668e:	4620      	mov	r0, r4
 8006690:	f001 fd5c 	bl	800814c <__gethex>
 8006694:	f010 0707 	ands.w	r7, r0, #7
 8006698:	4605      	mov	r5, r0
 800669a:	d005      	beq.n	80066a8 <_strtod_l+0x88>
 800669c:	2f06      	cmp	r7, #6
 800669e:	d12c      	bne.n	80066fa <_strtod_l+0xda>
 80066a0:	3601      	adds	r6, #1
 80066a2:	2300      	movs	r3, #0
 80066a4:	9617      	str	r6, [sp, #92]	; 0x5c
 80066a6:	930a      	str	r3, [sp, #40]	; 0x28
 80066a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f040 8590 	bne.w	80071d0 <_strtod_l+0xbb0>
 80066b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066b2:	b1eb      	cbz	r3, 80066f0 <_strtod_l+0xd0>
 80066b4:	4652      	mov	r2, sl
 80066b6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80066ba:	ec43 2b10 	vmov	d0, r2, r3
 80066be:	b01d      	add	sp, #116	; 0x74
 80066c0:	ecbd 8b02 	vpop	{d8}
 80066c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c8:	2a20      	cmp	r2, #32
 80066ca:	d1cc      	bne.n	8006666 <_strtod_l+0x46>
 80066cc:	3301      	adds	r3, #1
 80066ce:	9317      	str	r3, [sp, #92]	; 0x5c
 80066d0:	e7be      	b.n	8006650 <_strtod_l+0x30>
 80066d2:	2a2d      	cmp	r2, #45	; 0x2d
 80066d4:	d1c7      	bne.n	8006666 <_strtod_l+0x46>
 80066d6:	2201      	movs	r2, #1
 80066d8:	920a      	str	r2, [sp, #40]	; 0x28
 80066da:	1c5a      	adds	r2, r3, #1
 80066dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80066de:	785b      	ldrb	r3, [r3, #1]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1c2      	bne.n	800666a <_strtod_l+0x4a>
 80066e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80066e6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f040 856e 	bne.w	80071cc <_strtod_l+0xbac>
 80066f0:	4652      	mov	r2, sl
 80066f2:	465b      	mov	r3, fp
 80066f4:	e7e1      	b.n	80066ba <_strtod_l+0x9a>
 80066f6:	2200      	movs	r2, #0
 80066f8:	e7ee      	b.n	80066d8 <_strtod_l+0xb8>
 80066fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80066fc:	b13a      	cbz	r2, 800670e <_strtod_l+0xee>
 80066fe:	2135      	movs	r1, #53	; 0x35
 8006700:	a81a      	add	r0, sp, #104	; 0x68
 8006702:	f002 fce6 	bl	80090d2 <__copybits>
 8006706:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006708:	4620      	mov	r0, r4
 800670a:	f002 f8a5 	bl	8008858 <_Bfree>
 800670e:	3f01      	subs	r7, #1
 8006710:	2f04      	cmp	r7, #4
 8006712:	d806      	bhi.n	8006722 <_strtod_l+0x102>
 8006714:	e8df f007 	tbb	[pc, r7]
 8006718:	1714030a 	.word	0x1714030a
 800671c:	0a          	.byte	0x0a
 800671d:	00          	.byte	0x00
 800671e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006722:	0728      	lsls	r0, r5, #28
 8006724:	d5c0      	bpl.n	80066a8 <_strtod_l+0x88>
 8006726:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800672a:	e7bd      	b.n	80066a8 <_strtod_l+0x88>
 800672c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006730:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006732:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006736:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800673a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800673e:	e7f0      	b.n	8006722 <_strtod_l+0x102>
 8006740:	f8df b180 	ldr.w	fp, [pc, #384]	; 80068c4 <_strtod_l+0x2a4>
 8006744:	e7ed      	b.n	8006722 <_strtod_l+0x102>
 8006746:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800674a:	f04f 3aff 	mov.w	sl, #4294967295
 800674e:	e7e8      	b.n	8006722 <_strtod_l+0x102>
 8006750:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	9217      	str	r2, [sp, #92]	; 0x5c
 8006756:	785b      	ldrb	r3, [r3, #1]
 8006758:	2b30      	cmp	r3, #48	; 0x30
 800675a:	d0f9      	beq.n	8006750 <_strtod_l+0x130>
 800675c:	2b00      	cmp	r3, #0
 800675e:	d0a3      	beq.n	80066a8 <_strtod_l+0x88>
 8006760:	2301      	movs	r3, #1
 8006762:	f04f 0900 	mov.w	r9, #0
 8006766:	9304      	str	r3, [sp, #16]
 8006768:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800676a:	9308      	str	r3, [sp, #32]
 800676c:	f8cd 901c 	str.w	r9, [sp, #28]
 8006770:	464f      	mov	r7, r9
 8006772:	220a      	movs	r2, #10
 8006774:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006776:	7806      	ldrb	r6, [r0, #0]
 8006778:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800677c:	b2d9      	uxtb	r1, r3
 800677e:	2909      	cmp	r1, #9
 8006780:	d92a      	bls.n	80067d8 <_strtod_l+0x1b8>
 8006782:	9905      	ldr	r1, [sp, #20]
 8006784:	462a      	mov	r2, r5
 8006786:	f002 ff67 	bl	8009658 <strncmp>
 800678a:	b398      	cbz	r0, 80067f4 <_strtod_l+0x1d4>
 800678c:	2000      	movs	r0, #0
 800678e:	4632      	mov	r2, r6
 8006790:	463d      	mov	r5, r7
 8006792:	9005      	str	r0, [sp, #20]
 8006794:	4603      	mov	r3, r0
 8006796:	2a65      	cmp	r2, #101	; 0x65
 8006798:	d001      	beq.n	800679e <_strtod_l+0x17e>
 800679a:	2a45      	cmp	r2, #69	; 0x45
 800679c:	d118      	bne.n	80067d0 <_strtod_l+0x1b0>
 800679e:	b91d      	cbnz	r5, 80067a8 <_strtod_l+0x188>
 80067a0:	9a04      	ldr	r2, [sp, #16]
 80067a2:	4302      	orrs	r2, r0
 80067a4:	d09e      	beq.n	80066e4 <_strtod_l+0xc4>
 80067a6:	2500      	movs	r5, #0
 80067a8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80067ac:	f108 0201 	add.w	r2, r8, #1
 80067b0:	9217      	str	r2, [sp, #92]	; 0x5c
 80067b2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80067b6:	2a2b      	cmp	r2, #43	; 0x2b
 80067b8:	d075      	beq.n	80068a6 <_strtod_l+0x286>
 80067ba:	2a2d      	cmp	r2, #45	; 0x2d
 80067bc:	d07b      	beq.n	80068b6 <_strtod_l+0x296>
 80067be:	f04f 0c00 	mov.w	ip, #0
 80067c2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80067c6:	2909      	cmp	r1, #9
 80067c8:	f240 8082 	bls.w	80068d0 <_strtod_l+0x2b0>
 80067cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80067d0:	2600      	movs	r6, #0
 80067d2:	e09d      	b.n	8006910 <_strtod_l+0x2f0>
 80067d4:	2300      	movs	r3, #0
 80067d6:	e7c4      	b.n	8006762 <_strtod_l+0x142>
 80067d8:	2f08      	cmp	r7, #8
 80067da:	bfd8      	it	le
 80067dc:	9907      	ldrle	r1, [sp, #28]
 80067de:	f100 0001 	add.w	r0, r0, #1
 80067e2:	bfda      	itte	le
 80067e4:	fb02 3301 	mlale	r3, r2, r1, r3
 80067e8:	9307      	strle	r3, [sp, #28]
 80067ea:	fb02 3909 	mlagt	r9, r2, r9, r3
 80067ee:	3701      	adds	r7, #1
 80067f0:	9017      	str	r0, [sp, #92]	; 0x5c
 80067f2:	e7bf      	b.n	8006774 <_strtod_l+0x154>
 80067f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067f6:	195a      	adds	r2, r3, r5
 80067f8:	9217      	str	r2, [sp, #92]	; 0x5c
 80067fa:	5d5a      	ldrb	r2, [r3, r5]
 80067fc:	2f00      	cmp	r7, #0
 80067fe:	d037      	beq.n	8006870 <_strtod_l+0x250>
 8006800:	9005      	str	r0, [sp, #20]
 8006802:	463d      	mov	r5, r7
 8006804:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006808:	2b09      	cmp	r3, #9
 800680a:	d912      	bls.n	8006832 <_strtod_l+0x212>
 800680c:	2301      	movs	r3, #1
 800680e:	e7c2      	b.n	8006796 <_strtod_l+0x176>
 8006810:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006812:	1c5a      	adds	r2, r3, #1
 8006814:	9217      	str	r2, [sp, #92]	; 0x5c
 8006816:	785a      	ldrb	r2, [r3, #1]
 8006818:	3001      	adds	r0, #1
 800681a:	2a30      	cmp	r2, #48	; 0x30
 800681c:	d0f8      	beq.n	8006810 <_strtod_l+0x1f0>
 800681e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006822:	2b08      	cmp	r3, #8
 8006824:	f200 84d9 	bhi.w	80071da <_strtod_l+0xbba>
 8006828:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800682a:	9005      	str	r0, [sp, #20]
 800682c:	2000      	movs	r0, #0
 800682e:	9308      	str	r3, [sp, #32]
 8006830:	4605      	mov	r5, r0
 8006832:	3a30      	subs	r2, #48	; 0x30
 8006834:	f100 0301 	add.w	r3, r0, #1
 8006838:	d014      	beq.n	8006864 <_strtod_l+0x244>
 800683a:	9905      	ldr	r1, [sp, #20]
 800683c:	4419      	add	r1, r3
 800683e:	9105      	str	r1, [sp, #20]
 8006840:	462b      	mov	r3, r5
 8006842:	eb00 0e05 	add.w	lr, r0, r5
 8006846:	210a      	movs	r1, #10
 8006848:	4573      	cmp	r3, lr
 800684a:	d113      	bne.n	8006874 <_strtod_l+0x254>
 800684c:	182b      	adds	r3, r5, r0
 800684e:	2b08      	cmp	r3, #8
 8006850:	f105 0501 	add.w	r5, r5, #1
 8006854:	4405      	add	r5, r0
 8006856:	dc1c      	bgt.n	8006892 <_strtod_l+0x272>
 8006858:	9907      	ldr	r1, [sp, #28]
 800685a:	230a      	movs	r3, #10
 800685c:	fb03 2301 	mla	r3, r3, r1, r2
 8006860:	9307      	str	r3, [sp, #28]
 8006862:	2300      	movs	r3, #0
 8006864:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006866:	1c51      	adds	r1, r2, #1
 8006868:	9117      	str	r1, [sp, #92]	; 0x5c
 800686a:	7852      	ldrb	r2, [r2, #1]
 800686c:	4618      	mov	r0, r3
 800686e:	e7c9      	b.n	8006804 <_strtod_l+0x1e4>
 8006870:	4638      	mov	r0, r7
 8006872:	e7d2      	b.n	800681a <_strtod_l+0x1fa>
 8006874:	2b08      	cmp	r3, #8
 8006876:	dc04      	bgt.n	8006882 <_strtod_l+0x262>
 8006878:	9e07      	ldr	r6, [sp, #28]
 800687a:	434e      	muls	r6, r1
 800687c:	9607      	str	r6, [sp, #28]
 800687e:	3301      	adds	r3, #1
 8006880:	e7e2      	b.n	8006848 <_strtod_l+0x228>
 8006882:	f103 0c01 	add.w	ip, r3, #1
 8006886:	f1bc 0f10 	cmp.w	ip, #16
 800688a:	bfd8      	it	le
 800688c:	fb01 f909 	mulle.w	r9, r1, r9
 8006890:	e7f5      	b.n	800687e <_strtod_l+0x25e>
 8006892:	2d10      	cmp	r5, #16
 8006894:	bfdc      	itt	le
 8006896:	230a      	movle	r3, #10
 8006898:	fb03 2909 	mlale	r9, r3, r9, r2
 800689c:	e7e1      	b.n	8006862 <_strtod_l+0x242>
 800689e:	2300      	movs	r3, #0
 80068a0:	9305      	str	r3, [sp, #20]
 80068a2:	2301      	movs	r3, #1
 80068a4:	e77c      	b.n	80067a0 <_strtod_l+0x180>
 80068a6:	f04f 0c00 	mov.w	ip, #0
 80068aa:	f108 0202 	add.w	r2, r8, #2
 80068ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80068b0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80068b4:	e785      	b.n	80067c2 <_strtod_l+0x1a2>
 80068b6:	f04f 0c01 	mov.w	ip, #1
 80068ba:	e7f6      	b.n	80068aa <_strtod_l+0x28a>
 80068bc:	0800a3c0 	.word	0x0800a3c0
 80068c0:	0800a178 	.word	0x0800a178
 80068c4:	7ff00000 	.word	0x7ff00000
 80068c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80068ca:	1c51      	adds	r1, r2, #1
 80068cc:	9117      	str	r1, [sp, #92]	; 0x5c
 80068ce:	7852      	ldrb	r2, [r2, #1]
 80068d0:	2a30      	cmp	r2, #48	; 0x30
 80068d2:	d0f9      	beq.n	80068c8 <_strtod_l+0x2a8>
 80068d4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80068d8:	2908      	cmp	r1, #8
 80068da:	f63f af79 	bhi.w	80067d0 <_strtod_l+0x1b0>
 80068de:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80068e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80068e4:	9206      	str	r2, [sp, #24]
 80068e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80068e8:	1c51      	adds	r1, r2, #1
 80068ea:	9117      	str	r1, [sp, #92]	; 0x5c
 80068ec:	7852      	ldrb	r2, [r2, #1]
 80068ee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80068f2:	2e09      	cmp	r6, #9
 80068f4:	d937      	bls.n	8006966 <_strtod_l+0x346>
 80068f6:	9e06      	ldr	r6, [sp, #24]
 80068f8:	1b89      	subs	r1, r1, r6
 80068fa:	2908      	cmp	r1, #8
 80068fc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006900:	dc02      	bgt.n	8006908 <_strtod_l+0x2e8>
 8006902:	4576      	cmp	r6, lr
 8006904:	bfa8      	it	ge
 8006906:	4676      	movge	r6, lr
 8006908:	f1bc 0f00 	cmp.w	ip, #0
 800690c:	d000      	beq.n	8006910 <_strtod_l+0x2f0>
 800690e:	4276      	negs	r6, r6
 8006910:	2d00      	cmp	r5, #0
 8006912:	d14d      	bne.n	80069b0 <_strtod_l+0x390>
 8006914:	9904      	ldr	r1, [sp, #16]
 8006916:	4301      	orrs	r1, r0
 8006918:	f47f aec6 	bne.w	80066a8 <_strtod_l+0x88>
 800691c:	2b00      	cmp	r3, #0
 800691e:	f47f aee1 	bne.w	80066e4 <_strtod_l+0xc4>
 8006922:	2a69      	cmp	r2, #105	; 0x69
 8006924:	d027      	beq.n	8006976 <_strtod_l+0x356>
 8006926:	dc24      	bgt.n	8006972 <_strtod_l+0x352>
 8006928:	2a49      	cmp	r2, #73	; 0x49
 800692a:	d024      	beq.n	8006976 <_strtod_l+0x356>
 800692c:	2a4e      	cmp	r2, #78	; 0x4e
 800692e:	f47f aed9 	bne.w	80066e4 <_strtod_l+0xc4>
 8006932:	499f      	ldr	r1, [pc, #636]	; (8006bb0 <_strtod_l+0x590>)
 8006934:	a817      	add	r0, sp, #92	; 0x5c
 8006936:	f001 fe61 	bl	80085fc <__match>
 800693a:	2800      	cmp	r0, #0
 800693c:	f43f aed2 	beq.w	80066e4 <_strtod_l+0xc4>
 8006940:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	2b28      	cmp	r3, #40	; 0x28
 8006946:	d12d      	bne.n	80069a4 <_strtod_l+0x384>
 8006948:	499a      	ldr	r1, [pc, #616]	; (8006bb4 <_strtod_l+0x594>)
 800694a:	aa1a      	add	r2, sp, #104	; 0x68
 800694c:	a817      	add	r0, sp, #92	; 0x5c
 800694e:	f001 fe69 	bl	8008624 <__hexnan>
 8006952:	2805      	cmp	r0, #5
 8006954:	d126      	bne.n	80069a4 <_strtod_l+0x384>
 8006956:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006958:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800695c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006960:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006964:	e6a0      	b.n	80066a8 <_strtod_l+0x88>
 8006966:	210a      	movs	r1, #10
 8006968:	fb01 2e0e 	mla	lr, r1, lr, r2
 800696c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006970:	e7b9      	b.n	80068e6 <_strtod_l+0x2c6>
 8006972:	2a6e      	cmp	r2, #110	; 0x6e
 8006974:	e7db      	b.n	800692e <_strtod_l+0x30e>
 8006976:	4990      	ldr	r1, [pc, #576]	; (8006bb8 <_strtod_l+0x598>)
 8006978:	a817      	add	r0, sp, #92	; 0x5c
 800697a:	f001 fe3f 	bl	80085fc <__match>
 800697e:	2800      	cmp	r0, #0
 8006980:	f43f aeb0 	beq.w	80066e4 <_strtod_l+0xc4>
 8006984:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006986:	498d      	ldr	r1, [pc, #564]	; (8006bbc <_strtod_l+0x59c>)
 8006988:	3b01      	subs	r3, #1
 800698a:	a817      	add	r0, sp, #92	; 0x5c
 800698c:	9317      	str	r3, [sp, #92]	; 0x5c
 800698e:	f001 fe35 	bl	80085fc <__match>
 8006992:	b910      	cbnz	r0, 800699a <_strtod_l+0x37a>
 8006994:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006996:	3301      	adds	r3, #1
 8006998:	9317      	str	r3, [sp, #92]	; 0x5c
 800699a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006bcc <_strtod_l+0x5ac>
 800699e:	f04f 0a00 	mov.w	sl, #0
 80069a2:	e681      	b.n	80066a8 <_strtod_l+0x88>
 80069a4:	4886      	ldr	r0, [pc, #536]	; (8006bc0 <_strtod_l+0x5a0>)
 80069a6:	f002 fe3f 	bl	8009628 <nan>
 80069aa:	ec5b ab10 	vmov	sl, fp, d0
 80069ae:	e67b      	b.n	80066a8 <_strtod_l+0x88>
 80069b0:	9b05      	ldr	r3, [sp, #20]
 80069b2:	9807      	ldr	r0, [sp, #28]
 80069b4:	1af3      	subs	r3, r6, r3
 80069b6:	2f00      	cmp	r7, #0
 80069b8:	bf08      	it	eq
 80069ba:	462f      	moveq	r7, r5
 80069bc:	2d10      	cmp	r5, #16
 80069be:	9306      	str	r3, [sp, #24]
 80069c0:	46a8      	mov	r8, r5
 80069c2:	bfa8      	it	ge
 80069c4:	f04f 0810 	movge.w	r8, #16
 80069c8:	f7f9 fd9c 	bl	8000504 <__aeabi_ui2d>
 80069cc:	2d09      	cmp	r5, #9
 80069ce:	4682      	mov	sl, r0
 80069d0:	468b      	mov	fp, r1
 80069d2:	dd13      	ble.n	80069fc <_strtod_l+0x3dc>
 80069d4:	4b7b      	ldr	r3, [pc, #492]	; (8006bc4 <_strtod_l+0x5a4>)
 80069d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80069da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80069de:	f7f9 fe0b 	bl	80005f8 <__aeabi_dmul>
 80069e2:	4682      	mov	sl, r0
 80069e4:	4648      	mov	r0, r9
 80069e6:	468b      	mov	fp, r1
 80069e8:	f7f9 fd8c 	bl	8000504 <__aeabi_ui2d>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	4650      	mov	r0, sl
 80069f2:	4659      	mov	r1, fp
 80069f4:	f7f9 fc4a 	bl	800028c <__adddf3>
 80069f8:	4682      	mov	sl, r0
 80069fa:	468b      	mov	fp, r1
 80069fc:	2d0f      	cmp	r5, #15
 80069fe:	dc38      	bgt.n	8006a72 <_strtod_l+0x452>
 8006a00:	9b06      	ldr	r3, [sp, #24]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f43f ae50 	beq.w	80066a8 <_strtod_l+0x88>
 8006a08:	dd24      	ble.n	8006a54 <_strtod_l+0x434>
 8006a0a:	2b16      	cmp	r3, #22
 8006a0c:	dc0b      	bgt.n	8006a26 <_strtod_l+0x406>
 8006a0e:	496d      	ldr	r1, [pc, #436]	; (8006bc4 <_strtod_l+0x5a4>)
 8006a10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a18:	4652      	mov	r2, sl
 8006a1a:	465b      	mov	r3, fp
 8006a1c:	f7f9 fdec 	bl	80005f8 <__aeabi_dmul>
 8006a20:	4682      	mov	sl, r0
 8006a22:	468b      	mov	fp, r1
 8006a24:	e640      	b.n	80066a8 <_strtod_l+0x88>
 8006a26:	9a06      	ldr	r2, [sp, #24]
 8006a28:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	db20      	blt.n	8006a72 <_strtod_l+0x452>
 8006a30:	4c64      	ldr	r4, [pc, #400]	; (8006bc4 <_strtod_l+0x5a4>)
 8006a32:	f1c5 050f 	rsb	r5, r5, #15
 8006a36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006a3a:	4652      	mov	r2, sl
 8006a3c:	465b      	mov	r3, fp
 8006a3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a42:	f7f9 fdd9 	bl	80005f8 <__aeabi_dmul>
 8006a46:	9b06      	ldr	r3, [sp, #24]
 8006a48:	1b5d      	subs	r5, r3, r5
 8006a4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006a4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006a52:	e7e3      	b.n	8006a1c <_strtod_l+0x3fc>
 8006a54:	9b06      	ldr	r3, [sp, #24]
 8006a56:	3316      	adds	r3, #22
 8006a58:	db0b      	blt.n	8006a72 <_strtod_l+0x452>
 8006a5a:	9b05      	ldr	r3, [sp, #20]
 8006a5c:	1b9e      	subs	r6, r3, r6
 8006a5e:	4b59      	ldr	r3, [pc, #356]	; (8006bc4 <_strtod_l+0x5a4>)
 8006a60:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006a64:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a68:	4650      	mov	r0, sl
 8006a6a:	4659      	mov	r1, fp
 8006a6c:	f7f9 feee 	bl	800084c <__aeabi_ddiv>
 8006a70:	e7d6      	b.n	8006a20 <_strtod_l+0x400>
 8006a72:	9b06      	ldr	r3, [sp, #24]
 8006a74:	eba5 0808 	sub.w	r8, r5, r8
 8006a78:	4498      	add	r8, r3
 8006a7a:	f1b8 0f00 	cmp.w	r8, #0
 8006a7e:	dd74      	ble.n	8006b6a <_strtod_l+0x54a>
 8006a80:	f018 030f 	ands.w	r3, r8, #15
 8006a84:	d00a      	beq.n	8006a9c <_strtod_l+0x47c>
 8006a86:	494f      	ldr	r1, [pc, #316]	; (8006bc4 <_strtod_l+0x5a4>)
 8006a88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a8c:	4652      	mov	r2, sl
 8006a8e:	465b      	mov	r3, fp
 8006a90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a94:	f7f9 fdb0 	bl	80005f8 <__aeabi_dmul>
 8006a98:	4682      	mov	sl, r0
 8006a9a:	468b      	mov	fp, r1
 8006a9c:	f038 080f 	bics.w	r8, r8, #15
 8006aa0:	d04f      	beq.n	8006b42 <_strtod_l+0x522>
 8006aa2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006aa6:	dd22      	ble.n	8006aee <_strtod_l+0x4ce>
 8006aa8:	2500      	movs	r5, #0
 8006aaa:	462e      	mov	r6, r5
 8006aac:	9507      	str	r5, [sp, #28]
 8006aae:	9505      	str	r5, [sp, #20]
 8006ab0:	2322      	movs	r3, #34	; 0x22
 8006ab2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006bcc <_strtod_l+0x5ac>
 8006ab6:	6023      	str	r3, [r4, #0]
 8006ab8:	f04f 0a00 	mov.w	sl, #0
 8006abc:	9b07      	ldr	r3, [sp, #28]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f43f adf2 	beq.w	80066a8 <_strtod_l+0x88>
 8006ac4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f001 fec6 	bl	8008858 <_Bfree>
 8006acc:	9905      	ldr	r1, [sp, #20]
 8006ace:	4620      	mov	r0, r4
 8006ad0:	f001 fec2 	bl	8008858 <_Bfree>
 8006ad4:	4631      	mov	r1, r6
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	f001 febe 	bl	8008858 <_Bfree>
 8006adc:	9907      	ldr	r1, [sp, #28]
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f001 feba 	bl	8008858 <_Bfree>
 8006ae4:	4629      	mov	r1, r5
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	f001 feb6 	bl	8008858 <_Bfree>
 8006aec:	e5dc      	b.n	80066a8 <_strtod_l+0x88>
 8006aee:	4b36      	ldr	r3, [pc, #216]	; (8006bc8 <_strtod_l+0x5a8>)
 8006af0:	9304      	str	r3, [sp, #16]
 8006af2:	2300      	movs	r3, #0
 8006af4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006af8:	4650      	mov	r0, sl
 8006afa:	4659      	mov	r1, fp
 8006afc:	4699      	mov	r9, r3
 8006afe:	f1b8 0f01 	cmp.w	r8, #1
 8006b02:	dc21      	bgt.n	8006b48 <_strtod_l+0x528>
 8006b04:	b10b      	cbz	r3, 8006b0a <_strtod_l+0x4ea>
 8006b06:	4682      	mov	sl, r0
 8006b08:	468b      	mov	fp, r1
 8006b0a:	4b2f      	ldr	r3, [pc, #188]	; (8006bc8 <_strtod_l+0x5a8>)
 8006b0c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006b10:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006b14:	4652      	mov	r2, sl
 8006b16:	465b      	mov	r3, fp
 8006b18:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006b1c:	f7f9 fd6c 	bl	80005f8 <__aeabi_dmul>
 8006b20:	4b2a      	ldr	r3, [pc, #168]	; (8006bcc <_strtod_l+0x5ac>)
 8006b22:	460a      	mov	r2, r1
 8006b24:	400b      	ands	r3, r1
 8006b26:	492a      	ldr	r1, [pc, #168]	; (8006bd0 <_strtod_l+0x5b0>)
 8006b28:	428b      	cmp	r3, r1
 8006b2a:	4682      	mov	sl, r0
 8006b2c:	d8bc      	bhi.n	8006aa8 <_strtod_l+0x488>
 8006b2e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006b32:	428b      	cmp	r3, r1
 8006b34:	bf86      	itte	hi
 8006b36:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006bd4 <_strtod_l+0x5b4>
 8006b3a:	f04f 3aff 	movhi.w	sl, #4294967295
 8006b3e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006b42:	2300      	movs	r3, #0
 8006b44:	9304      	str	r3, [sp, #16]
 8006b46:	e084      	b.n	8006c52 <_strtod_l+0x632>
 8006b48:	f018 0f01 	tst.w	r8, #1
 8006b4c:	d005      	beq.n	8006b5a <_strtod_l+0x53a>
 8006b4e:	9b04      	ldr	r3, [sp, #16]
 8006b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b54:	f7f9 fd50 	bl	80005f8 <__aeabi_dmul>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	9a04      	ldr	r2, [sp, #16]
 8006b5c:	3208      	adds	r2, #8
 8006b5e:	f109 0901 	add.w	r9, r9, #1
 8006b62:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006b66:	9204      	str	r2, [sp, #16]
 8006b68:	e7c9      	b.n	8006afe <_strtod_l+0x4de>
 8006b6a:	d0ea      	beq.n	8006b42 <_strtod_l+0x522>
 8006b6c:	f1c8 0800 	rsb	r8, r8, #0
 8006b70:	f018 020f 	ands.w	r2, r8, #15
 8006b74:	d00a      	beq.n	8006b8c <_strtod_l+0x56c>
 8006b76:	4b13      	ldr	r3, [pc, #76]	; (8006bc4 <_strtod_l+0x5a4>)
 8006b78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b7c:	4650      	mov	r0, sl
 8006b7e:	4659      	mov	r1, fp
 8006b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b84:	f7f9 fe62 	bl	800084c <__aeabi_ddiv>
 8006b88:	4682      	mov	sl, r0
 8006b8a:	468b      	mov	fp, r1
 8006b8c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006b90:	d0d7      	beq.n	8006b42 <_strtod_l+0x522>
 8006b92:	f1b8 0f1f 	cmp.w	r8, #31
 8006b96:	dd1f      	ble.n	8006bd8 <_strtod_l+0x5b8>
 8006b98:	2500      	movs	r5, #0
 8006b9a:	462e      	mov	r6, r5
 8006b9c:	9507      	str	r5, [sp, #28]
 8006b9e:	9505      	str	r5, [sp, #20]
 8006ba0:	2322      	movs	r3, #34	; 0x22
 8006ba2:	f04f 0a00 	mov.w	sl, #0
 8006ba6:	f04f 0b00 	mov.w	fp, #0
 8006baa:	6023      	str	r3, [r4, #0]
 8006bac:	e786      	b.n	8006abc <_strtod_l+0x49c>
 8006bae:	bf00      	nop
 8006bb0:	0800a149 	.word	0x0800a149
 8006bb4:	0800a18c 	.word	0x0800a18c
 8006bb8:	0800a141 	.word	0x0800a141
 8006bbc:	0800a2cc 	.word	0x0800a2cc
 8006bc0:	0800a578 	.word	0x0800a578
 8006bc4:	0800a458 	.word	0x0800a458
 8006bc8:	0800a430 	.word	0x0800a430
 8006bcc:	7ff00000 	.word	0x7ff00000
 8006bd0:	7ca00000 	.word	0x7ca00000
 8006bd4:	7fefffff 	.word	0x7fefffff
 8006bd8:	f018 0310 	ands.w	r3, r8, #16
 8006bdc:	bf18      	it	ne
 8006bde:	236a      	movne	r3, #106	; 0x6a
 8006be0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006f90 <_strtod_l+0x970>
 8006be4:	9304      	str	r3, [sp, #16]
 8006be6:	4650      	mov	r0, sl
 8006be8:	4659      	mov	r1, fp
 8006bea:	2300      	movs	r3, #0
 8006bec:	f018 0f01 	tst.w	r8, #1
 8006bf0:	d004      	beq.n	8006bfc <_strtod_l+0x5dc>
 8006bf2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006bf6:	f7f9 fcff 	bl	80005f8 <__aeabi_dmul>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006c00:	f109 0908 	add.w	r9, r9, #8
 8006c04:	d1f2      	bne.n	8006bec <_strtod_l+0x5cc>
 8006c06:	b10b      	cbz	r3, 8006c0c <_strtod_l+0x5ec>
 8006c08:	4682      	mov	sl, r0
 8006c0a:	468b      	mov	fp, r1
 8006c0c:	9b04      	ldr	r3, [sp, #16]
 8006c0e:	b1c3      	cbz	r3, 8006c42 <_strtod_l+0x622>
 8006c10:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006c14:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	4659      	mov	r1, fp
 8006c1c:	dd11      	ble.n	8006c42 <_strtod_l+0x622>
 8006c1e:	2b1f      	cmp	r3, #31
 8006c20:	f340 8124 	ble.w	8006e6c <_strtod_l+0x84c>
 8006c24:	2b34      	cmp	r3, #52	; 0x34
 8006c26:	bfde      	ittt	le
 8006c28:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006c2c:	f04f 33ff 	movle.w	r3, #4294967295
 8006c30:	fa03 f202 	lslle.w	r2, r3, r2
 8006c34:	f04f 0a00 	mov.w	sl, #0
 8006c38:	bfcc      	ite	gt
 8006c3a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006c3e:	ea02 0b01 	andle.w	fp, r2, r1
 8006c42:	2200      	movs	r2, #0
 8006c44:	2300      	movs	r3, #0
 8006c46:	4650      	mov	r0, sl
 8006c48:	4659      	mov	r1, fp
 8006c4a:	f7f9 ff3d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	d1a2      	bne.n	8006b98 <_strtod_l+0x578>
 8006c52:	9b07      	ldr	r3, [sp, #28]
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	9908      	ldr	r1, [sp, #32]
 8006c58:	462b      	mov	r3, r5
 8006c5a:	463a      	mov	r2, r7
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	f001 fe63 	bl	8008928 <__s2b>
 8006c62:	9007      	str	r0, [sp, #28]
 8006c64:	2800      	cmp	r0, #0
 8006c66:	f43f af1f 	beq.w	8006aa8 <_strtod_l+0x488>
 8006c6a:	9b05      	ldr	r3, [sp, #20]
 8006c6c:	1b9e      	subs	r6, r3, r6
 8006c6e:	9b06      	ldr	r3, [sp, #24]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	bfb4      	ite	lt
 8006c74:	4633      	movlt	r3, r6
 8006c76:	2300      	movge	r3, #0
 8006c78:	930c      	str	r3, [sp, #48]	; 0x30
 8006c7a:	9b06      	ldr	r3, [sp, #24]
 8006c7c:	2500      	movs	r5, #0
 8006c7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006c82:	9312      	str	r3, [sp, #72]	; 0x48
 8006c84:	462e      	mov	r6, r5
 8006c86:	9b07      	ldr	r3, [sp, #28]
 8006c88:	4620      	mov	r0, r4
 8006c8a:	6859      	ldr	r1, [r3, #4]
 8006c8c:	f001 fda4 	bl	80087d8 <_Balloc>
 8006c90:	9005      	str	r0, [sp, #20]
 8006c92:	2800      	cmp	r0, #0
 8006c94:	f43f af0c 	beq.w	8006ab0 <_strtod_l+0x490>
 8006c98:	9b07      	ldr	r3, [sp, #28]
 8006c9a:	691a      	ldr	r2, [r3, #16]
 8006c9c:	3202      	adds	r2, #2
 8006c9e:	f103 010c 	add.w	r1, r3, #12
 8006ca2:	0092      	lsls	r2, r2, #2
 8006ca4:	300c      	adds	r0, #12
 8006ca6:	f001 fd89 	bl	80087bc <memcpy>
 8006caa:	ec4b ab10 	vmov	d0, sl, fp
 8006cae:	aa1a      	add	r2, sp, #104	; 0x68
 8006cb0:	a919      	add	r1, sp, #100	; 0x64
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f002 f97e 	bl	8008fb4 <__d2b>
 8006cb8:	ec4b ab18 	vmov	d8, sl, fp
 8006cbc:	9018      	str	r0, [sp, #96]	; 0x60
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	f43f aef6 	beq.w	8006ab0 <_strtod_l+0x490>
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f001 fec8 	bl	8008a5c <__i2b>
 8006ccc:	4606      	mov	r6, r0
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	f43f aeee 	beq.w	8006ab0 <_strtod_l+0x490>
 8006cd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006cd6:	9904      	ldr	r1, [sp, #16]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	bfab      	itete	ge
 8006cdc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006cde:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006ce0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006ce2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006ce6:	bfac      	ite	ge
 8006ce8:	eb03 0902 	addge.w	r9, r3, r2
 8006cec:	1ad7      	sublt	r7, r2, r3
 8006cee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006cf0:	eba3 0801 	sub.w	r8, r3, r1
 8006cf4:	4490      	add	r8, r2
 8006cf6:	4ba1      	ldr	r3, [pc, #644]	; (8006f7c <_strtod_l+0x95c>)
 8006cf8:	f108 38ff 	add.w	r8, r8, #4294967295
 8006cfc:	4598      	cmp	r8, r3
 8006cfe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006d02:	f280 80c7 	bge.w	8006e94 <_strtod_l+0x874>
 8006d06:	eba3 0308 	sub.w	r3, r3, r8
 8006d0a:	2b1f      	cmp	r3, #31
 8006d0c:	eba2 0203 	sub.w	r2, r2, r3
 8006d10:	f04f 0101 	mov.w	r1, #1
 8006d14:	f300 80b1 	bgt.w	8006e7a <_strtod_l+0x85a>
 8006d18:	fa01 f303 	lsl.w	r3, r1, r3
 8006d1c:	930d      	str	r3, [sp, #52]	; 0x34
 8006d1e:	2300      	movs	r3, #0
 8006d20:	9308      	str	r3, [sp, #32]
 8006d22:	eb09 0802 	add.w	r8, r9, r2
 8006d26:	9b04      	ldr	r3, [sp, #16]
 8006d28:	45c1      	cmp	r9, r8
 8006d2a:	4417      	add	r7, r2
 8006d2c:	441f      	add	r7, r3
 8006d2e:	464b      	mov	r3, r9
 8006d30:	bfa8      	it	ge
 8006d32:	4643      	movge	r3, r8
 8006d34:	42bb      	cmp	r3, r7
 8006d36:	bfa8      	it	ge
 8006d38:	463b      	movge	r3, r7
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	bfc2      	ittt	gt
 8006d3e:	eba8 0803 	subgt.w	r8, r8, r3
 8006d42:	1aff      	subgt	r7, r7, r3
 8006d44:	eba9 0903 	subgt.w	r9, r9, r3
 8006d48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	dd17      	ble.n	8006d7e <_strtod_l+0x75e>
 8006d4e:	4631      	mov	r1, r6
 8006d50:	461a      	mov	r2, r3
 8006d52:	4620      	mov	r0, r4
 8006d54:	f001 ff42 	bl	8008bdc <__pow5mult>
 8006d58:	4606      	mov	r6, r0
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	f43f aea8 	beq.w	8006ab0 <_strtod_l+0x490>
 8006d60:	4601      	mov	r1, r0
 8006d62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006d64:	4620      	mov	r0, r4
 8006d66:	f001 fe8f 	bl	8008a88 <__multiply>
 8006d6a:	900b      	str	r0, [sp, #44]	; 0x2c
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	f43f ae9f 	beq.w	8006ab0 <_strtod_l+0x490>
 8006d72:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006d74:	4620      	mov	r0, r4
 8006d76:	f001 fd6f 	bl	8008858 <_Bfree>
 8006d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d7c:	9318      	str	r3, [sp, #96]	; 0x60
 8006d7e:	f1b8 0f00 	cmp.w	r8, #0
 8006d82:	f300 808c 	bgt.w	8006e9e <_strtod_l+0x87e>
 8006d86:	9b06      	ldr	r3, [sp, #24]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	dd08      	ble.n	8006d9e <_strtod_l+0x77e>
 8006d8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d8e:	9905      	ldr	r1, [sp, #20]
 8006d90:	4620      	mov	r0, r4
 8006d92:	f001 ff23 	bl	8008bdc <__pow5mult>
 8006d96:	9005      	str	r0, [sp, #20]
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	f43f ae89 	beq.w	8006ab0 <_strtod_l+0x490>
 8006d9e:	2f00      	cmp	r7, #0
 8006da0:	dd08      	ble.n	8006db4 <_strtod_l+0x794>
 8006da2:	9905      	ldr	r1, [sp, #20]
 8006da4:	463a      	mov	r2, r7
 8006da6:	4620      	mov	r0, r4
 8006da8:	f001 ff72 	bl	8008c90 <__lshift>
 8006dac:	9005      	str	r0, [sp, #20]
 8006dae:	2800      	cmp	r0, #0
 8006db0:	f43f ae7e 	beq.w	8006ab0 <_strtod_l+0x490>
 8006db4:	f1b9 0f00 	cmp.w	r9, #0
 8006db8:	dd08      	ble.n	8006dcc <_strtod_l+0x7ac>
 8006dba:	4631      	mov	r1, r6
 8006dbc:	464a      	mov	r2, r9
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f001 ff66 	bl	8008c90 <__lshift>
 8006dc4:	4606      	mov	r6, r0
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	f43f ae72 	beq.w	8006ab0 <_strtod_l+0x490>
 8006dcc:	9a05      	ldr	r2, [sp, #20]
 8006dce:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f001 ffe9 	bl	8008da8 <__mdiff>
 8006dd6:	4605      	mov	r5, r0
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	f43f ae69 	beq.w	8006ab0 <_strtod_l+0x490>
 8006dde:	68c3      	ldr	r3, [r0, #12]
 8006de0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006de2:	2300      	movs	r3, #0
 8006de4:	60c3      	str	r3, [r0, #12]
 8006de6:	4631      	mov	r1, r6
 8006de8:	f001 ffc2 	bl	8008d70 <__mcmp>
 8006dec:	2800      	cmp	r0, #0
 8006dee:	da60      	bge.n	8006eb2 <_strtod_l+0x892>
 8006df0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006df2:	ea53 030a 	orrs.w	r3, r3, sl
 8006df6:	f040 8082 	bne.w	8006efe <_strtod_l+0x8de>
 8006dfa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d17d      	bne.n	8006efe <_strtod_l+0x8de>
 8006e02:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006e06:	0d1b      	lsrs	r3, r3, #20
 8006e08:	051b      	lsls	r3, r3, #20
 8006e0a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006e0e:	d976      	bls.n	8006efe <_strtod_l+0x8de>
 8006e10:	696b      	ldr	r3, [r5, #20]
 8006e12:	b913      	cbnz	r3, 8006e1a <_strtod_l+0x7fa>
 8006e14:	692b      	ldr	r3, [r5, #16]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	dd71      	ble.n	8006efe <_strtod_l+0x8de>
 8006e1a:	4629      	mov	r1, r5
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f001 ff36 	bl	8008c90 <__lshift>
 8006e24:	4631      	mov	r1, r6
 8006e26:	4605      	mov	r5, r0
 8006e28:	f001 ffa2 	bl	8008d70 <__mcmp>
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	dd66      	ble.n	8006efe <_strtod_l+0x8de>
 8006e30:	9904      	ldr	r1, [sp, #16]
 8006e32:	4a53      	ldr	r2, [pc, #332]	; (8006f80 <_strtod_l+0x960>)
 8006e34:	465b      	mov	r3, fp
 8006e36:	2900      	cmp	r1, #0
 8006e38:	f000 8081 	beq.w	8006f3e <_strtod_l+0x91e>
 8006e3c:	ea02 010b 	and.w	r1, r2, fp
 8006e40:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006e44:	dc7b      	bgt.n	8006f3e <_strtod_l+0x91e>
 8006e46:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006e4a:	f77f aea9 	ble.w	8006ba0 <_strtod_l+0x580>
 8006e4e:	4b4d      	ldr	r3, [pc, #308]	; (8006f84 <_strtod_l+0x964>)
 8006e50:	4650      	mov	r0, sl
 8006e52:	4659      	mov	r1, fp
 8006e54:	2200      	movs	r2, #0
 8006e56:	f7f9 fbcf 	bl	80005f8 <__aeabi_dmul>
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	4303      	orrs	r3, r0
 8006e5e:	bf08      	it	eq
 8006e60:	2322      	moveq	r3, #34	; 0x22
 8006e62:	4682      	mov	sl, r0
 8006e64:	468b      	mov	fp, r1
 8006e66:	bf08      	it	eq
 8006e68:	6023      	streq	r3, [r4, #0]
 8006e6a:	e62b      	b.n	8006ac4 <_strtod_l+0x4a4>
 8006e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e70:	fa02 f303 	lsl.w	r3, r2, r3
 8006e74:	ea03 0a0a 	and.w	sl, r3, sl
 8006e78:	e6e3      	b.n	8006c42 <_strtod_l+0x622>
 8006e7a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006e7e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006e82:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006e86:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006e8a:	fa01 f308 	lsl.w	r3, r1, r8
 8006e8e:	9308      	str	r3, [sp, #32]
 8006e90:	910d      	str	r1, [sp, #52]	; 0x34
 8006e92:	e746      	b.n	8006d22 <_strtod_l+0x702>
 8006e94:	2300      	movs	r3, #0
 8006e96:	9308      	str	r3, [sp, #32]
 8006e98:	2301      	movs	r3, #1
 8006e9a:	930d      	str	r3, [sp, #52]	; 0x34
 8006e9c:	e741      	b.n	8006d22 <_strtod_l+0x702>
 8006e9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ea0:	4642      	mov	r2, r8
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	f001 fef4 	bl	8008c90 <__lshift>
 8006ea8:	9018      	str	r0, [sp, #96]	; 0x60
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	f47f af6b 	bne.w	8006d86 <_strtod_l+0x766>
 8006eb0:	e5fe      	b.n	8006ab0 <_strtod_l+0x490>
 8006eb2:	465f      	mov	r7, fp
 8006eb4:	d16e      	bne.n	8006f94 <_strtod_l+0x974>
 8006eb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006eb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ebc:	b342      	cbz	r2, 8006f10 <_strtod_l+0x8f0>
 8006ebe:	4a32      	ldr	r2, [pc, #200]	; (8006f88 <_strtod_l+0x968>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d128      	bne.n	8006f16 <_strtod_l+0x8f6>
 8006ec4:	9b04      	ldr	r3, [sp, #16]
 8006ec6:	4651      	mov	r1, sl
 8006ec8:	b1eb      	cbz	r3, 8006f06 <_strtod_l+0x8e6>
 8006eca:	4b2d      	ldr	r3, [pc, #180]	; (8006f80 <_strtod_l+0x960>)
 8006ecc:	403b      	ands	r3, r7
 8006ece:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed6:	d819      	bhi.n	8006f0c <_strtod_l+0x8ec>
 8006ed8:	0d1b      	lsrs	r3, r3, #20
 8006eda:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006ede:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee2:	4299      	cmp	r1, r3
 8006ee4:	d117      	bne.n	8006f16 <_strtod_l+0x8f6>
 8006ee6:	4b29      	ldr	r3, [pc, #164]	; (8006f8c <_strtod_l+0x96c>)
 8006ee8:	429f      	cmp	r7, r3
 8006eea:	d102      	bne.n	8006ef2 <_strtod_l+0x8d2>
 8006eec:	3101      	adds	r1, #1
 8006eee:	f43f addf 	beq.w	8006ab0 <_strtod_l+0x490>
 8006ef2:	4b23      	ldr	r3, [pc, #140]	; (8006f80 <_strtod_l+0x960>)
 8006ef4:	403b      	ands	r3, r7
 8006ef6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006efa:	f04f 0a00 	mov.w	sl, #0
 8006efe:	9b04      	ldr	r3, [sp, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1a4      	bne.n	8006e4e <_strtod_l+0x82e>
 8006f04:	e5de      	b.n	8006ac4 <_strtod_l+0x4a4>
 8006f06:	f04f 33ff 	mov.w	r3, #4294967295
 8006f0a:	e7ea      	b.n	8006ee2 <_strtod_l+0x8c2>
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	e7e8      	b.n	8006ee2 <_strtod_l+0x8c2>
 8006f10:	ea53 030a 	orrs.w	r3, r3, sl
 8006f14:	d08c      	beq.n	8006e30 <_strtod_l+0x810>
 8006f16:	9b08      	ldr	r3, [sp, #32]
 8006f18:	b1db      	cbz	r3, 8006f52 <_strtod_l+0x932>
 8006f1a:	423b      	tst	r3, r7
 8006f1c:	d0ef      	beq.n	8006efe <_strtod_l+0x8de>
 8006f1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f20:	9a04      	ldr	r2, [sp, #16]
 8006f22:	4650      	mov	r0, sl
 8006f24:	4659      	mov	r1, fp
 8006f26:	b1c3      	cbz	r3, 8006f5a <_strtod_l+0x93a>
 8006f28:	f7ff fb5b 	bl	80065e2 <sulp>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	460b      	mov	r3, r1
 8006f30:	ec51 0b18 	vmov	r0, r1, d8
 8006f34:	f7f9 f9aa 	bl	800028c <__adddf3>
 8006f38:	4682      	mov	sl, r0
 8006f3a:	468b      	mov	fp, r1
 8006f3c:	e7df      	b.n	8006efe <_strtod_l+0x8de>
 8006f3e:	4013      	ands	r3, r2
 8006f40:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006f44:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006f48:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006f4c:	f04f 3aff 	mov.w	sl, #4294967295
 8006f50:	e7d5      	b.n	8006efe <_strtod_l+0x8de>
 8006f52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f54:	ea13 0f0a 	tst.w	r3, sl
 8006f58:	e7e0      	b.n	8006f1c <_strtod_l+0x8fc>
 8006f5a:	f7ff fb42 	bl	80065e2 <sulp>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	460b      	mov	r3, r1
 8006f62:	ec51 0b18 	vmov	r0, r1, d8
 8006f66:	f7f9 f98f 	bl	8000288 <__aeabi_dsub>
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	4682      	mov	sl, r0
 8006f70:	468b      	mov	fp, r1
 8006f72:	f7f9 fda9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f76:	2800      	cmp	r0, #0
 8006f78:	d0c1      	beq.n	8006efe <_strtod_l+0x8de>
 8006f7a:	e611      	b.n	8006ba0 <_strtod_l+0x580>
 8006f7c:	fffffc02 	.word	0xfffffc02
 8006f80:	7ff00000 	.word	0x7ff00000
 8006f84:	39500000 	.word	0x39500000
 8006f88:	000fffff 	.word	0x000fffff
 8006f8c:	7fefffff 	.word	0x7fefffff
 8006f90:	0800a1a0 	.word	0x0800a1a0
 8006f94:	4631      	mov	r1, r6
 8006f96:	4628      	mov	r0, r5
 8006f98:	f002 f868 	bl	800906c <__ratio>
 8006f9c:	ec59 8b10 	vmov	r8, r9, d0
 8006fa0:	ee10 0a10 	vmov	r0, s0
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006faa:	4649      	mov	r1, r9
 8006fac:	f7f9 fda0 	bl	8000af0 <__aeabi_dcmple>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	d07a      	beq.n	80070aa <_strtod_l+0xa8a>
 8006fb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d04a      	beq.n	8007050 <_strtod_l+0xa30>
 8006fba:	4b95      	ldr	r3, [pc, #596]	; (8007210 <_strtod_l+0xbf0>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006fc2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007210 <_strtod_l+0xbf0>
 8006fc6:	f04f 0800 	mov.w	r8, #0
 8006fca:	4b92      	ldr	r3, [pc, #584]	; (8007214 <_strtod_l+0xbf4>)
 8006fcc:	403b      	ands	r3, r7
 8006fce:	930d      	str	r3, [sp, #52]	; 0x34
 8006fd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006fd2:	4b91      	ldr	r3, [pc, #580]	; (8007218 <_strtod_l+0xbf8>)
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	f040 80b0 	bne.w	800713a <_strtod_l+0xb1a>
 8006fda:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006fde:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006fe2:	ec4b ab10 	vmov	d0, sl, fp
 8006fe6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006fea:	f001 ff67 	bl	8008ebc <__ulp>
 8006fee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006ff2:	ec53 2b10 	vmov	r2, r3, d0
 8006ff6:	f7f9 faff 	bl	80005f8 <__aeabi_dmul>
 8006ffa:	4652      	mov	r2, sl
 8006ffc:	465b      	mov	r3, fp
 8006ffe:	f7f9 f945 	bl	800028c <__adddf3>
 8007002:	460b      	mov	r3, r1
 8007004:	4983      	ldr	r1, [pc, #524]	; (8007214 <_strtod_l+0xbf4>)
 8007006:	4a85      	ldr	r2, [pc, #532]	; (800721c <_strtod_l+0xbfc>)
 8007008:	4019      	ands	r1, r3
 800700a:	4291      	cmp	r1, r2
 800700c:	4682      	mov	sl, r0
 800700e:	d960      	bls.n	80070d2 <_strtod_l+0xab2>
 8007010:	ee18 3a90 	vmov	r3, s17
 8007014:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007018:	4293      	cmp	r3, r2
 800701a:	d104      	bne.n	8007026 <_strtod_l+0xa06>
 800701c:	ee18 3a10 	vmov	r3, s16
 8007020:	3301      	adds	r3, #1
 8007022:	f43f ad45 	beq.w	8006ab0 <_strtod_l+0x490>
 8007026:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007228 <_strtod_l+0xc08>
 800702a:	f04f 3aff 	mov.w	sl, #4294967295
 800702e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007030:	4620      	mov	r0, r4
 8007032:	f001 fc11 	bl	8008858 <_Bfree>
 8007036:	9905      	ldr	r1, [sp, #20]
 8007038:	4620      	mov	r0, r4
 800703a:	f001 fc0d 	bl	8008858 <_Bfree>
 800703e:	4631      	mov	r1, r6
 8007040:	4620      	mov	r0, r4
 8007042:	f001 fc09 	bl	8008858 <_Bfree>
 8007046:	4629      	mov	r1, r5
 8007048:	4620      	mov	r0, r4
 800704a:	f001 fc05 	bl	8008858 <_Bfree>
 800704e:	e61a      	b.n	8006c86 <_strtod_l+0x666>
 8007050:	f1ba 0f00 	cmp.w	sl, #0
 8007054:	d11b      	bne.n	800708e <_strtod_l+0xa6e>
 8007056:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800705a:	b9f3      	cbnz	r3, 800709a <_strtod_l+0xa7a>
 800705c:	4b6c      	ldr	r3, [pc, #432]	; (8007210 <_strtod_l+0xbf0>)
 800705e:	2200      	movs	r2, #0
 8007060:	4640      	mov	r0, r8
 8007062:	4649      	mov	r1, r9
 8007064:	f7f9 fd3a 	bl	8000adc <__aeabi_dcmplt>
 8007068:	b9d0      	cbnz	r0, 80070a0 <_strtod_l+0xa80>
 800706a:	4640      	mov	r0, r8
 800706c:	4649      	mov	r1, r9
 800706e:	4b6c      	ldr	r3, [pc, #432]	; (8007220 <_strtod_l+0xc00>)
 8007070:	2200      	movs	r2, #0
 8007072:	f7f9 fac1 	bl	80005f8 <__aeabi_dmul>
 8007076:	4680      	mov	r8, r0
 8007078:	4689      	mov	r9, r1
 800707a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800707e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007082:	9315      	str	r3, [sp, #84]	; 0x54
 8007084:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007088:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800708c:	e79d      	b.n	8006fca <_strtod_l+0x9aa>
 800708e:	f1ba 0f01 	cmp.w	sl, #1
 8007092:	d102      	bne.n	800709a <_strtod_l+0xa7a>
 8007094:	2f00      	cmp	r7, #0
 8007096:	f43f ad83 	beq.w	8006ba0 <_strtod_l+0x580>
 800709a:	4b62      	ldr	r3, [pc, #392]	; (8007224 <_strtod_l+0xc04>)
 800709c:	2200      	movs	r2, #0
 800709e:	e78e      	b.n	8006fbe <_strtod_l+0x99e>
 80070a0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007220 <_strtod_l+0xc00>
 80070a4:	f04f 0800 	mov.w	r8, #0
 80070a8:	e7e7      	b.n	800707a <_strtod_l+0xa5a>
 80070aa:	4b5d      	ldr	r3, [pc, #372]	; (8007220 <_strtod_l+0xc00>)
 80070ac:	4640      	mov	r0, r8
 80070ae:	4649      	mov	r1, r9
 80070b0:	2200      	movs	r2, #0
 80070b2:	f7f9 faa1 	bl	80005f8 <__aeabi_dmul>
 80070b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070b8:	4680      	mov	r8, r0
 80070ba:	4689      	mov	r9, r1
 80070bc:	b933      	cbnz	r3, 80070cc <_strtod_l+0xaac>
 80070be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070c2:	900e      	str	r0, [sp, #56]	; 0x38
 80070c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80070c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80070ca:	e7dd      	b.n	8007088 <_strtod_l+0xa68>
 80070cc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80070d0:	e7f9      	b.n	80070c6 <_strtod_l+0xaa6>
 80070d2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80070d6:	9b04      	ldr	r3, [sp, #16]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1a8      	bne.n	800702e <_strtod_l+0xa0e>
 80070dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80070e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070e2:	0d1b      	lsrs	r3, r3, #20
 80070e4:	051b      	lsls	r3, r3, #20
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d1a1      	bne.n	800702e <_strtod_l+0xa0e>
 80070ea:	4640      	mov	r0, r8
 80070ec:	4649      	mov	r1, r9
 80070ee:	f7f9 fef1 	bl	8000ed4 <__aeabi_d2lz>
 80070f2:	f7f9 fa53 	bl	800059c <__aeabi_l2d>
 80070f6:	4602      	mov	r2, r0
 80070f8:	460b      	mov	r3, r1
 80070fa:	4640      	mov	r0, r8
 80070fc:	4649      	mov	r1, r9
 80070fe:	f7f9 f8c3 	bl	8000288 <__aeabi_dsub>
 8007102:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007104:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007108:	ea43 030a 	orr.w	r3, r3, sl
 800710c:	4313      	orrs	r3, r2
 800710e:	4680      	mov	r8, r0
 8007110:	4689      	mov	r9, r1
 8007112:	d055      	beq.n	80071c0 <_strtod_l+0xba0>
 8007114:	a336      	add	r3, pc, #216	; (adr r3, 80071f0 <_strtod_l+0xbd0>)
 8007116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711a:	f7f9 fcdf 	bl	8000adc <__aeabi_dcmplt>
 800711e:	2800      	cmp	r0, #0
 8007120:	f47f acd0 	bne.w	8006ac4 <_strtod_l+0x4a4>
 8007124:	a334      	add	r3, pc, #208	; (adr r3, 80071f8 <_strtod_l+0xbd8>)
 8007126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712a:	4640      	mov	r0, r8
 800712c:	4649      	mov	r1, r9
 800712e:	f7f9 fcf3 	bl	8000b18 <__aeabi_dcmpgt>
 8007132:	2800      	cmp	r0, #0
 8007134:	f43f af7b 	beq.w	800702e <_strtod_l+0xa0e>
 8007138:	e4c4      	b.n	8006ac4 <_strtod_l+0x4a4>
 800713a:	9b04      	ldr	r3, [sp, #16]
 800713c:	b333      	cbz	r3, 800718c <_strtod_l+0xb6c>
 800713e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007140:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007144:	d822      	bhi.n	800718c <_strtod_l+0xb6c>
 8007146:	a32e      	add	r3, pc, #184	; (adr r3, 8007200 <_strtod_l+0xbe0>)
 8007148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714c:	4640      	mov	r0, r8
 800714e:	4649      	mov	r1, r9
 8007150:	f7f9 fcce 	bl	8000af0 <__aeabi_dcmple>
 8007154:	b1a0      	cbz	r0, 8007180 <_strtod_l+0xb60>
 8007156:	4649      	mov	r1, r9
 8007158:	4640      	mov	r0, r8
 800715a:	f7f9 fd25 	bl	8000ba8 <__aeabi_d2uiz>
 800715e:	2801      	cmp	r0, #1
 8007160:	bf38      	it	cc
 8007162:	2001      	movcc	r0, #1
 8007164:	f7f9 f9ce 	bl	8000504 <__aeabi_ui2d>
 8007168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800716a:	4680      	mov	r8, r0
 800716c:	4689      	mov	r9, r1
 800716e:	bb23      	cbnz	r3, 80071ba <_strtod_l+0xb9a>
 8007170:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007174:	9010      	str	r0, [sp, #64]	; 0x40
 8007176:	9311      	str	r3, [sp, #68]	; 0x44
 8007178:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800717c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007182:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007184:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007188:	1a9b      	subs	r3, r3, r2
 800718a:	9309      	str	r3, [sp, #36]	; 0x24
 800718c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007190:	eeb0 0a48 	vmov.f32	s0, s16
 8007194:	eef0 0a68 	vmov.f32	s1, s17
 8007198:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800719c:	f001 fe8e 	bl	8008ebc <__ulp>
 80071a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80071a4:	ec53 2b10 	vmov	r2, r3, d0
 80071a8:	f7f9 fa26 	bl	80005f8 <__aeabi_dmul>
 80071ac:	ec53 2b18 	vmov	r2, r3, d8
 80071b0:	f7f9 f86c 	bl	800028c <__adddf3>
 80071b4:	4682      	mov	sl, r0
 80071b6:	468b      	mov	fp, r1
 80071b8:	e78d      	b.n	80070d6 <_strtod_l+0xab6>
 80071ba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80071be:	e7db      	b.n	8007178 <_strtod_l+0xb58>
 80071c0:	a311      	add	r3, pc, #68	; (adr r3, 8007208 <_strtod_l+0xbe8>)
 80071c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c6:	f7f9 fc89 	bl	8000adc <__aeabi_dcmplt>
 80071ca:	e7b2      	b.n	8007132 <_strtod_l+0xb12>
 80071cc:	2300      	movs	r3, #0
 80071ce:	930a      	str	r3, [sp, #40]	; 0x28
 80071d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80071d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071d4:	6013      	str	r3, [r2, #0]
 80071d6:	f7ff ba6b 	b.w	80066b0 <_strtod_l+0x90>
 80071da:	2a65      	cmp	r2, #101	; 0x65
 80071dc:	f43f ab5f 	beq.w	800689e <_strtod_l+0x27e>
 80071e0:	2a45      	cmp	r2, #69	; 0x45
 80071e2:	f43f ab5c 	beq.w	800689e <_strtod_l+0x27e>
 80071e6:	2301      	movs	r3, #1
 80071e8:	f7ff bb94 	b.w	8006914 <_strtod_l+0x2f4>
 80071ec:	f3af 8000 	nop.w
 80071f0:	94a03595 	.word	0x94a03595
 80071f4:	3fdfffff 	.word	0x3fdfffff
 80071f8:	35afe535 	.word	0x35afe535
 80071fc:	3fe00000 	.word	0x3fe00000
 8007200:	ffc00000 	.word	0xffc00000
 8007204:	41dfffff 	.word	0x41dfffff
 8007208:	94a03595 	.word	0x94a03595
 800720c:	3fcfffff 	.word	0x3fcfffff
 8007210:	3ff00000 	.word	0x3ff00000
 8007214:	7ff00000 	.word	0x7ff00000
 8007218:	7fe00000 	.word	0x7fe00000
 800721c:	7c9fffff 	.word	0x7c9fffff
 8007220:	3fe00000 	.word	0x3fe00000
 8007224:	bff00000 	.word	0xbff00000
 8007228:	7fefffff 	.word	0x7fefffff

0800722c <_strtod_r>:
 800722c:	4b01      	ldr	r3, [pc, #4]	; (8007234 <_strtod_r+0x8>)
 800722e:	f7ff b9f7 	b.w	8006620 <_strtod_l>
 8007232:	bf00      	nop
 8007234:	20000074 	.word	0x20000074

08007238 <_strtol_l.constprop.0>:
 8007238:	2b01      	cmp	r3, #1
 800723a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800723e:	d001      	beq.n	8007244 <_strtol_l.constprop.0+0xc>
 8007240:	2b24      	cmp	r3, #36	; 0x24
 8007242:	d906      	bls.n	8007252 <_strtol_l.constprop.0+0x1a>
 8007244:	f7fe fab8 	bl	80057b8 <__errno>
 8007248:	2316      	movs	r3, #22
 800724a:	6003      	str	r3, [r0, #0]
 800724c:	2000      	movs	r0, #0
 800724e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007252:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007338 <_strtol_l.constprop.0+0x100>
 8007256:	460d      	mov	r5, r1
 8007258:	462e      	mov	r6, r5
 800725a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800725e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007262:	f017 0708 	ands.w	r7, r7, #8
 8007266:	d1f7      	bne.n	8007258 <_strtol_l.constprop.0+0x20>
 8007268:	2c2d      	cmp	r4, #45	; 0x2d
 800726a:	d132      	bne.n	80072d2 <_strtol_l.constprop.0+0x9a>
 800726c:	782c      	ldrb	r4, [r5, #0]
 800726e:	2701      	movs	r7, #1
 8007270:	1cb5      	adds	r5, r6, #2
 8007272:	2b00      	cmp	r3, #0
 8007274:	d05b      	beq.n	800732e <_strtol_l.constprop.0+0xf6>
 8007276:	2b10      	cmp	r3, #16
 8007278:	d109      	bne.n	800728e <_strtol_l.constprop.0+0x56>
 800727a:	2c30      	cmp	r4, #48	; 0x30
 800727c:	d107      	bne.n	800728e <_strtol_l.constprop.0+0x56>
 800727e:	782c      	ldrb	r4, [r5, #0]
 8007280:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007284:	2c58      	cmp	r4, #88	; 0x58
 8007286:	d14d      	bne.n	8007324 <_strtol_l.constprop.0+0xec>
 8007288:	786c      	ldrb	r4, [r5, #1]
 800728a:	2310      	movs	r3, #16
 800728c:	3502      	adds	r5, #2
 800728e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007292:	f108 38ff 	add.w	r8, r8, #4294967295
 8007296:	f04f 0c00 	mov.w	ip, #0
 800729a:	fbb8 f9f3 	udiv	r9, r8, r3
 800729e:	4666      	mov	r6, ip
 80072a0:	fb03 8a19 	mls	sl, r3, r9, r8
 80072a4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80072a8:	f1be 0f09 	cmp.w	lr, #9
 80072ac:	d816      	bhi.n	80072dc <_strtol_l.constprop.0+0xa4>
 80072ae:	4674      	mov	r4, lr
 80072b0:	42a3      	cmp	r3, r4
 80072b2:	dd24      	ble.n	80072fe <_strtol_l.constprop.0+0xc6>
 80072b4:	f1bc 0f00 	cmp.w	ip, #0
 80072b8:	db1e      	blt.n	80072f8 <_strtol_l.constprop.0+0xc0>
 80072ba:	45b1      	cmp	r9, r6
 80072bc:	d31c      	bcc.n	80072f8 <_strtol_l.constprop.0+0xc0>
 80072be:	d101      	bne.n	80072c4 <_strtol_l.constprop.0+0x8c>
 80072c0:	45a2      	cmp	sl, r4
 80072c2:	db19      	blt.n	80072f8 <_strtol_l.constprop.0+0xc0>
 80072c4:	fb06 4603 	mla	r6, r6, r3, r4
 80072c8:	f04f 0c01 	mov.w	ip, #1
 80072cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072d0:	e7e8      	b.n	80072a4 <_strtol_l.constprop.0+0x6c>
 80072d2:	2c2b      	cmp	r4, #43	; 0x2b
 80072d4:	bf04      	itt	eq
 80072d6:	782c      	ldrbeq	r4, [r5, #0]
 80072d8:	1cb5      	addeq	r5, r6, #2
 80072da:	e7ca      	b.n	8007272 <_strtol_l.constprop.0+0x3a>
 80072dc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80072e0:	f1be 0f19 	cmp.w	lr, #25
 80072e4:	d801      	bhi.n	80072ea <_strtol_l.constprop.0+0xb2>
 80072e6:	3c37      	subs	r4, #55	; 0x37
 80072e8:	e7e2      	b.n	80072b0 <_strtol_l.constprop.0+0x78>
 80072ea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80072ee:	f1be 0f19 	cmp.w	lr, #25
 80072f2:	d804      	bhi.n	80072fe <_strtol_l.constprop.0+0xc6>
 80072f4:	3c57      	subs	r4, #87	; 0x57
 80072f6:	e7db      	b.n	80072b0 <_strtol_l.constprop.0+0x78>
 80072f8:	f04f 3cff 	mov.w	ip, #4294967295
 80072fc:	e7e6      	b.n	80072cc <_strtol_l.constprop.0+0x94>
 80072fe:	f1bc 0f00 	cmp.w	ip, #0
 8007302:	da05      	bge.n	8007310 <_strtol_l.constprop.0+0xd8>
 8007304:	2322      	movs	r3, #34	; 0x22
 8007306:	6003      	str	r3, [r0, #0]
 8007308:	4646      	mov	r6, r8
 800730a:	b942      	cbnz	r2, 800731e <_strtol_l.constprop.0+0xe6>
 800730c:	4630      	mov	r0, r6
 800730e:	e79e      	b.n	800724e <_strtol_l.constprop.0+0x16>
 8007310:	b107      	cbz	r7, 8007314 <_strtol_l.constprop.0+0xdc>
 8007312:	4276      	negs	r6, r6
 8007314:	2a00      	cmp	r2, #0
 8007316:	d0f9      	beq.n	800730c <_strtol_l.constprop.0+0xd4>
 8007318:	f1bc 0f00 	cmp.w	ip, #0
 800731c:	d000      	beq.n	8007320 <_strtol_l.constprop.0+0xe8>
 800731e:	1e69      	subs	r1, r5, #1
 8007320:	6011      	str	r1, [r2, #0]
 8007322:	e7f3      	b.n	800730c <_strtol_l.constprop.0+0xd4>
 8007324:	2430      	movs	r4, #48	; 0x30
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1b1      	bne.n	800728e <_strtol_l.constprop.0+0x56>
 800732a:	2308      	movs	r3, #8
 800732c:	e7af      	b.n	800728e <_strtol_l.constprop.0+0x56>
 800732e:	2c30      	cmp	r4, #48	; 0x30
 8007330:	d0a5      	beq.n	800727e <_strtol_l.constprop.0+0x46>
 8007332:	230a      	movs	r3, #10
 8007334:	e7ab      	b.n	800728e <_strtol_l.constprop.0+0x56>
 8007336:	bf00      	nop
 8007338:	0800a1c9 	.word	0x0800a1c9

0800733c <_strtol_r>:
 800733c:	f7ff bf7c 	b.w	8007238 <_strtol_l.constprop.0>

08007340 <_write_r>:
 8007340:	b538      	push	{r3, r4, r5, lr}
 8007342:	4d07      	ldr	r5, [pc, #28]	; (8007360 <_write_r+0x20>)
 8007344:	4604      	mov	r4, r0
 8007346:	4608      	mov	r0, r1
 8007348:	4611      	mov	r1, r2
 800734a:	2200      	movs	r2, #0
 800734c:	602a      	str	r2, [r5, #0]
 800734e:	461a      	mov	r2, r3
 8007350:	f7fa ffdd 	bl	800230e <_write>
 8007354:	1c43      	adds	r3, r0, #1
 8007356:	d102      	bne.n	800735e <_write_r+0x1e>
 8007358:	682b      	ldr	r3, [r5, #0]
 800735a:	b103      	cbz	r3, 800735e <_write_r+0x1e>
 800735c:	6023      	str	r3, [r4, #0]
 800735e:	bd38      	pop	{r3, r4, r5, pc}
 8007360:	2000085c 	.word	0x2000085c

08007364 <_close_r>:
 8007364:	b538      	push	{r3, r4, r5, lr}
 8007366:	4d06      	ldr	r5, [pc, #24]	; (8007380 <_close_r+0x1c>)
 8007368:	2300      	movs	r3, #0
 800736a:	4604      	mov	r4, r0
 800736c:	4608      	mov	r0, r1
 800736e:	602b      	str	r3, [r5, #0]
 8007370:	f7fa ffe9 	bl	8002346 <_close>
 8007374:	1c43      	adds	r3, r0, #1
 8007376:	d102      	bne.n	800737e <_close_r+0x1a>
 8007378:	682b      	ldr	r3, [r5, #0]
 800737a:	b103      	cbz	r3, 800737e <_close_r+0x1a>
 800737c:	6023      	str	r3, [r4, #0]
 800737e:	bd38      	pop	{r3, r4, r5, pc}
 8007380:	2000085c 	.word	0x2000085c

08007384 <quorem>:
 8007384:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007388:	6903      	ldr	r3, [r0, #16]
 800738a:	690c      	ldr	r4, [r1, #16]
 800738c:	42a3      	cmp	r3, r4
 800738e:	4607      	mov	r7, r0
 8007390:	f2c0 8081 	blt.w	8007496 <quorem+0x112>
 8007394:	3c01      	subs	r4, #1
 8007396:	f101 0814 	add.w	r8, r1, #20
 800739a:	f100 0514 	add.w	r5, r0, #20
 800739e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073a2:	9301      	str	r3, [sp, #4]
 80073a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80073a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073ac:	3301      	adds	r3, #1
 80073ae:	429a      	cmp	r2, r3
 80073b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80073b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80073b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80073bc:	d331      	bcc.n	8007422 <quorem+0x9e>
 80073be:	f04f 0e00 	mov.w	lr, #0
 80073c2:	4640      	mov	r0, r8
 80073c4:	46ac      	mov	ip, r5
 80073c6:	46f2      	mov	sl, lr
 80073c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80073cc:	b293      	uxth	r3, r2
 80073ce:	fb06 e303 	mla	r3, r6, r3, lr
 80073d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	ebaa 0303 	sub.w	r3, sl, r3
 80073dc:	f8dc a000 	ldr.w	sl, [ip]
 80073e0:	0c12      	lsrs	r2, r2, #16
 80073e2:	fa13 f38a 	uxtah	r3, r3, sl
 80073e6:	fb06 e202 	mla	r2, r6, r2, lr
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	9b00      	ldr	r3, [sp, #0]
 80073ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80073f2:	b292      	uxth	r2, r2
 80073f4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80073f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073fc:	f8bd 3000 	ldrh.w	r3, [sp]
 8007400:	4581      	cmp	r9, r0
 8007402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007406:	f84c 3b04 	str.w	r3, [ip], #4
 800740a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800740e:	d2db      	bcs.n	80073c8 <quorem+0x44>
 8007410:	f855 300b 	ldr.w	r3, [r5, fp]
 8007414:	b92b      	cbnz	r3, 8007422 <quorem+0x9e>
 8007416:	9b01      	ldr	r3, [sp, #4]
 8007418:	3b04      	subs	r3, #4
 800741a:	429d      	cmp	r5, r3
 800741c:	461a      	mov	r2, r3
 800741e:	d32e      	bcc.n	800747e <quorem+0xfa>
 8007420:	613c      	str	r4, [r7, #16]
 8007422:	4638      	mov	r0, r7
 8007424:	f001 fca4 	bl	8008d70 <__mcmp>
 8007428:	2800      	cmp	r0, #0
 800742a:	db24      	blt.n	8007476 <quorem+0xf2>
 800742c:	3601      	adds	r6, #1
 800742e:	4628      	mov	r0, r5
 8007430:	f04f 0c00 	mov.w	ip, #0
 8007434:	f858 2b04 	ldr.w	r2, [r8], #4
 8007438:	f8d0 e000 	ldr.w	lr, [r0]
 800743c:	b293      	uxth	r3, r2
 800743e:	ebac 0303 	sub.w	r3, ip, r3
 8007442:	0c12      	lsrs	r2, r2, #16
 8007444:	fa13 f38e 	uxtah	r3, r3, lr
 8007448:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800744c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007450:	b29b      	uxth	r3, r3
 8007452:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007456:	45c1      	cmp	r9, r8
 8007458:	f840 3b04 	str.w	r3, [r0], #4
 800745c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007460:	d2e8      	bcs.n	8007434 <quorem+0xb0>
 8007462:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007466:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800746a:	b922      	cbnz	r2, 8007476 <quorem+0xf2>
 800746c:	3b04      	subs	r3, #4
 800746e:	429d      	cmp	r5, r3
 8007470:	461a      	mov	r2, r3
 8007472:	d30a      	bcc.n	800748a <quorem+0x106>
 8007474:	613c      	str	r4, [r7, #16]
 8007476:	4630      	mov	r0, r6
 8007478:	b003      	add	sp, #12
 800747a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800747e:	6812      	ldr	r2, [r2, #0]
 8007480:	3b04      	subs	r3, #4
 8007482:	2a00      	cmp	r2, #0
 8007484:	d1cc      	bne.n	8007420 <quorem+0x9c>
 8007486:	3c01      	subs	r4, #1
 8007488:	e7c7      	b.n	800741a <quorem+0x96>
 800748a:	6812      	ldr	r2, [r2, #0]
 800748c:	3b04      	subs	r3, #4
 800748e:	2a00      	cmp	r2, #0
 8007490:	d1f0      	bne.n	8007474 <quorem+0xf0>
 8007492:	3c01      	subs	r4, #1
 8007494:	e7eb      	b.n	800746e <quorem+0xea>
 8007496:	2000      	movs	r0, #0
 8007498:	e7ee      	b.n	8007478 <quorem+0xf4>
 800749a:	0000      	movs	r0, r0
 800749c:	0000      	movs	r0, r0
	...

080074a0 <_dtoa_r>:
 80074a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a4:	ed2d 8b04 	vpush	{d8-d9}
 80074a8:	ec57 6b10 	vmov	r6, r7, d0
 80074ac:	b093      	sub	sp, #76	; 0x4c
 80074ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80074b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80074b4:	9106      	str	r1, [sp, #24]
 80074b6:	ee10 aa10 	vmov	sl, s0
 80074ba:	4604      	mov	r4, r0
 80074bc:	9209      	str	r2, [sp, #36]	; 0x24
 80074be:	930c      	str	r3, [sp, #48]	; 0x30
 80074c0:	46bb      	mov	fp, r7
 80074c2:	b975      	cbnz	r5, 80074e2 <_dtoa_r+0x42>
 80074c4:	2010      	movs	r0, #16
 80074c6:	f001 f95f 	bl	8008788 <malloc>
 80074ca:	4602      	mov	r2, r0
 80074cc:	6260      	str	r0, [r4, #36]	; 0x24
 80074ce:	b920      	cbnz	r0, 80074da <_dtoa_r+0x3a>
 80074d0:	4ba7      	ldr	r3, [pc, #668]	; (8007770 <_dtoa_r+0x2d0>)
 80074d2:	21ea      	movs	r1, #234	; 0xea
 80074d4:	48a7      	ldr	r0, [pc, #668]	; (8007774 <_dtoa_r+0x2d4>)
 80074d6:	f002 f8e1 	bl	800969c <__assert_func>
 80074da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80074de:	6005      	str	r5, [r0, #0]
 80074e0:	60c5      	str	r5, [r0, #12]
 80074e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074e4:	6819      	ldr	r1, [r3, #0]
 80074e6:	b151      	cbz	r1, 80074fe <_dtoa_r+0x5e>
 80074e8:	685a      	ldr	r2, [r3, #4]
 80074ea:	604a      	str	r2, [r1, #4]
 80074ec:	2301      	movs	r3, #1
 80074ee:	4093      	lsls	r3, r2
 80074f0:	608b      	str	r3, [r1, #8]
 80074f2:	4620      	mov	r0, r4
 80074f4:	f001 f9b0 	bl	8008858 <_Bfree>
 80074f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074fa:	2200      	movs	r2, #0
 80074fc:	601a      	str	r2, [r3, #0]
 80074fe:	1e3b      	subs	r3, r7, #0
 8007500:	bfaa      	itet	ge
 8007502:	2300      	movge	r3, #0
 8007504:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007508:	f8c8 3000 	strge.w	r3, [r8]
 800750c:	4b9a      	ldr	r3, [pc, #616]	; (8007778 <_dtoa_r+0x2d8>)
 800750e:	bfbc      	itt	lt
 8007510:	2201      	movlt	r2, #1
 8007512:	f8c8 2000 	strlt.w	r2, [r8]
 8007516:	ea33 030b 	bics.w	r3, r3, fp
 800751a:	d11b      	bne.n	8007554 <_dtoa_r+0xb4>
 800751c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800751e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007522:	6013      	str	r3, [r2, #0]
 8007524:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007528:	4333      	orrs	r3, r6
 800752a:	f000 8592 	beq.w	8008052 <_dtoa_r+0xbb2>
 800752e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007530:	b963      	cbnz	r3, 800754c <_dtoa_r+0xac>
 8007532:	4b92      	ldr	r3, [pc, #584]	; (800777c <_dtoa_r+0x2dc>)
 8007534:	e022      	b.n	800757c <_dtoa_r+0xdc>
 8007536:	4b92      	ldr	r3, [pc, #584]	; (8007780 <_dtoa_r+0x2e0>)
 8007538:	9301      	str	r3, [sp, #4]
 800753a:	3308      	adds	r3, #8
 800753c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800753e:	6013      	str	r3, [r2, #0]
 8007540:	9801      	ldr	r0, [sp, #4]
 8007542:	b013      	add	sp, #76	; 0x4c
 8007544:	ecbd 8b04 	vpop	{d8-d9}
 8007548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800754c:	4b8b      	ldr	r3, [pc, #556]	; (800777c <_dtoa_r+0x2dc>)
 800754e:	9301      	str	r3, [sp, #4]
 8007550:	3303      	adds	r3, #3
 8007552:	e7f3      	b.n	800753c <_dtoa_r+0x9c>
 8007554:	2200      	movs	r2, #0
 8007556:	2300      	movs	r3, #0
 8007558:	4650      	mov	r0, sl
 800755a:	4659      	mov	r1, fp
 800755c:	f7f9 fab4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007560:	ec4b ab19 	vmov	d9, sl, fp
 8007564:	4680      	mov	r8, r0
 8007566:	b158      	cbz	r0, 8007580 <_dtoa_r+0xe0>
 8007568:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800756a:	2301      	movs	r3, #1
 800756c:	6013      	str	r3, [r2, #0]
 800756e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 856b 	beq.w	800804c <_dtoa_r+0xbac>
 8007576:	4883      	ldr	r0, [pc, #524]	; (8007784 <_dtoa_r+0x2e4>)
 8007578:	6018      	str	r0, [r3, #0]
 800757a:	1e43      	subs	r3, r0, #1
 800757c:	9301      	str	r3, [sp, #4]
 800757e:	e7df      	b.n	8007540 <_dtoa_r+0xa0>
 8007580:	ec4b ab10 	vmov	d0, sl, fp
 8007584:	aa10      	add	r2, sp, #64	; 0x40
 8007586:	a911      	add	r1, sp, #68	; 0x44
 8007588:	4620      	mov	r0, r4
 800758a:	f001 fd13 	bl	8008fb4 <__d2b>
 800758e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007592:	ee08 0a10 	vmov	s16, r0
 8007596:	2d00      	cmp	r5, #0
 8007598:	f000 8084 	beq.w	80076a4 <_dtoa_r+0x204>
 800759c:	ee19 3a90 	vmov	r3, s19
 80075a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80075a8:	4656      	mov	r6, sl
 80075aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80075ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80075b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80075b6:	4b74      	ldr	r3, [pc, #464]	; (8007788 <_dtoa_r+0x2e8>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	4630      	mov	r0, r6
 80075bc:	4639      	mov	r1, r7
 80075be:	f7f8 fe63 	bl	8000288 <__aeabi_dsub>
 80075c2:	a365      	add	r3, pc, #404	; (adr r3, 8007758 <_dtoa_r+0x2b8>)
 80075c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c8:	f7f9 f816 	bl	80005f8 <__aeabi_dmul>
 80075cc:	a364      	add	r3, pc, #400	; (adr r3, 8007760 <_dtoa_r+0x2c0>)
 80075ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d2:	f7f8 fe5b 	bl	800028c <__adddf3>
 80075d6:	4606      	mov	r6, r0
 80075d8:	4628      	mov	r0, r5
 80075da:	460f      	mov	r7, r1
 80075dc:	f7f8 ffa2 	bl	8000524 <__aeabi_i2d>
 80075e0:	a361      	add	r3, pc, #388	; (adr r3, 8007768 <_dtoa_r+0x2c8>)
 80075e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e6:	f7f9 f807 	bl	80005f8 <__aeabi_dmul>
 80075ea:	4602      	mov	r2, r0
 80075ec:	460b      	mov	r3, r1
 80075ee:	4630      	mov	r0, r6
 80075f0:	4639      	mov	r1, r7
 80075f2:	f7f8 fe4b 	bl	800028c <__adddf3>
 80075f6:	4606      	mov	r6, r0
 80075f8:	460f      	mov	r7, r1
 80075fa:	f7f9 faad 	bl	8000b58 <__aeabi_d2iz>
 80075fe:	2200      	movs	r2, #0
 8007600:	9000      	str	r0, [sp, #0]
 8007602:	2300      	movs	r3, #0
 8007604:	4630      	mov	r0, r6
 8007606:	4639      	mov	r1, r7
 8007608:	f7f9 fa68 	bl	8000adc <__aeabi_dcmplt>
 800760c:	b150      	cbz	r0, 8007624 <_dtoa_r+0x184>
 800760e:	9800      	ldr	r0, [sp, #0]
 8007610:	f7f8 ff88 	bl	8000524 <__aeabi_i2d>
 8007614:	4632      	mov	r2, r6
 8007616:	463b      	mov	r3, r7
 8007618:	f7f9 fa56 	bl	8000ac8 <__aeabi_dcmpeq>
 800761c:	b910      	cbnz	r0, 8007624 <_dtoa_r+0x184>
 800761e:	9b00      	ldr	r3, [sp, #0]
 8007620:	3b01      	subs	r3, #1
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	9b00      	ldr	r3, [sp, #0]
 8007626:	2b16      	cmp	r3, #22
 8007628:	d85a      	bhi.n	80076e0 <_dtoa_r+0x240>
 800762a:	9a00      	ldr	r2, [sp, #0]
 800762c:	4b57      	ldr	r3, [pc, #348]	; (800778c <_dtoa_r+0x2ec>)
 800762e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007636:	ec51 0b19 	vmov	r0, r1, d9
 800763a:	f7f9 fa4f 	bl	8000adc <__aeabi_dcmplt>
 800763e:	2800      	cmp	r0, #0
 8007640:	d050      	beq.n	80076e4 <_dtoa_r+0x244>
 8007642:	9b00      	ldr	r3, [sp, #0]
 8007644:	3b01      	subs	r3, #1
 8007646:	9300      	str	r3, [sp, #0]
 8007648:	2300      	movs	r3, #0
 800764a:	930b      	str	r3, [sp, #44]	; 0x2c
 800764c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800764e:	1b5d      	subs	r5, r3, r5
 8007650:	1e6b      	subs	r3, r5, #1
 8007652:	9305      	str	r3, [sp, #20]
 8007654:	bf45      	ittet	mi
 8007656:	f1c5 0301 	rsbmi	r3, r5, #1
 800765a:	9304      	strmi	r3, [sp, #16]
 800765c:	2300      	movpl	r3, #0
 800765e:	2300      	movmi	r3, #0
 8007660:	bf4c      	ite	mi
 8007662:	9305      	strmi	r3, [sp, #20]
 8007664:	9304      	strpl	r3, [sp, #16]
 8007666:	9b00      	ldr	r3, [sp, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	db3d      	blt.n	80076e8 <_dtoa_r+0x248>
 800766c:	9b05      	ldr	r3, [sp, #20]
 800766e:	9a00      	ldr	r2, [sp, #0]
 8007670:	920a      	str	r2, [sp, #40]	; 0x28
 8007672:	4413      	add	r3, r2
 8007674:	9305      	str	r3, [sp, #20]
 8007676:	2300      	movs	r3, #0
 8007678:	9307      	str	r3, [sp, #28]
 800767a:	9b06      	ldr	r3, [sp, #24]
 800767c:	2b09      	cmp	r3, #9
 800767e:	f200 8089 	bhi.w	8007794 <_dtoa_r+0x2f4>
 8007682:	2b05      	cmp	r3, #5
 8007684:	bfc4      	itt	gt
 8007686:	3b04      	subgt	r3, #4
 8007688:	9306      	strgt	r3, [sp, #24]
 800768a:	9b06      	ldr	r3, [sp, #24]
 800768c:	f1a3 0302 	sub.w	r3, r3, #2
 8007690:	bfcc      	ite	gt
 8007692:	2500      	movgt	r5, #0
 8007694:	2501      	movle	r5, #1
 8007696:	2b03      	cmp	r3, #3
 8007698:	f200 8087 	bhi.w	80077aa <_dtoa_r+0x30a>
 800769c:	e8df f003 	tbb	[pc, r3]
 80076a0:	59383a2d 	.word	0x59383a2d
 80076a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80076a8:	441d      	add	r5, r3
 80076aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80076ae:	2b20      	cmp	r3, #32
 80076b0:	bfc1      	itttt	gt
 80076b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80076b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80076ba:	fa0b f303 	lslgt.w	r3, fp, r3
 80076be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80076c2:	bfda      	itte	le
 80076c4:	f1c3 0320 	rsble	r3, r3, #32
 80076c8:	fa06 f003 	lslle.w	r0, r6, r3
 80076cc:	4318      	orrgt	r0, r3
 80076ce:	f7f8 ff19 	bl	8000504 <__aeabi_ui2d>
 80076d2:	2301      	movs	r3, #1
 80076d4:	4606      	mov	r6, r0
 80076d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80076da:	3d01      	subs	r5, #1
 80076dc:	930e      	str	r3, [sp, #56]	; 0x38
 80076de:	e76a      	b.n	80075b6 <_dtoa_r+0x116>
 80076e0:	2301      	movs	r3, #1
 80076e2:	e7b2      	b.n	800764a <_dtoa_r+0x1aa>
 80076e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80076e6:	e7b1      	b.n	800764c <_dtoa_r+0x1ac>
 80076e8:	9b04      	ldr	r3, [sp, #16]
 80076ea:	9a00      	ldr	r2, [sp, #0]
 80076ec:	1a9b      	subs	r3, r3, r2
 80076ee:	9304      	str	r3, [sp, #16]
 80076f0:	4253      	negs	r3, r2
 80076f2:	9307      	str	r3, [sp, #28]
 80076f4:	2300      	movs	r3, #0
 80076f6:	930a      	str	r3, [sp, #40]	; 0x28
 80076f8:	e7bf      	b.n	800767a <_dtoa_r+0x1da>
 80076fa:	2300      	movs	r3, #0
 80076fc:	9308      	str	r3, [sp, #32]
 80076fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007700:	2b00      	cmp	r3, #0
 8007702:	dc55      	bgt.n	80077b0 <_dtoa_r+0x310>
 8007704:	2301      	movs	r3, #1
 8007706:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800770a:	461a      	mov	r2, r3
 800770c:	9209      	str	r2, [sp, #36]	; 0x24
 800770e:	e00c      	b.n	800772a <_dtoa_r+0x28a>
 8007710:	2301      	movs	r3, #1
 8007712:	e7f3      	b.n	80076fc <_dtoa_r+0x25c>
 8007714:	2300      	movs	r3, #0
 8007716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007718:	9308      	str	r3, [sp, #32]
 800771a:	9b00      	ldr	r3, [sp, #0]
 800771c:	4413      	add	r3, r2
 800771e:	9302      	str	r3, [sp, #8]
 8007720:	3301      	adds	r3, #1
 8007722:	2b01      	cmp	r3, #1
 8007724:	9303      	str	r3, [sp, #12]
 8007726:	bfb8      	it	lt
 8007728:	2301      	movlt	r3, #1
 800772a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800772c:	2200      	movs	r2, #0
 800772e:	6042      	str	r2, [r0, #4]
 8007730:	2204      	movs	r2, #4
 8007732:	f102 0614 	add.w	r6, r2, #20
 8007736:	429e      	cmp	r6, r3
 8007738:	6841      	ldr	r1, [r0, #4]
 800773a:	d93d      	bls.n	80077b8 <_dtoa_r+0x318>
 800773c:	4620      	mov	r0, r4
 800773e:	f001 f84b 	bl	80087d8 <_Balloc>
 8007742:	9001      	str	r0, [sp, #4]
 8007744:	2800      	cmp	r0, #0
 8007746:	d13b      	bne.n	80077c0 <_dtoa_r+0x320>
 8007748:	4b11      	ldr	r3, [pc, #68]	; (8007790 <_dtoa_r+0x2f0>)
 800774a:	4602      	mov	r2, r0
 800774c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007750:	e6c0      	b.n	80074d4 <_dtoa_r+0x34>
 8007752:	2301      	movs	r3, #1
 8007754:	e7df      	b.n	8007716 <_dtoa_r+0x276>
 8007756:	bf00      	nop
 8007758:	636f4361 	.word	0x636f4361
 800775c:	3fd287a7 	.word	0x3fd287a7
 8007760:	8b60c8b3 	.word	0x8b60c8b3
 8007764:	3fc68a28 	.word	0x3fc68a28
 8007768:	509f79fb 	.word	0x509f79fb
 800776c:	3fd34413 	.word	0x3fd34413
 8007770:	0800a2d6 	.word	0x0800a2d6
 8007774:	0800a2ed 	.word	0x0800a2ed
 8007778:	7ff00000 	.word	0x7ff00000
 800777c:	0800a2d2 	.word	0x0800a2d2
 8007780:	0800a2c9 	.word	0x0800a2c9
 8007784:	0800a14d 	.word	0x0800a14d
 8007788:	3ff80000 	.word	0x3ff80000
 800778c:	0800a458 	.word	0x0800a458
 8007790:	0800a348 	.word	0x0800a348
 8007794:	2501      	movs	r5, #1
 8007796:	2300      	movs	r3, #0
 8007798:	9306      	str	r3, [sp, #24]
 800779a:	9508      	str	r5, [sp, #32]
 800779c:	f04f 33ff 	mov.w	r3, #4294967295
 80077a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80077a4:	2200      	movs	r2, #0
 80077a6:	2312      	movs	r3, #18
 80077a8:	e7b0      	b.n	800770c <_dtoa_r+0x26c>
 80077aa:	2301      	movs	r3, #1
 80077ac:	9308      	str	r3, [sp, #32]
 80077ae:	e7f5      	b.n	800779c <_dtoa_r+0x2fc>
 80077b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80077b6:	e7b8      	b.n	800772a <_dtoa_r+0x28a>
 80077b8:	3101      	adds	r1, #1
 80077ba:	6041      	str	r1, [r0, #4]
 80077bc:	0052      	lsls	r2, r2, #1
 80077be:	e7b8      	b.n	8007732 <_dtoa_r+0x292>
 80077c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077c2:	9a01      	ldr	r2, [sp, #4]
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	9b03      	ldr	r3, [sp, #12]
 80077c8:	2b0e      	cmp	r3, #14
 80077ca:	f200 809d 	bhi.w	8007908 <_dtoa_r+0x468>
 80077ce:	2d00      	cmp	r5, #0
 80077d0:	f000 809a 	beq.w	8007908 <_dtoa_r+0x468>
 80077d4:	9b00      	ldr	r3, [sp, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	dd32      	ble.n	8007840 <_dtoa_r+0x3a0>
 80077da:	4ab7      	ldr	r2, [pc, #732]	; (8007ab8 <_dtoa_r+0x618>)
 80077dc:	f003 030f 	and.w	r3, r3, #15
 80077e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80077e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80077e8:	9b00      	ldr	r3, [sp, #0]
 80077ea:	05d8      	lsls	r0, r3, #23
 80077ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 80077f0:	d516      	bpl.n	8007820 <_dtoa_r+0x380>
 80077f2:	4bb2      	ldr	r3, [pc, #712]	; (8007abc <_dtoa_r+0x61c>)
 80077f4:	ec51 0b19 	vmov	r0, r1, d9
 80077f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80077fc:	f7f9 f826 	bl	800084c <__aeabi_ddiv>
 8007800:	f007 070f 	and.w	r7, r7, #15
 8007804:	4682      	mov	sl, r0
 8007806:	468b      	mov	fp, r1
 8007808:	2503      	movs	r5, #3
 800780a:	4eac      	ldr	r6, [pc, #688]	; (8007abc <_dtoa_r+0x61c>)
 800780c:	b957      	cbnz	r7, 8007824 <_dtoa_r+0x384>
 800780e:	4642      	mov	r2, r8
 8007810:	464b      	mov	r3, r9
 8007812:	4650      	mov	r0, sl
 8007814:	4659      	mov	r1, fp
 8007816:	f7f9 f819 	bl	800084c <__aeabi_ddiv>
 800781a:	4682      	mov	sl, r0
 800781c:	468b      	mov	fp, r1
 800781e:	e028      	b.n	8007872 <_dtoa_r+0x3d2>
 8007820:	2502      	movs	r5, #2
 8007822:	e7f2      	b.n	800780a <_dtoa_r+0x36a>
 8007824:	07f9      	lsls	r1, r7, #31
 8007826:	d508      	bpl.n	800783a <_dtoa_r+0x39a>
 8007828:	4640      	mov	r0, r8
 800782a:	4649      	mov	r1, r9
 800782c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007830:	f7f8 fee2 	bl	80005f8 <__aeabi_dmul>
 8007834:	3501      	adds	r5, #1
 8007836:	4680      	mov	r8, r0
 8007838:	4689      	mov	r9, r1
 800783a:	107f      	asrs	r7, r7, #1
 800783c:	3608      	adds	r6, #8
 800783e:	e7e5      	b.n	800780c <_dtoa_r+0x36c>
 8007840:	f000 809b 	beq.w	800797a <_dtoa_r+0x4da>
 8007844:	9b00      	ldr	r3, [sp, #0]
 8007846:	4f9d      	ldr	r7, [pc, #628]	; (8007abc <_dtoa_r+0x61c>)
 8007848:	425e      	negs	r6, r3
 800784a:	4b9b      	ldr	r3, [pc, #620]	; (8007ab8 <_dtoa_r+0x618>)
 800784c:	f006 020f 	and.w	r2, r6, #15
 8007850:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007858:	ec51 0b19 	vmov	r0, r1, d9
 800785c:	f7f8 fecc 	bl	80005f8 <__aeabi_dmul>
 8007860:	1136      	asrs	r6, r6, #4
 8007862:	4682      	mov	sl, r0
 8007864:	468b      	mov	fp, r1
 8007866:	2300      	movs	r3, #0
 8007868:	2502      	movs	r5, #2
 800786a:	2e00      	cmp	r6, #0
 800786c:	d17a      	bne.n	8007964 <_dtoa_r+0x4c4>
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1d3      	bne.n	800781a <_dtoa_r+0x37a>
 8007872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007874:	2b00      	cmp	r3, #0
 8007876:	f000 8082 	beq.w	800797e <_dtoa_r+0x4de>
 800787a:	4b91      	ldr	r3, [pc, #580]	; (8007ac0 <_dtoa_r+0x620>)
 800787c:	2200      	movs	r2, #0
 800787e:	4650      	mov	r0, sl
 8007880:	4659      	mov	r1, fp
 8007882:	f7f9 f92b 	bl	8000adc <__aeabi_dcmplt>
 8007886:	2800      	cmp	r0, #0
 8007888:	d079      	beq.n	800797e <_dtoa_r+0x4de>
 800788a:	9b03      	ldr	r3, [sp, #12]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d076      	beq.n	800797e <_dtoa_r+0x4de>
 8007890:	9b02      	ldr	r3, [sp, #8]
 8007892:	2b00      	cmp	r3, #0
 8007894:	dd36      	ble.n	8007904 <_dtoa_r+0x464>
 8007896:	9b00      	ldr	r3, [sp, #0]
 8007898:	4650      	mov	r0, sl
 800789a:	4659      	mov	r1, fp
 800789c:	1e5f      	subs	r7, r3, #1
 800789e:	2200      	movs	r2, #0
 80078a0:	4b88      	ldr	r3, [pc, #544]	; (8007ac4 <_dtoa_r+0x624>)
 80078a2:	f7f8 fea9 	bl	80005f8 <__aeabi_dmul>
 80078a6:	9e02      	ldr	r6, [sp, #8]
 80078a8:	4682      	mov	sl, r0
 80078aa:	468b      	mov	fp, r1
 80078ac:	3501      	adds	r5, #1
 80078ae:	4628      	mov	r0, r5
 80078b0:	f7f8 fe38 	bl	8000524 <__aeabi_i2d>
 80078b4:	4652      	mov	r2, sl
 80078b6:	465b      	mov	r3, fp
 80078b8:	f7f8 fe9e 	bl	80005f8 <__aeabi_dmul>
 80078bc:	4b82      	ldr	r3, [pc, #520]	; (8007ac8 <_dtoa_r+0x628>)
 80078be:	2200      	movs	r2, #0
 80078c0:	f7f8 fce4 	bl	800028c <__adddf3>
 80078c4:	46d0      	mov	r8, sl
 80078c6:	46d9      	mov	r9, fp
 80078c8:	4682      	mov	sl, r0
 80078ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80078ce:	2e00      	cmp	r6, #0
 80078d0:	d158      	bne.n	8007984 <_dtoa_r+0x4e4>
 80078d2:	4b7e      	ldr	r3, [pc, #504]	; (8007acc <_dtoa_r+0x62c>)
 80078d4:	2200      	movs	r2, #0
 80078d6:	4640      	mov	r0, r8
 80078d8:	4649      	mov	r1, r9
 80078da:	f7f8 fcd5 	bl	8000288 <__aeabi_dsub>
 80078de:	4652      	mov	r2, sl
 80078e0:	465b      	mov	r3, fp
 80078e2:	4680      	mov	r8, r0
 80078e4:	4689      	mov	r9, r1
 80078e6:	f7f9 f917 	bl	8000b18 <__aeabi_dcmpgt>
 80078ea:	2800      	cmp	r0, #0
 80078ec:	f040 8295 	bne.w	8007e1a <_dtoa_r+0x97a>
 80078f0:	4652      	mov	r2, sl
 80078f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80078f6:	4640      	mov	r0, r8
 80078f8:	4649      	mov	r1, r9
 80078fa:	f7f9 f8ef 	bl	8000adc <__aeabi_dcmplt>
 80078fe:	2800      	cmp	r0, #0
 8007900:	f040 8289 	bne.w	8007e16 <_dtoa_r+0x976>
 8007904:	ec5b ab19 	vmov	sl, fp, d9
 8007908:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800790a:	2b00      	cmp	r3, #0
 800790c:	f2c0 8148 	blt.w	8007ba0 <_dtoa_r+0x700>
 8007910:	9a00      	ldr	r2, [sp, #0]
 8007912:	2a0e      	cmp	r2, #14
 8007914:	f300 8144 	bgt.w	8007ba0 <_dtoa_r+0x700>
 8007918:	4b67      	ldr	r3, [pc, #412]	; (8007ab8 <_dtoa_r+0x618>)
 800791a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800791e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007924:	2b00      	cmp	r3, #0
 8007926:	f280 80d5 	bge.w	8007ad4 <_dtoa_r+0x634>
 800792a:	9b03      	ldr	r3, [sp, #12]
 800792c:	2b00      	cmp	r3, #0
 800792e:	f300 80d1 	bgt.w	8007ad4 <_dtoa_r+0x634>
 8007932:	f040 826f 	bne.w	8007e14 <_dtoa_r+0x974>
 8007936:	4b65      	ldr	r3, [pc, #404]	; (8007acc <_dtoa_r+0x62c>)
 8007938:	2200      	movs	r2, #0
 800793a:	4640      	mov	r0, r8
 800793c:	4649      	mov	r1, r9
 800793e:	f7f8 fe5b 	bl	80005f8 <__aeabi_dmul>
 8007942:	4652      	mov	r2, sl
 8007944:	465b      	mov	r3, fp
 8007946:	f7f9 f8dd 	bl	8000b04 <__aeabi_dcmpge>
 800794a:	9e03      	ldr	r6, [sp, #12]
 800794c:	4637      	mov	r7, r6
 800794e:	2800      	cmp	r0, #0
 8007950:	f040 8245 	bne.w	8007dde <_dtoa_r+0x93e>
 8007954:	9d01      	ldr	r5, [sp, #4]
 8007956:	2331      	movs	r3, #49	; 0x31
 8007958:	f805 3b01 	strb.w	r3, [r5], #1
 800795c:	9b00      	ldr	r3, [sp, #0]
 800795e:	3301      	adds	r3, #1
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	e240      	b.n	8007de6 <_dtoa_r+0x946>
 8007964:	07f2      	lsls	r2, r6, #31
 8007966:	d505      	bpl.n	8007974 <_dtoa_r+0x4d4>
 8007968:	e9d7 2300 	ldrd	r2, r3, [r7]
 800796c:	f7f8 fe44 	bl	80005f8 <__aeabi_dmul>
 8007970:	3501      	adds	r5, #1
 8007972:	2301      	movs	r3, #1
 8007974:	1076      	asrs	r6, r6, #1
 8007976:	3708      	adds	r7, #8
 8007978:	e777      	b.n	800786a <_dtoa_r+0x3ca>
 800797a:	2502      	movs	r5, #2
 800797c:	e779      	b.n	8007872 <_dtoa_r+0x3d2>
 800797e:	9f00      	ldr	r7, [sp, #0]
 8007980:	9e03      	ldr	r6, [sp, #12]
 8007982:	e794      	b.n	80078ae <_dtoa_r+0x40e>
 8007984:	9901      	ldr	r1, [sp, #4]
 8007986:	4b4c      	ldr	r3, [pc, #304]	; (8007ab8 <_dtoa_r+0x618>)
 8007988:	4431      	add	r1, r6
 800798a:	910d      	str	r1, [sp, #52]	; 0x34
 800798c:	9908      	ldr	r1, [sp, #32]
 800798e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007992:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007996:	2900      	cmp	r1, #0
 8007998:	d043      	beq.n	8007a22 <_dtoa_r+0x582>
 800799a:	494d      	ldr	r1, [pc, #308]	; (8007ad0 <_dtoa_r+0x630>)
 800799c:	2000      	movs	r0, #0
 800799e:	f7f8 ff55 	bl	800084c <__aeabi_ddiv>
 80079a2:	4652      	mov	r2, sl
 80079a4:	465b      	mov	r3, fp
 80079a6:	f7f8 fc6f 	bl	8000288 <__aeabi_dsub>
 80079aa:	9d01      	ldr	r5, [sp, #4]
 80079ac:	4682      	mov	sl, r0
 80079ae:	468b      	mov	fp, r1
 80079b0:	4649      	mov	r1, r9
 80079b2:	4640      	mov	r0, r8
 80079b4:	f7f9 f8d0 	bl	8000b58 <__aeabi_d2iz>
 80079b8:	4606      	mov	r6, r0
 80079ba:	f7f8 fdb3 	bl	8000524 <__aeabi_i2d>
 80079be:	4602      	mov	r2, r0
 80079c0:	460b      	mov	r3, r1
 80079c2:	4640      	mov	r0, r8
 80079c4:	4649      	mov	r1, r9
 80079c6:	f7f8 fc5f 	bl	8000288 <__aeabi_dsub>
 80079ca:	3630      	adds	r6, #48	; 0x30
 80079cc:	f805 6b01 	strb.w	r6, [r5], #1
 80079d0:	4652      	mov	r2, sl
 80079d2:	465b      	mov	r3, fp
 80079d4:	4680      	mov	r8, r0
 80079d6:	4689      	mov	r9, r1
 80079d8:	f7f9 f880 	bl	8000adc <__aeabi_dcmplt>
 80079dc:	2800      	cmp	r0, #0
 80079de:	d163      	bne.n	8007aa8 <_dtoa_r+0x608>
 80079e0:	4642      	mov	r2, r8
 80079e2:	464b      	mov	r3, r9
 80079e4:	4936      	ldr	r1, [pc, #216]	; (8007ac0 <_dtoa_r+0x620>)
 80079e6:	2000      	movs	r0, #0
 80079e8:	f7f8 fc4e 	bl	8000288 <__aeabi_dsub>
 80079ec:	4652      	mov	r2, sl
 80079ee:	465b      	mov	r3, fp
 80079f0:	f7f9 f874 	bl	8000adc <__aeabi_dcmplt>
 80079f4:	2800      	cmp	r0, #0
 80079f6:	f040 80b5 	bne.w	8007b64 <_dtoa_r+0x6c4>
 80079fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079fc:	429d      	cmp	r5, r3
 80079fe:	d081      	beq.n	8007904 <_dtoa_r+0x464>
 8007a00:	4b30      	ldr	r3, [pc, #192]	; (8007ac4 <_dtoa_r+0x624>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	4650      	mov	r0, sl
 8007a06:	4659      	mov	r1, fp
 8007a08:	f7f8 fdf6 	bl	80005f8 <__aeabi_dmul>
 8007a0c:	4b2d      	ldr	r3, [pc, #180]	; (8007ac4 <_dtoa_r+0x624>)
 8007a0e:	4682      	mov	sl, r0
 8007a10:	468b      	mov	fp, r1
 8007a12:	4640      	mov	r0, r8
 8007a14:	4649      	mov	r1, r9
 8007a16:	2200      	movs	r2, #0
 8007a18:	f7f8 fdee 	bl	80005f8 <__aeabi_dmul>
 8007a1c:	4680      	mov	r8, r0
 8007a1e:	4689      	mov	r9, r1
 8007a20:	e7c6      	b.n	80079b0 <_dtoa_r+0x510>
 8007a22:	4650      	mov	r0, sl
 8007a24:	4659      	mov	r1, fp
 8007a26:	f7f8 fde7 	bl	80005f8 <__aeabi_dmul>
 8007a2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a2c:	9d01      	ldr	r5, [sp, #4]
 8007a2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a30:	4682      	mov	sl, r0
 8007a32:	468b      	mov	fp, r1
 8007a34:	4649      	mov	r1, r9
 8007a36:	4640      	mov	r0, r8
 8007a38:	f7f9 f88e 	bl	8000b58 <__aeabi_d2iz>
 8007a3c:	4606      	mov	r6, r0
 8007a3e:	f7f8 fd71 	bl	8000524 <__aeabi_i2d>
 8007a42:	3630      	adds	r6, #48	; 0x30
 8007a44:	4602      	mov	r2, r0
 8007a46:	460b      	mov	r3, r1
 8007a48:	4640      	mov	r0, r8
 8007a4a:	4649      	mov	r1, r9
 8007a4c:	f7f8 fc1c 	bl	8000288 <__aeabi_dsub>
 8007a50:	f805 6b01 	strb.w	r6, [r5], #1
 8007a54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a56:	429d      	cmp	r5, r3
 8007a58:	4680      	mov	r8, r0
 8007a5a:	4689      	mov	r9, r1
 8007a5c:	f04f 0200 	mov.w	r2, #0
 8007a60:	d124      	bne.n	8007aac <_dtoa_r+0x60c>
 8007a62:	4b1b      	ldr	r3, [pc, #108]	; (8007ad0 <_dtoa_r+0x630>)
 8007a64:	4650      	mov	r0, sl
 8007a66:	4659      	mov	r1, fp
 8007a68:	f7f8 fc10 	bl	800028c <__adddf3>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	4640      	mov	r0, r8
 8007a72:	4649      	mov	r1, r9
 8007a74:	f7f9 f850 	bl	8000b18 <__aeabi_dcmpgt>
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	d173      	bne.n	8007b64 <_dtoa_r+0x6c4>
 8007a7c:	4652      	mov	r2, sl
 8007a7e:	465b      	mov	r3, fp
 8007a80:	4913      	ldr	r1, [pc, #76]	; (8007ad0 <_dtoa_r+0x630>)
 8007a82:	2000      	movs	r0, #0
 8007a84:	f7f8 fc00 	bl	8000288 <__aeabi_dsub>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	4640      	mov	r0, r8
 8007a8e:	4649      	mov	r1, r9
 8007a90:	f7f9 f824 	bl	8000adc <__aeabi_dcmplt>
 8007a94:	2800      	cmp	r0, #0
 8007a96:	f43f af35 	beq.w	8007904 <_dtoa_r+0x464>
 8007a9a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007a9c:	1e6b      	subs	r3, r5, #1
 8007a9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007aa0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007aa4:	2b30      	cmp	r3, #48	; 0x30
 8007aa6:	d0f8      	beq.n	8007a9a <_dtoa_r+0x5fa>
 8007aa8:	9700      	str	r7, [sp, #0]
 8007aaa:	e049      	b.n	8007b40 <_dtoa_r+0x6a0>
 8007aac:	4b05      	ldr	r3, [pc, #20]	; (8007ac4 <_dtoa_r+0x624>)
 8007aae:	f7f8 fda3 	bl	80005f8 <__aeabi_dmul>
 8007ab2:	4680      	mov	r8, r0
 8007ab4:	4689      	mov	r9, r1
 8007ab6:	e7bd      	b.n	8007a34 <_dtoa_r+0x594>
 8007ab8:	0800a458 	.word	0x0800a458
 8007abc:	0800a430 	.word	0x0800a430
 8007ac0:	3ff00000 	.word	0x3ff00000
 8007ac4:	40240000 	.word	0x40240000
 8007ac8:	401c0000 	.word	0x401c0000
 8007acc:	40140000 	.word	0x40140000
 8007ad0:	3fe00000 	.word	0x3fe00000
 8007ad4:	9d01      	ldr	r5, [sp, #4]
 8007ad6:	4656      	mov	r6, sl
 8007ad8:	465f      	mov	r7, fp
 8007ada:	4642      	mov	r2, r8
 8007adc:	464b      	mov	r3, r9
 8007ade:	4630      	mov	r0, r6
 8007ae0:	4639      	mov	r1, r7
 8007ae2:	f7f8 feb3 	bl	800084c <__aeabi_ddiv>
 8007ae6:	f7f9 f837 	bl	8000b58 <__aeabi_d2iz>
 8007aea:	4682      	mov	sl, r0
 8007aec:	f7f8 fd1a 	bl	8000524 <__aeabi_i2d>
 8007af0:	4642      	mov	r2, r8
 8007af2:	464b      	mov	r3, r9
 8007af4:	f7f8 fd80 	bl	80005f8 <__aeabi_dmul>
 8007af8:	4602      	mov	r2, r0
 8007afa:	460b      	mov	r3, r1
 8007afc:	4630      	mov	r0, r6
 8007afe:	4639      	mov	r1, r7
 8007b00:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007b04:	f7f8 fbc0 	bl	8000288 <__aeabi_dsub>
 8007b08:	f805 6b01 	strb.w	r6, [r5], #1
 8007b0c:	9e01      	ldr	r6, [sp, #4]
 8007b0e:	9f03      	ldr	r7, [sp, #12]
 8007b10:	1bae      	subs	r6, r5, r6
 8007b12:	42b7      	cmp	r7, r6
 8007b14:	4602      	mov	r2, r0
 8007b16:	460b      	mov	r3, r1
 8007b18:	d135      	bne.n	8007b86 <_dtoa_r+0x6e6>
 8007b1a:	f7f8 fbb7 	bl	800028c <__adddf3>
 8007b1e:	4642      	mov	r2, r8
 8007b20:	464b      	mov	r3, r9
 8007b22:	4606      	mov	r6, r0
 8007b24:	460f      	mov	r7, r1
 8007b26:	f7f8 fff7 	bl	8000b18 <__aeabi_dcmpgt>
 8007b2a:	b9d0      	cbnz	r0, 8007b62 <_dtoa_r+0x6c2>
 8007b2c:	4642      	mov	r2, r8
 8007b2e:	464b      	mov	r3, r9
 8007b30:	4630      	mov	r0, r6
 8007b32:	4639      	mov	r1, r7
 8007b34:	f7f8 ffc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b38:	b110      	cbz	r0, 8007b40 <_dtoa_r+0x6a0>
 8007b3a:	f01a 0f01 	tst.w	sl, #1
 8007b3e:	d110      	bne.n	8007b62 <_dtoa_r+0x6c2>
 8007b40:	4620      	mov	r0, r4
 8007b42:	ee18 1a10 	vmov	r1, s16
 8007b46:	f000 fe87 	bl	8008858 <_Bfree>
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	9800      	ldr	r0, [sp, #0]
 8007b4e:	702b      	strb	r3, [r5, #0]
 8007b50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b52:	3001      	adds	r0, #1
 8007b54:	6018      	str	r0, [r3, #0]
 8007b56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f43f acf1 	beq.w	8007540 <_dtoa_r+0xa0>
 8007b5e:	601d      	str	r5, [r3, #0]
 8007b60:	e4ee      	b.n	8007540 <_dtoa_r+0xa0>
 8007b62:	9f00      	ldr	r7, [sp, #0]
 8007b64:	462b      	mov	r3, r5
 8007b66:	461d      	mov	r5, r3
 8007b68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b6c:	2a39      	cmp	r2, #57	; 0x39
 8007b6e:	d106      	bne.n	8007b7e <_dtoa_r+0x6de>
 8007b70:	9a01      	ldr	r2, [sp, #4]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d1f7      	bne.n	8007b66 <_dtoa_r+0x6c6>
 8007b76:	9901      	ldr	r1, [sp, #4]
 8007b78:	2230      	movs	r2, #48	; 0x30
 8007b7a:	3701      	adds	r7, #1
 8007b7c:	700a      	strb	r2, [r1, #0]
 8007b7e:	781a      	ldrb	r2, [r3, #0]
 8007b80:	3201      	adds	r2, #1
 8007b82:	701a      	strb	r2, [r3, #0]
 8007b84:	e790      	b.n	8007aa8 <_dtoa_r+0x608>
 8007b86:	4ba6      	ldr	r3, [pc, #664]	; (8007e20 <_dtoa_r+0x980>)
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f7f8 fd35 	bl	80005f8 <__aeabi_dmul>
 8007b8e:	2200      	movs	r2, #0
 8007b90:	2300      	movs	r3, #0
 8007b92:	4606      	mov	r6, r0
 8007b94:	460f      	mov	r7, r1
 8007b96:	f7f8 ff97 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	d09d      	beq.n	8007ada <_dtoa_r+0x63a>
 8007b9e:	e7cf      	b.n	8007b40 <_dtoa_r+0x6a0>
 8007ba0:	9a08      	ldr	r2, [sp, #32]
 8007ba2:	2a00      	cmp	r2, #0
 8007ba4:	f000 80d7 	beq.w	8007d56 <_dtoa_r+0x8b6>
 8007ba8:	9a06      	ldr	r2, [sp, #24]
 8007baa:	2a01      	cmp	r2, #1
 8007bac:	f300 80ba 	bgt.w	8007d24 <_dtoa_r+0x884>
 8007bb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bb2:	2a00      	cmp	r2, #0
 8007bb4:	f000 80b2 	beq.w	8007d1c <_dtoa_r+0x87c>
 8007bb8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007bbc:	9e07      	ldr	r6, [sp, #28]
 8007bbe:	9d04      	ldr	r5, [sp, #16]
 8007bc0:	9a04      	ldr	r2, [sp, #16]
 8007bc2:	441a      	add	r2, r3
 8007bc4:	9204      	str	r2, [sp, #16]
 8007bc6:	9a05      	ldr	r2, [sp, #20]
 8007bc8:	2101      	movs	r1, #1
 8007bca:	441a      	add	r2, r3
 8007bcc:	4620      	mov	r0, r4
 8007bce:	9205      	str	r2, [sp, #20]
 8007bd0:	f000 ff44 	bl	8008a5c <__i2b>
 8007bd4:	4607      	mov	r7, r0
 8007bd6:	2d00      	cmp	r5, #0
 8007bd8:	dd0c      	ble.n	8007bf4 <_dtoa_r+0x754>
 8007bda:	9b05      	ldr	r3, [sp, #20]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	dd09      	ble.n	8007bf4 <_dtoa_r+0x754>
 8007be0:	42ab      	cmp	r3, r5
 8007be2:	9a04      	ldr	r2, [sp, #16]
 8007be4:	bfa8      	it	ge
 8007be6:	462b      	movge	r3, r5
 8007be8:	1ad2      	subs	r2, r2, r3
 8007bea:	9204      	str	r2, [sp, #16]
 8007bec:	9a05      	ldr	r2, [sp, #20]
 8007bee:	1aed      	subs	r5, r5, r3
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	9305      	str	r3, [sp, #20]
 8007bf4:	9b07      	ldr	r3, [sp, #28]
 8007bf6:	b31b      	cbz	r3, 8007c40 <_dtoa_r+0x7a0>
 8007bf8:	9b08      	ldr	r3, [sp, #32]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f000 80af 	beq.w	8007d5e <_dtoa_r+0x8be>
 8007c00:	2e00      	cmp	r6, #0
 8007c02:	dd13      	ble.n	8007c2c <_dtoa_r+0x78c>
 8007c04:	4639      	mov	r1, r7
 8007c06:	4632      	mov	r2, r6
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f000 ffe7 	bl	8008bdc <__pow5mult>
 8007c0e:	ee18 2a10 	vmov	r2, s16
 8007c12:	4601      	mov	r1, r0
 8007c14:	4607      	mov	r7, r0
 8007c16:	4620      	mov	r0, r4
 8007c18:	f000 ff36 	bl	8008a88 <__multiply>
 8007c1c:	ee18 1a10 	vmov	r1, s16
 8007c20:	4680      	mov	r8, r0
 8007c22:	4620      	mov	r0, r4
 8007c24:	f000 fe18 	bl	8008858 <_Bfree>
 8007c28:	ee08 8a10 	vmov	s16, r8
 8007c2c:	9b07      	ldr	r3, [sp, #28]
 8007c2e:	1b9a      	subs	r2, r3, r6
 8007c30:	d006      	beq.n	8007c40 <_dtoa_r+0x7a0>
 8007c32:	ee18 1a10 	vmov	r1, s16
 8007c36:	4620      	mov	r0, r4
 8007c38:	f000 ffd0 	bl	8008bdc <__pow5mult>
 8007c3c:	ee08 0a10 	vmov	s16, r0
 8007c40:	2101      	movs	r1, #1
 8007c42:	4620      	mov	r0, r4
 8007c44:	f000 ff0a 	bl	8008a5c <__i2b>
 8007c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	4606      	mov	r6, r0
 8007c4e:	f340 8088 	ble.w	8007d62 <_dtoa_r+0x8c2>
 8007c52:	461a      	mov	r2, r3
 8007c54:	4601      	mov	r1, r0
 8007c56:	4620      	mov	r0, r4
 8007c58:	f000 ffc0 	bl	8008bdc <__pow5mult>
 8007c5c:	9b06      	ldr	r3, [sp, #24]
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	4606      	mov	r6, r0
 8007c62:	f340 8081 	ble.w	8007d68 <_dtoa_r+0x8c8>
 8007c66:	f04f 0800 	mov.w	r8, #0
 8007c6a:	6933      	ldr	r3, [r6, #16]
 8007c6c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007c70:	6918      	ldr	r0, [r3, #16]
 8007c72:	f000 fea3 	bl	80089bc <__hi0bits>
 8007c76:	f1c0 0020 	rsb	r0, r0, #32
 8007c7a:	9b05      	ldr	r3, [sp, #20]
 8007c7c:	4418      	add	r0, r3
 8007c7e:	f010 001f 	ands.w	r0, r0, #31
 8007c82:	f000 8092 	beq.w	8007daa <_dtoa_r+0x90a>
 8007c86:	f1c0 0320 	rsb	r3, r0, #32
 8007c8a:	2b04      	cmp	r3, #4
 8007c8c:	f340 808a 	ble.w	8007da4 <_dtoa_r+0x904>
 8007c90:	f1c0 001c 	rsb	r0, r0, #28
 8007c94:	9b04      	ldr	r3, [sp, #16]
 8007c96:	4403      	add	r3, r0
 8007c98:	9304      	str	r3, [sp, #16]
 8007c9a:	9b05      	ldr	r3, [sp, #20]
 8007c9c:	4403      	add	r3, r0
 8007c9e:	4405      	add	r5, r0
 8007ca0:	9305      	str	r3, [sp, #20]
 8007ca2:	9b04      	ldr	r3, [sp, #16]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	dd07      	ble.n	8007cb8 <_dtoa_r+0x818>
 8007ca8:	ee18 1a10 	vmov	r1, s16
 8007cac:	461a      	mov	r2, r3
 8007cae:	4620      	mov	r0, r4
 8007cb0:	f000 ffee 	bl	8008c90 <__lshift>
 8007cb4:	ee08 0a10 	vmov	s16, r0
 8007cb8:	9b05      	ldr	r3, [sp, #20]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	dd05      	ble.n	8007cca <_dtoa_r+0x82a>
 8007cbe:	4631      	mov	r1, r6
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	f000 ffe4 	bl	8008c90 <__lshift>
 8007cc8:	4606      	mov	r6, r0
 8007cca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d06e      	beq.n	8007dae <_dtoa_r+0x90e>
 8007cd0:	ee18 0a10 	vmov	r0, s16
 8007cd4:	4631      	mov	r1, r6
 8007cd6:	f001 f84b 	bl	8008d70 <__mcmp>
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	da67      	bge.n	8007dae <_dtoa_r+0x90e>
 8007cde:	9b00      	ldr	r3, [sp, #0]
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	ee18 1a10 	vmov	r1, s16
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	220a      	movs	r2, #10
 8007cea:	2300      	movs	r3, #0
 8007cec:	4620      	mov	r0, r4
 8007cee:	f000 fdd5 	bl	800889c <__multadd>
 8007cf2:	9b08      	ldr	r3, [sp, #32]
 8007cf4:	ee08 0a10 	vmov	s16, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f000 81b1 	beq.w	8008060 <_dtoa_r+0xbc0>
 8007cfe:	2300      	movs	r3, #0
 8007d00:	4639      	mov	r1, r7
 8007d02:	220a      	movs	r2, #10
 8007d04:	4620      	mov	r0, r4
 8007d06:	f000 fdc9 	bl	800889c <__multadd>
 8007d0a:	9b02      	ldr	r3, [sp, #8]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	4607      	mov	r7, r0
 8007d10:	f300 808e 	bgt.w	8007e30 <_dtoa_r+0x990>
 8007d14:	9b06      	ldr	r3, [sp, #24]
 8007d16:	2b02      	cmp	r3, #2
 8007d18:	dc51      	bgt.n	8007dbe <_dtoa_r+0x91e>
 8007d1a:	e089      	b.n	8007e30 <_dtoa_r+0x990>
 8007d1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007d22:	e74b      	b.n	8007bbc <_dtoa_r+0x71c>
 8007d24:	9b03      	ldr	r3, [sp, #12]
 8007d26:	1e5e      	subs	r6, r3, #1
 8007d28:	9b07      	ldr	r3, [sp, #28]
 8007d2a:	42b3      	cmp	r3, r6
 8007d2c:	bfbf      	itttt	lt
 8007d2e:	9b07      	ldrlt	r3, [sp, #28]
 8007d30:	9607      	strlt	r6, [sp, #28]
 8007d32:	1af2      	sublt	r2, r6, r3
 8007d34:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007d36:	bfb6      	itet	lt
 8007d38:	189b      	addlt	r3, r3, r2
 8007d3a:	1b9e      	subge	r6, r3, r6
 8007d3c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007d3e:	9b03      	ldr	r3, [sp, #12]
 8007d40:	bfb8      	it	lt
 8007d42:	2600      	movlt	r6, #0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	bfb7      	itett	lt
 8007d48:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007d4c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007d50:	1a9d      	sublt	r5, r3, r2
 8007d52:	2300      	movlt	r3, #0
 8007d54:	e734      	b.n	8007bc0 <_dtoa_r+0x720>
 8007d56:	9e07      	ldr	r6, [sp, #28]
 8007d58:	9d04      	ldr	r5, [sp, #16]
 8007d5a:	9f08      	ldr	r7, [sp, #32]
 8007d5c:	e73b      	b.n	8007bd6 <_dtoa_r+0x736>
 8007d5e:	9a07      	ldr	r2, [sp, #28]
 8007d60:	e767      	b.n	8007c32 <_dtoa_r+0x792>
 8007d62:	9b06      	ldr	r3, [sp, #24]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	dc18      	bgt.n	8007d9a <_dtoa_r+0x8fa>
 8007d68:	f1ba 0f00 	cmp.w	sl, #0
 8007d6c:	d115      	bne.n	8007d9a <_dtoa_r+0x8fa>
 8007d6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d72:	b993      	cbnz	r3, 8007d9a <_dtoa_r+0x8fa>
 8007d74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007d78:	0d1b      	lsrs	r3, r3, #20
 8007d7a:	051b      	lsls	r3, r3, #20
 8007d7c:	b183      	cbz	r3, 8007da0 <_dtoa_r+0x900>
 8007d7e:	9b04      	ldr	r3, [sp, #16]
 8007d80:	3301      	adds	r3, #1
 8007d82:	9304      	str	r3, [sp, #16]
 8007d84:	9b05      	ldr	r3, [sp, #20]
 8007d86:	3301      	adds	r3, #1
 8007d88:	9305      	str	r3, [sp, #20]
 8007d8a:	f04f 0801 	mov.w	r8, #1
 8007d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	f47f af6a 	bne.w	8007c6a <_dtoa_r+0x7ca>
 8007d96:	2001      	movs	r0, #1
 8007d98:	e76f      	b.n	8007c7a <_dtoa_r+0x7da>
 8007d9a:	f04f 0800 	mov.w	r8, #0
 8007d9e:	e7f6      	b.n	8007d8e <_dtoa_r+0x8ee>
 8007da0:	4698      	mov	r8, r3
 8007da2:	e7f4      	b.n	8007d8e <_dtoa_r+0x8ee>
 8007da4:	f43f af7d 	beq.w	8007ca2 <_dtoa_r+0x802>
 8007da8:	4618      	mov	r0, r3
 8007daa:	301c      	adds	r0, #28
 8007dac:	e772      	b.n	8007c94 <_dtoa_r+0x7f4>
 8007dae:	9b03      	ldr	r3, [sp, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	dc37      	bgt.n	8007e24 <_dtoa_r+0x984>
 8007db4:	9b06      	ldr	r3, [sp, #24]
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	dd34      	ble.n	8007e24 <_dtoa_r+0x984>
 8007dba:	9b03      	ldr	r3, [sp, #12]
 8007dbc:	9302      	str	r3, [sp, #8]
 8007dbe:	9b02      	ldr	r3, [sp, #8]
 8007dc0:	b96b      	cbnz	r3, 8007dde <_dtoa_r+0x93e>
 8007dc2:	4631      	mov	r1, r6
 8007dc4:	2205      	movs	r2, #5
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	f000 fd68 	bl	800889c <__multadd>
 8007dcc:	4601      	mov	r1, r0
 8007dce:	4606      	mov	r6, r0
 8007dd0:	ee18 0a10 	vmov	r0, s16
 8007dd4:	f000 ffcc 	bl	8008d70 <__mcmp>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	f73f adbb 	bgt.w	8007954 <_dtoa_r+0x4b4>
 8007dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007de0:	9d01      	ldr	r5, [sp, #4]
 8007de2:	43db      	mvns	r3, r3
 8007de4:	9300      	str	r3, [sp, #0]
 8007de6:	f04f 0800 	mov.w	r8, #0
 8007dea:	4631      	mov	r1, r6
 8007dec:	4620      	mov	r0, r4
 8007dee:	f000 fd33 	bl	8008858 <_Bfree>
 8007df2:	2f00      	cmp	r7, #0
 8007df4:	f43f aea4 	beq.w	8007b40 <_dtoa_r+0x6a0>
 8007df8:	f1b8 0f00 	cmp.w	r8, #0
 8007dfc:	d005      	beq.n	8007e0a <_dtoa_r+0x96a>
 8007dfe:	45b8      	cmp	r8, r7
 8007e00:	d003      	beq.n	8007e0a <_dtoa_r+0x96a>
 8007e02:	4641      	mov	r1, r8
 8007e04:	4620      	mov	r0, r4
 8007e06:	f000 fd27 	bl	8008858 <_Bfree>
 8007e0a:	4639      	mov	r1, r7
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	f000 fd23 	bl	8008858 <_Bfree>
 8007e12:	e695      	b.n	8007b40 <_dtoa_r+0x6a0>
 8007e14:	2600      	movs	r6, #0
 8007e16:	4637      	mov	r7, r6
 8007e18:	e7e1      	b.n	8007dde <_dtoa_r+0x93e>
 8007e1a:	9700      	str	r7, [sp, #0]
 8007e1c:	4637      	mov	r7, r6
 8007e1e:	e599      	b.n	8007954 <_dtoa_r+0x4b4>
 8007e20:	40240000 	.word	0x40240000
 8007e24:	9b08      	ldr	r3, [sp, #32]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f000 80ca 	beq.w	8007fc0 <_dtoa_r+0xb20>
 8007e2c:	9b03      	ldr	r3, [sp, #12]
 8007e2e:	9302      	str	r3, [sp, #8]
 8007e30:	2d00      	cmp	r5, #0
 8007e32:	dd05      	ble.n	8007e40 <_dtoa_r+0x9a0>
 8007e34:	4639      	mov	r1, r7
 8007e36:	462a      	mov	r2, r5
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f000 ff29 	bl	8008c90 <__lshift>
 8007e3e:	4607      	mov	r7, r0
 8007e40:	f1b8 0f00 	cmp.w	r8, #0
 8007e44:	d05b      	beq.n	8007efe <_dtoa_r+0xa5e>
 8007e46:	6879      	ldr	r1, [r7, #4]
 8007e48:	4620      	mov	r0, r4
 8007e4a:	f000 fcc5 	bl	80087d8 <_Balloc>
 8007e4e:	4605      	mov	r5, r0
 8007e50:	b928      	cbnz	r0, 8007e5e <_dtoa_r+0x9be>
 8007e52:	4b87      	ldr	r3, [pc, #540]	; (8008070 <_dtoa_r+0xbd0>)
 8007e54:	4602      	mov	r2, r0
 8007e56:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007e5a:	f7ff bb3b 	b.w	80074d4 <_dtoa_r+0x34>
 8007e5e:	693a      	ldr	r2, [r7, #16]
 8007e60:	3202      	adds	r2, #2
 8007e62:	0092      	lsls	r2, r2, #2
 8007e64:	f107 010c 	add.w	r1, r7, #12
 8007e68:	300c      	adds	r0, #12
 8007e6a:	f000 fca7 	bl	80087bc <memcpy>
 8007e6e:	2201      	movs	r2, #1
 8007e70:	4629      	mov	r1, r5
 8007e72:	4620      	mov	r0, r4
 8007e74:	f000 ff0c 	bl	8008c90 <__lshift>
 8007e78:	9b01      	ldr	r3, [sp, #4]
 8007e7a:	f103 0901 	add.w	r9, r3, #1
 8007e7e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007e82:	4413      	add	r3, r2
 8007e84:	9305      	str	r3, [sp, #20]
 8007e86:	f00a 0301 	and.w	r3, sl, #1
 8007e8a:	46b8      	mov	r8, r7
 8007e8c:	9304      	str	r3, [sp, #16]
 8007e8e:	4607      	mov	r7, r0
 8007e90:	4631      	mov	r1, r6
 8007e92:	ee18 0a10 	vmov	r0, s16
 8007e96:	f7ff fa75 	bl	8007384 <quorem>
 8007e9a:	4641      	mov	r1, r8
 8007e9c:	9002      	str	r0, [sp, #8]
 8007e9e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007ea2:	ee18 0a10 	vmov	r0, s16
 8007ea6:	f000 ff63 	bl	8008d70 <__mcmp>
 8007eaa:	463a      	mov	r2, r7
 8007eac:	9003      	str	r0, [sp, #12]
 8007eae:	4631      	mov	r1, r6
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	f000 ff79 	bl	8008da8 <__mdiff>
 8007eb6:	68c2      	ldr	r2, [r0, #12]
 8007eb8:	f109 3bff 	add.w	fp, r9, #4294967295
 8007ebc:	4605      	mov	r5, r0
 8007ebe:	bb02      	cbnz	r2, 8007f02 <_dtoa_r+0xa62>
 8007ec0:	4601      	mov	r1, r0
 8007ec2:	ee18 0a10 	vmov	r0, s16
 8007ec6:	f000 ff53 	bl	8008d70 <__mcmp>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	4629      	mov	r1, r5
 8007ece:	4620      	mov	r0, r4
 8007ed0:	9207      	str	r2, [sp, #28]
 8007ed2:	f000 fcc1 	bl	8008858 <_Bfree>
 8007ed6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007eda:	ea43 0102 	orr.w	r1, r3, r2
 8007ede:	9b04      	ldr	r3, [sp, #16]
 8007ee0:	430b      	orrs	r3, r1
 8007ee2:	464d      	mov	r5, r9
 8007ee4:	d10f      	bne.n	8007f06 <_dtoa_r+0xa66>
 8007ee6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007eea:	d02a      	beq.n	8007f42 <_dtoa_r+0xaa2>
 8007eec:	9b03      	ldr	r3, [sp, #12]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	dd02      	ble.n	8007ef8 <_dtoa_r+0xa58>
 8007ef2:	9b02      	ldr	r3, [sp, #8]
 8007ef4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007ef8:	f88b a000 	strb.w	sl, [fp]
 8007efc:	e775      	b.n	8007dea <_dtoa_r+0x94a>
 8007efe:	4638      	mov	r0, r7
 8007f00:	e7ba      	b.n	8007e78 <_dtoa_r+0x9d8>
 8007f02:	2201      	movs	r2, #1
 8007f04:	e7e2      	b.n	8007ecc <_dtoa_r+0xa2c>
 8007f06:	9b03      	ldr	r3, [sp, #12]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	db04      	blt.n	8007f16 <_dtoa_r+0xa76>
 8007f0c:	9906      	ldr	r1, [sp, #24]
 8007f0e:	430b      	orrs	r3, r1
 8007f10:	9904      	ldr	r1, [sp, #16]
 8007f12:	430b      	orrs	r3, r1
 8007f14:	d122      	bne.n	8007f5c <_dtoa_r+0xabc>
 8007f16:	2a00      	cmp	r2, #0
 8007f18:	ddee      	ble.n	8007ef8 <_dtoa_r+0xa58>
 8007f1a:	ee18 1a10 	vmov	r1, s16
 8007f1e:	2201      	movs	r2, #1
 8007f20:	4620      	mov	r0, r4
 8007f22:	f000 feb5 	bl	8008c90 <__lshift>
 8007f26:	4631      	mov	r1, r6
 8007f28:	ee08 0a10 	vmov	s16, r0
 8007f2c:	f000 ff20 	bl	8008d70 <__mcmp>
 8007f30:	2800      	cmp	r0, #0
 8007f32:	dc03      	bgt.n	8007f3c <_dtoa_r+0xa9c>
 8007f34:	d1e0      	bne.n	8007ef8 <_dtoa_r+0xa58>
 8007f36:	f01a 0f01 	tst.w	sl, #1
 8007f3a:	d0dd      	beq.n	8007ef8 <_dtoa_r+0xa58>
 8007f3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f40:	d1d7      	bne.n	8007ef2 <_dtoa_r+0xa52>
 8007f42:	2339      	movs	r3, #57	; 0x39
 8007f44:	f88b 3000 	strb.w	r3, [fp]
 8007f48:	462b      	mov	r3, r5
 8007f4a:	461d      	mov	r5, r3
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007f52:	2a39      	cmp	r2, #57	; 0x39
 8007f54:	d071      	beq.n	800803a <_dtoa_r+0xb9a>
 8007f56:	3201      	adds	r2, #1
 8007f58:	701a      	strb	r2, [r3, #0]
 8007f5a:	e746      	b.n	8007dea <_dtoa_r+0x94a>
 8007f5c:	2a00      	cmp	r2, #0
 8007f5e:	dd07      	ble.n	8007f70 <_dtoa_r+0xad0>
 8007f60:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f64:	d0ed      	beq.n	8007f42 <_dtoa_r+0xaa2>
 8007f66:	f10a 0301 	add.w	r3, sl, #1
 8007f6a:	f88b 3000 	strb.w	r3, [fp]
 8007f6e:	e73c      	b.n	8007dea <_dtoa_r+0x94a>
 8007f70:	9b05      	ldr	r3, [sp, #20]
 8007f72:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007f76:	4599      	cmp	r9, r3
 8007f78:	d047      	beq.n	800800a <_dtoa_r+0xb6a>
 8007f7a:	ee18 1a10 	vmov	r1, s16
 8007f7e:	2300      	movs	r3, #0
 8007f80:	220a      	movs	r2, #10
 8007f82:	4620      	mov	r0, r4
 8007f84:	f000 fc8a 	bl	800889c <__multadd>
 8007f88:	45b8      	cmp	r8, r7
 8007f8a:	ee08 0a10 	vmov	s16, r0
 8007f8e:	f04f 0300 	mov.w	r3, #0
 8007f92:	f04f 020a 	mov.w	r2, #10
 8007f96:	4641      	mov	r1, r8
 8007f98:	4620      	mov	r0, r4
 8007f9a:	d106      	bne.n	8007faa <_dtoa_r+0xb0a>
 8007f9c:	f000 fc7e 	bl	800889c <__multadd>
 8007fa0:	4680      	mov	r8, r0
 8007fa2:	4607      	mov	r7, r0
 8007fa4:	f109 0901 	add.w	r9, r9, #1
 8007fa8:	e772      	b.n	8007e90 <_dtoa_r+0x9f0>
 8007faa:	f000 fc77 	bl	800889c <__multadd>
 8007fae:	4639      	mov	r1, r7
 8007fb0:	4680      	mov	r8, r0
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	220a      	movs	r2, #10
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f000 fc70 	bl	800889c <__multadd>
 8007fbc:	4607      	mov	r7, r0
 8007fbe:	e7f1      	b.n	8007fa4 <_dtoa_r+0xb04>
 8007fc0:	9b03      	ldr	r3, [sp, #12]
 8007fc2:	9302      	str	r3, [sp, #8]
 8007fc4:	9d01      	ldr	r5, [sp, #4]
 8007fc6:	ee18 0a10 	vmov	r0, s16
 8007fca:	4631      	mov	r1, r6
 8007fcc:	f7ff f9da 	bl	8007384 <quorem>
 8007fd0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007fd4:	9b01      	ldr	r3, [sp, #4]
 8007fd6:	f805 ab01 	strb.w	sl, [r5], #1
 8007fda:	1aea      	subs	r2, r5, r3
 8007fdc:	9b02      	ldr	r3, [sp, #8]
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	dd09      	ble.n	8007ff6 <_dtoa_r+0xb56>
 8007fe2:	ee18 1a10 	vmov	r1, s16
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	220a      	movs	r2, #10
 8007fea:	4620      	mov	r0, r4
 8007fec:	f000 fc56 	bl	800889c <__multadd>
 8007ff0:	ee08 0a10 	vmov	s16, r0
 8007ff4:	e7e7      	b.n	8007fc6 <_dtoa_r+0xb26>
 8007ff6:	9b02      	ldr	r3, [sp, #8]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	bfc8      	it	gt
 8007ffc:	461d      	movgt	r5, r3
 8007ffe:	9b01      	ldr	r3, [sp, #4]
 8008000:	bfd8      	it	le
 8008002:	2501      	movle	r5, #1
 8008004:	441d      	add	r5, r3
 8008006:	f04f 0800 	mov.w	r8, #0
 800800a:	ee18 1a10 	vmov	r1, s16
 800800e:	2201      	movs	r2, #1
 8008010:	4620      	mov	r0, r4
 8008012:	f000 fe3d 	bl	8008c90 <__lshift>
 8008016:	4631      	mov	r1, r6
 8008018:	ee08 0a10 	vmov	s16, r0
 800801c:	f000 fea8 	bl	8008d70 <__mcmp>
 8008020:	2800      	cmp	r0, #0
 8008022:	dc91      	bgt.n	8007f48 <_dtoa_r+0xaa8>
 8008024:	d102      	bne.n	800802c <_dtoa_r+0xb8c>
 8008026:	f01a 0f01 	tst.w	sl, #1
 800802a:	d18d      	bne.n	8007f48 <_dtoa_r+0xaa8>
 800802c:	462b      	mov	r3, r5
 800802e:	461d      	mov	r5, r3
 8008030:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008034:	2a30      	cmp	r2, #48	; 0x30
 8008036:	d0fa      	beq.n	800802e <_dtoa_r+0xb8e>
 8008038:	e6d7      	b.n	8007dea <_dtoa_r+0x94a>
 800803a:	9a01      	ldr	r2, [sp, #4]
 800803c:	429a      	cmp	r2, r3
 800803e:	d184      	bne.n	8007f4a <_dtoa_r+0xaaa>
 8008040:	9b00      	ldr	r3, [sp, #0]
 8008042:	3301      	adds	r3, #1
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	2331      	movs	r3, #49	; 0x31
 8008048:	7013      	strb	r3, [r2, #0]
 800804a:	e6ce      	b.n	8007dea <_dtoa_r+0x94a>
 800804c:	4b09      	ldr	r3, [pc, #36]	; (8008074 <_dtoa_r+0xbd4>)
 800804e:	f7ff ba95 	b.w	800757c <_dtoa_r+0xdc>
 8008052:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008054:	2b00      	cmp	r3, #0
 8008056:	f47f aa6e 	bne.w	8007536 <_dtoa_r+0x96>
 800805a:	4b07      	ldr	r3, [pc, #28]	; (8008078 <_dtoa_r+0xbd8>)
 800805c:	f7ff ba8e 	b.w	800757c <_dtoa_r+0xdc>
 8008060:	9b02      	ldr	r3, [sp, #8]
 8008062:	2b00      	cmp	r3, #0
 8008064:	dcae      	bgt.n	8007fc4 <_dtoa_r+0xb24>
 8008066:	9b06      	ldr	r3, [sp, #24]
 8008068:	2b02      	cmp	r3, #2
 800806a:	f73f aea8 	bgt.w	8007dbe <_dtoa_r+0x91e>
 800806e:	e7a9      	b.n	8007fc4 <_dtoa_r+0xb24>
 8008070:	0800a348 	.word	0x0800a348
 8008074:	0800a14c 	.word	0x0800a14c
 8008078:	0800a2c9 	.word	0x0800a2c9

0800807c <rshift>:
 800807c:	6903      	ldr	r3, [r0, #16]
 800807e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008082:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008086:	ea4f 1261 	mov.w	r2, r1, asr #5
 800808a:	f100 0414 	add.w	r4, r0, #20
 800808e:	dd45      	ble.n	800811c <rshift+0xa0>
 8008090:	f011 011f 	ands.w	r1, r1, #31
 8008094:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008098:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800809c:	d10c      	bne.n	80080b8 <rshift+0x3c>
 800809e:	f100 0710 	add.w	r7, r0, #16
 80080a2:	4629      	mov	r1, r5
 80080a4:	42b1      	cmp	r1, r6
 80080a6:	d334      	bcc.n	8008112 <rshift+0x96>
 80080a8:	1a9b      	subs	r3, r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	1eea      	subs	r2, r5, #3
 80080ae:	4296      	cmp	r6, r2
 80080b0:	bf38      	it	cc
 80080b2:	2300      	movcc	r3, #0
 80080b4:	4423      	add	r3, r4
 80080b6:	e015      	b.n	80080e4 <rshift+0x68>
 80080b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80080bc:	f1c1 0820 	rsb	r8, r1, #32
 80080c0:	40cf      	lsrs	r7, r1
 80080c2:	f105 0e04 	add.w	lr, r5, #4
 80080c6:	46a1      	mov	r9, r4
 80080c8:	4576      	cmp	r6, lr
 80080ca:	46f4      	mov	ip, lr
 80080cc:	d815      	bhi.n	80080fa <rshift+0x7e>
 80080ce:	1a9a      	subs	r2, r3, r2
 80080d0:	0092      	lsls	r2, r2, #2
 80080d2:	3a04      	subs	r2, #4
 80080d4:	3501      	adds	r5, #1
 80080d6:	42ae      	cmp	r6, r5
 80080d8:	bf38      	it	cc
 80080da:	2200      	movcc	r2, #0
 80080dc:	18a3      	adds	r3, r4, r2
 80080de:	50a7      	str	r7, [r4, r2]
 80080e0:	b107      	cbz	r7, 80080e4 <rshift+0x68>
 80080e2:	3304      	adds	r3, #4
 80080e4:	1b1a      	subs	r2, r3, r4
 80080e6:	42a3      	cmp	r3, r4
 80080e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80080ec:	bf08      	it	eq
 80080ee:	2300      	moveq	r3, #0
 80080f0:	6102      	str	r2, [r0, #16]
 80080f2:	bf08      	it	eq
 80080f4:	6143      	streq	r3, [r0, #20]
 80080f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080fa:	f8dc c000 	ldr.w	ip, [ip]
 80080fe:	fa0c fc08 	lsl.w	ip, ip, r8
 8008102:	ea4c 0707 	orr.w	r7, ip, r7
 8008106:	f849 7b04 	str.w	r7, [r9], #4
 800810a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800810e:	40cf      	lsrs	r7, r1
 8008110:	e7da      	b.n	80080c8 <rshift+0x4c>
 8008112:	f851 cb04 	ldr.w	ip, [r1], #4
 8008116:	f847 cf04 	str.w	ip, [r7, #4]!
 800811a:	e7c3      	b.n	80080a4 <rshift+0x28>
 800811c:	4623      	mov	r3, r4
 800811e:	e7e1      	b.n	80080e4 <rshift+0x68>

08008120 <__hexdig_fun>:
 8008120:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008124:	2b09      	cmp	r3, #9
 8008126:	d802      	bhi.n	800812e <__hexdig_fun+0xe>
 8008128:	3820      	subs	r0, #32
 800812a:	b2c0      	uxtb	r0, r0
 800812c:	4770      	bx	lr
 800812e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008132:	2b05      	cmp	r3, #5
 8008134:	d801      	bhi.n	800813a <__hexdig_fun+0x1a>
 8008136:	3847      	subs	r0, #71	; 0x47
 8008138:	e7f7      	b.n	800812a <__hexdig_fun+0xa>
 800813a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800813e:	2b05      	cmp	r3, #5
 8008140:	d801      	bhi.n	8008146 <__hexdig_fun+0x26>
 8008142:	3827      	subs	r0, #39	; 0x27
 8008144:	e7f1      	b.n	800812a <__hexdig_fun+0xa>
 8008146:	2000      	movs	r0, #0
 8008148:	4770      	bx	lr
	...

0800814c <__gethex>:
 800814c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008150:	ed2d 8b02 	vpush	{d8}
 8008154:	b089      	sub	sp, #36	; 0x24
 8008156:	ee08 0a10 	vmov	s16, r0
 800815a:	9304      	str	r3, [sp, #16]
 800815c:	4bb4      	ldr	r3, [pc, #720]	; (8008430 <__gethex+0x2e4>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	9301      	str	r3, [sp, #4]
 8008162:	4618      	mov	r0, r3
 8008164:	468b      	mov	fp, r1
 8008166:	4690      	mov	r8, r2
 8008168:	f7f8 f832 	bl	80001d0 <strlen>
 800816c:	9b01      	ldr	r3, [sp, #4]
 800816e:	f8db 2000 	ldr.w	r2, [fp]
 8008172:	4403      	add	r3, r0
 8008174:	4682      	mov	sl, r0
 8008176:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800817a:	9305      	str	r3, [sp, #20]
 800817c:	1c93      	adds	r3, r2, #2
 800817e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008182:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008186:	32fe      	adds	r2, #254	; 0xfe
 8008188:	18d1      	adds	r1, r2, r3
 800818a:	461f      	mov	r7, r3
 800818c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008190:	9100      	str	r1, [sp, #0]
 8008192:	2830      	cmp	r0, #48	; 0x30
 8008194:	d0f8      	beq.n	8008188 <__gethex+0x3c>
 8008196:	f7ff ffc3 	bl	8008120 <__hexdig_fun>
 800819a:	4604      	mov	r4, r0
 800819c:	2800      	cmp	r0, #0
 800819e:	d13a      	bne.n	8008216 <__gethex+0xca>
 80081a0:	9901      	ldr	r1, [sp, #4]
 80081a2:	4652      	mov	r2, sl
 80081a4:	4638      	mov	r0, r7
 80081a6:	f001 fa57 	bl	8009658 <strncmp>
 80081aa:	4605      	mov	r5, r0
 80081ac:	2800      	cmp	r0, #0
 80081ae:	d168      	bne.n	8008282 <__gethex+0x136>
 80081b0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80081b4:	eb07 060a 	add.w	r6, r7, sl
 80081b8:	f7ff ffb2 	bl	8008120 <__hexdig_fun>
 80081bc:	2800      	cmp	r0, #0
 80081be:	d062      	beq.n	8008286 <__gethex+0x13a>
 80081c0:	4633      	mov	r3, r6
 80081c2:	7818      	ldrb	r0, [r3, #0]
 80081c4:	2830      	cmp	r0, #48	; 0x30
 80081c6:	461f      	mov	r7, r3
 80081c8:	f103 0301 	add.w	r3, r3, #1
 80081cc:	d0f9      	beq.n	80081c2 <__gethex+0x76>
 80081ce:	f7ff ffa7 	bl	8008120 <__hexdig_fun>
 80081d2:	2301      	movs	r3, #1
 80081d4:	fab0 f480 	clz	r4, r0
 80081d8:	0964      	lsrs	r4, r4, #5
 80081da:	4635      	mov	r5, r6
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	463a      	mov	r2, r7
 80081e0:	4616      	mov	r6, r2
 80081e2:	3201      	adds	r2, #1
 80081e4:	7830      	ldrb	r0, [r6, #0]
 80081e6:	f7ff ff9b 	bl	8008120 <__hexdig_fun>
 80081ea:	2800      	cmp	r0, #0
 80081ec:	d1f8      	bne.n	80081e0 <__gethex+0x94>
 80081ee:	9901      	ldr	r1, [sp, #4]
 80081f0:	4652      	mov	r2, sl
 80081f2:	4630      	mov	r0, r6
 80081f4:	f001 fa30 	bl	8009658 <strncmp>
 80081f8:	b980      	cbnz	r0, 800821c <__gethex+0xd0>
 80081fa:	b94d      	cbnz	r5, 8008210 <__gethex+0xc4>
 80081fc:	eb06 050a 	add.w	r5, r6, sl
 8008200:	462a      	mov	r2, r5
 8008202:	4616      	mov	r6, r2
 8008204:	3201      	adds	r2, #1
 8008206:	7830      	ldrb	r0, [r6, #0]
 8008208:	f7ff ff8a 	bl	8008120 <__hexdig_fun>
 800820c:	2800      	cmp	r0, #0
 800820e:	d1f8      	bne.n	8008202 <__gethex+0xb6>
 8008210:	1bad      	subs	r5, r5, r6
 8008212:	00ad      	lsls	r5, r5, #2
 8008214:	e004      	b.n	8008220 <__gethex+0xd4>
 8008216:	2400      	movs	r4, #0
 8008218:	4625      	mov	r5, r4
 800821a:	e7e0      	b.n	80081de <__gethex+0x92>
 800821c:	2d00      	cmp	r5, #0
 800821e:	d1f7      	bne.n	8008210 <__gethex+0xc4>
 8008220:	7833      	ldrb	r3, [r6, #0]
 8008222:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008226:	2b50      	cmp	r3, #80	; 0x50
 8008228:	d13b      	bne.n	80082a2 <__gethex+0x156>
 800822a:	7873      	ldrb	r3, [r6, #1]
 800822c:	2b2b      	cmp	r3, #43	; 0x2b
 800822e:	d02c      	beq.n	800828a <__gethex+0x13e>
 8008230:	2b2d      	cmp	r3, #45	; 0x2d
 8008232:	d02e      	beq.n	8008292 <__gethex+0x146>
 8008234:	1c71      	adds	r1, r6, #1
 8008236:	f04f 0900 	mov.w	r9, #0
 800823a:	7808      	ldrb	r0, [r1, #0]
 800823c:	f7ff ff70 	bl	8008120 <__hexdig_fun>
 8008240:	1e43      	subs	r3, r0, #1
 8008242:	b2db      	uxtb	r3, r3
 8008244:	2b18      	cmp	r3, #24
 8008246:	d82c      	bhi.n	80082a2 <__gethex+0x156>
 8008248:	f1a0 0210 	sub.w	r2, r0, #16
 800824c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008250:	f7ff ff66 	bl	8008120 <__hexdig_fun>
 8008254:	1e43      	subs	r3, r0, #1
 8008256:	b2db      	uxtb	r3, r3
 8008258:	2b18      	cmp	r3, #24
 800825a:	d91d      	bls.n	8008298 <__gethex+0x14c>
 800825c:	f1b9 0f00 	cmp.w	r9, #0
 8008260:	d000      	beq.n	8008264 <__gethex+0x118>
 8008262:	4252      	negs	r2, r2
 8008264:	4415      	add	r5, r2
 8008266:	f8cb 1000 	str.w	r1, [fp]
 800826a:	b1e4      	cbz	r4, 80082a6 <__gethex+0x15a>
 800826c:	9b00      	ldr	r3, [sp, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	bf14      	ite	ne
 8008272:	2700      	movne	r7, #0
 8008274:	2706      	moveq	r7, #6
 8008276:	4638      	mov	r0, r7
 8008278:	b009      	add	sp, #36	; 0x24
 800827a:	ecbd 8b02 	vpop	{d8}
 800827e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008282:	463e      	mov	r6, r7
 8008284:	4625      	mov	r5, r4
 8008286:	2401      	movs	r4, #1
 8008288:	e7ca      	b.n	8008220 <__gethex+0xd4>
 800828a:	f04f 0900 	mov.w	r9, #0
 800828e:	1cb1      	adds	r1, r6, #2
 8008290:	e7d3      	b.n	800823a <__gethex+0xee>
 8008292:	f04f 0901 	mov.w	r9, #1
 8008296:	e7fa      	b.n	800828e <__gethex+0x142>
 8008298:	230a      	movs	r3, #10
 800829a:	fb03 0202 	mla	r2, r3, r2, r0
 800829e:	3a10      	subs	r2, #16
 80082a0:	e7d4      	b.n	800824c <__gethex+0x100>
 80082a2:	4631      	mov	r1, r6
 80082a4:	e7df      	b.n	8008266 <__gethex+0x11a>
 80082a6:	1bf3      	subs	r3, r6, r7
 80082a8:	3b01      	subs	r3, #1
 80082aa:	4621      	mov	r1, r4
 80082ac:	2b07      	cmp	r3, #7
 80082ae:	dc0b      	bgt.n	80082c8 <__gethex+0x17c>
 80082b0:	ee18 0a10 	vmov	r0, s16
 80082b4:	f000 fa90 	bl	80087d8 <_Balloc>
 80082b8:	4604      	mov	r4, r0
 80082ba:	b940      	cbnz	r0, 80082ce <__gethex+0x182>
 80082bc:	4b5d      	ldr	r3, [pc, #372]	; (8008434 <__gethex+0x2e8>)
 80082be:	4602      	mov	r2, r0
 80082c0:	21de      	movs	r1, #222	; 0xde
 80082c2:	485d      	ldr	r0, [pc, #372]	; (8008438 <__gethex+0x2ec>)
 80082c4:	f001 f9ea 	bl	800969c <__assert_func>
 80082c8:	3101      	adds	r1, #1
 80082ca:	105b      	asrs	r3, r3, #1
 80082cc:	e7ee      	b.n	80082ac <__gethex+0x160>
 80082ce:	f100 0914 	add.w	r9, r0, #20
 80082d2:	f04f 0b00 	mov.w	fp, #0
 80082d6:	f1ca 0301 	rsb	r3, sl, #1
 80082da:	f8cd 9008 	str.w	r9, [sp, #8]
 80082de:	f8cd b000 	str.w	fp, [sp]
 80082e2:	9306      	str	r3, [sp, #24]
 80082e4:	42b7      	cmp	r7, r6
 80082e6:	d340      	bcc.n	800836a <__gethex+0x21e>
 80082e8:	9802      	ldr	r0, [sp, #8]
 80082ea:	9b00      	ldr	r3, [sp, #0]
 80082ec:	f840 3b04 	str.w	r3, [r0], #4
 80082f0:	eba0 0009 	sub.w	r0, r0, r9
 80082f4:	1080      	asrs	r0, r0, #2
 80082f6:	0146      	lsls	r6, r0, #5
 80082f8:	6120      	str	r0, [r4, #16]
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 fb5e 	bl	80089bc <__hi0bits>
 8008300:	1a30      	subs	r0, r6, r0
 8008302:	f8d8 6000 	ldr.w	r6, [r8]
 8008306:	42b0      	cmp	r0, r6
 8008308:	dd63      	ble.n	80083d2 <__gethex+0x286>
 800830a:	1b87      	subs	r7, r0, r6
 800830c:	4639      	mov	r1, r7
 800830e:	4620      	mov	r0, r4
 8008310:	f000 ff02 	bl	8009118 <__any_on>
 8008314:	4682      	mov	sl, r0
 8008316:	b1a8      	cbz	r0, 8008344 <__gethex+0x1f8>
 8008318:	1e7b      	subs	r3, r7, #1
 800831a:	1159      	asrs	r1, r3, #5
 800831c:	f003 021f 	and.w	r2, r3, #31
 8008320:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008324:	f04f 0a01 	mov.w	sl, #1
 8008328:	fa0a f202 	lsl.w	r2, sl, r2
 800832c:	420a      	tst	r2, r1
 800832e:	d009      	beq.n	8008344 <__gethex+0x1f8>
 8008330:	4553      	cmp	r3, sl
 8008332:	dd05      	ble.n	8008340 <__gethex+0x1f4>
 8008334:	1eb9      	subs	r1, r7, #2
 8008336:	4620      	mov	r0, r4
 8008338:	f000 feee 	bl	8009118 <__any_on>
 800833c:	2800      	cmp	r0, #0
 800833e:	d145      	bne.n	80083cc <__gethex+0x280>
 8008340:	f04f 0a02 	mov.w	sl, #2
 8008344:	4639      	mov	r1, r7
 8008346:	4620      	mov	r0, r4
 8008348:	f7ff fe98 	bl	800807c <rshift>
 800834c:	443d      	add	r5, r7
 800834e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008352:	42ab      	cmp	r3, r5
 8008354:	da4c      	bge.n	80083f0 <__gethex+0x2a4>
 8008356:	ee18 0a10 	vmov	r0, s16
 800835a:	4621      	mov	r1, r4
 800835c:	f000 fa7c 	bl	8008858 <_Bfree>
 8008360:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008362:	2300      	movs	r3, #0
 8008364:	6013      	str	r3, [r2, #0]
 8008366:	27a3      	movs	r7, #163	; 0xa3
 8008368:	e785      	b.n	8008276 <__gethex+0x12a>
 800836a:	1e73      	subs	r3, r6, #1
 800836c:	9a05      	ldr	r2, [sp, #20]
 800836e:	9303      	str	r3, [sp, #12]
 8008370:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008374:	4293      	cmp	r3, r2
 8008376:	d019      	beq.n	80083ac <__gethex+0x260>
 8008378:	f1bb 0f20 	cmp.w	fp, #32
 800837c:	d107      	bne.n	800838e <__gethex+0x242>
 800837e:	9b02      	ldr	r3, [sp, #8]
 8008380:	9a00      	ldr	r2, [sp, #0]
 8008382:	f843 2b04 	str.w	r2, [r3], #4
 8008386:	9302      	str	r3, [sp, #8]
 8008388:	2300      	movs	r3, #0
 800838a:	9300      	str	r3, [sp, #0]
 800838c:	469b      	mov	fp, r3
 800838e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008392:	f7ff fec5 	bl	8008120 <__hexdig_fun>
 8008396:	9b00      	ldr	r3, [sp, #0]
 8008398:	f000 000f 	and.w	r0, r0, #15
 800839c:	fa00 f00b 	lsl.w	r0, r0, fp
 80083a0:	4303      	orrs	r3, r0
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	f10b 0b04 	add.w	fp, fp, #4
 80083a8:	9b03      	ldr	r3, [sp, #12]
 80083aa:	e00d      	b.n	80083c8 <__gethex+0x27c>
 80083ac:	9b03      	ldr	r3, [sp, #12]
 80083ae:	9a06      	ldr	r2, [sp, #24]
 80083b0:	4413      	add	r3, r2
 80083b2:	42bb      	cmp	r3, r7
 80083b4:	d3e0      	bcc.n	8008378 <__gethex+0x22c>
 80083b6:	4618      	mov	r0, r3
 80083b8:	9901      	ldr	r1, [sp, #4]
 80083ba:	9307      	str	r3, [sp, #28]
 80083bc:	4652      	mov	r2, sl
 80083be:	f001 f94b 	bl	8009658 <strncmp>
 80083c2:	9b07      	ldr	r3, [sp, #28]
 80083c4:	2800      	cmp	r0, #0
 80083c6:	d1d7      	bne.n	8008378 <__gethex+0x22c>
 80083c8:	461e      	mov	r6, r3
 80083ca:	e78b      	b.n	80082e4 <__gethex+0x198>
 80083cc:	f04f 0a03 	mov.w	sl, #3
 80083d0:	e7b8      	b.n	8008344 <__gethex+0x1f8>
 80083d2:	da0a      	bge.n	80083ea <__gethex+0x29e>
 80083d4:	1a37      	subs	r7, r6, r0
 80083d6:	4621      	mov	r1, r4
 80083d8:	ee18 0a10 	vmov	r0, s16
 80083dc:	463a      	mov	r2, r7
 80083de:	f000 fc57 	bl	8008c90 <__lshift>
 80083e2:	1bed      	subs	r5, r5, r7
 80083e4:	4604      	mov	r4, r0
 80083e6:	f100 0914 	add.w	r9, r0, #20
 80083ea:	f04f 0a00 	mov.w	sl, #0
 80083ee:	e7ae      	b.n	800834e <__gethex+0x202>
 80083f0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80083f4:	42a8      	cmp	r0, r5
 80083f6:	dd72      	ble.n	80084de <__gethex+0x392>
 80083f8:	1b45      	subs	r5, r0, r5
 80083fa:	42ae      	cmp	r6, r5
 80083fc:	dc36      	bgt.n	800846c <__gethex+0x320>
 80083fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008402:	2b02      	cmp	r3, #2
 8008404:	d02a      	beq.n	800845c <__gethex+0x310>
 8008406:	2b03      	cmp	r3, #3
 8008408:	d02c      	beq.n	8008464 <__gethex+0x318>
 800840a:	2b01      	cmp	r3, #1
 800840c:	d11c      	bne.n	8008448 <__gethex+0x2fc>
 800840e:	42ae      	cmp	r6, r5
 8008410:	d11a      	bne.n	8008448 <__gethex+0x2fc>
 8008412:	2e01      	cmp	r6, #1
 8008414:	d112      	bne.n	800843c <__gethex+0x2f0>
 8008416:	9a04      	ldr	r2, [sp, #16]
 8008418:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800841c:	6013      	str	r3, [r2, #0]
 800841e:	2301      	movs	r3, #1
 8008420:	6123      	str	r3, [r4, #16]
 8008422:	f8c9 3000 	str.w	r3, [r9]
 8008426:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008428:	2762      	movs	r7, #98	; 0x62
 800842a:	601c      	str	r4, [r3, #0]
 800842c:	e723      	b.n	8008276 <__gethex+0x12a>
 800842e:	bf00      	nop
 8008430:	0800a3c0 	.word	0x0800a3c0
 8008434:	0800a348 	.word	0x0800a348
 8008438:	0800a359 	.word	0x0800a359
 800843c:	1e71      	subs	r1, r6, #1
 800843e:	4620      	mov	r0, r4
 8008440:	f000 fe6a 	bl	8009118 <__any_on>
 8008444:	2800      	cmp	r0, #0
 8008446:	d1e6      	bne.n	8008416 <__gethex+0x2ca>
 8008448:	ee18 0a10 	vmov	r0, s16
 800844c:	4621      	mov	r1, r4
 800844e:	f000 fa03 	bl	8008858 <_Bfree>
 8008452:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008454:	2300      	movs	r3, #0
 8008456:	6013      	str	r3, [r2, #0]
 8008458:	2750      	movs	r7, #80	; 0x50
 800845a:	e70c      	b.n	8008276 <__gethex+0x12a>
 800845c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1f2      	bne.n	8008448 <__gethex+0x2fc>
 8008462:	e7d8      	b.n	8008416 <__gethex+0x2ca>
 8008464:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1d5      	bne.n	8008416 <__gethex+0x2ca>
 800846a:	e7ed      	b.n	8008448 <__gethex+0x2fc>
 800846c:	1e6f      	subs	r7, r5, #1
 800846e:	f1ba 0f00 	cmp.w	sl, #0
 8008472:	d131      	bne.n	80084d8 <__gethex+0x38c>
 8008474:	b127      	cbz	r7, 8008480 <__gethex+0x334>
 8008476:	4639      	mov	r1, r7
 8008478:	4620      	mov	r0, r4
 800847a:	f000 fe4d 	bl	8009118 <__any_on>
 800847e:	4682      	mov	sl, r0
 8008480:	117b      	asrs	r3, r7, #5
 8008482:	2101      	movs	r1, #1
 8008484:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008488:	f007 071f 	and.w	r7, r7, #31
 800848c:	fa01 f707 	lsl.w	r7, r1, r7
 8008490:	421f      	tst	r7, r3
 8008492:	4629      	mov	r1, r5
 8008494:	4620      	mov	r0, r4
 8008496:	bf18      	it	ne
 8008498:	f04a 0a02 	orrne.w	sl, sl, #2
 800849c:	1b76      	subs	r6, r6, r5
 800849e:	f7ff fded 	bl	800807c <rshift>
 80084a2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80084a6:	2702      	movs	r7, #2
 80084a8:	f1ba 0f00 	cmp.w	sl, #0
 80084ac:	d048      	beq.n	8008540 <__gethex+0x3f4>
 80084ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d015      	beq.n	80084e2 <__gethex+0x396>
 80084b6:	2b03      	cmp	r3, #3
 80084b8:	d017      	beq.n	80084ea <__gethex+0x39e>
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d109      	bne.n	80084d2 <__gethex+0x386>
 80084be:	f01a 0f02 	tst.w	sl, #2
 80084c2:	d006      	beq.n	80084d2 <__gethex+0x386>
 80084c4:	f8d9 0000 	ldr.w	r0, [r9]
 80084c8:	ea4a 0a00 	orr.w	sl, sl, r0
 80084cc:	f01a 0f01 	tst.w	sl, #1
 80084d0:	d10e      	bne.n	80084f0 <__gethex+0x3a4>
 80084d2:	f047 0710 	orr.w	r7, r7, #16
 80084d6:	e033      	b.n	8008540 <__gethex+0x3f4>
 80084d8:	f04f 0a01 	mov.w	sl, #1
 80084dc:	e7d0      	b.n	8008480 <__gethex+0x334>
 80084de:	2701      	movs	r7, #1
 80084e0:	e7e2      	b.n	80084a8 <__gethex+0x35c>
 80084e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084e4:	f1c3 0301 	rsb	r3, r3, #1
 80084e8:	9315      	str	r3, [sp, #84]	; 0x54
 80084ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d0f0      	beq.n	80084d2 <__gethex+0x386>
 80084f0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80084f4:	f104 0314 	add.w	r3, r4, #20
 80084f8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80084fc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008500:	f04f 0c00 	mov.w	ip, #0
 8008504:	4618      	mov	r0, r3
 8008506:	f853 2b04 	ldr.w	r2, [r3], #4
 800850a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800850e:	d01c      	beq.n	800854a <__gethex+0x3fe>
 8008510:	3201      	adds	r2, #1
 8008512:	6002      	str	r2, [r0, #0]
 8008514:	2f02      	cmp	r7, #2
 8008516:	f104 0314 	add.w	r3, r4, #20
 800851a:	d13f      	bne.n	800859c <__gethex+0x450>
 800851c:	f8d8 2000 	ldr.w	r2, [r8]
 8008520:	3a01      	subs	r2, #1
 8008522:	42b2      	cmp	r2, r6
 8008524:	d10a      	bne.n	800853c <__gethex+0x3f0>
 8008526:	1171      	asrs	r1, r6, #5
 8008528:	2201      	movs	r2, #1
 800852a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800852e:	f006 061f 	and.w	r6, r6, #31
 8008532:	fa02 f606 	lsl.w	r6, r2, r6
 8008536:	421e      	tst	r6, r3
 8008538:	bf18      	it	ne
 800853a:	4617      	movne	r7, r2
 800853c:	f047 0720 	orr.w	r7, r7, #32
 8008540:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008542:	601c      	str	r4, [r3, #0]
 8008544:	9b04      	ldr	r3, [sp, #16]
 8008546:	601d      	str	r5, [r3, #0]
 8008548:	e695      	b.n	8008276 <__gethex+0x12a>
 800854a:	4299      	cmp	r1, r3
 800854c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008550:	d8d8      	bhi.n	8008504 <__gethex+0x3b8>
 8008552:	68a3      	ldr	r3, [r4, #8]
 8008554:	459b      	cmp	fp, r3
 8008556:	db19      	blt.n	800858c <__gethex+0x440>
 8008558:	6861      	ldr	r1, [r4, #4]
 800855a:	ee18 0a10 	vmov	r0, s16
 800855e:	3101      	adds	r1, #1
 8008560:	f000 f93a 	bl	80087d8 <_Balloc>
 8008564:	4681      	mov	r9, r0
 8008566:	b918      	cbnz	r0, 8008570 <__gethex+0x424>
 8008568:	4b1a      	ldr	r3, [pc, #104]	; (80085d4 <__gethex+0x488>)
 800856a:	4602      	mov	r2, r0
 800856c:	2184      	movs	r1, #132	; 0x84
 800856e:	e6a8      	b.n	80082c2 <__gethex+0x176>
 8008570:	6922      	ldr	r2, [r4, #16]
 8008572:	3202      	adds	r2, #2
 8008574:	f104 010c 	add.w	r1, r4, #12
 8008578:	0092      	lsls	r2, r2, #2
 800857a:	300c      	adds	r0, #12
 800857c:	f000 f91e 	bl	80087bc <memcpy>
 8008580:	4621      	mov	r1, r4
 8008582:	ee18 0a10 	vmov	r0, s16
 8008586:	f000 f967 	bl	8008858 <_Bfree>
 800858a:	464c      	mov	r4, r9
 800858c:	6923      	ldr	r3, [r4, #16]
 800858e:	1c5a      	adds	r2, r3, #1
 8008590:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008594:	6122      	str	r2, [r4, #16]
 8008596:	2201      	movs	r2, #1
 8008598:	615a      	str	r2, [r3, #20]
 800859a:	e7bb      	b.n	8008514 <__gethex+0x3c8>
 800859c:	6922      	ldr	r2, [r4, #16]
 800859e:	455a      	cmp	r2, fp
 80085a0:	dd0b      	ble.n	80085ba <__gethex+0x46e>
 80085a2:	2101      	movs	r1, #1
 80085a4:	4620      	mov	r0, r4
 80085a6:	f7ff fd69 	bl	800807c <rshift>
 80085aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80085ae:	3501      	adds	r5, #1
 80085b0:	42ab      	cmp	r3, r5
 80085b2:	f6ff aed0 	blt.w	8008356 <__gethex+0x20a>
 80085b6:	2701      	movs	r7, #1
 80085b8:	e7c0      	b.n	800853c <__gethex+0x3f0>
 80085ba:	f016 061f 	ands.w	r6, r6, #31
 80085be:	d0fa      	beq.n	80085b6 <__gethex+0x46a>
 80085c0:	4453      	add	r3, sl
 80085c2:	f1c6 0620 	rsb	r6, r6, #32
 80085c6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80085ca:	f000 f9f7 	bl	80089bc <__hi0bits>
 80085ce:	42b0      	cmp	r0, r6
 80085d0:	dbe7      	blt.n	80085a2 <__gethex+0x456>
 80085d2:	e7f0      	b.n	80085b6 <__gethex+0x46a>
 80085d4:	0800a348 	.word	0x0800a348

080085d8 <L_shift>:
 80085d8:	f1c2 0208 	rsb	r2, r2, #8
 80085dc:	0092      	lsls	r2, r2, #2
 80085de:	b570      	push	{r4, r5, r6, lr}
 80085e0:	f1c2 0620 	rsb	r6, r2, #32
 80085e4:	6843      	ldr	r3, [r0, #4]
 80085e6:	6804      	ldr	r4, [r0, #0]
 80085e8:	fa03 f506 	lsl.w	r5, r3, r6
 80085ec:	432c      	orrs	r4, r5
 80085ee:	40d3      	lsrs	r3, r2
 80085f0:	6004      	str	r4, [r0, #0]
 80085f2:	f840 3f04 	str.w	r3, [r0, #4]!
 80085f6:	4288      	cmp	r0, r1
 80085f8:	d3f4      	bcc.n	80085e4 <L_shift+0xc>
 80085fa:	bd70      	pop	{r4, r5, r6, pc}

080085fc <__match>:
 80085fc:	b530      	push	{r4, r5, lr}
 80085fe:	6803      	ldr	r3, [r0, #0]
 8008600:	3301      	adds	r3, #1
 8008602:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008606:	b914      	cbnz	r4, 800860e <__match+0x12>
 8008608:	6003      	str	r3, [r0, #0]
 800860a:	2001      	movs	r0, #1
 800860c:	bd30      	pop	{r4, r5, pc}
 800860e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008612:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008616:	2d19      	cmp	r5, #25
 8008618:	bf98      	it	ls
 800861a:	3220      	addls	r2, #32
 800861c:	42a2      	cmp	r2, r4
 800861e:	d0f0      	beq.n	8008602 <__match+0x6>
 8008620:	2000      	movs	r0, #0
 8008622:	e7f3      	b.n	800860c <__match+0x10>

08008624 <__hexnan>:
 8008624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008628:	680b      	ldr	r3, [r1, #0]
 800862a:	115e      	asrs	r6, r3, #5
 800862c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008630:	f013 031f 	ands.w	r3, r3, #31
 8008634:	b087      	sub	sp, #28
 8008636:	bf18      	it	ne
 8008638:	3604      	addne	r6, #4
 800863a:	2500      	movs	r5, #0
 800863c:	1f37      	subs	r7, r6, #4
 800863e:	4690      	mov	r8, r2
 8008640:	6802      	ldr	r2, [r0, #0]
 8008642:	9301      	str	r3, [sp, #4]
 8008644:	4682      	mov	sl, r0
 8008646:	f846 5c04 	str.w	r5, [r6, #-4]
 800864a:	46b9      	mov	r9, r7
 800864c:	463c      	mov	r4, r7
 800864e:	9502      	str	r5, [sp, #8]
 8008650:	46ab      	mov	fp, r5
 8008652:	7851      	ldrb	r1, [r2, #1]
 8008654:	1c53      	adds	r3, r2, #1
 8008656:	9303      	str	r3, [sp, #12]
 8008658:	b341      	cbz	r1, 80086ac <__hexnan+0x88>
 800865a:	4608      	mov	r0, r1
 800865c:	9205      	str	r2, [sp, #20]
 800865e:	9104      	str	r1, [sp, #16]
 8008660:	f7ff fd5e 	bl	8008120 <__hexdig_fun>
 8008664:	2800      	cmp	r0, #0
 8008666:	d14f      	bne.n	8008708 <__hexnan+0xe4>
 8008668:	9904      	ldr	r1, [sp, #16]
 800866a:	9a05      	ldr	r2, [sp, #20]
 800866c:	2920      	cmp	r1, #32
 800866e:	d818      	bhi.n	80086a2 <__hexnan+0x7e>
 8008670:	9b02      	ldr	r3, [sp, #8]
 8008672:	459b      	cmp	fp, r3
 8008674:	dd13      	ble.n	800869e <__hexnan+0x7a>
 8008676:	454c      	cmp	r4, r9
 8008678:	d206      	bcs.n	8008688 <__hexnan+0x64>
 800867a:	2d07      	cmp	r5, #7
 800867c:	dc04      	bgt.n	8008688 <__hexnan+0x64>
 800867e:	462a      	mov	r2, r5
 8008680:	4649      	mov	r1, r9
 8008682:	4620      	mov	r0, r4
 8008684:	f7ff ffa8 	bl	80085d8 <L_shift>
 8008688:	4544      	cmp	r4, r8
 800868a:	d950      	bls.n	800872e <__hexnan+0x10a>
 800868c:	2300      	movs	r3, #0
 800868e:	f1a4 0904 	sub.w	r9, r4, #4
 8008692:	f844 3c04 	str.w	r3, [r4, #-4]
 8008696:	f8cd b008 	str.w	fp, [sp, #8]
 800869a:	464c      	mov	r4, r9
 800869c:	461d      	mov	r5, r3
 800869e:	9a03      	ldr	r2, [sp, #12]
 80086a0:	e7d7      	b.n	8008652 <__hexnan+0x2e>
 80086a2:	2929      	cmp	r1, #41	; 0x29
 80086a4:	d156      	bne.n	8008754 <__hexnan+0x130>
 80086a6:	3202      	adds	r2, #2
 80086a8:	f8ca 2000 	str.w	r2, [sl]
 80086ac:	f1bb 0f00 	cmp.w	fp, #0
 80086b0:	d050      	beq.n	8008754 <__hexnan+0x130>
 80086b2:	454c      	cmp	r4, r9
 80086b4:	d206      	bcs.n	80086c4 <__hexnan+0xa0>
 80086b6:	2d07      	cmp	r5, #7
 80086b8:	dc04      	bgt.n	80086c4 <__hexnan+0xa0>
 80086ba:	462a      	mov	r2, r5
 80086bc:	4649      	mov	r1, r9
 80086be:	4620      	mov	r0, r4
 80086c0:	f7ff ff8a 	bl	80085d8 <L_shift>
 80086c4:	4544      	cmp	r4, r8
 80086c6:	d934      	bls.n	8008732 <__hexnan+0x10e>
 80086c8:	f1a8 0204 	sub.w	r2, r8, #4
 80086cc:	4623      	mov	r3, r4
 80086ce:	f853 1b04 	ldr.w	r1, [r3], #4
 80086d2:	f842 1f04 	str.w	r1, [r2, #4]!
 80086d6:	429f      	cmp	r7, r3
 80086d8:	d2f9      	bcs.n	80086ce <__hexnan+0xaa>
 80086da:	1b3b      	subs	r3, r7, r4
 80086dc:	f023 0303 	bic.w	r3, r3, #3
 80086e0:	3304      	adds	r3, #4
 80086e2:	3401      	adds	r4, #1
 80086e4:	3e03      	subs	r6, #3
 80086e6:	42b4      	cmp	r4, r6
 80086e8:	bf88      	it	hi
 80086ea:	2304      	movhi	r3, #4
 80086ec:	4443      	add	r3, r8
 80086ee:	2200      	movs	r2, #0
 80086f0:	f843 2b04 	str.w	r2, [r3], #4
 80086f4:	429f      	cmp	r7, r3
 80086f6:	d2fb      	bcs.n	80086f0 <__hexnan+0xcc>
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	b91b      	cbnz	r3, 8008704 <__hexnan+0xe0>
 80086fc:	4547      	cmp	r7, r8
 80086fe:	d127      	bne.n	8008750 <__hexnan+0x12c>
 8008700:	2301      	movs	r3, #1
 8008702:	603b      	str	r3, [r7, #0]
 8008704:	2005      	movs	r0, #5
 8008706:	e026      	b.n	8008756 <__hexnan+0x132>
 8008708:	3501      	adds	r5, #1
 800870a:	2d08      	cmp	r5, #8
 800870c:	f10b 0b01 	add.w	fp, fp, #1
 8008710:	dd06      	ble.n	8008720 <__hexnan+0xfc>
 8008712:	4544      	cmp	r4, r8
 8008714:	d9c3      	bls.n	800869e <__hexnan+0x7a>
 8008716:	2300      	movs	r3, #0
 8008718:	f844 3c04 	str.w	r3, [r4, #-4]
 800871c:	2501      	movs	r5, #1
 800871e:	3c04      	subs	r4, #4
 8008720:	6822      	ldr	r2, [r4, #0]
 8008722:	f000 000f 	and.w	r0, r0, #15
 8008726:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800872a:	6022      	str	r2, [r4, #0]
 800872c:	e7b7      	b.n	800869e <__hexnan+0x7a>
 800872e:	2508      	movs	r5, #8
 8008730:	e7b5      	b.n	800869e <__hexnan+0x7a>
 8008732:	9b01      	ldr	r3, [sp, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d0df      	beq.n	80086f8 <__hexnan+0xd4>
 8008738:	f04f 32ff 	mov.w	r2, #4294967295
 800873c:	f1c3 0320 	rsb	r3, r3, #32
 8008740:	fa22 f303 	lsr.w	r3, r2, r3
 8008744:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008748:	401a      	ands	r2, r3
 800874a:	f846 2c04 	str.w	r2, [r6, #-4]
 800874e:	e7d3      	b.n	80086f8 <__hexnan+0xd4>
 8008750:	3f04      	subs	r7, #4
 8008752:	e7d1      	b.n	80086f8 <__hexnan+0xd4>
 8008754:	2004      	movs	r0, #4
 8008756:	b007      	add	sp, #28
 8008758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800875c <_localeconv_r>:
 800875c:	4800      	ldr	r0, [pc, #0]	; (8008760 <_localeconv_r+0x4>)
 800875e:	4770      	bx	lr
 8008760:	20000164 	.word	0x20000164

08008764 <_lseek_r>:
 8008764:	b538      	push	{r3, r4, r5, lr}
 8008766:	4d07      	ldr	r5, [pc, #28]	; (8008784 <_lseek_r+0x20>)
 8008768:	4604      	mov	r4, r0
 800876a:	4608      	mov	r0, r1
 800876c:	4611      	mov	r1, r2
 800876e:	2200      	movs	r2, #0
 8008770:	602a      	str	r2, [r5, #0]
 8008772:	461a      	mov	r2, r3
 8008774:	f7f9 fe0e 	bl	8002394 <_lseek>
 8008778:	1c43      	adds	r3, r0, #1
 800877a:	d102      	bne.n	8008782 <_lseek_r+0x1e>
 800877c:	682b      	ldr	r3, [r5, #0]
 800877e:	b103      	cbz	r3, 8008782 <_lseek_r+0x1e>
 8008780:	6023      	str	r3, [r4, #0]
 8008782:	bd38      	pop	{r3, r4, r5, pc}
 8008784:	2000085c 	.word	0x2000085c

08008788 <malloc>:
 8008788:	4b02      	ldr	r3, [pc, #8]	; (8008794 <malloc+0xc>)
 800878a:	4601      	mov	r1, r0
 800878c:	6818      	ldr	r0, [r3, #0]
 800878e:	f000 bd67 	b.w	8009260 <_malloc_r>
 8008792:	bf00      	nop
 8008794:	2000000c 	.word	0x2000000c

08008798 <__ascii_mbtowc>:
 8008798:	b082      	sub	sp, #8
 800879a:	b901      	cbnz	r1, 800879e <__ascii_mbtowc+0x6>
 800879c:	a901      	add	r1, sp, #4
 800879e:	b142      	cbz	r2, 80087b2 <__ascii_mbtowc+0x1a>
 80087a0:	b14b      	cbz	r3, 80087b6 <__ascii_mbtowc+0x1e>
 80087a2:	7813      	ldrb	r3, [r2, #0]
 80087a4:	600b      	str	r3, [r1, #0]
 80087a6:	7812      	ldrb	r2, [r2, #0]
 80087a8:	1e10      	subs	r0, r2, #0
 80087aa:	bf18      	it	ne
 80087ac:	2001      	movne	r0, #1
 80087ae:	b002      	add	sp, #8
 80087b0:	4770      	bx	lr
 80087b2:	4610      	mov	r0, r2
 80087b4:	e7fb      	b.n	80087ae <__ascii_mbtowc+0x16>
 80087b6:	f06f 0001 	mvn.w	r0, #1
 80087ba:	e7f8      	b.n	80087ae <__ascii_mbtowc+0x16>

080087bc <memcpy>:
 80087bc:	440a      	add	r2, r1
 80087be:	4291      	cmp	r1, r2
 80087c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80087c4:	d100      	bne.n	80087c8 <memcpy+0xc>
 80087c6:	4770      	bx	lr
 80087c8:	b510      	push	{r4, lr}
 80087ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087d2:	4291      	cmp	r1, r2
 80087d4:	d1f9      	bne.n	80087ca <memcpy+0xe>
 80087d6:	bd10      	pop	{r4, pc}

080087d8 <_Balloc>:
 80087d8:	b570      	push	{r4, r5, r6, lr}
 80087da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087dc:	4604      	mov	r4, r0
 80087de:	460d      	mov	r5, r1
 80087e0:	b976      	cbnz	r6, 8008800 <_Balloc+0x28>
 80087e2:	2010      	movs	r0, #16
 80087e4:	f7ff ffd0 	bl	8008788 <malloc>
 80087e8:	4602      	mov	r2, r0
 80087ea:	6260      	str	r0, [r4, #36]	; 0x24
 80087ec:	b920      	cbnz	r0, 80087f8 <_Balloc+0x20>
 80087ee:	4b18      	ldr	r3, [pc, #96]	; (8008850 <_Balloc+0x78>)
 80087f0:	4818      	ldr	r0, [pc, #96]	; (8008854 <_Balloc+0x7c>)
 80087f2:	2166      	movs	r1, #102	; 0x66
 80087f4:	f000 ff52 	bl	800969c <__assert_func>
 80087f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087fc:	6006      	str	r6, [r0, #0]
 80087fe:	60c6      	str	r6, [r0, #12]
 8008800:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008802:	68f3      	ldr	r3, [r6, #12]
 8008804:	b183      	cbz	r3, 8008828 <_Balloc+0x50>
 8008806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800880e:	b9b8      	cbnz	r0, 8008840 <_Balloc+0x68>
 8008810:	2101      	movs	r1, #1
 8008812:	fa01 f605 	lsl.w	r6, r1, r5
 8008816:	1d72      	adds	r2, r6, #5
 8008818:	0092      	lsls	r2, r2, #2
 800881a:	4620      	mov	r0, r4
 800881c:	f000 fc9d 	bl	800915a <_calloc_r>
 8008820:	b160      	cbz	r0, 800883c <_Balloc+0x64>
 8008822:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008826:	e00e      	b.n	8008846 <_Balloc+0x6e>
 8008828:	2221      	movs	r2, #33	; 0x21
 800882a:	2104      	movs	r1, #4
 800882c:	4620      	mov	r0, r4
 800882e:	f000 fc94 	bl	800915a <_calloc_r>
 8008832:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008834:	60f0      	str	r0, [r6, #12]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1e4      	bne.n	8008806 <_Balloc+0x2e>
 800883c:	2000      	movs	r0, #0
 800883e:	bd70      	pop	{r4, r5, r6, pc}
 8008840:	6802      	ldr	r2, [r0, #0]
 8008842:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008846:	2300      	movs	r3, #0
 8008848:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800884c:	e7f7      	b.n	800883e <_Balloc+0x66>
 800884e:	bf00      	nop
 8008850:	0800a2d6 	.word	0x0800a2d6
 8008854:	0800a3d4 	.word	0x0800a3d4

08008858 <_Bfree>:
 8008858:	b570      	push	{r4, r5, r6, lr}
 800885a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800885c:	4605      	mov	r5, r0
 800885e:	460c      	mov	r4, r1
 8008860:	b976      	cbnz	r6, 8008880 <_Bfree+0x28>
 8008862:	2010      	movs	r0, #16
 8008864:	f7ff ff90 	bl	8008788 <malloc>
 8008868:	4602      	mov	r2, r0
 800886a:	6268      	str	r0, [r5, #36]	; 0x24
 800886c:	b920      	cbnz	r0, 8008878 <_Bfree+0x20>
 800886e:	4b09      	ldr	r3, [pc, #36]	; (8008894 <_Bfree+0x3c>)
 8008870:	4809      	ldr	r0, [pc, #36]	; (8008898 <_Bfree+0x40>)
 8008872:	218a      	movs	r1, #138	; 0x8a
 8008874:	f000 ff12 	bl	800969c <__assert_func>
 8008878:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800887c:	6006      	str	r6, [r0, #0]
 800887e:	60c6      	str	r6, [r0, #12]
 8008880:	b13c      	cbz	r4, 8008892 <_Bfree+0x3a>
 8008882:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008884:	6862      	ldr	r2, [r4, #4]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800888c:	6021      	str	r1, [r4, #0]
 800888e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008892:	bd70      	pop	{r4, r5, r6, pc}
 8008894:	0800a2d6 	.word	0x0800a2d6
 8008898:	0800a3d4 	.word	0x0800a3d4

0800889c <__multadd>:
 800889c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088a0:	690d      	ldr	r5, [r1, #16]
 80088a2:	4607      	mov	r7, r0
 80088a4:	460c      	mov	r4, r1
 80088a6:	461e      	mov	r6, r3
 80088a8:	f101 0c14 	add.w	ip, r1, #20
 80088ac:	2000      	movs	r0, #0
 80088ae:	f8dc 3000 	ldr.w	r3, [ip]
 80088b2:	b299      	uxth	r1, r3
 80088b4:	fb02 6101 	mla	r1, r2, r1, r6
 80088b8:	0c1e      	lsrs	r6, r3, #16
 80088ba:	0c0b      	lsrs	r3, r1, #16
 80088bc:	fb02 3306 	mla	r3, r2, r6, r3
 80088c0:	b289      	uxth	r1, r1
 80088c2:	3001      	adds	r0, #1
 80088c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80088c8:	4285      	cmp	r5, r0
 80088ca:	f84c 1b04 	str.w	r1, [ip], #4
 80088ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80088d2:	dcec      	bgt.n	80088ae <__multadd+0x12>
 80088d4:	b30e      	cbz	r6, 800891a <__multadd+0x7e>
 80088d6:	68a3      	ldr	r3, [r4, #8]
 80088d8:	42ab      	cmp	r3, r5
 80088da:	dc19      	bgt.n	8008910 <__multadd+0x74>
 80088dc:	6861      	ldr	r1, [r4, #4]
 80088de:	4638      	mov	r0, r7
 80088e0:	3101      	adds	r1, #1
 80088e2:	f7ff ff79 	bl	80087d8 <_Balloc>
 80088e6:	4680      	mov	r8, r0
 80088e8:	b928      	cbnz	r0, 80088f6 <__multadd+0x5a>
 80088ea:	4602      	mov	r2, r0
 80088ec:	4b0c      	ldr	r3, [pc, #48]	; (8008920 <__multadd+0x84>)
 80088ee:	480d      	ldr	r0, [pc, #52]	; (8008924 <__multadd+0x88>)
 80088f0:	21b5      	movs	r1, #181	; 0xb5
 80088f2:	f000 fed3 	bl	800969c <__assert_func>
 80088f6:	6922      	ldr	r2, [r4, #16]
 80088f8:	3202      	adds	r2, #2
 80088fa:	f104 010c 	add.w	r1, r4, #12
 80088fe:	0092      	lsls	r2, r2, #2
 8008900:	300c      	adds	r0, #12
 8008902:	f7ff ff5b 	bl	80087bc <memcpy>
 8008906:	4621      	mov	r1, r4
 8008908:	4638      	mov	r0, r7
 800890a:	f7ff ffa5 	bl	8008858 <_Bfree>
 800890e:	4644      	mov	r4, r8
 8008910:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008914:	3501      	adds	r5, #1
 8008916:	615e      	str	r6, [r3, #20]
 8008918:	6125      	str	r5, [r4, #16]
 800891a:	4620      	mov	r0, r4
 800891c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008920:	0800a348 	.word	0x0800a348
 8008924:	0800a3d4 	.word	0x0800a3d4

08008928 <__s2b>:
 8008928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800892c:	460c      	mov	r4, r1
 800892e:	4615      	mov	r5, r2
 8008930:	461f      	mov	r7, r3
 8008932:	2209      	movs	r2, #9
 8008934:	3308      	adds	r3, #8
 8008936:	4606      	mov	r6, r0
 8008938:	fb93 f3f2 	sdiv	r3, r3, r2
 800893c:	2100      	movs	r1, #0
 800893e:	2201      	movs	r2, #1
 8008940:	429a      	cmp	r2, r3
 8008942:	db09      	blt.n	8008958 <__s2b+0x30>
 8008944:	4630      	mov	r0, r6
 8008946:	f7ff ff47 	bl	80087d8 <_Balloc>
 800894a:	b940      	cbnz	r0, 800895e <__s2b+0x36>
 800894c:	4602      	mov	r2, r0
 800894e:	4b19      	ldr	r3, [pc, #100]	; (80089b4 <__s2b+0x8c>)
 8008950:	4819      	ldr	r0, [pc, #100]	; (80089b8 <__s2b+0x90>)
 8008952:	21ce      	movs	r1, #206	; 0xce
 8008954:	f000 fea2 	bl	800969c <__assert_func>
 8008958:	0052      	lsls	r2, r2, #1
 800895a:	3101      	adds	r1, #1
 800895c:	e7f0      	b.n	8008940 <__s2b+0x18>
 800895e:	9b08      	ldr	r3, [sp, #32]
 8008960:	6143      	str	r3, [r0, #20]
 8008962:	2d09      	cmp	r5, #9
 8008964:	f04f 0301 	mov.w	r3, #1
 8008968:	6103      	str	r3, [r0, #16]
 800896a:	dd16      	ble.n	800899a <__s2b+0x72>
 800896c:	f104 0909 	add.w	r9, r4, #9
 8008970:	46c8      	mov	r8, r9
 8008972:	442c      	add	r4, r5
 8008974:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008978:	4601      	mov	r1, r0
 800897a:	3b30      	subs	r3, #48	; 0x30
 800897c:	220a      	movs	r2, #10
 800897e:	4630      	mov	r0, r6
 8008980:	f7ff ff8c 	bl	800889c <__multadd>
 8008984:	45a0      	cmp	r8, r4
 8008986:	d1f5      	bne.n	8008974 <__s2b+0x4c>
 8008988:	f1a5 0408 	sub.w	r4, r5, #8
 800898c:	444c      	add	r4, r9
 800898e:	1b2d      	subs	r5, r5, r4
 8008990:	1963      	adds	r3, r4, r5
 8008992:	42bb      	cmp	r3, r7
 8008994:	db04      	blt.n	80089a0 <__s2b+0x78>
 8008996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800899a:	340a      	adds	r4, #10
 800899c:	2509      	movs	r5, #9
 800899e:	e7f6      	b.n	800898e <__s2b+0x66>
 80089a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80089a4:	4601      	mov	r1, r0
 80089a6:	3b30      	subs	r3, #48	; 0x30
 80089a8:	220a      	movs	r2, #10
 80089aa:	4630      	mov	r0, r6
 80089ac:	f7ff ff76 	bl	800889c <__multadd>
 80089b0:	e7ee      	b.n	8008990 <__s2b+0x68>
 80089b2:	bf00      	nop
 80089b4:	0800a348 	.word	0x0800a348
 80089b8:	0800a3d4 	.word	0x0800a3d4

080089bc <__hi0bits>:
 80089bc:	0c03      	lsrs	r3, r0, #16
 80089be:	041b      	lsls	r3, r3, #16
 80089c0:	b9d3      	cbnz	r3, 80089f8 <__hi0bits+0x3c>
 80089c2:	0400      	lsls	r0, r0, #16
 80089c4:	2310      	movs	r3, #16
 80089c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80089ca:	bf04      	itt	eq
 80089cc:	0200      	lsleq	r0, r0, #8
 80089ce:	3308      	addeq	r3, #8
 80089d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80089d4:	bf04      	itt	eq
 80089d6:	0100      	lsleq	r0, r0, #4
 80089d8:	3304      	addeq	r3, #4
 80089da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80089de:	bf04      	itt	eq
 80089e0:	0080      	lsleq	r0, r0, #2
 80089e2:	3302      	addeq	r3, #2
 80089e4:	2800      	cmp	r0, #0
 80089e6:	db05      	blt.n	80089f4 <__hi0bits+0x38>
 80089e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80089ec:	f103 0301 	add.w	r3, r3, #1
 80089f0:	bf08      	it	eq
 80089f2:	2320      	moveq	r3, #32
 80089f4:	4618      	mov	r0, r3
 80089f6:	4770      	bx	lr
 80089f8:	2300      	movs	r3, #0
 80089fa:	e7e4      	b.n	80089c6 <__hi0bits+0xa>

080089fc <__lo0bits>:
 80089fc:	6803      	ldr	r3, [r0, #0]
 80089fe:	f013 0207 	ands.w	r2, r3, #7
 8008a02:	4601      	mov	r1, r0
 8008a04:	d00b      	beq.n	8008a1e <__lo0bits+0x22>
 8008a06:	07da      	lsls	r2, r3, #31
 8008a08:	d423      	bmi.n	8008a52 <__lo0bits+0x56>
 8008a0a:	0798      	lsls	r0, r3, #30
 8008a0c:	bf49      	itett	mi
 8008a0e:	085b      	lsrmi	r3, r3, #1
 8008a10:	089b      	lsrpl	r3, r3, #2
 8008a12:	2001      	movmi	r0, #1
 8008a14:	600b      	strmi	r3, [r1, #0]
 8008a16:	bf5c      	itt	pl
 8008a18:	600b      	strpl	r3, [r1, #0]
 8008a1a:	2002      	movpl	r0, #2
 8008a1c:	4770      	bx	lr
 8008a1e:	b298      	uxth	r0, r3
 8008a20:	b9a8      	cbnz	r0, 8008a4e <__lo0bits+0x52>
 8008a22:	0c1b      	lsrs	r3, r3, #16
 8008a24:	2010      	movs	r0, #16
 8008a26:	b2da      	uxtb	r2, r3
 8008a28:	b90a      	cbnz	r2, 8008a2e <__lo0bits+0x32>
 8008a2a:	3008      	adds	r0, #8
 8008a2c:	0a1b      	lsrs	r3, r3, #8
 8008a2e:	071a      	lsls	r2, r3, #28
 8008a30:	bf04      	itt	eq
 8008a32:	091b      	lsreq	r3, r3, #4
 8008a34:	3004      	addeq	r0, #4
 8008a36:	079a      	lsls	r2, r3, #30
 8008a38:	bf04      	itt	eq
 8008a3a:	089b      	lsreq	r3, r3, #2
 8008a3c:	3002      	addeq	r0, #2
 8008a3e:	07da      	lsls	r2, r3, #31
 8008a40:	d403      	bmi.n	8008a4a <__lo0bits+0x4e>
 8008a42:	085b      	lsrs	r3, r3, #1
 8008a44:	f100 0001 	add.w	r0, r0, #1
 8008a48:	d005      	beq.n	8008a56 <__lo0bits+0x5a>
 8008a4a:	600b      	str	r3, [r1, #0]
 8008a4c:	4770      	bx	lr
 8008a4e:	4610      	mov	r0, r2
 8008a50:	e7e9      	b.n	8008a26 <__lo0bits+0x2a>
 8008a52:	2000      	movs	r0, #0
 8008a54:	4770      	bx	lr
 8008a56:	2020      	movs	r0, #32
 8008a58:	4770      	bx	lr
	...

08008a5c <__i2b>:
 8008a5c:	b510      	push	{r4, lr}
 8008a5e:	460c      	mov	r4, r1
 8008a60:	2101      	movs	r1, #1
 8008a62:	f7ff feb9 	bl	80087d8 <_Balloc>
 8008a66:	4602      	mov	r2, r0
 8008a68:	b928      	cbnz	r0, 8008a76 <__i2b+0x1a>
 8008a6a:	4b05      	ldr	r3, [pc, #20]	; (8008a80 <__i2b+0x24>)
 8008a6c:	4805      	ldr	r0, [pc, #20]	; (8008a84 <__i2b+0x28>)
 8008a6e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008a72:	f000 fe13 	bl	800969c <__assert_func>
 8008a76:	2301      	movs	r3, #1
 8008a78:	6144      	str	r4, [r0, #20]
 8008a7a:	6103      	str	r3, [r0, #16]
 8008a7c:	bd10      	pop	{r4, pc}
 8008a7e:	bf00      	nop
 8008a80:	0800a348 	.word	0x0800a348
 8008a84:	0800a3d4 	.word	0x0800a3d4

08008a88 <__multiply>:
 8008a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a8c:	4691      	mov	r9, r2
 8008a8e:	690a      	ldr	r2, [r1, #16]
 8008a90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	bfb8      	it	lt
 8008a98:	460b      	movlt	r3, r1
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	bfbc      	itt	lt
 8008a9e:	464c      	movlt	r4, r9
 8008aa0:	4699      	movlt	r9, r3
 8008aa2:	6927      	ldr	r7, [r4, #16]
 8008aa4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008aa8:	68a3      	ldr	r3, [r4, #8]
 8008aaa:	6861      	ldr	r1, [r4, #4]
 8008aac:	eb07 060a 	add.w	r6, r7, sl
 8008ab0:	42b3      	cmp	r3, r6
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	bfb8      	it	lt
 8008ab6:	3101      	addlt	r1, #1
 8008ab8:	f7ff fe8e 	bl	80087d8 <_Balloc>
 8008abc:	b930      	cbnz	r0, 8008acc <__multiply+0x44>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	4b44      	ldr	r3, [pc, #272]	; (8008bd4 <__multiply+0x14c>)
 8008ac2:	4845      	ldr	r0, [pc, #276]	; (8008bd8 <__multiply+0x150>)
 8008ac4:	f240 115d 	movw	r1, #349	; 0x15d
 8008ac8:	f000 fde8 	bl	800969c <__assert_func>
 8008acc:	f100 0514 	add.w	r5, r0, #20
 8008ad0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ad4:	462b      	mov	r3, r5
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	4543      	cmp	r3, r8
 8008ada:	d321      	bcc.n	8008b20 <__multiply+0x98>
 8008adc:	f104 0314 	add.w	r3, r4, #20
 8008ae0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008ae4:	f109 0314 	add.w	r3, r9, #20
 8008ae8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008aec:	9202      	str	r2, [sp, #8]
 8008aee:	1b3a      	subs	r2, r7, r4
 8008af0:	3a15      	subs	r2, #21
 8008af2:	f022 0203 	bic.w	r2, r2, #3
 8008af6:	3204      	adds	r2, #4
 8008af8:	f104 0115 	add.w	r1, r4, #21
 8008afc:	428f      	cmp	r7, r1
 8008afe:	bf38      	it	cc
 8008b00:	2204      	movcc	r2, #4
 8008b02:	9201      	str	r2, [sp, #4]
 8008b04:	9a02      	ldr	r2, [sp, #8]
 8008b06:	9303      	str	r3, [sp, #12]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d80c      	bhi.n	8008b26 <__multiply+0x9e>
 8008b0c:	2e00      	cmp	r6, #0
 8008b0e:	dd03      	ble.n	8008b18 <__multiply+0x90>
 8008b10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d05a      	beq.n	8008bce <__multiply+0x146>
 8008b18:	6106      	str	r6, [r0, #16]
 8008b1a:	b005      	add	sp, #20
 8008b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b20:	f843 2b04 	str.w	r2, [r3], #4
 8008b24:	e7d8      	b.n	8008ad8 <__multiply+0x50>
 8008b26:	f8b3 a000 	ldrh.w	sl, [r3]
 8008b2a:	f1ba 0f00 	cmp.w	sl, #0
 8008b2e:	d024      	beq.n	8008b7a <__multiply+0xf2>
 8008b30:	f104 0e14 	add.w	lr, r4, #20
 8008b34:	46a9      	mov	r9, r5
 8008b36:	f04f 0c00 	mov.w	ip, #0
 8008b3a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008b3e:	f8d9 1000 	ldr.w	r1, [r9]
 8008b42:	fa1f fb82 	uxth.w	fp, r2
 8008b46:	b289      	uxth	r1, r1
 8008b48:	fb0a 110b 	mla	r1, sl, fp, r1
 8008b4c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008b50:	f8d9 2000 	ldr.w	r2, [r9]
 8008b54:	4461      	add	r1, ip
 8008b56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b5a:	fb0a c20b 	mla	r2, sl, fp, ip
 8008b5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008b62:	b289      	uxth	r1, r1
 8008b64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b68:	4577      	cmp	r7, lr
 8008b6a:	f849 1b04 	str.w	r1, [r9], #4
 8008b6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b72:	d8e2      	bhi.n	8008b3a <__multiply+0xb2>
 8008b74:	9a01      	ldr	r2, [sp, #4]
 8008b76:	f845 c002 	str.w	ip, [r5, r2]
 8008b7a:	9a03      	ldr	r2, [sp, #12]
 8008b7c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008b80:	3304      	adds	r3, #4
 8008b82:	f1b9 0f00 	cmp.w	r9, #0
 8008b86:	d020      	beq.n	8008bca <__multiply+0x142>
 8008b88:	6829      	ldr	r1, [r5, #0]
 8008b8a:	f104 0c14 	add.w	ip, r4, #20
 8008b8e:	46ae      	mov	lr, r5
 8008b90:	f04f 0a00 	mov.w	sl, #0
 8008b94:	f8bc b000 	ldrh.w	fp, [ip]
 8008b98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008b9c:	fb09 220b 	mla	r2, r9, fp, r2
 8008ba0:	4492      	add	sl, r2
 8008ba2:	b289      	uxth	r1, r1
 8008ba4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008ba8:	f84e 1b04 	str.w	r1, [lr], #4
 8008bac:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008bb0:	f8be 1000 	ldrh.w	r1, [lr]
 8008bb4:	0c12      	lsrs	r2, r2, #16
 8008bb6:	fb09 1102 	mla	r1, r9, r2, r1
 8008bba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008bbe:	4567      	cmp	r7, ip
 8008bc0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008bc4:	d8e6      	bhi.n	8008b94 <__multiply+0x10c>
 8008bc6:	9a01      	ldr	r2, [sp, #4]
 8008bc8:	50a9      	str	r1, [r5, r2]
 8008bca:	3504      	adds	r5, #4
 8008bcc:	e79a      	b.n	8008b04 <__multiply+0x7c>
 8008bce:	3e01      	subs	r6, #1
 8008bd0:	e79c      	b.n	8008b0c <__multiply+0x84>
 8008bd2:	bf00      	nop
 8008bd4:	0800a348 	.word	0x0800a348
 8008bd8:	0800a3d4 	.word	0x0800a3d4

08008bdc <__pow5mult>:
 8008bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008be0:	4615      	mov	r5, r2
 8008be2:	f012 0203 	ands.w	r2, r2, #3
 8008be6:	4606      	mov	r6, r0
 8008be8:	460f      	mov	r7, r1
 8008bea:	d007      	beq.n	8008bfc <__pow5mult+0x20>
 8008bec:	4c25      	ldr	r4, [pc, #148]	; (8008c84 <__pow5mult+0xa8>)
 8008bee:	3a01      	subs	r2, #1
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008bf6:	f7ff fe51 	bl	800889c <__multadd>
 8008bfa:	4607      	mov	r7, r0
 8008bfc:	10ad      	asrs	r5, r5, #2
 8008bfe:	d03d      	beq.n	8008c7c <__pow5mult+0xa0>
 8008c00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008c02:	b97c      	cbnz	r4, 8008c24 <__pow5mult+0x48>
 8008c04:	2010      	movs	r0, #16
 8008c06:	f7ff fdbf 	bl	8008788 <malloc>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	6270      	str	r0, [r6, #36]	; 0x24
 8008c0e:	b928      	cbnz	r0, 8008c1c <__pow5mult+0x40>
 8008c10:	4b1d      	ldr	r3, [pc, #116]	; (8008c88 <__pow5mult+0xac>)
 8008c12:	481e      	ldr	r0, [pc, #120]	; (8008c8c <__pow5mult+0xb0>)
 8008c14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008c18:	f000 fd40 	bl	800969c <__assert_func>
 8008c1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c20:	6004      	str	r4, [r0, #0]
 8008c22:	60c4      	str	r4, [r0, #12]
 8008c24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008c28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c2c:	b94c      	cbnz	r4, 8008c42 <__pow5mult+0x66>
 8008c2e:	f240 2171 	movw	r1, #625	; 0x271
 8008c32:	4630      	mov	r0, r6
 8008c34:	f7ff ff12 	bl	8008a5c <__i2b>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c3e:	4604      	mov	r4, r0
 8008c40:	6003      	str	r3, [r0, #0]
 8008c42:	f04f 0900 	mov.w	r9, #0
 8008c46:	07eb      	lsls	r3, r5, #31
 8008c48:	d50a      	bpl.n	8008c60 <__pow5mult+0x84>
 8008c4a:	4639      	mov	r1, r7
 8008c4c:	4622      	mov	r2, r4
 8008c4e:	4630      	mov	r0, r6
 8008c50:	f7ff ff1a 	bl	8008a88 <__multiply>
 8008c54:	4639      	mov	r1, r7
 8008c56:	4680      	mov	r8, r0
 8008c58:	4630      	mov	r0, r6
 8008c5a:	f7ff fdfd 	bl	8008858 <_Bfree>
 8008c5e:	4647      	mov	r7, r8
 8008c60:	106d      	asrs	r5, r5, #1
 8008c62:	d00b      	beq.n	8008c7c <__pow5mult+0xa0>
 8008c64:	6820      	ldr	r0, [r4, #0]
 8008c66:	b938      	cbnz	r0, 8008c78 <__pow5mult+0x9c>
 8008c68:	4622      	mov	r2, r4
 8008c6a:	4621      	mov	r1, r4
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	f7ff ff0b 	bl	8008a88 <__multiply>
 8008c72:	6020      	str	r0, [r4, #0]
 8008c74:	f8c0 9000 	str.w	r9, [r0]
 8008c78:	4604      	mov	r4, r0
 8008c7a:	e7e4      	b.n	8008c46 <__pow5mult+0x6a>
 8008c7c:	4638      	mov	r0, r7
 8008c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c82:	bf00      	nop
 8008c84:	0800a520 	.word	0x0800a520
 8008c88:	0800a2d6 	.word	0x0800a2d6
 8008c8c:	0800a3d4 	.word	0x0800a3d4

08008c90 <__lshift>:
 8008c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c94:	460c      	mov	r4, r1
 8008c96:	6849      	ldr	r1, [r1, #4]
 8008c98:	6923      	ldr	r3, [r4, #16]
 8008c9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c9e:	68a3      	ldr	r3, [r4, #8]
 8008ca0:	4607      	mov	r7, r0
 8008ca2:	4691      	mov	r9, r2
 8008ca4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ca8:	f108 0601 	add.w	r6, r8, #1
 8008cac:	42b3      	cmp	r3, r6
 8008cae:	db0b      	blt.n	8008cc8 <__lshift+0x38>
 8008cb0:	4638      	mov	r0, r7
 8008cb2:	f7ff fd91 	bl	80087d8 <_Balloc>
 8008cb6:	4605      	mov	r5, r0
 8008cb8:	b948      	cbnz	r0, 8008cce <__lshift+0x3e>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	4b2a      	ldr	r3, [pc, #168]	; (8008d68 <__lshift+0xd8>)
 8008cbe:	482b      	ldr	r0, [pc, #172]	; (8008d6c <__lshift+0xdc>)
 8008cc0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008cc4:	f000 fcea 	bl	800969c <__assert_func>
 8008cc8:	3101      	adds	r1, #1
 8008cca:	005b      	lsls	r3, r3, #1
 8008ccc:	e7ee      	b.n	8008cac <__lshift+0x1c>
 8008cce:	2300      	movs	r3, #0
 8008cd0:	f100 0114 	add.w	r1, r0, #20
 8008cd4:	f100 0210 	add.w	r2, r0, #16
 8008cd8:	4618      	mov	r0, r3
 8008cda:	4553      	cmp	r3, sl
 8008cdc:	db37      	blt.n	8008d4e <__lshift+0xbe>
 8008cde:	6920      	ldr	r0, [r4, #16]
 8008ce0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ce4:	f104 0314 	add.w	r3, r4, #20
 8008ce8:	f019 091f 	ands.w	r9, r9, #31
 8008cec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008cf0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008cf4:	d02f      	beq.n	8008d56 <__lshift+0xc6>
 8008cf6:	f1c9 0e20 	rsb	lr, r9, #32
 8008cfa:	468a      	mov	sl, r1
 8008cfc:	f04f 0c00 	mov.w	ip, #0
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	fa02 f209 	lsl.w	r2, r2, r9
 8008d06:	ea42 020c 	orr.w	r2, r2, ip
 8008d0a:	f84a 2b04 	str.w	r2, [sl], #4
 8008d0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d12:	4298      	cmp	r0, r3
 8008d14:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008d18:	d8f2      	bhi.n	8008d00 <__lshift+0x70>
 8008d1a:	1b03      	subs	r3, r0, r4
 8008d1c:	3b15      	subs	r3, #21
 8008d1e:	f023 0303 	bic.w	r3, r3, #3
 8008d22:	3304      	adds	r3, #4
 8008d24:	f104 0215 	add.w	r2, r4, #21
 8008d28:	4290      	cmp	r0, r2
 8008d2a:	bf38      	it	cc
 8008d2c:	2304      	movcc	r3, #4
 8008d2e:	f841 c003 	str.w	ip, [r1, r3]
 8008d32:	f1bc 0f00 	cmp.w	ip, #0
 8008d36:	d001      	beq.n	8008d3c <__lshift+0xac>
 8008d38:	f108 0602 	add.w	r6, r8, #2
 8008d3c:	3e01      	subs	r6, #1
 8008d3e:	4638      	mov	r0, r7
 8008d40:	612e      	str	r6, [r5, #16]
 8008d42:	4621      	mov	r1, r4
 8008d44:	f7ff fd88 	bl	8008858 <_Bfree>
 8008d48:	4628      	mov	r0, r5
 8008d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d4e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d52:	3301      	adds	r3, #1
 8008d54:	e7c1      	b.n	8008cda <__lshift+0x4a>
 8008d56:	3904      	subs	r1, #4
 8008d58:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d5c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d60:	4298      	cmp	r0, r3
 8008d62:	d8f9      	bhi.n	8008d58 <__lshift+0xc8>
 8008d64:	e7ea      	b.n	8008d3c <__lshift+0xac>
 8008d66:	bf00      	nop
 8008d68:	0800a348 	.word	0x0800a348
 8008d6c:	0800a3d4 	.word	0x0800a3d4

08008d70 <__mcmp>:
 8008d70:	b530      	push	{r4, r5, lr}
 8008d72:	6902      	ldr	r2, [r0, #16]
 8008d74:	690c      	ldr	r4, [r1, #16]
 8008d76:	1b12      	subs	r2, r2, r4
 8008d78:	d10e      	bne.n	8008d98 <__mcmp+0x28>
 8008d7a:	f100 0314 	add.w	r3, r0, #20
 8008d7e:	3114      	adds	r1, #20
 8008d80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008d84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008d88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008d8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008d90:	42a5      	cmp	r5, r4
 8008d92:	d003      	beq.n	8008d9c <__mcmp+0x2c>
 8008d94:	d305      	bcc.n	8008da2 <__mcmp+0x32>
 8008d96:	2201      	movs	r2, #1
 8008d98:	4610      	mov	r0, r2
 8008d9a:	bd30      	pop	{r4, r5, pc}
 8008d9c:	4283      	cmp	r3, r0
 8008d9e:	d3f3      	bcc.n	8008d88 <__mcmp+0x18>
 8008da0:	e7fa      	b.n	8008d98 <__mcmp+0x28>
 8008da2:	f04f 32ff 	mov.w	r2, #4294967295
 8008da6:	e7f7      	b.n	8008d98 <__mcmp+0x28>

08008da8 <__mdiff>:
 8008da8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	460c      	mov	r4, r1
 8008dae:	4606      	mov	r6, r0
 8008db0:	4611      	mov	r1, r2
 8008db2:	4620      	mov	r0, r4
 8008db4:	4690      	mov	r8, r2
 8008db6:	f7ff ffdb 	bl	8008d70 <__mcmp>
 8008dba:	1e05      	subs	r5, r0, #0
 8008dbc:	d110      	bne.n	8008de0 <__mdiff+0x38>
 8008dbe:	4629      	mov	r1, r5
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	f7ff fd09 	bl	80087d8 <_Balloc>
 8008dc6:	b930      	cbnz	r0, 8008dd6 <__mdiff+0x2e>
 8008dc8:	4b3a      	ldr	r3, [pc, #232]	; (8008eb4 <__mdiff+0x10c>)
 8008dca:	4602      	mov	r2, r0
 8008dcc:	f240 2132 	movw	r1, #562	; 0x232
 8008dd0:	4839      	ldr	r0, [pc, #228]	; (8008eb8 <__mdiff+0x110>)
 8008dd2:	f000 fc63 	bl	800969c <__assert_func>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ddc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de0:	bfa4      	itt	ge
 8008de2:	4643      	movge	r3, r8
 8008de4:	46a0      	movge	r8, r4
 8008de6:	4630      	mov	r0, r6
 8008de8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008dec:	bfa6      	itte	ge
 8008dee:	461c      	movge	r4, r3
 8008df0:	2500      	movge	r5, #0
 8008df2:	2501      	movlt	r5, #1
 8008df4:	f7ff fcf0 	bl	80087d8 <_Balloc>
 8008df8:	b920      	cbnz	r0, 8008e04 <__mdiff+0x5c>
 8008dfa:	4b2e      	ldr	r3, [pc, #184]	; (8008eb4 <__mdiff+0x10c>)
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008e02:	e7e5      	b.n	8008dd0 <__mdiff+0x28>
 8008e04:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008e08:	6926      	ldr	r6, [r4, #16]
 8008e0a:	60c5      	str	r5, [r0, #12]
 8008e0c:	f104 0914 	add.w	r9, r4, #20
 8008e10:	f108 0514 	add.w	r5, r8, #20
 8008e14:	f100 0e14 	add.w	lr, r0, #20
 8008e18:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008e1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008e20:	f108 0210 	add.w	r2, r8, #16
 8008e24:	46f2      	mov	sl, lr
 8008e26:	2100      	movs	r1, #0
 8008e28:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008e30:	fa1f f883 	uxth.w	r8, r3
 8008e34:	fa11 f18b 	uxtah	r1, r1, fp
 8008e38:	0c1b      	lsrs	r3, r3, #16
 8008e3a:	eba1 0808 	sub.w	r8, r1, r8
 8008e3e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e42:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008e46:	fa1f f888 	uxth.w	r8, r8
 8008e4a:	1419      	asrs	r1, r3, #16
 8008e4c:	454e      	cmp	r6, r9
 8008e4e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008e52:	f84a 3b04 	str.w	r3, [sl], #4
 8008e56:	d8e7      	bhi.n	8008e28 <__mdiff+0x80>
 8008e58:	1b33      	subs	r3, r6, r4
 8008e5a:	3b15      	subs	r3, #21
 8008e5c:	f023 0303 	bic.w	r3, r3, #3
 8008e60:	3304      	adds	r3, #4
 8008e62:	3415      	adds	r4, #21
 8008e64:	42a6      	cmp	r6, r4
 8008e66:	bf38      	it	cc
 8008e68:	2304      	movcc	r3, #4
 8008e6a:	441d      	add	r5, r3
 8008e6c:	4473      	add	r3, lr
 8008e6e:	469e      	mov	lr, r3
 8008e70:	462e      	mov	r6, r5
 8008e72:	4566      	cmp	r6, ip
 8008e74:	d30e      	bcc.n	8008e94 <__mdiff+0xec>
 8008e76:	f10c 0203 	add.w	r2, ip, #3
 8008e7a:	1b52      	subs	r2, r2, r5
 8008e7c:	f022 0203 	bic.w	r2, r2, #3
 8008e80:	3d03      	subs	r5, #3
 8008e82:	45ac      	cmp	ip, r5
 8008e84:	bf38      	it	cc
 8008e86:	2200      	movcc	r2, #0
 8008e88:	441a      	add	r2, r3
 8008e8a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008e8e:	b17b      	cbz	r3, 8008eb0 <__mdiff+0x108>
 8008e90:	6107      	str	r7, [r0, #16]
 8008e92:	e7a3      	b.n	8008ddc <__mdiff+0x34>
 8008e94:	f856 8b04 	ldr.w	r8, [r6], #4
 8008e98:	fa11 f288 	uxtah	r2, r1, r8
 8008e9c:	1414      	asrs	r4, r2, #16
 8008e9e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008ea2:	b292      	uxth	r2, r2
 8008ea4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008ea8:	f84e 2b04 	str.w	r2, [lr], #4
 8008eac:	1421      	asrs	r1, r4, #16
 8008eae:	e7e0      	b.n	8008e72 <__mdiff+0xca>
 8008eb0:	3f01      	subs	r7, #1
 8008eb2:	e7ea      	b.n	8008e8a <__mdiff+0xe2>
 8008eb4:	0800a348 	.word	0x0800a348
 8008eb8:	0800a3d4 	.word	0x0800a3d4

08008ebc <__ulp>:
 8008ebc:	b082      	sub	sp, #8
 8008ebe:	ed8d 0b00 	vstr	d0, [sp]
 8008ec2:	9b01      	ldr	r3, [sp, #4]
 8008ec4:	4912      	ldr	r1, [pc, #72]	; (8008f10 <__ulp+0x54>)
 8008ec6:	4019      	ands	r1, r3
 8008ec8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008ecc:	2900      	cmp	r1, #0
 8008ece:	dd05      	ble.n	8008edc <__ulp+0x20>
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	ec43 2b10 	vmov	d0, r2, r3
 8008ed8:	b002      	add	sp, #8
 8008eda:	4770      	bx	lr
 8008edc:	4249      	negs	r1, r1
 8008ede:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008ee2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008ee6:	f04f 0200 	mov.w	r2, #0
 8008eea:	f04f 0300 	mov.w	r3, #0
 8008eee:	da04      	bge.n	8008efa <__ulp+0x3e>
 8008ef0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008ef4:	fa41 f300 	asr.w	r3, r1, r0
 8008ef8:	e7ec      	b.n	8008ed4 <__ulp+0x18>
 8008efa:	f1a0 0114 	sub.w	r1, r0, #20
 8008efe:	291e      	cmp	r1, #30
 8008f00:	bfda      	itte	le
 8008f02:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008f06:	fa20 f101 	lsrle.w	r1, r0, r1
 8008f0a:	2101      	movgt	r1, #1
 8008f0c:	460a      	mov	r2, r1
 8008f0e:	e7e1      	b.n	8008ed4 <__ulp+0x18>
 8008f10:	7ff00000 	.word	0x7ff00000

08008f14 <__b2d>:
 8008f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f16:	6905      	ldr	r5, [r0, #16]
 8008f18:	f100 0714 	add.w	r7, r0, #20
 8008f1c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008f20:	1f2e      	subs	r6, r5, #4
 8008f22:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008f26:	4620      	mov	r0, r4
 8008f28:	f7ff fd48 	bl	80089bc <__hi0bits>
 8008f2c:	f1c0 0320 	rsb	r3, r0, #32
 8008f30:	280a      	cmp	r0, #10
 8008f32:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008fb0 <__b2d+0x9c>
 8008f36:	600b      	str	r3, [r1, #0]
 8008f38:	dc14      	bgt.n	8008f64 <__b2d+0x50>
 8008f3a:	f1c0 0e0b 	rsb	lr, r0, #11
 8008f3e:	fa24 f10e 	lsr.w	r1, r4, lr
 8008f42:	42b7      	cmp	r7, r6
 8008f44:	ea41 030c 	orr.w	r3, r1, ip
 8008f48:	bf34      	ite	cc
 8008f4a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008f4e:	2100      	movcs	r1, #0
 8008f50:	3015      	adds	r0, #21
 8008f52:	fa04 f000 	lsl.w	r0, r4, r0
 8008f56:	fa21 f10e 	lsr.w	r1, r1, lr
 8008f5a:	ea40 0201 	orr.w	r2, r0, r1
 8008f5e:	ec43 2b10 	vmov	d0, r2, r3
 8008f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f64:	42b7      	cmp	r7, r6
 8008f66:	bf3a      	itte	cc
 8008f68:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008f6c:	f1a5 0608 	subcc.w	r6, r5, #8
 8008f70:	2100      	movcs	r1, #0
 8008f72:	380b      	subs	r0, #11
 8008f74:	d017      	beq.n	8008fa6 <__b2d+0x92>
 8008f76:	f1c0 0c20 	rsb	ip, r0, #32
 8008f7a:	fa04 f500 	lsl.w	r5, r4, r0
 8008f7e:	42be      	cmp	r6, r7
 8008f80:	fa21 f40c 	lsr.w	r4, r1, ip
 8008f84:	ea45 0504 	orr.w	r5, r5, r4
 8008f88:	bf8c      	ite	hi
 8008f8a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008f8e:	2400      	movls	r4, #0
 8008f90:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008f94:	fa01 f000 	lsl.w	r0, r1, r0
 8008f98:	fa24 f40c 	lsr.w	r4, r4, ip
 8008f9c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008fa0:	ea40 0204 	orr.w	r2, r0, r4
 8008fa4:	e7db      	b.n	8008f5e <__b2d+0x4a>
 8008fa6:	ea44 030c 	orr.w	r3, r4, ip
 8008faa:	460a      	mov	r2, r1
 8008fac:	e7d7      	b.n	8008f5e <__b2d+0x4a>
 8008fae:	bf00      	nop
 8008fb0:	3ff00000 	.word	0x3ff00000

08008fb4 <__d2b>:
 8008fb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008fb8:	4689      	mov	r9, r1
 8008fba:	2101      	movs	r1, #1
 8008fbc:	ec57 6b10 	vmov	r6, r7, d0
 8008fc0:	4690      	mov	r8, r2
 8008fc2:	f7ff fc09 	bl	80087d8 <_Balloc>
 8008fc6:	4604      	mov	r4, r0
 8008fc8:	b930      	cbnz	r0, 8008fd8 <__d2b+0x24>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	4b25      	ldr	r3, [pc, #148]	; (8009064 <__d2b+0xb0>)
 8008fce:	4826      	ldr	r0, [pc, #152]	; (8009068 <__d2b+0xb4>)
 8008fd0:	f240 310a 	movw	r1, #778	; 0x30a
 8008fd4:	f000 fb62 	bl	800969c <__assert_func>
 8008fd8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008fdc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008fe0:	bb35      	cbnz	r5, 8009030 <__d2b+0x7c>
 8008fe2:	2e00      	cmp	r6, #0
 8008fe4:	9301      	str	r3, [sp, #4]
 8008fe6:	d028      	beq.n	800903a <__d2b+0x86>
 8008fe8:	4668      	mov	r0, sp
 8008fea:	9600      	str	r6, [sp, #0]
 8008fec:	f7ff fd06 	bl	80089fc <__lo0bits>
 8008ff0:	9900      	ldr	r1, [sp, #0]
 8008ff2:	b300      	cbz	r0, 8009036 <__d2b+0x82>
 8008ff4:	9a01      	ldr	r2, [sp, #4]
 8008ff6:	f1c0 0320 	rsb	r3, r0, #32
 8008ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8008ffe:	430b      	orrs	r3, r1
 8009000:	40c2      	lsrs	r2, r0
 8009002:	6163      	str	r3, [r4, #20]
 8009004:	9201      	str	r2, [sp, #4]
 8009006:	9b01      	ldr	r3, [sp, #4]
 8009008:	61a3      	str	r3, [r4, #24]
 800900a:	2b00      	cmp	r3, #0
 800900c:	bf14      	ite	ne
 800900e:	2202      	movne	r2, #2
 8009010:	2201      	moveq	r2, #1
 8009012:	6122      	str	r2, [r4, #16]
 8009014:	b1d5      	cbz	r5, 800904c <__d2b+0x98>
 8009016:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800901a:	4405      	add	r5, r0
 800901c:	f8c9 5000 	str.w	r5, [r9]
 8009020:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009024:	f8c8 0000 	str.w	r0, [r8]
 8009028:	4620      	mov	r0, r4
 800902a:	b003      	add	sp, #12
 800902c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009030:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009034:	e7d5      	b.n	8008fe2 <__d2b+0x2e>
 8009036:	6161      	str	r1, [r4, #20]
 8009038:	e7e5      	b.n	8009006 <__d2b+0x52>
 800903a:	a801      	add	r0, sp, #4
 800903c:	f7ff fcde 	bl	80089fc <__lo0bits>
 8009040:	9b01      	ldr	r3, [sp, #4]
 8009042:	6163      	str	r3, [r4, #20]
 8009044:	2201      	movs	r2, #1
 8009046:	6122      	str	r2, [r4, #16]
 8009048:	3020      	adds	r0, #32
 800904a:	e7e3      	b.n	8009014 <__d2b+0x60>
 800904c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009050:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009054:	f8c9 0000 	str.w	r0, [r9]
 8009058:	6918      	ldr	r0, [r3, #16]
 800905a:	f7ff fcaf 	bl	80089bc <__hi0bits>
 800905e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009062:	e7df      	b.n	8009024 <__d2b+0x70>
 8009064:	0800a348 	.word	0x0800a348
 8009068:	0800a3d4 	.word	0x0800a3d4

0800906c <__ratio>:
 800906c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009070:	4688      	mov	r8, r1
 8009072:	4669      	mov	r1, sp
 8009074:	4681      	mov	r9, r0
 8009076:	f7ff ff4d 	bl	8008f14 <__b2d>
 800907a:	a901      	add	r1, sp, #4
 800907c:	4640      	mov	r0, r8
 800907e:	ec55 4b10 	vmov	r4, r5, d0
 8009082:	f7ff ff47 	bl	8008f14 <__b2d>
 8009086:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800908a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800908e:	eba3 0c02 	sub.w	ip, r3, r2
 8009092:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009096:	1a9b      	subs	r3, r3, r2
 8009098:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800909c:	ec51 0b10 	vmov	r0, r1, d0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	bfd6      	itet	le
 80090a4:	460a      	movle	r2, r1
 80090a6:	462a      	movgt	r2, r5
 80090a8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80090ac:	468b      	mov	fp, r1
 80090ae:	462f      	mov	r7, r5
 80090b0:	bfd4      	ite	le
 80090b2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80090b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80090ba:	4620      	mov	r0, r4
 80090bc:	ee10 2a10 	vmov	r2, s0
 80090c0:	465b      	mov	r3, fp
 80090c2:	4639      	mov	r1, r7
 80090c4:	f7f7 fbc2 	bl	800084c <__aeabi_ddiv>
 80090c8:	ec41 0b10 	vmov	d0, r0, r1
 80090cc:	b003      	add	sp, #12
 80090ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080090d2 <__copybits>:
 80090d2:	3901      	subs	r1, #1
 80090d4:	b570      	push	{r4, r5, r6, lr}
 80090d6:	1149      	asrs	r1, r1, #5
 80090d8:	6914      	ldr	r4, [r2, #16]
 80090da:	3101      	adds	r1, #1
 80090dc:	f102 0314 	add.w	r3, r2, #20
 80090e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80090e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80090e8:	1f05      	subs	r5, r0, #4
 80090ea:	42a3      	cmp	r3, r4
 80090ec:	d30c      	bcc.n	8009108 <__copybits+0x36>
 80090ee:	1aa3      	subs	r3, r4, r2
 80090f0:	3b11      	subs	r3, #17
 80090f2:	f023 0303 	bic.w	r3, r3, #3
 80090f6:	3211      	adds	r2, #17
 80090f8:	42a2      	cmp	r2, r4
 80090fa:	bf88      	it	hi
 80090fc:	2300      	movhi	r3, #0
 80090fe:	4418      	add	r0, r3
 8009100:	2300      	movs	r3, #0
 8009102:	4288      	cmp	r0, r1
 8009104:	d305      	bcc.n	8009112 <__copybits+0x40>
 8009106:	bd70      	pop	{r4, r5, r6, pc}
 8009108:	f853 6b04 	ldr.w	r6, [r3], #4
 800910c:	f845 6f04 	str.w	r6, [r5, #4]!
 8009110:	e7eb      	b.n	80090ea <__copybits+0x18>
 8009112:	f840 3b04 	str.w	r3, [r0], #4
 8009116:	e7f4      	b.n	8009102 <__copybits+0x30>

08009118 <__any_on>:
 8009118:	f100 0214 	add.w	r2, r0, #20
 800911c:	6900      	ldr	r0, [r0, #16]
 800911e:	114b      	asrs	r3, r1, #5
 8009120:	4298      	cmp	r0, r3
 8009122:	b510      	push	{r4, lr}
 8009124:	db11      	blt.n	800914a <__any_on+0x32>
 8009126:	dd0a      	ble.n	800913e <__any_on+0x26>
 8009128:	f011 011f 	ands.w	r1, r1, #31
 800912c:	d007      	beq.n	800913e <__any_on+0x26>
 800912e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009132:	fa24 f001 	lsr.w	r0, r4, r1
 8009136:	fa00 f101 	lsl.w	r1, r0, r1
 800913a:	428c      	cmp	r4, r1
 800913c:	d10b      	bne.n	8009156 <__any_on+0x3e>
 800913e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009142:	4293      	cmp	r3, r2
 8009144:	d803      	bhi.n	800914e <__any_on+0x36>
 8009146:	2000      	movs	r0, #0
 8009148:	bd10      	pop	{r4, pc}
 800914a:	4603      	mov	r3, r0
 800914c:	e7f7      	b.n	800913e <__any_on+0x26>
 800914e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009152:	2900      	cmp	r1, #0
 8009154:	d0f5      	beq.n	8009142 <__any_on+0x2a>
 8009156:	2001      	movs	r0, #1
 8009158:	e7f6      	b.n	8009148 <__any_on+0x30>

0800915a <_calloc_r>:
 800915a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800915c:	fba1 2402 	umull	r2, r4, r1, r2
 8009160:	b94c      	cbnz	r4, 8009176 <_calloc_r+0x1c>
 8009162:	4611      	mov	r1, r2
 8009164:	9201      	str	r2, [sp, #4]
 8009166:	f000 f87b 	bl	8009260 <_malloc_r>
 800916a:	9a01      	ldr	r2, [sp, #4]
 800916c:	4605      	mov	r5, r0
 800916e:	b930      	cbnz	r0, 800917e <_calloc_r+0x24>
 8009170:	4628      	mov	r0, r5
 8009172:	b003      	add	sp, #12
 8009174:	bd30      	pop	{r4, r5, pc}
 8009176:	220c      	movs	r2, #12
 8009178:	6002      	str	r2, [r0, #0]
 800917a:	2500      	movs	r5, #0
 800917c:	e7f8      	b.n	8009170 <_calloc_r+0x16>
 800917e:	4621      	mov	r1, r4
 8009180:	f7fc fb44 	bl	800580c <memset>
 8009184:	e7f4      	b.n	8009170 <_calloc_r+0x16>
	...

08009188 <_free_r>:
 8009188:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800918a:	2900      	cmp	r1, #0
 800918c:	d044      	beq.n	8009218 <_free_r+0x90>
 800918e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009192:	9001      	str	r0, [sp, #4]
 8009194:	2b00      	cmp	r3, #0
 8009196:	f1a1 0404 	sub.w	r4, r1, #4
 800919a:	bfb8      	it	lt
 800919c:	18e4      	addlt	r4, r4, r3
 800919e:	f000 fc81 	bl	8009aa4 <__malloc_lock>
 80091a2:	4a1e      	ldr	r2, [pc, #120]	; (800921c <_free_r+0x94>)
 80091a4:	9801      	ldr	r0, [sp, #4]
 80091a6:	6813      	ldr	r3, [r2, #0]
 80091a8:	b933      	cbnz	r3, 80091b8 <_free_r+0x30>
 80091aa:	6063      	str	r3, [r4, #4]
 80091ac:	6014      	str	r4, [r2, #0]
 80091ae:	b003      	add	sp, #12
 80091b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091b4:	f000 bc7c 	b.w	8009ab0 <__malloc_unlock>
 80091b8:	42a3      	cmp	r3, r4
 80091ba:	d908      	bls.n	80091ce <_free_r+0x46>
 80091bc:	6825      	ldr	r5, [r4, #0]
 80091be:	1961      	adds	r1, r4, r5
 80091c0:	428b      	cmp	r3, r1
 80091c2:	bf01      	itttt	eq
 80091c4:	6819      	ldreq	r1, [r3, #0]
 80091c6:	685b      	ldreq	r3, [r3, #4]
 80091c8:	1949      	addeq	r1, r1, r5
 80091ca:	6021      	streq	r1, [r4, #0]
 80091cc:	e7ed      	b.n	80091aa <_free_r+0x22>
 80091ce:	461a      	mov	r2, r3
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	b10b      	cbz	r3, 80091d8 <_free_r+0x50>
 80091d4:	42a3      	cmp	r3, r4
 80091d6:	d9fa      	bls.n	80091ce <_free_r+0x46>
 80091d8:	6811      	ldr	r1, [r2, #0]
 80091da:	1855      	adds	r5, r2, r1
 80091dc:	42a5      	cmp	r5, r4
 80091de:	d10b      	bne.n	80091f8 <_free_r+0x70>
 80091e0:	6824      	ldr	r4, [r4, #0]
 80091e2:	4421      	add	r1, r4
 80091e4:	1854      	adds	r4, r2, r1
 80091e6:	42a3      	cmp	r3, r4
 80091e8:	6011      	str	r1, [r2, #0]
 80091ea:	d1e0      	bne.n	80091ae <_free_r+0x26>
 80091ec:	681c      	ldr	r4, [r3, #0]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	6053      	str	r3, [r2, #4]
 80091f2:	4421      	add	r1, r4
 80091f4:	6011      	str	r1, [r2, #0]
 80091f6:	e7da      	b.n	80091ae <_free_r+0x26>
 80091f8:	d902      	bls.n	8009200 <_free_r+0x78>
 80091fa:	230c      	movs	r3, #12
 80091fc:	6003      	str	r3, [r0, #0]
 80091fe:	e7d6      	b.n	80091ae <_free_r+0x26>
 8009200:	6825      	ldr	r5, [r4, #0]
 8009202:	1961      	adds	r1, r4, r5
 8009204:	428b      	cmp	r3, r1
 8009206:	bf04      	itt	eq
 8009208:	6819      	ldreq	r1, [r3, #0]
 800920a:	685b      	ldreq	r3, [r3, #4]
 800920c:	6063      	str	r3, [r4, #4]
 800920e:	bf04      	itt	eq
 8009210:	1949      	addeq	r1, r1, r5
 8009212:	6021      	streq	r1, [r4, #0]
 8009214:	6054      	str	r4, [r2, #4]
 8009216:	e7ca      	b.n	80091ae <_free_r+0x26>
 8009218:	b003      	add	sp, #12
 800921a:	bd30      	pop	{r4, r5, pc}
 800921c:	20000854 	.word	0x20000854

08009220 <sbrk_aligned>:
 8009220:	b570      	push	{r4, r5, r6, lr}
 8009222:	4e0e      	ldr	r6, [pc, #56]	; (800925c <sbrk_aligned+0x3c>)
 8009224:	460c      	mov	r4, r1
 8009226:	6831      	ldr	r1, [r6, #0]
 8009228:	4605      	mov	r5, r0
 800922a:	b911      	cbnz	r1, 8009232 <sbrk_aligned+0x12>
 800922c:	f000 fa04 	bl	8009638 <_sbrk_r>
 8009230:	6030      	str	r0, [r6, #0]
 8009232:	4621      	mov	r1, r4
 8009234:	4628      	mov	r0, r5
 8009236:	f000 f9ff 	bl	8009638 <_sbrk_r>
 800923a:	1c43      	adds	r3, r0, #1
 800923c:	d00a      	beq.n	8009254 <sbrk_aligned+0x34>
 800923e:	1cc4      	adds	r4, r0, #3
 8009240:	f024 0403 	bic.w	r4, r4, #3
 8009244:	42a0      	cmp	r0, r4
 8009246:	d007      	beq.n	8009258 <sbrk_aligned+0x38>
 8009248:	1a21      	subs	r1, r4, r0
 800924a:	4628      	mov	r0, r5
 800924c:	f000 f9f4 	bl	8009638 <_sbrk_r>
 8009250:	3001      	adds	r0, #1
 8009252:	d101      	bne.n	8009258 <sbrk_aligned+0x38>
 8009254:	f04f 34ff 	mov.w	r4, #4294967295
 8009258:	4620      	mov	r0, r4
 800925a:	bd70      	pop	{r4, r5, r6, pc}
 800925c:	20000858 	.word	0x20000858

08009260 <_malloc_r>:
 8009260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009264:	1ccd      	adds	r5, r1, #3
 8009266:	f025 0503 	bic.w	r5, r5, #3
 800926a:	3508      	adds	r5, #8
 800926c:	2d0c      	cmp	r5, #12
 800926e:	bf38      	it	cc
 8009270:	250c      	movcc	r5, #12
 8009272:	2d00      	cmp	r5, #0
 8009274:	4607      	mov	r7, r0
 8009276:	db01      	blt.n	800927c <_malloc_r+0x1c>
 8009278:	42a9      	cmp	r1, r5
 800927a:	d905      	bls.n	8009288 <_malloc_r+0x28>
 800927c:	230c      	movs	r3, #12
 800927e:	603b      	str	r3, [r7, #0]
 8009280:	2600      	movs	r6, #0
 8009282:	4630      	mov	r0, r6
 8009284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009288:	4e2e      	ldr	r6, [pc, #184]	; (8009344 <_malloc_r+0xe4>)
 800928a:	f000 fc0b 	bl	8009aa4 <__malloc_lock>
 800928e:	6833      	ldr	r3, [r6, #0]
 8009290:	461c      	mov	r4, r3
 8009292:	bb34      	cbnz	r4, 80092e2 <_malloc_r+0x82>
 8009294:	4629      	mov	r1, r5
 8009296:	4638      	mov	r0, r7
 8009298:	f7ff ffc2 	bl	8009220 <sbrk_aligned>
 800929c:	1c43      	adds	r3, r0, #1
 800929e:	4604      	mov	r4, r0
 80092a0:	d14d      	bne.n	800933e <_malloc_r+0xde>
 80092a2:	6834      	ldr	r4, [r6, #0]
 80092a4:	4626      	mov	r6, r4
 80092a6:	2e00      	cmp	r6, #0
 80092a8:	d140      	bne.n	800932c <_malloc_r+0xcc>
 80092aa:	6823      	ldr	r3, [r4, #0]
 80092ac:	4631      	mov	r1, r6
 80092ae:	4638      	mov	r0, r7
 80092b0:	eb04 0803 	add.w	r8, r4, r3
 80092b4:	f000 f9c0 	bl	8009638 <_sbrk_r>
 80092b8:	4580      	cmp	r8, r0
 80092ba:	d13a      	bne.n	8009332 <_malloc_r+0xd2>
 80092bc:	6821      	ldr	r1, [r4, #0]
 80092be:	3503      	adds	r5, #3
 80092c0:	1a6d      	subs	r5, r5, r1
 80092c2:	f025 0503 	bic.w	r5, r5, #3
 80092c6:	3508      	adds	r5, #8
 80092c8:	2d0c      	cmp	r5, #12
 80092ca:	bf38      	it	cc
 80092cc:	250c      	movcc	r5, #12
 80092ce:	4629      	mov	r1, r5
 80092d0:	4638      	mov	r0, r7
 80092d2:	f7ff ffa5 	bl	8009220 <sbrk_aligned>
 80092d6:	3001      	adds	r0, #1
 80092d8:	d02b      	beq.n	8009332 <_malloc_r+0xd2>
 80092da:	6823      	ldr	r3, [r4, #0]
 80092dc:	442b      	add	r3, r5
 80092de:	6023      	str	r3, [r4, #0]
 80092e0:	e00e      	b.n	8009300 <_malloc_r+0xa0>
 80092e2:	6822      	ldr	r2, [r4, #0]
 80092e4:	1b52      	subs	r2, r2, r5
 80092e6:	d41e      	bmi.n	8009326 <_malloc_r+0xc6>
 80092e8:	2a0b      	cmp	r2, #11
 80092ea:	d916      	bls.n	800931a <_malloc_r+0xba>
 80092ec:	1961      	adds	r1, r4, r5
 80092ee:	42a3      	cmp	r3, r4
 80092f0:	6025      	str	r5, [r4, #0]
 80092f2:	bf18      	it	ne
 80092f4:	6059      	strne	r1, [r3, #4]
 80092f6:	6863      	ldr	r3, [r4, #4]
 80092f8:	bf08      	it	eq
 80092fa:	6031      	streq	r1, [r6, #0]
 80092fc:	5162      	str	r2, [r4, r5]
 80092fe:	604b      	str	r3, [r1, #4]
 8009300:	4638      	mov	r0, r7
 8009302:	f104 060b 	add.w	r6, r4, #11
 8009306:	f000 fbd3 	bl	8009ab0 <__malloc_unlock>
 800930a:	f026 0607 	bic.w	r6, r6, #7
 800930e:	1d23      	adds	r3, r4, #4
 8009310:	1af2      	subs	r2, r6, r3
 8009312:	d0b6      	beq.n	8009282 <_malloc_r+0x22>
 8009314:	1b9b      	subs	r3, r3, r6
 8009316:	50a3      	str	r3, [r4, r2]
 8009318:	e7b3      	b.n	8009282 <_malloc_r+0x22>
 800931a:	6862      	ldr	r2, [r4, #4]
 800931c:	42a3      	cmp	r3, r4
 800931e:	bf0c      	ite	eq
 8009320:	6032      	streq	r2, [r6, #0]
 8009322:	605a      	strne	r2, [r3, #4]
 8009324:	e7ec      	b.n	8009300 <_malloc_r+0xa0>
 8009326:	4623      	mov	r3, r4
 8009328:	6864      	ldr	r4, [r4, #4]
 800932a:	e7b2      	b.n	8009292 <_malloc_r+0x32>
 800932c:	4634      	mov	r4, r6
 800932e:	6876      	ldr	r6, [r6, #4]
 8009330:	e7b9      	b.n	80092a6 <_malloc_r+0x46>
 8009332:	230c      	movs	r3, #12
 8009334:	603b      	str	r3, [r7, #0]
 8009336:	4638      	mov	r0, r7
 8009338:	f000 fbba 	bl	8009ab0 <__malloc_unlock>
 800933c:	e7a1      	b.n	8009282 <_malloc_r+0x22>
 800933e:	6025      	str	r5, [r4, #0]
 8009340:	e7de      	b.n	8009300 <_malloc_r+0xa0>
 8009342:	bf00      	nop
 8009344:	20000854 	.word	0x20000854

08009348 <__ssputs_r>:
 8009348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800934c:	688e      	ldr	r6, [r1, #8]
 800934e:	429e      	cmp	r6, r3
 8009350:	4682      	mov	sl, r0
 8009352:	460c      	mov	r4, r1
 8009354:	4690      	mov	r8, r2
 8009356:	461f      	mov	r7, r3
 8009358:	d838      	bhi.n	80093cc <__ssputs_r+0x84>
 800935a:	898a      	ldrh	r2, [r1, #12]
 800935c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009360:	d032      	beq.n	80093c8 <__ssputs_r+0x80>
 8009362:	6825      	ldr	r5, [r4, #0]
 8009364:	6909      	ldr	r1, [r1, #16]
 8009366:	eba5 0901 	sub.w	r9, r5, r1
 800936a:	6965      	ldr	r5, [r4, #20]
 800936c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009370:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009374:	3301      	adds	r3, #1
 8009376:	444b      	add	r3, r9
 8009378:	106d      	asrs	r5, r5, #1
 800937a:	429d      	cmp	r5, r3
 800937c:	bf38      	it	cc
 800937e:	461d      	movcc	r5, r3
 8009380:	0553      	lsls	r3, r2, #21
 8009382:	d531      	bpl.n	80093e8 <__ssputs_r+0xa0>
 8009384:	4629      	mov	r1, r5
 8009386:	f7ff ff6b 	bl	8009260 <_malloc_r>
 800938a:	4606      	mov	r6, r0
 800938c:	b950      	cbnz	r0, 80093a4 <__ssputs_r+0x5c>
 800938e:	230c      	movs	r3, #12
 8009390:	f8ca 3000 	str.w	r3, [sl]
 8009394:	89a3      	ldrh	r3, [r4, #12]
 8009396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800939a:	81a3      	strh	r3, [r4, #12]
 800939c:	f04f 30ff 	mov.w	r0, #4294967295
 80093a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093a4:	6921      	ldr	r1, [r4, #16]
 80093a6:	464a      	mov	r2, r9
 80093a8:	f7ff fa08 	bl	80087bc <memcpy>
 80093ac:	89a3      	ldrh	r3, [r4, #12]
 80093ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80093b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093b6:	81a3      	strh	r3, [r4, #12]
 80093b8:	6126      	str	r6, [r4, #16]
 80093ba:	6165      	str	r5, [r4, #20]
 80093bc:	444e      	add	r6, r9
 80093be:	eba5 0509 	sub.w	r5, r5, r9
 80093c2:	6026      	str	r6, [r4, #0]
 80093c4:	60a5      	str	r5, [r4, #8]
 80093c6:	463e      	mov	r6, r7
 80093c8:	42be      	cmp	r6, r7
 80093ca:	d900      	bls.n	80093ce <__ssputs_r+0x86>
 80093cc:	463e      	mov	r6, r7
 80093ce:	6820      	ldr	r0, [r4, #0]
 80093d0:	4632      	mov	r2, r6
 80093d2:	4641      	mov	r1, r8
 80093d4:	f000 fb4c 	bl	8009a70 <memmove>
 80093d8:	68a3      	ldr	r3, [r4, #8]
 80093da:	1b9b      	subs	r3, r3, r6
 80093dc:	60a3      	str	r3, [r4, #8]
 80093de:	6823      	ldr	r3, [r4, #0]
 80093e0:	4433      	add	r3, r6
 80093e2:	6023      	str	r3, [r4, #0]
 80093e4:	2000      	movs	r0, #0
 80093e6:	e7db      	b.n	80093a0 <__ssputs_r+0x58>
 80093e8:	462a      	mov	r2, r5
 80093ea:	f000 fb67 	bl	8009abc <_realloc_r>
 80093ee:	4606      	mov	r6, r0
 80093f0:	2800      	cmp	r0, #0
 80093f2:	d1e1      	bne.n	80093b8 <__ssputs_r+0x70>
 80093f4:	6921      	ldr	r1, [r4, #16]
 80093f6:	4650      	mov	r0, sl
 80093f8:	f7ff fec6 	bl	8009188 <_free_r>
 80093fc:	e7c7      	b.n	800938e <__ssputs_r+0x46>
	...

08009400 <_svfiprintf_r>:
 8009400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009404:	4698      	mov	r8, r3
 8009406:	898b      	ldrh	r3, [r1, #12]
 8009408:	061b      	lsls	r3, r3, #24
 800940a:	b09d      	sub	sp, #116	; 0x74
 800940c:	4607      	mov	r7, r0
 800940e:	460d      	mov	r5, r1
 8009410:	4614      	mov	r4, r2
 8009412:	d50e      	bpl.n	8009432 <_svfiprintf_r+0x32>
 8009414:	690b      	ldr	r3, [r1, #16]
 8009416:	b963      	cbnz	r3, 8009432 <_svfiprintf_r+0x32>
 8009418:	2140      	movs	r1, #64	; 0x40
 800941a:	f7ff ff21 	bl	8009260 <_malloc_r>
 800941e:	6028      	str	r0, [r5, #0]
 8009420:	6128      	str	r0, [r5, #16]
 8009422:	b920      	cbnz	r0, 800942e <_svfiprintf_r+0x2e>
 8009424:	230c      	movs	r3, #12
 8009426:	603b      	str	r3, [r7, #0]
 8009428:	f04f 30ff 	mov.w	r0, #4294967295
 800942c:	e0d1      	b.n	80095d2 <_svfiprintf_r+0x1d2>
 800942e:	2340      	movs	r3, #64	; 0x40
 8009430:	616b      	str	r3, [r5, #20]
 8009432:	2300      	movs	r3, #0
 8009434:	9309      	str	r3, [sp, #36]	; 0x24
 8009436:	2320      	movs	r3, #32
 8009438:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800943c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009440:	2330      	movs	r3, #48	; 0x30
 8009442:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80095ec <_svfiprintf_r+0x1ec>
 8009446:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800944a:	f04f 0901 	mov.w	r9, #1
 800944e:	4623      	mov	r3, r4
 8009450:	469a      	mov	sl, r3
 8009452:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009456:	b10a      	cbz	r2, 800945c <_svfiprintf_r+0x5c>
 8009458:	2a25      	cmp	r2, #37	; 0x25
 800945a:	d1f9      	bne.n	8009450 <_svfiprintf_r+0x50>
 800945c:	ebba 0b04 	subs.w	fp, sl, r4
 8009460:	d00b      	beq.n	800947a <_svfiprintf_r+0x7a>
 8009462:	465b      	mov	r3, fp
 8009464:	4622      	mov	r2, r4
 8009466:	4629      	mov	r1, r5
 8009468:	4638      	mov	r0, r7
 800946a:	f7ff ff6d 	bl	8009348 <__ssputs_r>
 800946e:	3001      	adds	r0, #1
 8009470:	f000 80aa 	beq.w	80095c8 <_svfiprintf_r+0x1c8>
 8009474:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009476:	445a      	add	r2, fp
 8009478:	9209      	str	r2, [sp, #36]	; 0x24
 800947a:	f89a 3000 	ldrb.w	r3, [sl]
 800947e:	2b00      	cmp	r3, #0
 8009480:	f000 80a2 	beq.w	80095c8 <_svfiprintf_r+0x1c8>
 8009484:	2300      	movs	r3, #0
 8009486:	f04f 32ff 	mov.w	r2, #4294967295
 800948a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800948e:	f10a 0a01 	add.w	sl, sl, #1
 8009492:	9304      	str	r3, [sp, #16]
 8009494:	9307      	str	r3, [sp, #28]
 8009496:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800949a:	931a      	str	r3, [sp, #104]	; 0x68
 800949c:	4654      	mov	r4, sl
 800949e:	2205      	movs	r2, #5
 80094a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094a4:	4851      	ldr	r0, [pc, #324]	; (80095ec <_svfiprintf_r+0x1ec>)
 80094a6:	f7f6 fe9b 	bl	80001e0 <memchr>
 80094aa:	9a04      	ldr	r2, [sp, #16]
 80094ac:	b9d8      	cbnz	r0, 80094e6 <_svfiprintf_r+0xe6>
 80094ae:	06d0      	lsls	r0, r2, #27
 80094b0:	bf44      	itt	mi
 80094b2:	2320      	movmi	r3, #32
 80094b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094b8:	0711      	lsls	r1, r2, #28
 80094ba:	bf44      	itt	mi
 80094bc:	232b      	movmi	r3, #43	; 0x2b
 80094be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094c2:	f89a 3000 	ldrb.w	r3, [sl]
 80094c6:	2b2a      	cmp	r3, #42	; 0x2a
 80094c8:	d015      	beq.n	80094f6 <_svfiprintf_r+0xf6>
 80094ca:	9a07      	ldr	r2, [sp, #28]
 80094cc:	4654      	mov	r4, sl
 80094ce:	2000      	movs	r0, #0
 80094d0:	f04f 0c0a 	mov.w	ip, #10
 80094d4:	4621      	mov	r1, r4
 80094d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094da:	3b30      	subs	r3, #48	; 0x30
 80094dc:	2b09      	cmp	r3, #9
 80094de:	d94e      	bls.n	800957e <_svfiprintf_r+0x17e>
 80094e0:	b1b0      	cbz	r0, 8009510 <_svfiprintf_r+0x110>
 80094e2:	9207      	str	r2, [sp, #28]
 80094e4:	e014      	b.n	8009510 <_svfiprintf_r+0x110>
 80094e6:	eba0 0308 	sub.w	r3, r0, r8
 80094ea:	fa09 f303 	lsl.w	r3, r9, r3
 80094ee:	4313      	orrs	r3, r2
 80094f0:	9304      	str	r3, [sp, #16]
 80094f2:	46a2      	mov	sl, r4
 80094f4:	e7d2      	b.n	800949c <_svfiprintf_r+0x9c>
 80094f6:	9b03      	ldr	r3, [sp, #12]
 80094f8:	1d19      	adds	r1, r3, #4
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	9103      	str	r1, [sp, #12]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	bfbb      	ittet	lt
 8009502:	425b      	neglt	r3, r3
 8009504:	f042 0202 	orrlt.w	r2, r2, #2
 8009508:	9307      	strge	r3, [sp, #28]
 800950a:	9307      	strlt	r3, [sp, #28]
 800950c:	bfb8      	it	lt
 800950e:	9204      	strlt	r2, [sp, #16]
 8009510:	7823      	ldrb	r3, [r4, #0]
 8009512:	2b2e      	cmp	r3, #46	; 0x2e
 8009514:	d10c      	bne.n	8009530 <_svfiprintf_r+0x130>
 8009516:	7863      	ldrb	r3, [r4, #1]
 8009518:	2b2a      	cmp	r3, #42	; 0x2a
 800951a:	d135      	bne.n	8009588 <_svfiprintf_r+0x188>
 800951c:	9b03      	ldr	r3, [sp, #12]
 800951e:	1d1a      	adds	r2, r3, #4
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	9203      	str	r2, [sp, #12]
 8009524:	2b00      	cmp	r3, #0
 8009526:	bfb8      	it	lt
 8009528:	f04f 33ff 	movlt.w	r3, #4294967295
 800952c:	3402      	adds	r4, #2
 800952e:	9305      	str	r3, [sp, #20]
 8009530:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80095fc <_svfiprintf_r+0x1fc>
 8009534:	7821      	ldrb	r1, [r4, #0]
 8009536:	2203      	movs	r2, #3
 8009538:	4650      	mov	r0, sl
 800953a:	f7f6 fe51 	bl	80001e0 <memchr>
 800953e:	b140      	cbz	r0, 8009552 <_svfiprintf_r+0x152>
 8009540:	2340      	movs	r3, #64	; 0x40
 8009542:	eba0 000a 	sub.w	r0, r0, sl
 8009546:	fa03 f000 	lsl.w	r0, r3, r0
 800954a:	9b04      	ldr	r3, [sp, #16]
 800954c:	4303      	orrs	r3, r0
 800954e:	3401      	adds	r4, #1
 8009550:	9304      	str	r3, [sp, #16]
 8009552:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009556:	4826      	ldr	r0, [pc, #152]	; (80095f0 <_svfiprintf_r+0x1f0>)
 8009558:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800955c:	2206      	movs	r2, #6
 800955e:	f7f6 fe3f 	bl	80001e0 <memchr>
 8009562:	2800      	cmp	r0, #0
 8009564:	d038      	beq.n	80095d8 <_svfiprintf_r+0x1d8>
 8009566:	4b23      	ldr	r3, [pc, #140]	; (80095f4 <_svfiprintf_r+0x1f4>)
 8009568:	bb1b      	cbnz	r3, 80095b2 <_svfiprintf_r+0x1b2>
 800956a:	9b03      	ldr	r3, [sp, #12]
 800956c:	3307      	adds	r3, #7
 800956e:	f023 0307 	bic.w	r3, r3, #7
 8009572:	3308      	adds	r3, #8
 8009574:	9303      	str	r3, [sp, #12]
 8009576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009578:	4433      	add	r3, r6
 800957a:	9309      	str	r3, [sp, #36]	; 0x24
 800957c:	e767      	b.n	800944e <_svfiprintf_r+0x4e>
 800957e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009582:	460c      	mov	r4, r1
 8009584:	2001      	movs	r0, #1
 8009586:	e7a5      	b.n	80094d4 <_svfiprintf_r+0xd4>
 8009588:	2300      	movs	r3, #0
 800958a:	3401      	adds	r4, #1
 800958c:	9305      	str	r3, [sp, #20]
 800958e:	4619      	mov	r1, r3
 8009590:	f04f 0c0a 	mov.w	ip, #10
 8009594:	4620      	mov	r0, r4
 8009596:	f810 2b01 	ldrb.w	r2, [r0], #1
 800959a:	3a30      	subs	r2, #48	; 0x30
 800959c:	2a09      	cmp	r2, #9
 800959e:	d903      	bls.n	80095a8 <_svfiprintf_r+0x1a8>
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d0c5      	beq.n	8009530 <_svfiprintf_r+0x130>
 80095a4:	9105      	str	r1, [sp, #20]
 80095a6:	e7c3      	b.n	8009530 <_svfiprintf_r+0x130>
 80095a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80095ac:	4604      	mov	r4, r0
 80095ae:	2301      	movs	r3, #1
 80095b0:	e7f0      	b.n	8009594 <_svfiprintf_r+0x194>
 80095b2:	ab03      	add	r3, sp, #12
 80095b4:	9300      	str	r3, [sp, #0]
 80095b6:	462a      	mov	r2, r5
 80095b8:	4b0f      	ldr	r3, [pc, #60]	; (80095f8 <_svfiprintf_r+0x1f8>)
 80095ba:	a904      	add	r1, sp, #16
 80095bc:	4638      	mov	r0, r7
 80095be:	f7fc f9cd 	bl	800595c <_printf_float>
 80095c2:	1c42      	adds	r2, r0, #1
 80095c4:	4606      	mov	r6, r0
 80095c6:	d1d6      	bne.n	8009576 <_svfiprintf_r+0x176>
 80095c8:	89ab      	ldrh	r3, [r5, #12]
 80095ca:	065b      	lsls	r3, r3, #25
 80095cc:	f53f af2c 	bmi.w	8009428 <_svfiprintf_r+0x28>
 80095d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095d2:	b01d      	add	sp, #116	; 0x74
 80095d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095d8:	ab03      	add	r3, sp, #12
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	462a      	mov	r2, r5
 80095de:	4b06      	ldr	r3, [pc, #24]	; (80095f8 <_svfiprintf_r+0x1f8>)
 80095e0:	a904      	add	r1, sp, #16
 80095e2:	4638      	mov	r0, r7
 80095e4:	f7fc fc5e 	bl	8005ea4 <_printf_i>
 80095e8:	e7eb      	b.n	80095c2 <_svfiprintf_r+0x1c2>
 80095ea:	bf00      	nop
 80095ec:	0800a52c 	.word	0x0800a52c
 80095f0:	0800a536 	.word	0x0800a536
 80095f4:	0800595d 	.word	0x0800595d
 80095f8:	08009349 	.word	0x08009349
 80095fc:	0800a532 	.word	0x0800a532

08009600 <_read_r>:
 8009600:	b538      	push	{r3, r4, r5, lr}
 8009602:	4d07      	ldr	r5, [pc, #28]	; (8009620 <_read_r+0x20>)
 8009604:	4604      	mov	r4, r0
 8009606:	4608      	mov	r0, r1
 8009608:	4611      	mov	r1, r2
 800960a:	2200      	movs	r2, #0
 800960c:	602a      	str	r2, [r5, #0]
 800960e:	461a      	mov	r2, r3
 8009610:	f7f8 fe60 	bl	80022d4 <_read>
 8009614:	1c43      	adds	r3, r0, #1
 8009616:	d102      	bne.n	800961e <_read_r+0x1e>
 8009618:	682b      	ldr	r3, [r5, #0]
 800961a:	b103      	cbz	r3, 800961e <_read_r+0x1e>
 800961c:	6023      	str	r3, [r4, #0]
 800961e:	bd38      	pop	{r3, r4, r5, pc}
 8009620:	2000085c 	.word	0x2000085c
 8009624:	00000000 	.word	0x00000000

08009628 <nan>:
 8009628:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009630 <nan+0x8>
 800962c:	4770      	bx	lr
 800962e:	bf00      	nop
 8009630:	00000000 	.word	0x00000000
 8009634:	7ff80000 	.word	0x7ff80000

08009638 <_sbrk_r>:
 8009638:	b538      	push	{r3, r4, r5, lr}
 800963a:	4d06      	ldr	r5, [pc, #24]	; (8009654 <_sbrk_r+0x1c>)
 800963c:	2300      	movs	r3, #0
 800963e:	4604      	mov	r4, r0
 8009640:	4608      	mov	r0, r1
 8009642:	602b      	str	r3, [r5, #0]
 8009644:	f7f8 feb4 	bl	80023b0 <_sbrk>
 8009648:	1c43      	adds	r3, r0, #1
 800964a:	d102      	bne.n	8009652 <_sbrk_r+0x1a>
 800964c:	682b      	ldr	r3, [r5, #0]
 800964e:	b103      	cbz	r3, 8009652 <_sbrk_r+0x1a>
 8009650:	6023      	str	r3, [r4, #0]
 8009652:	bd38      	pop	{r3, r4, r5, pc}
 8009654:	2000085c 	.word	0x2000085c

08009658 <strncmp>:
 8009658:	b510      	push	{r4, lr}
 800965a:	b17a      	cbz	r2, 800967c <strncmp+0x24>
 800965c:	4603      	mov	r3, r0
 800965e:	3901      	subs	r1, #1
 8009660:	1884      	adds	r4, r0, r2
 8009662:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009666:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800966a:	4290      	cmp	r0, r2
 800966c:	d101      	bne.n	8009672 <strncmp+0x1a>
 800966e:	42a3      	cmp	r3, r4
 8009670:	d101      	bne.n	8009676 <strncmp+0x1e>
 8009672:	1a80      	subs	r0, r0, r2
 8009674:	bd10      	pop	{r4, pc}
 8009676:	2800      	cmp	r0, #0
 8009678:	d1f3      	bne.n	8009662 <strncmp+0xa>
 800967a:	e7fa      	b.n	8009672 <strncmp+0x1a>
 800967c:	4610      	mov	r0, r2
 800967e:	e7f9      	b.n	8009674 <strncmp+0x1c>

08009680 <__ascii_wctomb>:
 8009680:	b149      	cbz	r1, 8009696 <__ascii_wctomb+0x16>
 8009682:	2aff      	cmp	r2, #255	; 0xff
 8009684:	bf85      	ittet	hi
 8009686:	238a      	movhi	r3, #138	; 0x8a
 8009688:	6003      	strhi	r3, [r0, #0]
 800968a:	700a      	strbls	r2, [r1, #0]
 800968c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009690:	bf98      	it	ls
 8009692:	2001      	movls	r0, #1
 8009694:	4770      	bx	lr
 8009696:	4608      	mov	r0, r1
 8009698:	4770      	bx	lr
	...

0800969c <__assert_func>:
 800969c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800969e:	4614      	mov	r4, r2
 80096a0:	461a      	mov	r2, r3
 80096a2:	4b09      	ldr	r3, [pc, #36]	; (80096c8 <__assert_func+0x2c>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4605      	mov	r5, r0
 80096a8:	68d8      	ldr	r0, [r3, #12]
 80096aa:	b14c      	cbz	r4, 80096c0 <__assert_func+0x24>
 80096ac:	4b07      	ldr	r3, [pc, #28]	; (80096cc <__assert_func+0x30>)
 80096ae:	9100      	str	r1, [sp, #0]
 80096b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096b4:	4906      	ldr	r1, [pc, #24]	; (80096d0 <__assert_func+0x34>)
 80096b6:	462b      	mov	r3, r5
 80096b8:	f000 f9a6 	bl	8009a08 <fiprintf>
 80096bc:	f000 fc46 	bl	8009f4c <abort>
 80096c0:	4b04      	ldr	r3, [pc, #16]	; (80096d4 <__assert_func+0x38>)
 80096c2:	461c      	mov	r4, r3
 80096c4:	e7f3      	b.n	80096ae <__assert_func+0x12>
 80096c6:	bf00      	nop
 80096c8:	2000000c 	.word	0x2000000c
 80096cc:	0800a53d 	.word	0x0800a53d
 80096d0:	0800a54a 	.word	0x0800a54a
 80096d4:	0800a578 	.word	0x0800a578

080096d8 <__sflush_r>:
 80096d8:	898a      	ldrh	r2, [r1, #12]
 80096da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096de:	4605      	mov	r5, r0
 80096e0:	0710      	lsls	r0, r2, #28
 80096e2:	460c      	mov	r4, r1
 80096e4:	d458      	bmi.n	8009798 <__sflush_r+0xc0>
 80096e6:	684b      	ldr	r3, [r1, #4]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	dc05      	bgt.n	80096f8 <__sflush_r+0x20>
 80096ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	dc02      	bgt.n	80096f8 <__sflush_r+0x20>
 80096f2:	2000      	movs	r0, #0
 80096f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096fa:	2e00      	cmp	r6, #0
 80096fc:	d0f9      	beq.n	80096f2 <__sflush_r+0x1a>
 80096fe:	2300      	movs	r3, #0
 8009700:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009704:	682f      	ldr	r7, [r5, #0]
 8009706:	602b      	str	r3, [r5, #0]
 8009708:	d032      	beq.n	8009770 <__sflush_r+0x98>
 800970a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800970c:	89a3      	ldrh	r3, [r4, #12]
 800970e:	075a      	lsls	r2, r3, #29
 8009710:	d505      	bpl.n	800971e <__sflush_r+0x46>
 8009712:	6863      	ldr	r3, [r4, #4]
 8009714:	1ac0      	subs	r0, r0, r3
 8009716:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009718:	b10b      	cbz	r3, 800971e <__sflush_r+0x46>
 800971a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800971c:	1ac0      	subs	r0, r0, r3
 800971e:	2300      	movs	r3, #0
 8009720:	4602      	mov	r2, r0
 8009722:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009724:	6a21      	ldr	r1, [r4, #32]
 8009726:	4628      	mov	r0, r5
 8009728:	47b0      	blx	r6
 800972a:	1c43      	adds	r3, r0, #1
 800972c:	89a3      	ldrh	r3, [r4, #12]
 800972e:	d106      	bne.n	800973e <__sflush_r+0x66>
 8009730:	6829      	ldr	r1, [r5, #0]
 8009732:	291d      	cmp	r1, #29
 8009734:	d82c      	bhi.n	8009790 <__sflush_r+0xb8>
 8009736:	4a2a      	ldr	r2, [pc, #168]	; (80097e0 <__sflush_r+0x108>)
 8009738:	40ca      	lsrs	r2, r1
 800973a:	07d6      	lsls	r6, r2, #31
 800973c:	d528      	bpl.n	8009790 <__sflush_r+0xb8>
 800973e:	2200      	movs	r2, #0
 8009740:	6062      	str	r2, [r4, #4]
 8009742:	04d9      	lsls	r1, r3, #19
 8009744:	6922      	ldr	r2, [r4, #16]
 8009746:	6022      	str	r2, [r4, #0]
 8009748:	d504      	bpl.n	8009754 <__sflush_r+0x7c>
 800974a:	1c42      	adds	r2, r0, #1
 800974c:	d101      	bne.n	8009752 <__sflush_r+0x7a>
 800974e:	682b      	ldr	r3, [r5, #0]
 8009750:	b903      	cbnz	r3, 8009754 <__sflush_r+0x7c>
 8009752:	6560      	str	r0, [r4, #84]	; 0x54
 8009754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009756:	602f      	str	r7, [r5, #0]
 8009758:	2900      	cmp	r1, #0
 800975a:	d0ca      	beq.n	80096f2 <__sflush_r+0x1a>
 800975c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009760:	4299      	cmp	r1, r3
 8009762:	d002      	beq.n	800976a <__sflush_r+0x92>
 8009764:	4628      	mov	r0, r5
 8009766:	f7ff fd0f 	bl	8009188 <_free_r>
 800976a:	2000      	movs	r0, #0
 800976c:	6360      	str	r0, [r4, #52]	; 0x34
 800976e:	e7c1      	b.n	80096f4 <__sflush_r+0x1c>
 8009770:	6a21      	ldr	r1, [r4, #32]
 8009772:	2301      	movs	r3, #1
 8009774:	4628      	mov	r0, r5
 8009776:	47b0      	blx	r6
 8009778:	1c41      	adds	r1, r0, #1
 800977a:	d1c7      	bne.n	800970c <__sflush_r+0x34>
 800977c:	682b      	ldr	r3, [r5, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d0c4      	beq.n	800970c <__sflush_r+0x34>
 8009782:	2b1d      	cmp	r3, #29
 8009784:	d001      	beq.n	800978a <__sflush_r+0xb2>
 8009786:	2b16      	cmp	r3, #22
 8009788:	d101      	bne.n	800978e <__sflush_r+0xb6>
 800978a:	602f      	str	r7, [r5, #0]
 800978c:	e7b1      	b.n	80096f2 <__sflush_r+0x1a>
 800978e:	89a3      	ldrh	r3, [r4, #12]
 8009790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009794:	81a3      	strh	r3, [r4, #12]
 8009796:	e7ad      	b.n	80096f4 <__sflush_r+0x1c>
 8009798:	690f      	ldr	r7, [r1, #16]
 800979a:	2f00      	cmp	r7, #0
 800979c:	d0a9      	beq.n	80096f2 <__sflush_r+0x1a>
 800979e:	0793      	lsls	r3, r2, #30
 80097a0:	680e      	ldr	r6, [r1, #0]
 80097a2:	bf08      	it	eq
 80097a4:	694b      	ldreq	r3, [r1, #20]
 80097a6:	600f      	str	r7, [r1, #0]
 80097a8:	bf18      	it	ne
 80097aa:	2300      	movne	r3, #0
 80097ac:	eba6 0807 	sub.w	r8, r6, r7
 80097b0:	608b      	str	r3, [r1, #8]
 80097b2:	f1b8 0f00 	cmp.w	r8, #0
 80097b6:	dd9c      	ble.n	80096f2 <__sflush_r+0x1a>
 80097b8:	6a21      	ldr	r1, [r4, #32]
 80097ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80097bc:	4643      	mov	r3, r8
 80097be:	463a      	mov	r2, r7
 80097c0:	4628      	mov	r0, r5
 80097c2:	47b0      	blx	r6
 80097c4:	2800      	cmp	r0, #0
 80097c6:	dc06      	bgt.n	80097d6 <__sflush_r+0xfe>
 80097c8:	89a3      	ldrh	r3, [r4, #12]
 80097ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097ce:	81a3      	strh	r3, [r4, #12]
 80097d0:	f04f 30ff 	mov.w	r0, #4294967295
 80097d4:	e78e      	b.n	80096f4 <__sflush_r+0x1c>
 80097d6:	4407      	add	r7, r0
 80097d8:	eba8 0800 	sub.w	r8, r8, r0
 80097dc:	e7e9      	b.n	80097b2 <__sflush_r+0xda>
 80097de:	bf00      	nop
 80097e0:	20400001 	.word	0x20400001

080097e4 <_fflush_r>:
 80097e4:	b538      	push	{r3, r4, r5, lr}
 80097e6:	690b      	ldr	r3, [r1, #16]
 80097e8:	4605      	mov	r5, r0
 80097ea:	460c      	mov	r4, r1
 80097ec:	b913      	cbnz	r3, 80097f4 <_fflush_r+0x10>
 80097ee:	2500      	movs	r5, #0
 80097f0:	4628      	mov	r0, r5
 80097f2:	bd38      	pop	{r3, r4, r5, pc}
 80097f4:	b118      	cbz	r0, 80097fe <_fflush_r+0x1a>
 80097f6:	6983      	ldr	r3, [r0, #24]
 80097f8:	b90b      	cbnz	r3, 80097fe <_fflush_r+0x1a>
 80097fa:	f000 f887 	bl	800990c <__sinit>
 80097fe:	4b14      	ldr	r3, [pc, #80]	; (8009850 <_fflush_r+0x6c>)
 8009800:	429c      	cmp	r4, r3
 8009802:	d11b      	bne.n	800983c <_fflush_r+0x58>
 8009804:	686c      	ldr	r4, [r5, #4]
 8009806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d0ef      	beq.n	80097ee <_fflush_r+0xa>
 800980e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009810:	07d0      	lsls	r0, r2, #31
 8009812:	d404      	bmi.n	800981e <_fflush_r+0x3a>
 8009814:	0599      	lsls	r1, r3, #22
 8009816:	d402      	bmi.n	800981e <_fflush_r+0x3a>
 8009818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800981a:	f000 f927 	bl	8009a6c <__retarget_lock_acquire_recursive>
 800981e:	4628      	mov	r0, r5
 8009820:	4621      	mov	r1, r4
 8009822:	f7ff ff59 	bl	80096d8 <__sflush_r>
 8009826:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009828:	07da      	lsls	r2, r3, #31
 800982a:	4605      	mov	r5, r0
 800982c:	d4e0      	bmi.n	80097f0 <_fflush_r+0xc>
 800982e:	89a3      	ldrh	r3, [r4, #12]
 8009830:	059b      	lsls	r3, r3, #22
 8009832:	d4dd      	bmi.n	80097f0 <_fflush_r+0xc>
 8009834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009836:	f000 f91a 	bl	8009a6e <__retarget_lock_release_recursive>
 800983a:	e7d9      	b.n	80097f0 <_fflush_r+0xc>
 800983c:	4b05      	ldr	r3, [pc, #20]	; (8009854 <_fflush_r+0x70>)
 800983e:	429c      	cmp	r4, r3
 8009840:	d101      	bne.n	8009846 <_fflush_r+0x62>
 8009842:	68ac      	ldr	r4, [r5, #8]
 8009844:	e7df      	b.n	8009806 <_fflush_r+0x22>
 8009846:	4b04      	ldr	r3, [pc, #16]	; (8009858 <_fflush_r+0x74>)
 8009848:	429c      	cmp	r4, r3
 800984a:	bf08      	it	eq
 800984c:	68ec      	ldreq	r4, [r5, #12]
 800984e:	e7da      	b.n	8009806 <_fflush_r+0x22>
 8009850:	0800a59c 	.word	0x0800a59c
 8009854:	0800a5bc 	.word	0x0800a5bc
 8009858:	0800a57c 	.word	0x0800a57c

0800985c <std>:
 800985c:	2300      	movs	r3, #0
 800985e:	b510      	push	{r4, lr}
 8009860:	4604      	mov	r4, r0
 8009862:	e9c0 3300 	strd	r3, r3, [r0]
 8009866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800986a:	6083      	str	r3, [r0, #8]
 800986c:	8181      	strh	r1, [r0, #12]
 800986e:	6643      	str	r3, [r0, #100]	; 0x64
 8009870:	81c2      	strh	r2, [r0, #14]
 8009872:	6183      	str	r3, [r0, #24]
 8009874:	4619      	mov	r1, r3
 8009876:	2208      	movs	r2, #8
 8009878:	305c      	adds	r0, #92	; 0x5c
 800987a:	f7fb ffc7 	bl	800580c <memset>
 800987e:	4b05      	ldr	r3, [pc, #20]	; (8009894 <std+0x38>)
 8009880:	6263      	str	r3, [r4, #36]	; 0x24
 8009882:	4b05      	ldr	r3, [pc, #20]	; (8009898 <std+0x3c>)
 8009884:	62a3      	str	r3, [r4, #40]	; 0x28
 8009886:	4b05      	ldr	r3, [pc, #20]	; (800989c <std+0x40>)
 8009888:	62e3      	str	r3, [r4, #44]	; 0x2c
 800988a:	4b05      	ldr	r3, [pc, #20]	; (80098a0 <std+0x44>)
 800988c:	6224      	str	r4, [r4, #32]
 800988e:	6323      	str	r3, [r4, #48]	; 0x30
 8009890:	bd10      	pop	{r4, pc}
 8009892:	bf00      	nop
 8009894:	0800655d 	.word	0x0800655d
 8009898:	0800657f 	.word	0x0800657f
 800989c:	080065b7 	.word	0x080065b7
 80098a0:	080065db 	.word	0x080065db

080098a4 <_cleanup_r>:
 80098a4:	4901      	ldr	r1, [pc, #4]	; (80098ac <_cleanup_r+0x8>)
 80098a6:	f000 b8c1 	b.w	8009a2c <_fwalk_reent>
 80098aa:	bf00      	nop
 80098ac:	080097e5 	.word	0x080097e5

080098b0 <__sfmoreglue>:
 80098b0:	b570      	push	{r4, r5, r6, lr}
 80098b2:	2268      	movs	r2, #104	; 0x68
 80098b4:	1e4d      	subs	r5, r1, #1
 80098b6:	4355      	muls	r5, r2
 80098b8:	460e      	mov	r6, r1
 80098ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80098be:	f7ff fccf 	bl	8009260 <_malloc_r>
 80098c2:	4604      	mov	r4, r0
 80098c4:	b140      	cbz	r0, 80098d8 <__sfmoreglue+0x28>
 80098c6:	2100      	movs	r1, #0
 80098c8:	e9c0 1600 	strd	r1, r6, [r0]
 80098cc:	300c      	adds	r0, #12
 80098ce:	60a0      	str	r0, [r4, #8]
 80098d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80098d4:	f7fb ff9a 	bl	800580c <memset>
 80098d8:	4620      	mov	r0, r4
 80098da:	bd70      	pop	{r4, r5, r6, pc}

080098dc <__sfp_lock_acquire>:
 80098dc:	4801      	ldr	r0, [pc, #4]	; (80098e4 <__sfp_lock_acquire+0x8>)
 80098de:	f000 b8c5 	b.w	8009a6c <__retarget_lock_acquire_recursive>
 80098e2:	bf00      	nop
 80098e4:	20000861 	.word	0x20000861

080098e8 <__sfp_lock_release>:
 80098e8:	4801      	ldr	r0, [pc, #4]	; (80098f0 <__sfp_lock_release+0x8>)
 80098ea:	f000 b8c0 	b.w	8009a6e <__retarget_lock_release_recursive>
 80098ee:	bf00      	nop
 80098f0:	20000861 	.word	0x20000861

080098f4 <__sinit_lock_acquire>:
 80098f4:	4801      	ldr	r0, [pc, #4]	; (80098fc <__sinit_lock_acquire+0x8>)
 80098f6:	f000 b8b9 	b.w	8009a6c <__retarget_lock_acquire_recursive>
 80098fa:	bf00      	nop
 80098fc:	20000862 	.word	0x20000862

08009900 <__sinit_lock_release>:
 8009900:	4801      	ldr	r0, [pc, #4]	; (8009908 <__sinit_lock_release+0x8>)
 8009902:	f000 b8b4 	b.w	8009a6e <__retarget_lock_release_recursive>
 8009906:	bf00      	nop
 8009908:	20000862 	.word	0x20000862

0800990c <__sinit>:
 800990c:	b510      	push	{r4, lr}
 800990e:	4604      	mov	r4, r0
 8009910:	f7ff fff0 	bl	80098f4 <__sinit_lock_acquire>
 8009914:	69a3      	ldr	r3, [r4, #24]
 8009916:	b11b      	cbz	r3, 8009920 <__sinit+0x14>
 8009918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800991c:	f7ff bff0 	b.w	8009900 <__sinit_lock_release>
 8009920:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009924:	6523      	str	r3, [r4, #80]	; 0x50
 8009926:	4b13      	ldr	r3, [pc, #76]	; (8009974 <__sinit+0x68>)
 8009928:	4a13      	ldr	r2, [pc, #76]	; (8009978 <__sinit+0x6c>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	62a2      	str	r2, [r4, #40]	; 0x28
 800992e:	42a3      	cmp	r3, r4
 8009930:	bf04      	itt	eq
 8009932:	2301      	moveq	r3, #1
 8009934:	61a3      	streq	r3, [r4, #24]
 8009936:	4620      	mov	r0, r4
 8009938:	f000 f820 	bl	800997c <__sfp>
 800993c:	6060      	str	r0, [r4, #4]
 800993e:	4620      	mov	r0, r4
 8009940:	f000 f81c 	bl	800997c <__sfp>
 8009944:	60a0      	str	r0, [r4, #8]
 8009946:	4620      	mov	r0, r4
 8009948:	f000 f818 	bl	800997c <__sfp>
 800994c:	2200      	movs	r2, #0
 800994e:	60e0      	str	r0, [r4, #12]
 8009950:	2104      	movs	r1, #4
 8009952:	6860      	ldr	r0, [r4, #4]
 8009954:	f7ff ff82 	bl	800985c <std>
 8009958:	68a0      	ldr	r0, [r4, #8]
 800995a:	2201      	movs	r2, #1
 800995c:	2109      	movs	r1, #9
 800995e:	f7ff ff7d 	bl	800985c <std>
 8009962:	68e0      	ldr	r0, [r4, #12]
 8009964:	2202      	movs	r2, #2
 8009966:	2112      	movs	r1, #18
 8009968:	f7ff ff78 	bl	800985c <std>
 800996c:	2301      	movs	r3, #1
 800996e:	61a3      	str	r3, [r4, #24]
 8009970:	e7d2      	b.n	8009918 <__sinit+0xc>
 8009972:	bf00      	nop
 8009974:	0800a138 	.word	0x0800a138
 8009978:	080098a5 	.word	0x080098a5

0800997c <__sfp>:
 800997c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800997e:	4607      	mov	r7, r0
 8009980:	f7ff ffac 	bl	80098dc <__sfp_lock_acquire>
 8009984:	4b1e      	ldr	r3, [pc, #120]	; (8009a00 <__sfp+0x84>)
 8009986:	681e      	ldr	r6, [r3, #0]
 8009988:	69b3      	ldr	r3, [r6, #24]
 800998a:	b913      	cbnz	r3, 8009992 <__sfp+0x16>
 800998c:	4630      	mov	r0, r6
 800998e:	f7ff ffbd 	bl	800990c <__sinit>
 8009992:	3648      	adds	r6, #72	; 0x48
 8009994:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009998:	3b01      	subs	r3, #1
 800999a:	d503      	bpl.n	80099a4 <__sfp+0x28>
 800999c:	6833      	ldr	r3, [r6, #0]
 800999e:	b30b      	cbz	r3, 80099e4 <__sfp+0x68>
 80099a0:	6836      	ldr	r6, [r6, #0]
 80099a2:	e7f7      	b.n	8009994 <__sfp+0x18>
 80099a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80099a8:	b9d5      	cbnz	r5, 80099e0 <__sfp+0x64>
 80099aa:	4b16      	ldr	r3, [pc, #88]	; (8009a04 <__sfp+0x88>)
 80099ac:	60e3      	str	r3, [r4, #12]
 80099ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80099b2:	6665      	str	r5, [r4, #100]	; 0x64
 80099b4:	f000 f859 	bl	8009a6a <__retarget_lock_init_recursive>
 80099b8:	f7ff ff96 	bl	80098e8 <__sfp_lock_release>
 80099bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80099c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80099c4:	6025      	str	r5, [r4, #0]
 80099c6:	61a5      	str	r5, [r4, #24]
 80099c8:	2208      	movs	r2, #8
 80099ca:	4629      	mov	r1, r5
 80099cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80099d0:	f7fb ff1c 	bl	800580c <memset>
 80099d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80099d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80099dc:	4620      	mov	r0, r4
 80099de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099e0:	3468      	adds	r4, #104	; 0x68
 80099e2:	e7d9      	b.n	8009998 <__sfp+0x1c>
 80099e4:	2104      	movs	r1, #4
 80099e6:	4638      	mov	r0, r7
 80099e8:	f7ff ff62 	bl	80098b0 <__sfmoreglue>
 80099ec:	4604      	mov	r4, r0
 80099ee:	6030      	str	r0, [r6, #0]
 80099f0:	2800      	cmp	r0, #0
 80099f2:	d1d5      	bne.n	80099a0 <__sfp+0x24>
 80099f4:	f7ff ff78 	bl	80098e8 <__sfp_lock_release>
 80099f8:	230c      	movs	r3, #12
 80099fa:	603b      	str	r3, [r7, #0]
 80099fc:	e7ee      	b.n	80099dc <__sfp+0x60>
 80099fe:	bf00      	nop
 8009a00:	0800a138 	.word	0x0800a138
 8009a04:	ffff0001 	.word	0xffff0001

08009a08 <fiprintf>:
 8009a08:	b40e      	push	{r1, r2, r3}
 8009a0a:	b503      	push	{r0, r1, lr}
 8009a0c:	4601      	mov	r1, r0
 8009a0e:	ab03      	add	r3, sp, #12
 8009a10:	4805      	ldr	r0, [pc, #20]	; (8009a28 <fiprintf+0x20>)
 8009a12:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a16:	6800      	ldr	r0, [r0, #0]
 8009a18:	9301      	str	r3, [sp, #4]
 8009a1a:	f000 f8a7 	bl	8009b6c <_vfiprintf_r>
 8009a1e:	b002      	add	sp, #8
 8009a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a24:	b003      	add	sp, #12
 8009a26:	4770      	bx	lr
 8009a28:	2000000c 	.word	0x2000000c

08009a2c <_fwalk_reent>:
 8009a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a30:	4606      	mov	r6, r0
 8009a32:	4688      	mov	r8, r1
 8009a34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009a38:	2700      	movs	r7, #0
 8009a3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a3e:	f1b9 0901 	subs.w	r9, r9, #1
 8009a42:	d505      	bpl.n	8009a50 <_fwalk_reent+0x24>
 8009a44:	6824      	ldr	r4, [r4, #0]
 8009a46:	2c00      	cmp	r4, #0
 8009a48:	d1f7      	bne.n	8009a3a <_fwalk_reent+0xe>
 8009a4a:	4638      	mov	r0, r7
 8009a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a50:	89ab      	ldrh	r3, [r5, #12]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d907      	bls.n	8009a66 <_fwalk_reent+0x3a>
 8009a56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	d003      	beq.n	8009a66 <_fwalk_reent+0x3a>
 8009a5e:	4629      	mov	r1, r5
 8009a60:	4630      	mov	r0, r6
 8009a62:	47c0      	blx	r8
 8009a64:	4307      	orrs	r7, r0
 8009a66:	3568      	adds	r5, #104	; 0x68
 8009a68:	e7e9      	b.n	8009a3e <_fwalk_reent+0x12>

08009a6a <__retarget_lock_init_recursive>:
 8009a6a:	4770      	bx	lr

08009a6c <__retarget_lock_acquire_recursive>:
 8009a6c:	4770      	bx	lr

08009a6e <__retarget_lock_release_recursive>:
 8009a6e:	4770      	bx	lr

08009a70 <memmove>:
 8009a70:	4288      	cmp	r0, r1
 8009a72:	b510      	push	{r4, lr}
 8009a74:	eb01 0402 	add.w	r4, r1, r2
 8009a78:	d902      	bls.n	8009a80 <memmove+0x10>
 8009a7a:	4284      	cmp	r4, r0
 8009a7c:	4623      	mov	r3, r4
 8009a7e:	d807      	bhi.n	8009a90 <memmove+0x20>
 8009a80:	1e43      	subs	r3, r0, #1
 8009a82:	42a1      	cmp	r1, r4
 8009a84:	d008      	beq.n	8009a98 <memmove+0x28>
 8009a86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a8e:	e7f8      	b.n	8009a82 <memmove+0x12>
 8009a90:	4402      	add	r2, r0
 8009a92:	4601      	mov	r1, r0
 8009a94:	428a      	cmp	r2, r1
 8009a96:	d100      	bne.n	8009a9a <memmove+0x2a>
 8009a98:	bd10      	pop	{r4, pc}
 8009a9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009aa2:	e7f7      	b.n	8009a94 <memmove+0x24>

08009aa4 <__malloc_lock>:
 8009aa4:	4801      	ldr	r0, [pc, #4]	; (8009aac <__malloc_lock+0x8>)
 8009aa6:	f7ff bfe1 	b.w	8009a6c <__retarget_lock_acquire_recursive>
 8009aaa:	bf00      	nop
 8009aac:	20000860 	.word	0x20000860

08009ab0 <__malloc_unlock>:
 8009ab0:	4801      	ldr	r0, [pc, #4]	; (8009ab8 <__malloc_unlock+0x8>)
 8009ab2:	f7ff bfdc 	b.w	8009a6e <__retarget_lock_release_recursive>
 8009ab6:	bf00      	nop
 8009ab8:	20000860 	.word	0x20000860

08009abc <_realloc_r>:
 8009abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ac0:	4680      	mov	r8, r0
 8009ac2:	4614      	mov	r4, r2
 8009ac4:	460e      	mov	r6, r1
 8009ac6:	b921      	cbnz	r1, 8009ad2 <_realloc_r+0x16>
 8009ac8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009acc:	4611      	mov	r1, r2
 8009ace:	f7ff bbc7 	b.w	8009260 <_malloc_r>
 8009ad2:	b92a      	cbnz	r2, 8009ae0 <_realloc_r+0x24>
 8009ad4:	f7ff fb58 	bl	8009188 <_free_r>
 8009ad8:	4625      	mov	r5, r4
 8009ada:	4628      	mov	r0, r5
 8009adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ae0:	f000 faa0 	bl	800a024 <_malloc_usable_size_r>
 8009ae4:	4284      	cmp	r4, r0
 8009ae6:	4607      	mov	r7, r0
 8009ae8:	d802      	bhi.n	8009af0 <_realloc_r+0x34>
 8009aea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009aee:	d812      	bhi.n	8009b16 <_realloc_r+0x5a>
 8009af0:	4621      	mov	r1, r4
 8009af2:	4640      	mov	r0, r8
 8009af4:	f7ff fbb4 	bl	8009260 <_malloc_r>
 8009af8:	4605      	mov	r5, r0
 8009afa:	2800      	cmp	r0, #0
 8009afc:	d0ed      	beq.n	8009ada <_realloc_r+0x1e>
 8009afe:	42bc      	cmp	r4, r7
 8009b00:	4622      	mov	r2, r4
 8009b02:	4631      	mov	r1, r6
 8009b04:	bf28      	it	cs
 8009b06:	463a      	movcs	r2, r7
 8009b08:	f7fe fe58 	bl	80087bc <memcpy>
 8009b0c:	4631      	mov	r1, r6
 8009b0e:	4640      	mov	r0, r8
 8009b10:	f7ff fb3a 	bl	8009188 <_free_r>
 8009b14:	e7e1      	b.n	8009ada <_realloc_r+0x1e>
 8009b16:	4635      	mov	r5, r6
 8009b18:	e7df      	b.n	8009ada <_realloc_r+0x1e>

08009b1a <__sfputc_r>:
 8009b1a:	6893      	ldr	r3, [r2, #8]
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	b410      	push	{r4}
 8009b22:	6093      	str	r3, [r2, #8]
 8009b24:	da08      	bge.n	8009b38 <__sfputc_r+0x1e>
 8009b26:	6994      	ldr	r4, [r2, #24]
 8009b28:	42a3      	cmp	r3, r4
 8009b2a:	db01      	blt.n	8009b30 <__sfputc_r+0x16>
 8009b2c:	290a      	cmp	r1, #10
 8009b2e:	d103      	bne.n	8009b38 <__sfputc_r+0x1e>
 8009b30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b34:	f000 b94a 	b.w	8009dcc <__swbuf_r>
 8009b38:	6813      	ldr	r3, [r2, #0]
 8009b3a:	1c58      	adds	r0, r3, #1
 8009b3c:	6010      	str	r0, [r2, #0]
 8009b3e:	7019      	strb	r1, [r3, #0]
 8009b40:	4608      	mov	r0, r1
 8009b42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b46:	4770      	bx	lr

08009b48 <__sfputs_r>:
 8009b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b4a:	4606      	mov	r6, r0
 8009b4c:	460f      	mov	r7, r1
 8009b4e:	4614      	mov	r4, r2
 8009b50:	18d5      	adds	r5, r2, r3
 8009b52:	42ac      	cmp	r4, r5
 8009b54:	d101      	bne.n	8009b5a <__sfputs_r+0x12>
 8009b56:	2000      	movs	r0, #0
 8009b58:	e007      	b.n	8009b6a <__sfputs_r+0x22>
 8009b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b5e:	463a      	mov	r2, r7
 8009b60:	4630      	mov	r0, r6
 8009b62:	f7ff ffda 	bl	8009b1a <__sfputc_r>
 8009b66:	1c43      	adds	r3, r0, #1
 8009b68:	d1f3      	bne.n	8009b52 <__sfputs_r+0xa>
 8009b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009b6c <_vfiprintf_r>:
 8009b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b70:	460d      	mov	r5, r1
 8009b72:	b09d      	sub	sp, #116	; 0x74
 8009b74:	4614      	mov	r4, r2
 8009b76:	4698      	mov	r8, r3
 8009b78:	4606      	mov	r6, r0
 8009b7a:	b118      	cbz	r0, 8009b84 <_vfiprintf_r+0x18>
 8009b7c:	6983      	ldr	r3, [r0, #24]
 8009b7e:	b90b      	cbnz	r3, 8009b84 <_vfiprintf_r+0x18>
 8009b80:	f7ff fec4 	bl	800990c <__sinit>
 8009b84:	4b89      	ldr	r3, [pc, #548]	; (8009dac <_vfiprintf_r+0x240>)
 8009b86:	429d      	cmp	r5, r3
 8009b88:	d11b      	bne.n	8009bc2 <_vfiprintf_r+0x56>
 8009b8a:	6875      	ldr	r5, [r6, #4]
 8009b8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b8e:	07d9      	lsls	r1, r3, #31
 8009b90:	d405      	bmi.n	8009b9e <_vfiprintf_r+0x32>
 8009b92:	89ab      	ldrh	r3, [r5, #12]
 8009b94:	059a      	lsls	r2, r3, #22
 8009b96:	d402      	bmi.n	8009b9e <_vfiprintf_r+0x32>
 8009b98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b9a:	f7ff ff67 	bl	8009a6c <__retarget_lock_acquire_recursive>
 8009b9e:	89ab      	ldrh	r3, [r5, #12]
 8009ba0:	071b      	lsls	r3, r3, #28
 8009ba2:	d501      	bpl.n	8009ba8 <_vfiprintf_r+0x3c>
 8009ba4:	692b      	ldr	r3, [r5, #16]
 8009ba6:	b9eb      	cbnz	r3, 8009be4 <_vfiprintf_r+0x78>
 8009ba8:	4629      	mov	r1, r5
 8009baa:	4630      	mov	r0, r6
 8009bac:	f000 f960 	bl	8009e70 <__swsetup_r>
 8009bb0:	b1c0      	cbz	r0, 8009be4 <_vfiprintf_r+0x78>
 8009bb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bb4:	07dc      	lsls	r4, r3, #31
 8009bb6:	d50e      	bpl.n	8009bd6 <_vfiprintf_r+0x6a>
 8009bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bbc:	b01d      	add	sp, #116	; 0x74
 8009bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc2:	4b7b      	ldr	r3, [pc, #492]	; (8009db0 <_vfiprintf_r+0x244>)
 8009bc4:	429d      	cmp	r5, r3
 8009bc6:	d101      	bne.n	8009bcc <_vfiprintf_r+0x60>
 8009bc8:	68b5      	ldr	r5, [r6, #8]
 8009bca:	e7df      	b.n	8009b8c <_vfiprintf_r+0x20>
 8009bcc:	4b79      	ldr	r3, [pc, #484]	; (8009db4 <_vfiprintf_r+0x248>)
 8009bce:	429d      	cmp	r5, r3
 8009bd0:	bf08      	it	eq
 8009bd2:	68f5      	ldreq	r5, [r6, #12]
 8009bd4:	e7da      	b.n	8009b8c <_vfiprintf_r+0x20>
 8009bd6:	89ab      	ldrh	r3, [r5, #12]
 8009bd8:	0598      	lsls	r0, r3, #22
 8009bda:	d4ed      	bmi.n	8009bb8 <_vfiprintf_r+0x4c>
 8009bdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bde:	f7ff ff46 	bl	8009a6e <__retarget_lock_release_recursive>
 8009be2:	e7e9      	b.n	8009bb8 <_vfiprintf_r+0x4c>
 8009be4:	2300      	movs	r3, #0
 8009be6:	9309      	str	r3, [sp, #36]	; 0x24
 8009be8:	2320      	movs	r3, #32
 8009bea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009bee:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bf2:	2330      	movs	r3, #48	; 0x30
 8009bf4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009db8 <_vfiprintf_r+0x24c>
 8009bf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bfc:	f04f 0901 	mov.w	r9, #1
 8009c00:	4623      	mov	r3, r4
 8009c02:	469a      	mov	sl, r3
 8009c04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c08:	b10a      	cbz	r2, 8009c0e <_vfiprintf_r+0xa2>
 8009c0a:	2a25      	cmp	r2, #37	; 0x25
 8009c0c:	d1f9      	bne.n	8009c02 <_vfiprintf_r+0x96>
 8009c0e:	ebba 0b04 	subs.w	fp, sl, r4
 8009c12:	d00b      	beq.n	8009c2c <_vfiprintf_r+0xc0>
 8009c14:	465b      	mov	r3, fp
 8009c16:	4622      	mov	r2, r4
 8009c18:	4629      	mov	r1, r5
 8009c1a:	4630      	mov	r0, r6
 8009c1c:	f7ff ff94 	bl	8009b48 <__sfputs_r>
 8009c20:	3001      	adds	r0, #1
 8009c22:	f000 80aa 	beq.w	8009d7a <_vfiprintf_r+0x20e>
 8009c26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c28:	445a      	add	r2, fp
 8009c2a:	9209      	str	r2, [sp, #36]	; 0x24
 8009c2c:	f89a 3000 	ldrb.w	r3, [sl]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f000 80a2 	beq.w	8009d7a <_vfiprintf_r+0x20e>
 8009c36:	2300      	movs	r3, #0
 8009c38:	f04f 32ff 	mov.w	r2, #4294967295
 8009c3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c40:	f10a 0a01 	add.w	sl, sl, #1
 8009c44:	9304      	str	r3, [sp, #16]
 8009c46:	9307      	str	r3, [sp, #28]
 8009c48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c4c:	931a      	str	r3, [sp, #104]	; 0x68
 8009c4e:	4654      	mov	r4, sl
 8009c50:	2205      	movs	r2, #5
 8009c52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c56:	4858      	ldr	r0, [pc, #352]	; (8009db8 <_vfiprintf_r+0x24c>)
 8009c58:	f7f6 fac2 	bl	80001e0 <memchr>
 8009c5c:	9a04      	ldr	r2, [sp, #16]
 8009c5e:	b9d8      	cbnz	r0, 8009c98 <_vfiprintf_r+0x12c>
 8009c60:	06d1      	lsls	r1, r2, #27
 8009c62:	bf44      	itt	mi
 8009c64:	2320      	movmi	r3, #32
 8009c66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c6a:	0713      	lsls	r3, r2, #28
 8009c6c:	bf44      	itt	mi
 8009c6e:	232b      	movmi	r3, #43	; 0x2b
 8009c70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c74:	f89a 3000 	ldrb.w	r3, [sl]
 8009c78:	2b2a      	cmp	r3, #42	; 0x2a
 8009c7a:	d015      	beq.n	8009ca8 <_vfiprintf_r+0x13c>
 8009c7c:	9a07      	ldr	r2, [sp, #28]
 8009c7e:	4654      	mov	r4, sl
 8009c80:	2000      	movs	r0, #0
 8009c82:	f04f 0c0a 	mov.w	ip, #10
 8009c86:	4621      	mov	r1, r4
 8009c88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c8c:	3b30      	subs	r3, #48	; 0x30
 8009c8e:	2b09      	cmp	r3, #9
 8009c90:	d94e      	bls.n	8009d30 <_vfiprintf_r+0x1c4>
 8009c92:	b1b0      	cbz	r0, 8009cc2 <_vfiprintf_r+0x156>
 8009c94:	9207      	str	r2, [sp, #28]
 8009c96:	e014      	b.n	8009cc2 <_vfiprintf_r+0x156>
 8009c98:	eba0 0308 	sub.w	r3, r0, r8
 8009c9c:	fa09 f303 	lsl.w	r3, r9, r3
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	9304      	str	r3, [sp, #16]
 8009ca4:	46a2      	mov	sl, r4
 8009ca6:	e7d2      	b.n	8009c4e <_vfiprintf_r+0xe2>
 8009ca8:	9b03      	ldr	r3, [sp, #12]
 8009caa:	1d19      	adds	r1, r3, #4
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	9103      	str	r1, [sp, #12]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	bfbb      	ittet	lt
 8009cb4:	425b      	neglt	r3, r3
 8009cb6:	f042 0202 	orrlt.w	r2, r2, #2
 8009cba:	9307      	strge	r3, [sp, #28]
 8009cbc:	9307      	strlt	r3, [sp, #28]
 8009cbe:	bfb8      	it	lt
 8009cc0:	9204      	strlt	r2, [sp, #16]
 8009cc2:	7823      	ldrb	r3, [r4, #0]
 8009cc4:	2b2e      	cmp	r3, #46	; 0x2e
 8009cc6:	d10c      	bne.n	8009ce2 <_vfiprintf_r+0x176>
 8009cc8:	7863      	ldrb	r3, [r4, #1]
 8009cca:	2b2a      	cmp	r3, #42	; 0x2a
 8009ccc:	d135      	bne.n	8009d3a <_vfiprintf_r+0x1ce>
 8009cce:	9b03      	ldr	r3, [sp, #12]
 8009cd0:	1d1a      	adds	r2, r3, #4
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	9203      	str	r2, [sp, #12]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	bfb8      	it	lt
 8009cda:	f04f 33ff 	movlt.w	r3, #4294967295
 8009cde:	3402      	adds	r4, #2
 8009ce0:	9305      	str	r3, [sp, #20]
 8009ce2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009dc8 <_vfiprintf_r+0x25c>
 8009ce6:	7821      	ldrb	r1, [r4, #0]
 8009ce8:	2203      	movs	r2, #3
 8009cea:	4650      	mov	r0, sl
 8009cec:	f7f6 fa78 	bl	80001e0 <memchr>
 8009cf0:	b140      	cbz	r0, 8009d04 <_vfiprintf_r+0x198>
 8009cf2:	2340      	movs	r3, #64	; 0x40
 8009cf4:	eba0 000a 	sub.w	r0, r0, sl
 8009cf8:	fa03 f000 	lsl.w	r0, r3, r0
 8009cfc:	9b04      	ldr	r3, [sp, #16]
 8009cfe:	4303      	orrs	r3, r0
 8009d00:	3401      	adds	r4, #1
 8009d02:	9304      	str	r3, [sp, #16]
 8009d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d08:	482c      	ldr	r0, [pc, #176]	; (8009dbc <_vfiprintf_r+0x250>)
 8009d0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d0e:	2206      	movs	r2, #6
 8009d10:	f7f6 fa66 	bl	80001e0 <memchr>
 8009d14:	2800      	cmp	r0, #0
 8009d16:	d03f      	beq.n	8009d98 <_vfiprintf_r+0x22c>
 8009d18:	4b29      	ldr	r3, [pc, #164]	; (8009dc0 <_vfiprintf_r+0x254>)
 8009d1a:	bb1b      	cbnz	r3, 8009d64 <_vfiprintf_r+0x1f8>
 8009d1c:	9b03      	ldr	r3, [sp, #12]
 8009d1e:	3307      	adds	r3, #7
 8009d20:	f023 0307 	bic.w	r3, r3, #7
 8009d24:	3308      	adds	r3, #8
 8009d26:	9303      	str	r3, [sp, #12]
 8009d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d2a:	443b      	add	r3, r7
 8009d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d2e:	e767      	b.n	8009c00 <_vfiprintf_r+0x94>
 8009d30:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d34:	460c      	mov	r4, r1
 8009d36:	2001      	movs	r0, #1
 8009d38:	e7a5      	b.n	8009c86 <_vfiprintf_r+0x11a>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	3401      	adds	r4, #1
 8009d3e:	9305      	str	r3, [sp, #20]
 8009d40:	4619      	mov	r1, r3
 8009d42:	f04f 0c0a 	mov.w	ip, #10
 8009d46:	4620      	mov	r0, r4
 8009d48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d4c:	3a30      	subs	r2, #48	; 0x30
 8009d4e:	2a09      	cmp	r2, #9
 8009d50:	d903      	bls.n	8009d5a <_vfiprintf_r+0x1ee>
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d0c5      	beq.n	8009ce2 <_vfiprintf_r+0x176>
 8009d56:	9105      	str	r1, [sp, #20]
 8009d58:	e7c3      	b.n	8009ce2 <_vfiprintf_r+0x176>
 8009d5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d5e:	4604      	mov	r4, r0
 8009d60:	2301      	movs	r3, #1
 8009d62:	e7f0      	b.n	8009d46 <_vfiprintf_r+0x1da>
 8009d64:	ab03      	add	r3, sp, #12
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	462a      	mov	r2, r5
 8009d6a:	4b16      	ldr	r3, [pc, #88]	; (8009dc4 <_vfiprintf_r+0x258>)
 8009d6c:	a904      	add	r1, sp, #16
 8009d6e:	4630      	mov	r0, r6
 8009d70:	f7fb fdf4 	bl	800595c <_printf_float>
 8009d74:	4607      	mov	r7, r0
 8009d76:	1c78      	adds	r0, r7, #1
 8009d78:	d1d6      	bne.n	8009d28 <_vfiprintf_r+0x1bc>
 8009d7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d7c:	07d9      	lsls	r1, r3, #31
 8009d7e:	d405      	bmi.n	8009d8c <_vfiprintf_r+0x220>
 8009d80:	89ab      	ldrh	r3, [r5, #12]
 8009d82:	059a      	lsls	r2, r3, #22
 8009d84:	d402      	bmi.n	8009d8c <_vfiprintf_r+0x220>
 8009d86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d88:	f7ff fe71 	bl	8009a6e <__retarget_lock_release_recursive>
 8009d8c:	89ab      	ldrh	r3, [r5, #12]
 8009d8e:	065b      	lsls	r3, r3, #25
 8009d90:	f53f af12 	bmi.w	8009bb8 <_vfiprintf_r+0x4c>
 8009d94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d96:	e711      	b.n	8009bbc <_vfiprintf_r+0x50>
 8009d98:	ab03      	add	r3, sp, #12
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	462a      	mov	r2, r5
 8009d9e:	4b09      	ldr	r3, [pc, #36]	; (8009dc4 <_vfiprintf_r+0x258>)
 8009da0:	a904      	add	r1, sp, #16
 8009da2:	4630      	mov	r0, r6
 8009da4:	f7fc f87e 	bl	8005ea4 <_printf_i>
 8009da8:	e7e4      	b.n	8009d74 <_vfiprintf_r+0x208>
 8009daa:	bf00      	nop
 8009dac:	0800a59c 	.word	0x0800a59c
 8009db0:	0800a5bc 	.word	0x0800a5bc
 8009db4:	0800a57c 	.word	0x0800a57c
 8009db8:	0800a52c 	.word	0x0800a52c
 8009dbc:	0800a536 	.word	0x0800a536
 8009dc0:	0800595d 	.word	0x0800595d
 8009dc4:	08009b49 	.word	0x08009b49
 8009dc8:	0800a532 	.word	0x0800a532

08009dcc <__swbuf_r>:
 8009dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dce:	460e      	mov	r6, r1
 8009dd0:	4614      	mov	r4, r2
 8009dd2:	4605      	mov	r5, r0
 8009dd4:	b118      	cbz	r0, 8009dde <__swbuf_r+0x12>
 8009dd6:	6983      	ldr	r3, [r0, #24]
 8009dd8:	b90b      	cbnz	r3, 8009dde <__swbuf_r+0x12>
 8009dda:	f7ff fd97 	bl	800990c <__sinit>
 8009dde:	4b21      	ldr	r3, [pc, #132]	; (8009e64 <__swbuf_r+0x98>)
 8009de0:	429c      	cmp	r4, r3
 8009de2:	d12b      	bne.n	8009e3c <__swbuf_r+0x70>
 8009de4:	686c      	ldr	r4, [r5, #4]
 8009de6:	69a3      	ldr	r3, [r4, #24]
 8009de8:	60a3      	str	r3, [r4, #8]
 8009dea:	89a3      	ldrh	r3, [r4, #12]
 8009dec:	071a      	lsls	r2, r3, #28
 8009dee:	d52f      	bpl.n	8009e50 <__swbuf_r+0x84>
 8009df0:	6923      	ldr	r3, [r4, #16]
 8009df2:	b36b      	cbz	r3, 8009e50 <__swbuf_r+0x84>
 8009df4:	6923      	ldr	r3, [r4, #16]
 8009df6:	6820      	ldr	r0, [r4, #0]
 8009df8:	1ac0      	subs	r0, r0, r3
 8009dfa:	6963      	ldr	r3, [r4, #20]
 8009dfc:	b2f6      	uxtb	r6, r6
 8009dfe:	4283      	cmp	r3, r0
 8009e00:	4637      	mov	r7, r6
 8009e02:	dc04      	bgt.n	8009e0e <__swbuf_r+0x42>
 8009e04:	4621      	mov	r1, r4
 8009e06:	4628      	mov	r0, r5
 8009e08:	f7ff fcec 	bl	80097e4 <_fflush_r>
 8009e0c:	bb30      	cbnz	r0, 8009e5c <__swbuf_r+0x90>
 8009e0e:	68a3      	ldr	r3, [r4, #8]
 8009e10:	3b01      	subs	r3, #1
 8009e12:	60a3      	str	r3, [r4, #8]
 8009e14:	6823      	ldr	r3, [r4, #0]
 8009e16:	1c5a      	adds	r2, r3, #1
 8009e18:	6022      	str	r2, [r4, #0]
 8009e1a:	701e      	strb	r6, [r3, #0]
 8009e1c:	6963      	ldr	r3, [r4, #20]
 8009e1e:	3001      	adds	r0, #1
 8009e20:	4283      	cmp	r3, r0
 8009e22:	d004      	beq.n	8009e2e <__swbuf_r+0x62>
 8009e24:	89a3      	ldrh	r3, [r4, #12]
 8009e26:	07db      	lsls	r3, r3, #31
 8009e28:	d506      	bpl.n	8009e38 <__swbuf_r+0x6c>
 8009e2a:	2e0a      	cmp	r6, #10
 8009e2c:	d104      	bne.n	8009e38 <__swbuf_r+0x6c>
 8009e2e:	4621      	mov	r1, r4
 8009e30:	4628      	mov	r0, r5
 8009e32:	f7ff fcd7 	bl	80097e4 <_fflush_r>
 8009e36:	b988      	cbnz	r0, 8009e5c <__swbuf_r+0x90>
 8009e38:	4638      	mov	r0, r7
 8009e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e3c:	4b0a      	ldr	r3, [pc, #40]	; (8009e68 <__swbuf_r+0x9c>)
 8009e3e:	429c      	cmp	r4, r3
 8009e40:	d101      	bne.n	8009e46 <__swbuf_r+0x7a>
 8009e42:	68ac      	ldr	r4, [r5, #8]
 8009e44:	e7cf      	b.n	8009de6 <__swbuf_r+0x1a>
 8009e46:	4b09      	ldr	r3, [pc, #36]	; (8009e6c <__swbuf_r+0xa0>)
 8009e48:	429c      	cmp	r4, r3
 8009e4a:	bf08      	it	eq
 8009e4c:	68ec      	ldreq	r4, [r5, #12]
 8009e4e:	e7ca      	b.n	8009de6 <__swbuf_r+0x1a>
 8009e50:	4621      	mov	r1, r4
 8009e52:	4628      	mov	r0, r5
 8009e54:	f000 f80c 	bl	8009e70 <__swsetup_r>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	d0cb      	beq.n	8009df4 <__swbuf_r+0x28>
 8009e5c:	f04f 37ff 	mov.w	r7, #4294967295
 8009e60:	e7ea      	b.n	8009e38 <__swbuf_r+0x6c>
 8009e62:	bf00      	nop
 8009e64:	0800a59c 	.word	0x0800a59c
 8009e68:	0800a5bc 	.word	0x0800a5bc
 8009e6c:	0800a57c 	.word	0x0800a57c

08009e70 <__swsetup_r>:
 8009e70:	4b32      	ldr	r3, [pc, #200]	; (8009f3c <__swsetup_r+0xcc>)
 8009e72:	b570      	push	{r4, r5, r6, lr}
 8009e74:	681d      	ldr	r5, [r3, #0]
 8009e76:	4606      	mov	r6, r0
 8009e78:	460c      	mov	r4, r1
 8009e7a:	b125      	cbz	r5, 8009e86 <__swsetup_r+0x16>
 8009e7c:	69ab      	ldr	r3, [r5, #24]
 8009e7e:	b913      	cbnz	r3, 8009e86 <__swsetup_r+0x16>
 8009e80:	4628      	mov	r0, r5
 8009e82:	f7ff fd43 	bl	800990c <__sinit>
 8009e86:	4b2e      	ldr	r3, [pc, #184]	; (8009f40 <__swsetup_r+0xd0>)
 8009e88:	429c      	cmp	r4, r3
 8009e8a:	d10f      	bne.n	8009eac <__swsetup_r+0x3c>
 8009e8c:	686c      	ldr	r4, [r5, #4]
 8009e8e:	89a3      	ldrh	r3, [r4, #12]
 8009e90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e94:	0719      	lsls	r1, r3, #28
 8009e96:	d42c      	bmi.n	8009ef2 <__swsetup_r+0x82>
 8009e98:	06dd      	lsls	r5, r3, #27
 8009e9a:	d411      	bmi.n	8009ec0 <__swsetup_r+0x50>
 8009e9c:	2309      	movs	r3, #9
 8009e9e:	6033      	str	r3, [r6, #0]
 8009ea0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ea4:	81a3      	strh	r3, [r4, #12]
 8009ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8009eaa:	e03e      	b.n	8009f2a <__swsetup_r+0xba>
 8009eac:	4b25      	ldr	r3, [pc, #148]	; (8009f44 <__swsetup_r+0xd4>)
 8009eae:	429c      	cmp	r4, r3
 8009eb0:	d101      	bne.n	8009eb6 <__swsetup_r+0x46>
 8009eb2:	68ac      	ldr	r4, [r5, #8]
 8009eb4:	e7eb      	b.n	8009e8e <__swsetup_r+0x1e>
 8009eb6:	4b24      	ldr	r3, [pc, #144]	; (8009f48 <__swsetup_r+0xd8>)
 8009eb8:	429c      	cmp	r4, r3
 8009eba:	bf08      	it	eq
 8009ebc:	68ec      	ldreq	r4, [r5, #12]
 8009ebe:	e7e6      	b.n	8009e8e <__swsetup_r+0x1e>
 8009ec0:	0758      	lsls	r0, r3, #29
 8009ec2:	d512      	bpl.n	8009eea <__swsetup_r+0x7a>
 8009ec4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ec6:	b141      	cbz	r1, 8009eda <__swsetup_r+0x6a>
 8009ec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ecc:	4299      	cmp	r1, r3
 8009ece:	d002      	beq.n	8009ed6 <__swsetup_r+0x66>
 8009ed0:	4630      	mov	r0, r6
 8009ed2:	f7ff f959 	bl	8009188 <_free_r>
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	6363      	str	r3, [r4, #52]	; 0x34
 8009eda:	89a3      	ldrh	r3, [r4, #12]
 8009edc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ee0:	81a3      	strh	r3, [r4, #12]
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	6063      	str	r3, [r4, #4]
 8009ee6:	6923      	ldr	r3, [r4, #16]
 8009ee8:	6023      	str	r3, [r4, #0]
 8009eea:	89a3      	ldrh	r3, [r4, #12]
 8009eec:	f043 0308 	orr.w	r3, r3, #8
 8009ef0:	81a3      	strh	r3, [r4, #12]
 8009ef2:	6923      	ldr	r3, [r4, #16]
 8009ef4:	b94b      	cbnz	r3, 8009f0a <__swsetup_r+0x9a>
 8009ef6:	89a3      	ldrh	r3, [r4, #12]
 8009ef8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f00:	d003      	beq.n	8009f0a <__swsetup_r+0x9a>
 8009f02:	4621      	mov	r1, r4
 8009f04:	4630      	mov	r0, r6
 8009f06:	f000 f84d 	bl	8009fa4 <__smakebuf_r>
 8009f0a:	89a0      	ldrh	r0, [r4, #12]
 8009f0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f10:	f010 0301 	ands.w	r3, r0, #1
 8009f14:	d00a      	beq.n	8009f2c <__swsetup_r+0xbc>
 8009f16:	2300      	movs	r3, #0
 8009f18:	60a3      	str	r3, [r4, #8]
 8009f1a:	6963      	ldr	r3, [r4, #20]
 8009f1c:	425b      	negs	r3, r3
 8009f1e:	61a3      	str	r3, [r4, #24]
 8009f20:	6923      	ldr	r3, [r4, #16]
 8009f22:	b943      	cbnz	r3, 8009f36 <__swsetup_r+0xc6>
 8009f24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f28:	d1ba      	bne.n	8009ea0 <__swsetup_r+0x30>
 8009f2a:	bd70      	pop	{r4, r5, r6, pc}
 8009f2c:	0781      	lsls	r1, r0, #30
 8009f2e:	bf58      	it	pl
 8009f30:	6963      	ldrpl	r3, [r4, #20]
 8009f32:	60a3      	str	r3, [r4, #8]
 8009f34:	e7f4      	b.n	8009f20 <__swsetup_r+0xb0>
 8009f36:	2000      	movs	r0, #0
 8009f38:	e7f7      	b.n	8009f2a <__swsetup_r+0xba>
 8009f3a:	bf00      	nop
 8009f3c:	2000000c 	.word	0x2000000c
 8009f40:	0800a59c 	.word	0x0800a59c
 8009f44:	0800a5bc 	.word	0x0800a5bc
 8009f48:	0800a57c 	.word	0x0800a57c

08009f4c <abort>:
 8009f4c:	b508      	push	{r3, lr}
 8009f4e:	2006      	movs	r0, #6
 8009f50:	f000 f898 	bl	800a084 <raise>
 8009f54:	2001      	movs	r0, #1
 8009f56:	f7f8 f9b3 	bl	80022c0 <_exit>

08009f5a <__swhatbuf_r>:
 8009f5a:	b570      	push	{r4, r5, r6, lr}
 8009f5c:	460e      	mov	r6, r1
 8009f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f62:	2900      	cmp	r1, #0
 8009f64:	b096      	sub	sp, #88	; 0x58
 8009f66:	4614      	mov	r4, r2
 8009f68:	461d      	mov	r5, r3
 8009f6a:	da08      	bge.n	8009f7e <__swhatbuf_r+0x24>
 8009f6c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009f70:	2200      	movs	r2, #0
 8009f72:	602a      	str	r2, [r5, #0]
 8009f74:	061a      	lsls	r2, r3, #24
 8009f76:	d410      	bmi.n	8009f9a <__swhatbuf_r+0x40>
 8009f78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f7c:	e00e      	b.n	8009f9c <__swhatbuf_r+0x42>
 8009f7e:	466a      	mov	r2, sp
 8009f80:	f000 f89c 	bl	800a0bc <_fstat_r>
 8009f84:	2800      	cmp	r0, #0
 8009f86:	dbf1      	blt.n	8009f6c <__swhatbuf_r+0x12>
 8009f88:	9a01      	ldr	r2, [sp, #4]
 8009f8a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f8e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f92:	425a      	negs	r2, r3
 8009f94:	415a      	adcs	r2, r3
 8009f96:	602a      	str	r2, [r5, #0]
 8009f98:	e7ee      	b.n	8009f78 <__swhatbuf_r+0x1e>
 8009f9a:	2340      	movs	r3, #64	; 0x40
 8009f9c:	2000      	movs	r0, #0
 8009f9e:	6023      	str	r3, [r4, #0]
 8009fa0:	b016      	add	sp, #88	; 0x58
 8009fa2:	bd70      	pop	{r4, r5, r6, pc}

08009fa4 <__smakebuf_r>:
 8009fa4:	898b      	ldrh	r3, [r1, #12]
 8009fa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009fa8:	079d      	lsls	r5, r3, #30
 8009faa:	4606      	mov	r6, r0
 8009fac:	460c      	mov	r4, r1
 8009fae:	d507      	bpl.n	8009fc0 <__smakebuf_r+0x1c>
 8009fb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009fb4:	6023      	str	r3, [r4, #0]
 8009fb6:	6123      	str	r3, [r4, #16]
 8009fb8:	2301      	movs	r3, #1
 8009fba:	6163      	str	r3, [r4, #20]
 8009fbc:	b002      	add	sp, #8
 8009fbe:	bd70      	pop	{r4, r5, r6, pc}
 8009fc0:	ab01      	add	r3, sp, #4
 8009fc2:	466a      	mov	r2, sp
 8009fc4:	f7ff ffc9 	bl	8009f5a <__swhatbuf_r>
 8009fc8:	9900      	ldr	r1, [sp, #0]
 8009fca:	4605      	mov	r5, r0
 8009fcc:	4630      	mov	r0, r6
 8009fce:	f7ff f947 	bl	8009260 <_malloc_r>
 8009fd2:	b948      	cbnz	r0, 8009fe8 <__smakebuf_r+0x44>
 8009fd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fd8:	059a      	lsls	r2, r3, #22
 8009fda:	d4ef      	bmi.n	8009fbc <__smakebuf_r+0x18>
 8009fdc:	f023 0303 	bic.w	r3, r3, #3
 8009fe0:	f043 0302 	orr.w	r3, r3, #2
 8009fe4:	81a3      	strh	r3, [r4, #12]
 8009fe6:	e7e3      	b.n	8009fb0 <__smakebuf_r+0xc>
 8009fe8:	4b0d      	ldr	r3, [pc, #52]	; (800a020 <__smakebuf_r+0x7c>)
 8009fea:	62b3      	str	r3, [r6, #40]	; 0x28
 8009fec:	89a3      	ldrh	r3, [r4, #12]
 8009fee:	6020      	str	r0, [r4, #0]
 8009ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ff4:	81a3      	strh	r3, [r4, #12]
 8009ff6:	9b00      	ldr	r3, [sp, #0]
 8009ff8:	6163      	str	r3, [r4, #20]
 8009ffa:	9b01      	ldr	r3, [sp, #4]
 8009ffc:	6120      	str	r0, [r4, #16]
 8009ffe:	b15b      	cbz	r3, 800a018 <__smakebuf_r+0x74>
 800a000:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a004:	4630      	mov	r0, r6
 800a006:	f000 f86b 	bl	800a0e0 <_isatty_r>
 800a00a:	b128      	cbz	r0, 800a018 <__smakebuf_r+0x74>
 800a00c:	89a3      	ldrh	r3, [r4, #12]
 800a00e:	f023 0303 	bic.w	r3, r3, #3
 800a012:	f043 0301 	orr.w	r3, r3, #1
 800a016:	81a3      	strh	r3, [r4, #12]
 800a018:	89a0      	ldrh	r0, [r4, #12]
 800a01a:	4305      	orrs	r5, r0
 800a01c:	81a5      	strh	r5, [r4, #12]
 800a01e:	e7cd      	b.n	8009fbc <__smakebuf_r+0x18>
 800a020:	080098a5 	.word	0x080098a5

0800a024 <_malloc_usable_size_r>:
 800a024:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a028:	1f18      	subs	r0, r3, #4
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	bfbc      	itt	lt
 800a02e:	580b      	ldrlt	r3, [r1, r0]
 800a030:	18c0      	addlt	r0, r0, r3
 800a032:	4770      	bx	lr

0800a034 <_raise_r>:
 800a034:	291f      	cmp	r1, #31
 800a036:	b538      	push	{r3, r4, r5, lr}
 800a038:	4604      	mov	r4, r0
 800a03a:	460d      	mov	r5, r1
 800a03c:	d904      	bls.n	800a048 <_raise_r+0x14>
 800a03e:	2316      	movs	r3, #22
 800a040:	6003      	str	r3, [r0, #0]
 800a042:	f04f 30ff 	mov.w	r0, #4294967295
 800a046:	bd38      	pop	{r3, r4, r5, pc}
 800a048:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a04a:	b112      	cbz	r2, 800a052 <_raise_r+0x1e>
 800a04c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a050:	b94b      	cbnz	r3, 800a066 <_raise_r+0x32>
 800a052:	4620      	mov	r0, r4
 800a054:	f000 f830 	bl	800a0b8 <_getpid_r>
 800a058:	462a      	mov	r2, r5
 800a05a:	4601      	mov	r1, r0
 800a05c:	4620      	mov	r0, r4
 800a05e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a062:	f000 b817 	b.w	800a094 <_kill_r>
 800a066:	2b01      	cmp	r3, #1
 800a068:	d00a      	beq.n	800a080 <_raise_r+0x4c>
 800a06a:	1c59      	adds	r1, r3, #1
 800a06c:	d103      	bne.n	800a076 <_raise_r+0x42>
 800a06e:	2316      	movs	r3, #22
 800a070:	6003      	str	r3, [r0, #0]
 800a072:	2001      	movs	r0, #1
 800a074:	e7e7      	b.n	800a046 <_raise_r+0x12>
 800a076:	2400      	movs	r4, #0
 800a078:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a07c:	4628      	mov	r0, r5
 800a07e:	4798      	blx	r3
 800a080:	2000      	movs	r0, #0
 800a082:	e7e0      	b.n	800a046 <_raise_r+0x12>

0800a084 <raise>:
 800a084:	4b02      	ldr	r3, [pc, #8]	; (800a090 <raise+0xc>)
 800a086:	4601      	mov	r1, r0
 800a088:	6818      	ldr	r0, [r3, #0]
 800a08a:	f7ff bfd3 	b.w	800a034 <_raise_r>
 800a08e:	bf00      	nop
 800a090:	2000000c 	.word	0x2000000c

0800a094 <_kill_r>:
 800a094:	b538      	push	{r3, r4, r5, lr}
 800a096:	4d07      	ldr	r5, [pc, #28]	; (800a0b4 <_kill_r+0x20>)
 800a098:	2300      	movs	r3, #0
 800a09a:	4604      	mov	r4, r0
 800a09c:	4608      	mov	r0, r1
 800a09e:	4611      	mov	r1, r2
 800a0a0:	602b      	str	r3, [r5, #0]
 800a0a2:	f7f8 f8fd 	bl	80022a0 <_kill>
 800a0a6:	1c43      	adds	r3, r0, #1
 800a0a8:	d102      	bne.n	800a0b0 <_kill_r+0x1c>
 800a0aa:	682b      	ldr	r3, [r5, #0]
 800a0ac:	b103      	cbz	r3, 800a0b0 <_kill_r+0x1c>
 800a0ae:	6023      	str	r3, [r4, #0]
 800a0b0:	bd38      	pop	{r3, r4, r5, pc}
 800a0b2:	bf00      	nop
 800a0b4:	2000085c 	.word	0x2000085c

0800a0b8 <_getpid_r>:
 800a0b8:	f7f8 b8ea 	b.w	8002290 <_getpid>

0800a0bc <_fstat_r>:
 800a0bc:	b538      	push	{r3, r4, r5, lr}
 800a0be:	4d07      	ldr	r5, [pc, #28]	; (800a0dc <_fstat_r+0x20>)
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	4608      	mov	r0, r1
 800a0c6:	4611      	mov	r1, r2
 800a0c8:	602b      	str	r3, [r5, #0]
 800a0ca:	f7f8 f948 	bl	800235e <_fstat>
 800a0ce:	1c43      	adds	r3, r0, #1
 800a0d0:	d102      	bne.n	800a0d8 <_fstat_r+0x1c>
 800a0d2:	682b      	ldr	r3, [r5, #0]
 800a0d4:	b103      	cbz	r3, 800a0d8 <_fstat_r+0x1c>
 800a0d6:	6023      	str	r3, [r4, #0]
 800a0d8:	bd38      	pop	{r3, r4, r5, pc}
 800a0da:	bf00      	nop
 800a0dc:	2000085c 	.word	0x2000085c

0800a0e0 <_isatty_r>:
 800a0e0:	b538      	push	{r3, r4, r5, lr}
 800a0e2:	4d06      	ldr	r5, [pc, #24]	; (800a0fc <_isatty_r+0x1c>)
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	4608      	mov	r0, r1
 800a0ea:	602b      	str	r3, [r5, #0]
 800a0ec:	f7f8 f947 	bl	800237e <_isatty>
 800a0f0:	1c43      	adds	r3, r0, #1
 800a0f2:	d102      	bne.n	800a0fa <_isatty_r+0x1a>
 800a0f4:	682b      	ldr	r3, [r5, #0]
 800a0f6:	b103      	cbz	r3, 800a0fa <_isatty_r+0x1a>
 800a0f8:	6023      	str	r3, [r4, #0]
 800a0fa:	bd38      	pop	{r3, r4, r5, pc}
 800a0fc:	2000085c 	.word	0x2000085c

0800a100 <_init>:
 800a100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a102:	bf00      	nop
 800a104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a106:	bc08      	pop	{r3}
 800a108:	469e      	mov	lr, r3
 800a10a:	4770      	bx	lr

0800a10c <_fini>:
 800a10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a10e:	bf00      	nop
 800a110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a112:	bc08      	pop	{r3}
 800a114:	469e      	mov	lr, r3
 800a116:	4770      	bx	lr
